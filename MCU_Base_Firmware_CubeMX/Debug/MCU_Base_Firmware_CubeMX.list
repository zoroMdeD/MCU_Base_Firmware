
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003858  08018cf8  08018cf8  00028cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c550  0801c550  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c550  0801c550  0002c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c558  0801c558  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c558  0801c558  0002c558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c55c  0801c55c  0002c55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801c560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000691c  200001f8  0801c758  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20006b14  0801c758  00036b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067811  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b82  00000000  00000000  00097a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  000a05c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fc0  00000000  00000000  000a26c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003589e  00000000  00000000  000a4688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003af38  00000000  00000000  000d9f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2e37  00000000  00000000  00114e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00207c95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a48  00000000  00000000  00207ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018cdc 	.word	0x08018cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08018cdc 	.word	0x08018cdc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_ADC1_Init+0xa0>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f22:	f003 fb83 	bl	800462c <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f002 f87c 	bl	8003028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f30:	2303      	movs	r3, #3
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f42:	f003 fbb7 	bl	80046b4 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f002 f86c 	bl	8003028 <Error_Handler>
  }

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000052c 	.word	0x2000052c
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_ADC_MspInit+0x7c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d127      	bne.n	8000fd6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8000fbe:	2378      	movs	r3, #120	; 0x78
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_ADC_MspInit+0x84>)
 8000fd2:	f004 ff33 	bl	8005e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012000 	.word	0x40012000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <cJSON_strcasecmp+0x20>
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	e055      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <cJSON_strcasecmp+0x42>
 8001012:	2301      	movs	r3, #1
 8001014:	e050      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <cJSON_strcasecmp+0x36>
 800101e:	2300      	movs	r3, #0
 8001020:	e04a      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d103      	bne.n	800104e <cJSON_strcasecmp+0x62>
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	f103 0220 	add.w	r2, r3, #32
 800104c:	e000      	b.n	8001050 <cJSON_strcasecmp+0x64>
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	73bb      	strb	r3, [r7, #14]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	491a      	ldr	r1, [pc, #104]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 800105c:	440b      	add	r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <cJSON_strcasecmp+0x82>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	3320      	adds	r3, #32
 800106c:	e000      	b.n	8001070 <cJSON_strcasecmp+0x84>
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	429a      	cmp	r2, r3
 8001072:	d0d0      	beq.n	8001016 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	3301      	adds	r3, #1
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d103      	bne.n	8001094 <cJSON_strcasecmp+0xa8>
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	f103 0220 	add.w	r2, r3, #32
 8001092:	e000      	b.n	8001096 <cJSON_strcasecmp+0xaa>
 8001094:	7b7a      	ldrb	r2, [r7, #13]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	733b      	strb	r3, [r7, #12]
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	4908      	ldr	r1, [pc, #32]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <cJSON_strcasecmp+0xc8>
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	3320      	adds	r3, #32
 80010b2:	e000      	b.n	80010b6 <cJSON_strcasecmp+0xca>
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	0801c0ce 	.word	0x0801c0ce

080010c8 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <cJSON_New_Item+0x2c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	4798      	blx	r3
 80010d6:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <cJSON_New_Item+0x20>
 80010de:	2228      	movs	r2, #40	; 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f013 feae 	bl	8014e44 <memset>
	return node;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8001100:	e037      	b.n	8001172 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <cJSON_Delete+0x2e>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <cJSON_Delete+0x2e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffe9 	bl	80010f8 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <cJSON_Delete+0x4e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <cJSON_Delete+0x4e>
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <cJSON_Delete+0x8c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6912      	ldr	r2, [r2, #16]
 8001142:	4610      	mov	r0, r2
 8001144:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <cJSON_Delete+0x6e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <cJSON_Delete+0x6e>
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <cJSON_Delete+0x8c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6a12      	ldr	r2, [r2, #32]
 8001162:	4610      	mov	r0, r2
 8001164:	4798      	blx	r3
		cJSON_free(c);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <cJSON_Delete+0x8c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
		c=next;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	607b      	str	r3, [r7, #4]
	while (c)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1c4      	bne.n	8001102 <cJSON_Delete+0xa>
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000004 	.word	0x20000004

08001188 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b83      	ldr	r3, [pc, #524]	; (80013b0 <parse_number+0x228>)
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b2d      	cmp	r3, #45	; 0x2d
 80011c2:	d107      	bne.n	80011d4 <parse_number+0x4c>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <parse_number+0x22c>)
 80011ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b30      	cmp	r3, #48	; 0x30
 80011da:	d102      	bne.n	80011e2 <parse_number+0x5a>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b30      	cmp	r3, #48	; 0x30
 80011e8:	d928      	bls.n	800123c <parse_number+0xb4>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b39      	cmp	r3, #57	; 0x39
 80011f0:	d824      	bhi.n	800123c <parse_number+0xb4>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <parse_number+0x230>)
 80011f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011fc:	f7ff fa0c 	bl	8000618 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3b30      	subs	r3, #48	; 0x30
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f996 	bl	8000544 <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f844 	bl	80002ac <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b2f      	cmp	r3, #47	; 0x2f
 8001232:	d903      	bls.n	800123c <parse_number+0xb4>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b39      	cmp	r3, #57	; 0x39
 800123a:	d9da      	bls.n	80011f2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b2e      	cmp	r3, #46	; 0x2e
 8001242:	d13c      	bne.n	80012be <parse_number+0x136>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b2f      	cmp	r3, #47	; 0x2f
 800124c:	d937      	bls.n	80012be <parse_number+0x136>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b39      	cmp	r3, #57	; 0x39
 8001256:	d832      	bhi.n	80012be <parse_number+0x136>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <parse_number+0x230>)
 8001264:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001268:	f7ff f9d6 	bl	8000618 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	603a      	str	r2, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3b30      	subs	r3, #48	; 0x30
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f960 	bl	8000544 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f80e 	bl	80002ac <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <parse_number+0x228>)
 800129e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012a2:	f7ff f801 	bl	80002a8 <__aeabi_dsub>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2f      	cmp	r3, #47	; 0x2f
 80012b4:	d903      	bls.n	80012be <parse_number+0x136>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b39      	cmp	r3, #57	; 0x39
 80012bc:	d9cf      	bls.n	800125e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b65      	cmp	r3, #101	; 0x65
 80012c4:	d003      	beq.n	80012ce <parse_number+0x146>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b45      	cmp	r3, #69	; 0x45
 80012cc:	d12a      	bne.n	8001324 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2b      	cmp	r3, #43	; 0x2b
 80012da:	d103      	bne.n	80012e4 <parse_number+0x15c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	e017      	b.n	8001314 <parse_number+0x18c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2d      	cmp	r3, #45	; 0x2d
 80012ea:	d113      	bne.n	8001314 <parse_number+0x18c>
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80012f8:	e00c      	b.n	8001314 <parse_number+0x18c>
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4619      	mov	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	603a      	str	r2, [r7, #0]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	440b      	add	r3, r1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b2f      	cmp	r3, #47	; 0x2f
 800131a:	d903      	bls.n	8001324 <parse_number+0x19c>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b39      	cmp	r3, #57	; 0x39
 8001322:	d9ea      	bls.n	80012fa <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8001324:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001328:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132c:	f7ff f974 	bl	8000618 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	461d      	mov	r5, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8ff 	bl	8000544 <__aeabi_i2d>
 8001346:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800134a:	f7fe ffaf 	bl	80002ac <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b17 	vmov	d7, r2, r3
 8001356:	eeb0 1a47 	vmov.f32	s2, s14
 800135a:	eef0 1a67 	vmov.f32	s3, s15
 800135e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80013a8 <parse_number+0x220>
 8001362:	f016 fd05 	bl	8017d70 <pow>
 8001366:	ec53 2b10 	vmov	r2, r3, d0
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f953 	bl	8000618 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001380:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8001384:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001388:	f7ff fbf6 	bl	8000b78 <__aeabi_d2iz>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	60da      	str	r2, [r3, #12]
	return num;
 8001398:	683b      	ldr	r3, [r7, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40240000 	.word	0x40240000
 80013b0:	3ff00000 	.word	0x3ff00000
 80013b4:	bff00000 	.word	0xbff00000
 80013b8:	40240000 	.word	0x40240000

080013bc <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2f      	cmp	r3, #47	; 0x2f
 80013ce:	d90b      	bls.n	80013e8 <parse_hex4+0x2c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b39      	cmp	r3, #57	; 0x39
 80013d6:	d807      	bhi.n	80013e8 <parse_hex4+0x2c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b30      	subs	r3, #48	; 0x30
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e021      	b.n	800142c <parse_hex4+0x70>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b40      	cmp	r3, #64	; 0x40
 80013ee:	d90b      	bls.n	8001408 <parse_hex4+0x4c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b46      	cmp	r3, #70	; 0x46
 80013f6:	d807      	bhi.n	8001408 <parse_hex4+0x4c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	3b37      	subs	r3, #55	; 0x37
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e011      	b.n	800142c <parse_hex4+0x70>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b60      	cmp	r3, #96	; 0x60
 800140e:	d90b      	bls.n	8001428 <parse_hex4+0x6c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b66      	cmp	r3, #102	; 0x66
 8001416:	d807      	bhi.n	8001428 <parse_hex4+0x6c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	3b57      	subs	r3, #87	; 0x57
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e001      	b.n	800142c <parse_hex4+0x70>
 8001428:	2300      	movs	r3, #0
 800142a:	e0a8      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b2f      	cmp	r3, #47	; 0x2f
 800143e:	d90b      	bls.n	8001458 <parse_hex4+0x9c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b39      	cmp	r3, #57	; 0x39
 8001446:	d807      	bhi.n	8001458 <parse_hex4+0x9c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b30      	subs	r3, #48	; 0x30
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e021      	b.n	800149c <parse_hex4+0xe0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b40      	cmp	r3, #64	; 0x40
 800145e:	d90b      	bls.n	8001478 <parse_hex4+0xbc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b46      	cmp	r3, #70	; 0x46
 8001466:	d807      	bhi.n	8001478 <parse_hex4+0xbc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	3b37      	subs	r3, #55	; 0x37
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e011      	b.n	800149c <parse_hex4+0xe0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b60      	cmp	r3, #96	; 0x60
 800147e:	d90b      	bls.n	8001498 <parse_hex4+0xdc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b66      	cmp	r3, #102	; 0x66
 8001486:	d807      	bhi.n	8001498 <parse_hex4+0xdc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	3b57      	subs	r3, #87	; 0x57
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e001      	b.n	800149c <parse_hex4+0xe0>
 8001498:	2300      	movs	r3, #0
 800149a:	e070      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b2f      	cmp	r3, #47	; 0x2f
 80014ae:	d90b      	bls.n	80014c8 <parse_hex4+0x10c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b39      	cmp	r3, #57	; 0x39
 80014b6:	d807      	bhi.n	80014c8 <parse_hex4+0x10c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3b30      	subs	r3, #48	; 0x30
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e021      	b.n	800150c <parse_hex4+0x150>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d90b      	bls.n	80014e8 <parse_hex4+0x12c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b46      	cmp	r3, #70	; 0x46
 80014d6:	d807      	bhi.n	80014e8 <parse_hex4+0x12c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	3b37      	subs	r3, #55	; 0x37
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e011      	b.n	800150c <parse_hex4+0x150>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b60      	cmp	r3, #96	; 0x60
 80014ee:	d90b      	bls.n	8001508 <parse_hex4+0x14c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b66      	cmp	r3, #102	; 0x66
 80014f6:	d807      	bhi.n	8001508 <parse_hex4+0x14c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	3b57      	subs	r3, #87	; 0x57
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e001      	b.n	800150c <parse_hex4+0x150>
 8001508:	2300      	movs	r3, #0
 800150a:	e038      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3301      	adds	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b2f      	cmp	r3, #47	; 0x2f
 800151e:	d90b      	bls.n	8001538 <parse_hex4+0x17c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b39      	cmp	r3, #57	; 0x39
 8001526:	d807      	bhi.n	8001538 <parse_hex4+0x17c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	3b30      	subs	r3, #48	; 0x30
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e021      	b.n	800157c <parse_hex4+0x1c0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d90b      	bls.n	8001558 <parse_hex4+0x19c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b46      	cmp	r3, #70	; 0x46
 8001546:	d807      	bhi.n	8001558 <parse_hex4+0x19c>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	3b37      	subs	r3, #55	; 0x37
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e011      	b.n	800157c <parse_hex4+0x1c0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b60      	cmp	r3, #96	; 0x60
 800155e:	d90b      	bls.n	8001578 <parse_hex4+0x1bc>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b66      	cmp	r3, #102	; 0x66
 8001566:	d807      	bhi.n	8001578 <parse_hex4+0x1bc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	3b57      	subs	r3, #87	; 0x57
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e001      	b.n	800157c <parse_hex4+0x1c0>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <parse_hex4+0x1c2>
	return h;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b22      	cmp	r3, #34	; 0x22
 80015a6:	d00d      	beq.n	80015c4 <parse_string+0x38>
 80015a8:	4aa3      	ldr	r2, [pc, #652]	; (8001838 <parse_string+0x2ac>)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	e168      	b.n	8001884 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	61fa      	str	r2, [r7, #28]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b5c      	cmp	r3, #92	; 0x5c
 80015bc:	d102      	bne.n	80015c4 <parse_string+0x38>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b22      	cmp	r3, #34	; 0x22
 80015ca:	d009      	beq.n	80015e0 <parse_string+0x54>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <parse_string+0x54>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e8      	bne.n	80015b2 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <parse_string+0x2b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	3201      	adds	r2, #1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4798      	blx	r3
 80015ec:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <parse_string+0x6c>
 80015f4:	2300      	movs	r3, #0
 80015f6:	e145      	b.n	8001884 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001602:	e125      	b.n	8001850 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b5c      	cmp	r3, #92	; 0x5c
 800160a:	d008      	beq.n	800161e <parse_string+0x92>
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	1c53      	adds	r3, r2, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	61b9      	str	r1, [r7, #24]
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e118      	b.n	8001850 <parse_string+0x2c4>
		else
		{
			ptr++;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3b62      	subs	r3, #98	; 0x62
 800162a:	2b13      	cmp	r3, #19
 800162c:	f200 80fc 	bhi.w	8001828 <parse_string+0x29c>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <parse_string+0xac>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001689 	.word	0x08001689
 800163c:	08001829 	.word	0x08001829
 8001640:	08001829 	.word	0x08001829
 8001644:	08001829 	.word	0x08001829
 8001648:	08001695 	.word	0x08001695
 800164c:	08001829 	.word	0x08001829
 8001650:	08001829 	.word	0x08001829
 8001654:	08001829 	.word	0x08001829
 8001658:	08001829 	.word	0x08001829
 800165c:	08001829 	.word	0x08001829
 8001660:	08001829 	.word	0x08001829
 8001664:	08001829 	.word	0x08001829
 8001668:	080016a1 	.word	0x080016a1
 800166c:	08001829 	.word	0x08001829
 8001670:	08001829 	.word	0x08001829
 8001674:	08001829 	.word	0x08001829
 8001678:	080016ad 	.word	0x080016ad
 800167c:	08001829 	.word	0x08001829
 8001680:	080016b9 	.word	0x080016b9
 8001684:	080016c5 	.word	0x080016c5
			{
				case 'b': *ptr2++='\b';	break;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	61ba      	str	r2, [r7, #24]
 800168e:	2208      	movs	r2, #8
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e0da      	b.n	800184a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	61ba      	str	r2, [r7, #24]
 800169a:	220c      	movs	r2, #12
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e0d4      	b.n	800184a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	61ba      	str	r2, [r7, #24]
 80016a6:	220a      	movs	r2, #10
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e0ce      	b.n	800184a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	61ba      	str	r2, [r7, #24]
 80016b2:	220d      	movs	r2, #13
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e0c8      	b.n	800184a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61ba      	str	r2, [r7, #24]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e0c2      	b.n	800184a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe77 	bl	80013bc <parse_hex4>
 80016ce:	6138      	str	r0, [r7, #16]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3304      	adds	r3, #4
 80016d4:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016dc:	d304      	bcc.n	80016e8 <parse_string+0x15c>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016e4:	f0c0 80b0 	bcc.w	8001848 <parse_string+0x2bc>
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80ac 	beq.w	8001848 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016f6:	d32d      	bcc.n	8001754 <parse_string+0x1c8>
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016fe:	d229      	bcs.n	8001754 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b5c      	cmp	r3, #92	; 0x5c
 8001708:	f040 809e 	bne.w	8001848 <parse_string+0x2bc>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3302      	adds	r3, #2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b75      	cmp	r3, #117	; 0x75
 8001714:	f040 8098 	bne.w	8001848 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3303      	adds	r3, #3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe4d 	bl	80013bc <parse_hex4>
 8001722:	60b8      	str	r0, [r7, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3306      	adds	r3, #6
 8001728:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001730:	f0c0 808a 	bcc.w	8001848 <parse_string+0x2bc>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800173a:	f080 8085 	bcs.w	8001848 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	029a      	lsls	r2, r3, #10
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <parse_string+0x2b4>)
 8001744:	4013      	ands	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800174c:	4313      	orrs	r3, r2
 800174e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001752:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001754:	2304      	movs	r3, #4
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b7f      	cmp	r3, #127	; 0x7f
 800175c:	d802      	bhi.n	8001764 <parse_string+0x1d8>
 800175e:	2301      	movs	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e00c      	b.n	800177e <parse_string+0x1f2>
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176a:	d202      	bcs.n	8001772 <parse_string+0x1e6>
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e005      	b.n	800177e <parse_string+0x1f2>
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d201      	bcs.n	800177e <parse_string+0x1f2>
 800177a:	2303      	movs	r3, #3
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4413      	add	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3b01      	subs	r3, #1
 800178a:	2b03      	cmp	r3, #3
 800178c:	d847      	bhi.n	800181e <parse_string+0x292>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <parse_string+0x208>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001805 	.word	0x08001805
 8001798:	080017e5 	.word	0x080017e5
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	080017a5 	.word	0x080017a5
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	61ba      	str	r2, [r7, #24]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	3a01      	subs	r2, #1
 80017d2:	61ba      	str	r2, [r7, #24]
 80017d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	3a01      	subs	r2, #1
 80017f2:	61ba      	str	r2, [r7, #24]
 80017f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001804:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <parse_string+0x2b8>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	69b9      	ldr	r1, [r7, #24]
 8001812:	3901      	subs	r1, #1
 8001814:	61b9      	str	r1, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4413      	add	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
					break;
 8001826:	e010      	b.n	800184a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	61ba      	str	r2, [r7, #24]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e009      	b.n	800184a <parse_string+0x2be>
 8001836:	bf00      	nop
 8001838:	20000214 	.word	0x20000214
 800183c:	20000000 	.word	0x20000000
 8001840:	000ffc00 	.word	0x000ffc00
 8001844:	0801bfb8 	.word	0x0801bfb8
			}
			ptr++;
 8001848:	bf00      	nop
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b22      	cmp	r3, #34	; 0x22
 8001856:	d004      	beq.n	8001862 <parse_string+0x2d6>
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f aed1 	bne.w	8001604 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b22      	cmp	r3, #34	; 0x22
 800186e:	d102      	bne.n	8001876 <parse_string+0x2ea>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	60da      	str	r2, [r3, #12]
	return ptr;
 8001882:	69fb      	ldr	r3, [r7, #28]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	e002      	b.n	800189c <skip+0x10>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <skip+0x26>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <skip+0x26>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d9f1      	bls.n	8001896 <skip+0xa>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	const char *end=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 80018d0:	f7ff fbfa 	bl	80010c8 <cJSON_New_Item>
 80018d4:	6138      	str	r0, [r7, #16]
	ep=0;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <cJSON_ParseWithOpts+0x84>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <cJSON_ParseWithOpts+0x26>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e02a      	b.n	800193c <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff ffd0 	bl	800188c <skip>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	6938      	ldr	r0, [r7, #16]
 80018f2:	f000 f837 	bl	8001964 <parse_value>
 80018f6:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <cJSON_ParseWithOpts+0x48>
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff fbfa 	bl	80010f8 <cJSON_Delete>
 8001904:	2300      	movs	r3, #0
 8001906:	e019      	b.n	800193c <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00f      	beq.n	800192e <cJSON_ParseWithOpts+0x6e>
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ffbc 	bl	800188c <skip>
 8001914:	6178      	str	r0, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <cJSON_ParseWithOpts+0x6e>
 800191e:	6938      	ldr	r0, [r7, #16]
 8001920:	f7ff fbea 	bl	80010f8 <cJSON_Delete>
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <cJSON_ParseWithOpts+0x84>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	e006      	b.n	800193c <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <cJSON_ParseWithOpts+0x7a>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]
	return c;
 800193a:	693b      	ldr	r3, [r7, #16]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000214 	.word	0x20000214

08001948 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffb3 	bl	80018c0 <cJSON_ParseWithOpts>
 800195a:	4603      	mov	r3, r0
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <parse_value+0x14>
 8001974:	2300      	movs	r3, #0
 8001976:	e060      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001978:	2204      	movs	r2, #4
 800197a:	4932      	ldr	r1, [pc, #200]	; (8001a44 <parse_value+0xe0>)
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f014 f819 	bl	80159b4 <strncmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <parse_value+0x30>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	e052      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001994:	2205      	movs	r2, #5
 8001996:	492c      	ldr	r1, [pc, #176]	; (8001a48 <parse_value+0xe4>)
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f014 f80b 	bl	80159b4 <strncmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <parse_value+0x4c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3305      	adds	r3, #5
 80019ae:	e044      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 80019b0:	2204      	movs	r2, #4
 80019b2:	4926      	ldr	r1, [pc, #152]	; (8001a4c <parse_value+0xe8>)
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f013 fffd 	bl	80159b4 <strncmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d108      	bne.n	80019d2 <parse_value+0x6e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3304      	adds	r3, #4
 80019d0:	e033      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b22      	cmp	r3, #34	; 0x22
 80019d8:	d105      	bne.n	80019e6 <parse_value+0x82>
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fdd5 	bl	800158c <parse_string>
 80019e2:	4603      	mov	r3, r0
 80019e4:	e029      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b2d      	cmp	r3, #45	; 0x2d
 80019ec:	d007      	beq.n	80019fe <parse_value+0x9a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b2f      	cmp	r3, #47	; 0x2f
 80019f4:	d909      	bls.n	8001a0a <parse_value+0xa6>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b39      	cmp	r3, #57	; 0x39
 80019fc:	d805      	bhi.n	8001a0a <parse_value+0xa6>
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fbc1 	bl	8001188 <parse_number>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e017      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b5b      	cmp	r3, #91	; 0x5b
 8001a10:	d105      	bne.n	8001a1e <parse_value+0xba>
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f81d 	bl	8001a54 <parse_array>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	e00d      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b7b      	cmp	r3, #123	; 0x7b
 8001a24:	d105      	bne.n	8001a32 <parse_value+0xce>
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f889 	bl	8001b40 <parse_object>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e003      	b.n	8001a3a <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <parse_value+0xec>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08018d24 	.word	0x08018d24
 8001a48:	08018d2c 	.word	0x08018d2c
 8001a4c:	08018d34 	.word	0x08018d34
 8001a50:	20000214 	.word	0x20000214

08001a54 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b5b      	cmp	r3, #91	; 0x5b
 8001a64:	d004      	beq.n	8001a70 <parse_array+0x1c>
 8001a66:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <parse_array+0xe8>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e060      	b.n	8001b32 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2205      	movs	r2, #5
 8001a74:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff06 	bl	800188c <skip>
 8001a80:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b5d      	cmp	r3, #93	; 0x5d
 8001a88:	d102      	bne.n	8001a90 <parse_array+0x3c>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	e050      	b.n	8001b32 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001a90:	f7ff fb1a 	bl	80010c8 <cJSON_New_Item>
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <parse_array+0x54>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e044      	b.n	8001b32 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f7ff feef 	bl	800188c <skip>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff ff56 	bl	8001964 <parse_value>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fee6 	bl	800188c <skip>
 8001ac0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d125      	bne.n	8001b14 <parse_array+0xc0>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e032      	b.n	8001b32 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001acc:	f7ff fafc 	bl	80010c8 <cJSON_New_Item>
 8001ad0:	60b8      	str	r0, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <parse_array+0x88>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e02a      	b.n	8001b32 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fecb 	bl	800188c <skip>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff ff32 	bl	8001964 <parse_value>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fec2 	bl	800188c <skip>
 8001b08:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <parse_array+0xc0>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e00e      	b.n	8001b32 <parse_array+0xde>
	while (*value==',')
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b2c      	cmp	r3, #44	; 0x2c
 8001b1a:	d0d7      	beq.n	8001acc <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b5d      	cmp	r3, #93	; 0x5d
 8001b22:	d102      	bne.n	8001b2a <parse_array+0xd6>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	e003      	b.n	8001b32 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <parse_array+0xe8>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000214 	.word	0x20000214

08001b40 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b50:	d004      	beq.n	8001b5c <parse_object+0x1c>
 8001b52:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <parse_object+0x178>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e0a8      	b.n	8001cae <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2206      	movs	r2, #6
 8001b60:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe90 	bl	800188c <skip>
 8001b6c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b7d      	cmp	r3, #125	; 0x7d
 8001b74:	d102      	bne.n	8001b7c <parse_object+0x3c>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	e098      	b.n	8001cae <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b7c:	f7ff faa4 	bl	80010c8 <cJSON_New_Item>
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <parse_object+0x54>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e08c      	b.n	8001cae <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fe79 	bl	800188c <skip>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fcf4 	bl	800158c <parse_string>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe70 	bl	800188c <skip>
 8001bac:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <parse_object+0x78>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e07a      	b.n	8001cae <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b3a      	cmp	r3, #58	; 0x3a
 8001bcc:	d004      	beq.n	8001bd8 <parse_object+0x98>
 8001bce:	4a3a      	ldr	r2, [pc, #232]	; (8001cb8 <parse_object+0x178>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e06a      	b.n	8001cae <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe55 	bl	800188c <skip>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff febc 	bl	8001964 <parse_value>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe4c 	bl	800188c <skip>
 8001bf4:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d149      	bne.n	8001c90 <parse_object+0x150>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e056      	b.n	8001cae <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001c00:	f7ff fa62 	bl	80010c8 <cJSON_New_Item>
 8001c04:	60b8      	str	r0, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <parse_object+0xd0>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e04e      	b.n	8001cae <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe31 	bl	800188c <skip>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fcac 	bl	800158c <parse_string>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe28 	bl	800188c <skip>
 8001c3c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <parse_object+0x108>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e032      	b.n	8001cae <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	621a      	str	r2, [r3, #32]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c5c:	d004      	beq.n	8001c68 <parse_object+0x128>
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <parse_object+0x178>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	e022      	b.n	8001cae <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe0d 	bl	800188c <skip>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fe74 	bl	8001964 <parse_value>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe04 	bl	800188c <skip>
 8001c84:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <parse_object+0x150>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e00e      	b.n	8001cae <parse_object+0x16e>
	while (*value==',')
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b2c      	cmp	r3, #44	; 0x2c
 8001c96:	d0b3      	beq.n	8001c00 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c9e:	d102      	bne.n	8001ca6 <parse_object+0x166>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	e003      	b.n	8001cae <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <parse_object+0x178>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000214 	.word	0x20000214

08001cbc <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e002      	b.n	8001cd4 <cJSON_GetObjectItem+0x18>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <cJSON_GetObjectItem+0x30>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f983 	bl	8000fec <cJSON_strcasecmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <cJSON_GetObjectItem+0x12>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001d02:	bf00      	nop
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <USART_Tx+0x2c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f9      	beq.n	8001d04 <USART_Tx+0xc>
	USART3->DR = Data;
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <USART_Tx+0x2c>)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	6053      	str	r3, [r2, #4]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40004800 	.word	0x40004800

08001d28 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001d34:	e009      	b.n	8001d4a <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ffda 	bl	8001cf8 <USART_Tx>
		i++;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	3301      	adds	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <SEND_str+0xe>
	}
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DEBUG_main>:
void DEBUG_main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001d66:	f002 fb61 	bl	800442c <dbg_available>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d071      	beq.n	8001e54 <DEBUG_main+0xf4>
	{
		uint16_t i = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4837      	ldr	r0, [pc, #220]	; (8001e5c <DEBUG_main+0xfc>)
 8001d7e:	f013 f861 	bl	8014e44 <memset>
		HAL_Delay(50);
 8001d82:	2032      	movs	r0, #50	; 0x32
 8001d84:	f002 fc2e 	bl	80045e4 <HAL_Delay>

		while(dbg_available())
 8001d88:	e010      	b.n	8001dac <DEBUG_main+0x4c>
		{
			DBG_buf[i++] = dbg_read();
 8001d8a:	f002 fb6b 	bl	8004464 <dbg_read>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	80fa      	strh	r2, [r7, #6]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	b2c9      	uxtb	r1, r1
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <DEBUG_main+0xfc>)
 8001d9e:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	2b3f      	cmp	r3, #63	; 0x3f
 8001da4:	d808      	bhi.n	8001db8 <DEBUG_main+0x58>
				break;
			HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f002 fc1c 	bl	80045e4 <HAL_Delay>
		while(dbg_available())
 8001dac:	f002 fb3e 	bl	800442c <dbg_available>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e9      	bne.n	8001d8a <DEBUG_main+0x2a>
 8001db6:	e000      	b.n	8001dba <DEBUG_main+0x5a>
				break;
 8001db8:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001dba:	4828      	ldr	r0, [pc, #160]	; (8001e5c <DEBUG_main+0xfc>)
 8001dbc:	f000 f982 	bl	80020c4 <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001dc0:	4927      	ldr	r1, [pc, #156]	; (8001e60 <DEBUG_main+0x100>)
 8001dc2:	4826      	ldr	r0, [pc, #152]	; (8001e5c <DEBUG_main+0xfc>)
 8001dc4:	f013 fe08 	bl	80159d8 <strstr>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <DEBUG_main+0x76>
		{
			SEND_str("respone\n");
 8001dce:	4825      	ldr	r0, [pc, #148]	; (8001e64 <DEBUG_main+0x104>)
 8001dd0:	f7ff ffaa 	bl	8001d28 <SEND_str>
 8001dd4:	e035      	b.n	8001e42 <DEBUG_main+0xe2>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001dd6:	4924      	ldr	r1, [pc, #144]	; (8001e68 <DEBUG_main+0x108>)
 8001dd8:	4820      	ldr	r0, [pc, #128]	; (8001e5c <DEBUG_main+0xfc>)
 8001dda:	f013 fdfd 	bl	80159d8 <strstr>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <DEBUG_main+0x8c>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001de4:	4821      	ldr	r0, [pc, #132]	; (8001e6c <DEBUG_main+0x10c>)
 8001de6:	f000 f9db 	bl	80021a0 <json_input>
 8001dea:	e02a      	b.n	8001e42 <DEBUG_main+0xe2>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001dec:	4920      	ldr	r1, [pc, #128]	; (8001e70 <DEBUG_main+0x110>)
 8001dee:	481b      	ldr	r0, [pc, #108]	; (8001e5c <DEBUG_main+0xfc>)
 8001df0:	f013 fdf2 	bl	80159d8 <strstr>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <DEBUG_main+0xa2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001dfa:	481e      	ldr	r0, [pc, #120]	; (8001e74 <DEBUG_main+0x114>)
 8001dfc:	f000 f9d0 	bl	80021a0 <json_input>
 8001e00:	e01f      	b.n	8001e42 <DEBUG_main+0xe2>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001e02:	491d      	ldr	r1, [pc, #116]	; (8001e78 <DEBUG_main+0x118>)
 8001e04:	4815      	ldr	r0, [pc, #84]	; (8001e5c <DEBUG_main+0xfc>)
 8001e06:	f013 fde7 	bl	80159d8 <strstr>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <DEBUG_main+0xb8>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,0,1,0,1,1,1]\"},\"TIME\":\"1122334455\"}");
 8001e10:	481a      	ldr	r0, [pc, #104]	; (8001e7c <DEBUG_main+0x11c>)
 8001e12:	f000 f9c5 	bl	80021a0 <json_input>
 8001e16:	e014      	b.n	8001e42 <DEBUG_main+0xe2>
		}
		else if(strstr(DBG_buf, "SP1") != NULL)
 8001e18:	4919      	ldr	r1, [pc, #100]	; (8001e80 <DEBUG_main+0x120>)
 8001e1a:	4810      	ldr	r0, [pc, #64]	; (8001e5c <DEBUG_main+0xfc>)
 8001e1c:	f013 fddc 	bl	80159d8 <strstr>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <DEBUG_main+0xce>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD1\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001e26:	4817      	ldr	r0, [pc, #92]	; (8001e84 <DEBUG_main+0x124>)
 8001e28:	f000 f9ba 	bl	80021a0 <json_input>
 8001e2c:	e009      	b.n	8001e42 <DEBUG_main+0xe2>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8001e2e:	4916      	ldr	r1, [pc, #88]	; (8001e88 <DEBUG_main+0x128>)
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <DEBUG_main+0xfc>)
 8001e32:	f013 fdd1 	bl	80159d8 <strstr>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <DEBUG_main+0xe2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD2\",\"VAR_IN\":\"1\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <DEBUG_main+0x12c>)
 8001e3e:	f000 f9af 	bl	80021a0 <json_input>
		}

		if(fdbg)
 8001e42:	797b      	ldrb	r3, [r7, #5]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <DEBUG_main+0xf4>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <DEBUG_main+0xfc>)
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <DEBUG_main+0x130>)
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	4811      	ldr	r0, [pc, #68]	; (8001e94 <DEBUG_main+0x134>)
 8001e50:	f013 fd7c 	bl	801594c <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000218 	.word	0x20000218
 8001e60:	08018d40 	.word	0x08018d40
 8001e64:	08018d48 	.word	0x08018d48
 8001e68:	08018d54 	.word	0x08018d54
 8001e6c:	08018d58 	.word	0x08018d58
 8001e70:	08018dc4 	.word	0x08018dc4
 8001e74:	08018dc8 	.word	0x08018dc8
 8001e78:	08018e38 	.word	0x08018e38
 8001e7c:	08018e3c 	.word	0x08018e3c
 8001e80:	08018ea8 	.word	0x08018ea8
 8001e84:	08018eac 	.word	0x08018eac
 8001e88:	08018f38 	.word	0x08018f38
 8001e8c:	08018f3c 	.word	0x08018f3c
 8001e90:	08018fc8 	.word	0x08018fc8
 8001e94:	20000258 	.word	0x20000258

08001e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a7c      	ldr	r2, [pc, #496]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a67      	ldr	r2, [pc, #412]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <MX_GPIO_Init+0x210>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	4854      	ldr	r0, [pc, #336]	; (80020ac <MX_GPIO_Init+0x214>)
 8001f5c:	f004 f922 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f66:	4852      	ldr	r0, [pc, #328]	; (80020b0 <MX_GPIO_Init+0x218>)
 8001f68:	f004 f91c 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4850      	ldr	r0, [pc, #320]	; (80020b4 <MX_GPIO_Init+0x21c>)
 8001f72:	f004 f917 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2143      	movs	r1, #67	; 0x43
 8001f7a:	484f      	ldr	r0, [pc, #316]	; (80020b8 <MX_GPIO_Init+0x220>)
 8001f7c:	f004 f912 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 8001f80:	2200      	movs	r2, #0
 8001f82:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001f86:	4849      	ldr	r0, [pc, #292]	; (80020ac <MX_GPIO_Init+0x214>)
 8001f88:	f004 f90c 	bl	80061a4 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f92:	4848      	ldr	r0, [pc, #288]	; (80020b4 <MX_GPIO_Init+0x21c>)
 8001f94:	f004 f906 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 8001f98:	2200      	movs	r2, #0
 8001f9a:	219f      	movs	r1, #159	; 0x9f
 8001f9c:	4847      	ldr	r0, [pc, #284]	; (80020bc <MX_GPIO_Init+0x224>)
 8001f9e:	f004 f901 	bl	80061a4 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8001fa2:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 8001fa6:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	483c      	ldr	r0, [pc, #240]	; (80020ac <MX_GPIO_Init+0x214>)
 8001fbc:	f003 ff3e 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8001fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4835      	ldr	r0, [pc, #212]	; (80020b0 <MX_GPIO_Init+0x218>)
 8001fda:	f003 ff2f 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	482f      	ldr	r0, [pc, #188]	; (80020b0 <MX_GPIO_Init+0x218>)
 8001ff2:	f003 ff23 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 8001ff6:	f640 0301 	movw	r3, #2049	; 0x801
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4829      	ldr	r0, [pc, #164]	; (80020b4 <MX_GPIO_Init+0x21c>)
 8002010:	f003 ff14 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8002014:	2343      	movs	r3, #67	; 0x43
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4823      	ldr	r0, [pc, #140]	; (80020b8 <MX_GPIO_Init+0x220>)
 800202c:	f003 ff06 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8002030:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002034:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_GPIO_Init+0x228>)
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	481d      	ldr	r0, [pc, #116]	; (80020bc <MX_GPIO_Init+0x224>)
 8002046:	f003 fef9 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 800204a:	239f      	movs	r3, #159	; 0x9f
 800204c:	61fb      	str	r3, [r7, #28]
                          |RS485_DE_Pin|RS485_RE__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4816      	ldr	r0, [pc, #88]	; (80020bc <MX_GPIO_Init+0x224>)
 8002062:	f003 feeb 	bl	8005e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	480f      	ldr	r0, [pc, #60]	; (80020b8 <MX_GPIO_Init+0x220>)
 800207a:	f003 fedf 	bl	8005e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2017      	movs	r0, #23
 8002084:	f002 fdec 	bl	8004c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002088:	2017      	movs	r0, #23
 800208a:	f002 fe05 	bl	8004c98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2028      	movs	r0, #40	; 0x28
 8002094:	f002 fde4 	bl	8004c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002098:	2028      	movs	r0, #40	; 0x28
 800209a:	f002 fdfd 	bl	8004c98 <HAL_NVIC_EnableIRQ>

}
 800209e:	bf00      	nop
 80020a0:	3730      	adds	r7, #48	; 0x30
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	10310000 	.word	0x10310000

080020c4 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d02f      	beq.n	8002136 <clear_string+0x72>
	uint8_t i = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e022      	b.n	8002126 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d80b      	bhi.n	80020fe <clear_string+0x3a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d003      	beq.n	80020f6 <clear_string+0x32>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b0d      	cmp	r3, #13
 80020f4:	d103      	bne.n	80020fe <clear_string+0x3a>
		{
			i++;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	3301      	adds	r3, #1
 80020fa:	72fb      	strb	r3, [r7, #11]
			continue;
 80020fc:	e010      	b.n	8002120 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d003      	beq.n	800210e <clear_string+0x4a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b0d      	cmp	r3, #13
 800210c:	d102      	bne.n	8002114 <clear_string+0x50>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60fa      	str	r2, [r7, #12]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1d8      	bne.n	80020e0 <clear_string+0x1c>
	}

	*dst = 0;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e000      	b.n	8002138 <clear_string+0x74>
	if(!src) return;
 8002136:	bf00      	nop
}
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e013      	b.n	800217e <parseValue+0x3a>
	{
		if(i % 2)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <parseValue+0x58>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
			j++;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	3301      	adds	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe f830 	bl	80001e4 <strlen>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8e4      	bhi.n	8002156 <parseValue+0x12>
		}
	}
	tmp = paramValue;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <parseValue+0x58>)
 800218e:	60fb      	str	r3, [r7, #12]

	return tmp;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000059c 	.word	0x2000059c

080021a0 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b0a1      	sub	sp, #132	; 0x84
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fbcd 	bl	8001948 <cJSON_Parse>
 80021ae:	6638      	str	r0, [r7, #96]	; 0x60

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 80021b0:	4996      	ldr	r1, [pc, #600]	; (800240c <json_input+0x26c>)
 80021b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021b4:	f7ff fd82 	bl	8001cbc <cJSON_GetObjectItem>
 80021b8:	65f8      	str	r0, [r7, #92]	; 0x5c
	TIME = stime->valuestring;
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	4a94      	ldr	r2, [pc, #592]	; (8002410 <json_input+0x270>)
 80021c0:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 80021c2:	4b93      	ldr	r3, [pc, #588]	; (8002410 <json_input+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f012 fdce 	bl	8014d68 <atoi>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a91      	ldr	r2, [pc, #580]	; (8002414 <json_input+0x274>)
 80021d0:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 80021d2:	4b90      	ldr	r3, [pc, #576]	; (8002414 <json_input+0x274>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b90      	ldr	r3, [pc, #576]	; (8002418 <json_input+0x278>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	f340 83c0 	ble.w	8002960 <json_input+0x7c0>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 80021e0:	498e      	ldr	r1, [pc, #568]	; (800241c <json_input+0x27c>)
 80021e2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021e4:	f7ff fd6a 	bl	8001cbc <cJSON_GetObjectItem>
 80021e8:	65b8      	str	r0, [r7, #88]	; 0x58
		INSTRUCTION = sInstruction->valuestring;
 80021ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4a8c      	ldr	r2, [pc, #560]	; (8002420 <json_input+0x280>)
 80021f0:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 80021f2:	4b8b      	ldr	r3, [pc, #556]	; (8002420 <json_input+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	498b      	ldr	r1, [pc, #556]	; (8002424 <json_input+0x284>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fd ffe9 	bl	80001d0 <strcmp>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 82a1 	bne.w	8002748 <json_input+0x5a8>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002206:	4988      	ldr	r1, [pc, #544]	; (8002428 <json_input+0x288>)
 8002208:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800220a:	f7ff fd57 	bl	8001cbc <cJSON_GetObjectItem>
 800220e:	4603      	mov	r3, r0
 8002210:	4986      	ldr	r1, [pc, #536]	; (800242c <json_input+0x28c>)
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fd52 	bl	8001cbc <cJSON_GetObjectItem>
 8002218:	6478      	str	r0, [r7, #68]	; 0x44
			TYPE = sType->valuestring;
 800221a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	4a84      	ldr	r2, [pc, #528]	; (8002430 <json_input+0x290>)
 8002220:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8002222:	4b83      	ldr	r3, [pc, #524]	; (8002430 <json_input+0x290>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4983      	ldr	r1, [pc, #524]	; (8002434 <json_input+0x294>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7fd ffd1 	bl	80001d0 <strcmp>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 811b 	bne.w	800246c <json_input+0x2cc>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002236:	497c      	ldr	r1, [pc, #496]	; (8002428 <json_input+0x288>)
 8002238:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800223a:	f7ff fd3f 	bl	8001cbc <cJSON_GetObjectItem>
 800223e:	4603      	mov	r3, r0
 8002240:	497d      	ldr	r1, [pc, #500]	; (8002438 <json_input+0x298>)
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fd3a 	bl	8001cbc <cJSON_GetObjectItem>
 8002248:	61b8      	str	r0, [r7, #24]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 800224a:	4977      	ldr	r1, [pc, #476]	; (8002428 <json_input+0x288>)
 800224c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800224e:	f7ff fd35 	bl	8001cbc <cJSON_GetObjectItem>
 8002252:	4603      	mov	r3, r0
 8002254:	4979      	ldr	r1, [pc, #484]	; (800243c <json_input+0x29c>)
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fd30 	bl	8001cbc <cJSON_GetObjectItem>
 800225c:	6178      	str	r0, [r7, #20]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 800225e:	4972      	ldr	r1, [pc, #456]	; (8002428 <json_input+0x288>)
 8002260:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002262:	f7ff fd2b 	bl	8001cbc <cJSON_GetObjectItem>
 8002266:	4603      	mov	r3, r0
 8002268:	4975      	ldr	r1, [pc, #468]	; (8002440 <json_input+0x2a0>)
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fd26 	bl	8001cbc <cJSON_GetObjectItem>
 8002270:	6138      	str	r0, [r7, #16]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002272:	496d      	ldr	r1, [pc, #436]	; (8002428 <json_input+0x288>)
 8002274:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002276:	f7ff fd21 	bl	8001cbc <cJSON_GetObjectItem>
 800227a:	4603      	mov	r3, r0
 800227c:	4971      	ldr	r1, [pc, #452]	; (8002444 <json_input+0x2a4>)
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fd1c 	bl	8001cbc <cJSON_GetObjectItem>
 8002284:	60f8      	str	r0, [r7, #12]

				D_IN = s1->valuestring;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4a6f      	ldr	r2, [pc, #444]	; (8002448 <json_input+0x2a8>)
 800228c:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <json_input+0x2ac>)
 8002294:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <json_input+0x2b0>)
 800229c:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a6c      	ldr	r2, [pc, #432]	; (8002454 <json_input+0x2b4>)
 80022a4:	6013      	str	r3, [r2, #0]

				for(int i = 1, j = 0; i < strlen(D_IN); i++)
 80022a6:	2301      	movs	r3, #1
 80022a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022aa:	2300      	movs	r3, #0
 80022ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ae:	e014      	b.n	80022da <json_input+0x13a>
				{
					if(i % 2)
 80022b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <json_input+0x134>
					{
						a[j] = D_IN[i];
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <json_input+0x2a8>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022c0:	4413      	add	r3, r2
 80022c2:	7819      	ldrb	r1, [r3, #0]
 80022c4:	4a64      	ldr	r2, [pc, #400]	; (8002458 <json_input+0x2b8>)
 80022c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c8:	4413      	add	r3, r2
 80022ca:	460a      	mov	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
						j++;
 80022ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d0:	3301      	adds	r3, #1
 80022d2:	67bb      	str	r3, [r7, #120]	; 0x78
				for(int i = 1, j = 0; i < strlen(D_IN); i++)
 80022d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d6:	3301      	adds	r3, #1
 80022d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <json_input+0x2a8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff80 	bl	80001e4 <strlen>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8e1      	bhi.n	80022b0 <json_input+0x110>
					}
				}
				for(int i = 1, j = 0; i < strlen(D_OUT); i++)
 80022ec:	2301      	movs	r3, #1
 80022ee:	677b      	str	r3, [r7, #116]	; 0x74
 80022f0:	2300      	movs	r3, #0
 80022f2:	673b      	str	r3, [r7, #112]	; 0x70
 80022f4:	e014      	b.n	8002320 <json_input+0x180>
				{
					if(i % 2)
 80022f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <json_input+0x17a>
					{
						c[j] = D_OUT[i];
 8002300:	4b53      	ldr	r3, [pc, #332]	; (8002450 <json_input+0x2b0>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002306:	4413      	add	r3, r2
 8002308:	7819      	ldrb	r1, [r3, #0]
 800230a:	4a54      	ldr	r2, [pc, #336]	; (800245c <json_input+0x2bc>)
 800230c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230e:	4413      	add	r3, r2
 8002310:	460a      	mov	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
						j++;
 8002314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002316:	3301      	adds	r3, #1
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
				for(int i = 1, j = 0; i < strlen(D_OUT); i++)
 800231a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231c:	3301      	adds	r3, #1
 800231e:	677b      	str	r3, [r7, #116]	; 0x74
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <json_input+0x2b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fd ff5d 	bl	80001e4 <strlen>
 800232a:	4602      	mov	r2, r0
 800232c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232e:	429a      	cmp	r2, r3
 8002330:	d8e1      	bhi.n	80022f6 <json_input+0x156>
					}
				}

				b = (uint8_t)(atoi(VAR_IN));
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <json_input+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f012 fd16 	bl	8014d68 <atoi>
 800233c:	4603      	mov	r3, r0
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <json_input+0x2c0>)
 8002342:	701a      	strb	r2, [r3, #0]
				d = (uint8_t)(atoi(VAR_OUT));
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <json_input+0x2b4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f012 fd0d 	bl	8014d68 <atoi>
 800234e:	4603      	mov	r3, r0
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b44      	ldr	r3, [pc, #272]	; (8002464 <json_input+0x2c4>)
 8002354:	701a      	strb	r2, [r3, #0]

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <json_input+0x2a8>)
 8002358:	681c      	ldr	r4, [r3, #0]
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <json_input+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f012 fd02 	bl	8014d68 <atoi>
 8002364:	4603      	mov	r3, r0
 8002366:	b2dd      	uxtb	r5, r3
 8002368:	4b39      	ldr	r3, [pc, #228]	; (8002450 <json_input+0x2b0>)
 800236a:	681e      	ldr	r6, [r3, #0]
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <json_input+0x2b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f012 fcf9 	bl	8014d68 <atoi>
 8002376:	4603      	mov	r3, r0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4632      	mov	r2, r6
 800237c:	4629      	mov	r1, r5
 800237e:	4620      	mov	r0, r4
 8002380:	f000 fb90 	bl	8002aa4 <set_dido>

				SEND_str("\n");
 8002384:	4838      	ldr	r0, [pc, #224]	; (8002468 <json_input+0x2c8>)
 8002386:	f7ff fccf 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <json_input+0x290>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fcca 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 8002394:	4834      	ldr	r0, [pc, #208]	; (8002468 <json_input+0x2c8>)
 8002396:	f7ff fcc7 	bl	8001d28 <SEND_str>
				SEND_str(D_IN);
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <json_input+0x2a8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fcc2 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80023a4:	4830      	ldr	r0, [pc, #192]	; (8002468 <json_input+0x2c8>)
 80023a6:	f7ff fcbf 	bl	8001d28 <SEND_str>
				SEND_str(VAR_IN);
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <json_input+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fcba 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80023b4:	482c      	ldr	r0, [pc, #176]	; (8002468 <json_input+0x2c8>)
 80023b6:	f7ff fcb7 	bl	8001d28 <SEND_str>
				SEND_str(D_OUT);
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <json_input+0x2b0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fcb2 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80023c4:	4828      	ldr	r0, [pc, #160]	; (8002468 <json_input+0x2c8>)
 80023c6:	f7ff fcaf 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <json_input+0x2b4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fcaa 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80023d4:	4824      	ldr	r0, [pc, #144]	; (8002468 <json_input+0x2c8>)
 80023d6:	f7ff fca7 	bl	8001d28 <SEND_str>

				cJSON_Delete(json);
 80023da:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023dc:	f7fe fe8c 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80023e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023e2:	f012 fcf1 	bl	8014dc8 <free>
				free(sInstruction);
 80023e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80023e8:	f012 fcee 	bl	8014dc8 <free>
				free(sType);
 80023ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80023ee:	f012 fceb 	bl	8014dc8 <free>
				free(s1);
 80023f2:	69b8      	ldr	r0, [r7, #24]
 80023f4:	f012 fce8 	bl	8014dc8 <free>
				free(s2);
 80023f8:	6978      	ldr	r0, [r7, #20]
 80023fa:	f012 fce5 	bl	8014dc8 <free>
				free(s3);
 80023fe:	6938      	ldr	r0, [r7, #16]
 8002400:	f012 fce2 	bl	8014dc8 <free>
				free(s4);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f012 fcdf 	bl	8014dc8 <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 800240a:	e2af      	b.n	800296c <json_input+0x7cc>
 800240c:	08018fcc 	.word	0x08018fcc
 8002410:	2000057c 	.word	0x2000057c
 8002414:	20000298 	.word	0x20000298
 8002418:	2000029c 	.word	0x2000029c
 800241c:	08018fd4 	.word	0x08018fd4
 8002420:	200005bc 	.word	0x200005bc
 8002424:	08018fe0 	.word	0x08018fe0
 8002428:	08018ff0 	.word	0x08018ff0
 800242c:	08018ff8 	.word	0x08018ff8
 8002430:	20000574 	.word	0x20000574
 8002434:	08019000 	.word	0x08019000
 8002438:	0801900c 	.word	0x0801900c
 800243c:	08019014 	.word	0x08019014
 8002440:	0801901c 	.word	0x0801901c
 8002444:	08019024 	.word	0x08019024
 8002448:	200005b0 	.word	0x200005b0
 800244c:	20000584 	.word	0x20000584
 8002450:	200005a8 	.word	0x200005a8
 8002454:	2000058c 	.word	0x2000058c
 8002458:	200005d0 	.word	0x200005d0
 800245c:	200005c0 	.word	0x200005c0
 8002460:	20000580 	.word	0x20000580
 8002464:	200005ca 	.word	0x200005ca
 8002468:	0801902c 	.word	0x0801902c
			else if(strcmp(TYPE, "SET_AIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 800246c:	4ba5      	ldr	r3, [pc, #660]	; (8002704 <json_input+0x564>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	49a5      	ldr	r1, [pc, #660]	; (8002708 <json_input+0x568>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd feac 	bl	80001d0 <strcmp>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 8095 	bne.w	80025aa <json_input+0x40a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002480:	49a2      	ldr	r1, [pc, #648]	; (800270c <json_input+0x56c>)
 8002482:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002484:	f7ff fc1a 	bl	8001cbc <cJSON_GetObjectItem>
 8002488:	4603      	mov	r3, r0
 800248a:	49a1      	ldr	r1, [pc, #644]	; (8002710 <json_input+0x570>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fc15 	bl	8001cbc <cJSON_GetObjectItem>
 8002492:	62f8      	str	r0, [r7, #44]	; 0x2c
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002494:	499d      	ldr	r1, [pc, #628]	; (800270c <json_input+0x56c>)
 8002496:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002498:	f7ff fc10 	bl	8001cbc <cJSON_GetObjectItem>
 800249c:	4603      	mov	r3, r0
 800249e:	499d      	ldr	r1, [pc, #628]	; (8002714 <json_input+0x574>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fc0b 	bl	8001cbc <cJSON_GetObjectItem>
 80024a6:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 80024a8:	4998      	ldr	r1, [pc, #608]	; (800270c <json_input+0x56c>)
 80024aa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024ac:	f7ff fc06 	bl	8001cbc <cJSON_GetObjectItem>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4999      	ldr	r1, [pc, #612]	; (8002718 <json_input+0x578>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fc01 	bl	8001cbc <cJSON_GetObjectItem>
 80024ba:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80024bc:	4993      	ldr	r1, [pc, #588]	; (800270c <json_input+0x56c>)
 80024be:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024c0:	f7ff fbfc 	bl	8001cbc <cJSON_GetObjectItem>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4995      	ldr	r1, [pc, #596]	; (800271c <json_input+0x57c>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fbf7 	bl	8001cbc <cJSON_GetObjectItem>
 80024ce:	6238      	str	r0, [r7, #32]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80024d0:	498e      	ldr	r1, [pc, #568]	; (800270c <json_input+0x56c>)
 80024d2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024d4:	f7ff fbf2 	bl	8001cbc <cJSON_GetObjectItem>
 80024d8:	4603      	mov	r3, r0
 80024da:	4991      	ldr	r1, [pc, #580]	; (8002720 <json_input+0x580>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fbed 	bl	8001cbc <cJSON_GetObjectItem>
 80024e2:	61f8      	str	r0, [r7, #28]
				A_IN = s1->valuestring;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4a8e      	ldr	r2, [pc, #568]	; (8002724 <json_input+0x584>)
 80024ea:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a8d      	ldr	r2, [pc, #564]	; (8002728 <json_input+0x588>)
 80024f2:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4a8c      	ldr	r2, [pc, #560]	; (800272c <json_input+0x58c>)
 80024fa:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4a8b      	ldr	r2, [pc, #556]	; (8002730 <json_input+0x590>)
 8002502:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a8a      	ldr	r2, [pc, #552]	; (8002734 <json_input+0x594>)
 800250a:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 800250c:	488a      	ldr	r0, [pc, #552]	; (8002738 <json_input+0x598>)
 800250e:	f7ff fc0b 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <json_input+0x564>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc06 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800251c:	4886      	ldr	r0, [pc, #536]	; (8002738 <json_input+0x598>)
 800251e:	f7ff fc03 	bl	8001d28 <SEND_str>
				SEND_str(A_IN);
 8002522:	4b80      	ldr	r3, [pc, #512]	; (8002724 <json_input+0x584>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fbfe 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800252c:	4882      	ldr	r0, [pc, #520]	; (8002738 <json_input+0x598>)
 800252e:	f7ff fbfb 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_LOW);
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <json_input+0x588>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fbf6 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800253c:	487e      	ldr	r0, [pc, #504]	; (8002738 <json_input+0x598>)
 800253e:	f7ff fbf3 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <json_input+0x58c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fbee 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800254c:	487a      	ldr	r0, [pc, #488]	; (8002738 <json_input+0x598>)
 800254e:	f7ff fbeb 	bl	8001d28 <SEND_str>
				SEND_str(D_OUT);
 8002552:	4b77      	ldr	r3, [pc, #476]	; (8002730 <json_input+0x590>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fbe6 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800255c:	4876      	ldr	r0, [pc, #472]	; (8002738 <json_input+0x598>)
 800255e:	f7ff fbe3 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <json_input+0x594>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fbde 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800256c:	4872      	ldr	r0, [pc, #456]	; (8002738 <json_input+0x598>)
 800256e:	f7ff fbdb 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002572:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002574:	f7fe fdc0 	bl	80010f8 <cJSON_Delete>
				free(stime);
 8002578:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800257a:	f012 fc25 	bl	8014dc8 <free>
				free(sInstruction);
 800257e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002580:	f012 fc22 	bl	8014dc8 <free>
				free(sType);
 8002584:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002586:	f012 fc1f 	bl	8014dc8 <free>
				free(s1);
 800258a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800258c:	f012 fc1c 	bl	8014dc8 <free>
				free(s2);
 8002590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002592:	f012 fc19 	bl	8014dc8 <free>
				free(s3);
 8002596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002598:	f012 fc16 	bl	8014dc8 <free>
				free(s4);
 800259c:	6a38      	ldr	r0, [r7, #32]
 800259e:	f012 fc13 	bl	8014dc8 <free>
				free(s5);
 80025a2:	69f8      	ldr	r0, [r7, #28]
 80025a4:	f012 fc10 	bl	8014dc8 <free>
}
 80025a8:	e1e0      	b.n	800296c <json_input+0x7cc>
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 80025aa:	4b56      	ldr	r3, [pc, #344]	; (8002704 <json_input+0x564>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4963      	ldr	r1, [pc, #396]	; (800273c <json_input+0x59c>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe0d 	bl	80001d0 <strcmp>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 8095 	bne.w	80026e8 <json_input+0x548>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80025be:	4953      	ldr	r1, [pc, #332]	; (800270c <json_input+0x56c>)
 80025c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025c2:	f7ff fb7b 	bl	8001cbc <cJSON_GetObjectItem>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4951      	ldr	r1, [pc, #324]	; (8002710 <json_input+0x570>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fb76 	bl	8001cbc <cJSON_GetObjectItem>
 80025d0:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80025d2:	494e      	ldr	r1, [pc, #312]	; (800270c <json_input+0x56c>)
 80025d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025d6:	f7ff fb71 	bl	8001cbc <cJSON_GetObjectItem>
 80025da:	4603      	mov	r3, r0
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <json_input+0x574>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb6c 	bl	8001cbc <cJSON_GetObjectItem>
 80025e4:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 80025e6:	4949      	ldr	r1, [pc, #292]	; (800270c <json_input+0x56c>)
 80025e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025ea:	f7ff fb67 	bl	8001cbc <cJSON_GetObjectItem>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4949      	ldr	r1, [pc, #292]	; (8002718 <json_input+0x578>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fb62 	bl	8001cbc <cJSON_GetObjectItem>
 80025f8:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 80025fa:	4944      	ldr	r1, [pc, #272]	; (800270c <json_input+0x56c>)
 80025fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025fe:	f7ff fb5d 	bl	8001cbc <cJSON_GetObjectItem>
 8002602:	4603      	mov	r3, r0
 8002604:	494e      	ldr	r1, [pc, #312]	; (8002740 <json_input+0x5a0>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fb58 	bl	8001cbc <cJSON_GetObjectItem>
 800260c:	6378      	str	r0, [r7, #52]	; 0x34
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800260e:	493f      	ldr	r1, [pc, #252]	; (800270c <json_input+0x56c>)
 8002610:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002612:	f7ff fb53 	bl	8001cbc <cJSON_GetObjectItem>
 8002616:	4603      	mov	r3, r0
 8002618:	4941      	ldr	r1, [pc, #260]	; (8002720 <json_input+0x580>)
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fb4e 	bl	8001cbc <cJSON_GetObjectItem>
 8002620:	6338      	str	r0, [r7, #48]	; 0x30
				A_IN = s1->valuestring;
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <json_input+0x584>)
 8002628:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <json_input+0x588>)
 8002630:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4a3d      	ldr	r2, [pc, #244]	; (800272c <json_input+0x58c>)
 8002638:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <json_input+0x5a4>)
 8002640:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <json_input+0x594>)
 8002648:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 800264a:	483b      	ldr	r0, [pc, #236]	; (8002738 <json_input+0x598>)
 800264c:	f7ff fb6c 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <json_input+0x564>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb67 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800265a:	4837      	ldr	r0, [pc, #220]	; (8002738 <json_input+0x598>)
 800265c:	f7ff fb64 	bl	8001d28 <SEND_str>
				SEND_str(A_IN);
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <json_input+0x584>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb5f 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800266a:	4833      	ldr	r0, [pc, #204]	; (8002738 <json_input+0x598>)
 800266c:	f7ff fb5c 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_LOW);
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <json_input+0x588>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fb57 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800267a:	482f      	ldr	r0, [pc, #188]	; (8002738 <json_input+0x598>)
 800267c:	f7ff fb54 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <json_input+0x58c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fb4f 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800268a:	482b      	ldr	r0, [pc, #172]	; (8002738 <json_input+0x598>)
 800268c:	f7ff fb4c 	bl	8001d28 <SEND_str>
				SEND_str(A_OUT);
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <json_input+0x5a4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb47 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800269a:	4827      	ldr	r0, [pc, #156]	; (8002738 <json_input+0x598>)
 800269c:	f7ff fb44 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <json_input+0x594>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fb3f 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80026aa:	4823      	ldr	r0, [pc, #140]	; (8002738 <json_input+0x598>)
 80026ac:	f7ff fb3c 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 80026b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026b2:	f7fe fd21 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80026b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026b8:	f012 fb86 	bl	8014dc8 <free>
				free(sInstruction);
 80026bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026be:	f012 fb83 	bl	8014dc8 <free>
				free(sType);
 80026c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026c4:	f012 fb80 	bl	8014dc8 <free>
				free(s1);
 80026c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026ca:	f012 fb7d 	bl	8014dc8 <free>
				free(s2);
 80026ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026d0:	f012 fb7a 	bl	8014dc8 <free>
				free(s3);
 80026d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026d6:	f012 fb77 	bl	8014dc8 <free>
				free(s4);
 80026da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026dc:	f012 fb74 	bl	8014dc8 <free>
				free(s5);
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f012 fb71 	bl	8014dc8 <free>
}
 80026e6:	e141      	b.n	800296c <json_input+0x7cc>
				cJSON_Delete(json);
 80026e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026ea:	f7fe fd05 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80026ee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026f0:	f012 fb6a 	bl	8014dc8 <free>
				free(sInstruction);
 80026f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026f6:	f012 fb67 	bl	8014dc8 <free>
				free(sType);
 80026fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026fc:	f012 fb64 	bl	8014dc8 <free>
}
 8002700:	e134      	b.n	800296c <json_input+0x7cc>
 8002702:	bf00      	nop
 8002704:	20000574 	.word	0x20000574
 8002708:	08019030 	.word	0x08019030
 800270c:	08018ff0 	.word	0x08018ff0
 8002710:	0801903c 	.word	0x0801903c
 8002714:	08019044 	.word	0x08019044
 8002718:	08019050 	.word	0x08019050
 800271c:	0801901c 	.word	0x0801901c
 8002720:	08019024 	.word	0x08019024
 8002724:	200005b8 	.word	0x200005b8
 8002728:	20000590 	.word	0x20000590
 800272c:	200005ac 	.word	0x200005ac
 8002730:	200005a8 	.word	0x200005a8
 8002734:	2000058c 	.word	0x2000058c
 8002738:	0801902c 	.word	0x0801902c
 800273c:	0801905c 	.word	0x0801905c
 8002740:	08019068 	.word	0x08019068
 8002744:	200005a4 	.word	0x200005a4
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002748:	4b8a      	ldr	r3, [pc, #552]	; (8002974 <json_input+0x7d4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	498a      	ldr	r1, [pc, #552]	; (8002978 <json_input+0x7d8>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fd3e 	bl	80001d0 <strcmp>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80fb 	bne.w	8002952 <json_input+0x7b2>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 800275c:	4987      	ldr	r1, [pc, #540]	; (800297c <json_input+0x7dc>)
 800275e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002760:	f7ff faac 	bl	8001cbc <cJSON_GetObjectItem>
 8002764:	4603      	mov	r3, r0
 8002766:	4986      	ldr	r1, [pc, #536]	; (8002980 <json_input+0x7e0>)
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff faa7 	bl	8001cbc <cJSON_GetObjectItem>
 800276e:	6578      	str	r0, [r7, #84]	; 0x54
			TYPE = sType->valuestring;
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a83      	ldr	r2, [pc, #524]	; (8002984 <json_input+0x7e4>)
 8002776:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002778:	4b82      	ldr	r3, [pc, #520]	; (8002984 <json_input+0x7e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4982      	ldr	r1, [pc, #520]	; (8002988 <json_input+0x7e8>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd26 	bl	80001d0 <strcmp>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d145      	bne.n	8002816 <json_input+0x676>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800278a:	497c      	ldr	r1, [pc, #496]	; (800297c <json_input+0x7dc>)
 800278c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800278e:	f7ff fa95 	bl	8001cbc <cJSON_GetObjectItem>
 8002792:	4603      	mov	r3, r0
 8002794:	497d      	ldr	r1, [pc, #500]	; (800298c <json_input+0x7ec>)
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa90 	bl	8001cbc <cJSON_GetObjectItem>
 800279c:	64b8      	str	r0, [r7, #72]	; 0x48
				DigitalParamMass = s1->valuestring;
 800279e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4a7b      	ldr	r2, [pc, #492]	; (8002990 <json_input+0x7f0>)
 80027a4:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 80027a6:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <json_input+0x7f0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fcca 	bl	8002144 <parseValue>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4a78      	ldr	r2, [pc, #480]	; (8002994 <json_input+0x7f4>)
 80027b4:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ba:	e00e      	b.n	80027da <json_input+0x63a>
					Status_DIN[i] = (test[i] - 0x30);
 80027bc:	4b75      	ldr	r3, [pc, #468]	; (8002994 <json_input+0x7f4>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3b30      	subs	r3, #48	; 0x30
 80027c8:	b2d9      	uxtb	r1, r3
 80027ca:	4a73      	ldr	r2, [pc, #460]	; (8002998 <json_input+0x7f8>)
 80027cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ce:	4413      	add	r3, r2
 80027d0:	460a      	mov	r2, r1
 80027d2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	3301      	adds	r3, #1
 80027d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027dc:	2b07      	cmp	r3, #7
 80027de:	dded      	ble.n	80027bc <json_input+0x61c>
				SEND_str("\n");
 80027e0:	486e      	ldr	r0, [pc, #440]	; (800299c <json_input+0x7fc>)
 80027e2:	f7ff faa1 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <json_input+0x7e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa9c 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80027f0:	486a      	ldr	r0, [pc, #424]	; (800299c <json_input+0x7fc>)
 80027f2:	f7ff fa99 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 80027f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80027f8:	f7fe fc7e 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80027fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80027fe:	f012 fae3 	bl	8014dc8 <free>
				free(sInstruction);
 8002802:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002804:	f012 fae0 	bl	8014dc8 <free>
				free(sType);
 8002808:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800280a:	f012 fadd 	bl	8014dc8 <free>
				free(s1);
 800280e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002810:	f012 fada 	bl	8014dc8 <free>
}
 8002814:	e0aa      	b.n	800296c <json_input+0x7cc>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <json_input+0x7e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4961      	ldr	r1, [pc, #388]	; (80029a0 <json_input+0x800>)
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fcd7 	bl	80001d0 <strcmp>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d145      	bne.n	80028b4 <json_input+0x714>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002828:	4954      	ldr	r1, [pc, #336]	; (800297c <json_input+0x7dc>)
 800282a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800282c:	f7ff fa46 	bl	8001cbc <cJSON_GetObjectItem>
 8002830:	4603      	mov	r3, r0
 8002832:	4956      	ldr	r1, [pc, #344]	; (800298c <json_input+0x7ec>)
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa41 	bl	8001cbc <cJSON_GetObjectItem>
 800283a:	64f8      	str	r0, [r7, #76]	; 0x4c
				AnalogParamMass = s1->valuestring;
 800283c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <json_input+0x804>)
 8002842:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002844:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <json_input+0x804>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc7b 	bl	8002144 <parseValue>
 800284e:	4603      	mov	r3, r0
 8002850:	4a50      	ldr	r2, [pc, #320]	; (8002994 <json_input+0x7f4>)
 8002852:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	66bb      	str	r3, [r7, #104]	; 0x68
 8002858:	e00e      	b.n	8002878 <json_input+0x6d8>
					Status_AIN[i] = (test[i] - 0x30);
 800285a:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <json_input+0x7f4>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3b30      	subs	r3, #48	; 0x30
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	4a4f      	ldr	r2, [pc, #316]	; (80029a8 <json_input+0x808>)
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	4413      	add	r3, r2
 800286e:	460a      	mov	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002874:	3301      	adds	r3, #1
 8002876:	66bb      	str	r3, [r7, #104]	; 0x68
 8002878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287a:	2b07      	cmp	r3, #7
 800287c:	dded      	ble.n	800285a <json_input+0x6ba>
				SEND_str("\n");
 800287e:	4847      	ldr	r0, [pc, #284]	; (800299c <json_input+0x7fc>)
 8002880:	f7ff fa52 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <json_input+0x7e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fa4d 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800288e:	4843      	ldr	r0, [pc, #268]	; (800299c <json_input+0x7fc>)
 8002890:	f7ff fa4a 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002894:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002896:	f7fe fc2f 	bl	80010f8 <cJSON_Delete>
				free(stime);
 800289a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800289c:	f012 fa94 	bl	8014dc8 <free>
				free(sInstruction);
 80028a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028a2:	f012 fa91 	bl	8014dc8 <free>
				free(sType);
 80028a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028a8:	f012 fa8e 	bl	8014dc8 <free>
				free(s1);
 80028ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80028ae:	f012 fa8b 	bl	8014dc8 <free>
}
 80028b2:	e05b      	b.n	800296c <json_input+0x7cc>
			else if(strcmp(TYPE, "OCD") == 0)
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <json_input+0x7e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	493c      	ldr	r1, [pc, #240]	; (80029ac <json_input+0x80c>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fc88 	bl	80001d0 <strcmp>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d152      	bne.n	800296c <json_input+0x7cc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80028c6:	492d      	ldr	r1, [pc, #180]	; (800297c <json_input+0x7dc>)
 80028c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80028ca:	f7ff f9f7 	bl	8001cbc <cJSON_GetObjectItem>
 80028ce:	4603      	mov	r3, r0
 80028d0:	492e      	ldr	r1, [pc, #184]	; (800298c <json_input+0x7ec>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f9f2 	bl	8001cbc <cJSON_GetObjectItem>
 80028d8:	6538      	str	r0, [r7, #80]	; 0x50
				OpenCollectorDrainParamMass = s1->valuestring;
 80028da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <json_input+0x810>)
 80028e0:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <json_input+0x810>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fc2c 	bl	8002144 <parseValue>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a29      	ldr	r2, [pc, #164]	; (8002994 <json_input+0x7f4>)
 80028f0:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
 80028f6:	e00e      	b.n	8002916 <json_input+0x776>
					Status_OCD[i] = (test[i] - 0x30);
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <json_input+0x7f4>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3b30      	subs	r3, #48	; 0x30
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <json_input+0x814>)
 8002908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800290a:	4413      	add	r3, r2
 800290c:	460a      	mov	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002912:	3301      	adds	r3, #1
 8002914:	667b      	str	r3, [r7, #100]	; 0x64
 8002916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002918:	2b07      	cmp	r3, #7
 800291a:	dded      	ble.n	80028f8 <json_input+0x758>
				SEND_str("\n");
 800291c:	481f      	ldr	r0, [pc, #124]	; (800299c <json_input+0x7fc>)
 800291e:	f7ff fa03 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <json_input+0x7e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f9fe 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800292c:	481b      	ldr	r0, [pc, #108]	; (800299c <json_input+0x7fc>)
 800292e:	f7ff f9fb 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002932:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002934:	f7fe fbe0 	bl	80010f8 <cJSON_Delete>
				free(stime);
 8002938:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800293a:	f012 fa45 	bl	8014dc8 <free>
				free(sInstruction);
 800293e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002940:	f012 fa42 	bl	8014dc8 <free>
				free(sType);
 8002944:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002946:	f012 fa3f 	bl	8014dc8 <free>
				free(s1);
 800294a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800294c:	f012 fa3c 	bl	8014dc8 <free>
}
 8002950:	e00c      	b.n	800296c <json_input+0x7cc>
			free(stime);
 8002952:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002954:	f012 fa38 	bl	8014dc8 <free>
			free(sInstruction);
 8002958:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800295a:	f012 fa35 	bl	8014dc8 <free>
}
 800295e:	e005      	b.n	800296c <json_input+0x7cc>
		cJSON_Delete(json);
 8002960:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002962:	f7fe fbc9 	bl	80010f8 <cJSON_Delete>
		free(stime);
 8002966:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002968:	f012 fa2e 	bl	8014dc8 <free>
}
 800296c:	bf00      	nop
 800296e:	3784      	adds	r7, #132	; 0x84
 8002970:	46bd      	mov	sp, r7
 8002972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002974:	200005bc 	.word	0x200005bc
 8002978:	08019070 	.word	0x08019070
 800297c:	08018ff0 	.word	0x08018ff0
 8002980:	08018ff8 	.word	0x08018ff8
 8002984:	20000574 	.word	0x20000574
 8002988:	08019080 	.word	0x08019080
 800298c:	08019088 	.word	0x08019088
 8002990:	20000578 	.word	0x20000578
 8002994:	200005b4 	.word	0x200005b4
 8002998:	200002ac 	.word	0x200002ac
 800299c:	0801902c 	.word	0x0801902c
 80029a0:	0801908c 	.word	0x0801908c
 80029a4:	20000598 	.word	0x20000598
 80029a8:	200002a4 	.word	0x200002a4
 80029ac:	08019094 	.word	0x08019094
 80029b0:	200005cc 	.word	0x200005cc
 80029b4:	200002bc 	.word	0x200002bc

080029b8 <CheckReWrite>:
	uint8_t VAR_OUT;
	uint16_t OCD_Pin;
}DiDo[8];

void CheckReWrite()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	e064      	b.n	8002a8e <CheckReWrite+0xd6>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 80029c4:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <CheckReWrite+0xe8>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <CheckReWrite+0xe8>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	440b      	add	r3, r1
 80029d6:	3306      	adds	r3, #6
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f003 fbc9 	bl	8006174 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <CheckReWrite+0xe8>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4299      	cmp	r1, r3
 80029f4:	d015      	beq.n	8002a22 <CheckReWrite+0x6a>
		{
			//Status_OCD[j] = DiDo[i].VAR_OUT;									//нужно записать в массив актуальные данные!!!
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <CheckReWrite+0xe8>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4413      	add	r3, r2
 80029fe:	3308      	adds	r3, #8
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	330e      	adds	r3, #14
 8002a0c:	8819      	ldrh	r1, [r3, #0]
 8002a0e:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	330c      	adds	r3, #12
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f003 fbc2 	bl	80061a4 <HAL_GPIO_WritePin>
 8002a20:	e032      	b.n	8002a88 <CheckReWrite+0xd0>
			//SEND_str("success...\n");
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	491c      	ldr	r1, [pc, #112]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	440b      	add	r3, r1
 8002a34:	3306      	adds	r3, #6
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f003 fb9a 	bl	8006174 <HAL_GPIO_ReadPin>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4619      	mov	r1, r3
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4299      	cmp	r1, r3
 8002a52:	d119      	bne.n	8002a88 <CheckReWrite+0xd0>
		{
			//Status_OCD[j] = !DiDo[i].VAR_OUT;
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 8002a54:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	330e      	adds	r3, #14
 8002a6a:	8819      	ldrh	r1, [r3, #0]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <CheckReWrite+0xe8>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	330c      	adds	r3, #12
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	f003 fb8e 	bl	80061a4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b07      	cmp	r3, #7
 8002a92:	dd97      	ble.n	80029c4 <CheckReWrite+0xc>
			//SEND_str("miss...\n");
		}
	}
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200005dc 	.word	0x200005dc

08002aa4 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8002aa4:	b5b0      	push	{r4, r5, r7, lr}
 8002aa6:	b0c6      	sub	sp, #280	; 0x118
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	f107 040c 	add.w	r4, r7, #12
 8002aae:	6020      	str	r0, [r4, #0]
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	1d39      	adds	r1, r7, #4
 8002ab4:	600a      	str	r2, [r1, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f107 030b 	add.w	r3, r7, #11
 8002abc:	4602      	mov	r2, r0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	f107 030a 	add.w	r3, r7, #10
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 8002ac8:	4abe      	ldr	r2, [pc, #760]	; (8002dc4 <set_dido+0x320>)
 8002aca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ace:	4611      	mov	r1, r2
 8002ad0:	2250      	movs	r2, #80	; 0x50
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f012 f98e 	bl	8014df4 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8002ad8:	4abb      	ldr	r2, [pc, #748]	; (8002dc8 <set_dido+0x324>)
 8002ada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ade:	4611      	mov	r1, r2
 8002ae0:	2250      	movs	r2, #80	; 0x50
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f012 f986 	bl	8014df4 <memcpy>

	uint16_t DIN_Pin[8] = {IN0_Pin, IN1_Pin, IN2_Pin, IN3_Pin, IN4_Pin, IN5_Pin, IN6_Pin, IN7_Pin};
 8002ae8:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <set_dido+0x328>)
 8002aea:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t OCD_Pin[8] = {O0_Pin, O1_Pin, O2_Pin, O3_Pin, O4_Pin, O5_Pin, O6_Pin, O7_Pin};
 8002af4:	4bb6      	ldr	r3, [pc, #728]	; (8002dd0 <set_dido+0x32c>)
 8002af6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	GPIO_TypeDef *pVHOD[8] = {VHOD1, VHOD2, VHOD3, VHOD4, VHOD5, VHOD6, VHOD7, VHOD8};
 8002b00:	4bb4      	ldr	r3, [pc, #720]	; (8002dd4 <set_dido+0x330>)
 8002b02:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002b06:	461d      	mov	r5, r3
 8002b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIO_TypeDef *pVIHOD[8] = {VIHOD1, VIHOD2, VIHOD3, VIHOD4, VIHOD5, VIHOD6, VIHOD7, VIHOD8};
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	4aaf      	ldr	r2, [pc, #700]	; (8002dd8 <set_dido+0x334>)
 8002b1a:	461c      	mov	r4, r3
 8002b1c:	4615      	mov	r5, r2
 8002b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 8; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b30:	e13c      	b.n	8002dac <set_dido+0x308>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 8002b32:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002b36:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	18ca      	adds	r2, r1, r3
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4611      	mov	r1, r2
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	f7fd fb40 	bl	80001d0 <strcmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 8125 	bne.w	8002da2 <set_dido+0x2fe>
		{
			DiDo[i].D_IN = pVHOD[i];
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002b62:	4413      	add	r3, r2
 8002b64:	f853 2ce8 	ldr.w	r2, [r3, #-232]
 8002b68:	499c      	ldr	r1, [pc, #624]	; (8002ddc <set_dido+0x338>)
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	601a      	str	r2, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 8002b74:	4a99      	ldr	r2, [pc, #612]	; (8002ddc <set_dido+0x338>)
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	f107 020b 	add.w	r2, r7, #11
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 8002b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002b92:	4413      	add	r3, r2
 8002b94:	f833 1cb8 	ldrh.w	r1, [r3, #-184]
 8002b98:	4a90      	ldr	r2, [pc, #576]	; (8002ddc <set_dido+0x338>)
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3306      	adds	r3, #6
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002bae:	e0f0      	b.n	8002d92 <set_dido+0x2ee>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8002bb0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002bb4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	18ca      	adds	r2, r1, r3
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	f7fd fb02 	bl	80001d0 <strcmp>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 80da 	bne.w	8002d88 <set_dido+0x2e4>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002bdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002be0:	497e      	ldr	r1, [pc, #504]	; (8002ddc <set_dido+0x338>)
 8002be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	3308      	adds	r3, #8
 8002bec:	601a      	str	r2, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8002bee:	4a7b      	ldr	r2, [pc, #492]	; (8002ddc <set_dido+0x338>)
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	f107 020a 	add.w	r2, r7, #10
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8002c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f833 1cc8 	ldrh.w	r1, [r3, #-200]
 8002c12:	4a72      	ldr	r2, [pc, #456]	; (8002ddc <set_dido+0x338>)
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	330e      	adds	r3, #14
 8002c1e:	460a      	mov	r2, r1
 8002c20:	801a      	strh	r2, [r3, #0]

					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8002c22:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <set_dido+0x338>)
 8002c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	496b      	ldr	r1, [pc, #428]	; (8002ddc <set_dido+0x338>)
 8002c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	440b      	add	r3, r1
 8002c38:	3306      	adds	r3, #6
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f003 fa98 	bl	8006174 <HAL_GPIO_ReadPin>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	f107 030b 	add.w	r3, r7, #11
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <set_dido+0x1ee>
					{
						Status_OCD[j] = VAR_OUT;
 8002c52:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <set_dido+0x33c>)
 8002c54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c58:	4413      	add	r3, r2
 8002c5a:	f107 020a 	add.w	r2, r7, #10
 8002c5e:	7812      	ldrb	r2, [r2, #0]
 8002c60:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 8002c62:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <set_dido+0x338>)
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <set_dido+0x338>)
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	330e      	adds	r3, #14
 8002c7c:	8819      	ldrh	r1, [r3, #0]
 8002c7e:	f107 030a 	add.w	r3, r7, #10
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f003 fa8d 	bl	80061a4 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8002c8a:	4856      	ldr	r0, [pc, #344]	; (8002de4 <set_dido+0x340>)
 8002c8c:	f7ff f84c 	bl	8001d28 <SEND_str>
 8002c90:	e042      	b.n	8002d18 <set_dido+0x274>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 8002c92:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <set_dido+0x338>)
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	494f      	ldr	r1, [pc, #316]	; (8002ddc <set_dido+0x338>)
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3306      	adds	r3, #6
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f003 fa60 	bl	8006174 <HAL_GPIO_ReadPin>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f107 030b 	add.w	r3, r7, #11
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12a      	bne.n	8002d18 <set_dido+0x274>
					{
						Status_OCD[j] = !VAR_OUT;
 8002cc2:	f107 030a 	add.w	r3, r7, #10
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <set_dido+0x33c>)
 8002cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cda:	4413      	add	r3, r2
 8002cdc:	460a      	mov	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8002ce0:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <set_dido+0x338>)
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	3308      	adds	r3, #8
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <set_dido+0x338>)
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	330e      	adds	r3, #14
 8002cfa:	8819      	ldrh	r1, [r3, #0]
 8002cfc:	f107 030a 	add.w	r3, r7, #10
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f003 fa49 	bl	80061a4 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8002d12:	4835      	ldr	r0, [pc, #212]	; (8002de8 <set_dido+0x344>)
 8002d14:	f7ff f808 	bl	8001d28 <SEND_str>
					}

					//----------------------------------For debuging----------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <set_dido+0x338>)
 8002d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <set_dido+0x348>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d102      	bne.n	8002d30 <set_dido+0x28c>
						SEND_str("1 - success...\n");
 8002d2a:	4831      	ldr	r0, [pc, #196]	; (8002df0 <set_dido+0x34c>)
 8002d2c:	f7fe fffc 	bl	8001d28 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <set_dido+0x338>)
 8002d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f107 020b 	add.w	r2, r7, #11
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d102      	bne.n	8002d4e <set_dido+0x2aa>
						SEND_str("2 - success...\n");
 8002d48:	482a      	ldr	r0, [pc, #168]	; (8002df4 <set_dido+0x350>)
 8002d4a:	f7fe ffed 	bl	8001d28 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 8002d4e:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <set_dido+0x338>)
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4413      	add	r3, r2
 8002d58:	3308      	adds	r3, #8
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <set_dido+0x354>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d102      	bne.n	8002d68 <set_dido+0x2c4>
						SEND_str("3 - success...\n");
 8002d62:	4826      	ldr	r0, [pc, #152]	; (8002dfc <set_dido+0x358>)
 8002d64:	f7fe ffe0 	bl	8001d28 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <set_dido+0x338>)
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	330c      	adds	r3, #12
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f107 020a 	add.w	r2, r7, #10
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10e      	bne.n	8002d9e <set_dido+0x2fa>
						SEND_str("4 - success...\n");
 8002d80:	481f      	ldr	r0, [pc, #124]	; (8002e00 <set_dido+0x35c>)
 8002d82:	f7fe ffd1 	bl	8001d28 <SEND_str>
					//--------------------------------------------------------------------------------

					break;
 8002d86:	e00a      	b.n	8002d9e <set_dido+0x2fa>
			for(int j = 0; j < 8; j++)
 8002d88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d96:	2b07      	cmp	r3, #7
 8002d98:	f77f af0a 	ble.w	8002bb0 <set_dido+0x10c>
				}
			}
			break;
 8002d9c:	e00c      	b.n	8002db8 <set_dido+0x314>
					break;
 8002d9e:	bf00      	nop
			break;
 8002da0:	e00a      	b.n	8002db8 <set_dido+0x314>
	for(int i = 0; i < 8; i++)
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da6:	3301      	adds	r3, #1
 8002da8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	f77f aebe 	ble.w	8002b32 <set_dido+0x8e>
		}
	}
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	080190f0 	.word	0x080190f0
 8002dc8:	08019140 	.word	0x08019140
 8002dcc:	08019190 	.word	0x08019190
 8002dd0:	080191a0 	.word	0x080191a0
 8002dd4:	080191b0 	.word	0x080191b0
 8002dd8:	080191d0 	.word	0x080191d0
 8002ddc:	200005dc 	.word	0x200005dc
 8002de0:	200002bc 	.word	0x200002bc
 8002de4:	08019098 	.word	0x08019098
 8002de8:	080190a4 	.word	0x080190a4
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	080190b0 	.word	0x080190b0
 8002df4:	080190c0 	.word	0x080190c0
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	080190d0 	.word	0x080190d0
 8002e00:	080190e0 	.word	0x080190e0

08002e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e08:	f001 fbaa 	bl	8004560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e0c:	f000 f844 	bl	8002e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e10:	f7ff f842 	bl	8001e98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002e14:	f7fe f854 	bl	8000ec0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002e18:	f000 f97e 	bl	8003118 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e1c:	f000 f9b2 	bl	8003184 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002e20:	f001 f8e2 	bl	8003fe8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002e24:	f001 f9b6 	bl	8004194 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002e28:	f001 f9de 	bl	80041e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002e2c:	f001 fa06 	bl	800423c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8002e30:	f005 ff18 	bl	8008c64 <MX_LWIP_Init>
  MX_RTC_Init();
 8002e34:	f000 f900 	bl	8003038 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 8002e38:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e3c:	f001 fbd2 	bl	80045e4 <HAL_Delay>

	EN_Interrupt();	//Для дебага по USART3
 8002e40:	f001 fb3e 	bl	80044c0 <EN_Interrupt>
	//----------------------------------------
	*/

//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);								//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 8002e44:	2301      	movs	r3, #1
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <main+0x7c>)
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <main+0x80>)
 8002e4a:	480f      	ldr	r0, [pc, #60]	; (8002e88 <main+0x84>)
 8002e4c:	f004 fa28 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
		//----------------------------------------
		 */

		///*
		//--------------SPI_test_MK---------------
		SPI_available();
 8002e50:	f000 fa6e 	bl	8003330 <SPI_available>
		//----------------------------------------
		*/


		//------------------DEBUG-----------------
		DEBUG_main();
 8002e54:	f7fe ff84 	bl	8001d60 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		if(ReInitFlag)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <main+0x88>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f7      	beq.n	8002e50 <main+0x4c>
		{
			HAL_Delay(250);
 8002e60:	20fa      	movs	r0, #250	; 0xfa
 8002e62:	f001 fbbf 	bl	80045e4 <HAL_Delay>
			ReInitFlag = 0;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <main+0x88>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
			CheckReWrite();
 8002e6c:	f7ff fda4 	bl	80029b8 <CheckReWrite>
			SEND_str("interrupt...");
 8002e70:	4807      	ldr	r0, [pc, #28]	; (8002e90 <main+0x8c>)
 8002e72:	f7fe ff59 	bl	8001d28 <SEND_str>
			SEND_str("\n");
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <main+0x90>)
 8002e78:	f7fe ff56 	bl	8001d28 <SEND_str>
		SPI_available();
 8002e7c:	e7e8      	b.n	8002e50 <main+0x4c>
 8002e7e:	bf00      	nop
 8002e80:	200002cc 	.word	0x200002cc
 8002e84:	200002d0 	.word	0x200002d0
 8002e88:	2000067c 	.word	0x2000067c
 8002e8c:	200002a0 	.word	0x200002a0
 8002e90:	080191f0 	.word	0x080191f0
 8002e94:	08019200 	.word	0x08019200

08002e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b098      	sub	sp, #96	; 0x60
 8002e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ea2:	2230      	movs	r2, #48	; 0x30
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f011 ffcc 	bl	8014e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <SystemClock_Config+0xfc>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <SystemClock_Config+0xfc>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <SystemClock_Config+0xfc>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <SystemClock_Config+0x100>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <SystemClock_Config+0x100>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <SystemClock_Config+0x100>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002f02:	2305      	movs	r3, #5
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f10:	2302      	movs	r3, #2
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f1e:	23a8      	movs	r3, #168	; 0xa8
 8002f20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f22:	2302      	movs	r3, #2
 8002f24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f26:	2304      	movs	r3, #4
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 f96a 	bl	8006208 <HAL_RCC_OscConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f3a:	f000 f875 	bl	8003028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f3e:	230f      	movs	r3, #15
 8002f40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	2105      	movs	r1, #5
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 fbc3 	bl	80066e8 <HAL_RCC_ClockConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002f68:	f000 f85e 	bl	8003028 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f74:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fde2 	bl	8006b44 <HAL_RCCEx_PeriphCLKConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002f86:	f000 f84f 	bl	8003028 <Error_Handler>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3760      	adds	r7, #96	; 0x60
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000

08002f9c <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
	if(!ReInitFlag)
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_GPIO_EXTI_Callback+0x1a>
		ReInitFlag = 1;
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
	else
	{
		__NOP();
	}
}
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_EXTI_Callback+0x1c>
		__NOP();
 8002fb6:	bf00      	nop
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	200002a0 	.word	0x200002a0

08002fc8 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_SPI_TxRxCpltCallback+0x34>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_SPI_TxRxCpltCallback+0x34>)
 8002fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_SPI_TxRxCpltCallback+0x28>
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	2000067c 	.word	0x2000067c
 8003000:	200002d1 	.word	0x200002d1

08003004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003016:	f001 fac5 	bl	80045a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000

08003028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800304c:	2300      	movs	r3, #0
 800304e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <MX_RTC_Init+0xac>)
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <MX_RTC_Init+0xb0>)
 8003054:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <MX_RTC_Init+0xac>)
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <MX_RTC_Init+0xac>)
 800305e:	227f      	movs	r2, #127	; 0x7f
 8003060:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <MX_RTC_Init+0xac>)
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <MX_RTC_Init+0xac>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <MX_RTC_Init+0xac>)
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <MX_RTC_Init+0xac>)
 8003076:	2200      	movs	r2, #0
 8003078:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800307a:	481a      	ldr	r0, [pc, #104]	; (80030e4 <MX_RTC_Init+0xac>)
 800307c:	f003 fe44 	bl	8006d08 <HAL_RTC_Init>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003086:	f7ff ffcf 	bl	8003028 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800308a:	230a      	movs	r3, #10
 800308c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 800308e:	2322      	movs	r3, #34	; 0x22
 8003090:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	4619      	mov	r1, r3
 80030a4:	480f      	ldr	r0, [pc, #60]	; (80030e4 <MX_RTC_Init+0xac>)
 80030a6:	f003 fec0 	bl	8006e2a <HAL_RTC_SetTime>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80030b0:	f7ff ffba 	bl	8003028 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80030b8:	2304      	movs	r3, #4
 80030ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 80030bc:	2314      	movs	r3, #20
 80030be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 80030c0:	2315      	movs	r3, #21
 80030c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80030c4:	463b      	mov	r3, r7
 80030c6:	2200      	movs	r2, #0
 80030c8:	4619      	mov	r1, r3
 80030ca:	4806      	ldr	r0, [pc, #24]	; (80030e4 <MX_RTC_Init+0xac>)
 80030cc:	f003 ff6a 	bl	8006fa4 <HAL_RTC_SetDate>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80030d6:	f7ff ffa7 	bl	8003028 <Error_Handler>
  }

}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000065c 	.word	0x2000065c
 80030e8:	40002800 	.word	0x40002800

080030ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_RTC_MspInit+0x24>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d102      	bne.n	8003104 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RTC_MspInit+0x28>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40002800 	.word	0x40002800
 8003114:	42470e3c 	.word	0x42470e3c

08003118 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <MX_SPI1_Init+0x64>)
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <MX_SPI1_Init+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <MX_SPI1_Init+0x64>)
 8003124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <MX_SPI1_Init+0x64>)
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <MX_SPI1_Init+0x64>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <MX_SPI1_Init+0x64>)
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <MX_SPI1_Init+0x64>)
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <MX_SPI1_Init+0x64>)
 8003144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_SPI1_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <MX_SPI1_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_SPI1_Init+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <MX_SPI1_Init+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <MX_SPI1_Init+0x64>)
 8003164:	220a      	movs	r2, #10
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003168:	4804      	ldr	r0, [pc, #16]	; (800317c <MX_SPI1_Init+0x64>)
 800316a:	f004 f834 	bl	80071d6 <HAL_SPI_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003174:	f7ff ff58 	bl	8003028 <Error_Handler>
  }

}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200006d4 	.word	0x200006d4
 8003180:	40013000 	.word	0x40013000

08003184 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <MX_SPI2_Init+0x5c>)
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <MX_SPI2_Init+0x60>)
 800318c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <MX_SPI2_Init+0x5c>)
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <MX_SPI2_Init+0x5c>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_SPI2_Init+0x5c>)
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031c6:	220a      	movs	r2, #10
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_SPI2_Init+0x5c>)
 80031cc:	f004 f803 	bl	80071d6 <HAL_SPI_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80031d6:	f7ff ff27 	bl	8003028 <Error_Handler>
  }

}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000067c 	.word	0x2000067c
 80031e4:	40003800 	.word	0x40003800

080031e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a45      	ldr	r2, [pc, #276]	; (800331c <HAL_SPI_MspInit+0x134>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12c      	bne.n	8003264 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a43      	ldr	r2, [pc, #268]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_SPI_MspInit+0x138>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_SPI_MspInit+0x138>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003242:	2338      	movs	r3, #56	; 0x38
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003252:	2305      	movs	r3, #5
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	4619      	mov	r1, r3
 800325c:	4831      	ldr	r0, [pc, #196]	; (8003324 <HAL_SPI_MspInit+0x13c>)
 800325e:	f002 fded 	bl	8005e3c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003262:	e057      	b.n	8003314 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <HAL_SPI_MspInit+0x140>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d152      	bne.n	8003314 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_SPI_MspInit+0x138>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_SPI_MspInit+0x138>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_SPI_MspInit+0x138>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_SPI_MspInit+0x138>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_SPI_MspInit+0x138>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 80032c2:	230c      	movs	r3, #12
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032d2:	2305      	movs	r3, #5
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	4813      	ldr	r0, [pc, #76]	; (800332c <HAL_SPI_MspInit+0x144>)
 80032de:	f002 fdad 	bl	8005e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 80032e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f0:	2303      	movs	r3, #3
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032f4:	2305      	movs	r3, #5
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	4809      	ldr	r0, [pc, #36]	; (8003324 <HAL_SPI_MspInit+0x13c>)
 8003300:	f002 fd9c 	bl	8005e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	2024      	movs	r0, #36	; 0x24
 800330a:	f001 fca9 	bl	8004c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800330e:	2024      	movs	r0, #36	; 0x24
 8003310:	f001 fcc2 	bl	8004c98 <HAL_NVIC_EnableIRQ>
}
 8003314:	bf00      	nop
 8003316:	3730      	adds	r7, #48	; 0x30
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013000 	.word	0x40013000
 8003320:	40023800 	.word	0x40023800
 8003324:	40020400 	.word	0x40020400
 8003328:	40003800 	.word	0x40003800
 800332c:	40020800 	.word	0x40020800

08003330 <SPI_available>:
//RTC_DateTypeDef DateToUpdate = {0};
//
//char trans_str[64] = {0,};

void SPI_available(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 8003334:	4bd2      	ldr	r3, [pc, #840]	; (8003680 <SPI_available+0x350>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 83bb 	beq.w	8003ab4 <SPI_available+0x784>
	{
		switch(SPI_rx_buf[0])
 800333e:	4bd1      	ldr	r3, [pc, #836]	; (8003684 <SPI_available+0x354>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	3b01      	subs	r3, #1
 8003344:	2b65      	cmp	r3, #101	; 0x65
 8003346:	f200 8225 	bhi.w	8003794 <SPI_available+0x464>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <SPI_available+0x20>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	080034e9 	.word	0x080034e9
 8003354:	080034fb 	.word	0x080034fb
 8003358:	0800350d 	.word	0x0800350d
 800335c:	0800351f 	.word	0x0800351f
 8003360:	08003531 	.word	0x08003531
 8003364:	08003543 	.word	0x08003543
 8003368:	08003555 	.word	0x08003555
 800336c:	08003567 	.word	0x08003567
 8003370:	08003579 	.word	0x08003579
 8003374:	08003795 	.word	0x08003795
 8003378:	08003795 	.word	0x08003795
 800337c:	08003795 	.word	0x08003795
 8003380:	08003795 	.word	0x08003795
 8003384:	08003795 	.word	0x08003795
 8003388:	08003795 	.word	0x08003795
 800338c:	0800358d 	.word	0x0800358d
 8003390:	080035a1 	.word	0x080035a1
 8003394:	080035b5 	.word	0x080035b5
 8003398:	080035c9 	.word	0x080035c9
 800339c:	080035dd 	.word	0x080035dd
 80033a0:	080035f1 	.word	0x080035f1
 80033a4:	08003605 	.word	0x08003605
 80033a8:	08003619 	.word	0x08003619
 80033ac:	08003621 	.word	0x08003621
 80033b0:	08003629 	.word	0x08003629
 80033b4:	08003795 	.word	0x08003795
 80033b8:	08003795 	.word	0x08003795
 80033bc:	08003795 	.word	0x08003795
 80033c0:	08003795 	.word	0x08003795
 80033c4:	08003795 	.word	0x08003795
 80033c8:	08003795 	.word	0x08003795
 80033cc:	08003631 	.word	0x08003631
 80033d0:	08003639 	.word	0x08003639
 80033d4:	08003641 	.word	0x08003641
 80033d8:	08003649 	.word	0x08003649
 80033dc:	08003651 	.word	0x08003651
 80033e0:	08003659 	.word	0x08003659
 80033e4:	08003661 	.word	0x08003661
 80033e8:	08003669 	.word	0x08003669
 80033ec:	08003671 	.word	0x08003671
 80033f0:	08003679 	.word	0x08003679
 80033f4:	08003795 	.word	0x08003795
 80033f8:	08003795 	.word	0x08003795
 80033fc:	08003795 	.word	0x08003795
 8003400:	08003795 	.word	0x08003795
 8003404:	08003795 	.word	0x08003795
 8003408:	08003795 	.word	0x08003795
 800340c:	0800369d 	.word	0x0800369d
 8003410:	080036a5 	.word	0x080036a5
 8003414:	080036ad 	.word	0x080036ad
 8003418:	080036b5 	.word	0x080036b5
 800341c:	080036bd 	.word	0x080036bd
 8003420:	080036c5 	.word	0x080036c5
 8003424:	080036cd 	.word	0x080036cd
 8003428:	080036d5 	.word	0x080036d5
 800342c:	080036dd 	.word	0x080036dd
 8003430:	080036e5 	.word	0x080036e5
 8003434:	08003795 	.word	0x08003795
 8003438:	08003795 	.word	0x08003795
 800343c:	08003795 	.word	0x08003795
 8003440:	08003795 	.word	0x08003795
 8003444:	08003795 	.word	0x08003795
 8003448:	08003795 	.word	0x08003795
 800344c:	080036ed 	.word	0x080036ed
 8003450:	080036f5 	.word	0x080036f5
 8003454:	080036fd 	.word	0x080036fd
 8003458:	08003705 	.word	0x08003705
 800345c:	0800370d 	.word	0x0800370d
 8003460:	08003715 	.word	0x08003715
 8003464:	0800371d 	.word	0x0800371d
 8003468:	08003725 	.word	0x08003725
 800346c:	0800372d 	.word	0x0800372d
 8003470:	08003735 	.word	0x08003735
 8003474:	08003795 	.word	0x08003795
 8003478:	08003795 	.word	0x08003795
 800347c:	08003795 	.word	0x08003795
 8003480:	08003795 	.word	0x08003795
 8003484:	08003795 	.word	0x08003795
 8003488:	08003795 	.word	0x08003795
 800348c:	0800373d 	.word	0x0800373d
 8003490:	08003745 	.word	0x08003745
 8003494:	0800374d 	.word	0x0800374d
 8003498:	08003755 	.word	0x08003755
 800349c:	0800375d 	.word	0x0800375d
 80034a0:	08003765 	.word	0x08003765
 80034a4:	0800376d 	.word	0x0800376d
 80034a8:	08003775 	.word	0x08003775
 80034ac:	0800377d 	.word	0x0800377d
 80034b0:	08003785 	.word	0x08003785
 80034b4:	08003795 	.word	0x08003795
 80034b8:	08003795 	.word	0x08003795
 80034bc:	08003795 	.word	0x08003795
 80034c0:	08003795 	.word	0x08003795
 80034c4:	08003795 	.word	0x08003795
 80034c8:	08003795 	.word	0x08003795
 80034cc:	0800378d 	.word	0x0800378d
 80034d0:	08003795 	.word	0x08003795
 80034d4:	08003795 	.word	0x08003795
 80034d8:	08003795 	.word	0x08003795
 80034dc:	08003795 	.word	0x08003795
 80034e0:	08003795 	.word	0x08003795
 80034e4:	08003795 	.word	0x08003795
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 80034e8:	4b67      	ldr	r3, [pc, #412]	; (8003688 <SPI_available+0x358>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 80034ee:	2201      	movs	r2, #1
 80034f0:	2101      	movs	r1, #1
 80034f2:	4866      	ldr	r0, [pc, #408]	; (800368c <SPI_available+0x35c>)
 80034f4:	f002 fe56 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 80034f8:	e14c      	b.n	8003794 <SPI_available+0x464>
			case OC0_OFF:
				Status_OCD[0] = 0;
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <SPI_available+0x358>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8003500:	2200      	movs	r2, #0
 8003502:	2101      	movs	r1, #1
 8003504:	4861      	ldr	r0, [pc, #388]	; (800368c <SPI_available+0x35c>)
 8003506:	f002 fe4d 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 800350a:	e143      	b.n	8003794 <SPI_available+0x464>
			case OC1_ON:
				Status_OCD[1] = 1;
 800350c:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <SPI_available+0x358>)
 800350e:	2201      	movs	r2, #1
 8003510:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8003512:	2201      	movs	r2, #1
 8003514:	2101      	movs	r1, #1
 8003516:	485e      	ldr	r0, [pc, #376]	; (8003690 <SPI_available+0x360>)
 8003518:	f002 fe44 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 800351c:	e13a      	b.n	8003794 <SPI_available+0x464>
			case OC1_OFF:
				Status_OCD[1] = 0;
 800351e:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <SPI_available+0x358>)
 8003520:	2200      	movs	r2, #0
 8003522:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8003524:	2200      	movs	r2, #0
 8003526:	2101      	movs	r1, #1
 8003528:	4859      	ldr	r0, [pc, #356]	; (8003690 <SPI_available+0x360>)
 800352a:	f002 fe3b 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 800352e:	e131      	b.n	8003794 <SPI_available+0x464>
			case OC2_ON:
				Status_OCD[2] = 1;
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <SPI_available+0x358>)
 8003532:	2201      	movs	r2, #1
 8003534:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 8003536:	2201      	movs	r2, #1
 8003538:	2102      	movs	r1, #2
 800353a:	4855      	ldr	r0, [pc, #340]	; (8003690 <SPI_available+0x360>)
 800353c:	f002 fe32 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003540:	e128      	b.n	8003794 <SPI_available+0x464>
			case OC2_OFF:
				Status_OCD[2] = 0;
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <SPI_available+0x358>)
 8003544:	2200      	movs	r2, #0
 8003546:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 8003548:	2200      	movs	r2, #0
 800354a:	2102      	movs	r1, #2
 800354c:	4850      	ldr	r0, [pc, #320]	; (8003690 <SPI_available+0x360>)
 800354e:	f002 fe29 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003552:	e11f      	b.n	8003794 <SPI_available+0x464>
			case OC3_ON:
				Status_OCD[3] = 1;
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <SPI_available+0x358>)
 8003556:	2201      	movs	r2, #1
 8003558:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 800355a:	2201      	movs	r2, #1
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	484d      	ldr	r0, [pc, #308]	; (8003694 <SPI_available+0x364>)
 8003560:	f002 fe20 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003564:	e116      	b.n	8003794 <SPI_available+0x464>
			case OC3_OFF:
				Status_OCD[3] = 0;
 8003566:	4b48      	ldr	r3, [pc, #288]	; (8003688 <SPI_available+0x358>)
 8003568:	2200      	movs	r2, #0
 800356a:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	4848      	ldr	r0, [pc, #288]	; (8003694 <SPI_available+0x364>)
 8003572:	f002 fe17 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003576:	e10d      	b.n	8003794 <SPI_available+0x464>
			case OC4_ON:
				Status_OCD[4] = 1;
 8003578:	4b43      	ldr	r3, [pc, #268]	; (8003688 <SPI_available+0x358>)
 800357a:	2201      	movs	r2, #1
 800357c:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 800357e:	2201      	movs	r2, #1
 8003580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003584:	4843      	ldr	r0, [pc, #268]	; (8003694 <SPI_available+0x364>)
 8003586:	f002 fe0d 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 800358a:	e103      	b.n	8003794 <SPI_available+0x464>
			case OC4_OFF:
				Status_OCD[4] = 0;
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <SPI_available+0x358>)
 800358e:	2200      	movs	r2, #0
 8003590:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003598:	483e      	ldr	r0, [pc, #248]	; (8003694 <SPI_available+0x364>)
 800359a:	f002 fe03 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 800359e:	e0f9      	b.n	8003794 <SPI_available+0x464>
			case OC5_ON:
				Status_OCD[5] = 1;
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <SPI_available+0x358>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 80035a6:	2201      	movs	r2, #1
 80035a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ac:	4839      	ldr	r0, [pc, #228]	; (8003694 <SPI_available+0x364>)
 80035ae:	f002 fdf9 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 80035b2:	e0ef      	b.n	8003794 <SPI_available+0x464>
			case OC5_OFF:
				Status_OCD[5] = 0;
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <SPI_available+0x358>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035c0:	4834      	ldr	r0, [pc, #208]	; (8003694 <SPI_available+0x364>)
 80035c2:	f002 fdef 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 80035c6:	e0e5      	b.n	8003794 <SPI_available+0x464>
			case OC6_ON:
				Status_OCD[6] = 1;
 80035c8:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <SPI_available+0x358>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035d4:	482f      	ldr	r0, [pc, #188]	; (8003694 <SPI_available+0x364>)
 80035d6:	f002 fde5 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 80035da:	e0db      	b.n	8003794 <SPI_available+0x464>
			case OC6_OFF:
				Status_OCD[6] = 0;
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <SPI_available+0x358>)
 80035de:	2200      	movs	r2, #0
 80035e0:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 80035e2:	2200      	movs	r2, #0
 80035e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035e8:	482a      	ldr	r0, [pc, #168]	; (8003694 <SPI_available+0x364>)
 80035ea:	f002 fddb 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 80035ee:	e0d1      	b.n	8003794 <SPI_available+0x464>
			case OC7_ON:
				Status_OCD[7] = 1;
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <SPI_available+0x358>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 80035f6:	2201      	movs	r2, #1
 80035f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035fc:	4825      	ldr	r0, [pc, #148]	; (8003694 <SPI_available+0x364>)
 80035fe:	f002 fdd1 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003602:	e0c7      	b.n	8003794 <SPI_available+0x464>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <SPI_available+0x358>)
 8003606:	2200      	movs	r2, #0
 8003608:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 800360a:	2200      	movs	r2, #0
 800360c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003610:	4820      	ldr	r0, [pc, #128]	; (8003694 <SPI_available+0x364>)
 8003612:	f002 fdc7 	bl	80061a4 <HAL_GPIO_WritePin>
				break;
 8003616:	e0bd      	b.n	8003794 <SPI_available+0x464>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <SPI_available+0x368>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
				break;
 800361e:	e0b9      	b.n	8003794 <SPI_available+0x464>
			case DIN0_F:
				Status_DIN[0] = 0;
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <SPI_available+0x368>)
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
				break;
 8003626:	e0b5      	b.n	8003794 <SPI_available+0x464>
			case DIN1_R:
				Status_DIN[1] = 1;
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <SPI_available+0x368>)
 800362a:	2201      	movs	r2, #1
 800362c:	705a      	strb	r2, [r3, #1]
				break;
 800362e:	e0b1      	b.n	8003794 <SPI_available+0x464>
			case DIN1_F:
				Status_DIN[1] = 0;
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <SPI_available+0x368>)
 8003632:	2200      	movs	r2, #0
 8003634:	705a      	strb	r2, [r3, #1]
				break;
 8003636:	e0ad      	b.n	8003794 <SPI_available+0x464>
			case DIN2_R:
				Status_DIN[2] = 1;
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <SPI_available+0x368>)
 800363a:	2201      	movs	r2, #1
 800363c:	709a      	strb	r2, [r3, #2]
				break;
 800363e:	e0a9      	b.n	8003794 <SPI_available+0x464>
			case DIN2_F:
				Status_DIN[2] = 0;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <SPI_available+0x368>)
 8003642:	2200      	movs	r2, #0
 8003644:	709a      	strb	r2, [r3, #2]
				break;
 8003646:	e0a5      	b.n	8003794 <SPI_available+0x464>
			case DIN3_R:
				Status_DIN[3] = 1;
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <SPI_available+0x368>)
 800364a:	2201      	movs	r2, #1
 800364c:	70da      	strb	r2, [r3, #3]
				break;
 800364e:	e0a1      	b.n	8003794 <SPI_available+0x464>
			case DIN3_F:
				Status_DIN[3] = 0;
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <SPI_available+0x368>)
 8003652:	2200      	movs	r2, #0
 8003654:	70da      	strb	r2, [r3, #3]
				break;
 8003656:	e09d      	b.n	8003794 <SPI_available+0x464>
			case DIN4_R:
				Status_DIN[4] = 1;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <SPI_available+0x368>)
 800365a:	2201      	movs	r2, #1
 800365c:	711a      	strb	r2, [r3, #4]
				break;
 800365e:	e099      	b.n	8003794 <SPI_available+0x464>
			case DIN4_F:
				Status_DIN[4] = 0;
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <SPI_available+0x368>)
 8003662:	2200      	movs	r2, #0
 8003664:	711a      	strb	r2, [r3, #4]
				break;
 8003666:	e095      	b.n	8003794 <SPI_available+0x464>
			case DIN5_R:
				Status_DIN[5] = 1;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <SPI_available+0x368>)
 800366a:	2201      	movs	r2, #1
 800366c:	715a      	strb	r2, [r3, #5]
				break;
 800366e:	e091      	b.n	8003794 <SPI_available+0x464>
			case DIN5_F:
				Status_DIN[5] = 0;
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <SPI_available+0x368>)
 8003672:	2200      	movs	r2, #0
 8003674:	715a      	strb	r2, [r3, #5]
				break;
 8003676:	e08d      	b.n	8003794 <SPI_available+0x464>
			case DIN6_R:
				Status_DIN[6] = 1;
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <SPI_available+0x368>)
 800367a:	2201      	movs	r2, #1
 800367c:	719a      	strb	r2, [r3, #6]
				break;
 800367e:	e089      	b.n	8003794 <SPI_available+0x464>
 8003680:	200002d1 	.word	0x200002d1
 8003684:	200002cc 	.word	0x200002cc
 8003688:	200002bc 	.word	0x200002bc
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40021000 	.word	0x40021000
 8003698:	200002ac 	.word	0x200002ac
			case DIN6_F:
				Status_DIN[6] = 0;
 800369c:	4ba1      	ldr	r3, [pc, #644]	; (8003924 <SPI_available+0x5f4>)
 800369e:	2200      	movs	r2, #0
 80036a0:	719a      	strb	r2, [r3, #6]
				break;
 80036a2:	e077      	b.n	8003794 <SPI_available+0x464>
			case DIN7_R:
				Status_DIN[7] = 1;
 80036a4:	4b9f      	ldr	r3, [pc, #636]	; (8003924 <SPI_available+0x5f4>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	71da      	strb	r2, [r3, #7]
				break;
 80036aa:	e073      	b.n	8003794 <SPI_available+0x464>
			case DIN7_F:
				Status_DIN[7] = 0;
 80036ac:	4b9d      	ldr	r3, [pc, #628]	; (8003924 <SPI_available+0x5f4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	71da      	strb	r2, [r3, #7]
				break;
 80036b2:	e06f      	b.n	8003794 <SPI_available+0x464>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 80036b4:	4b9c      	ldr	r3, [pc, #624]	; (8003928 <SPI_available+0x5f8>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
				break;
 80036ba:	e06b      	b.n	8003794 <SPI_available+0x464>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 80036bc:	4b9a      	ldr	r3, [pc, #616]	; (8003928 <SPI_available+0x5f8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
				break;
 80036c2:	e067      	b.n	8003794 <SPI_available+0x464>
			case AIN1_ON:
				Status_AIN[1] = 1;
 80036c4:	4b98      	ldr	r3, [pc, #608]	; (8003928 <SPI_available+0x5f8>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	705a      	strb	r2, [r3, #1]
				break;
 80036ca:	e063      	b.n	8003794 <SPI_available+0x464>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 80036cc:	4b96      	ldr	r3, [pc, #600]	; (8003928 <SPI_available+0x5f8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	705a      	strb	r2, [r3, #1]
				break;
 80036d2:	e05f      	b.n	8003794 <SPI_available+0x464>
			case AIN2_ON:
				Status_AIN[2] = 1;
 80036d4:	4b94      	ldr	r3, [pc, #592]	; (8003928 <SPI_available+0x5f8>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	709a      	strb	r2, [r3, #2]
				break;
 80036da:	e05b      	b.n	8003794 <SPI_available+0x464>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <SPI_available+0x5f8>)
 80036de:	2200      	movs	r2, #0
 80036e0:	709a      	strb	r2, [r3, #2]
				break;
 80036e2:	e057      	b.n	8003794 <SPI_available+0x464>
			case AIN3_ON:
				Status_AIN[3] = 1;
 80036e4:	4b90      	ldr	r3, [pc, #576]	; (8003928 <SPI_available+0x5f8>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	70da      	strb	r2, [r3, #3]
				break;
 80036ea:	e053      	b.n	8003794 <SPI_available+0x464>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 80036ec:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <SPI_available+0x5f8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	70da      	strb	r2, [r3, #3]
				break;
 80036f2:	e04f      	b.n	8003794 <SPI_available+0x464>
			case AIN4_ON:
				Status_AIN[4] = 1;
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <SPI_available+0x5f8>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	711a      	strb	r2, [r3, #4]
				break;
 80036fa:	e04b      	b.n	8003794 <SPI_available+0x464>
			case AIN4_OFF:
				Status_AIN[4] = 0;
 80036fc:	4b8a      	ldr	r3, [pc, #552]	; (8003928 <SPI_available+0x5f8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	711a      	strb	r2, [r3, #4]
				break;
 8003702:	e047      	b.n	8003794 <SPI_available+0x464>
			case AIN5_ON:
				Status_AIN[5] = 1;;
 8003704:	4b88      	ldr	r3, [pc, #544]	; (8003928 <SPI_available+0x5f8>)
 8003706:	2201      	movs	r2, #1
 8003708:	715a      	strb	r2, [r3, #5]
				break;
 800370a:	e043      	b.n	8003794 <SPI_available+0x464>
			case AIN5_OFF:
				Status_AIN[5] = 0;
 800370c:	4b86      	ldr	r3, [pc, #536]	; (8003928 <SPI_available+0x5f8>)
 800370e:	2200      	movs	r2, #0
 8003710:	715a      	strb	r2, [r3, #5]
				break;
 8003712:	e03f      	b.n	8003794 <SPI_available+0x464>
			case AIN6_ON:
				Status_AIN[6] = 1;
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <SPI_available+0x5f8>)
 8003716:	2201      	movs	r2, #1
 8003718:	719a      	strb	r2, [r3, #6]
				break;
 800371a:	e03b      	b.n	8003794 <SPI_available+0x464>
			case AIN6_OFF:
				Status_AIN[6] = 0;
 800371c:	4b82      	ldr	r3, [pc, #520]	; (8003928 <SPI_available+0x5f8>)
 800371e:	2200      	movs	r2, #0
 8003720:	719a      	strb	r2, [r3, #6]
				break;
 8003722:	e037      	b.n	8003794 <SPI_available+0x464>
			case AIN7_ON:
				Status_AIN[7] = 1;
 8003724:	4b80      	ldr	r3, [pc, #512]	; (8003928 <SPI_available+0x5f8>)
 8003726:	2201      	movs	r2, #1
 8003728:	71da      	strb	r2, [r3, #7]
				break;
 800372a:	e033      	b.n	8003794 <SPI_available+0x464>
			case AIN7_OFF:
				Status_AIN[7] = 0;
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <SPI_available+0x5f8>)
 800372e:	2200      	movs	r2, #0
 8003730:	71da      	strb	r2, [r3, #7]
				break;
 8003732:	e02f      	b.n	8003794 <SPI_available+0x464>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 8003734:	4b7d      	ldr	r3, [pc, #500]	; (800392c <SPI_available+0x5fc>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
				break;
 800373a:	e02b      	b.n	8003794 <SPI_available+0x464>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 800373c:	4b7b      	ldr	r3, [pc, #492]	; (800392c <SPI_available+0x5fc>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
				break;
 8003742:	e027      	b.n	8003794 <SPI_available+0x464>
			case PWM1_ON:
				Status_PWM[1] = 1;
 8003744:	4b79      	ldr	r3, [pc, #484]	; (800392c <SPI_available+0x5fc>)
 8003746:	2201      	movs	r2, #1
 8003748:	705a      	strb	r2, [r3, #1]
				break;
 800374a:	e023      	b.n	8003794 <SPI_available+0x464>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 800374c:	4b77      	ldr	r3, [pc, #476]	; (800392c <SPI_available+0x5fc>)
 800374e:	2200      	movs	r2, #0
 8003750:	705a      	strb	r2, [r3, #1]
				break;
 8003752:	e01f      	b.n	8003794 <SPI_available+0x464>
			case PWM2_ON:
				Status_PWM[2] = 1;
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <SPI_available+0x5fc>)
 8003756:	2201      	movs	r2, #1
 8003758:	709a      	strb	r2, [r3, #2]
				break;
 800375a:	e01b      	b.n	8003794 <SPI_available+0x464>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <SPI_available+0x5fc>)
 800375e:	2200      	movs	r2, #0
 8003760:	709a      	strb	r2, [r3, #2]
				break;
 8003762:	e017      	b.n	8003794 <SPI_available+0x464>
			case PWM3_ON:
				Status_PWM[3] = 1;
 8003764:	4b71      	ldr	r3, [pc, #452]	; (800392c <SPI_available+0x5fc>)
 8003766:	2201      	movs	r2, #1
 8003768:	70da      	strb	r2, [r3, #3]
				break;
 800376a:	e013      	b.n	8003794 <SPI_available+0x464>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 800376c:	4b6f      	ldr	r3, [pc, #444]	; (800392c <SPI_available+0x5fc>)
 800376e:	2200      	movs	r2, #0
 8003770:	70da      	strb	r2, [r3, #3]
				break;
 8003772:	e00f      	b.n	8003794 <SPI_available+0x464>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 8003774:	4b6e      	ldr	r3, [pc, #440]	; (8003930 <SPI_available+0x600>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
				break;
 800377a:	e00b      	b.n	8003794 <SPI_available+0x464>
			case WR0_OFF:
				Status_1WR[0] = 0;
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <SPI_available+0x600>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
				break;
 8003782:	e007      	b.n	8003794 <SPI_available+0x464>
			case WR1_ON:
				Status_1WR[1] = 1;
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <SPI_available+0x600>)
 8003786:	2201      	movs	r2, #1
 8003788:	705a      	strb	r2, [r3, #1]
				break;
 800378a:	e003      	b.n	8003794 <SPI_available+0x464>
			case WR1_OFF:
				Status_1WR[1] = 0;
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <SPI_available+0x600>)
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
				break;
 8003792:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 8003794:	4b67      	ldr	r3, [pc, #412]	; (8003934 <SPI_available+0x604>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2bc0      	cmp	r3, #192	; 0xc0
 800379a:	d136      	bne.n	800380a <SPI_available+0x4da>
		{
			tp = 1;
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <SPI_available+0x608>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 80037a2:	4b66      	ldr	r3, [pc, #408]	; (800393c <SPI_available+0x60c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 80037a8:	4865      	ldr	r0, [pc, #404]	; (8003940 <SPI_available+0x610>)
 80037aa:	f7fe fabd 	bl	8001d28 <SEND_str>
			SEND_str("status_AIN ");
 80037ae:	4865      	ldr	r0, [pc, #404]	; (8003944 <SPI_available+0x614>)
 80037b0:	f7fe faba 	bl	8001d28 <SEND_str>
			USART_Tx(Status_AIN[0]);
 80037b4:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <SPI_available+0x5f8>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fa9d 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[1]);
 80037be:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <SPI_available+0x5f8>)
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fa98 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[2]);
 80037c8:	4b57      	ldr	r3, [pc, #348]	; (8003928 <SPI_available+0x5f8>)
 80037ca:	789b      	ldrb	r3, [r3, #2]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fa93 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[3]);
 80037d2:	4b55      	ldr	r3, [pc, #340]	; (8003928 <SPI_available+0x5f8>)
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fa8e 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[4]);
 80037dc:	4b52      	ldr	r3, [pc, #328]	; (8003928 <SPI_available+0x5f8>)
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fa89 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[5]);
 80037e6:	4b50      	ldr	r3, [pc, #320]	; (8003928 <SPI_available+0x5f8>)
 80037e8:	795b      	ldrb	r3, [r3, #5]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fa84 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[6]);
 80037f0:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <SPI_available+0x5f8>)
 80037f2:	799b      	ldrb	r3, [r3, #6]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fa7f 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[7]);
 80037fa:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <SPI_available+0x5f8>)
 80037fc:	79db      	ldrb	r3, [r3, #7]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fa7a 	bl	8001cf8 <USART_Tx>
			SEND_str(" END_status_AIN\n");
 8003804:	4850      	ldr	r0, [pc, #320]	; (8003948 <SPI_available+0x618>)
 8003806:	f7fe fa8f 	bl	8001d28 <SEND_str>
		}

		if(tp)
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <SPI_available+0x608>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 811b 	beq.w	8003a4a <SPI_available+0x71a>
		{
			if(i == 0)
 8003814:	4b4d      	ldr	r3, [pc, #308]	; (800394c <SPI_available+0x61c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d128      	bne.n	800386e <SPI_available+0x53e>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <SPI_available+0x620>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <SPI_available+0x5f8>)
 8003824:	5c9a      	ldrb	r2, [r3, r2]
 8003826:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <SPI_available+0x624>)
 8003828:	701a      	strb	r2, [r3, #0]
				j++;
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <SPI_available+0x620>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <SPI_available+0x620>)
 8003834:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <SPI_available+0x620>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b08      	cmp	r3, #8
 800383c:	d108      	bne.n	8003850 <SPI_available+0x520>
				{
					j = 0;
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <SPI_available+0x620>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
					i++;
 8003844:	4b41      	ldr	r3, [pc, #260]	; (800394c <SPI_available+0x61c>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b3f      	ldr	r3, [pc, #252]	; (800394c <SPI_available+0x61c>)
 800384e:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8003850:	4b41      	ldr	r3, [pc, #260]	; (8003958 <SPI_available+0x628>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003856:	2301      	movs	r3, #1
 8003858:	4a36      	ldr	r2, [pc, #216]	; (8003934 <SPI_available+0x604>)
 800385a:	493e      	ldr	r1, [pc, #248]	; (8003954 <SPI_available+0x624>)
 800385c:	483f      	ldr	r0, [pc, #252]	; (800395c <SPI_available+0x62c>)
 800385e:	f003 fd1f 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8003862:	bf00      	nop
 8003864:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <SPI_available+0x628>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0fb      	beq.n	8003864 <SPI_available+0x534>
 800386c:	e108      	b.n	8003a80 <SPI_available+0x750>
			}
			else if(i == 1)
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <SPI_available+0x61c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d128      	bne.n	80038c8 <SPI_available+0x598>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <SPI_available+0x620>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <SPI_available+0x5f4>)
 800387e:	5c9a      	ldrb	r2, [r3, r2]
 8003880:	4b34      	ldr	r3, [pc, #208]	; (8003954 <SPI_available+0x624>)
 8003882:	701a      	strb	r2, [r3, #0]
				j++;
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <SPI_available+0x620>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <SPI_available+0x620>)
 800388e:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 8003890:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <SPI_available+0x620>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d108      	bne.n	80038aa <SPI_available+0x57a>
				{
					j = 0;
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <SPI_available+0x620>)
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
					i++;
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <SPI_available+0x61c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <SPI_available+0x61c>)
 80038a8:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <SPI_available+0x628>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80038b0:	2301      	movs	r3, #1
 80038b2:	4a20      	ldr	r2, [pc, #128]	; (8003934 <SPI_available+0x604>)
 80038b4:	4927      	ldr	r1, [pc, #156]	; (8003954 <SPI_available+0x624>)
 80038b6:	4829      	ldr	r0, [pc, #164]	; (800395c <SPI_available+0x62c>)
 80038b8:	f003 fcf2 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 80038bc:	bf00      	nop
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <SPI_available+0x628>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0fb      	beq.n	80038be <SPI_available+0x58e>
 80038c6:	e0db      	b.n	8003a80 <SPI_available+0x750>
			}
			else if(i == 2)
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <SPI_available+0x61c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d147      	bne.n	8003960 <SPI_available+0x630>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <SPI_available+0x620>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <SPI_available+0x5fc>)
 80038d8:	5c9a      	ldrb	r2, [r3, r2]
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <SPI_available+0x624>)
 80038dc:	701a      	strb	r2, [r3, #0]
				j++;
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <SPI_available+0x620>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <SPI_available+0x620>)
 80038e8:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <SPI_available+0x620>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d108      	bne.n	8003904 <SPI_available+0x5d4>
				{
					j = 0;
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <SPI_available+0x620>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
					i++;
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <SPI_available+0x61c>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <SPI_available+0x61c>)
 8003902:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <SPI_available+0x628>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800390a:	2301      	movs	r3, #1
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <SPI_available+0x604>)
 800390e:	4911      	ldr	r1, [pc, #68]	; (8003954 <SPI_available+0x624>)
 8003910:	4812      	ldr	r0, [pc, #72]	; (800395c <SPI_available+0x62c>)
 8003912:	f003 fcc5 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8003916:	bf00      	nop
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <SPI_available+0x628>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0fb      	beq.n	8003918 <SPI_available+0x5e8>
 8003920:	e0ae      	b.n	8003a80 <SPI_available+0x750>
 8003922:	bf00      	nop
 8003924:	200002ac 	.word	0x200002ac
 8003928:	200002a4 	.word	0x200002a4
 800392c:	200002b4 	.word	0x200002b4
 8003930:	200002c4 	.word	0x200002c4
 8003934:	200002cc 	.word	0x200002cc
 8003938:	200002d4 	.word	0x200002d4
 800393c:	20000008 	.word	0x20000008
 8003940:	08019204 	.word	0x08019204
 8003944:	0801920c 	.word	0x0801920c
 8003948:	08019218 	.word	0x08019218
 800394c:	200002d2 	.word	0x200002d2
 8003950:	200002d3 	.word	0x200002d3
 8003954:	200002d0 	.word	0x200002d0
 8003958:	200002d1 	.word	0x200002d1
 800395c:	2000067c 	.word	0x2000067c
			}
			else if(i == 3)
 8003960:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <SPI_available+0x788>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d128      	bne.n	80039ba <SPI_available+0x68a>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 8003968:	4b54      	ldr	r3, [pc, #336]	; (8003abc <SPI_available+0x78c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b54      	ldr	r3, [pc, #336]	; (8003ac0 <SPI_available+0x790>)
 8003970:	5c9a      	ldrb	r2, [r3, r2]
 8003972:	4b54      	ldr	r3, [pc, #336]	; (8003ac4 <SPI_available+0x794>)
 8003974:	701a      	strb	r2, [r3, #0]
				j++;
 8003976:	4b51      	ldr	r3, [pc, #324]	; (8003abc <SPI_available+0x78c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <SPI_available+0x78c>)
 8003980:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 8003982:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <SPI_available+0x78c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d108      	bne.n	800399c <SPI_available+0x66c>
				{
					j = 0;
 800398a:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <SPI_available+0x78c>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
					i++;
 8003990:	4b49      	ldr	r3, [pc, #292]	; (8003ab8 <SPI_available+0x788>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <SPI_available+0x788>)
 800399a:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 800399c:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <SPI_available+0x798>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80039a2:	2301      	movs	r3, #1
 80039a4:	4a49      	ldr	r2, [pc, #292]	; (8003acc <SPI_available+0x79c>)
 80039a6:	4947      	ldr	r1, [pc, #284]	; (8003ac4 <SPI_available+0x794>)
 80039a8:	4849      	ldr	r0, [pc, #292]	; (8003ad0 <SPI_available+0x7a0>)
 80039aa:	f003 fc79 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 80039ae:	bf00      	nop
 80039b0:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <SPI_available+0x798>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0fb      	beq.n	80039b0 <SPI_available+0x680>
 80039b8:	e062      	b.n	8003a80 <SPI_available+0x750>
			}
			else if(i == 4)
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <SPI_available+0x788>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d129      	bne.n	8003a16 <SPI_available+0x6e6>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <SPI_available+0x78c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <SPI_available+0x7a4>)
 80039ca:	5c9a      	ldrb	r2, [r3, r2]
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <SPI_available+0x794>)
 80039ce:	701a      	strb	r2, [r3, #0]
				j++;
 80039d0:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <SPI_available+0x78c>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b38      	ldr	r3, [pc, #224]	; (8003abc <SPI_available+0x78c>)
 80039da:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 80039dc:	4b37      	ldr	r3, [pc, #220]	; (8003abc <SPI_available+0x78c>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d109      	bne.n	80039f8 <SPI_available+0x6c8>
				{
					j = 0;
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <SPI_available+0x78c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
					i++;
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <SPI_available+0x788>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <SPI_available+0x788>)
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e043      	b.n	8003a80 <SPI_available+0x750>
				}
				else
				{
					flag_iput_spi2 = 0;
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <SPI_available+0x798>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80039fe:	2301      	movs	r3, #1
 8003a00:	4a32      	ldr	r2, [pc, #200]	; (8003acc <SPI_available+0x79c>)
 8003a02:	4930      	ldr	r1, [pc, #192]	; (8003ac4 <SPI_available+0x794>)
 8003a04:	4832      	ldr	r0, [pc, #200]	; (8003ad0 <SPI_available+0x7a0>)
 8003a06:	f003 fc4b 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 8003a0a:	bf00      	nop
 8003a0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <SPI_available+0x798>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0fb      	beq.n	8003a0c <SPI_available+0x6dc>
 8003a14:	e034      	b.n	8003a80 <SPI_available+0x750>
				}
			}
			else if(i == 5)
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <SPI_available+0x788>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d130      	bne.n	8003a80 <SPI_available+0x750>
			{
				i = 0;
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <SPI_available+0x788>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
				j = 0;
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <SPI_available+0x78c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
				tp = 0;
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <SPI_available+0x7a8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 8003a30:	482a      	ldr	r0, [pc, #168]	; (8003adc <SPI_available+0x7ac>)
 8003a32:	f7fe f979 	bl	8001d28 <SEND_str>
				flag_iput_spi2 = 0;
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <SPI_available+0x798>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <SPI_available+0x79c>)
 8003a40:	4920      	ldr	r1, [pc, #128]	; (8003ac4 <SPI_available+0x794>)
 8003a42:	4823      	ldr	r0, [pc, #140]	; (8003ad0 <SPI_available+0x7a0>)
 8003a44:	f003 fc2c 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
 8003a48:	e01a      	b.n	8003a80 <SPI_available+0x750>
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <SPI_available+0x79c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2ba1      	cmp	r3, #161	; 0xa1
 8003a50:	d016      	beq.n	8003a80 <SPI_available+0x750>
		{


			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <SPI_available+0x79c>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2ba2      	cmp	r3, #162	; 0xa2
 8003a58:	d012      	beq.n	8003a80 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <SPI_available+0x79c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2ba3      	cmp	r3, #163	; 0xa3
 8003a60:	d00e      	beq.n	8003a80 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <SPI_available+0x79c>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2ba4      	cmp	r3, #164	; 0xa4
 8003a68:	d00a      	beq.n	8003a80 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <SPI_available+0x79c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2bb1      	cmp	r3, #177	; 0xb1
 8003a70:	d006      	beq.n	8003a80 <SPI_available+0x750>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <SPI_available+0x79c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2bb2      	cmp	r3, #178	; 0xb2
 8003a78:	d002      	beq.n	8003a80 <SPI_available+0x750>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <SPI_available+0x79c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <SPI_available+0x7a8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d115      	bne.n	8003ab4 <SPI_available+0x784>
		{
			if(tp1)
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <SPI_available+0x7b0>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <SPI_available+0x768>
			{
				tp1 = 0;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <SPI_available+0x7b0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
//				while(!flag_iput_spi2) {;}
//			}
//		}
	}
}
 8003a96:	e00d      	b.n	8003ab4 <SPI_available+0x784>
				flag_iput_spi2 = 1;		//Fix bag! so so
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <SPI_available+0x798>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <SPI_available+0x79c>)
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <SPI_available+0x794>)
 8003aa4:	480a      	ldr	r0, [pc, #40]	; (8003ad0 <SPI_available+0x7a0>)
 8003aa6:	f003 fbfb 	bl	80072a0 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8003aaa:	bf00      	nop
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <SPI_available+0x798>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0fb      	beq.n	8003aac <SPI_available+0x77c>
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200002d2 	.word	0x200002d2
 8003abc:	200002d3 	.word	0x200002d3
 8003ac0:	200002bc 	.word	0x200002bc
 8003ac4:	200002d0 	.word	0x200002d0
 8003ac8:	200002d1 	.word	0x200002d1
 8003acc:	200002cc 	.word	0x200002cc
 8003ad0:	2000067c 	.word	0x2000067c
 8003ad4:	200002c4 	.word	0x200002c4
 8003ad8:	200002d4 	.word	0x200002d4
 8003adc:	0801922c 	.word	0x0801922c
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_MspInit+0x4c>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_MspInit+0x4c>)
 8003af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_MspInit+0x4c>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_MspInit+0x4c>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <HAL_MspInit+0x4c>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_MspInit+0x4c>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800

08003b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	2019      	movs	r0, #25
 8003b4a:	f001 f889 	bl	8004c60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b4e:	2019      	movs	r0, #25
 8003b50:	f001 f8a2 	bl	8004c98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6453      	str	r3, [r2, #68]	; 0x44
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b70:	f107 0210 	add.w	r2, r7, #16
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 ffb0 	bl	8006ae0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b80:	f002 ff9a 	bl	8006ab8 <HAL_RCC_GetPCLK2Freq>
 8003b84:	4603      	mov	r3, r0
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_InitTick+0xa8>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	3b01      	subs	r3, #1
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_InitTick+0xac>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_InitTick+0xb0>)
 8003b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_InitTick+0xac>)
 8003ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HAL_InitTick+0xac>)
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_InitTick+0xac>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_InitTick+0xac>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003bb8:	4809      	ldr	r0, [pc, #36]	; (8003be0 <HAL_InitTick+0xac>)
 8003bba:	f003 ff0f 	bl	80079dc <HAL_TIM_Base_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003bc4:	4806      	ldr	r0, [pc, #24]	; (8003be0 <HAL_InitTick+0xac>)
 8003bc6:	f003 ff3e 	bl	8007a46 <HAL_TIM_Base_Start_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	e000      	b.n	8003bd0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3730      	adds	r7, #48	; 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	2000072c 	.word	0x2000072c
 8003be4:	40010000 	.word	0x40010000

08003be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfa:	e7fe      	b.n	8003bfa <HardFault_Handler+0x4>

08003bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c00:	e7fe      	b.n	8003c00 <MemManage_Handler+0x4>

08003c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c06:	e7fe      	b.n	8003c06 <BusFault_Handler+0x4>

08003c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <UsageFault_Handler+0x4>

08003c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003c4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c4e:	f002 fac3 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c56:	f002 fabf 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c66:	f003 ff3d 	bl	8007ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000072c 	.word	0x2000072c

08003c74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <SPI2_IRQHandler+0x10>)
 8003c7a:	f003 fba5 	bl	80073c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2000067c 	.word	0x2000067c

08003c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <USART1_IRQHandler+0x68>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <USART1_IRQHandler+0x5a>
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <USART1_IRQHandler+0x68>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01b      	beq.n	8003ce2 <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <USART1_IRQHandler+0x68>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <USART1_IRQHandler+0x6c>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc0:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <USART1_IRQHandler+0x70>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	79ba      	ldrb	r2, [r7, #6]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d009      	beq.n	8003ce2 <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <USART1_IRQHandler+0x6c>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <USART1_IRQHandler+0x74>)
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8003cdc:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <USART1_IRQHandler+0x6c>)
 8003cde:	79bb      	ldrb	r3, [r7, #6]
 8003ce0:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003ce2:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	200007ec 	.word	0x200007ec
 8003cf4:	200002dc 	.word	0x200002dc
 8003cf8:	200002dd 	.word	0x200002dd
 8003cfc:	200002e0 	.word	0x200002e0

08003d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <USART2_IRQHandler+0x68>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d022      	beq.n	8003d5a <USART2_IRQHandler+0x5a>
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <USART2_IRQHandler+0x68>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <USART2_IRQHandler+0x68>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <USART2_IRQHandler+0x6c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d38:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <USART2_IRQHandler+0x70>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	79ba      	ldrb	r2, [r7, #6]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d009      	beq.n	8003d5a <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <USART2_IRQHandler+0x6c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <USART2_IRQHandler+0x74>)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003d54:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <USART2_IRQHandler+0x6c>)
 8003d56:	79bb      	ldrb	r3, [r7, #6]
 8003d58:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003d5a:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000082c 	.word	0x2000082c
 8003d6c:	20000364 	.word	0x20000364
 8003d70:	20000365 	.word	0x20000365
 8003d74:	20000368 	.word	0x20000368

08003d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <USART3_IRQHandler+0x68>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d022      	beq.n	8003dd2 <USART3_IRQHandler+0x5a>
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <USART3_IRQHandler+0x68>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01b      	beq.n	8003dd2 <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <USART3_IRQHandler+0x68>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <USART3_IRQHandler+0x6c>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db0:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <USART3_IRQHandler+0x70>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	79ba      	ldrb	r2, [r7, #6]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d009      	beq.n	8003dd2 <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <USART3_IRQHandler+0x6c>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <USART3_IRQHandler+0x74>)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8003dcc:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <USART3_IRQHandler+0x6c>)
 8003dce:	79bb      	ldrb	r3, [r7, #6]
 8003dd0:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003dd2:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	200007ac 	.word	0x200007ac
 8003de4:	20000320 	.word	0x20000320
 8003de8:	20000321 	.word	0x20000321
 8003dec:	20000324 	.word	0x20000324

08003df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003df4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003df8:	f002 f9ee 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003dfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e00:	f002 f9ea 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003e04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e08:	f002 f9e6 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e10:	f002 f9e2 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003e14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e18:	f002 f9de 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003e1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e20:	f002 f9da 	bl	80061d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
	return 1;
 8003e2c:	2301      	movs	r3, #1
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <_kill>:

int _kill(int pid, int sig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <_kill+0x20>)
 8003e44:	2216      	movs	r2, #22
 8003e46:	601a      	str	r2, [r3, #0]
	return -1;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20006b04 	.word	0x20006b04

08003e5c <_exit>:

void _exit (int status)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e64:	f04f 31ff 	mov.w	r1, #4294967295
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe5 	bl	8003e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e6e:	e7fe      	b.n	8003e6e <_exit+0x12>

08003e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e00a      	b.n	8003e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e82:	f3af 8000 	nop.w
 8003e86:	4601      	mov	r1, r0
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	60ba      	str	r2, [r7, #8]
 8003e8e:	b2ca      	uxtb	r2, r1
 8003e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3301      	adds	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	dbf0      	blt.n	8003e82 <_read+0x12>
	}

return len;
 8003ea0:	687b      	ldr	r3, [r7, #4]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e009      	b.n	8003ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	60ba      	str	r2, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dbf1      	blt.n	8003ebc <_write+0x12>
	}
	return len;
 8003ed8:	687b      	ldr	r3, [r7, #4]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_close>:

int _close(int file)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_isatty>:

int _isatty(int file)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
	return 1;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <_sbrk+0x5c>)
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <_sbrk+0x60>)
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <_sbrk+0x64>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <_sbrk+0x64>)
 8003f6a:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <_sbrk+0x68>)
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <_sbrk+0x64>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d205      	bcs.n	8003f88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <_sbrk+0x6c>)
 8003f7e:	220c      	movs	r2, #12
 8003f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295
 8003f86:	e009      	b.n	8003f9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <_sbrk+0x64>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <_sbrk+0x64>)
 8003f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20020000 	.word	0x20020000
 8003fac:	00004000 	.word	0x00004000
 8003fb0:	200002d8 	.word	0x200002d8
 8003fb4:	20006b18 	.word	0x20006b18
 8003fb8:	20006b04 	.word	0x20006b04

08003fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <SystemInit+0x28>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <SystemInit+0x28>)
 8003fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SystemInit+0x28>)
 8003fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fee:	f107 0320 	add.w	r3, r7, #32
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800400a:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <MX_TIM3_Init+0xec>)
 800400c:	4a32      	ldr	r2, [pc, #200]	; (80040d8 <MX_TIM3_Init+0xf0>)
 800400e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004012:	2200      	movs	r2, #0
 8004014:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <MX_TIM3_Init+0xec>)
 800401e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004022:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004024:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <MX_TIM3_Init+0xec>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004030:	4828      	ldr	r0, [pc, #160]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004032:	f003 fd2c 	bl	8007a8e <HAL_TIM_PWM_Init>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800403c:	f7fe fff4 	bl	8003028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004048:	f107 0320 	add.w	r3, r7, #32
 800404c:	4619      	mov	r1, r3
 800404e:	4821      	ldr	r0, [pc, #132]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004050:	f004 f98e 	bl	8008370 <HAL_TIMEx_MasterConfigSynchronization>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800405a:	f7fe ffe5 	bl	8003028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800405e:	2360      	movs	r3, #96	; 0x60
 8004060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2200      	movs	r2, #0
 8004072:	4619      	mov	r1, r3
 8004074:	4817      	ldr	r0, [pc, #92]	; (80040d4 <MX_TIM3_Init+0xec>)
 8004076:	f003 fe3d 	bl	8007cf4 <HAL_TIM_PWM_ConfigChannel>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004080:	f7fe ffd2 	bl	8003028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	2204      	movs	r2, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4812      	ldr	r0, [pc, #72]	; (80040d4 <MX_TIM3_Init+0xec>)
 800408c:	f003 fe32 	bl	8007cf4 <HAL_TIM_PWM_ConfigChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004096:	f7fe ffc7 	bl	8003028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2208      	movs	r2, #8
 800409e:	4619      	mov	r1, r3
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <MX_TIM3_Init+0xec>)
 80040a2:	f003 fe27 	bl	8007cf4 <HAL_TIM_PWM_ConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80040ac:	f7fe ffbc 	bl	8003028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	220c      	movs	r2, #12
 80040b4:	4619      	mov	r1, r3
 80040b6:	4807      	ldr	r0, [pc, #28]	; (80040d4 <MX_TIM3_Init+0xec>)
 80040b8:	f003 fe1c 	bl	8007cf4 <HAL_TIM_PWM_ConfigChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80040c2:	f7fe ffb1 	bl	8003028 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80040c6:	4803      	ldr	r0, [pc, #12]	; (80040d4 <MX_TIM3_Init+0xec>)
 80040c8:	f000 f82a 	bl	8004120 <HAL_TIM_MspPostInit>

}
 80040cc:	bf00      	nop
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	2000076c 	.word	0x2000076c
 80040d8:	40000400 	.word	0x40000400

080040dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_TIM_PWM_MspInit+0x3c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10d      	bne.n	800410a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_TIM_PWM_MspInit+0x40>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_TIM_PWM_MspInit+0x40>)
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_TIM_PWM_MspInit+0x40>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40000400 	.word	0x40000400
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a12      	ldr	r2, [pc, #72]	; (8004188 <HAL_TIM_MspPostInit+0x68>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d11e      	bne.n	8004180 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_TIM_MspPostInit+0x6c>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	4a10      	ldr	r2, [pc, #64]	; (800418c <HAL_TIM_MspPostInit+0x6c>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	6313      	str	r3, [r2, #48]	; 0x30
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_TIM_MspPostInit+0x6c>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800415e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416c:	2303      	movs	r3, #3
 800416e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004170:	2302      	movs	r3, #2
 8004172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	4619      	mov	r1, r3
 800417a:	4805      	ldr	r0, [pc, #20]	; (8004190 <HAL_TIM_MspPostInit+0x70>)
 800417c:	f001 fe5e 	bl	8005e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004180:	bf00      	nop
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40000400 	.word	0x40000400
 800418c:	40023800 	.word	0x40023800
 8004190:	40020800 	.word	0x40020800

08004194 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <MX_USART1_UART_Init+0x50>)
 800419c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041a0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80041a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041ba:	220c      	movs	r2, #12
 80041bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041ca:	4805      	ldr	r0, [pc, #20]	; (80041e0 <MX_USART1_UART_Init+0x4c>)
 80041cc:	f004 f960 	bl	8008490 <HAL_UART_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80041d6:	f7fe ff27 	bl	8003028 <Error_Handler>
  }

}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200007ec 	.word	0x200007ec
 80041e4:	40011000 	.word	0x40011000

080041e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <MX_USART2_UART_Init+0x50>)
 80041f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 80041f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 800420e:	220c      	movs	r2, #12
 8004210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800421e:	4805      	ldr	r0, [pc, #20]	; (8004234 <MX_USART2_UART_Init+0x4c>)
 8004220:	f004 f936 	bl	8008490 <HAL_UART_Init>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800422a:	f7fe fefd 	bl	8003028 <Error_Handler>
  }

}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000082c 	.word	0x2000082c
 8004238:	40004400 	.word	0x40004400

0800423c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <MX_USART3_UART_Init+0x50>)
 8004244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004248:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800424c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004262:	220c      	movs	r2, #12
 8004264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <MX_USART3_UART_Init+0x4c>)
 8004274:	f004 f90c 	bl	8008490 <HAL_UART_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800427e:	f7fe fed3 	bl	8003028 <Error_Handler>
  }

}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200007ac 	.word	0x200007ac
 800428c:	40004800 	.word	0x40004800

08004290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_UART_MspInit+0x180>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d135      	bne.n	800431e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042bc:	f043 0310 	orr.w	r3, r3, #16
 80042c0:	6453      	str	r3, [r2, #68]	; 0x44
 80042c2:	4b54      	ldr	r3, [pc, #336]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a4f      	ldr	r2, [pc, #316]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <HAL_UART_MspInit+0x184>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80042ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f8:	2303      	movs	r3, #3
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042fc:	2307      	movs	r3, #7
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004304:	4619      	mov	r1, r3
 8004306:	4844      	ldr	r0, [pc, #272]	; (8004418 <HAL_UART_MspInit+0x188>)
 8004308:	f001 fd98 	bl	8005e3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800430c:	2200      	movs	r2, #0
 800430e:	2100      	movs	r1, #0
 8004310:	2025      	movs	r0, #37	; 0x25
 8004312:	f000 fca5 	bl	8004c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004316:	2025      	movs	r0, #37	; 0x25
 8004318:	f000 fcbe 	bl	8004c98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800431c:	e073      	b.n	8004406 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3e      	ldr	r2, [pc, #248]	; (800441c <HAL_UART_MspInit+0x18c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d134      	bne.n	8004392 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_UART_MspInit+0x184>)
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	4a38      	ldr	r2, [pc, #224]	; (8004414 <HAL_UART_MspInit+0x184>)
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	6413      	str	r3, [r2, #64]	; 0x40
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_UART_MspInit+0x184>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_UART_MspInit+0x184>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4a31      	ldr	r2, [pc, #196]	; (8004414 <HAL_UART_MspInit+0x184>)
 800434e:	f043 0308 	orr.w	r3, r3, #8
 8004352:	6313      	str	r3, [r2, #48]	; 0x30
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_UART_MspInit+0x184>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004360:	2360      	movs	r3, #96	; 0x60
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004364:	2302      	movs	r3, #2
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436c:	2303      	movs	r3, #3
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004370:	2307      	movs	r3, #7
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4619      	mov	r1, r3
 800437a:	4829      	ldr	r0, [pc, #164]	; (8004420 <HAL_UART_MspInit+0x190>)
 800437c:	f001 fd5e 	bl	8005e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004380:	2200      	movs	r2, #0
 8004382:	2100      	movs	r1, #0
 8004384:	2026      	movs	r0, #38	; 0x26
 8004386:	f000 fc6b 	bl	8004c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800438a:	2026      	movs	r0, #38	; 0x26
 800438c:	f000 fc84 	bl	8004c98 <HAL_NVIC_EnableIRQ>
}
 8004390:	e039      	b.n	8004406 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_UART_MspInit+0x194>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d134      	bne.n	8004406 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043aa:	6413      	str	r3, [r2, #64]	; 0x40
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6313      	str	r3, [r2, #48]	; 0x30
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_UART_MspInit+0x184>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80043d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e2:	2303      	movs	r3, #3
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043e6:	2307      	movs	r3, #7
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	480d      	ldr	r0, [pc, #52]	; (8004428 <HAL_UART_MspInit+0x198>)
 80043f2:	f001 fd23 	bl	8005e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	2027      	movs	r0, #39	; 0x27
 80043fc:	f000 fc30 	bl	8004c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004400:	2027      	movs	r0, #39	; 0x27
 8004402:	f000 fc49 	bl	8004c98 <HAL_NVIC_EnableIRQ>
}
 8004406:	bf00      	nop
 8004408:	3738      	adds	r7, #56	; 0x38
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40011000 	.word	0x40011000
 8004414:	40023800 	.word	0x40023800
 8004418:	40020000 	.word	0x40020000
 800441c:	40004400 	.word	0x40004400
 8004420:	40020c00 	.word	0x40020c00
 8004424:	40004800 	.word	0x40004800
 8004428:	40020800 	.word	0x40020800

0800442c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <dbg_available+0x30>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	b29a      	uxth	r2, r3
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <dbg_available+0x34>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	3340      	adds	r3, #64	; 0x40
 8004446:	b29b      	uxth	r3, r3
 8004448:	b21b      	sxth	r3, r3
 800444a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444e:	b21b      	sxth	r3, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000320 	.word	0x20000320
 8004460:	20000321 	.word	0x20000321

08004464 <dbg_read>:

int16_t dbg_read(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <dbg_read+0x50>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <dbg_read+0x54>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	429a      	cmp	r2, r3
 8004478:	d102      	bne.n	8004480 <dbg_read+0x1c>
	{
		return -1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e012      	b.n	80044a6 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8004480:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <dbg_read+0x54>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <dbg_read+0x58>)
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <dbg_read+0x54>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3301      	adds	r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <dbg_read+0x54>)
 80044a0:	701a      	strb	r2, [r3, #0]
		return c;
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	b21b      	sxth	r3, r3
	}
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000320 	.word	0x20000320
 80044b8:	20000321 	.word	0x20000321
 80044bc:	20000324 	.word	0x20000324

080044c0 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80044c4:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <EN_Interrupt+0x40>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <EN_Interrupt+0x40>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <EN_Interrupt+0x44>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <EN_Interrupt+0x44>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0220 	orr.w	r2, r2, #32
 80044e2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <EN_Interrupt+0x48>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <EN_Interrupt+0x48>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0220 	orr.w	r2, r2, #32
 80044f2:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	200007ec 	.word	0x200007ec
 8004504:	200007ac 	.word	0x200007ac
 8004508:	2000082c 	.word	0x2000082c

0800450c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800450c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004544 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004512:	e003      	b.n	800451c <LoopCopyDataInit>

08004514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800451a:	3104      	adds	r1, #4

0800451c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800451c:	480b      	ldr	r0, [pc, #44]	; (800454c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004524:	d3f6      	bcc.n	8004514 <CopyDataInit>
  ldr  r2, =_sbss
 8004526:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004528:	e002      	b.n	8004530 <LoopFillZerobss>

0800452a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800452a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800452c:	f842 3b04 	str.w	r3, [r2], #4

08004530 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004534:	d3f9      	bcc.n	800452a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004536:	f7ff fd41 	bl	8003fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800453a:	f010 fc19 	bl	8014d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800453e:	f7fe fc61 	bl	8002e04 <main>
  bx  lr    
 8004542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004544:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004548:	0801c560 	.word	0x0801c560
  ldr  r0, =_sdata
 800454c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004550:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8004554:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8004558:	20006b14 	.word	0x20006b14

0800455c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800455c:	e7fe      	b.n	800455c <ADC_IRQHandler>
	...

08004560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <HAL_Init+0x40>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <HAL_Init+0x40>)
 800456a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_Init+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <HAL_Init+0x40>)
 8004576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800457a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_Init+0x40>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <HAL_Init+0x40>)
 8004582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004588:	2003      	movs	r0, #3
 800458a:	f000 fb5e 	bl	8004c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800458e:	2000      	movs	r0, #0
 8004590:	f7ff fad0 	bl	8003b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004594:	f7ff faa6 	bl	8003ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023c00 	.word	0x40023c00

080045a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_IncTick+0x20>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_IncTick+0x24>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_IncTick+0x24>)
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000014 	.word	0x20000014
 80045c8:	2000086c 	.word	0x2000086c

080045cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return uwTick;
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <HAL_GetTick+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000086c 	.word	0x2000086c

080045e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff ffee 	bl	80045cc <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d005      	beq.n	800460a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <HAL_Delay+0x44>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800460a:	bf00      	nop
 800460c:	f7ff ffde 	bl	80045cc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	429a      	cmp	r2, r3
 800461a:	d8f7      	bhi.n	800460c <HAL_Delay+0x28>
  {
  }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000014 	.word	0x20000014

0800462c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e033      	b.n	80046aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fc8a 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004672:	f023 0302 	bic.w	r3, r3, #2
 8004676:	f043 0202 	orr.w	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f93a 	bl	80048f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
 800469a:	e001      	b.n	80046a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x1c>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e105      	b.n	80048dc <HAL_ADC_ConfigChannel+0x228>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d925      	bls.n	800472c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68d9      	ldr	r1, [r3, #12]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	4613      	mov	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4413      	add	r3, r2
 80046f4:	3b1e      	subs	r3, #30
 80046f6:	2207      	movs	r2, #7
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43da      	mvns	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	400a      	ands	r2, r1
 8004704:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	4603      	mov	r3, r0
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4403      	add	r3, r0
 800471e:	3b1e      	subs	r3, #30
 8004720:	409a      	lsls	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	e022      	b.n	8004772 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	2207      	movs	r2, #7
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	400a      	ands	r2, r1
 800474e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6919      	ldr	r1, [r3, #16]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	4603      	mov	r3, r0
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4403      	add	r3, r0
 8004768:	409a      	lsls	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d824      	bhi.n	80047c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	3b05      	subs	r3, #5
 800478c:	221f      	movs	r2, #31
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	400a      	ands	r2, r1
 800479a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	3b05      	subs	r3, #5
 80047b6:	fa00 f203 	lsl.w	r2, r0, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34
 80047c2:	e04c      	b.n	800485e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d824      	bhi.n	8004816 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	3b23      	subs	r3, #35	; 0x23
 80047de:	221f      	movs	r2, #31
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43da      	mvns	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	400a      	ands	r2, r1
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4618      	mov	r0, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	3b23      	subs	r3, #35	; 0x23
 8004808:	fa00 f203 	lsl.w	r2, r0, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
 8004814:	e023      	b.n	800485e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	3b41      	subs	r3, #65	; 0x41
 8004828:	221f      	movs	r2, #31
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	400a      	ands	r2, r1
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	3b41      	subs	r3, #65	; 0x41
 8004852:	fa00 f203 	lsl.w	r2, r0, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <HAL_ADC_ConfigChannel+0x234>)
 8004860:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_ADC_ConfigChannel+0x238>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x1cc>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b12      	cmp	r3, #18
 8004872:	d105      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <HAL_ADC_ConfigChannel+0x238>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d123      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x21e>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b10      	cmp	r3, #16
 8004890:	d003      	beq.n	800489a <HAL_ADC_ConfigChannel+0x1e6>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b11      	cmp	r3, #17
 8004898:	d11b      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d111      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_ADC_ConfigChannel+0x23c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <HAL_ADC_ConfigChannel+0x240>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0c9a      	lsrs	r2, r3, #18
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048c4:	e002      	b.n	80048cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f9      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40012300 	.word	0x40012300
 80048ec:	40012000 	.word	0x40012000
 80048f0:	2000000c 	.word	0x2000000c
 80048f4:	431bde83 	.word	0x431bde83

080048f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004900:	4b79      	ldr	r3, [pc, #484]	; (8004ae8 <ADC_Init+0x1f0>)
 8004902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800492c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	4a58      	ldr	r2, [pc, #352]	; (8004aec <ADC_Init+0x1f4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800499e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e00f      	b.n	80049f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0202 	bic.w	r2, r2, #2
 8004a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7e1b      	ldrb	r3, [r3, #24]
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	035a      	lsls	r2, r3, #13
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	e007      	b.n	8004a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	051a      	lsls	r2, r3, #20
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aae:	025a      	lsls	r2, r3, #9
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	029a      	lsls	r2, r3, #10
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012300 	.word	0x40012300
 8004aec:	0f000001 	.word	0x0f000001

08004af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	60d3      	str	r3, [r2, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <__NVIC_GetPriorityGrouping+0x18>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	f003 0307 	and.w	r3, r3, #7
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db0b      	blt.n	8004b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	4907      	ldr	r1, [pc, #28]	; (8004b8c <__NVIC_EnableIRQ+0x38>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2001      	movs	r0, #1
 8004b76:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	db0a      	blt.n	8004bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	490c      	ldr	r1, [pc, #48]	; (8004bdc <__NVIC_SetPriority+0x4c>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb8:	e00a      	b.n	8004bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4908      	ldr	r1, [pc, #32]	; (8004be0 <__NVIC_SetPriority+0x50>)
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	3b04      	subs	r3, #4
 8004bc8:	0112      	lsls	r2, r2, #4
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	440b      	add	r3, r1
 8004bce:	761a      	strb	r2, [r3, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000e100 	.word	0xe000e100
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f1c3 0307 	rsb	r3, r3, #7
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf28      	it	cs
 8004c02:	2304      	movcs	r3, #4
 8004c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d902      	bls.n	8004c14 <NVIC_EncodePriority+0x30>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3b03      	subs	r3, #3
 8004c12:	e000      	b.n	8004c16 <NVIC_EncodePriority+0x32>
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	401a      	ands	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	43d9      	mvns	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	4313      	orrs	r3, r2
         );
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff4c 	bl	8004af0 <__NVIC_SetPriorityGrouping>
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c72:	f7ff ff61 	bl	8004b38 <__NVIC_GetPriorityGrouping>
 8004c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6978      	ldr	r0, [r7, #20]
 8004c7e:	f7ff ffb1 	bl	8004be4 <NVIC_EncodePriority>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff80 	bl	8004b90 <__NVIC_SetPriority>
}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff54 	bl	8004b54 <__NVIC_EnableIRQ>
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e00c      	b.n	8004cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004d08:	4baa      	ldr	r3, [pc, #680]	; (8004fb4 <HAL_ETH_Init+0x2bc>)
 8004d0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e183      	b.n	8005026 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f003 ffdc 	bl	8008cf0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	4b9e      	ldr	r3, [pc, #632]	; (8004fb8 <HAL_ETH_Init+0x2c0>)
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	4a9d      	ldr	r2, [pc, #628]	; (8004fb8 <HAL_ETH_Init+0x2c0>)
 8004d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d46:	6453      	str	r3, [r2, #68]	; 0x44
 8004d48:	4b9b      	ldr	r3, [pc, #620]	; (8004fb8 <HAL_ETH_Init+0x2c0>)
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004d54:	4b99      	ldr	r3, [pc, #612]	; (8004fbc <HAL_ETH_Init+0x2c4>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4a98      	ldr	r2, [pc, #608]	; (8004fbc <HAL_ETH_Init+0x2c4>)
 8004d5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d5e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004d60:	4b96      	ldr	r3, [pc, #600]	; (8004fbc <HAL_ETH_Init+0x2c4>)
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	4994      	ldr	r1, [pc, #592]	; (8004fbc <HAL_ETH_Init+0x2c4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d84:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d86:	f7ff fc21 	bl	80045cc <HAL_GetTick>
 8004d8a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004d8c:	e011      	b.n	8004db2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004d8e:	f7ff fc1d 	bl	80045cc <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d9c:	d909      	bls.n	8004db2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2203      	movs	r2, #3
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e139      	b.n	8005026 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e4      	bne.n	8004d8e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f023 031c 	bic.w	r3, r3, #28
 8004dd2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004dd4:	f001 fe50 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8004dd8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	4a78      	ldr	r2, [pc, #480]	; (8004fc0 <HAL_ETH_Init+0x2c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d908      	bls.n	8004df4 <HAL_ETH_Init+0xfc>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4a77      	ldr	r2, [pc, #476]	; (8004fc4 <HAL_ETH_Init+0x2cc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d804      	bhi.n	8004df4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f043 0308 	orr.w	r3, r3, #8
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e027      	b.n	8004e44 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4a73      	ldr	r2, [pc, #460]	; (8004fc4 <HAL_ETH_Init+0x2cc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d908      	bls.n	8004e0e <HAL_ETH_Init+0x116>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4a6d      	ldr	r2, [pc, #436]	; (8004fb4 <HAL_ETH_Init+0x2bc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d204      	bcs.n	8004e0e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f043 030c 	orr.w	r3, r3, #12
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e01a      	b.n	8004e44 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	4a68      	ldr	r2, [pc, #416]	; (8004fb4 <HAL_ETH_Init+0x2bc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d303      	bcc.n	8004e1e <HAL_ETH_Init+0x126>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4a6b      	ldr	r2, [pc, #428]	; (8004fc8 <HAL_ETH_Init+0x2d0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d911      	bls.n	8004e42 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4a69      	ldr	r2, [pc, #420]	; (8004fc8 <HAL_ETH_Init+0x2d0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d908      	bls.n	8004e38 <HAL_ETH_Init+0x140>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4a68      	ldr	r2, [pc, #416]	; (8004fcc <HAL_ETH_Init+0x2d4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d804      	bhi.n	8004e38 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e005      	b.n	8004e44 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f043 0310 	orr.w	r3, r3, #16
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e000      	b.n	8004e44 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004e42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004e4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb14 	bl	8005480 <HAL_ETH_WritePHYRegister>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fcc9 	bl	80057fc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0d7      	b.n	8005026 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004e76:	20ff      	movs	r0, #255	; 0xff
 8004e78:	f7ff fbb4 	bl	80045e4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a5 	beq.w	8004fd0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e86:	f7ff fba1 	bl	80045cc <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	461a      	mov	r2, r3
 8004e92:	2101      	movs	r1, #1
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa8b 	bl	80053b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004e9a:	f7ff fb97 	bl	80045cc <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d90f      	bls.n	8004ecc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fca2 	bl	80057fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0ac      	b.n	8005026 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0da      	beq.n	8004e8c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004eda:	2100      	movs	r1, #0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 facf 	bl	8005480 <HAL_ETH_WritePHYRegister>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004eec:	6939      	ldr	r1, [r7, #16]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fc84 	bl	80057fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004efc:	2301      	movs	r3, #1
 8004efe:	e092      	b.n	8005026 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f00:	f7ff fb64 	bl	80045cc <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa4e 	bl	80053b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004f14:	f7ff fb5a 	bl	80045cc <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d90f      	bls.n	8004f46 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004f2a:	6939      	ldr	r1, [r7, #16]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fc65 	bl	80057fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e06f      	b.n	8005026 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0da      	beq.n	8004f06 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	461a      	mov	r2, r3
 8004f56:	211f      	movs	r1, #31
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa29 	bl	80053b0 <HAL_ETH_ReadPHYRegister>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004f68:	6939      	ldr	r1, [r7, #16]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fc46 	bl	80057fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e054      	b.n	8005026 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	e002      	b.n	8004f96 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	e035      	b.n	8005014 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	e030      	b.n	8005014 <HAL_ETH_Init+0x31c>
 8004fb2:	bf00      	nop
 8004fb4:	03938700 	.word	0x03938700
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	01312cff 	.word	0x01312cff
 8004fc4:	02160ebf 	.word	0x02160ebf
 8004fc8:	05f5e0ff 	.word	0x05f5e0ff
 8004fcc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa49 	bl	8005480 <HAL_ETH_WritePHYRegister>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fbfe 	bl	80057fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e00c      	b.n	8005026 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800500c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005010:	f7ff fae8 	bl	80045e4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fbf0 	bl	80057fc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_ETH_DMATxDescListInit+0x20>
 800504c:	2302      	movs	r3, #2
 800504e:	e052      	b.n	80050f6 <HAL_ETH_DMATxDescListInit+0xc6>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e030      	b.n	80050ce <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	015b      	lsls	r3, r3, #5
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	4413      	add	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800507c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	461a      	mov	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d208      	bcs.n	80050c2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	015b      	lsls	r3, r3, #5
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	461a      	mov	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e002      	b.n	80050c8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3301      	adds	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3ca      	bcc.n	800506c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e0:	3310      	adds	r3, #16
 80050e2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_ETH_DMARxDescListInit+0x20>
 800511e:	2302      	movs	r3, #2
 8005120:	e056      	b.n	80051d0 <HAL_ETH_DMARxDescListInit+0xce>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e034      	b.n	80051a8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	015b      	lsls	r3, r3, #5
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800514e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005156:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	461a      	mov	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	429a      	cmp	r2, r3
 8005188:	d208      	bcs.n	800519c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	3301      	adds	r3, #1
 800518e:	015b      	lsls	r3, r3, #5
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	4413      	add	r3, r2
 8005194:	461a      	mov	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e002      	b.n	80051a2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	3301      	adds	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d3c6      	bcc.n	800513e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	330c      	adds	r3, #12
 80051bc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_ETH_TransmitFrame+0x24>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0cd      	b.n	800539c <HAL_ETH_TransmitFrame+0x1c0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005226:	2301      	movs	r3, #1
 8005228:	e0b8      	b.n	800539c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da09      	bge.n	8005248 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2212      	movs	r2, #18
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0a9      	b.n	800539c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800524e:	4293      	cmp	r3, r2
 8005250:	d915      	bls.n	800527e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4a54      	ldr	r2, [pc, #336]	; (80053a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	0a9b      	lsrs	r3, r3, #10
 800525c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005262:	fba3 1302 	umull	r1, r3, r3, r2
 8005266:	0a9b      	lsrs	r3, r3, #10
 8005268:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	3301      	adds	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e001      	b.n	8005282 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d11c      	bne.n	80052c2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005296:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80052a2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052b2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c
 80052c0:	e04b      	b.n	800535a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e044      	b.n	8005352 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052d6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d107      	bne.n	80052ee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80052f6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d116      	bne.n	8005330 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005310:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <HAL_ETH_TransmitFrame+0x1d0>)
 8005316:	fb02 f203 	mul.w	r2, r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4413      	add	r3, r2
 800531e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005322:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800532e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800533e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3301      	adds	r3, #1
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	429a      	cmp	r2, r3
 8005358:	d3b6      	bcc.n	80052c8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005362:	3314      	adds	r3, #20
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	3314      	adds	r3, #20
 8005378:	2204      	movs	r2, #4
 800537a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005384:	3304      	adds	r3, #4
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	ac02b00b 	.word	0xac02b00b
 80053ac:	fffffa0c 	.word	0xfffffa0c

080053b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	460b      	mov	r3, r1
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b82      	cmp	r3, #130	; 0x82
 80053d0:	d101      	bne.n	80053d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
 80053d4:	e050      	b.n	8005478 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2282      	movs	r2, #130	; 0x82
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 031c 	and.w	r3, r3, #28
 80053ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8a1b      	ldrh	r3, [r3, #16]
 80053f2:	02db      	lsls	r3, r3, #11
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80053fc:	897b      	ldrh	r3, [r7, #10]
 80053fe:	019b      	lsls	r3, r3, #6
 8005400:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0302 	bic.w	r3, r3, #2
 8005410:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005422:	f7ff f8d3 	bl	80045cc <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005428:	e015      	b.n	8005456 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800542a:	f7ff f8cf 	bl	80045cc <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005438:	d309      	bcc.n	800544e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e014      	b.n	8005478 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e4      	bne.n	800542a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	460b      	mov	r3, r1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b42      	cmp	r3, #66	; 0x42
 80054a0:	d101      	bne.n	80054a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	e04e      	b.n	8005544 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2242      	movs	r2, #66	; 0x42
 80054aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 031c 	and.w	r3, r3, #28
 80054bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8a1b      	ldrh	r3, [r3, #16]
 80054c2:	02db      	lsls	r3, r3, #11
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80054cc:	897b      	ldrh	r3, [r7, #10]
 80054ce:	019b      	lsls	r3, r3, #6
 80054d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80054fc:	f7ff f866 	bl	80045cc <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005502:	e015      	b.n	8005530 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005504:	f7ff f862 	bl	80045cc <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005512:	d309      	bcc.n	8005528 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e00d      	b.n	8005544 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e4      	bne.n	8005504 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_ETH_Start+0x16>
 800555e:	2302      	movs	r3, #2
 8005560:	e01f      	b.n	80055a2 <HAL_ETH_Start+0x56>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb44 	bl	8005c00 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb7b 	bl	8005c74 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fc12 	bl	8005da8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbaf 	bl	8005ce8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fbdc 	bl	8005d48 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_ETH_Stop+0x16>
 80055bc:	2302      	movs	r3, #2
 80055be:	e01f      	b.n	8005600 <HAL_ETH_Stop+0x56>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fba1 	bl	8005d18 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fbce 	bl	8005d78 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb66 	bl	8005cae <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fbe0 	bl	8005da8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fb26 	bl	8005c3a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_ETH_ConfigMAC+0x1c>
 8005620:	2302      	movs	r3, #2
 8005622:	e0e4      	b.n	80057ee <HAL_ETH_ConfigMAC+0x1e6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80b1 	beq.w	800579e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <HAL_ETH_ConfigMAC+0x1f0>)
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005654:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800565a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005660:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005666:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800566c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005672:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005678:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800567e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005684:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800568a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005690:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005696:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80056ae:	2001      	movs	r0, #1
 80056b0:	f7fe ff98 	bl	80045e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056c4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80056ca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80056d0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80056d6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80056dc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80056e2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80056ee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056f0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80056fa:	2001      	movs	r0, #1
 80056fc:	f7fe ff72 	bl	80045e4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005710:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800571a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f64f 7341 	movw	r3, #65345	; 0xff41
 800572a:	4013      	ands	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005738:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800573e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005744:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800574a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005750:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005768:	2001      	movs	r0, #1
 800576a:	f7fe ff3b 	bl	80045e4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800578e:	2001      	movs	r0, #1
 8005790:	f7fe ff28 	bl	80045e4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	61da      	str	r2, [r3, #28]
 800579c:	e01e      	b.n	80057dc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80057ac:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7fe ff08 	bl	80045e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	ff20810f 	.word	0xff20810f

080057fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0b0      	sub	sp, #192	; 0xc0
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005818:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005820:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005826:	2300      	movs	r3, #0
 8005828:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800582a:	2300      	movs	r3, #0
 800582c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800582e:	2300      	movs	r3, #0
 8005830:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005836:	2300      	movs	r3, #0
 8005838:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005846:	663b      	str	r3, [r7, #96]	; 0x60
 8005848:	e001      	b.n	800584e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800584a:	2300      	movs	r3, #0
 800584c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800584e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005852:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005854:	2300      	movs	r3, #0
 8005856:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005858:	2300      	movs	r3, #0
 800585a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800585c:	2300      	movs	r3, #0
 800585e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005860:	2300      	movs	r3, #0
 8005862:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005864:	2300      	movs	r3, #0
 8005866:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005872:	2300      	movs	r3, #0
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005878:	2300      	movs	r3, #0
 800587a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800588a:	2300      	movs	r3, #0
 800588c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005896:	2300      	movs	r3, #0
 8005898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80058d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058d4:	4bac      	ldr	r3, [pc, #688]	; (8005b88 <ETH_MACDMAConfig+0x38c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80058dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80058e0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80058e4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80058e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80058e8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80058ee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80058f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80058f2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80058f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80058f6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80058fc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80058fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005900:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005904:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005908:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800590c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800590e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005910:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005930:	2001      	movs	r0, #1
 8005932:	f7fe fe57 	bl	80045e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800593e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005940:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005944:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005948:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800594a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800594e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005954:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800595a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800595c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005960:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005964:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800596c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800596e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800597a:	2001      	movs	r0, #1
 800597c:	f7fe fe32 	bl	80045e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005988:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005992:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800599c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80059a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059ac:	f64f 7341 	movw	r3, #65345	; 0xff41
 80059b0:	4013      	ands	r3, r2
 80059b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059ba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80059bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059c0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80059c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80059c6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80059c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80059cc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80059ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80059d2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80059d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80059d8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059ec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fe fdf3 	bl	80045e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a06:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005a08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005a0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a22:	2001      	movs	r0, #1
 8005a24:	f7fe fdde 	bl	80045e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a30:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a44:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005a52:	2300      	movs	r3, #0
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005a56:	2304      	movs	r3, #4
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	3318      	adds	r3, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005a8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a92:	4b3e      	ldr	r3, [pc, #248]	; (8005b8c <ETH_MACDMAConfig+0x390>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a9a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005a9c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a9e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005aa0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005aa2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005aa4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005aa6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005aa8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005aaa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005aac:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005aae:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005ab2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005ab6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005aba:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005abc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	3318      	adds	r3, #24
 8005ad0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ad4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ade:	3318      	adds	r3, #24
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f7fe fd7c 	bl	80045e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af4:	3318      	adds	r3, #24
 8005af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005afa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b00:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005b04:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005b08:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005b0c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005b12:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005b16:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b24:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b34:	2001      	movs	r0, #1
 8005b36:	f7fe fd55 	bl	80045e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b46:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b58:	331c      	adds	r3, #28
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6c:	331c      	adds	r3, #28
 8005b6e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	461a      	mov	r2, r3
 8005b76:	2100      	movs	r1, #0
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f809 	bl	8005b90 <ETH_MACAddressConfig>
}
 8005b7e:	bf00      	nop
 8005b80:	37c0      	adds	r7, #192	; 0xc0
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	ff20810f 	.word	0xff20810f
 8005b8c:	f8de3f23 	.word	0xf8de3f23

08005b90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3305      	adds	r3, #5
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	3204      	adds	r2, #4
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <ETH_MACAddressConfig+0x68>)
 8005bb2:	4413      	add	r3, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	061a      	lsls	r2, r3, #24
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <ETH_MACAddressConfig+0x6c>)
 8005be2:	4413      	add	r3, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40028040 	.word	0x40028040
 8005bfc:	40028044 	.word	0x40028044

08005c00 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c24:	2001      	movs	r0, #1
 8005c26:	f000 f8e9 	bl	8005dfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0208 	bic.w	r2, r2, #8
 8005c54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f000 f8cc 	bl	8005dfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0204 	orr.w	r2, r2, #4
 8005c8e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f000 f8af 	bl	8005dfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	601a      	str	r2, [r3, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0204 	bic.w	r2, r2, #4
 8005cc8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	f000 f892 	bl	8005dfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d08:	3318      	adds	r3, #24
 8005d0a:	601a      	str	r2, [r3, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	3318      	adds	r3, #24
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	3318      	adds	r3, #24
 8005d3a:	601a      	str	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	3318      	adds	r3, #24
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0202 	orr.w	r2, r2, #2
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	3318      	adds	r3, #24
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	3318      	adds	r3, #24
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0202 	bic.w	r2, r2, #2
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	3318      	adds	r3, #24
 8005d9a:	601a      	str	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	3318      	adds	r3, #24
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dcc:	3318      	adds	r3, #24
 8005dce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd8:	3318      	adds	r3, #24
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005dde:	2001      	movs	r0, #1
 8005de0:	f000 f80c 	bl	8005dfc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dee:	3318      	adds	r3, #24
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <ETH_Delay+0x38>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <ETH_Delay+0x3c>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	0a5b      	lsrs	r3, r3, #9
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005e18:	bf00      	nop
  } 
  while (Delay --);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1e5a      	subs	r2, r3, #1
 8005e1e:	60fa      	str	r2, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f9      	bne.n	8005e18 <ETH_Delay+0x1c>
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c
 8005e38:	10624dd3 	.word	0x10624dd3

08005e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e16b      	b.n	8006130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e58:	2201      	movs	r2, #1
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f040 815a 	bne.w	800612a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d00b      	beq.n	8005e96 <HAL_GPIO_Init+0x5a>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d007      	beq.n	8005e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e8a:	2b11      	cmp	r3, #17
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b12      	cmp	r3, #18
 8005e94:	d130      	bne.n	8005ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ecc:	2201      	movs	r2, #1
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 0201 	and.w	r2, r3, #1
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	2203      	movs	r2, #3
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d003      	beq.n	8005f38 <HAL_GPIO_Init+0xfc>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b12      	cmp	r3, #18
 8005f36:	d123      	bne.n	8005f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	08da      	lsrs	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3208      	adds	r2, #8
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	220f      	movs	r2, #15
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	08da      	lsrs	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3208      	adds	r2, #8
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 0203 	and.w	r2, r3, #3
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80b4 	beq.w	800612a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b60      	ldr	r3, [pc, #384]	; (8006148 <HAL_GPIO_Init+0x30c>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	4a5f      	ldr	r2, [pc, #380]	; (8006148 <HAL_GPIO_Init+0x30c>)
 8005fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <HAL_GPIO_Init+0x30c>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fde:	4a5b      	ldr	r2, [pc, #364]	; (800614c <HAL_GPIO_Init+0x310>)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	089b      	lsrs	r3, r3, #2
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	220f      	movs	r2, #15
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	4013      	ands	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a52      	ldr	r2, [pc, #328]	; (8006150 <HAL_GPIO_Init+0x314>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02b      	beq.n	8006062 <HAL_GPIO_Init+0x226>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a51      	ldr	r2, [pc, #324]	; (8006154 <HAL_GPIO_Init+0x318>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d025      	beq.n	800605e <HAL_GPIO_Init+0x222>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a50      	ldr	r2, [pc, #320]	; (8006158 <HAL_GPIO_Init+0x31c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <HAL_GPIO_Init+0x21e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a4f      	ldr	r2, [pc, #316]	; (800615c <HAL_GPIO_Init+0x320>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d019      	beq.n	8006056 <HAL_GPIO_Init+0x21a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a4e      	ldr	r2, [pc, #312]	; (8006160 <HAL_GPIO_Init+0x324>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_GPIO_Init+0x216>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a4d      	ldr	r2, [pc, #308]	; (8006164 <HAL_GPIO_Init+0x328>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00d      	beq.n	800604e <HAL_GPIO_Init+0x212>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a4c      	ldr	r2, [pc, #304]	; (8006168 <HAL_GPIO_Init+0x32c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <HAL_GPIO_Init+0x20e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a4b      	ldr	r2, [pc, #300]	; (800616c <HAL_GPIO_Init+0x330>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_GPIO_Init+0x20a>
 8006042:	2307      	movs	r3, #7
 8006044:	e00e      	b.n	8006064 <HAL_GPIO_Init+0x228>
 8006046:	2308      	movs	r3, #8
 8006048:	e00c      	b.n	8006064 <HAL_GPIO_Init+0x228>
 800604a:	2306      	movs	r3, #6
 800604c:	e00a      	b.n	8006064 <HAL_GPIO_Init+0x228>
 800604e:	2305      	movs	r3, #5
 8006050:	e008      	b.n	8006064 <HAL_GPIO_Init+0x228>
 8006052:	2304      	movs	r3, #4
 8006054:	e006      	b.n	8006064 <HAL_GPIO_Init+0x228>
 8006056:	2303      	movs	r3, #3
 8006058:	e004      	b.n	8006064 <HAL_GPIO_Init+0x228>
 800605a:	2302      	movs	r3, #2
 800605c:	e002      	b.n	8006064 <HAL_GPIO_Init+0x228>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_GPIO_Init+0x228>
 8006062:	2300      	movs	r3, #0
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	f002 0203 	and.w	r2, r2, #3
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4093      	lsls	r3, r2
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006074:	4935      	ldr	r1, [pc, #212]	; (800614c <HAL_GPIO_Init+0x310>)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	3302      	adds	r3, #2
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006082:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <HAL_GPIO_Init+0x334>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	43db      	mvns	r3, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4013      	ands	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060a6:	4a32      	ldr	r2, [pc, #200]	; (8006170 <HAL_GPIO_Init+0x334>)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HAL_GPIO_Init+0x334>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060d0:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_GPIO_Init+0x334>)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <HAL_GPIO_Init+0x334>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_GPIO_Init+0x334>)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006100:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <HAL_GPIO_Init+0x334>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006124:	4a12      	ldr	r2, [pc, #72]	; (8006170 <HAL_GPIO_Init+0x334>)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	f67f ae90 	bls.w	8005e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3724      	adds	r7, #36	; 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800
 800614c:	40013800 	.word	0x40013800
 8006150:	40020000 	.word	0x40020000
 8006154:	40020400 	.word	0x40020400
 8006158:	40020800 	.word	0x40020800
 800615c:	40020c00 	.word	0x40020c00
 8006160:	40021000 	.word	0x40021000
 8006164:	40021400 	.word	0x40021400
 8006168:	40021800 	.word	0x40021800
 800616c:	40021c00 	.word	0x40021c00
 8006170:	40013c00 	.word	0x40013c00

08006174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
 8006190:	e001      	b.n	8006196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
 80061b0:	4613      	mov	r3, r2
 80061b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b4:	787b      	ldrb	r3, [r7, #1]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ba:	887a      	ldrh	r2, [r7, #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061c0:	e003      	b.n	80061ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	041a      	lsls	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061ee:	4a05      	ldr	r2, [pc, #20]	; (8006204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fc fed0 	bl	8002f9c <HAL_GPIO_EXTI_Callback>
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40013c00 	.word	0x40013c00

08006208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e25b      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d075      	beq.n	8006312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006226:	4ba3      	ldr	r3, [pc, #652]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b04      	cmp	r3, #4
 8006230:	d00c      	beq.n	800624c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006232:	4ba0      	ldr	r3, [pc, #640]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800623a:	2b08      	cmp	r3, #8
 800623c:	d112      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4b9d      	ldr	r3, [pc, #628]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624a:	d10b      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	4b99      	ldr	r3, [pc, #612]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d05b      	beq.n	8006310 <HAL_RCC_OscConfig+0x108>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d157      	bne.n	8006310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e236      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x74>
 800626e:	4b91      	ldr	r3, [pc, #580]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a90      	ldr	r2, [pc, #576]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e01d      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x98>
 8006286:	4b8b      	ldr	r3, [pc, #556]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a8a      	ldr	r2, [pc, #552]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b88      	ldr	r3, [pc, #544]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a87      	ldr	r2, [pc, #540]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 80062a0:	4b84      	ldr	r3, [pc, #528]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a83      	ldr	r2, [pc, #524]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b81      	ldr	r3, [pc, #516]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a80      	ldr	r2, [pc, #512]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fe f984 	bl	80045cc <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fe f980 	bl	80045cc <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	; 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1fb      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	4b76      	ldr	r3, [pc, #472]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0xc0>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e8:	f7fe f970 	bl	80045cc <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fe f96c 	bl	80045cc <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	; 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e1e7      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	4b6c      	ldr	r3, [pc, #432]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0xe8>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d063      	beq.n	80063e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632a:	4b62      	ldr	r3, [pc, #392]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006332:	2b08      	cmp	r3, #8
 8006334:	d11c      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006336:	4b5f      	ldr	r3, [pc, #380]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d116      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	4b5c      	ldr	r3, [pc, #368]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d001      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e1bb      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635a:	4b56      	ldr	r3, [pc, #344]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4952      	ldr	r1, [pc, #328]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636e:	e03a      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006378:	4b4f      	ldr	r3, [pc, #316]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fe f925 	bl	80045cc <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fe f921 	bl	80045cc <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e19c      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	4b46      	ldr	r3, [pc, #280]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4940      	ldr	r1, [pc, #256]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fe f904 	bl	80045cc <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c8:	f7fe f900 	bl	80045cc <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e17b      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d030      	beq.n	8006454 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <HAL_RCC_OscConfig+0x2b4>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006400:	f7fe f8e4 	bl	80045cc <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006408:	f7fe f8e0 	bl	80045cc <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e15b      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x200>
 8006426:	e015      	b.n	8006454 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006428:	4b24      	ldr	r3, [pc, #144]	; (80064bc <HAL_RCC_OscConfig+0x2b4>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fe f8cd 	bl	80045cc <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006436:	f7fe f8c9 	bl	80045cc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e144      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a0 	beq.w	80065a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10f      	bne.n	8006492 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCC_OscConfig+0x2b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d121      	bne.n	80064e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_RCC_OscConfig+0x2b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <HAL_RCC_OscConfig+0x2b8>)
 80064a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064aa:	f7fe f88f 	bl	80045cc <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b0:	e011      	b.n	80064d6 <HAL_RCC_OscConfig+0x2ce>
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	42470000 	.word	0x42470000
 80064bc:	42470e80 	.word	0x42470e80
 80064c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c4:	f7fe f882 	bl	80045cc <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e0fd      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d6:	4b81      	ldr	r3, [pc, #516]	; (80066dc <HAL_RCC_OscConfig+0x4d4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d106      	bne.n	80064f8 <HAL_RCC_OscConfig+0x2f0>
 80064ea:	4b7d      	ldr	r3, [pc, #500]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a7c      	ldr	r2, [pc, #496]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
 80064f6:	e01c      	b.n	8006532 <HAL_RCC_OscConfig+0x32a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d10c      	bne.n	800651a <HAL_RCC_OscConfig+0x312>
 8006500:	4b77      	ldr	r3, [pc, #476]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	4a76      	ldr	r2, [pc, #472]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006506:	f043 0304 	orr.w	r3, r3, #4
 800650a:	6713      	str	r3, [r2, #112]	; 0x70
 800650c:	4b74      	ldr	r3, [pc, #464]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a73      	ldr	r2, [pc, #460]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	e00b      	b.n	8006532 <HAL_RCC_OscConfig+0x32a>
 800651a:	4b71      	ldr	r3, [pc, #452]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a70      	ldr	r2, [pc, #448]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	4b6e      	ldr	r3, [pc, #440]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	4a6d      	ldr	r2, [pc, #436]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d015      	beq.n	8006566 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653a:	f7fe f847 	bl	80045cc <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	e00a      	b.n	8006558 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fe f843 	bl	80045cc <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e0bc      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006558:	4b61      	ldr	r3, [pc, #388]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0ee      	beq.n	8006542 <HAL_RCC_OscConfig+0x33a>
 8006564:	e014      	b.n	8006590 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006566:	f7fe f831 	bl	80045cc <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656e:	f7fe f82d 	bl	80045cc <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	; 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0a6      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006584:	4b56      	ldr	r3, [pc, #344]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ee      	bne.n	800656e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d105      	bne.n	80065a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006596:	4b52      	ldr	r3, [pc, #328]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	4a51      	ldr	r2, [pc, #324]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 800659c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8092 	beq.w	80066d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ac:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 030c 	and.w	r3, r3, #12
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d05c      	beq.n	8006672 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d141      	bne.n	8006644 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c0:	4b48      	ldr	r3, [pc, #288]	; (80066e4 <HAL_RCC_OscConfig+0x4dc>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c6:	f7fe f801 	bl	80045cc <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ce:	f7fd fffd 	bl	80045cc <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e078      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e0:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	019b      	lsls	r3, r3, #6
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	3b01      	subs	r3, #1
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	061b      	lsls	r3, r3, #24
 8006610:	4933      	ldr	r1, [pc, #204]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006616:	4b33      	ldr	r3, [pc, #204]	; (80066e4 <HAL_RCC_OscConfig+0x4dc>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661c:	f7fd ffd6 	bl	80045cc <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006624:	f7fd ffd2 	bl	80045cc <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e04d      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006636:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x41c>
 8006642:	e045      	b.n	80066d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006644:	4b27      	ldr	r3, [pc, #156]	; (80066e4 <HAL_RCC_OscConfig+0x4dc>)
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664a:	f7fd ffbf 	bl	80045cc <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006652:	f7fd ffbb 	bl	80045cc <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e036      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006664:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <HAL_RCC_OscConfig+0x44a>
 8006670:	e02e      	b.n	80066d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e029      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667e:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <HAL_RCC_OscConfig+0x4d8>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	429a      	cmp	r2, r3
 8006690:	d11c      	bne.n	80066cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d115      	bne.n	80066cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066a6:	4013      	ands	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10d      	bne.n	80066cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d106      	bne.n	80066cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d001      	beq.n	80066d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40007000 	.word	0x40007000
 80066e0:	40023800 	.word	0x40023800
 80066e4:	42470060 	.word	0x42470060

080066e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0cc      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d90c      	bls.n	8006724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b65      	ldr	r3, [pc, #404]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0b8      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800673c:	4b59      	ldr	r3, [pc, #356]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a58      	ldr	r2, [pc, #352]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006754:	4b53      	ldr	r3, [pc, #332]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a52      	ldr	r2, [pc, #328]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800675e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006760:	4b50      	ldr	r3, [pc, #320]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	494d      	ldr	r1, [pc, #308]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	4313      	orrs	r3, r2
 8006770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d044      	beq.n	8006808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d107      	bne.n	8006796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d119      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e07f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d003      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d107      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a6:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e06f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b6:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e067      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067c6:	4b37      	ldr	r3, [pc, #220]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f023 0203 	bic.w	r2, r3, #3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4934      	ldr	r1, [pc, #208]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d8:	f7fd fef8 	bl	80045cc <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e0:	f7fd fef4 	bl	80045cc <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e04f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f6:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 020c 	and.w	r2, r3, #12
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	429a      	cmp	r2, r3
 8006806:	d1eb      	bne.n	80067e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d20c      	bcs.n	8006830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d001      	beq.n	8006830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e032      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800683c:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	4916      	ldr	r1, [pc, #88]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	490e      	ldr	r1, [pc, #56]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800686e:	f000 f821 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8006872:	4602      	mov	r2, r0
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	490a      	ldr	r1, [pc, #40]	; (80068a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	5ccb      	ldrb	r3, [r1, r3]
 8006882:	fa22 f303 	lsr.w	r3, r2, r3
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <HAL_RCC_ClockConfig+0x1c4>)
 8006888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x1c8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7fd f950 	bl	8003b34 <HAL_InitTick>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023c00 	.word	0x40023c00
 80068a4:	40023800 	.word	0x40023800
 80068a8:	0801bfc0 	.word	0x0801bfc0
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	20000010 	.word	0x20000010

080068b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	2300      	movs	r3, #0
 80068c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068cc:	4b67      	ldr	r3, [pc, #412]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 030c 	and.w	r3, r3, #12
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d00d      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x40>
 80068d8:	2b08      	cmp	r3, #8
 80068da:	f200 80bd 	bhi.w	8006a58 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x34>
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d003      	beq.n	80068ee <HAL_RCC_GetSysClockFreq+0x3a>
 80068e6:	e0b7      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e8:	4b61      	ldr	r3, [pc, #388]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068ea:	60bb      	str	r3, [r7, #8]
       break;
 80068ec:	e0b7      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ee:	4b61      	ldr	r3, [pc, #388]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068f0:	60bb      	str	r3, [r7, #8]
      break;
 80068f2:	e0b4      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f4:	4b5d      	ldr	r3, [pc, #372]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068fe:	4b5b      	ldr	r3, [pc, #364]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04d      	beq.n	80069a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800690a:	4b58      	ldr	r3, [pc, #352]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	099b      	lsrs	r3, r3, #6
 8006910:	461a      	mov	r2, r3
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	ea02 0800 	and.w	r8, r2, r0
 8006922:	ea03 0901 	and.w	r9, r3, r1
 8006926:	4640      	mov	r0, r8
 8006928:	4649      	mov	r1, r9
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	014b      	lsls	r3, r1, #5
 8006934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006938:	0142      	lsls	r2, r0, #5
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	ebb0 0008 	subs.w	r0, r0, r8
 8006942:	eb61 0109 	sbc.w	r1, r1, r9
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	018b      	lsls	r3, r1, #6
 8006950:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006954:	0182      	lsls	r2, r0, #6
 8006956:	1a12      	subs	r2, r2, r0
 8006958:	eb63 0301 	sbc.w	r3, r3, r1
 800695c:	f04f 0000 	mov.w	r0, #0
 8006960:	f04f 0100 	mov.w	r1, #0
 8006964:	00d9      	lsls	r1, r3, #3
 8006966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800696a:	00d0      	lsls	r0, r2, #3
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	eb12 0208 	adds.w	r2, r2, r8
 8006974:	eb43 0309 	adc.w	r3, r3, r9
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	0259      	lsls	r1, r3, #9
 8006982:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006986:	0250      	lsls	r0, r2, #9
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	461a      	mov	r2, r3
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	f7fa f916 	bl	8000bc8 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4613      	mov	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e04a      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069a6:	4b31      	ldr	r3, [pc, #196]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	099b      	lsrs	r3, r3, #6
 80069ac:	461a      	mov	r2, r3
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	ea02 0400 	and.w	r4, r2, r0
 80069be:	ea03 0501 	and.w	r5, r3, r1
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	014b      	lsls	r3, r1, #5
 80069d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069d4:	0142      	lsls	r2, r0, #5
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	1b00      	subs	r0, r0, r4
 80069dc:	eb61 0105 	sbc.w	r1, r1, r5
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	018b      	lsls	r3, r1, #6
 80069ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069ee:	0182      	lsls	r2, r0, #6
 80069f0:	1a12      	subs	r2, r2, r0
 80069f2:	eb63 0301 	sbc.w	r3, r3, r1
 80069f6:	f04f 0000 	mov.w	r0, #0
 80069fa:	f04f 0100 	mov.w	r1, #0
 80069fe:	00d9      	lsls	r1, r3, #3
 8006a00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a04:	00d0      	lsls	r0, r2, #3
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	1912      	adds	r2, r2, r4
 8006a0c:	eb45 0303 	adc.w	r3, r5, r3
 8006a10:	f04f 0000 	mov.w	r0, #0
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	0299      	lsls	r1, r3, #10
 8006a1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a1e:	0290      	lsls	r0, r2, #10
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	f7fa f8ca 	bl	8000bc8 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4613      	mov	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	3301      	adds	r3, #1
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	60bb      	str	r3, [r7, #8]
      break;
 8006a56:	e002      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a5a:	60bb      	str	r3, [r7, #8]
      break;
 8006a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	00f42400 	.word	0x00f42400
 8006a74:	007a1200 	.word	0x007a1200

08006a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c

08006a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a94:	f7ff fff0 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	0a9b      	lsrs	r3, r3, #10
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	4903      	ldr	r1, [pc, #12]	; (8006ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aa6:	5ccb      	ldrb	r3, [r1, r3]
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	0801bfd0 	.word	0x0801bfd0

08006ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006abc:	f7ff ffdc 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	0b5b      	lsrs	r3, r3, #13
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	4903      	ldr	r1, [pc, #12]	; (8006adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ace:	5ccb      	ldrb	r3, [r1, r3]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	0801bfd0 	.word	0x0801bfd0

08006ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220f      	movs	r2, #15
 8006aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <HAL_RCC_GetClockConfig+0x5c>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0203 	and.w	r2, r3, #3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <HAL_RCC_GetClockConfig+0x5c>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <HAL_RCC_GetClockConfig+0x5c>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <HAL_RCC_GetClockConfig+0x5c>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	08db      	lsrs	r3, r3, #3
 8006b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b22:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <HAL_RCC_GetClockConfig+0x60>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	601a      	str	r2, [r3, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	40023c00 	.word	0x40023c00

08006b44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d035      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b6c:	4b62      	ldr	r3, [pc, #392]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b72:	f7fd fd2b 	bl	80045cc <HAL_GetTick>
 8006b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b7a:	f7fd fd27 	bl	80045cc <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e0b0      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b8c:	4b5b      	ldr	r3, [pc, #364]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f0      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	019a      	lsls	r2, r3, #6
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	071b      	lsls	r3, r3, #28
 8006ba4:	4955      	ldr	r1, [pc, #340]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bac:	4b52      	ldr	r3, [pc, #328]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb2:	f7fd fd0b 	bl	80045cc <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bba:	f7fd fd07 	bl	80045cc <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e090      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bcc:	4b4b      	ldr	r3, [pc, #300]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8083 	beq.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	4b44      	ldr	r3, [pc, #272]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	4a43      	ldr	r2, [pc, #268]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf6:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a3e      	ldr	r2, [pc, #248]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0e:	f7fd fcdd 	bl	80045cc <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c16:	f7fd fcd9 	bl	80045cc <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e062      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c28:	4b35      	ldr	r3, [pc, #212]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c34:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02f      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d028      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c52:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c5c:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c62:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c6e:	4b23      	ldr	r3, [pc, #140]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d114      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c7a:	f7fd fca7 	bl	80045cc <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c82:	f7fd fca3 	bl	80045cc <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e02a      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c98:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ee      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb0:	d10d      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cb2:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc6:	490d      	ldr	r1, [pc, #52]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	608b      	str	r3, [r1, #8]
 8006ccc:	e005      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cd8:	6093      	str	r3, [r2, #8]
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce6:	4905      	ldr	r1, [pc, #20]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	42470068 	.word	0x42470068
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40007000 	.word	0x40007000
 8006d04:	42470e40 	.word	0x42470e40

08006d08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e083      	b.n	8006e22 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7f5b      	ldrb	r3, [r3, #29]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fc f9de 	bl	80030ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	22ca      	movs	r2, #202	; 0xca
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2253      	movs	r2, #83	; 0x53
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9fb 	bl	8007142 <RTC_EnterInitMode>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	22ff      	movs	r2, #255	; 0xff
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e05e      	b.n	8006e22 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6812      	ldr	r2, [r2, #0]
 8006d6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6899      	ldr	r1, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68d2      	ldr	r2, [r2, #12]
 8006d9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6919      	ldr	r1, [r3, #16]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	041a      	lsls	r2, r3, #16
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10e      	bne.n	8006df0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f98d 	bl	80070f2 <HAL_RTC_WaitForSynchro>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d008      	beq.n	8006df0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	22ff      	movs	r2, #255	; 0xff
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2204      	movs	r2, #4
 8006dea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e018      	b.n	8006e22 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	22ff      	movs	r2, #255	; 0xff
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006e20:	2300      	movs	r3, #0
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e2a:	b590      	push	{r4, r7, lr}
 8006e2c:	b087      	sub	sp, #28
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7f1b      	ldrb	r3, [r3, #28]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_RTC_SetTime+0x1c>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0aa      	b.n	8006f9c <HAL_RTC_SetTime+0x172>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d126      	bne.n	8006ea6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 f992 	bl	800719a <RTC_ByteToBcd2>
 8006e76:	4603      	mov	r3, r0
 8006e78:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f98b 	bl	800719a <RTC_ByteToBcd2>
 8006e84:	4603      	mov	r3, r0
 8006e86:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e88:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	789b      	ldrb	r3, [r3, #2]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f983 	bl	800719a <RTC_ByteToBcd2>
 8006e94:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006e96:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	78db      	ldrb	r3, [r3, #3]
 8006e9e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e018      	b.n	8006ed8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ec6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ecc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	78db      	ldrb	r3, [r3, #3]
 8006ed2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	22ca      	movs	r2, #202	; 0xca
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2253      	movs	r2, #83	; 0x53
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f92a 	bl	8007142 <RTC_EnterInitMode>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2204      	movs	r2, #4
 8006f00:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e047      	b.n	8006f9c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d111      	bne.n	8006f86 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f8c5 	bl	80070f2 <HAL_RTC_WaitForSynchro>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	22ff      	movs	r2, #255	; 0xff
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2204      	movs	r2, #4
 8006f7a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e00a      	b.n	8006f9c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}

08006fa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7f1b      	ldrb	r3, [r3, #28]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_RTC_SetDate+0x1c>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e094      	b.n	80070ea <HAL_RTC_SetDate+0x146>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10e      	bne.n	8006ff0 <HAL_RTC_SetDate+0x4c>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d008      	beq.n	8006ff0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	f023 0310 	bic.w	r3, r3, #16
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	330a      	adds	r3, #10
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11c      	bne.n	8007030 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	78db      	ldrb	r3, [r3, #3]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f8cd 	bl	800719a <RTC_ByteToBcd2>
 8007000:	4603      	mov	r3, r0
 8007002:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f8c6 	bl	800719a <RTC_ByteToBcd2>
 800700e:	4603      	mov	r3, r0
 8007010:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007012:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	789b      	ldrb	r3, [r3, #2]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f8be 	bl	800719a <RTC_ByteToBcd2>
 800701e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007020:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e00e      	b.n	800704e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800703c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007042:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	22ca      	movs	r2, #202	; 0xca
 8007054:	625a      	str	r2, [r3, #36]	; 0x24
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2253      	movs	r2, #83	; 0x53
 800705c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f86f 	bl	8007142 <RTC_EnterInitMode>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	22ff      	movs	r2, #255	; 0xff
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2204      	movs	r2, #4
 8007076:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e033      	b.n	80070ea <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800708c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007090:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d111      	bne.n	80070d4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f81e 	bl	80070f2 <HAL_RTC_WaitForSynchro>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2204      	movs	r2, #4
 80070c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e00a      	b.n	80070ea <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	22ff      	movs	r2, #255	; 0xff
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd90      	pop	{r4, r7, pc}

080070f2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800710c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800710e:	f7fd fa5d 	bl	80045cc <HAL_GetTick>
 8007112:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007114:	e009      	b.n	800712a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007116:	f7fd fa59 	bl	80045cc <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007124:	d901      	bls.n	800712a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e007      	b.n	800713a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0ee      	beq.n	8007116 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d119      	bne.n	8007190 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007166:	f7fd fa31 	bl	80045cc <HAL_GetTick>
 800716a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800716c:	e009      	b.n	8007182 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800716e:	f7fd fa2d 	bl	80045cc <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800717c:	d901      	bls.n	8007182 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e007      	b.n	8007192 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ee      	beq.n	800716e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	4603      	mov	r3, r0
 80071a2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80071a8:	e005      	b.n	80071b6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	3b0a      	subs	r3, #10
 80071b4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	2b09      	cmp	r3, #9
 80071ba:	d8f6      	bhi.n	80071aa <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e056      	b.n	8007296 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fff0 	bl	80031e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	ea42 0103 	orr.w	r1, r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	0c1b      	lsrs	r3, r3, #16
 8007266:	f003 0104 	and.w	r1, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_SPI_TransmitReceive_IT+0x20>
 80072bc:	2302      	movs	r3, #2
 80072be:	e075      	b.n	80073ac <HAL_SPI_TransmitReceive_IT+0x10c>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072d6:	7dbb      	ldrb	r3, [r7, #22]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d00d      	beq.n	80072f8 <HAL_SPI_TransmitReceive_IT+0x58>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072e2:	d106      	bne.n	80072f2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <HAL_SPI_TransmitReceive_IT+0x52>
 80072ec:	7dbb      	ldrb	r3, [r7, #22]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d002      	beq.n	80072f8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80072f2:	2302      	movs	r3, #2
 80072f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072f6:	e054      	b.n	80073a2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_SPI_TransmitReceive_IT+0x6a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800730e:	e048      	b.n	80073a2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b04      	cmp	r3, #4
 800731a:	d003      	beq.n	8007324 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2205      	movs	r2, #5
 8007320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	887a      	ldrh	r2, [r7, #2]
 800733a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	887a      	ldrh	r2, [r7, #2]
 8007346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	887a      	ldrh	r2, [r7, #2]
 800734c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800735a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <HAL_SPI_TransmitReceive_IT+0x11c>)
 8007360:	645a      	str	r2, [r3, #68]	; 0x44
 8007362:	e005      	b.n	8007370 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800736e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800737e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d008      	beq.n	80073a0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e000      	b.n	80073a2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80073a0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	080076dd 	.word	0x080076dd
 80073bc:	0800773d 	.word	0x0800773d
 80073c0:	08007619 	.word	0x08007619
 80073c4:	0800767d 	.word	0x0800767d

080073c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	099b      	lsrs	r3, r3, #6
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10f      	bne.n	800740c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	099b      	lsrs	r3, r3, #6
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
    return;
 800740a:	e0d7      	b.n	80075bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <HAL_SPI_IRQHandler+0x66>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	09db      	lsrs	r3, r3, #7
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
    return;
 800742c:	e0c6      	b.n	80075bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10c      	bne.n	8007454 <HAL_SPI_IRQHandler+0x8c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	099b      	lsrs	r3, r3, #6
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80b4 	beq.w	80075bc <HAL_SPI_IRQHandler+0x1f4>
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80ad 	beq.w	80075bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	099b      	lsrs	r3, r3, #6
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d023      	beq.n	80074b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d011      	beq.n	800749e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f043 0204 	orr.w	r2, r3, #4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	e00b      	b.n	80074b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	693b      	ldr	r3, [r7, #16]
        return;
 80074b4:	e082      	b.n	80075bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d014      	beq.n	80074ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f043 0201 	orr.w	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fc:	f043 0208 	orr.w	r2, r3, #8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007504:	2300      	movs	r3, #0
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04f      	beq.n	80075ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007528:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <HAL_SPI_IRQHandler+0x17e>
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d034      	beq.n	80075b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0203 	bic.w	r2, r2, #3
 8007554:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007562:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <HAL_SPI_IRQHandler+0x1fc>)
 8007564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd fba2 	bl	8004cb4 <HAL_DMA_Abort_IT>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007586:	2b00      	cmp	r3, #0
 8007588:	d016      	beq.n	80075b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758e:	4a0d      	ldr	r2, [pc, #52]	; (80075c4 <HAL_SPI_IRQHandler+0x1fc>)
 8007590:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd fb8c 	bl	8004cb4 <HAL_DMA_Abort_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80075ae:	e003      	b.n	80075b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f813 	bl	80075dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075b6:	e000      	b.n	80075ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80075b8:	bf00      	nop
    return;
 80075ba:	bf00      	nop
  }
}
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	080075f1 	.word	0x080075f1

080075c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff ffe6 	bl	80075dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f103 020c 	add.w	r2, r3, #12
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007662:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f940 	bl	80078f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f910 	bl	80078f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	b292      	uxth	r2, r2
 80076f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	1c9a      	adds	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8e0 	bl	80078f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10f      	bne.n	8007792 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007780:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8b1 	bl	80078f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077aa:	e04c      	b.n	8007846 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	d048      	beq.n	8007846 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077b4:	f7fc ff0a 	bl	80045cc <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d902      	bls.n	80077ca <SPI_WaitFlagStateUntilTimeout+0x30>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d13d      	bne.n	8007846 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e2:	d111      	bne.n	8007808 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ec:	d004      	beq.n	80077f8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f6:	d107      	bne.n	8007808 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	d10f      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e00f      	b.n	8007866 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4013      	ands	r3, r2
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	429a      	cmp	r2, r3
 8007862:	d1a3      	bne.n	80077ac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800787c:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <SPI_EndRxTxTransaction+0x7c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <SPI_EndRxTxTransaction+0x80>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	0d5b      	lsrs	r3, r3, #21
 8007888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800789a:	d112      	bne.n	80078c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff ff77 	bl	800779a <SPI_WaitFlagStateUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f043 0220 	orr.w	r2, r3, #32
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e00f      	b.n	80078e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d0f2      	beq.n	80078c2 <SPI_EndRxTxTransaction+0x52>
 80078dc:	e000      	b.n	80078e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80078de:	bf00      	nop
  }

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	2000000c 	.word	0x2000000c
 80078f0:	165e9f81 	.word	0x165e9f81

080078f4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80078fc:	4b35      	ldr	r3, [pc, #212]	; (80079d4 <SPI_CloseRxTx_ISR+0xe0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a35      	ldr	r2, [pc, #212]	; (80079d8 <SPI_CloseRxTx_ISR+0xe4>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0a5b      	lsrs	r3, r3, #9
 8007908:	2264      	movs	r2, #100	; 0x64
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007910:	f7fc fe5c 	bl	80045cc <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0220 	bic.w	r2, r2, #32
 8007924:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007930:	f043 0220 	orr.w	r2, r3, #32
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007938:	e009      	b.n	800794e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3b01      	subs	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0eb      	beq.n	8007926 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	2164      	movs	r1, #100	; 0x64
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff ff8c 	bl	8007870 <SPI_EndRxTxTransaction>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007962:	f043 0220 	orr.w	r2, r3, #32
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798c:	2b00      	cmp	r3, #0
 800798e:	d115      	bne.n	80079bc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b04      	cmp	r3, #4
 800799a:	d107      	bne.n	80079ac <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fe0f 	bl	80075c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80079aa:	e00e      	b.n	80079ca <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fb fb07 	bl	8002fc8 <HAL_SPI_TxRxCpltCallback>
}
 80079ba:	e006      	b.n	80079ca <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fe09 	bl	80075dc <HAL_SPI_ErrorCallback>
}
 80079ca:	bf00      	nop
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2000000c 	.word	0x2000000c
 80079d8:	057619f1 	.word	0x057619f1

080079dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e01d      	b.n	8007a2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f815 	bl	8007a32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f000 fa58 	bl	8007ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0201 	orr.w	r2, r2, #1
 8007a5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b06      	cmp	r3, #6
 8007a6e:	d007      	beq.n	8007a80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0201 	orr.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e01d      	b.n	8007adc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7fc fb11 	bl	80040dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 f9ff 	bl	8007ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d122      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d11b      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0202 	mvn.w	r2, #2
 8007b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9b4 	bl	8007e94 <HAL_TIM_IC_CaptureCallback>
 8007b2c:	e005      	b.n	8007b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9a6 	bl	8007e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9b7 	bl	8007ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d122      	bne.n	8007b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d11b      	bne.n	8007b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0204 	mvn.w	r2, #4
 8007b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f98a 	bl	8007e94 <HAL_TIM_IC_CaptureCallback>
 8007b80:	e005      	b.n	8007b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f97c 	bl	8007e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f98d 	bl	8007ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d122      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d11b      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0208 	mvn.w	r2, #8
 8007bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f960 	bl	8007e94 <HAL_TIM_IC_CaptureCallback>
 8007bd4:	e005      	b.n	8007be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f952 	bl	8007e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f963 	bl	8007ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	2b10      	cmp	r3, #16
 8007bf4:	d122      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d11b      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0210 	mvn.w	r2, #16
 8007c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2208      	movs	r2, #8
 8007c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f936 	bl	8007e94 <HAL_TIM_IC_CaptureCallback>
 8007c28:	e005      	b.n	8007c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f928 	bl	8007e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f939 	bl	8007ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0201 	mvn.w	r2, #1
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fb f9ce 	bl	8003004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fbf4 	bl	800847c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f8fe 	bl	8007ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0220 	mvn.w	r2, #32
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fbbe 	bl	8008468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e0b4      	b.n	8007e78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b0c      	cmp	r3, #12
 8007d22:	f200 809f 	bhi.w	8007e64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d61 	.word	0x08007d61
 8007d30:	08007e65 	.word	0x08007e65
 8007d34:	08007e65 	.word	0x08007e65
 8007d38:	08007e65 	.word	0x08007e65
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007e65 	.word	0x08007e65
 8007d44:	08007e65 	.word	0x08007e65
 8007d48:	08007e65 	.word	0x08007e65
 8007d4c:	08007de3 	.word	0x08007de3
 8007d50:	08007e65 	.word	0x08007e65
 8007d54:	08007e65 	.word	0x08007e65
 8007d58:	08007e65 	.word	0x08007e65
 8007d5c:	08007e23 	.word	0x08007e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f952 	bl	8008010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0208 	orr.w	r2, r2, #8
 8007d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0204 	bic.w	r2, r2, #4
 8007d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	619a      	str	r2, [r3, #24]
      break;
 8007d9e:	e062      	b.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f9a2 	bl	80080f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6999      	ldr	r1, [r3, #24]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	021a      	lsls	r2, r3, #8
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	619a      	str	r2, [r3, #24]
      break;
 8007de0:	e041      	b.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f9f7 	bl	80081dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f042 0208 	orr.w	r2, r2, #8
 8007dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0204 	bic.w	r2, r2, #4
 8007e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69d9      	ldr	r1, [r3, #28]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	61da      	str	r2, [r3, #28]
      break;
 8007e20:	e021      	b.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fa4b 	bl	80082c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69d9      	ldr	r1, [r3, #28]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	021a      	lsls	r2, r3, #8
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	61da      	str	r2, [r3, #28]
      break;
 8007e62:	e000      	b.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007e64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a40      	ldr	r2, [pc, #256]	; (8007fe4 <TIM_Base_SetConfig+0x114>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d013      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d00f      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a3d      	ldr	r2, [pc, #244]	; (8007fe8 <TIM_Base_SetConfig+0x118>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a3c      	ldr	r2, [pc, #240]	; (8007fec <TIM_Base_SetConfig+0x11c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a3b      	ldr	r2, [pc, #236]	; (8007ff0 <TIM_Base_SetConfig+0x120>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a3a      	ldr	r2, [pc, #232]	; (8007ff4 <TIM_Base_SetConfig+0x124>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d108      	bne.n	8007f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a2f      	ldr	r2, [pc, #188]	; (8007fe4 <TIM_Base_SetConfig+0x114>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d02b      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f30:	d027      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <TIM_Base_SetConfig+0x118>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d023      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2b      	ldr	r2, [pc, #172]	; (8007fec <TIM_Base_SetConfig+0x11c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01f      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2a      	ldr	r2, [pc, #168]	; (8007ff0 <TIM_Base_SetConfig+0x120>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d01b      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <TIM_Base_SetConfig+0x124>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d017      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a28      	ldr	r2, [pc, #160]	; (8007ff8 <TIM_Base_SetConfig+0x128>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a27      	ldr	r2, [pc, #156]	; (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00f      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a26      	ldr	r2, [pc, #152]	; (8008000 <TIM_Base_SetConfig+0x130>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00b      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a25      	ldr	r2, [pc, #148]	; (8008004 <TIM_Base_SetConfig+0x134>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d007      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a24      	ldr	r2, [pc, #144]	; (8008008 <TIM_Base_SetConfig+0x138>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d003      	beq.n	8007f82 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a23      	ldr	r2, [pc, #140]	; (800800c <TIM_Base_SetConfig+0x13c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d108      	bne.n	8007f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <TIM_Base_SetConfig+0x114>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_Base_SetConfig+0xf8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a0c      	ldr	r2, [pc, #48]	; (8007ff4 <TIM_Base_SetConfig+0x124>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d103      	bne.n	8007fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	615a      	str	r2, [r3, #20]
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40000c00 	.word	0x40000c00
 8007ff4:	40010400 	.word	0x40010400
 8007ff8:	40014000 	.word	0x40014000
 8007ffc:	40014400 	.word	0x40014400
 8008000:	40014800 	.word	0x40014800
 8008004:	40001800 	.word	0x40001800
 8008008:	40001c00 	.word	0x40001c00
 800800c:	40002000 	.word	0x40002000

08008010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 0302 	bic.w	r3, r3, #2
 8008058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a20      	ldr	r2, [pc, #128]	; (80080e8 <TIM_OC1_SetConfig+0xd8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC1_SetConfig+0x64>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1f      	ldr	r2, [pc, #124]	; (80080ec <TIM_OC1_SetConfig+0xdc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10c      	bne.n	800808e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0308 	bic.w	r3, r3, #8
 800807a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 0304 	bic.w	r3, r3, #4
 800808c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <TIM_OC1_SetConfig+0xd8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d003      	beq.n	800809e <TIM_OC1_SetConfig+0x8e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a14      	ldr	r2, [pc, #80]	; (80080ec <TIM_OC1_SetConfig+0xdc>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d111      	bne.n	80080c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	40010000 	.word	0x40010000
 80080ec:	40010400 	.word	0x40010400

080080f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	f023 0210 	bic.w	r2, r3, #16
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0320 	bic.w	r3, r3, #32
 800813a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a22      	ldr	r2, [pc, #136]	; (80081d4 <TIM_OC2_SetConfig+0xe4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_OC2_SetConfig+0x68>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <TIM_OC2_SetConfig+0xe8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d10d      	bne.n	8008174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800815e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <TIM_OC2_SetConfig+0xe4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_OC2_SetConfig+0x94>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a16      	ldr	r2, [pc, #88]	; (80081d8 <TIM_OC2_SetConfig+0xe8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d113      	bne.n	80081ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800818a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	621a      	str	r2, [r3, #32]
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40010400 	.word	0x40010400

080081dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a21      	ldr	r2, [pc, #132]	; (80082bc <TIM_OC3_SetConfig+0xe0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_OC3_SetConfig+0x66>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a20      	ldr	r2, [pc, #128]	; (80082c0 <TIM_OC3_SetConfig+0xe4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d10d      	bne.n	800825e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800825c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a16      	ldr	r2, [pc, #88]	; (80082bc <TIM_OC3_SetConfig+0xe0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d003      	beq.n	800826e <TIM_OC3_SetConfig+0x92>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <TIM_OC3_SetConfig+0xe4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d113      	bne.n	8008296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800827c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	621a      	str	r2, [r3, #32]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40010400 	.word	0x40010400

080082c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800830e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	031b      	lsls	r3, r3, #12
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a12      	ldr	r2, [pc, #72]	; (8008368 <TIM_OC4_SetConfig+0xa4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC4_SetConfig+0x68>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a11      	ldr	r2, [pc, #68]	; (800836c <TIM_OC4_SetConfig+0xa8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d109      	bne.n	8008340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	019b      	lsls	r3, r3, #6
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40010400 	.word	0x40010400

08008370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008384:	2302      	movs	r3, #2
 8008386:	e05a      	b.n	800843e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a21      	ldr	r2, [pc, #132]	; (800844c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d022      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d4:	d01d      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d018      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a1b      	ldr	r2, [pc, #108]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a1a      	ldr	r2, [pc, #104]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00e      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a18      	ldr	r2, [pc, #96]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d009      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a15      	ldr	r2, [pc, #84]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10c      	bne.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	4313      	orrs	r3, r2
 8008422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40010400 	.word	0x40010400
 8008460:	40014000 	.word	0x40014000
 8008464:	40001800 	.word	0x40001800

08008468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e03f      	b.n	8008522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fb feea 	bl	8004290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f829 	bl	800852c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	b0bd      	sub	sp, #244	; 0xf4
 8008532:	af00      	add	r7, sp, #0
 8008534:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008548:	68d9      	ldr	r1, [r3, #12]
 800854a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	ea40 0301 	orr.w	r3, r0, r1
 8008554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	431a      	orrs	r2, r3
 8008564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	431a      	orrs	r2, r3
 800856c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	4313      	orrs	r3, r2
 8008574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008584:	f021 010c 	bic.w	r1, r1, #12
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008592:	430b      	orrs	r3, r1
 8008594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a6:	6999      	ldr	r1, [r3, #24]
 80085a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	ea40 0301 	orr.w	r3, r0, r1
 80085b2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085be:	f040 81a5 	bne.w	800890c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4bcd      	ldr	r3, [pc, #820]	; (8008900 <UART_SetConfig+0x3d4>)
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d006      	beq.n	80085dc <UART_SetConfig+0xb0>
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4bcb      	ldr	r3, [pc, #812]	; (8008904 <UART_SetConfig+0x3d8>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	f040 80cb 	bne.w	8008772 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085dc:	f7fe fa6c 	bl	8006ab8 <HAL_RCC_GetPCLK2Freq>
 80085e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085e8:	461c      	mov	r4, r3
 80085ea:	f04f 0500 	mov.w	r5, #0
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	1891      	adds	r1, r2, r2
 80085f4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80085f8:	415b      	adcs	r3, r3
 80085fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008602:	1912      	adds	r2, r2, r4
 8008604:	eb45 0303 	adc.w	r3, r5, r3
 8008608:	f04f 0000 	mov.w	r0, #0
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	00d9      	lsls	r1, r3, #3
 8008612:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008616:	00d0      	lsls	r0, r2, #3
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	1911      	adds	r1, r2, r4
 800861e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008622:	416b      	adcs	r3, r5
 8008624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	461a      	mov	r2, r3
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	1891      	adds	r1, r2, r2
 8008636:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800863a:	415b      	adcs	r3, r3
 800863c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008640:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008644:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008648:	f7f8 fabe 	bl	8000bc8 <__aeabi_uldivmod>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4bad      	ldr	r3, [pc, #692]	; (8008908 <UART_SetConfig+0x3dc>)
 8008652:	fba3 2302 	umull	r2, r3, r3, r2
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	011e      	lsls	r6, r3, #4
 800865a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800865e:	461c      	mov	r4, r3
 8008660:	f04f 0500 	mov.w	r5, #0
 8008664:	4622      	mov	r2, r4
 8008666:	462b      	mov	r3, r5
 8008668:	1891      	adds	r1, r2, r2
 800866a:	67b9      	str	r1, [r7, #120]	; 0x78
 800866c:	415b      	adcs	r3, r3
 800866e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008670:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008674:	1912      	adds	r2, r2, r4
 8008676:	eb45 0303 	adc.w	r3, r5, r3
 800867a:	f04f 0000 	mov.w	r0, #0
 800867e:	f04f 0100 	mov.w	r1, #0
 8008682:	00d9      	lsls	r1, r3, #3
 8008684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008688:	00d0      	lsls	r0, r2, #3
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	1911      	adds	r1, r2, r4
 8008690:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008694:	416b      	adcs	r3, r5
 8008696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	461a      	mov	r2, r3
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	1891      	adds	r1, r2, r2
 80086a8:	6739      	str	r1, [r7, #112]	; 0x70
 80086aa:	415b      	adcs	r3, r3
 80086ac:	677b      	str	r3, [r7, #116]	; 0x74
 80086ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80086b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80086b6:	f7f8 fa87 	bl	8000bc8 <__aeabi_uldivmod>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4b92      	ldr	r3, [pc, #584]	; (8008908 <UART_SetConfig+0x3dc>)
 80086c0:	fba3 1302 	umull	r1, r3, r3, r2
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	2164      	movs	r1, #100	; 0x64
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	3332      	adds	r3, #50	; 0x32
 80086d2:	4a8d      	ldr	r2, [pc, #564]	; (8008908 <UART_SetConfig+0x3dc>)
 80086d4:	fba2 2303 	umull	r2, r3, r2, r3
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086e0:	441e      	add	r6, r3
 80086e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086e6:	4618      	mov	r0, r3
 80086e8:	f04f 0100 	mov.w	r1, #0
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	1894      	adds	r4, r2, r2
 80086f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80086f4:	415b      	adcs	r3, r3
 80086f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80086fc:	1812      	adds	r2, r2, r0
 80086fe:	eb41 0303 	adc.w	r3, r1, r3
 8008702:	f04f 0400 	mov.w	r4, #0
 8008706:	f04f 0500 	mov.w	r5, #0
 800870a:	00dd      	lsls	r5, r3, #3
 800870c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008710:	00d4      	lsls	r4, r2, #3
 8008712:	4622      	mov	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	1814      	adds	r4, r2, r0
 8008718:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800871c:	414b      	adcs	r3, r1
 800871e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	461a      	mov	r2, r3
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	1891      	adds	r1, r2, r2
 8008730:	6639      	str	r1, [r7, #96]	; 0x60
 8008732:	415b      	adcs	r3, r3
 8008734:	667b      	str	r3, [r7, #100]	; 0x64
 8008736:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800873a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800873e:	f7f8 fa43 	bl	8000bc8 <__aeabi_uldivmod>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4b70      	ldr	r3, [pc, #448]	; (8008908 <UART_SetConfig+0x3dc>)
 8008748:	fba3 1302 	umull	r1, r3, r3, r2
 800874c:	095b      	lsrs	r3, r3, #5
 800874e:	2164      	movs	r1, #100	; 0x64
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	3332      	adds	r3, #50	; 0x32
 800875a:	4a6b      	ldr	r2, [pc, #428]	; (8008908 <UART_SetConfig+0x3dc>)
 800875c:	fba2 2303 	umull	r2, r3, r2, r3
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	f003 0207 	and.w	r2, r3, #7
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4432      	add	r2, r6
 800876e:	609a      	str	r2, [r3, #8]
 8008770:	e26d      	b.n	8008c4e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008772:	f7fe f98d 	bl	8006a90 <HAL_RCC_GetPCLK1Freq>
 8008776:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800877a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800877e:	461c      	mov	r4, r3
 8008780:	f04f 0500 	mov.w	r5, #0
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	1891      	adds	r1, r2, r2
 800878a:	65b9      	str	r1, [r7, #88]	; 0x58
 800878c:	415b      	adcs	r3, r3
 800878e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008794:	1912      	adds	r2, r2, r4
 8008796:	eb45 0303 	adc.w	r3, r5, r3
 800879a:	f04f 0000 	mov.w	r0, #0
 800879e:	f04f 0100 	mov.w	r1, #0
 80087a2:	00d9      	lsls	r1, r3, #3
 80087a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087a8:	00d0      	lsls	r0, r2, #3
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	1911      	adds	r1, r2, r4
 80087b0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80087b4:	416b      	adcs	r3, r5
 80087b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	1891      	adds	r1, r2, r2
 80087c8:	6539      	str	r1, [r7, #80]	; 0x50
 80087ca:	415b      	adcs	r3, r3
 80087cc:	657b      	str	r3, [r7, #84]	; 0x54
 80087ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80087d6:	f7f8 f9f7 	bl	8000bc8 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4b4a      	ldr	r3, [pc, #296]	; (8008908 <UART_SetConfig+0x3dc>)
 80087e0:	fba3 2302 	umull	r2, r3, r3, r2
 80087e4:	095b      	lsrs	r3, r3, #5
 80087e6:	011e      	lsls	r6, r3, #4
 80087e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087ec:	461c      	mov	r4, r3
 80087ee:	f04f 0500 	mov.w	r5, #0
 80087f2:	4622      	mov	r2, r4
 80087f4:	462b      	mov	r3, r5
 80087f6:	1891      	adds	r1, r2, r2
 80087f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80087fa:	415b      	adcs	r3, r3
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008802:	1912      	adds	r2, r2, r4
 8008804:	eb45 0303 	adc.w	r3, r5, r3
 8008808:	f04f 0000 	mov.w	r0, #0
 800880c:	f04f 0100 	mov.w	r1, #0
 8008810:	00d9      	lsls	r1, r3, #3
 8008812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008816:	00d0      	lsls	r0, r2, #3
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	1911      	adds	r1, r2, r4
 800881e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008822:	416b      	adcs	r3, r5
 8008824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	461a      	mov	r2, r3
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	1891      	adds	r1, r2, r2
 8008836:	6439      	str	r1, [r7, #64]	; 0x40
 8008838:	415b      	adcs	r3, r3
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
 800883c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008840:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008844:	f7f8 f9c0 	bl	8000bc8 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4b2e      	ldr	r3, [pc, #184]	; (8008908 <UART_SetConfig+0x3dc>)
 800884e:	fba3 1302 	umull	r1, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	2164      	movs	r1, #100	; 0x64
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	3332      	adds	r3, #50	; 0x32
 8008860:	4a29      	ldr	r2, [pc, #164]	; (8008908 <UART_SetConfig+0x3dc>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800886e:	441e      	add	r6, r3
 8008870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008874:	4618      	mov	r0, r3
 8008876:	f04f 0100 	mov.w	r1, #0
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	1894      	adds	r4, r2, r2
 8008880:	63bc      	str	r4, [r7, #56]	; 0x38
 8008882:	415b      	adcs	r3, r3
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800888a:	1812      	adds	r2, r2, r0
 800888c:	eb41 0303 	adc.w	r3, r1, r3
 8008890:	f04f 0400 	mov.w	r4, #0
 8008894:	f04f 0500 	mov.w	r5, #0
 8008898:	00dd      	lsls	r5, r3, #3
 800889a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800889e:	00d4      	lsls	r4, r2, #3
 80088a0:	4622      	mov	r2, r4
 80088a2:	462b      	mov	r3, r5
 80088a4:	1814      	adds	r4, r2, r0
 80088a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80088aa:	414b      	adcs	r3, r1
 80088ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	1891      	adds	r1, r2, r2
 80088be:	6339      	str	r1, [r7, #48]	; 0x30
 80088c0:	415b      	adcs	r3, r3
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
 80088c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088cc:	f7f8 f97c 	bl	8000bc8 <__aeabi_uldivmod>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <UART_SetConfig+0x3dc>)
 80088d6:	fba3 1302 	umull	r1, r3, r3, r2
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2164      	movs	r1, #100	; 0x64
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	3332      	adds	r3, #50	; 0x32
 80088e8:	4a07      	ldr	r2, [pc, #28]	; (8008908 <UART_SetConfig+0x3dc>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f003 0207 	and.w	r2, r3, #7
 80088f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4432      	add	r2, r6
 80088fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80088fe:	e1a6      	b.n	8008c4e <UART_SetConfig+0x722>
 8008900:	40011000 	.word	0x40011000
 8008904:	40011400 	.word	0x40011400
 8008908:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4bd1      	ldr	r3, [pc, #836]	; (8008c58 <UART_SetConfig+0x72c>)
 8008914:	429a      	cmp	r2, r3
 8008916:	d006      	beq.n	8008926 <UART_SetConfig+0x3fa>
 8008918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4bcf      	ldr	r3, [pc, #828]	; (8008c5c <UART_SetConfig+0x730>)
 8008920:	429a      	cmp	r2, r3
 8008922:	f040 80ca 	bne.w	8008aba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008926:	f7fe f8c7 	bl	8006ab8 <HAL_RCC_GetPCLK2Freq>
 800892a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800892e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008932:	461c      	mov	r4, r3
 8008934:	f04f 0500 	mov.w	r5, #0
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	1891      	adds	r1, r2, r2
 800893e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008940:	415b      	adcs	r3, r3
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008948:	1912      	adds	r2, r2, r4
 800894a:	eb45 0303 	adc.w	r3, r5, r3
 800894e:	f04f 0000 	mov.w	r0, #0
 8008952:	f04f 0100 	mov.w	r1, #0
 8008956:	00d9      	lsls	r1, r3, #3
 8008958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800895c:	00d0      	lsls	r0, r2, #3
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	eb12 0a04 	adds.w	sl, r2, r4
 8008966:	eb43 0b05 	adc.w	fp, r3, r5
 800896a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	f04f 0100 	mov.w	r1, #0
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	008b      	lsls	r3, r1, #2
 8008980:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008984:	0082      	lsls	r2, r0, #2
 8008986:	4650      	mov	r0, sl
 8008988:	4659      	mov	r1, fp
 800898a:	f7f8 f91d 	bl	8000bc8 <__aeabi_uldivmod>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4bb3      	ldr	r3, [pc, #716]	; (8008c60 <UART_SetConfig+0x734>)
 8008994:	fba3 2302 	umull	r2, r3, r3, r2
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	011e      	lsls	r6, r3, #4
 800899c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089a0:	4618      	mov	r0, r3
 80089a2:	f04f 0100 	mov.w	r1, #0
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	1894      	adds	r4, r2, r2
 80089ac:	623c      	str	r4, [r7, #32]
 80089ae:	415b      	adcs	r3, r3
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
 80089b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089b6:	1812      	adds	r2, r2, r0
 80089b8:	eb41 0303 	adc.w	r3, r1, r3
 80089bc:	f04f 0400 	mov.w	r4, #0
 80089c0:	f04f 0500 	mov.w	r5, #0
 80089c4:	00dd      	lsls	r5, r3, #3
 80089c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ca:	00d4      	lsls	r4, r2, #3
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	1814      	adds	r4, r2, r0
 80089d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80089d6:	414b      	adcs	r3, r1
 80089d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f04f 0100 	mov.w	r1, #0
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	008b      	lsls	r3, r1, #2
 80089f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089f6:	0082      	lsls	r2, r0, #2
 80089f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80089fc:	f7f8 f8e4 	bl	8000bc8 <__aeabi_uldivmod>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4b96      	ldr	r3, [pc, #600]	; (8008c60 <UART_SetConfig+0x734>)
 8008a06:	fba3 1302 	umull	r1, r3, r3, r2
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	2164      	movs	r1, #100	; 0x64
 8008a0e:	fb01 f303 	mul.w	r3, r1, r3
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	3332      	adds	r3, #50	; 0x32
 8008a18:	4a91      	ldr	r2, [pc, #580]	; (8008c60 <UART_SetConfig+0x734>)
 8008a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a24:	441e      	add	r6, r3
 8008a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f04f 0100 	mov.w	r1, #0
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	1894      	adds	r4, r2, r2
 8008a36:	61bc      	str	r4, [r7, #24]
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a40:	1812      	adds	r2, r2, r0
 8008a42:	eb41 0303 	adc.w	r3, r1, r3
 8008a46:	f04f 0400 	mov.w	r4, #0
 8008a4a:	f04f 0500 	mov.w	r5, #0
 8008a4e:	00dd      	lsls	r5, r3, #3
 8008a50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a54:	00d4      	lsls	r4, r2, #3
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	1814      	adds	r4, r2, r0
 8008a5c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008a60:	414b      	adcs	r3, r1
 8008a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f04f 0100 	mov.w	r1, #0
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	008b      	lsls	r3, r1, #2
 8008a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a80:	0082      	lsls	r2, r0, #2
 8008a82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008a86:	f7f8 f89f 	bl	8000bc8 <__aeabi_uldivmod>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4b74      	ldr	r3, [pc, #464]	; (8008c60 <UART_SetConfig+0x734>)
 8008a90:	fba3 1302 	umull	r1, r3, r3, r2
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	2164      	movs	r1, #100	; 0x64
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	3332      	adds	r3, #50	; 0x32
 8008aa2:	4a6f      	ldr	r2, [pc, #444]	; (8008c60 <UART_SetConfig+0x734>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	f003 020f 	and.w	r2, r3, #15
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4432      	add	r2, r6
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	e0c9      	b.n	8008c4e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008aba:	f7fd ffe9 	bl	8006a90 <HAL_RCC_GetPCLK1Freq>
 8008abe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	f04f 0500 	mov.w	r5, #0
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	1891      	adds	r1, r2, r2
 8008ad2:	6139      	str	r1, [r7, #16]
 8008ad4:	415b      	adcs	r3, r3
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008adc:	1912      	adds	r2, r2, r4
 8008ade:	eb45 0303 	adc.w	r3, r5, r3
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f04f 0100 	mov.w	r1, #0
 8008aea:	00d9      	lsls	r1, r3, #3
 8008aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008af0:	00d0      	lsls	r0, r2, #3
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	eb12 0804 	adds.w	r8, r2, r4
 8008afa:	eb43 0905 	adc.w	r9, r3, r5
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f04f 0100 	mov.w	r1, #0
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	008b      	lsls	r3, r1, #2
 8008b14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b18:	0082      	lsls	r2, r0, #2
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f8 f853 	bl	8000bc8 <__aeabi_uldivmod>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4b4e      	ldr	r3, [pc, #312]	; (8008c60 <UART_SetConfig+0x734>)
 8008b28:	fba3 2302 	umull	r2, r3, r3, r2
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	011e      	lsls	r6, r3, #4
 8008b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b34:	4618      	mov	r0, r3
 8008b36:	f04f 0100 	mov.w	r1, #0
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	1894      	adds	r4, r2, r2
 8008b40:	60bc      	str	r4, [r7, #8]
 8008b42:	415b      	adcs	r3, r3
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b4a:	1812      	adds	r2, r2, r0
 8008b4c:	eb41 0303 	adc.w	r3, r1, r3
 8008b50:	f04f 0400 	mov.w	r4, #0
 8008b54:	f04f 0500 	mov.w	r5, #0
 8008b58:	00dd      	lsls	r5, r3, #3
 8008b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b5e:	00d4      	lsls	r4, r2, #3
 8008b60:	4622      	mov	r2, r4
 8008b62:	462b      	mov	r3, r5
 8008b64:	1814      	adds	r4, r2, r0
 8008b66:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008b6a:	414b      	adcs	r3, r1
 8008b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	008b      	lsls	r3, r1, #2
 8008b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b8a:	0082      	lsls	r2, r0, #2
 8008b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b90:	f7f8 f81a 	bl	8000bc8 <__aeabi_uldivmod>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <UART_SetConfig+0x734>)
 8008b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	2164      	movs	r1, #100	; 0x64
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	3332      	adds	r3, #50	; 0x32
 8008bac:	4a2c      	ldr	r2, [pc, #176]	; (8008c60 <UART_SetConfig+0x734>)
 8008bae:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bb8:	441e      	add	r6, r3
 8008bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	1894      	adds	r4, r2, r2
 8008bca:	603c      	str	r4, [r7, #0]
 8008bcc:	415b      	adcs	r3, r3
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd4:	1812      	adds	r2, r2, r0
 8008bd6:	eb41 0303 	adc.w	r3, r1, r3
 8008bda:	f04f 0400 	mov.w	r4, #0
 8008bde:	f04f 0500 	mov.w	r5, #0
 8008be2:	00dd      	lsls	r5, r3, #3
 8008be4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008be8:	00d4      	lsls	r4, r2, #3
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	1814      	adds	r4, r2, r0
 8008bf0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008bf4:	414b      	adcs	r3, r1
 8008bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f04f 0100 	mov.w	r1, #0
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	008b      	lsls	r3, r1, #2
 8008c10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c14:	0082      	lsls	r2, r0, #2
 8008c16:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c1a:	f7f7 ffd5 	bl	8000bc8 <__aeabi_uldivmod>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <UART_SetConfig+0x734>)
 8008c24:	fba3 1302 	umull	r1, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	2164      	movs	r1, #100	; 0x64
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	3332      	adds	r3, #50	; 0x32
 8008c36:	4a0a      	ldr	r2, [pc, #40]	; (8008c60 <UART_SetConfig+0x734>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	f003 020f 	and.w	r2, r3, #15
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4432      	add	r2, r6
 8008c4a:	609a      	str	r2, [r3, #8]
}
 8008c4c:	e7ff      	b.n	8008c4e <UART_SetConfig+0x722>
 8008c4e:	bf00      	nop
 8008c50:	37f4      	adds	r7, #244	; 0xf4
 8008c52:	46bd      	mov	sp, r7
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	40011000 	.word	0x40011000
 8008c5c:	40011400 	.word	0x40011400
 8008c60:	51eb851f 	.word	0x51eb851f

08008c64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008c6a:	f000 fb1f 	bl	80092ac <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008c6e:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <MX_LWIP_Init+0x70>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008c74:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <MX_LWIP_Init+0x74>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008c7a:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <MX_LWIP_Init+0x78>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008c80:	4b17      	ldr	r3, [pc, #92]	; (8008ce0 <MX_LWIP_Init+0x7c>)
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	4b17      	ldr	r3, [pc, #92]	; (8008ce4 <MX_LWIP_Init+0x80>)
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <MX_LWIP_Init+0x78>)
 8008c8e:	4a12      	ldr	r2, [pc, #72]	; (8008cd8 <MX_LWIP_Init+0x74>)
 8008c90:	4910      	ldr	r1, [pc, #64]	; (8008cd4 <MX_LWIP_Init+0x70>)
 8008c92:	4815      	ldr	r0, [pc, #84]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008c94:	f000 ffb0 	bl	8009bf8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008c98:	4813      	ldr	r0, [pc, #76]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008c9a:	f001 f967 	bl	8009f6c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008ca0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ca4:	089b      	lsrs	r3, r3, #2
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008cb0:	480d      	ldr	r0, [pc, #52]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008cb2:	f001 f96b 	bl	8009f8c <netif_set_up>
 8008cb6:	e002      	b.n	8008cbe <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008cb8:	480b      	ldr	r0, [pc, #44]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008cba:	f001 f9d3 	bl	800a064 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008cbe:	490b      	ldr	r1, [pc, #44]	; (8008cec <MX_LWIP_Init+0x88>)
 8008cc0:	4809      	ldr	r0, [pc, #36]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008cc2:	f001 fa01 	bl	800a0c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008cc6:	4808      	ldr	r0, [pc, #32]	; (8008ce8 <MX_LWIP_Init+0x84>)
 8008cc8:	f008 fa92 	bl	80111f0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008ccc:	bf00      	nop
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200008a8 	.word	0x200008a8
 8008cd8:	200008ac 	.word	0x200008ac
 8008cdc:	200008b0 	.word	0x200008b0
 8008ce0:	08014bbd 	.word	0x08014bbd
 8008ce4:	080090d9 	.word	0x080090d9
 8008ce8:	20000870 	.word	0x20000870
 8008cec:	08009145 	.word	0x08009145

08008cf0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	; 0x38
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	609a      	str	r2, [r3, #8]
 8008d04:	60da      	str	r2, [r3, #12]
 8008d06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a46      	ldr	r2, [pc, #280]	; (8008e28 <HAL_ETH_MspInit+0x138>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f040 8085 	bne.w	8008e1e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008d14:	2300      	movs	r3, #0
 8008d16:	623b      	str	r3, [r7, #32]
 8008d18:	4b44      	ldr	r3, [pc, #272]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1c:	4a43      	ldr	r2, [pc, #268]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d22:	6313      	str	r3, [r2, #48]	; 0x30
 8008d24:	4b41      	ldr	r3, [pc, #260]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2c:	623b      	str	r3, [r7, #32]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	4a3c      	ldr	r2, [pc, #240]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8008d40:	4b3a      	ldr	r3, [pc, #232]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	4b36      	ldr	r3, [pc, #216]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d54:	4a35      	ldr	r2, [pc, #212]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8008d5c:	4b33      	ldr	r3, [pc, #204]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	4a2e      	ldr	r2, [pc, #184]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d72:	f043 0304 	orr.w	r3, r3, #4
 8008d76:	6313      	str	r3, [r2, #48]	; 0x30
 8008d78:	4b2c      	ldr	r3, [pc, #176]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d84:	2300      	movs	r3, #0
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	4b28      	ldr	r3, [pc, #160]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	6313      	str	r3, [r2, #48]	; 0x30
 8008d94:	4b25      	ldr	r3, [pc, #148]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	4a20      	ldr	r2, [pc, #128]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008daa:	f043 0302 	orr.w	r3, r3, #2
 8008dae:	6313      	str	r3, [r2, #48]	; 0x30
 8008db0:	4b1e      	ldr	r3, [pc, #120]	; (8008e2c <HAL_ETH_MspInit+0x13c>)
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008dbc:	2332      	movs	r3, #50	; 0x32
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008dcc:	230b      	movs	r3, #11
 8008dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4816      	ldr	r0, [pc, #88]	; (8008e30 <HAL_ETH_MspInit+0x140>)
 8008dd8:	f7fd f830 	bl	8005e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008ddc:	2386      	movs	r3, #134	; 0x86
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de0:	2302      	movs	r3, #2
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008de8:	2303      	movs	r3, #3
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008dec:	230b      	movs	r3, #11
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df4:	4619      	mov	r1, r3
 8008df6:	480f      	ldr	r0, [pc, #60]	; (8008e34 <HAL_ETH_MspInit+0x144>)
 8008df8:	f7fd f820 	bl	8005e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008dfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e02:	2302      	movs	r3, #2
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008e0e:	230b      	movs	r3, #11
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e16:	4619      	mov	r1, r3
 8008e18:	4807      	ldr	r0, [pc, #28]	; (8008e38 <HAL_ETH_MspInit+0x148>)
 8008e1a:	f7fd f80f 	bl	8005e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008e1e:	bf00      	nop
 8008e20:	3738      	adds	r7, #56	; 0x38
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	40028000 	.word	0x40028000
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	40020800 	.word	0x40020800
 8008e34:	40020000 	.word	0x40020000
 8008e38:	40020400 	.word	0x40020400

08008e3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008e48:	4b4e      	ldr	r3, [pc, #312]	; (8008f84 <low_level_init+0x148>)
 8008e4a:	4a4f      	ldr	r2, [pc, #316]	; (8008f88 <low_level_init+0x14c>)
 8008e4c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008e4e:	4b4d      	ldr	r3, [pc, #308]	; (8008f84 <low_level_init+0x148>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8008e54:	4b4b      	ldr	r3, [pc, #300]	; (8008f84 <low_level_init+0x148>)
 8008e56:	2201      	movs	r2, #1
 8008e58:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 8008e62:	2300      	movs	r3, #0
 8008e64:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008e66:	2300      	movs	r3, #0
 8008e68:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008e72:	4a44      	ldr	r2, [pc, #272]	; (8008f84 <low_level_init+0x148>)
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008e7a:	4b42      	ldr	r3, [pc, #264]	; (8008f84 <low_level_init+0x148>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008e80:	4b40      	ldr	r3, [pc, #256]	; (8008f84 <low_level_init+0x148>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008e86:	4b3f      	ldr	r3, [pc, #252]	; (8008f84 <low_level_init+0x148>)
 8008e88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008e8c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008e8e:	483d      	ldr	r0, [pc, #244]	; (8008f84 <low_level_init+0x148>)
 8008e90:	f7fb ff32 	bl	8004cf8 <HAL_ETH_Init>
 8008e94:	4603      	mov	r3, r0
 8008e96:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ea4:	f043 0304 	orr.w	r3, r3, #4
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	4a36      	ldr	r2, [pc, #216]	; (8008f8c <low_level_init+0x150>)
 8008eb4:	4936      	ldr	r1, [pc, #216]	; (8008f90 <low_level_init+0x154>)
 8008eb6:	4833      	ldr	r0, [pc, #204]	; (8008f84 <low_level_init+0x148>)
 8008eb8:	f7fc f8ba 	bl	8005030 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	4a35      	ldr	r2, [pc, #212]	; (8008f94 <low_level_init+0x158>)
 8008ec0:	4935      	ldr	r1, [pc, #212]	; (8008f98 <low_level_init+0x15c>)
 8008ec2:	4830      	ldr	r0, [pc, #192]	; (8008f84 <low_level_init+0x148>)
 8008ec4:	f7fc f91d 	bl	8005102 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2206      	movs	r2, #6
 8008ecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008ed0:	4b2c      	ldr	r3, [pc, #176]	; (8008f84 <low_level_init+0x148>)
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008edc:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <low_level_init+0x148>)
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	785a      	ldrb	r2, [r3, #1]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008ee8:	4b26      	ldr	r3, [pc, #152]	; (8008f84 <low_level_init+0x148>)
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	789a      	ldrb	r2, [r3, #2]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008ef4:	4b23      	ldr	r3, [pc, #140]	; (8008f84 <low_level_init+0x148>)
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	78da      	ldrb	r2, [r3, #3]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008f00:	4b20      	ldr	r3, [pc, #128]	; (8008f84 <low_level_init+0x148>)
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	791a      	ldrb	r2, [r3, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008f0c:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <low_level_init+0x148>)
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	795a      	ldrb	r2, [r3, #5]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f1e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f26:	f043 030a 	orr.w	r3, r3, #10
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008f32:	4814      	ldr	r0, [pc, #80]	; (8008f84 <low_level_init+0x148>)
 8008f34:	f7fc fb0a 	bl	800554c <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8008f38:	f107 0310 	add.w	r3, r7, #16
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	2111      	movs	r1, #17
 8008f40:	4810      	ldr	r0, [pc, #64]	; (8008f84 <low_level_init+0x148>)
 8008f42:	f7fc fa35 	bl	80053b0 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f043 0303 	orr.w	r3, r3, #3
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	461a      	mov	r2, r3
 8008f52:	2111      	movs	r1, #17
 8008f54:	480b      	ldr	r0, [pc, #44]	; (8008f84 <low_level_init+0x148>)
 8008f56:	f7fc fa93 	bl	8005480 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8008f5a:	f107 0310 	add.w	r3, r7, #16
 8008f5e:	461a      	mov	r2, r3
 8008f60:	2112      	movs	r1, #18
 8008f62:	4808      	ldr	r0, [pc, #32]	; (8008f84 <low_level_init+0x148>)
 8008f64:	f7fc fa24 	bl	80053b0 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f043 0320 	orr.w	r3, r3, #32
 8008f6e:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	461a      	mov	r2, r3
 8008f74:	2112      	movs	r1, #18
 8008f76:	4803      	ldr	r0, [pc, #12]	; (8008f84 <low_level_init+0x148>)
 8008f78:	f7fc fa82 	bl	8005480 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008f7c:	bf00      	nop
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20002184 	.word	0x20002184
 8008f88:	40028000 	.word	0x40028000
 8008f8c:	200021cc 	.word	0x200021cc
 8008f90:	200008b4 	.word	0x200008b4
 8008f94:	20000934 	.word	0x20000934
 8008f98:	20002104 	.word	0x20002104

08008f9c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	; 0x28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008fa6:	4b4b      	ldr	r3, [pc, #300]	; (80090d4 <low_level_output+0x138>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008fbe:	4b45      	ldr	r3, [pc, #276]	; (80090d4 <low_level_output+0x138>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	e05a      	b.n	8009084 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	da03      	bge.n	8008fde <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008fd6:	23f8      	movs	r3, #248	; 0xf8
 8008fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008fdc:	e05c      	b.n	8009098 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	895b      	ldrh	r3, [r3, #10]
 8008fe2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008fe8:	e02f      	b.n	800904a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	18d0      	adds	r0, r2, r3
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	18d1      	adds	r1, r2, r3
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008ffe:	3304      	adds	r3, #4
 8009000:	461a      	mov	r2, r3
 8009002:	f00b fef7 	bl	8014df4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	da03      	bge.n	800901c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009014:	23f8      	movs	r3, #248	; 0xf8
 8009016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800901a:	e03d      	b.n	8009098 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800902c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009038:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009044:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	4413      	add	r3, r2
 8009050:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009054:	4293      	cmp	r3, r2
 8009056:	d8c8      	bhi.n	8008fea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	18d0      	adds	r0, r2, r3
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4413      	add	r3, r2
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4619      	mov	r1, r3
 800906a:	f00b fec3 	bl	8014df4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	623b      	str	r3, [r7, #32]
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1a1      	bne.n	8008fce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	4811      	ldr	r0, [pc, #68]	; (80090d4 <low_level_output+0x138>)
 800908e:	f7fc f8a5 	bl	80051dc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <low_level_output+0x138>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a0:	3314      	adds	r3, #20
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00d      	beq.n	80090c8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <low_level_output+0x138>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b4:	3314      	adds	r3, #20
 80090b6:	2220      	movs	r2, #32
 80090b8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <low_level_output+0x138>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	3304      	adds	r3, #4
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80090c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3728      	adds	r7, #40	; 0x28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20002184 	.word	0x20002184

080090d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <ethernetif_init+0x1c>
 80090e6:	4b0e      	ldr	r3, [pc, #56]	; (8009120 <ethernetif_init+0x48>)
 80090e8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80090ec:	490d      	ldr	r1, [pc, #52]	; (8009124 <ethernetif_init+0x4c>)
 80090ee:	480e      	ldr	r0, [pc, #56]	; (8009128 <ethernetif_init+0x50>)
 80090f0:	f00c fbc4 	bl	801587c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2273      	movs	r2, #115	; 0x73
 80090f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2274      	movs	r2, #116	; 0x74
 8009100:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a09      	ldr	r2, [pc, #36]	; (800912c <ethernetif_init+0x54>)
 8009108:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a08      	ldr	r2, [pc, #32]	; (8009130 <ethernetif_init+0x58>)
 800910e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff fe93 	bl	8008e3c <low_level_init>

  return ERR_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	08019238 	.word	0x08019238
 8009124:	08019254 	.word	0x08019254
 8009128:	08019264 	.word	0x08019264
 800912c:	08013045 	.word	0x08013045
 8009130:	08008f9d 	.word	0x08008f9d

08009134 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009138:	f7fb fa48 	bl	80045cc <HAL_GetTick>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d05d      	beq.n	8009222 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009166:	4b34      	ldr	r3, [pc, #208]	; (8009238 <ethernetif_update_config+0xf4>)
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d03f      	beq.n	80091ee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800916e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009172:	2100      	movs	r1, #0
 8009174:	4830      	ldr	r0, [pc, #192]	; (8009238 <ethernetif_update_config+0xf4>)
 8009176:	f7fc f983 	bl	8005480 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800917a:	f7fb fa27 	bl	80045cc <HAL_GetTick>
 800917e:	4603      	mov	r3, r0
 8009180:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	461a      	mov	r2, r3
 8009188:	2101      	movs	r1, #1
 800918a:	482b      	ldr	r0, [pc, #172]	; (8009238 <ethernetif_update_config+0xf4>)
 800918c:	f7fc f910 	bl	80053b0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009190:	f7fb fa1c 	bl	80045cc <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800919e:	d828      	bhi.n	80091f2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0eb      	beq.n	8009182 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80091aa:	f107 0308 	add.w	r3, r7, #8
 80091ae:	461a      	mov	r2, r3
 80091b0:	211f      	movs	r1, #31
 80091b2:	4821      	ldr	r0, [pc, #132]	; (8009238 <ethernetif_update_config+0xf4>)
 80091b4:	f7fc f8fc 	bl	80053b0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d004      	beq.n	80091cc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <ethernetif_update_config+0xf4>)
 80091c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091c8:	60da      	str	r2, [r3, #12]
 80091ca:	e002      	b.n	80091d2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80091cc:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <ethernetif_update_config+0xf4>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80091dc:	4b16      	ldr	r3, [pc, #88]	; (8009238 <ethernetif_update_config+0xf4>)
 80091de:	2200      	movs	r2, #0
 80091e0:	609a      	str	r2, [r3, #8]
 80091e2:	e016      	b.n	8009212 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80091e4:	4b14      	ldr	r3, [pc, #80]	; (8009238 <ethernetif_update_config+0xf4>)
 80091e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80091ea:	609a      	str	r2, [r3, #8]
 80091ec:	e011      	b.n	8009212 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80091ee:	bf00      	nop
 80091f0:	e000      	b.n	80091f4 <ethernetif_update_config+0xb0>
          goto error;
 80091f2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80091f4:	4b10      	ldr	r3, [pc, #64]	; (8009238 <ethernetif_update_config+0xf4>)
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	08db      	lsrs	r3, r3, #3
 80091fa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <ethernetif_update_config+0xf4>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	085b      	lsrs	r3, r3, #1
 8009202:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009204:	4313      	orrs	r3, r2
 8009206:	b29b      	uxth	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	2100      	movs	r1, #0
 800920c:	480a      	ldr	r0, [pc, #40]	; (8009238 <ethernetif_update_config+0xf4>)
 800920e:	f7fc f937 	bl	8005480 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009212:	2100      	movs	r1, #0
 8009214:	4808      	ldr	r0, [pc, #32]	; (8009238 <ethernetif_update_config+0xf4>)
 8009216:	f7fc f9f7 	bl	8005608 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800921a:	4807      	ldr	r0, [pc, #28]	; (8009238 <ethernetif_update_config+0xf4>)
 800921c:	f7fc f996 	bl	800554c <HAL_ETH_Start>
 8009220:	e002      	b.n	8009228 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009222:	4805      	ldr	r0, [pc, #20]	; (8009238 <ethernetif_update_config+0xf4>)
 8009224:	f7fc f9c1 	bl	80055aa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f807 	bl	800923c <ethernetif_notify_conn_changed>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20002184 	.word	0x20002184

0800923c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	b21a      	sxth	r2, r3
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b29b      	uxth	r3, r3
 8009266:	b21b      	sxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b21b      	sxth	r3, r3
 800926c:	b29b      	uxth	r3, r3
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	061a      	lsls	r2, r3, #24
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	0e1b      	lsrs	r3, r3, #24
 800929e:	4313      	orrs	r3, r2
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80092b6:	f000 f8d5 	bl	8009464 <mem_init>
  memp_init();
 80092ba:	f000 fbdb 	bl	8009a74 <memp_init>
  pbuf_init();
  netif_init();
 80092be:	f000 fc93 	bl	8009be8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80092c2:	f006 ff5d 	bl	8010180 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80092c6:	f001 fcfd 	bl	800acc4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80092ca:	f006 ff11 	bl	80100f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <ptr_to_mem+0x20>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	4413      	add	r3, r2
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	200003a8 	.word	0x200003a8

080092fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <mem_to_ptr+0x20>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	b29b      	uxth	r3, r3
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	200003a8 	.word	0x200003a8

08009320 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009328:	4b45      	ldr	r3, [pc, #276]	; (8009440 <plug_holes+0x120>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d206      	bcs.n	8009340 <plug_holes+0x20>
 8009332:	4b44      	ldr	r3, [pc, #272]	; (8009444 <plug_holes+0x124>)
 8009334:	f240 12df 	movw	r2, #479	; 0x1df
 8009338:	4943      	ldr	r1, [pc, #268]	; (8009448 <plug_holes+0x128>)
 800933a:	4844      	ldr	r0, [pc, #272]	; (800944c <plug_holes+0x12c>)
 800933c:	f00c fa9e 	bl	801587c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009340:	4b43      	ldr	r3, [pc, #268]	; (8009450 <plug_holes+0x130>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d306      	bcc.n	8009358 <plug_holes+0x38>
 800934a:	4b3e      	ldr	r3, [pc, #248]	; (8009444 <plug_holes+0x124>)
 800934c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009350:	4940      	ldr	r1, [pc, #256]	; (8009454 <plug_holes+0x134>)
 8009352:	483e      	ldr	r0, [pc, #248]	; (800944c <plug_holes+0x12c>)
 8009354:	f00c fa92 	bl	801587c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <plug_holes+0x4e>
 8009360:	4b38      	ldr	r3, [pc, #224]	; (8009444 <plug_holes+0x124>)
 8009362:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009366:	493c      	ldr	r1, [pc, #240]	; (8009458 <plug_holes+0x138>)
 8009368:	4838      	ldr	r0, [pc, #224]	; (800944c <plug_holes+0x12c>)
 800936a:	f00c fa87 	bl	801587c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009376:	d906      	bls.n	8009386 <plug_holes+0x66>
 8009378:	4b32      	ldr	r3, [pc, #200]	; (8009444 <plug_holes+0x124>)
 800937a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800937e:	4937      	ldr	r1, [pc, #220]	; (800945c <plug_holes+0x13c>)
 8009380:	4832      	ldr	r0, [pc, #200]	; (800944c <plug_holes+0x12c>)
 8009382:	f00c fa7b 	bl	801587c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff ffa4 	bl	80092d8 <ptr_to_mem>
 8009390:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	429a      	cmp	r2, r3
 8009398:	d024      	beq.n	80093e4 <plug_holes+0xc4>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	791b      	ldrb	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d120      	bne.n	80093e4 <plug_holes+0xc4>
 80093a2:	4b2b      	ldr	r3, [pc, #172]	; (8009450 <plug_holes+0x130>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d01b      	beq.n	80093e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80093ac:	4b2c      	ldr	r3, [pc, #176]	; (8009460 <plug_holes+0x140>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d102      	bne.n	80093bc <plug_holes+0x9c>
      lfree = mem;
 80093b6:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <plug_holes+0x140>)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093cc:	d00a      	beq.n	80093e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff ff80 	bl	80092d8 <ptr_to_mem>
 80093d8:	4604      	mov	r4, r0
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ff8e 	bl	80092fc <mem_to_ptr>
 80093e0:	4603      	mov	r3, r0
 80093e2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	885b      	ldrh	r3, [r3, #2]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff ff75 	bl	80092d8 <ptr_to_mem>
 80093ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d01f      	beq.n	8009438 <plug_holes+0x118>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	791b      	ldrb	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11b      	bne.n	8009438 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009400:	4b17      	ldr	r3, [pc, #92]	; (8009460 <plug_holes+0x140>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d102      	bne.n	8009410 <plug_holes+0xf0>
      lfree = pmem;
 800940a:	4a15      	ldr	r2, [pc, #84]	; (8009460 <plug_holes+0x140>)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009420:	d00a      	beq.n	8009438 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff ff56 	bl	80092d8 <ptr_to_mem>
 800942c:	4604      	mov	r4, r0
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f7ff ff64 	bl	80092fc <mem_to_ptr>
 8009434:	4603      	mov	r3, r0
 8009436:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	bd90      	pop	{r4, r7, pc}
 8009440:	200003a8 	.word	0x200003a8
 8009444:	0801928c 	.word	0x0801928c
 8009448:	080192bc 	.word	0x080192bc
 800944c:	080192d4 	.word	0x080192d4
 8009450:	200003ac 	.word	0x200003ac
 8009454:	080192fc 	.word	0x080192fc
 8009458:	08019318 	.word	0x08019318
 800945c:	08019334 	.word	0x08019334
 8009460:	200003b0 	.word	0x200003b0

08009464 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <mem_init+0x68>)
 800946c:	3303      	adds	r3, #3
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	461a      	mov	r2, r3
 8009474:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <mem_init+0x6c>)
 8009476:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009478:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <mem_init+0x6c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009484:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009492:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009496:	f7ff ff1f 	bl	80092d8 <ptr_to_mem>
 800949a:	4603      	mov	r3, r0
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <mem_init+0x70>)
 800949e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <mem_init+0x70>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80094a8:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <mem_init+0x70>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80094b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80094b2:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <mem_init+0x70>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80094ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <mem_init+0x6c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a05      	ldr	r2, [pc, #20]	; (80094d8 <mem_init+0x74>)
 80094c2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	200039b4 	.word	0x200039b4
 80094d0:	200003a8 	.word	0x200003a8
 80094d4:	200003ac 	.word	0x200003ac
 80094d8:	200003b0 	.word	0x200003b0

080094dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff09 	bl	80092fc <mem_to_ptr>
 80094ea:	4603      	mov	r3, r0
 80094ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fef0 	bl	80092d8 <ptr_to_mem>
 80094f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	885b      	ldrh	r3, [r3, #2]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff feea 	bl	80092d8 <ptr_to_mem>
 8009504:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800950e:	d818      	bhi.n	8009542 <mem_link_valid+0x66>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	885b      	ldrh	r3, [r3, #2]
 8009514:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009518:	d813      	bhi.n	8009542 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800951e:	8afa      	ldrh	r2, [r7, #22]
 8009520:	429a      	cmp	r2, r3
 8009522:	d004      	beq.n	800952e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	8afa      	ldrh	r2, [r7, #22]
 800952a:	429a      	cmp	r2, r3
 800952c:	d109      	bne.n	8009542 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800952e:	4b08      	ldr	r3, [pc, #32]	; (8009550 <mem_link_valid+0x74>)
 8009530:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	429a      	cmp	r2, r3
 8009536:	d006      	beq.n	8009546 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	885b      	ldrh	r3, [r3, #2]
 800953c:	8afa      	ldrh	r2, [r7, #22]
 800953e:	429a      	cmp	r2, r3
 8009540:	d001      	beq.n	8009546 <mem_link_valid+0x6a>
    return 0;
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <mem_link_valid+0x6c>
  }
  return 1;
 8009546:	2301      	movs	r3, #1
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	200003ac 	.word	0x200003ac

08009554 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d04c      	beq.n	80095fc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800956c:	4b25      	ldr	r3, [pc, #148]	; (8009604 <mem_free+0xb0>)
 800956e:	f240 2273 	movw	r2, #627	; 0x273
 8009572:	4925      	ldr	r1, [pc, #148]	; (8009608 <mem_free+0xb4>)
 8009574:	4825      	ldr	r0, [pc, #148]	; (800960c <mem_free+0xb8>)
 8009576:	f00c f981 	bl	801587c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800957a:	e040      	b.n	80095fe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3b08      	subs	r3, #8
 8009580:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <mem_free+0xbc>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	429a      	cmp	r2, r3
 800958a:	d306      	bcc.n	800959a <mem_free+0x46>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f103 020c 	add.w	r2, r3, #12
 8009592:	4b20      	ldr	r3, [pc, #128]	; (8009614 <mem_free+0xc0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d907      	bls.n	80095aa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800959a:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <mem_free+0xb0>)
 800959c:	f240 227f 	movw	r2, #639	; 0x27f
 80095a0:	491d      	ldr	r1, [pc, #116]	; (8009618 <mem_free+0xc4>)
 80095a2:	481a      	ldr	r0, [pc, #104]	; (800960c <mem_free+0xb8>)
 80095a4:	f00c f96a 	bl	801587c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80095a8:	e029      	b.n	80095fe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d107      	bne.n	80095c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80095b2:	4b14      	ldr	r3, [pc, #80]	; (8009604 <mem_free+0xb0>)
 80095b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80095b8:	4918      	ldr	r1, [pc, #96]	; (800961c <mem_free+0xc8>)
 80095ba:	4814      	ldr	r0, [pc, #80]	; (800960c <mem_free+0xb8>)
 80095bc:	f00c f95e 	bl	801587c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80095c0:	e01d      	b.n	80095fe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff ff8a 	bl	80094dc <mem_link_valid>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d107      	bne.n	80095de <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <mem_free+0xb0>)
 80095d0:	f240 2295 	movw	r2, #661	; 0x295
 80095d4:	4912      	ldr	r1, [pc, #72]	; (8009620 <mem_free+0xcc>)
 80095d6:	480d      	ldr	r0, [pc, #52]	; (800960c <mem_free+0xb8>)
 80095d8:	f00c f950 	bl	801587c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80095dc:	e00f      	b.n	80095fe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <mem_free+0xd0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d202      	bcs.n	80095f4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80095ee:	4a0d      	ldr	r2, [pc, #52]	; (8009624 <mem_free+0xd0>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7ff fe93 	bl	8009320 <plug_holes>
 80095fa:	e000      	b.n	80095fe <mem_free+0xaa>
    return;
 80095fc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	0801928c 	.word	0x0801928c
 8009608:	08019360 	.word	0x08019360
 800960c:	080192d4 	.word	0x080192d4
 8009610:	200003a8 	.word	0x200003a8
 8009614:	200003ac 	.word	0x200003ac
 8009618:	08019384 	.word	0x08019384
 800961c:	080193a0 	.word	0x080193a0
 8009620:	080193c8 	.word	0x080193c8
 8009624:	200003b0 	.word	0x200003b0

08009628 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009634:	887b      	ldrh	r3, [r7, #2]
 8009636:	3303      	adds	r3, #3
 8009638:	b29b      	uxth	r3, r3
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009640:	8bfb      	ldrh	r3, [r7, #30]
 8009642:	2b0b      	cmp	r3, #11
 8009644:	d801      	bhi.n	800964a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009646:	230c      	movs	r3, #12
 8009648:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800964a:	8bfb      	ldrh	r3, [r7, #30]
 800964c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009650:	d803      	bhi.n	800965a <mem_trim+0x32>
 8009652:	8bfa      	ldrh	r2, [r7, #30]
 8009654:	887b      	ldrh	r3, [r7, #2]
 8009656:	429a      	cmp	r2, r3
 8009658:	d201      	bcs.n	800965e <mem_trim+0x36>
    return NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	e0cc      	b.n	80097f8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800965e:	4b68      	ldr	r3, [pc, #416]	; (8009800 <mem_trim+0x1d8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	429a      	cmp	r2, r3
 8009666:	d304      	bcc.n	8009672 <mem_trim+0x4a>
 8009668:	4b66      	ldr	r3, [pc, #408]	; (8009804 <mem_trim+0x1dc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d306      	bcc.n	8009680 <mem_trim+0x58>
 8009672:	4b65      	ldr	r3, [pc, #404]	; (8009808 <mem_trim+0x1e0>)
 8009674:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009678:	4964      	ldr	r1, [pc, #400]	; (800980c <mem_trim+0x1e4>)
 800967a:	4865      	ldr	r0, [pc, #404]	; (8009810 <mem_trim+0x1e8>)
 800967c:	f00c f8fe 	bl	801587c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009680:	4b5f      	ldr	r3, [pc, #380]	; (8009800 <mem_trim+0x1d8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d304      	bcc.n	8009694 <mem_trim+0x6c>
 800968a:	4b5e      	ldr	r3, [pc, #376]	; (8009804 <mem_trim+0x1dc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d301      	bcc.n	8009698 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	e0af      	b.n	80097f8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3b08      	subs	r3, #8
 800969c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800969e:	69b8      	ldr	r0, [r7, #24]
 80096a0:	f7ff fe2c 	bl	80092fc <mem_to_ptr>
 80096a4:	4603      	mov	r3, r0
 80096a6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	881a      	ldrh	r2, [r3, #0]
 80096ac:	8afb      	ldrh	r3, [r7, #22]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b08      	subs	r3, #8
 80096b4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80096b6:	8bfa      	ldrh	r2, [r7, #30]
 80096b8:	8abb      	ldrh	r3, [r7, #20]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d906      	bls.n	80096cc <mem_trim+0xa4>
 80096be:	4b52      	ldr	r3, [pc, #328]	; (8009808 <mem_trim+0x1e0>)
 80096c0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80096c4:	4953      	ldr	r1, [pc, #332]	; (8009814 <mem_trim+0x1ec>)
 80096c6:	4852      	ldr	r0, [pc, #328]	; (8009810 <mem_trim+0x1e8>)
 80096c8:	f00c f8d8 	bl	801587c <iprintf>
  if (newsize > size) {
 80096cc:	8bfa      	ldrh	r2, [r7, #30]
 80096ce:	8abb      	ldrh	r3, [r7, #20]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d901      	bls.n	80096d8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e08f      	b.n	80097f8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80096d8:	8bfa      	ldrh	r2, [r7, #30]
 80096da:	8abb      	ldrh	r3, [r7, #20]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d101      	bne.n	80096e4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	e089      	b.n	80097f8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fdf5 	bl	80092d8 <ptr_to_mem>
 80096ee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	791b      	ldrb	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d13f      	bne.n	8009778 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009700:	d106      	bne.n	8009710 <mem_trim+0xe8>
 8009702:	4b41      	ldr	r3, [pc, #260]	; (8009808 <mem_trim+0x1e0>)
 8009704:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009708:	4943      	ldr	r1, [pc, #268]	; (8009818 <mem_trim+0x1f0>)
 800970a:	4841      	ldr	r0, [pc, #260]	; (8009810 <mem_trim+0x1e8>)
 800970c:	f00c f8b6 	bl	801587c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009716:	8afa      	ldrh	r2, [r7, #22]
 8009718:	8bfb      	ldrh	r3, [r7, #30]
 800971a:	4413      	add	r3, r2
 800971c:	b29b      	uxth	r3, r3
 800971e:	3308      	adds	r3, #8
 8009720:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009722:	4b3e      	ldr	r3, [pc, #248]	; (800981c <mem_trim+0x1f4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d106      	bne.n	800973a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800972c:	89fb      	ldrh	r3, [r7, #14]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fdd2 	bl	80092d8 <ptr_to_mem>
 8009734:	4603      	mov	r3, r0
 8009736:	4a39      	ldr	r2, [pc, #228]	; (800981c <mem_trim+0x1f4>)
 8009738:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800973a:	89fb      	ldrh	r3, [r7, #14]
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff fdcb 	bl	80092d8 <ptr_to_mem>
 8009742:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	2200      	movs	r2, #0
 8009748:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	89ba      	ldrh	r2, [r7, #12]
 800974e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	8afa      	ldrh	r2, [r7, #22]
 8009754:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	89fa      	ldrh	r2, [r7, #14]
 800975a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009764:	d047      	beq.n	80097f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fdb4 	bl	80092d8 <ptr_to_mem>
 8009770:	4602      	mov	r2, r0
 8009772:	89fb      	ldrh	r3, [r7, #14]
 8009774:	8053      	strh	r3, [r2, #2]
 8009776:	e03e      	b.n	80097f6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009778:	8bfb      	ldrh	r3, [r7, #30]
 800977a:	f103 0214 	add.w	r2, r3, #20
 800977e:	8abb      	ldrh	r3, [r7, #20]
 8009780:	429a      	cmp	r2, r3
 8009782:	d838      	bhi.n	80097f6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009784:	8afa      	ldrh	r2, [r7, #22]
 8009786:	8bfb      	ldrh	r3, [r7, #30]
 8009788:	4413      	add	r3, r2
 800978a:	b29b      	uxth	r3, r3
 800978c:	3308      	adds	r3, #8
 800978e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009798:	d106      	bne.n	80097a8 <mem_trim+0x180>
 800979a:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <mem_trim+0x1e0>)
 800979c:	f240 3216 	movw	r2, #790	; 0x316
 80097a0:	491d      	ldr	r1, [pc, #116]	; (8009818 <mem_trim+0x1f0>)
 80097a2:	481b      	ldr	r0, [pc, #108]	; (8009810 <mem_trim+0x1e8>)
 80097a4:	f00c f86a 	bl	801587c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80097a8:	89fb      	ldrh	r3, [r7, #14]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fd94 	bl	80092d8 <ptr_to_mem>
 80097b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80097b2:	4b1a      	ldr	r3, [pc, #104]	; (800981c <mem_trim+0x1f4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d202      	bcs.n	80097c2 <mem_trim+0x19a>
      lfree = mem2;
 80097bc:	4a17      	ldr	r2, [pc, #92]	; (800981c <mem_trim+0x1f4>)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2200      	movs	r2, #0
 80097c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	881a      	ldrh	r2, [r3, #0]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	8afa      	ldrh	r2, [r7, #22]
 80097d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	89fa      	ldrh	r2, [r7, #14]
 80097da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097e4:	d007      	beq.n	80097f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fd74 	bl	80092d8 <ptr_to_mem>
 80097f0:	4602      	mov	r2, r0
 80097f2:	89fb      	ldrh	r3, [r7, #14]
 80097f4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80097f6:	687b      	ldr	r3, [r7, #4]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	200003a8 	.word	0x200003a8
 8009804:	200003ac 	.word	0x200003ac
 8009808:	0801928c 	.word	0x0801928c
 800980c:	080193fc 	.word	0x080193fc
 8009810:	080192d4 	.word	0x080192d4
 8009814:	08019414 	.word	0x08019414
 8009818:	08019434 	.word	0x08019434
 800981c:	200003b0 	.word	0x200003b0

08009820 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <mem_malloc+0x14>
    return NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	e0d9      	b.n	80099e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009834:	88fb      	ldrh	r3, [r7, #6]
 8009836:	3303      	adds	r3, #3
 8009838:	b29b      	uxth	r3, r3
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009840:	8bbb      	ldrh	r3, [r7, #28]
 8009842:	2b0b      	cmp	r3, #11
 8009844:	d801      	bhi.n	800984a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009846:	230c      	movs	r3, #12
 8009848:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800984a:	8bbb      	ldrh	r3, [r7, #28]
 800984c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009850:	d803      	bhi.n	800985a <mem_malloc+0x3a>
 8009852:	8bba      	ldrh	r2, [r7, #28]
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	429a      	cmp	r2, r3
 8009858:	d201      	bcs.n	800985e <mem_malloc+0x3e>
    return NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	e0c4      	b.n	80099e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800985e:	4b64      	ldr	r3, [pc, #400]	; (80099f0 <mem_malloc+0x1d0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fd4a 	bl	80092fc <mem_to_ptr>
 8009868:	4603      	mov	r3, r0
 800986a:	83fb      	strh	r3, [r7, #30]
 800986c:	e0b4      	b.n	80099d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800986e:	8bfb      	ldrh	r3, [r7, #30]
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fd31 	bl	80092d8 <ptr_to_mem>
 8009876:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	791b      	ldrb	r3, [r3, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 80a4 	bne.w	80099ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	8bfb      	ldrh	r3, [r7, #30]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	f1a3 0208 	sub.w	r2, r3, #8
 8009890:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009892:	429a      	cmp	r2, r3
 8009894:	f0c0 8099 	bcc.w	80099ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	8bfb      	ldrh	r3, [r7, #30]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	f1a3 0208 	sub.w	r2, r3, #8
 80098a6:	8bbb      	ldrh	r3, [r7, #28]
 80098a8:	3314      	adds	r3, #20
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d333      	bcc.n	8009916 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80098ae:	8bfa      	ldrh	r2, [r7, #30]
 80098b0:	8bbb      	ldrh	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3308      	adds	r3, #8
 80098b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80098ba:	8a7b      	ldrh	r3, [r7, #18]
 80098bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098c0:	d106      	bne.n	80098d0 <mem_malloc+0xb0>
 80098c2:	4b4c      	ldr	r3, [pc, #304]	; (80099f4 <mem_malloc+0x1d4>)
 80098c4:	f240 3287 	movw	r2, #903	; 0x387
 80098c8:	494b      	ldr	r1, [pc, #300]	; (80099f8 <mem_malloc+0x1d8>)
 80098ca:	484c      	ldr	r0, [pc, #304]	; (80099fc <mem_malloc+0x1dc>)
 80098cc:	f00b ffd6 	bl	801587c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80098d0:	8a7b      	ldrh	r3, [r7, #18]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fd00 	bl	80092d8 <ptr_to_mem>
 80098d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	881a      	ldrh	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8bfa      	ldrh	r2, [r7, #30]
 80098ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	8a7a      	ldrh	r2, [r7, #18]
 80098f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2201      	movs	r2, #1
 80098f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009902:	d00b      	beq.n	800991c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fce5 	bl	80092d8 <ptr_to_mem>
 800990e:	4602      	mov	r2, r0
 8009910:	8a7b      	ldrh	r3, [r7, #18]
 8009912:	8053      	strh	r3, [r2, #2]
 8009914:	e002      	b.n	800991c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2201      	movs	r2, #1
 800991a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800991c:	4b34      	ldr	r3, [pc, #208]	; (80099f0 <mem_malloc+0x1d0>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	429a      	cmp	r2, r3
 8009924:	d127      	bne.n	8009976 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009926:	4b32      	ldr	r3, [pc, #200]	; (80099f0 <mem_malloc+0x1d0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800992c:	e005      	b.n	800993a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fcd0 	bl	80092d8 <ptr_to_mem>
 8009938:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	791b      	ldrb	r3, [r3, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d004      	beq.n	800994c <mem_malloc+0x12c>
 8009942:	4b2f      	ldr	r3, [pc, #188]	; (8009a00 <mem_malloc+0x1e0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	429a      	cmp	r2, r3
 800994a:	d1f0      	bne.n	800992e <mem_malloc+0x10e>
          }
          lfree = cur;
 800994c:	4a28      	ldr	r2, [pc, #160]	; (80099f0 <mem_malloc+0x1d0>)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009952:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <mem_malloc+0x1d0>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <mem_malloc+0x1e0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d00b      	beq.n	8009976 <mem_malloc+0x156>
 800995e:	4b24      	ldr	r3, [pc, #144]	; (80099f0 <mem_malloc+0x1d0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	791b      	ldrb	r3, [r3, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <mem_malloc+0x156>
 8009968:	4b22      	ldr	r3, [pc, #136]	; (80099f4 <mem_malloc+0x1d4>)
 800996a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800996e:	4925      	ldr	r1, [pc, #148]	; (8009a04 <mem_malloc+0x1e4>)
 8009970:	4822      	ldr	r0, [pc, #136]	; (80099fc <mem_malloc+0x1dc>)
 8009972:	f00b ff83 	bl	801587c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009976:	8bba      	ldrh	r2, [r7, #28]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	4413      	add	r3, r2
 800997c:	3308      	adds	r3, #8
 800997e:	4a20      	ldr	r2, [pc, #128]	; (8009a00 <mem_malloc+0x1e0>)
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	4293      	cmp	r3, r2
 8009984:	d906      	bls.n	8009994 <mem_malloc+0x174>
 8009986:	4b1b      	ldr	r3, [pc, #108]	; (80099f4 <mem_malloc+0x1d4>)
 8009988:	f240 32b9 	movw	r2, #953	; 0x3b9
 800998c:	491e      	ldr	r1, [pc, #120]	; (8009a08 <mem_malloc+0x1e8>)
 800998e:	481b      	ldr	r0, [pc, #108]	; (80099fc <mem_malloc+0x1dc>)
 8009990:	f00b ff74 	bl	801587c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d006      	beq.n	80099ac <mem_malloc+0x18c>
 800999e:	4b15      	ldr	r3, [pc, #84]	; (80099f4 <mem_malloc+0x1d4>)
 80099a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80099a4:	4919      	ldr	r1, [pc, #100]	; (8009a0c <mem_malloc+0x1ec>)
 80099a6:	4815      	ldr	r0, [pc, #84]	; (80099fc <mem_malloc+0x1dc>)
 80099a8:	f00b ff68 	bl	801587c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d006      	beq.n	80099c4 <mem_malloc+0x1a4>
 80099b6:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <mem_malloc+0x1d4>)
 80099b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80099bc:	4914      	ldr	r1, [pc, #80]	; (8009a10 <mem_malloc+0x1f0>)
 80099be:	480f      	ldr	r0, [pc, #60]	; (80099fc <mem_malloc+0x1dc>)
 80099c0:	f00b ff5c 	bl	801587c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3308      	adds	r3, #8
 80099c8:	e00e      	b.n	80099e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fc83 	bl	80092d8 <ptr_to_mem>
 80099d2:	4603      	mov	r3, r0
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80099d8:	8bfa      	ldrh	r2, [r7, #30]
 80099da:	8bbb      	ldrh	r3, [r7, #28]
 80099dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80099e0:	429a      	cmp	r2, r3
 80099e2:	f4ff af44 	bcc.w	800986e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	200003b0 	.word	0x200003b0
 80099f4:	0801928c 	.word	0x0801928c
 80099f8:	08019434 	.word	0x08019434
 80099fc:	080192d4 	.word	0x080192d4
 8009a00:	200003ac 	.word	0x200003ac
 8009a04:	08019448 	.word	0x08019448
 8009a08:	08019464 	.word	0x08019464
 8009a0c:	08019494 	.word	0x08019494
 8009a10:	080194c4 	.word	0x080194c4

08009a14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	3303      	adds	r3, #3
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e011      	b.n	8009a5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	885b      	ldrh	r3, [r3, #2]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	dbe7      	blt.n	8009a36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	80fb      	strh	r3, [r7, #6]
 8009a7e:	e009      	b.n	8009a94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	4a08      	ldr	r2, [pc, #32]	; (8009aa4 <memp_init+0x30>)
 8009a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7ff ffc3 	bl	8009a14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	3301      	adds	r3, #1
 8009a92:	80fb      	strh	r3, [r7, #6]
 8009a94:	88fb      	ldrh	r3, [r7, #6]
 8009a96:	2b08      	cmp	r3, #8
 8009a98:	d9f2      	bls.n	8009a80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	0801c044 	.word	0x0801c044

08009aa8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d012      	beq.n	8009ae4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d006      	beq.n	8009ae0 <do_memp_malloc_pool+0x38>
 8009ad2:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <do_memp_malloc_pool+0x48>)
 8009ad4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009ad8:	4906      	ldr	r1, [pc, #24]	; (8009af4 <do_memp_malloc_pool+0x4c>)
 8009ada:	4807      	ldr	r0, [pc, #28]	; (8009af8 <do_memp_malloc_pool+0x50>)
 8009adc:	f00b fece 	bl	801587c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	e000      	b.n	8009ae6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	080194e8 	.word	0x080194e8
 8009af4:	08019518 	.word	0x08019518
 8009af8:	0801953c 	.word	0x0801953c

08009afc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d908      	bls.n	8009b1e <memp_malloc+0x22>
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <memp_malloc+0x3c>)
 8009b0e:	f240 1257 	movw	r2, #343	; 0x157
 8009b12:	490a      	ldr	r1, [pc, #40]	; (8009b3c <memp_malloc+0x40>)
 8009b14:	480a      	ldr	r0, [pc, #40]	; (8009b40 <memp_malloc+0x44>)
 8009b16:	f00b feb1 	bl	801587c <iprintf>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e008      	b.n	8009b30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <memp_malloc+0x48>)
 8009b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff ffbe 	bl	8009aa8 <do_memp_malloc_pool>
 8009b2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	080194e8 	.word	0x080194e8
 8009b3c:	08019578 	.word	0x08019578
 8009b40:	0801953c 	.word	0x0801953c
 8009b44:	0801c044 	.word	0x0801c044

08009b48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <do_memp_free_pool+0x22>
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <do_memp_free_pool+0x40>)
 8009b5e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009b62:	490a      	ldr	r1, [pc, #40]	; (8009b8c <do_memp_free_pool+0x44>)
 8009b64:	480a      	ldr	r0, [pc, #40]	; (8009b90 <do_memp_free_pool+0x48>)
 8009b66:	f00b fe89 	bl	801587c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	080194e8 	.word	0x080194e8
 8009b8c:	08019598 	.word	0x08019598
 8009b90:	0801953c 	.word	0x0801953c

08009b94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	d907      	bls.n	8009bb6 <memp_free+0x22>
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <memp_free+0x44>)
 8009ba8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009bac:	490b      	ldr	r1, [pc, #44]	; (8009bdc <memp_free+0x48>)
 8009bae:	480c      	ldr	r0, [pc, #48]	; (8009be0 <memp_free+0x4c>)
 8009bb0:	f00b fe64 	bl	801587c <iprintf>
 8009bb4:	e00c      	b.n	8009bd0 <memp_free+0x3c>

  if (mem == NULL) {
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <memp_free+0x50>)
 8009bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff ffbe 	bl	8009b48 <do_memp_free_pool>
 8009bcc:	e000      	b.n	8009bd0 <memp_free+0x3c>
    return;
 8009bce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	080194e8 	.word	0x080194e8
 8009bdc:	080195b8 	.word	0x080195b8
 8009be0:	0801953c 	.word	0x0801953c
 8009be4:	0801c044 	.word	0x0801c044

08009be8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009bec:	bf00      	nop
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d108      	bne.n	8009c1e <netif_add+0x26>
 8009c0c:	4b5b      	ldr	r3, [pc, #364]	; (8009d7c <netif_add+0x184>)
 8009c0e:	f240 1227 	movw	r2, #295	; 0x127
 8009c12:	495b      	ldr	r1, [pc, #364]	; (8009d80 <netif_add+0x188>)
 8009c14:	485b      	ldr	r0, [pc, #364]	; (8009d84 <netif_add+0x18c>)
 8009c16:	f00b fe31 	bl	801587c <iprintf>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e0a9      	b.n	8009d72 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d108      	bne.n	8009c36 <netif_add+0x3e>
 8009c24:	4b55      	ldr	r3, [pc, #340]	; (8009d7c <netif_add+0x184>)
 8009c26:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009c2a:	4957      	ldr	r1, [pc, #348]	; (8009d88 <netif_add+0x190>)
 8009c2c:	4855      	ldr	r0, [pc, #340]	; (8009d84 <netif_add+0x18c>)
 8009c2e:	f00b fe25 	bl	801587c <iprintf>
 8009c32:	2300      	movs	r3, #0
 8009c34:	e09d      	b.n	8009d72 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009c3c:	4b53      	ldr	r3, [pc, #332]	; (8009d8c <netif_add+0x194>)
 8009c3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009c46:	4b51      	ldr	r3, [pc, #324]	; (8009d8c <netif_add+0x194>)
 8009c48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009c50:	4b4e      	ldr	r3, [pc, #312]	; (8009d8c <netif_add+0x194>)
 8009c52:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4a49      	ldr	r2, [pc, #292]	; (8009d90 <netif_add+0x198>)
 8009c6a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3324      	adds	r3, #36	; 0x24
 8009c7e:	2204      	movs	r2, #4
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f00b f8de 	bl	8014e44 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a3a      	ldr	r2, [r7, #32]
 8009c92:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009c94:	4b3f      	ldr	r3, [pc, #252]	; (8009d94 <netif_add+0x19c>)
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ca2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f914 	bl	8009ed8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	4798      	blx	r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <netif_add+0xc8>
    return NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e058      	b.n	8009d72 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cc6:	2bff      	cmp	r3, #255	; 0xff
 8009cc8:	d103      	bne.n	8009cd2 <netif_add+0xda>
        netif->num = 0;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009cd6:	4b30      	ldr	r3, [pc, #192]	; (8009d98 <netif_add+0x1a0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	e02b      	b.n	8009d36 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d106      	bne.n	8009cf4 <netif_add+0xfc>
 8009ce6:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <netif_add+0x184>)
 8009ce8:	f240 128b 	movw	r2, #395	; 0x18b
 8009cec:	492b      	ldr	r1, [pc, #172]	; (8009d9c <netif_add+0x1a4>)
 8009cee:	4825      	ldr	r0, [pc, #148]	; (8009d84 <netif_add+0x18c>)
 8009cf0:	f00b fdc4 	bl	801587c <iprintf>
        num_netifs++;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2bff      	cmp	r3, #255	; 0xff
 8009cfe:	dd06      	ble.n	8009d0e <netif_add+0x116>
 8009d00:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <netif_add+0x184>)
 8009d02:	f240 128d 	movw	r2, #397	; 0x18d
 8009d06:	4926      	ldr	r1, [pc, #152]	; (8009da0 <netif_add+0x1a8>)
 8009d08:	481e      	ldr	r0, [pc, #120]	; (8009d84 <netif_add+0x18c>)
 8009d0a:	f00b fdb7 	bl	801587c <iprintf>
        if (netif2->num == netif->num) {
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d108      	bne.n	8009d30 <netif_add+0x138>
          netif->num++;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d24:	3301      	adds	r3, #1
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8009d2e:	e005      	b.n	8009d3c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1d0      	bne.n	8009cde <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1be      	bne.n	8009cc0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d48:	2bfe      	cmp	r3, #254	; 0xfe
 8009d4a:	d103      	bne.n	8009d54 <netif_add+0x15c>
    netif_num = 0;
 8009d4c:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <netif_add+0x19c>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	e006      	b.n	8009d62 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <netif_add+0x19c>)
 8009d60:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <netif_add+0x1a0>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009d6a:	4a0b      	ldr	r2, [pc, #44]	; (8009d98 <netif_add+0x1a0>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009d70:	68fb      	ldr	r3, [r7, #12]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	080195d4 	.word	0x080195d4
 8009d80:	08019668 	.word	0x08019668
 8009d84:	08019624 	.word	0x08019624
 8009d88:	08019684 	.word	0x08019684
 8009d8c:	0801c0b8 	.word	0x0801c0b8
 8009d90:	0800a0eb 	.word	0x0800a0eb
 8009d94:	200003d8 	.word	0x200003d8
 8009d98:	20006ab0 	.word	0x20006ab0
 8009d9c:	080196a8 	.word	0x080196a8
 8009da0:	080196bc 	.word	0x080196bc

08009da4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f002 facf 	bl	800c354 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f006 fe6d 	bl	8010a98 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d106      	bne.n	8009de8 <netif_do_set_ipaddr+0x20>
 8009dda:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <netif_do_set_ipaddr+0x88>)
 8009ddc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009de0:	491c      	ldr	r1, [pc, #112]	; (8009e54 <netif_do_set_ipaddr+0x8c>)
 8009de2:	481d      	ldr	r0, [pc, #116]	; (8009e58 <netif_do_set_ipaddr+0x90>)
 8009de4:	f00b fd4a 	bl	801587c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <netif_do_set_ipaddr+0x34>
 8009dee:	4b18      	ldr	r3, [pc, #96]	; (8009e50 <netif_do_set_ipaddr+0x88>)
 8009df0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009df4:	4917      	ldr	r1, [pc, #92]	; (8009e54 <netif_do_set_ipaddr+0x8c>)
 8009df6:	4818      	ldr	r0, [pc, #96]	; (8009e58 <netif_do_set_ipaddr+0x90>)
 8009df8:	f00b fd40 	bl	801587c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3304      	adds	r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d01c      	beq.n	8009e44 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3304      	adds	r3, #4
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009e1a:	f107 0314 	add.w	r3, r7, #20
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff ffbf 	bl	8009da4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <netif_do_set_ipaddr+0x6a>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	e000      	b.n	8009e34 <netif_do_set_ipaddr+0x6c>
 8009e32:	2300      	movs	r3, #0
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009e38:	2101      	movs	r1, #1
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 f8d2 	bl	8009fe4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009e40:	2301      	movs	r3, #1
 8009e42:	e000      	b.n	8009e46 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	080195d4 	.word	0x080195d4
 8009e54:	080196ec 	.word	0x080196ec
 8009e58:	08019624 	.word	0x08019624

08009e5c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d00a      	beq.n	8009e8c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <netif_do_set_netmask+0x26>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	e000      	b.n	8009e84 <netif_do_set_netmask+0x28>
 8009e82:	2300      	movs	r3, #0
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	330c      	adds	r3, #12
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d00a      	beq.n	8009eca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <netif_do_set_gw+0x26>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	e000      	b.n	8009ec2 <netif_do_set_gw+0x28>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e000      	b.n	8009ecc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009ef4:	4b1c      	ldr	r3, [pc, #112]	; (8009f68 <netif_set_addr+0x90>)
 8009ef6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009efe:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <netif_set_addr+0x90>)
 8009f00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009f08:	4b17      	ldr	r3, [pc, #92]	; (8009f68 <netif_set_addr+0x90>)
 8009f0a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <netif_set_addr+0x42>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <netif_set_addr+0x46>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <netif_set_addr+0x48>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d006      	beq.n	8009f36 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f28:	f107 0310 	add.w	r3, r7, #16
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff ff49 	bl	8009dc8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7ff ff8e 	bl	8009e5c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff ffa8 	bl	8009e9a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	461a      	mov	r2, r3
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f7ff ff35 	bl	8009dc8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009f5e:	bf00      	nop
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	0801c0b8 	.word	0x0801c0b8

08009f6c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009f74:	4a04      	ldr	r2, [pc, #16]	; (8009f88 <netif_set_default+0x1c>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20006ab4 	.word	0x20006ab4

08009f8c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <netif_set_up+0x1e>
 8009f9a:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <netif_set_up+0x4c>)
 8009f9c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009fa0:	490e      	ldr	r1, [pc, #56]	; (8009fdc <netif_set_up+0x50>)
 8009fa2:	480f      	ldr	r0, [pc, #60]	; (8009fe0 <netif_set_up+0x54>)
 8009fa4:	f00b fc6a 	bl	801587c <iprintf>
 8009fa8:	e013      	b.n	8009fd2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10c      	bne.n	8009fd2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009fca:	2103      	movs	r1, #3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f809 	bl	8009fe4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	080195d4 	.word	0x080195d4
 8009fdc:	0801975c 	.word	0x0801975c
 8009fe0:	08019624 	.word	0x08019624

08009fe4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <netif_issue_reports+0x20>
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <netif_issue_reports+0x74>)
 8009ff8:	f240 326d 	movw	r2, #877	; 0x36d
 8009ffc:	4917      	ldr	r1, [pc, #92]	; (800a05c <netif_issue_reports+0x78>)
 8009ffe:	4818      	ldr	r0, [pc, #96]	; (800a060 <netif_issue_reports+0x7c>)
 800a000:	f00b fc3c 	bl	801587c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d01e      	beq.n	800a050 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a018:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d017      	beq.n	800a050 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d013      	beq.n	800a052 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3304      	adds	r3, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a03a:	f003 0308 	and.w	r3, r3, #8
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d007      	beq.n	800a052 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3304      	adds	r3, #4
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f009 fae9 	bl	8013620 <etharp_request>
 800a04e:	e000      	b.n	800a052 <netif_issue_reports+0x6e>
    return;
 800a050:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	080195d4 	.word	0x080195d4
 800a05c:	08019778 	.word	0x08019778
 800a060:	08019624 	.word	0x08019624

0800a064 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d107      	bne.n	800a082 <netif_set_down+0x1e>
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <netif_set_down+0x58>)
 800a074:	f240 329b 	movw	r2, #923	; 0x39b
 800a078:	4911      	ldr	r1, [pc, #68]	; (800a0c0 <netif_set_down+0x5c>)
 800a07a:	4812      	ldr	r0, [pc, #72]	; (800a0c4 <netif_set_down+0x60>)
 800a07c:	f00b fbfe 	bl	801587c <iprintf>
 800a080:	e019      	b.n	800a0b6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d012      	beq.n	800a0b6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0a8:	f003 0308 	and.w	r3, r3, #8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f008 fe6f 	bl	8012d94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	080195d4 	.word	0x080195d4
 800a0c0:	0801979c 	.word	0x0801979c
 800a0c4:	08019624 	.word	0x08019624

0800a0c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	61da      	str	r2, [r3, #28]
  }
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a0f6:	f06f 030b 	mvn.w	r3, #11
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
	...

0800a108 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d013      	beq.n	800a140 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <netif_get_by_index+0x48>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	e00c      	b.n	800a13a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a126:	3301      	adds	r3, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	79fa      	ldrb	r2, [r7, #7]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d101      	bne.n	800a134 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	e006      	b.n	800a142 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1ef      	bne.n	800a120 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20006ab0 	.word	0x20006ab0

0800a154 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a158:	4b03      	ldr	r3, [pc, #12]	; (800a168 <pbuf_pool_is_empty+0x14>)
 800a15a:	2201      	movs	r2, #1
 800a15c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a15e:	bf00      	nop
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	20006ab8 	.word	0x20006ab8

0800a16c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4611      	mov	r1, r2
 800a178:	461a      	mov	r2, r3
 800a17a:	460b      	mov	r3, r1
 800a17c:	80fb      	strh	r3, [r7, #6]
 800a17e:	4613      	mov	r3, r2
 800a180:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	88ba      	ldrh	r2, [r7, #4]
 800a198:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a19a:	8b3b      	ldrh	r3, [r7, #24]
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	7f3a      	ldrb	r2, [r7, #28]
 800a1a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	73da      	strb	r2, [r3, #15]
}
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08c      	sub	sp, #48	; 0x30
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	80bb      	strh	r3, [r7, #4]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a1d6:	887b      	ldrh	r3, [r7, #2]
 800a1d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a1dc:	d07f      	beq.n	800a2de <pbuf_alloc+0x11e>
 800a1de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a1e2:	f300 80c8 	bgt.w	800a376 <pbuf_alloc+0x1b6>
 800a1e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a1ea:	d010      	beq.n	800a20e <pbuf_alloc+0x4e>
 800a1ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a1f0:	f300 80c1 	bgt.w	800a376 <pbuf_alloc+0x1b6>
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d002      	beq.n	800a1fe <pbuf_alloc+0x3e>
 800a1f8:	2b41      	cmp	r3, #65	; 0x41
 800a1fa:	f040 80bc 	bne.w	800a376 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a1fe:	887a      	ldrh	r2, [r7, #2]
 800a200:	88bb      	ldrh	r3, [r7, #4]
 800a202:	4619      	mov	r1, r3
 800a204:	2000      	movs	r0, #0
 800a206:	f000 f8d1 	bl	800a3ac <pbuf_alloc_reference>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a20c:	e0bd      	b.n	800a38a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a216:	88bb      	ldrh	r3, [r7, #4]
 800a218:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a21a:	2008      	movs	r0, #8
 800a21c:	f7ff fc6e 	bl	8009afc <memp_malloc>
 800a220:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d109      	bne.n	800a23c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a228:	f7ff ff94 	bl	800a154 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a234:	f000 faa8 	bl	800a788 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	e0a7      	b.n	800a38c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a23c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a23e:	3303      	adds	r3, #3
 800a240:	b29b      	uxth	r3, r3
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	b29b      	uxth	r3, r3
 800a248:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	8b7a      	ldrh	r2, [r7, #26]
 800a250:	4293      	cmp	r3, r2
 800a252:	bf28      	it	cs
 800a254:	4613      	movcs	r3, r2
 800a256:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a25a:	3310      	adds	r3, #16
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	3303      	adds	r3, #3
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	4618      	mov	r0, r3
 800a268:	89f9      	ldrh	r1, [r7, #14]
 800a26a:	8b7a      	ldrh	r2, [r7, #26]
 800a26c:	2300      	movs	r3, #0
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	887b      	ldrh	r3, [r7, #2]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	460b      	mov	r3, r1
 800a276:	4601      	mov	r1, r0
 800a278:	6938      	ldr	r0, [r7, #16]
 800a27a:	f7ff ff77 	bl	800a16c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d006      	beq.n	800a298 <pbuf_alloc+0xd8>
 800a28a:	4b42      	ldr	r3, [pc, #264]	; (800a394 <pbuf_alloc+0x1d4>)
 800a28c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a290:	4941      	ldr	r1, [pc, #260]	; (800a398 <pbuf_alloc+0x1d8>)
 800a292:	4842      	ldr	r0, [pc, #264]	; (800a39c <pbuf_alloc+0x1dc>)
 800a294:	f00b faf2 	bl	801587c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a29a:	3303      	adds	r3, #3
 800a29c:	f023 0303 	bic.w	r3, r3, #3
 800a2a0:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800a2a4:	d106      	bne.n	800a2b4 <pbuf_alloc+0xf4>
 800a2a6:	4b3b      	ldr	r3, [pc, #236]	; (800a394 <pbuf_alloc+0x1d4>)
 800a2a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a2ac:	493c      	ldr	r1, [pc, #240]	; (800a3a0 <pbuf_alloc+0x1e0>)
 800a2ae:	483b      	ldr	r0, [pc, #236]	; (800a39c <pbuf_alloc+0x1dc>)
 800a2b0:	f00b fae4 	bl	801587c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2be:	e002      	b.n	800a2c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a2ca:	8b7a      	ldrh	r2, [r7, #26]
 800a2cc:	89fb      	ldrh	r3, [r7, #14]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a2d6:	8b7b      	ldrh	r3, [r7, #26]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d19e      	bne.n	800a21a <pbuf_alloc+0x5a>
      break;
 800a2dc:	e055      	b.n	800a38a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a2de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2e0:	3303      	adds	r3, #3
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	88bb      	ldrh	r3, [r7, #4]
 800a2ec:	3303      	adds	r3, #3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a2fa:	8b3b      	ldrh	r3, [r7, #24]
 800a2fc:	3310      	adds	r3, #16
 800a2fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a300:	8b3a      	ldrh	r2, [r7, #24]
 800a302:	88bb      	ldrh	r3, [r7, #4]
 800a304:	3303      	adds	r3, #3
 800a306:	f023 0303 	bic.w	r3, r3, #3
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d306      	bcc.n	800a31c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a30e:	8afa      	ldrh	r2, [r7, #22]
 800a310:	88bb      	ldrh	r3, [r7, #4]
 800a312:	3303      	adds	r3, #3
 800a314:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a318:	429a      	cmp	r2, r3
 800a31a:	d201      	bcs.n	800a320 <pbuf_alloc+0x160>
        return NULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e035      	b.n	800a38c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a320:	8afb      	ldrh	r3, [r7, #22]
 800a322:	4618      	mov	r0, r3
 800a324:	f7ff fa7c 	bl	8009820 <mem_malloc>
 800a328:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <pbuf_alloc+0x174>
        return NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	e02b      	b.n	800a38c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a336:	3310      	adds	r3, #16
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	4413      	add	r3, r2
 800a33c:	3303      	adds	r3, #3
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	4618      	mov	r0, r3
 800a344:	88b9      	ldrh	r1, [r7, #4]
 800a346:	88ba      	ldrh	r2, [r7, #4]
 800a348:	2300      	movs	r3, #0
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	887b      	ldrh	r3, [r7, #2]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	460b      	mov	r3, r1
 800a352:	4601      	mov	r1, r0
 800a354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a356:	f7ff ff09 	bl	800a16c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d010      	beq.n	800a388 <pbuf_alloc+0x1c8>
 800a366:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <pbuf_alloc+0x1d4>)
 800a368:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a36c:	490d      	ldr	r1, [pc, #52]	; (800a3a4 <pbuf_alloc+0x1e4>)
 800a36e:	480b      	ldr	r0, [pc, #44]	; (800a39c <pbuf_alloc+0x1dc>)
 800a370:	f00b fa84 	bl	801587c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a374:	e008      	b.n	800a388 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <pbuf_alloc+0x1d4>)
 800a378:	f240 1227 	movw	r2, #295	; 0x127
 800a37c:	490a      	ldr	r1, [pc, #40]	; (800a3a8 <pbuf_alloc+0x1e8>)
 800a37e:	4807      	ldr	r0, [pc, #28]	; (800a39c <pbuf_alloc+0x1dc>)
 800a380:	f00b fa7c 	bl	801587c <iprintf>
      return NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	e001      	b.n	800a38c <pbuf_alloc+0x1cc>
      break;
 800a388:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3728      	adds	r7, #40	; 0x28
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	08019804 	.word	0x08019804
 800a398:	08019834 	.word	0x08019834
 800a39c:	08019864 	.word	0x08019864
 800a3a0:	0801988c 	.word	0x0801988c
 800a3a4:	080198c0 	.word	0x080198c0
 800a3a8:	080198ec 	.word	0x080198ec

0800a3ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	807b      	strh	r3, [r7, #2]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a3bc:	883b      	ldrh	r3, [r7, #0]
 800a3be:	2b41      	cmp	r3, #65	; 0x41
 800a3c0:	d009      	beq.n	800a3d6 <pbuf_alloc_reference+0x2a>
 800a3c2:	883b      	ldrh	r3, [r7, #0]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d006      	beq.n	800a3d6 <pbuf_alloc_reference+0x2a>
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <pbuf_alloc_reference+0x5c>)
 800a3ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a3ce:	490f      	ldr	r1, [pc, #60]	; (800a40c <pbuf_alloc_reference+0x60>)
 800a3d0:	480f      	ldr	r0, [pc, #60]	; (800a410 <pbuf_alloc_reference+0x64>)
 800a3d2:	f00b fa53 	bl	801587c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a3d6:	2007      	movs	r0, #7
 800a3d8:	f7ff fb90 	bl	8009afc <memp_malloc>
 800a3dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e00b      	b.n	800a400 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a3e8:	8879      	ldrh	r1, [r7, #2]
 800a3ea:	887a      	ldrh	r2, [r7, #2]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	883b      	ldrh	r3, [r7, #0]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7ff feb7 	bl	800a16c <pbuf_init_alloced_pbuf>
  return p;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	08019804 	.word	0x08019804
 800a40c:	08019908 	.word	0x08019908
 800a410:	08019864 	.word	0x08019864

0800a414 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af02      	add	r7, sp, #8
 800a41a:	607b      	str	r3, [r7, #4]
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
 800a420:	460b      	mov	r3, r1
 800a422:	81bb      	strh	r3, [r7, #12]
 800a424:	4613      	mov	r3, r2
 800a426:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a42c:	8a7b      	ldrh	r3, [r7, #18]
 800a42e:	3303      	adds	r3, #3
 800a430:	f023 0203 	bic.w	r2, r3, #3
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	441a      	add	r2, r3
 800a438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d901      	bls.n	800a442 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	e018      	b.n	800a474 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d007      	beq.n	800a458 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a448:	8a7b      	ldrh	r3, [r7, #18]
 800a44a:	3303      	adds	r3, #3
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	6a3a      	ldr	r2, [r7, #32]
 800a452:	4413      	add	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	e001      	b.n	800a45c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	89b9      	ldrh	r1, [r7, #12]
 800a460:	89ba      	ldrh	r2, [r7, #12]
 800a462:	2302      	movs	r3, #2
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	897b      	ldrh	r3, [r7, #10]
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	460b      	mov	r3, r1
 800a46c:	6979      	ldr	r1, [r7, #20]
 800a46e:	f7ff fe7d 	bl	800a16c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a472:	687b      	ldr	r3, [r7, #4]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <pbuf_realloc+0x20>
 800a48e:	4b3a      	ldr	r3, [pc, #232]	; (800a578 <pbuf_realloc+0xfc>)
 800a490:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a494:	4939      	ldr	r1, [pc, #228]	; (800a57c <pbuf_realloc+0x100>)
 800a496:	483a      	ldr	r0, [pc, #232]	; (800a580 <pbuf_realloc+0x104>)
 800a498:	f00b f9f0 	bl	801587c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	891b      	ldrh	r3, [r3, #8]
 800a4a0:	887a      	ldrh	r2, [r7, #2]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d263      	bcs.n	800a56e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	891a      	ldrh	r2, [r3, #8]
 800a4aa:	887b      	ldrh	r3, [r7, #2]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a4b0:	887b      	ldrh	r3, [r7, #2]
 800a4b2:	817b      	strh	r3, [r7, #10]
  q = p;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a4b8:	e018      	b.n	800a4ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	895b      	ldrh	r3, [r3, #10]
 800a4be:	897a      	ldrh	r2, [r7, #10]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	891a      	ldrh	r2, [r3, #8]
 800a4c8:	893b      	ldrh	r3, [r7, #8]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <pbuf_realloc+0x70>
 800a4de:	4b26      	ldr	r3, [pc, #152]	; (800a578 <pbuf_realloc+0xfc>)
 800a4e0:	f240 12af 	movw	r2, #431	; 0x1af
 800a4e4:	4927      	ldr	r1, [pc, #156]	; (800a584 <pbuf_realloc+0x108>)
 800a4e6:	4826      	ldr	r0, [pc, #152]	; (800a580 <pbuf_realloc+0x104>)
 800a4e8:	f00b f9c8 	bl	801587c <iprintf>
  while (rem_len > q->len) {
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	895b      	ldrh	r3, [r3, #10]
 800a4f0:	897a      	ldrh	r2, [r7, #10]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d8e1      	bhi.n	800a4ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	7b1b      	ldrb	r3, [r3, #12]
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d121      	bne.n	800a546 <pbuf_realloc+0xca>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	895b      	ldrh	r3, [r3, #10]
 800a506:	897a      	ldrh	r2, [r7, #10]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d01c      	beq.n	800a546 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	7b5b      	ldrb	r3, [r3, #13]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d116      	bne.n	800a546 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	b29a      	uxth	r2, r3
 800a522:	897b      	ldrh	r3, [r7, #10]
 800a524:	4413      	add	r3, r2
 800a526:	b29b      	uxth	r3, r3
 800a528:	4619      	mov	r1, r3
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff f87c 	bl	8009628 <mem_trim>
 800a530:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <pbuf_realloc+0xca>
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <pbuf_realloc+0xfc>)
 800a53a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a53e:	4912      	ldr	r1, [pc, #72]	; (800a588 <pbuf_realloc+0x10c>)
 800a540:	480f      	ldr	r0, [pc, #60]	; (800a580 <pbuf_realloc+0x104>)
 800a542:	f00b f99b 	bl	801587c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	897a      	ldrh	r2, [r7, #10]
 800a54a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	895a      	ldrh	r2, [r3, #10]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 f911 	bl	800a788 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	e000      	b.n	800a570 <pbuf_realloc+0xf4>
    return;
 800a56e:	bf00      	nop

}
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	08019804 	.word	0x08019804
 800a57c:	0801991c 	.word	0x0801991c
 800a580:	08019864 	.word	0x08019864
 800a584:	08019934 	.word	0x08019934
 800a588:	0801994c 	.word	0x0801994c

0800a58c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <pbuf_add_header_impl+0x22>
 800a5a0:	4b2b      	ldr	r3, [pc, #172]	; (800a650 <pbuf_add_header_impl+0xc4>)
 800a5a2:	f240 12df 	movw	r2, #479	; 0x1df
 800a5a6:	492b      	ldr	r1, [pc, #172]	; (800a654 <pbuf_add_header_impl+0xc8>)
 800a5a8:	482b      	ldr	r0, [pc, #172]	; (800a658 <pbuf_add_header_impl+0xcc>)
 800a5aa:	f00b f967 	bl	801587c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <pbuf_add_header_impl+0x30>
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ba:	d301      	bcc.n	800a5c0 <pbuf_add_header_impl+0x34>
    return 1;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e043      	b.n	800a648 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <pbuf_add_header_impl+0x3e>
    return 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e03e      	b.n	800a648 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	891a      	ldrh	r2, [r3, #8]
 800a5d2:	8a7b      	ldrh	r3, [r7, #18]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	8a7a      	ldrh	r2, [r7, #18]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d901      	bls.n	800a5e2 <pbuf_add_header_impl+0x56>
    return 1;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e032      	b.n	800a648 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	7b1b      	ldrb	r3, [r3, #12]
 800a5e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a5e8:	8a3b      	ldrh	r3, [r7, #16]
 800a5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00c      	beq.n	800a60c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	425b      	negs	r3, r3
 800a5fa:	4413      	add	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3310      	adds	r3, #16
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	429a      	cmp	r2, r3
 800a606:	d20d      	bcs.n	800a624 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a608:	2301      	movs	r3, #1
 800a60a:	e01d      	b.n	800a648 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d006      	beq.n	800a620 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	425b      	negs	r3, r3
 800a61a:	4413      	add	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e001      	b.n	800a624 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a620:	2301      	movs	r3, #1
 800a622:	e011      	b.n	800a648 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	895a      	ldrh	r2, [r3, #10]
 800a62e:	8a7b      	ldrh	r3, [r7, #18]
 800a630:	4413      	add	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	891a      	ldrh	r2, [r3, #8]
 800a63c:	8a7b      	ldrh	r3, [r7, #18]
 800a63e:	4413      	add	r3, r2
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	811a      	strh	r2, [r3, #8]


  return 0;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	08019804 	.word	0x08019804
 800a654:	08019968 	.word	0x08019968
 800a658:	08019864 	.word	0x08019864

0800a65c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a666:	2200      	movs	r2, #0
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff ff8e 	bl	800a58c <pbuf_add_header_impl>
 800a670:	4603      	mov	r3, r0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <pbuf_remove_header+0x1e>
 800a68c:	4b20      	ldr	r3, [pc, #128]	; (800a710 <pbuf_remove_header+0x94>)
 800a68e:	f240 224b 	movw	r2, #587	; 0x24b
 800a692:	4920      	ldr	r1, [pc, #128]	; (800a714 <pbuf_remove_header+0x98>)
 800a694:	4820      	ldr	r0, [pc, #128]	; (800a718 <pbuf_remove_header+0x9c>)
 800a696:	f00b f8f1 	bl	801587c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <pbuf_remove_header+0x2c>
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a6:	d301      	bcc.n	800a6ac <pbuf_remove_header+0x30>
    return 1;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e02c      	b.n	800a706 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <pbuf_remove_header+0x3a>
    return 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e027      	b.n	800a706 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	895b      	ldrh	r3, [r3, #10]
 800a6be:	89fa      	ldrh	r2, [r7, #14]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d908      	bls.n	800a6d6 <pbuf_remove_header+0x5a>
 800a6c4:	4b12      	ldr	r3, [pc, #72]	; (800a710 <pbuf_remove_header+0x94>)
 800a6c6:	f240 2255 	movw	r2, #597	; 0x255
 800a6ca:	4914      	ldr	r1, [pc, #80]	; (800a71c <pbuf_remove_header+0xa0>)
 800a6cc:	4812      	ldr	r0, [pc, #72]	; (800a718 <pbuf_remove_header+0x9c>)
 800a6ce:	f00b f8d5 	bl	801587c <iprintf>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e017      	b.n	800a706 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	441a      	add	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	895a      	ldrh	r2, [r3, #10]
 800a6ec:	89fb      	ldrh	r3, [r7, #14]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	891a      	ldrh	r2, [r3, #8]
 800a6fa:	89fb      	ldrh	r3, [r7, #14]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	08019804 	.word	0x08019804
 800a714:	08019968 	.word	0x08019968
 800a718:	08019864 	.word	0x08019864
 800a71c:	08019974 	.word	0x08019974

0800a720 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
 800a72c:	4613      	mov	r3, r2
 800a72e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a730:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a734:	2b00      	cmp	r3, #0
 800a736:	da08      	bge.n	800a74a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a73c:	425b      	negs	r3, r3
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff9b 	bl	800a67c <pbuf_remove_header>
 800a746:	4603      	mov	r3, r0
 800a748:	e007      	b.n	800a75a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a74a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a74e:	787a      	ldrb	r2, [r7, #1]
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff ff1a 	bl	800a58c <pbuf_add_header_impl>
 800a758:	4603      	mov	r3, r0
  }
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	460b      	mov	r3, r1
 800a76c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a76e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a772:	2201      	movs	r2, #1
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff ffd2 	bl	800a720 <pbuf_header_impl>
 800a77c:	4603      	mov	r3, r0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <pbuf_free+0x22>
 800a79c:	4b38      	ldr	r3, [pc, #224]	; (800a880 <pbuf_free+0xf8>)
 800a79e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a7a2:	4938      	ldr	r1, [pc, #224]	; (800a884 <pbuf_free+0xfc>)
 800a7a4:	4838      	ldr	r0, [pc, #224]	; (800a888 <pbuf_free+0x100>)
 800a7a6:	f00b f869 	bl	801587c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e063      	b.n	800a876 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a7b2:	e05c      	b.n	800a86e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	7b9b      	ldrb	r3, [r3, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <pbuf_free+0x42>
 800a7bc:	4b30      	ldr	r3, [pc, #192]	; (800a880 <pbuf_free+0xf8>)
 800a7be:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a7c2:	4932      	ldr	r1, [pc, #200]	; (800a88c <pbuf_free+0x104>)
 800a7c4:	4830      	ldr	r0, [pc, #192]	; (800a888 <pbuf_free+0x100>)
 800a7c6:	f00b f859 	bl	801587c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	7b9b      	ldrb	r3, [r3, #14]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	739a      	strb	r2, [r3, #14]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7b9b      	ldrb	r3, [r3, #14]
 800a7da:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a7dc:	7dbb      	ldrb	r3, [r7, #22]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d143      	bne.n	800a86a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7b1b      	ldrb	r3, [r3, #12]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	7b5b      	ldrb	r3, [r3, #13]
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d011      	beq.n	800a822 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <pbuf_free+0x90>
 800a80a:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <pbuf_free+0xf8>)
 800a80c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a810:	491f      	ldr	r1, [pc, #124]	; (800a890 <pbuf_free+0x108>)
 800a812:	481d      	ldr	r0, [pc, #116]	; (800a888 <pbuf_free+0x100>)
 800a814:	f00b f832 	bl	801587c <iprintf>
        pc->custom_free_function(p);
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
 800a820:	e01d      	b.n	800a85e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d104      	bne.n	800a832 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	2008      	movs	r0, #8
 800a82c:	f7ff f9b2 	bl	8009b94 <memp_free>
 800a830:	e015      	b.n	800a85e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d104      	bne.n	800a842 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	2007      	movs	r0, #7
 800a83c:	f7ff f9aa 	bl	8009b94 <memp_free>
 800a840:	e00d      	b.n	800a85e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <pbuf_free+0xc8>
          mem_free(p);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7fe fe83 	bl	8009554 <mem_free>
 800a84e:	e006      	b.n	800a85e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <pbuf_free+0xf8>)
 800a852:	f240 320f 	movw	r2, #783	; 0x30f
 800a856:	490f      	ldr	r1, [pc, #60]	; (800a894 <pbuf_free+0x10c>)
 800a858:	480b      	ldr	r0, [pc, #44]	; (800a888 <pbuf_free+0x100>)
 800a85a:	f00b f80f 	bl	801587c <iprintf>
        }
      }
      count++;
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	3301      	adds	r3, #1
 800a862:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e001      	b.n	800a86e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d19f      	bne.n	800a7b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	08019804 	.word	0x08019804
 800a884:	08019968 	.word	0x08019968
 800a888:	08019864 	.word	0x08019864
 800a88c:	08019994 	.word	0x08019994
 800a890:	080199ac 	.word	0x080199ac
 800a894:	080199d0 	.word	0x080199d0

0800a898 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a8a4:	e005      	b.n	800a8b2 <pbuf_clen+0x1a>
    ++len;
 800a8a6:	89fb      	ldrh	r3, [r7, #14]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f6      	bne.n	800a8a6 <pbuf_clen+0xe>
  }
  return len;
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d010      	beq.n	800a8f8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7b9b      	ldrb	r3, [r3, #14]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7b9b      	ldrb	r3, [r3, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <pbuf_ref+0x30>
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <pbuf_ref+0x38>)
 800a8ec:	f240 3242 	movw	r2, #834	; 0x342
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <pbuf_ref+0x3c>)
 800a8f2:	4805      	ldr	r0, [pc, #20]	; (800a908 <pbuf_ref+0x40>)
 800a8f4:	f00a ffc2 	bl	801587c <iprintf>
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	08019804 	.word	0x08019804
 800a904:	080199e4 	.word	0x080199e4
 800a908:	08019864 	.word	0x08019864

0800a90c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <pbuf_cat+0x16>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <pbuf_cat+0x26>
 800a922:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <pbuf_cat+0x98>)
 800a924:	f240 3259 	movw	r2, #857	; 0x359
 800a928:	491f      	ldr	r1, [pc, #124]	; (800a9a8 <pbuf_cat+0x9c>)
 800a92a:	4820      	ldr	r0, [pc, #128]	; (800a9ac <pbuf_cat+0xa0>)
 800a92c:	f00a ffa6 	bl	801587c <iprintf>
 800a930:	e034      	b.n	800a99c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e00a      	b.n	800a94e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	891a      	ldrh	r2, [r3, #8]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	891b      	ldrh	r3, [r3, #8]
 800a940:	4413      	add	r3, r2
 800a942:	b29a      	uxth	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1f0      	bne.n	800a938 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	891a      	ldrh	r2, [r3, #8]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	895b      	ldrh	r3, [r3, #10]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d006      	beq.n	800a970 <pbuf_cat+0x64>
 800a962:	4b10      	ldr	r3, [pc, #64]	; (800a9a4 <pbuf_cat+0x98>)
 800a964:	f240 3262 	movw	r2, #866	; 0x362
 800a968:	4911      	ldr	r1, [pc, #68]	; (800a9b0 <pbuf_cat+0xa4>)
 800a96a:	4810      	ldr	r0, [pc, #64]	; (800a9ac <pbuf_cat+0xa0>)
 800a96c:	f00a ff86 	bl	801587c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <pbuf_cat+0x7a>
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <pbuf_cat+0x98>)
 800a97a:	f240 3263 	movw	r2, #867	; 0x363
 800a97e:	490d      	ldr	r1, [pc, #52]	; (800a9b4 <pbuf_cat+0xa8>)
 800a980:	480a      	ldr	r0, [pc, #40]	; (800a9ac <pbuf_cat+0xa0>)
 800a982:	f00a ff7b 	bl	801587c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	891a      	ldrh	r2, [r3, #8]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	891b      	ldrh	r3, [r3, #8]
 800a98e:	4413      	add	r3, r2
 800a990:	b29a      	uxth	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	08019804 	.word	0x08019804
 800a9a8:	080199f8 	.word	0x080199f8
 800a9ac:	08019864 	.word	0x08019864
 800a9b0:	08019a30 	.word	0x08019a30
 800a9b4:	08019a60 	.word	0x08019a60

0800a9b8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff ffa1 	bl	800a90c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a9ca:	6838      	ldr	r0, [r7, #0]
 800a9cc:	f7ff ff7c 	bl	800a8c8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d008      	beq.n	800aa02 <pbuf_copy+0x2a>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <pbuf_copy+0x2a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	891a      	ldrh	r2, [r3, #8]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d209      	bcs.n	800aa16 <pbuf_copy+0x3e>
 800aa02:	4b57      	ldr	r3, [pc, #348]	; (800ab60 <pbuf_copy+0x188>)
 800aa04:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aa08:	4956      	ldr	r1, [pc, #344]	; (800ab64 <pbuf_copy+0x18c>)
 800aa0a:	4857      	ldr	r0, [pc, #348]	; (800ab68 <pbuf_copy+0x190>)
 800aa0c:	f00a ff36 	bl	801587c <iprintf>
 800aa10:	f06f 030f 	mvn.w	r3, #15
 800aa14:	e09f      	b.n	800ab56 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	895b      	ldrh	r3, [r3, #10]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	1ad2      	subs	r2, r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	895b      	ldrh	r3, [r3, #10]
 800aa24:	4619      	mov	r1, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1acb      	subs	r3, r1, r3
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d306      	bcc.n	800aa3c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	895b      	ldrh	r3, [r3, #10]
 800aa32:	461a      	mov	r2, r3
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e005      	b.n	800aa48 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	895b      	ldrh	r3, [r3, #10]
 800aa40:	461a      	mov	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	18d0      	adds	r0, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	4413      	add	r3, r2
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	f00a f9ca 	bl	8014df4 <memcpy>
    offset_to += len;
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	895b      	ldrh	r3, [r3, #10]
 800aa74:	461a      	mov	r2, r3
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d906      	bls.n	800aa8a <pbuf_copy+0xb2>
 800aa7c:	4b38      	ldr	r3, [pc, #224]	; (800ab60 <pbuf_copy+0x188>)
 800aa7e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800aa82:	493a      	ldr	r1, [pc, #232]	; (800ab6c <pbuf_copy+0x194>)
 800aa84:	4838      	ldr	r0, [pc, #224]	; (800ab68 <pbuf_copy+0x190>)
 800aa86:	f00a fef9 	bl	801587c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	895b      	ldrh	r3, [r3, #10]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d906      	bls.n	800aaa4 <pbuf_copy+0xcc>
 800aa96:	4b32      	ldr	r3, [pc, #200]	; (800ab60 <pbuf_copy+0x188>)
 800aa98:	f240 32da 	movw	r2, #986	; 0x3da
 800aa9c:	4934      	ldr	r1, [pc, #208]	; (800ab70 <pbuf_copy+0x198>)
 800aa9e:	4832      	ldr	r0, [pc, #200]	; (800ab68 <pbuf_copy+0x190>)
 800aaa0:	f00a feec 	bl	801587c <iprintf>
    if (offset_from >= p_from->len) {
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	895b      	ldrh	r3, [r3, #10]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d304      	bcc.n	800aaba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	895b      	ldrh	r3, [r3, #10]
 800aabe:	461a      	mov	r2, r3
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d114      	bne.n	800aaf0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10c      	bne.n	800aaf0 <pbuf_copy+0x118>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d009      	beq.n	800aaf0 <pbuf_copy+0x118>
 800aadc:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <pbuf_copy+0x188>)
 800aade:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aae2:	4924      	ldr	r1, [pc, #144]	; (800ab74 <pbuf_copy+0x19c>)
 800aae4:	4820      	ldr	r0, [pc, #128]	; (800ab68 <pbuf_copy+0x190>)
 800aae6:	f00a fec9 	bl	801587c <iprintf>
 800aaea:	f06f 030f 	mvn.w	r3, #15
 800aaee:	e032      	b.n	800ab56 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d013      	beq.n	800ab1e <pbuf_copy+0x146>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	895a      	ldrh	r2, [r3, #10]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	891b      	ldrh	r3, [r3, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d10d      	bne.n	800ab1e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d009      	beq.n	800ab1e <pbuf_copy+0x146>
 800ab0a:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <pbuf_copy+0x188>)
 800ab0c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ab10:	4919      	ldr	r1, [pc, #100]	; (800ab78 <pbuf_copy+0x1a0>)
 800ab12:	4815      	ldr	r0, [pc, #84]	; (800ab68 <pbuf_copy+0x190>)
 800ab14:	f00a feb2 	bl	801587c <iprintf>
 800ab18:	f06f 0305 	mvn.w	r3, #5
 800ab1c:	e01b      	b.n	800ab56 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d013      	beq.n	800ab4c <pbuf_copy+0x174>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	895a      	ldrh	r2, [r3, #10]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	891b      	ldrh	r3, [r3, #8]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d10d      	bne.n	800ab4c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <pbuf_copy+0x174>
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <pbuf_copy+0x188>)
 800ab3a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ab3e:	490e      	ldr	r1, [pc, #56]	; (800ab78 <pbuf_copy+0x1a0>)
 800ab40:	4809      	ldr	r0, [pc, #36]	; (800ab68 <pbuf_copy+0x190>)
 800ab42:	f00a fe9b 	bl	801587c <iprintf>
 800ab46:	f06f 0305 	mvn.w	r3, #5
 800ab4a:	e004      	b.n	800ab56 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f47f af61 	bne.w	800aa16 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	08019804 	.word	0x08019804
 800ab64:	08019aac 	.word	0x08019aac
 800ab68:	08019864 	.word	0x08019864
 800ab6c:	08019adc 	.word	0x08019adc
 800ab70:	08019af4 	.word	0x08019af4
 800ab74:	08019b10 	.word	0x08019b10
 800ab78:	08019b20 	.word	0x08019b20

0800ab7c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4611      	mov	r1, r2
 800ab88:	461a      	mov	r2, r3
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	80fb      	strh	r3, [r7, #6]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <pbuf_copy_partial+0x36>
 800aba0:	4b2b      	ldr	r3, [pc, #172]	; (800ac50 <pbuf_copy_partial+0xd4>)
 800aba2:	f240 420a 	movw	r2, #1034	; 0x40a
 800aba6:	492b      	ldr	r1, [pc, #172]	; (800ac54 <pbuf_copy_partial+0xd8>)
 800aba8:	482b      	ldr	r0, [pc, #172]	; (800ac58 <pbuf_copy_partial+0xdc>)
 800abaa:	f00a fe67 	bl	801587c <iprintf>
 800abae:	2300      	movs	r3, #0
 800abb0:	e04a      	b.n	800ac48 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d108      	bne.n	800abca <pbuf_copy_partial+0x4e>
 800abb8:	4b25      	ldr	r3, [pc, #148]	; (800ac50 <pbuf_copy_partial+0xd4>)
 800abba:	f240 420b 	movw	r2, #1035	; 0x40b
 800abbe:	4927      	ldr	r1, [pc, #156]	; (800ac5c <pbuf_copy_partial+0xe0>)
 800abc0:	4825      	ldr	r0, [pc, #148]	; (800ac58 <pbuf_copy_partial+0xdc>)
 800abc2:	f00a fe5b 	bl	801587c <iprintf>
 800abc6:	2300      	movs	r3, #0
 800abc8:	e03e      	b.n	800ac48 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e034      	b.n	800ac3a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800abd0:	88bb      	ldrh	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <pbuf_copy_partial+0x70>
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	895b      	ldrh	r3, [r3, #10]
 800abda:	88ba      	ldrh	r2, [r7, #4]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d305      	bcc.n	800abec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	895b      	ldrh	r3, [r3, #10]
 800abe4:	88ba      	ldrh	r2, [r7, #4]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	80bb      	strh	r3, [r7, #4]
 800abea:	e023      	b.n	800ac34 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	895a      	ldrh	r2, [r3, #10]
 800abf0:	88bb      	ldrh	r3, [r7, #4]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800abf6:	8b3a      	ldrh	r2, [r7, #24]
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d901      	bls.n	800ac02 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ac02:	8b7b      	ldrh	r3, [r7, #26]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	18d0      	adds	r0, r2, r3
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	88bb      	ldrh	r3, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	8b3a      	ldrh	r2, [r7, #24]
 800ac12:	4619      	mov	r1, r3
 800ac14:	f00a f8ee 	bl	8014df4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ac18:	8afa      	ldrh	r2, [r7, #22]
 800ac1a:	8b3b      	ldrh	r3, [r7, #24]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ac20:	8b7a      	ldrh	r2, [r7, #26]
 800ac22:	8b3b      	ldrh	r3, [r7, #24]
 800ac24:	4413      	add	r3, r2
 800ac26:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ac28:	88fa      	ldrh	r2, [r7, #6]
 800ac2a:	8b3b      	ldrh	r3, [r7, #24]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	61fb      	str	r3, [r7, #28]
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <pbuf_copy_partial+0xca>
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1c4      	bne.n	800abd0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ac46:	8afb      	ldrh	r3, [r7, #22]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	08019804 	.word	0x08019804
 800ac54:	08019b4c 	.word	0x08019b4c
 800ac58:	08019864 	.word	0x08019864
 800ac5c:	08019b6c 	.word	0x08019b6c

0800ac60 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	603a      	str	r2, [r7, #0]
 800ac6a:	71fb      	strb	r3, [r7, #7]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	8919      	ldrh	r1, [r3, #8]
 800ac74:	88ba      	ldrh	r2, [r7, #4]
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff faa1 	bl	800a1c0 <pbuf_alloc>
 800ac7e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <pbuf_clone+0x2a>
    return NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e011      	b.n	800acae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff fea3 	bl	800a9d8 <pbuf_copy>
 800ac92:	4603      	mov	r3, r0
 800ac94:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ac96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d006      	beq.n	800acac <pbuf_clone+0x4c>
 800ac9e:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <pbuf_clone+0x58>)
 800aca0:	f240 5224 	movw	r2, #1316	; 0x524
 800aca4:	4905      	ldr	r1, [pc, #20]	; (800acbc <pbuf_clone+0x5c>)
 800aca6:	4806      	ldr	r0, [pc, #24]	; (800acc0 <pbuf_clone+0x60>)
 800aca8:	f00a fde8 	bl	801587c <iprintf>
  return q;
 800acac:	68fb      	ldr	r3, [r7, #12]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	08019804 	.word	0x08019804
 800acbc:	08019c78 	.word	0x08019c78
 800acc0:	08019864 	.word	0x08019864

0800acc4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800acc8:	f00a fdf0 	bl	80158ac <rand>
 800accc:	4603      	mov	r3, r0
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800acda:	b29a      	uxth	r2, r3
 800acdc:	4b01      	ldr	r3, [pc, #4]	; (800ace4 <tcp_init+0x20>)
 800acde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ace0:	bf00      	nop
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	20000016 	.word	0x20000016

0800ace8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7d1b      	ldrb	r3, [r3, #20]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d105      	bne.n	800ad04 <tcp_free+0x1c>
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <tcp_free+0x2c>)
 800acfa:	22d4      	movs	r2, #212	; 0xd4
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <tcp_free+0x30>)
 800acfe:	4807      	ldr	r0, [pc, #28]	; (800ad1c <tcp_free+0x34>)
 800ad00:	f00a fdbc 	bl	801587c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	2001      	movs	r0, #1
 800ad08:	f7fe ff44 	bl	8009b94 <memp_free>
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	08019d04 	.word	0x08019d04
 800ad18:	08019d34 	.word	0x08019d34
 800ad1c:	08019d48 	.word	0x08019d48

0800ad20 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	7d1b      	ldrb	r3, [r3, #20]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d105      	bne.n	800ad3c <tcp_free_listen+0x1c>
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <tcp_free_listen+0x2c>)
 800ad32:	22df      	movs	r2, #223	; 0xdf
 800ad34:	4906      	ldr	r1, [pc, #24]	; (800ad50 <tcp_free_listen+0x30>)
 800ad36:	4807      	ldr	r0, [pc, #28]	; (800ad54 <tcp_free_listen+0x34>)
 800ad38:	f00a fda0 	bl	801587c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	2002      	movs	r0, #2
 800ad40:	f7fe ff28 	bl	8009b94 <memp_free>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08019d04 	.word	0x08019d04
 800ad50:	08019d70 	.word	0x08019d70
 800ad54:	08019d48 	.word	0x08019d48

0800ad58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ad5c:	f000 fea2 	bl	800baa4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <tcp_tmr+0x28>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <tcp_tmr+0x28>)
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <tcp_tmr+0x28>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ad78:	f000 fb54 	bl	800b424 <tcp_slowtmr>
  }
}
 800ad7c:	bf00      	nop
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	200003d9 	.word	0x200003d9

0800ad84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <tcp_remove_listener+0x1c>
 800ad94:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <tcp_remove_listener+0x48>)
 800ad96:	22ff      	movs	r2, #255	; 0xff
 800ad98:	490d      	ldr	r1, [pc, #52]	; (800add0 <tcp_remove_listener+0x4c>)
 800ad9a:	480e      	ldr	r0, [pc, #56]	; (800add4 <tcp_remove_listener+0x50>)
 800ad9c:	f00a fd6e 	bl	801587c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e00a      	b.n	800adbc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d102      	bne.n	800adb6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f1      	bne.n	800ada6 <tcp_remove_listener+0x22>
    }
  }
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	08019d04 	.word	0x08019d04
 800add0:	08019d8c 	.word	0x08019d8c
 800add4:	08019d48 	.word	0x08019d48

0800add8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d106      	bne.n	800adf4 <tcp_listen_closed+0x1c>
 800ade6:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <tcp_listen_closed+0x60>)
 800ade8:	f240 1211 	movw	r2, #273	; 0x111
 800adec:	4913      	ldr	r1, [pc, #76]	; (800ae3c <tcp_listen_closed+0x64>)
 800adee:	4814      	ldr	r0, [pc, #80]	; (800ae40 <tcp_listen_closed+0x68>)
 800adf0:	f00a fd44 	bl	801587c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d006      	beq.n	800ae0a <tcp_listen_closed+0x32>
 800adfc:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <tcp_listen_closed+0x60>)
 800adfe:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ae02:	4910      	ldr	r1, [pc, #64]	; (800ae44 <tcp_listen_closed+0x6c>)
 800ae04:	480e      	ldr	r0, [pc, #56]	; (800ae40 <tcp_listen_closed+0x68>)
 800ae06:	f00a fd39 	bl	801587c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e00b      	b.n	800ae28 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ae10:	4a0d      	ldr	r2, [pc, #52]	; (800ae48 <tcp_listen_closed+0x70>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ffb1 	bl	800ad84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d9f0      	bls.n	800ae10 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	08019d04 	.word	0x08019d04
 800ae3c:	08019db4 	.word	0x08019db4
 800ae40:	08019d48 	.word	0x08019d48
 800ae44:	08019dc0 	.word	0x08019dc0
 800ae48:	0801c080 	.word	0x0801c080

0800ae4c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ae4c:	b5b0      	push	{r4, r5, r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <tcp_close_shutdown+0x20>
 800ae5e:	4b63      	ldr	r3, [pc, #396]	; (800afec <tcp_close_shutdown+0x1a0>)
 800ae60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ae64:	4962      	ldr	r1, [pc, #392]	; (800aff0 <tcp_close_shutdown+0x1a4>)
 800ae66:	4863      	ldr	r0, [pc, #396]	; (800aff4 <tcp_close_shutdown+0x1a8>)
 800ae68:	f00a fd08 	bl	801587c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ae6c:	78fb      	ldrb	r3, [r7, #3]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d066      	beq.n	800af40 <tcp_close_shutdown+0xf4>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7d1b      	ldrb	r3, [r3, #20]
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	d003      	beq.n	800ae82 <tcp_close_shutdown+0x36>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	7d1b      	ldrb	r3, [r3, #20]
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	d15e      	bne.n	800af40 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d104      	bne.n	800ae94 <tcp_close_shutdown+0x48>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae92:	d055      	beq.n	800af40 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8b5b      	ldrh	r3, [r3, #26]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d106      	bne.n	800aeae <tcp_close_shutdown+0x62>
 800aea0:	4b52      	ldr	r3, [pc, #328]	; (800afec <tcp_close_shutdown+0x1a0>)
 800aea2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aea6:	4954      	ldr	r1, [pc, #336]	; (800aff8 <tcp_close_shutdown+0x1ac>)
 800aea8:	4852      	ldr	r0, [pc, #328]	; (800aff4 <tcp_close_shutdown+0x1a8>)
 800aeaa:	f00a fce7 	bl	801587c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aeb6:	687d      	ldr	r5, [r7, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	8ad2      	ldrh	r2, [r2, #22]
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	8b09      	ldrh	r1, [r1, #24]
 800aec4:	9102      	str	r1, [sp, #8]
 800aec6:	9201      	str	r2, [sp, #4]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	462b      	mov	r3, r5
 800aecc:	4622      	mov	r2, r4
 800aece:	4601      	mov	r1, r0
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f004 fe8d 	bl	800fbf0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 f8c6 	bl	800c068 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aedc:	4b47      	ldr	r3, [pc, #284]	; (800affc <tcp_close_shutdown+0x1b0>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d105      	bne.n	800aef2 <tcp_close_shutdown+0xa6>
 800aee6:	4b45      	ldr	r3, [pc, #276]	; (800affc <tcp_close_shutdown+0x1b0>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	4a43      	ldr	r2, [pc, #268]	; (800affc <tcp_close_shutdown+0x1b0>)
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	e013      	b.n	800af1a <tcp_close_shutdown+0xce>
 800aef2:	4b42      	ldr	r3, [pc, #264]	; (800affc <tcp_close_shutdown+0x1b0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	e00c      	b.n	800af14 <tcp_close_shutdown+0xc8>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d104      	bne.n	800af0e <tcp_close_shutdown+0xc2>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68da      	ldr	r2, [r3, #12]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	60da      	str	r2, [r3, #12]
 800af0c:	e005      	b.n	800af1a <tcp_close_shutdown+0xce>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1ef      	bne.n	800aefa <tcp_close_shutdown+0xae>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	60da      	str	r2, [r3, #12]
 800af20:	4b37      	ldr	r3, [pc, #220]	; (800b000 <tcp_close_shutdown+0x1b4>)
 800af22:	2201      	movs	r2, #1
 800af24:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800af26:	4b37      	ldr	r3, [pc, #220]	; (800b004 <tcp_close_shutdown+0x1b8>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d102      	bne.n	800af36 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800af30:	f003 fd5a 	bl	800e9e8 <tcp_trigger_input_pcb_close>
 800af34:	e002      	b.n	800af3c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff fed6 	bl	800ace8 <tcp_free>
      }
      return ERR_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e050      	b.n	800afe2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7d1b      	ldrb	r3, [r3, #20]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d03b      	beq.n	800afc0 <tcp_close_shutdown+0x174>
 800af48:	2b02      	cmp	r3, #2
 800af4a:	dc44      	bgt.n	800afd6 <tcp_close_shutdown+0x18a>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <tcp_close_shutdown+0x10a>
 800af50:	2b01      	cmp	r3, #1
 800af52:	d02a      	beq.n	800afaa <tcp_close_shutdown+0x15e>
 800af54:	e03f      	b.n	800afd6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	8adb      	ldrh	r3, [r3, #22]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d021      	beq.n	800afa2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af5e:	4b2a      	ldr	r3, [pc, #168]	; (800b008 <tcp_close_shutdown+0x1bc>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d105      	bne.n	800af74 <tcp_close_shutdown+0x128>
 800af68:	4b27      	ldr	r3, [pc, #156]	; (800b008 <tcp_close_shutdown+0x1bc>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	4a26      	ldr	r2, [pc, #152]	; (800b008 <tcp_close_shutdown+0x1bc>)
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	e013      	b.n	800af9c <tcp_close_shutdown+0x150>
 800af74:	4b24      	ldr	r3, [pc, #144]	; (800b008 <tcp_close_shutdown+0x1bc>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	60bb      	str	r3, [r7, #8]
 800af7a:	e00c      	b.n	800af96 <tcp_close_shutdown+0x14a>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	429a      	cmp	r2, r3
 800af84:	d104      	bne.n	800af90 <tcp_close_shutdown+0x144>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	60da      	str	r2, [r3, #12]
 800af8e:	e005      	b.n	800af9c <tcp_close_shutdown+0x150>
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	60bb      	str	r3, [r7, #8]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1ef      	bne.n	800af7c <tcp_close_shutdown+0x130>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fea0 	bl	800ace8 <tcp_free>
      break;
 800afa8:	e01a      	b.n	800afe0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff ff14 	bl	800add8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	4816      	ldr	r0, [pc, #88]	; (800b00c <tcp_close_shutdown+0x1c0>)
 800afb4:	f001 f8a8 	bl	800c108 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff feb1 	bl	800ad20 <tcp_free_listen>
      break;
 800afbe:	e00f      	b.n	800afe0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	480e      	ldr	r0, [pc, #56]	; (800affc <tcp_close_shutdown+0x1b0>)
 800afc4:	f001 f8a0 	bl	800c108 <tcp_pcb_remove>
 800afc8:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <tcp_close_shutdown+0x1b4>)
 800afca:	2201      	movs	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff fe8a 	bl	800ace8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800afd4:	e004      	b.n	800afe0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f81a 	bl	800b010 <tcp_close_shutdown_fin>
 800afdc:	4603      	mov	r3, r0
 800afde:	e000      	b.n	800afe2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bdb0      	pop	{r4, r5, r7, pc}
 800afea:	bf00      	nop
 800afec:	08019d04 	.word	0x08019d04
 800aff0:	08019dd8 	.word	0x08019dd8
 800aff4:	08019d48 	.word	0x08019d48
 800aff8:	08019df8 	.word	0x08019df8
 800affc:	20006ac0 	.word	0x20006ac0
 800b000:	20006abc 	.word	0x20006abc
 800b004:	20006ad4 	.word	0x20006ad4
 800b008:	20006acc 	.word	0x20006acc
 800b00c:	20006ac8 	.word	0x20006ac8

0800b010 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <tcp_close_shutdown_fin+0x1c>
 800b01e:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <tcp_close_shutdown_fin+0xc8>)
 800b020:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b024:	492d      	ldr	r1, [pc, #180]	; (800b0dc <tcp_close_shutdown_fin+0xcc>)
 800b026:	482e      	ldr	r0, [pc, #184]	; (800b0e0 <tcp_close_shutdown_fin+0xd0>)
 800b028:	f00a fc28 	bl	801587c <iprintf>

  switch (pcb->state) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	7d1b      	ldrb	r3, [r3, #20]
 800b030:	2b07      	cmp	r3, #7
 800b032:	d020      	beq.n	800b076 <tcp_close_shutdown_fin+0x66>
 800b034:	2b07      	cmp	r3, #7
 800b036:	dc2b      	bgt.n	800b090 <tcp_close_shutdown_fin+0x80>
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d002      	beq.n	800b042 <tcp_close_shutdown_fin+0x32>
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d00d      	beq.n	800b05c <tcp_close_shutdown_fin+0x4c>
 800b040:	e026      	b.n	800b090 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f003 fee2 	bl	800ee0c <tcp_send_fin>
 800b048:	4603      	mov	r3, r0
 800b04a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11f      	bne.n	800b094 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2205      	movs	r2, #5
 800b058:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b05a:	e01b      	b.n	800b094 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f003 fed5 	bl	800ee0c <tcp_send_fin>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d114      	bne.n	800b098 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2205      	movs	r2, #5
 800b072:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b074:	e010      	b.n	800b098 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f003 fec8 	bl	800ee0c <tcp_send_fin>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2209      	movs	r2, #9
 800b08c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b08e:	e005      	b.n	800b09c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	e01c      	b.n	800b0ce <tcp_close_shutdown_fin+0xbe>
      break;
 800b094:	bf00      	nop
 800b096:	e002      	b.n	800b09e <tcp_close_shutdown_fin+0x8e>
      break;
 800b098:	bf00      	nop
 800b09a:	e000      	b.n	800b09e <tcp_close_shutdown_fin+0x8e>
      break;
 800b09c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f003 ffee 	bl	800f088 <tcp_output>
 800b0ac:	e00d      	b.n	800b0ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b6:	d108      	bne.n	800b0ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	8b5b      	ldrh	r3, [r3, #26]
 800b0bc:	f043 0308 	orr.w	r3, r3, #8
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e001      	b.n	800b0ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	08019d04 	.word	0x08019d04
 800b0dc:	08019db4 	.word	0x08019db4
 800b0e0:	08019d48 	.word	0x08019d48

0800b0e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <tcp_close+0x22>
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	; (800b130 <tcp_close+0x4c>)
 800b0f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b0f8:	490e      	ldr	r1, [pc, #56]	; (800b134 <tcp_close+0x50>)
 800b0fa:	480f      	ldr	r0, [pc, #60]	; (800b138 <tcp_close+0x54>)
 800b0fc:	f00a fbbe 	bl	801587c <iprintf>
 800b100:	f06f 030f 	mvn.w	r3, #15
 800b104:	e00f      	b.n	800b126 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7d1b      	ldrb	r3, [r3, #20]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d006      	beq.n	800b11c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	8b5b      	ldrh	r3, [r3, #26]
 800b112:	f043 0310 	orr.w	r3, r3, #16
 800b116:	b29a      	uxth	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b11c:	2101      	movs	r1, #1
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fe94 	bl	800ae4c <tcp_close_shutdown>
 800b124:	4603      	mov	r3, r0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	08019d04 	.word	0x08019d04
 800b134:	08019e14 	.word	0x08019e14
 800b138:	08019d48 	.word	0x08019d48

0800b13c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08e      	sub	sp, #56	; 0x38
 800b140:	af04      	add	r7, sp, #16
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d107      	bne.n	800b15c <tcp_abandon+0x20>
 800b14c:	4b52      	ldr	r3, [pc, #328]	; (800b298 <tcp_abandon+0x15c>)
 800b14e:	f240 223d 	movw	r2, #573	; 0x23d
 800b152:	4952      	ldr	r1, [pc, #328]	; (800b29c <tcp_abandon+0x160>)
 800b154:	4852      	ldr	r0, [pc, #328]	; (800b2a0 <tcp_abandon+0x164>)
 800b156:	f00a fb91 	bl	801587c <iprintf>
 800b15a:	e099      	b.n	800b290 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7d1b      	ldrb	r3, [r3, #20]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d106      	bne.n	800b172 <tcp_abandon+0x36>
 800b164:	4b4c      	ldr	r3, [pc, #304]	; (800b298 <tcp_abandon+0x15c>)
 800b166:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b16a:	494e      	ldr	r1, [pc, #312]	; (800b2a4 <tcp_abandon+0x168>)
 800b16c:	484c      	ldr	r0, [pc, #304]	; (800b2a0 <tcp_abandon+0x164>)
 800b16e:	f00a fb85 	bl	801587c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	7d1b      	ldrb	r3, [r3, #20]
 800b176:	2b0a      	cmp	r3, #10
 800b178:	d107      	bne.n	800b18a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	484a      	ldr	r0, [pc, #296]	; (800b2a8 <tcp_abandon+0x16c>)
 800b17e:	f000 ffc3 	bl	800c108 <tcp_pcb_remove>
    tcp_free(pcb);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7ff fdb0 	bl	800ace8 <tcp_free>
 800b188:	e082      	b.n	800b290 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b196:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7d1b      	ldrb	r3, [r3, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d126      	bne.n	800b202 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8adb      	ldrh	r3, [r3, #22]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d02e      	beq.n	800b21a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b1bc:	4b3b      	ldr	r3, [pc, #236]	; (800b2ac <tcp_abandon+0x170>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d105      	bne.n	800b1d2 <tcp_abandon+0x96>
 800b1c6:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <tcp_abandon+0x170>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	4a37      	ldr	r2, [pc, #220]	; (800b2ac <tcp_abandon+0x170>)
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	e013      	b.n	800b1fa <tcp_abandon+0xbe>
 800b1d2:	4b36      	ldr	r3, [pc, #216]	; (800b2ac <tcp_abandon+0x170>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	e00c      	b.n	800b1f4 <tcp_abandon+0xb8>
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d104      	bne.n	800b1ee <tcp_abandon+0xb2>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	60da      	str	r2, [r3, #12]
 800b1ec:	e005      	b.n	800b1fa <tcp_abandon+0xbe>
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1ef      	bne.n	800b1da <tcp_abandon+0x9e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	60da      	str	r2, [r3, #12]
 800b200:	e00b      	b.n	800b21a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	8adb      	ldrh	r3, [r3, #22]
 800b20a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4828      	ldr	r0, [pc, #160]	; (800b2b0 <tcp_abandon+0x174>)
 800b210:	f000 ff7a 	bl	800c108 <tcp_pcb_remove>
 800b214:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <tcp_abandon+0x178>)
 800b216:	2201      	movs	r2, #1
 800b218:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fd1c 	bl	800bc64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fd13 	bl	800bc64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fd0a 	bl	800bc64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00e      	beq.n	800b274 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3304      	adds	r3, #4
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	8b12      	ldrh	r2, [r2, #24]
 800b260:	9202      	str	r2, [sp, #8]
 800b262:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b264:	9201      	str	r2, [sp, #4]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	460b      	mov	r3, r1
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	69b9      	ldr	r1, [r7, #24]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f004 fcbe 	bl	800fbf0 <tcp_rst>
    }
    last_state = pcb->state;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
 800b278:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff fd34 	bl	800ace8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d004      	beq.n	800b290 <tcp_abandon+0x154>
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f06f 010c 	mvn.w	r1, #12
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	4798      	blx	r3
  }
}
 800b290:	3728      	adds	r7, #40	; 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	08019d04 	.word	0x08019d04
 800b29c:	08019e48 	.word	0x08019e48
 800b2a0:	08019d48 	.word	0x08019d48
 800b2a4:	08019e64 	.word	0x08019e64
 800b2a8:	20006ad0 	.word	0x20006ad0
 800b2ac:	20006acc 	.word	0x20006acc
 800b2b0:	20006ac0 	.word	0x20006ac0
 800b2b4:	20006abc 	.word	0x20006abc

0800b2b8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ff3a 	bl	800b13c <tcp_abandon>
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <tcp_update_rcv_ann_wnd+0x1c>
 800b2de:	4b25      	ldr	r3, [pc, #148]	; (800b374 <tcp_update_rcv_ann_wnd+0xa4>)
 800b2e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b2e4:	4924      	ldr	r1, [pc, #144]	; (800b378 <tcp_update_rcv_ann_wnd+0xa8>)
 800b2e6:	4825      	ldr	r0, [pc, #148]	; (800b37c <tcp_update_rcv_ann_wnd+0xac>)
 800b2e8:	f00a fac8 	bl	801587c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b300:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b304:	bf28      	it	cs
 800b306:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800b30a:	b292      	uxth	r2, r2
 800b30c:	4413      	add	r3, r2
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	db08      	blt.n	800b328 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	e020      	b.n	800b36a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	dd03      	ble.n	800b33e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b33c:	e014      	b.n	800b368 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b350:	d306      	bcc.n	800b360 <tcp_update_rcv_ann_wnd+0x90>
 800b352:	4b08      	ldr	r3, [pc, #32]	; (800b374 <tcp_update_rcv_ann_wnd+0xa4>)
 800b354:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b358:	4909      	ldr	r1, [pc, #36]	; (800b380 <tcp_update_rcv_ann_wnd+0xb0>)
 800b35a:	4808      	ldr	r0, [pc, #32]	; (800b37c <tcp_update_rcv_ann_wnd+0xac>)
 800b35c:	f00a fa8e 	bl	801587c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	b29a      	uxth	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b368:	2300      	movs	r3, #0
  }
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	08019d04 	.word	0x08019d04
 800b378:	08019f60 	.word	0x08019f60
 800b37c:	08019d48 	.word	0x08019d48
 800b380:	08019f84 	.word	0x08019f84

0800b384 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <tcp_recved+0x22>
 800b396:	4b1f      	ldr	r3, [pc, #124]	; (800b414 <tcp_recved+0x90>)
 800b398:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b39c:	491e      	ldr	r1, [pc, #120]	; (800b418 <tcp_recved+0x94>)
 800b39e:	481f      	ldr	r0, [pc, #124]	; (800b41c <tcp_recved+0x98>)
 800b3a0:	f00a fa6c 	bl	801587c <iprintf>
 800b3a4:	e032      	b.n	800b40c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7d1b      	ldrb	r3, [r3, #20]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d106      	bne.n	800b3bc <tcp_recved+0x38>
 800b3ae:	4b19      	ldr	r3, [pc, #100]	; (800b414 <tcp_recved+0x90>)
 800b3b0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b3b4:	491a      	ldr	r1, [pc, #104]	; (800b420 <tcp_recved+0x9c>)
 800b3b6:	4819      	ldr	r0, [pc, #100]	; (800b41c <tcp_recved+0x98>)
 800b3b8:	f00a fa60 	bl	801587c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3c0:	887b      	ldrh	r3, [r7, #2]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b3c6:	89fb      	ldrh	r3, [r7, #14]
 800b3c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3cc:	d804      	bhi.n	800b3d8 <tcp_recved+0x54>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d2:	89fa      	ldrh	r2, [r7, #14]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d204      	bcs.n	800b3e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3de:	851a      	strh	r2, [r3, #40]	; 0x28
 800b3e0:	e002      	b.n	800b3e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	89fa      	ldrh	r2, [r7, #14]
 800b3e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ff71 	bl	800b2d0 <tcp_update_rcv_ann_wnd>
 800b3ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f6:	d309      	bcc.n	800b40c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8b5b      	ldrh	r3, [r3, #26]
 800b3fc:	f043 0302 	orr.w	r3, r3, #2
 800b400:	b29a      	uxth	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f003 fe3e 	bl	800f088 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	08019d04 	.word	0x08019d04
 800b418:	08019fa0 	.word	0x08019fa0
 800b41c:	08019d48 	.word	0x08019d48
 800b420:	08019fb8 	.word	0x08019fb8

0800b424 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b424:	b5b0      	push	{r4, r5, r7, lr}
 800b426:	b090      	sub	sp, #64	; 0x40
 800b428:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b430:	4b94      	ldr	r3, [pc, #592]	; (800b684 <tcp_slowtmr+0x260>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	4a93      	ldr	r2, [pc, #588]	; (800b684 <tcp_slowtmr+0x260>)
 800b438:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b43a:	4b93      	ldr	r3, [pc, #588]	; (800b688 <tcp_slowtmr+0x264>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	3301      	adds	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	4b91      	ldr	r3, [pc, #580]	; (800b688 <tcp_slowtmr+0x264>)
 800b444:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b44a:	4b90      	ldr	r3, [pc, #576]	; (800b68c <tcp_slowtmr+0x268>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b450:	e29f      	b.n	800b992 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	7d1b      	ldrb	r3, [r3, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <tcp_slowtmr+0x44>
 800b45a:	4b8d      	ldr	r3, [pc, #564]	; (800b690 <tcp_slowtmr+0x26c>)
 800b45c:	f240 42be 	movw	r2, #1214	; 0x4be
 800b460:	498c      	ldr	r1, [pc, #560]	; (800b694 <tcp_slowtmr+0x270>)
 800b462:	488d      	ldr	r0, [pc, #564]	; (800b698 <tcp_slowtmr+0x274>)
 800b464:	f00a fa0a 	bl	801587c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46a:	7d1b      	ldrb	r3, [r3, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d106      	bne.n	800b47e <tcp_slowtmr+0x5a>
 800b470:	4b87      	ldr	r3, [pc, #540]	; (800b690 <tcp_slowtmr+0x26c>)
 800b472:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b476:	4989      	ldr	r1, [pc, #548]	; (800b69c <tcp_slowtmr+0x278>)
 800b478:	4887      	ldr	r0, [pc, #540]	; (800b698 <tcp_slowtmr+0x274>)
 800b47a:	f00a f9ff 	bl	801587c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	7d1b      	ldrb	r3, [r3, #20]
 800b482:	2b0a      	cmp	r3, #10
 800b484:	d106      	bne.n	800b494 <tcp_slowtmr+0x70>
 800b486:	4b82      	ldr	r3, [pc, #520]	; (800b690 <tcp_slowtmr+0x26c>)
 800b488:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b48c:	4984      	ldr	r1, [pc, #528]	; (800b6a0 <tcp_slowtmr+0x27c>)
 800b48e:	4882      	ldr	r0, [pc, #520]	; (800b698 <tcp_slowtmr+0x274>)
 800b490:	f00a f9f4 	bl	801587c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	7f9a      	ldrb	r2, [r3, #30]
 800b498:	4b7b      	ldr	r3, [pc, #492]	; (800b688 <tcp_slowtmr+0x264>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d105      	bne.n	800b4ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b4aa:	e272      	b.n	800b992 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b4ac:	4b76      	ldr	r3, [pc, #472]	; (800b688 <tcp_slowtmr+0x264>)
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	7d1b      	ldrb	r3, [r3, #20]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d10a      	bne.n	800b4de <tcp_slowtmr+0xba>
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ce:	2b05      	cmp	r3, #5
 800b4d0:	d905      	bls.n	800b4de <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4dc:	e11e      	b.n	800b71c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4e4:	2b0b      	cmp	r3, #11
 800b4e6:	d905      	bls.n	800b4f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4f2:	e113      	b.n	800b71c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d075      	beq.n	800b5ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <tcp_slowtmr+0xf0>
 800b506:	4b62      	ldr	r3, [pc, #392]	; (800b690 <tcp_slowtmr+0x26c>)
 800b508:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b50c:	4965      	ldr	r1, [pc, #404]	; (800b6a4 <tcp_slowtmr+0x280>)
 800b50e:	4862      	ldr	r0, [pc, #392]	; (800b698 <tcp_slowtmr+0x274>)
 800b510:	f00a f9b4 	bl	801587c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <tcp_slowtmr+0x106>
 800b51c:	4b5c      	ldr	r3, [pc, #368]	; (800b690 <tcp_slowtmr+0x26c>)
 800b51e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b522:	4961      	ldr	r1, [pc, #388]	; (800b6a8 <tcp_slowtmr+0x284>)
 800b524:	485c      	ldr	r0, [pc, #368]	; (800b698 <tcp_slowtmr+0x274>)
 800b526:	f00a f9a9 	bl	801587c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b530:	2b0b      	cmp	r3, #11
 800b532:	d905      	bls.n	800b540 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b538:	3301      	adds	r3, #1
 800b53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b53e:	e0ed      	b.n	800b71c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b546:	3b01      	subs	r3, #1
 800b548:	4a58      	ldr	r2, [pc, #352]	; (800b6ac <tcp_slowtmr+0x288>)
 800b54a:	5cd3      	ldrb	r3, [r2, r3]
 800b54c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b554:	7c7a      	ldrb	r2, [r7, #17]
 800b556:	429a      	cmp	r2, r3
 800b558:	d907      	bls.n	800b56a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b560:	3301      	adds	r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b570:	7c7a      	ldrb	r2, [r7, #17]
 800b572:	429a      	cmp	r2, r3
 800b574:	f200 80d2 	bhi.w	800b71c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b578:	2301      	movs	r3, #1
 800b57a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b582:	2b00      	cmp	r3, #0
 800b584:	d108      	bne.n	800b598 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b588:	f004 fc24 	bl	800fdd4 <tcp_zero_window_probe>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d014      	beq.n	800b5bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b592:	2300      	movs	r3, #0
 800b594:	623b      	str	r3, [r7, #32]
 800b596:	e011      	b.n	800b5bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a2:	f003 faeb 	bl	800eb7c <tcp_split_unsent_seg>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d107      	bne.n	800b5bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b5ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ae:	f003 fd6b 	bl	800f088 <tcp_output>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80ac 	beq.w	800b71c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5d2:	2b06      	cmp	r3, #6
 800b5d4:	f200 80a2 	bhi.w	800b71c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5de:	3301      	adds	r3, #1
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b5e8:	e098      	b.n	800b71c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	db0f      	blt.n	800b614 <tcp_slowtmr+0x1f0>
 800b5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b5fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d008      	beq.n	800b614 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b608:	b29b      	uxth	r3, r3
 800b60a:	3301      	adds	r3, #1
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	b21a      	sxth	r2, r3
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b620:	429a      	cmp	r2, r3
 800b622:	db7b      	blt.n	800b71c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b626:	f004 f821 	bl	800f66c <tcp_rexmit_rto_prepare>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d007      	beq.n	800b640 <tcp_slowtmr+0x21c>
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b634:	2b00      	cmp	r3, #0
 800b636:	d171      	bne.n	800b71c <tcp_slowtmr+0x2f8>
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d06d      	beq.n	800b71c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	7d1b      	ldrb	r3, [r3, #20]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d03a      	beq.n	800b6be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b64e:	2b0c      	cmp	r3, #12
 800b650:	bf28      	it	cs
 800b652:	230c      	movcs	r3, #12
 800b654:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b65c:	10db      	asrs	r3, r3, #3
 800b65e:	b21b      	sxth	r3, r3
 800b660:	461a      	mov	r2, r3
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b668:	4413      	add	r3, r2
 800b66a:	7efa      	ldrb	r2, [r7, #27]
 800b66c:	4910      	ldr	r1, [pc, #64]	; (800b6b0 <tcp_slowtmr+0x28c>)
 800b66e:	5c8a      	ldrb	r2, [r1, r2]
 800b670:	4093      	lsls	r3, r2
 800b672:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b67a:	4293      	cmp	r3, r2
 800b67c:	dc1a      	bgt.n	800b6b4 <tcp_slowtmr+0x290>
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	b21a      	sxth	r2, r3
 800b682:	e019      	b.n	800b6b8 <tcp_slowtmr+0x294>
 800b684:	20006ac4 	.word	0x20006ac4
 800b688:	200003da 	.word	0x200003da
 800b68c:	20006ac0 	.word	0x20006ac0
 800b690:	08019d04 	.word	0x08019d04
 800b694:	0801a048 	.word	0x0801a048
 800b698:	08019d48 	.word	0x08019d48
 800b69c:	0801a074 	.word	0x0801a074
 800b6a0:	0801a0a0 	.word	0x0801a0a0
 800b6a4:	0801a0d0 	.word	0x0801a0d0
 800b6a8:	0801a104 	.word	0x0801a104
 800b6ac:	0801c078 	.word	0x0801c078
 800b6b0:	0801c068 	.word	0x0801c068
 800b6b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bf28      	it	cs
 800b6d4:	4613      	movcs	r3, r2
 800b6d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b6d8:	8a7b      	ldrh	r3, [r7, #18]
 800b6da:	085b      	lsrs	r3, r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d206      	bcs.n	800b704 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	2200      	movs	r2, #0
 800b712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b718:	f004 f818 	bl	800f74c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71e:	7d1b      	ldrb	r3, [r3, #20]
 800b720:	2b06      	cmp	r3, #6
 800b722:	d111      	bne.n	800b748 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	8b5b      	ldrh	r3, [r3, #26]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00b      	beq.n	800b748 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b730:	4b9d      	ldr	r3, [pc, #628]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b28      	cmp	r3, #40	; 0x28
 800b73c:	d904      	bls.n	800b748 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b742:	3301      	adds	r3, #1
 800b744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	7a5b      	ldrb	r3, [r3, #9]
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d04c      	beq.n	800b7ee <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d003      	beq.n	800b764 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b760:	2b07      	cmp	r3, #7
 800b762:	d144      	bne.n	800b7ee <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b764:	4b90      	ldr	r3, [pc, #576]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b774:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b778:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b77c:	498b      	ldr	r1, [pc, #556]	; (800b9ac <tcp_slowtmr+0x588>)
 800b77e:	fba1 1303 	umull	r1, r3, r1, r3
 800b782:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b784:	429a      	cmp	r2, r3
 800b786:	d90a      	bls.n	800b79e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b78c:	3301      	adds	r3, #1
 800b78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b796:	3301      	adds	r3, #1
 800b798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b79c:	e027      	b.n	800b7ee <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b79e:	4b82      	ldr	r3, [pc, #520]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	4b7e      	ldr	r3, [pc, #504]	; (800b9b0 <tcp_slowtmr+0x58c>)
 800b7b8:	fb03 f300 	mul.w	r3, r3, r0
 800b7bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b7be:	497b      	ldr	r1, [pc, #492]	; (800b9ac <tcp_slowtmr+0x588>)
 800b7c0:	fba1 1303 	umull	r1, r3, r1, r3
 800b7c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d911      	bls.n	800b7ee <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b7ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7cc:	f004 fac2 	bl	800fd54 <tcp_keepalive>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b7d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d107      	bne.n	800b7ee <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d011      	beq.n	800b81a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b7f6:	4b6c      	ldr	r3, [pc, #432]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b806:	4619      	mov	r1, r3
 800b808:	460b      	mov	r3, r1
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	440b      	add	r3, r1
 800b80e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b810:	429a      	cmp	r2, r3
 800b812:	d302      	bcc.n	800b81a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b816:	f000 fddb 	bl	800c3d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	7d1b      	ldrb	r3, [r3, #20]
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d10b      	bne.n	800b83a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b822:	4b61      	ldr	r3, [pc, #388]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b28      	cmp	r3, #40	; 0x28
 800b82e:	d904      	bls.n	800b83a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b834:	3301      	adds	r3, #1
 800b836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	7d1b      	ldrb	r3, [r3, #20]
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d10b      	bne.n	800b85a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b842:	4b59      	ldr	r3, [pc, #356]	; (800b9a8 <tcp_slowtmr+0x584>)
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	2bf0      	cmp	r3, #240	; 0xf0
 800b84e:	d904      	bls.n	800b85a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b854:	3301      	adds	r3, #1
 800b856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d060      	beq.n	800b924 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b868:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b86c:	f000 fbfc 	bl	800c068 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	d010      	beq.n	800b898 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b876:	4b4f      	ldr	r3, [pc, #316]	; (800b9b4 <tcp_slowtmr+0x590>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d106      	bne.n	800b88e <tcp_slowtmr+0x46a>
 800b880:	4b4d      	ldr	r3, [pc, #308]	; (800b9b8 <tcp_slowtmr+0x594>)
 800b882:	f240 526d 	movw	r2, #1389	; 0x56d
 800b886:	494d      	ldr	r1, [pc, #308]	; (800b9bc <tcp_slowtmr+0x598>)
 800b888:	484d      	ldr	r0, [pc, #308]	; (800b9c0 <tcp_slowtmr+0x59c>)
 800b88a:	f009 fff7 	bl	801587c <iprintf>
        prev->next = pcb->next;
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e00f      	b.n	800b8b8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b898:	4b46      	ldr	r3, [pc, #280]	; (800b9b4 <tcp_slowtmr+0x590>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d006      	beq.n	800b8b0 <tcp_slowtmr+0x48c>
 800b8a2:	4b45      	ldr	r3, [pc, #276]	; (800b9b8 <tcp_slowtmr+0x594>)
 800b8a4:	f240 5271 	movw	r2, #1393	; 0x571
 800b8a8:	4946      	ldr	r1, [pc, #280]	; (800b9c4 <tcp_slowtmr+0x5a0>)
 800b8aa:	4845      	ldr	r0, [pc, #276]	; (800b9c0 <tcp_slowtmr+0x59c>)
 800b8ac:	f009 ffe6 	bl	801587c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	4a3f      	ldr	r2, [pc, #252]	; (800b9b4 <tcp_slowtmr+0x590>)
 800b8b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b8b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d013      	beq.n	800b8e8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b8c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d0:	8ad2      	ldrh	r2, [r2, #22]
 800b8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d4:	8b09      	ldrh	r1, [r1, #24]
 800b8d6:	9102      	str	r1, [sp, #8]
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	4622      	mov	r2, r4
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8e4:	f004 f984 	bl	800fbf0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	7d1b      	ldrb	r3, [r3, #20]
 800b8f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b8fe:	6838      	ldr	r0, [r7, #0]
 800b900:	f7ff f9f2 	bl	800ace8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b904:	4b30      	ldr	r3, [pc, #192]	; (800b9c8 <tcp_slowtmr+0x5a4>)
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <tcp_slowtmr+0x4f6>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f06f 010c 	mvn.w	r1, #12
 800b916:	68b8      	ldr	r0, [r7, #8]
 800b918:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b91a:	4b2b      	ldr	r3, [pc, #172]	; (800b9c8 <tcp_slowtmr+0x5a4>)
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d037      	beq.n	800b992 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b922:	e590      	b.n	800b446 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	7f1b      	ldrb	r3, [r3, #28]
 800b932:	3301      	adds	r3, #1
 800b934:	b2da      	uxtb	r2, r3
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	7f1a      	ldrb	r2, [r3, #28]
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	7f5b      	ldrb	r3, [r3, #29]
 800b942:	429a      	cmp	r2, r3
 800b944:	d325      	bcc.n	800b992 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	2200      	movs	r2, #0
 800b94a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b94c:	4b1e      	ldr	r3, [pc, #120]	; (800b9c8 <tcp_slowtmr+0x5a4>)
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <tcp_slowtmr+0x550>
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b964:	6912      	ldr	r2, [r2, #16]
 800b966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b972:	e002      	b.n	800b97a <tcp_slowtmr+0x556>
 800b974:	2300      	movs	r3, #0
 800b976:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b97a:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <tcp_slowtmr+0x5a4>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d000      	beq.n	800b984 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b982:	e560      	b.n	800b446 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b984:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98e:	f003 fb7b 	bl	800f088 <tcp_output>
  while (pcb != NULL) {
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	2b00      	cmp	r3, #0
 800b996:	f47f ad5c 	bne.w	800b452 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b99e:	4b0b      	ldr	r3, [pc, #44]	; (800b9cc <tcp_slowtmr+0x5a8>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b9a4:	e067      	b.n	800ba76 <tcp_slowtmr+0x652>
 800b9a6:	bf00      	nop
 800b9a8:	20006ac4 	.word	0x20006ac4
 800b9ac:	10624dd3 	.word	0x10624dd3
 800b9b0:	000124f8 	.word	0x000124f8
 800b9b4:	20006ac0 	.word	0x20006ac0
 800b9b8:	08019d04 	.word	0x08019d04
 800b9bc:	0801a13c 	.word	0x0801a13c
 800b9c0:	08019d48 	.word	0x08019d48
 800b9c4:	0801a168 	.word	0x0801a168
 800b9c8:	20006abc 	.word	0x20006abc
 800b9cc:	20006ad0 	.word	0x20006ad0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	7d1b      	ldrb	r3, [r3, #20]
 800b9d4:	2b0a      	cmp	r3, #10
 800b9d6:	d006      	beq.n	800b9e6 <tcp_slowtmr+0x5c2>
 800b9d8:	4b2b      	ldr	r3, [pc, #172]	; (800ba88 <tcp_slowtmr+0x664>)
 800b9da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b9de:	492b      	ldr	r1, [pc, #172]	; (800ba8c <tcp_slowtmr+0x668>)
 800b9e0:	482b      	ldr	r0, [pc, #172]	; (800ba90 <tcp_slowtmr+0x66c>)
 800b9e2:	f009 ff4b 	bl	801587c <iprintf>
    pcb_remove = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b9ec:	4b29      	ldr	r3, [pc, #164]	; (800ba94 <tcp_slowtmr+0x670>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	2bf0      	cmp	r3, #240	; 0xf0
 800b9f8:	d904      	bls.n	800ba04 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fe:	3301      	adds	r3, #1
 800ba00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d02f      	beq.n	800ba6c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba0e:	f000 fb2b 	bl	800c068 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d010      	beq.n	800ba3a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ba18:	4b1f      	ldr	r3, [pc, #124]	; (800ba98 <tcp_slowtmr+0x674>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d106      	bne.n	800ba30 <tcp_slowtmr+0x60c>
 800ba22:	4b19      	ldr	r3, [pc, #100]	; (800ba88 <tcp_slowtmr+0x664>)
 800ba24:	f240 52af 	movw	r2, #1455	; 0x5af
 800ba28:	491c      	ldr	r1, [pc, #112]	; (800ba9c <tcp_slowtmr+0x678>)
 800ba2a:	4819      	ldr	r0, [pc, #100]	; (800ba90 <tcp_slowtmr+0x66c>)
 800ba2c:	f009 ff26 	bl	801587c <iprintf>
        prev->next = pcb->next;
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	60da      	str	r2, [r3, #12]
 800ba38:	e00f      	b.n	800ba5a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <tcp_slowtmr+0x674>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d006      	beq.n	800ba52 <tcp_slowtmr+0x62e>
 800ba44:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <tcp_slowtmr+0x664>)
 800ba46:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ba4a:	4915      	ldr	r1, [pc, #84]	; (800baa0 <tcp_slowtmr+0x67c>)
 800ba4c:	4810      	ldr	r0, [pc, #64]	; (800ba90 <tcp_slowtmr+0x66c>)
 800ba4e:	f009 ff15 	bl	801587c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	4a10      	ldr	r2, [pc, #64]	; (800ba98 <tcp_slowtmr+0x674>)
 800ba58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ba5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ba64:	69f8      	ldr	r0, [r7, #28]
 800ba66:	f7ff f93f 	bl	800ace8 <tcp_free>
 800ba6a:	e004      	b.n	800ba76 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1a9      	bne.n	800b9d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	3730      	adds	r7, #48	; 0x30
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bdb0      	pop	{r4, r5, r7, pc}
 800ba86:	bf00      	nop
 800ba88:	08019d04 	.word	0x08019d04
 800ba8c:	0801a194 	.word	0x0801a194
 800ba90:	08019d48 	.word	0x08019d48
 800ba94:	20006ac4 	.word	0x20006ac4
 800ba98:	20006ad0 	.word	0x20006ad0
 800ba9c:	0801a1c4 	.word	0x0801a1c4
 800baa0:	0801a1ec 	.word	0x0801a1ec

0800baa4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800baaa:	4b2d      	ldr	r3, [pc, #180]	; (800bb60 <tcp_fasttmr+0xbc>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	3301      	adds	r3, #1
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	4b2b      	ldr	r3, [pc, #172]	; (800bb60 <tcp_fasttmr+0xbc>)
 800bab4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bab6:	4b2b      	ldr	r3, [pc, #172]	; (800bb64 <tcp_fasttmr+0xc0>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800babc:	e048      	b.n	800bb50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7f9a      	ldrb	r2, [r3, #30]
 800bac2:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <tcp_fasttmr+0xbc>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d03f      	beq.n	800bb4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800baca:	4b25      	ldr	r3, [pc, #148]	; (800bb60 <tcp_fasttmr+0xbc>)
 800bacc:	781a      	ldrb	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	8b5b      	ldrh	r3, [r3, #26]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d010      	beq.n	800bb00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	8b5b      	ldrh	r3, [r3, #26]
 800bae2:	f043 0302 	orr.w	r3, r3, #2
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f003 facb 	bl	800f088 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8b5b      	ldrh	r3, [r3, #26]
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8b5b      	ldrh	r3, [r3, #26]
 800bb04:	f003 0308 	and.w	r3, r3, #8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	8b5b      	ldrh	r3, [r3, #26]
 800bb10:	f023 0308 	bic.w	r3, r3, #8
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fa78 	bl	800b010 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bb2e:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <tcp_fasttmr+0xc4>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f819 	bl	800bb6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <tcp_fasttmr+0xc4>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d000      	beq.n	800bb44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bb42:	e7b8      	b.n	800bab6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	607b      	str	r3, [r7, #4]
 800bb48:	e002      	b.n	800bb50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1b3      	bne.n	800babe <tcp_fasttmr+0x1a>
    }
  }
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	200003da 	.word	0x200003da
 800bb64:	20006ac0 	.word	0x20006ac0
 800bb68:	20006abc 	.word	0x20006abc

0800bb6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bb6c:	b590      	push	{r4, r7, lr}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <tcp_process_refused_data+0x22>
 800bb7a:	4b37      	ldr	r3, [pc, #220]	; (800bc58 <tcp_process_refused_data+0xec>)
 800bb7c:	f240 6209 	movw	r2, #1545	; 0x609
 800bb80:	4936      	ldr	r1, [pc, #216]	; (800bc5c <tcp_process_refused_data+0xf0>)
 800bb82:	4837      	ldr	r0, [pc, #220]	; (800bc60 <tcp_process_refused_data+0xf4>)
 800bb84:	f009 fe7a 	bl	801587c <iprintf>
 800bb88:	f06f 030f 	mvn.w	r3, #15
 800bb8c:	e060      	b.n	800bc50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb92:	7b5b      	ldrb	r3, [r3, #13]
 800bb94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <tcp_process_refused_data+0x58>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6918      	ldr	r0, [r3, #16]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	47a0      	blx	r4
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	e007      	b.n	800bbd4 <tcp_process_refused_data+0x68>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	2000      	movs	r0, #0
 800bbcc:	f000 f8a4 	bl	800bd18 <tcp_recv_null>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d12a      	bne.n	800bc32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	f003 0320 	and.w	r3, r3, #32
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d033      	beq.n	800bc4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbee:	d005      	beq.n	800bbfc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00b      	beq.n	800bc1e <tcp_process_refused_data+0xb2>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6918      	ldr	r0, [r3, #16]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	47a0      	blx	r4
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
 800bc1c:	e001      	b.n	800bc22 <tcp_process_refused_data+0xb6>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc26:	f113 0f0d 	cmn.w	r3, #13
 800bc2a:	d110      	bne.n	800bc4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bc2c:	f06f 030c 	mvn.w	r3, #12
 800bc30:	e00e      	b.n	800bc50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc36:	f113 0f0d 	cmn.w	r3, #13
 800bc3a:	d102      	bne.n	800bc42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bc3c:	f06f 030c 	mvn.w	r3, #12
 800bc40:	e006      	b.n	800bc50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bc48:	f06f 0304 	mvn.w	r3, #4
 800bc4c:	e000      	b.n	800bc50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd90      	pop	{r4, r7, pc}
 800bc58:	08019d04 	.word	0x08019d04
 800bc5c:	0801a214 	.word	0x0801a214
 800bc60:	08019d48 	.word	0x08019d48

0800bc64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bc6c:	e007      	b.n	800bc7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f80a 	bl	800bc8e <tcp_seg_free>
    seg = next;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1f4      	bne.n	800bc6e <tcp_segs_free+0xa>
  }
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00c      	beq.n	800bcb6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fe fd6d 	bl	800a788 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	2003      	movs	r0, #3
 800bcb2:	f7fd ff6f 	bl	8009b94 <memp_free>
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d106      	bne.n	800bcdc <tcp_seg_copy+0x1c>
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <tcp_seg_copy+0x4c>)
 800bcd0:	f240 6282 	movw	r2, #1666	; 0x682
 800bcd4:	490e      	ldr	r1, [pc, #56]	; (800bd10 <tcp_seg_copy+0x50>)
 800bcd6:	480f      	ldr	r0, [pc, #60]	; (800bd14 <tcp_seg_copy+0x54>)
 800bcd8:	f009 fdd0 	bl	801587c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bcdc:	2003      	movs	r0, #3
 800bcde:	f7fd ff0d 	bl	8009afc <memp_malloc>
 800bce2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <tcp_seg_copy+0x2e>
    return NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	e00a      	b.n	800bd04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bcee:	2210      	movs	r2, #16
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f009 f87e 	bl	8014df4 <memcpy>
  pbuf_ref(cseg->p);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fde3 	bl	800a8c8 <pbuf_ref>
  return cseg;
 800bd02:	68fb      	ldr	r3, [r7, #12]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	08019d04 	.word	0x08019d04
 800bd10:	0801a258 	.word	0x0801a258
 800bd14:	08019d48 	.word	0x08019d48

0800bd18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d109      	bne.n	800bd40 <tcp_recv_null+0x28>
 800bd2c:	4b12      	ldr	r3, [pc, #72]	; (800bd78 <tcp_recv_null+0x60>)
 800bd2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd32:	4912      	ldr	r1, [pc, #72]	; (800bd7c <tcp_recv_null+0x64>)
 800bd34:	4812      	ldr	r0, [pc, #72]	; (800bd80 <tcp_recv_null+0x68>)
 800bd36:	f009 fda1 	bl	801587c <iprintf>
 800bd3a:	f06f 030f 	mvn.w	r3, #15
 800bd3e:	e016      	b.n	800bd6e <tcp_recv_null+0x56>

  if (p != NULL) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d009      	beq.n	800bd5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	891b      	ldrh	r3, [r3, #8]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	68b8      	ldr	r0, [r7, #8]
 800bd4e:	f7ff fb19 	bl	800b384 <tcp_recved>
    pbuf_free(p);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7fe fd18 	bl	800a788 <pbuf_free>
 800bd58:	e008      	b.n	800bd6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bd5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d104      	bne.n	800bd6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bd62:	68b8      	ldr	r0, [r7, #8]
 800bd64:	f7ff f9be 	bl	800b0e4 <tcp_close>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	e000      	b.n	800bd6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	08019d04 	.word	0x08019d04
 800bd7c:	0801a274 	.word	0x0801a274
 800bd80:	08019d48 	.word	0x08019d48

0800bd84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db01      	blt.n	800bd9a <tcp_kill_prio+0x16>
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	e000      	b.n	800bd9c <tcp_kill_prio+0x18>
 800bd9a:	237f      	movs	r3, #127	; 0x7f
 800bd9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d034      	beq.n	800be0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdb2:	4b19      	ldr	r3, [pc, #100]	; (800be18 <tcp_kill_prio+0x94>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e01f      	b.n	800bdfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	7d5b      	ldrb	r3, [r3, #21]
 800bdbe:	7afa      	ldrb	r2, [r7, #11]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d80c      	bhi.n	800bdde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bdc8:	7afa      	ldrb	r2, [r7, #11]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d112      	bne.n	800bdf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <tcp_kill_prio+0x98>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d80a      	bhi.n	800bdf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <tcp_kill_prio+0x98>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	7d5b      	ldrb	r3, [r3, #21]
 800bdf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1dc      	bne.n	800bdba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d004      	beq.n	800be10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be06:	6938      	ldr	r0, [r7, #16]
 800be08:	f7ff fa56 	bl	800b2b8 <tcp_abort>
 800be0c:	e000      	b.n	800be10 <tcp_kill_prio+0x8c>
    return;
 800be0e:	bf00      	nop
  }
}
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20006ac0 	.word	0x20006ac0
 800be1c:	20006ac4 	.word	0x20006ac4

0800be20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d009      	beq.n	800be44 <tcp_kill_state+0x24>
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d006      	beq.n	800be44 <tcp_kill_state+0x24>
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <tcp_kill_state+0x80>)
 800be38:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800be3c:	4919      	ldr	r1, [pc, #100]	; (800bea4 <tcp_kill_state+0x84>)
 800be3e:	481a      	ldr	r0, [pc, #104]	; (800bea8 <tcp_kill_state+0x88>)
 800be40:	f009 fd1c 	bl	801587c <iprintf>

  inactivity = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be4c:	4b17      	ldr	r3, [pc, #92]	; (800beac <tcp_kill_state+0x8c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e017      	b.n	800be84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	7d1b      	ldrb	r3, [r3, #20]
 800be58:	79fa      	ldrb	r2, [r7, #7]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d10f      	bne.n	800be7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800be5e:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <tcp_kill_state+0x90>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d807      	bhi.n	800be7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800be6e:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <tcp_kill_state+0x90>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1e4      	bne.n	800be54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800be90:	2100      	movs	r1, #0
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f7ff f952 	bl	800b13c <tcp_abandon>
  }
}
 800be98:	bf00      	nop
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	08019d04 	.word	0x08019d04
 800bea4:	0801a290 	.word	0x0801a290
 800bea8:	08019d48 	.word	0x08019d48
 800beac:	20006ac0 	.word	0x20006ac0
 800beb0:	20006ac4 	.word	0x20006ac4

0800beb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bec2:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <tcp_kill_timewait+0x58>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e012      	b.n	800bef0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800beca:	4b11      	ldr	r3, [pc, #68]	; (800bf10 <tcp_kill_timewait+0x5c>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d807      	bhi.n	800beea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800beda:	4b0d      	ldr	r3, [pc, #52]	; (800bf10 <tcp_kill_timewait+0x5c>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1e9      	bne.n	800beca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800befc:	68b8      	ldr	r0, [r7, #8]
 800befe:	f7ff f9db 	bl	800b2b8 <tcp_abort>
  }
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20006ad0 	.word	0x20006ad0
 800bf10:	20006ac4 	.word	0x20006ac4

0800bf14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bf1a:	4b10      	ldr	r3, [pc, #64]	; (800bf5c <tcp_handle_closepend+0x48>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf20:	e014      	b.n	800bf4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	8b5b      	ldrh	r3, [r3, #26]
 800bf2c:	f003 0308 	and.w	r3, r3, #8
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d009      	beq.n	800bf48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	8b5b      	ldrh	r3, [r3, #26]
 800bf38:	f023 0308 	bic.w	r3, r3, #8
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff f864 	bl	800b010 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e7      	bne.n	800bf22 <tcp_handle_closepend+0xe>
  }
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20006ac0 	.word	0x20006ac0

0800bf60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f7fd fdc6 	bl	8009afc <memp_malloc>
 800bf70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d126      	bne.n	800bfc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bf78:	f7ff ffcc 	bl	800bf14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bf7c:	f7ff ff9a 	bl	800beb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf80:	2001      	movs	r0, #1
 800bf82:	f7fd fdbb 	bl	8009afc <memp_malloc>
 800bf86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d11b      	bne.n	800bfc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bf8e:	2009      	movs	r0, #9
 800bf90:	f7ff ff46 	bl	800be20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf94:	2001      	movs	r0, #1
 800bf96:	f7fd fdb1 	bl	8009afc <memp_malloc>
 800bf9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d111      	bne.n	800bfc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bfa2:	2008      	movs	r0, #8
 800bfa4:	f7ff ff3c 	bl	800be20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	f7fd fda7 	bl	8009afc <memp_malloc>
 800bfae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d107      	bne.n	800bfc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff fee3 	bl	800bd84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	f7fd fd9c 	bl	8009afc <memp_malloc>
 800bfc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d03f      	beq.n	800c04c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bfcc:	229c      	movs	r2, #156	; 0x9c
 800bfce:	2100      	movs	r1, #0
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f008 ff37 	bl	8014e44 <memset>
    pcb->prio = prio;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	79fa      	ldrb	r2, [r7, #7]
 800bfda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800bfe2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	22ff      	movs	r2, #255	; 0xff
 800bffa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c002:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2206      	movs	r2, #6
 800c008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2206      	movs	r2, #6
 800c010:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c018:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <tcp_alloc+0xf8>)
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c02a:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <tcp_alloc+0xfc>)
 800c02c:	781a      	ldrb	r2, [r3, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800c038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a08      	ldr	r2, [pc, #32]	; (800c060 <tcp_alloc+0x100>)
 800c040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4a07      	ldr	r2, [pc, #28]	; (800c064 <tcp_alloc+0x104>)
 800c048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c04c:	68fb      	ldr	r3, [r7, #12]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20006ac4 	.word	0x20006ac4
 800c05c:	200003da 	.word	0x200003da
 800c060:	0800bd19 	.word	0x0800bd19
 800c064:	006ddd00 	.word	0x006ddd00

0800c068 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d107      	bne.n	800c086 <tcp_pcb_purge+0x1e>
 800c076:	4b21      	ldr	r3, [pc, #132]	; (800c0fc <tcp_pcb_purge+0x94>)
 800c078:	f640 0251 	movw	r2, #2129	; 0x851
 800c07c:	4920      	ldr	r1, [pc, #128]	; (800c100 <tcp_pcb_purge+0x98>)
 800c07e:	4821      	ldr	r0, [pc, #132]	; (800c104 <tcp_pcb_purge+0x9c>)
 800c080:	f009 fbfc 	bl	801587c <iprintf>
 800c084:	e037      	b.n	800c0f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7d1b      	ldrb	r3, [r3, #20]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d033      	beq.n	800c0f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c092:	2b0a      	cmp	r3, #10
 800c094:	d02f      	beq.n	800c0f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d02b      	beq.n	800c0f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d007      	beq.n	800c0b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fe fb6c 	bl	800a788 <pbuf_free>
      pcb->refused_data = NULL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f986 	bl	800c3d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff fdc7 	bl	800bc64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff fdc2 	bl	800bc64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	08019d04 	.word	0x08019d04
 800c100:	0801a350 	.word	0x0801a350
 800c104:	08019d48 	.word	0x08019d48

0800c108 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <tcp_pcb_remove+0x1e>
 800c118:	4b3e      	ldr	r3, [pc, #248]	; (800c214 <tcp_pcb_remove+0x10c>)
 800c11a:	f640 0283 	movw	r2, #2179	; 0x883
 800c11e:	493e      	ldr	r1, [pc, #248]	; (800c218 <tcp_pcb_remove+0x110>)
 800c120:	483e      	ldr	r0, [pc, #248]	; (800c21c <tcp_pcb_remove+0x114>)
 800c122:	f009 fbab 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <tcp_pcb_remove+0x32>
 800c12c:	4b39      	ldr	r3, [pc, #228]	; (800c214 <tcp_pcb_remove+0x10c>)
 800c12e:	f640 0284 	movw	r2, #2180	; 0x884
 800c132:	493b      	ldr	r1, [pc, #236]	; (800c220 <tcp_pcb_remove+0x118>)
 800c134:	4839      	ldr	r0, [pc, #228]	; (800c21c <tcp_pcb_remove+0x114>)
 800c136:	f009 fba1 	bl	801587c <iprintf>

  TCP_RMV(pcblist, pcb);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	d105      	bne.n	800c150 <tcp_pcb_remove+0x48>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68da      	ldr	r2, [r3, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e013      	b.n	800c178 <tcp_pcb_remove+0x70>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	e00c      	b.n	800c172 <tcp_pcb_remove+0x6a>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d104      	bne.n	800c16c <tcp_pcb_remove+0x64>
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	68da      	ldr	r2, [r3, #12]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	60da      	str	r2, [r3, #12]
 800c16a:	e005      	b.n	800c178 <tcp_pcb_remove+0x70>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1ef      	bne.n	800c158 <tcp_pcb_remove+0x50>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	2200      	movs	r2, #0
 800c17c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c17e:	6838      	ldr	r0, [r7, #0]
 800c180:	f7ff ff72 	bl	800c068 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	7d1b      	ldrb	r3, [r3, #20]
 800c188:	2b0a      	cmp	r3, #10
 800c18a:	d013      	beq.n	800c1b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c190:	2b01      	cmp	r3, #1
 800c192:	d00f      	beq.n	800c1b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	8b5b      	ldrh	r3, [r3, #26]
 800c198:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	8b5b      	ldrh	r3, [r3, #26]
 800c1a4:	f043 0302 	orr.w	r3, r3, #2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c1ae:	6838      	ldr	r0, [r7, #0]
 800c1b0:	f002 ff6a 	bl	800f088 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	7d1b      	ldrb	r3, [r3, #20]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d020      	beq.n	800c1fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d006      	beq.n	800c1d2 <tcp_pcb_remove+0xca>
 800c1c4:	4b13      	ldr	r3, [pc, #76]	; (800c214 <tcp_pcb_remove+0x10c>)
 800c1c6:	f640 0293 	movw	r2, #2195	; 0x893
 800c1ca:	4916      	ldr	r1, [pc, #88]	; (800c224 <tcp_pcb_remove+0x11c>)
 800c1cc:	4813      	ldr	r0, [pc, #76]	; (800c21c <tcp_pcb_remove+0x114>)
 800c1ce:	f009 fb55 	bl	801587c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d006      	beq.n	800c1e8 <tcp_pcb_remove+0xe0>
 800c1da:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <tcp_pcb_remove+0x10c>)
 800c1dc:	f640 0294 	movw	r2, #2196	; 0x894
 800c1e0:	4911      	ldr	r1, [pc, #68]	; (800c228 <tcp_pcb_remove+0x120>)
 800c1e2:	480e      	ldr	r0, [pc, #56]	; (800c21c <tcp_pcb_remove+0x114>)
 800c1e4:	f009 fb4a 	bl	801587c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d006      	beq.n	800c1fe <tcp_pcb_remove+0xf6>
 800c1f0:	4b08      	ldr	r3, [pc, #32]	; (800c214 <tcp_pcb_remove+0x10c>)
 800c1f2:	f640 0296 	movw	r2, #2198	; 0x896
 800c1f6:	490d      	ldr	r1, [pc, #52]	; (800c22c <tcp_pcb_remove+0x124>)
 800c1f8:	4808      	ldr	r0, [pc, #32]	; (800c21c <tcp_pcb_remove+0x114>)
 800c1fa:	f009 fb3f 	bl	801587c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2200      	movs	r2, #0
 800c202:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	08019d04 	.word	0x08019d04
 800c218:	0801a36c 	.word	0x0801a36c
 800c21c:	08019d48 	.word	0x08019d48
 800c220:	0801a388 	.word	0x0801a388
 800c224:	0801a3a8 	.word	0x0801a3a8
 800c228:	0801a3c0 	.word	0x0801a3c0
 800c22c:	0801a3dc 	.word	0x0801a3dc

0800c230 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d106      	bne.n	800c24c <tcp_next_iss+0x1c>
 800c23e:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <tcp_next_iss+0x38>)
 800c240:	f640 02af 	movw	r2, #2223	; 0x8af
 800c244:	4909      	ldr	r1, [pc, #36]	; (800c26c <tcp_next_iss+0x3c>)
 800c246:	480a      	ldr	r0, [pc, #40]	; (800c270 <tcp_next_iss+0x40>)
 800c248:	f009 fb18 	bl	801587c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c24c:	4b09      	ldr	r3, [pc, #36]	; (800c274 <tcp_next_iss+0x44>)
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	4b09      	ldr	r3, [pc, #36]	; (800c278 <tcp_next_iss+0x48>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4413      	add	r3, r2
 800c256:	4a07      	ldr	r2, [pc, #28]	; (800c274 <tcp_next_iss+0x44>)
 800c258:	6013      	str	r3, [r2, #0]
  return iss;
 800c25a:	4b06      	ldr	r3, [pc, #24]	; (800c274 <tcp_next_iss+0x44>)
 800c25c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	08019d04 	.word	0x08019d04
 800c26c:	0801a3f4 	.word	0x0801a3f4
 800c270:	08019d48 	.word	0x08019d48
 800c274:	20000018 	.word	0x20000018
 800c278:	20006ac4 	.word	0x20006ac4

0800c27c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d106      	bne.n	800c29e <tcp_eff_send_mss_netif+0x22>
 800c290:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <tcp_eff_send_mss_netif+0x68>)
 800c292:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c296:	4914      	ldr	r1, [pc, #80]	; (800c2e8 <tcp_eff_send_mss_netif+0x6c>)
 800c298:	4814      	ldr	r0, [pc, #80]	; (800c2ec <tcp_eff_send_mss_netif+0x70>)
 800c29a:	f009 faef 	bl	801587c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c2a4:	89fb      	ldrh	r3, [r7, #14]
 800c2a6:	e019      	b.n	800c2dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c2ae:	8afb      	ldrh	r3, [r7, #22]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d012      	beq.n	800c2da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c2b4:	2328      	movs	r3, #40	; 0x28
 800c2b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c2b8:	8afa      	ldrh	r2, [r7, #22]
 800c2ba:	8abb      	ldrh	r3, [r7, #20]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d904      	bls.n	800c2ca <tcp_eff_send_mss_netif+0x4e>
 800c2c0:	8afa      	ldrh	r2, [r7, #22]
 800c2c2:	8abb      	ldrh	r3, [r7, #20]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	e000      	b.n	800c2cc <tcp_eff_send_mss_netif+0x50>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c2ce:	8a7a      	ldrh	r2, [r7, #18]
 800c2d0:	89fb      	ldrh	r3, [r7, #14]
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	bf28      	it	cs
 800c2d6:	4613      	movcs	r3, r2
 800c2d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c2da:	89fb      	ldrh	r3, [r7, #14]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08019d04 	.word	0x08019d04
 800c2e8:	0801a410 	.word	0x0801a410
 800c2ec:	08019d48 	.word	0x08019d48

0800c2f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d119      	bne.n	800c338 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c304:	4b10      	ldr	r3, [pc, #64]	; (800c348 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c306:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c30a:	4910      	ldr	r1, [pc, #64]	; (800c34c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c30c:	4810      	ldr	r0, [pc, #64]	; (800c350 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c30e:	f009 fab5 	bl	801587c <iprintf>

  while (pcb != NULL) {
 800c312:	e011      	b.n	800c338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d108      	bne.n	800c332 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7fe ffc6 	bl	800b2b8 <tcp_abort>
      pcb = next;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	e002      	b.n	800c338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1ea      	bne.n	800c314 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c33e:	bf00      	nop
 800c340:	bf00      	nop
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	08019d04 	.word	0x08019d04
 800c34c:	0801a438 	.word	0x0801a438
 800c350:	08019d48 	.word	0x08019d48

0800c354 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d02a      	beq.n	800c3ba <tcp_netif_ip_addr_changed+0x66>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d026      	beq.n	800c3ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c36c:	4b15      	ldr	r3, [pc, #84]	; (800c3c4 <tcp_netif_ip_addr_changed+0x70>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ffbc 	bl	800c2f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c378:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <tcp_netif_ip_addr_changed+0x74>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7ff ffb6 	bl	800c2f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d017      	beq.n	800c3ba <tcp_netif_ip_addr_changed+0x66>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d013      	beq.n	800c3ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c392:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <tcp_netif_ip_addr_changed+0x78>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	e00c      	b.n	800c3b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d103      	bne.n	800c3ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1ef      	bne.n	800c39a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20006ac0 	.word	0x20006ac0
 800c3c8:	20006acc 	.word	0x20006acc
 800c3cc:	20006ac8 	.word	0x20006ac8

0800c3d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fc3d 	bl	800bc64 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c3f8:	b590      	push	{r4, r7, lr}
 800c3fa:	b08d      	sub	sp, #52	; 0x34
 800c3fc:	af04      	add	r7, sp, #16
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d105      	bne.n	800c414 <tcp_input+0x1c>
 800c408:	4b9b      	ldr	r3, [pc, #620]	; (800c678 <tcp_input+0x280>)
 800c40a:	2283      	movs	r2, #131	; 0x83
 800c40c:	499b      	ldr	r1, [pc, #620]	; (800c67c <tcp_input+0x284>)
 800c40e:	489c      	ldr	r0, [pc, #624]	; (800c680 <tcp_input+0x288>)
 800c410:	f009 fa34 	bl	801587c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	4a9a      	ldr	r2, [pc, #616]	; (800c684 <tcp_input+0x28c>)
 800c41a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	895b      	ldrh	r3, [r3, #10]
 800c420:	2b13      	cmp	r3, #19
 800c422:	f240 83c4 	bls.w	800cbae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c426:	4b98      	ldr	r3, [pc, #608]	; (800c688 <tcp_input+0x290>)
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	4a97      	ldr	r2, [pc, #604]	; (800c688 <tcp_input+0x290>)
 800c42c:	6812      	ldr	r2, [r2, #0]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f007 fd49 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 83ba 	bne.w	800cbb2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c43e:	4b92      	ldr	r3, [pc, #584]	; (800c688 <tcp_input+0x290>)
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c446:	2be0      	cmp	r3, #224	; 0xe0
 800c448:	f000 83b3 	beq.w	800cbb2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c44c:	4b8d      	ldr	r3, [pc, #564]	; (800c684 <tcp_input+0x28c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	899b      	ldrh	r3, [r3, #12]
 800c452:	b29b      	uxth	r3, r3
 800c454:	4618      	mov	r0, r3
 800c456:	f7fc fefb 	bl	8009250 <lwip_htons>
 800c45a:	4603      	mov	r3, r0
 800c45c:	0b1b      	lsrs	r3, r3, #12
 800c45e:	b29b      	uxth	r3, r3
 800c460:	b2db      	uxtb	r3, r3
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c466:	7cbb      	ldrb	r3, [r7, #18]
 800c468:	2b13      	cmp	r3, #19
 800c46a:	f240 83a4 	bls.w	800cbb6 <tcp_input+0x7be>
 800c46e:	7cbb      	ldrb	r3, [r7, #18]
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	891b      	ldrh	r3, [r3, #8]
 800c476:	429a      	cmp	r2, r3
 800c478:	f200 839d 	bhi.w	800cbb6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c47c:	7cbb      	ldrb	r3, [r7, #18]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	3b14      	subs	r3, #20
 800c482:	b29a      	uxth	r2, r3
 800c484:	4b81      	ldr	r3, [pc, #516]	; (800c68c <tcp_input+0x294>)
 800c486:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c488:	4b81      	ldr	r3, [pc, #516]	; (800c690 <tcp_input+0x298>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	895a      	ldrh	r2, [r3, #10]
 800c492:	7cbb      	ldrb	r3, [r7, #18]
 800c494:	b29b      	uxth	r3, r3
 800c496:	429a      	cmp	r2, r3
 800c498:	d309      	bcc.n	800c4ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c49a:	4b7c      	ldr	r3, [pc, #496]	; (800c68c <tcp_input+0x294>)
 800c49c:	881a      	ldrh	r2, [r3, #0]
 800c49e:	4b7d      	ldr	r3, [pc, #500]	; (800c694 <tcp_input+0x29c>)
 800c4a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c4a2:	7cbb      	ldrb	r3, [r7, #18]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fe f8e8 	bl	800a67c <pbuf_remove_header>
 800c4ac:	e04e      	b.n	800c54c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d105      	bne.n	800c4c2 <tcp_input+0xca>
 800c4b6:	4b70      	ldr	r3, [pc, #448]	; (800c678 <tcp_input+0x280>)
 800c4b8:	22c2      	movs	r2, #194	; 0xc2
 800c4ba:	4977      	ldr	r1, [pc, #476]	; (800c698 <tcp_input+0x2a0>)
 800c4bc:	4870      	ldr	r0, [pc, #448]	; (800c680 <tcp_input+0x288>)
 800c4be:	f009 f9dd 	bl	801587c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c4c2:	2114      	movs	r1, #20
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7fe f8d9 	bl	800a67c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	895a      	ldrh	r2, [r3, #10]
 800c4ce:	4b71      	ldr	r3, [pc, #452]	; (800c694 <tcp_input+0x29c>)
 800c4d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c4d2:	4b6e      	ldr	r3, [pc, #440]	; (800c68c <tcp_input+0x294>)
 800c4d4:	881a      	ldrh	r2, [r3, #0]
 800c4d6:	4b6f      	ldr	r3, [pc, #444]	; (800c694 <tcp_input+0x29c>)
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c4de:	4b6d      	ldr	r3, [pc, #436]	; (800c694 <tcp_input+0x29c>)
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7fe f8c9 	bl	800a67c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	895b      	ldrh	r3, [r3, #10]
 800c4f0:	8a3a      	ldrh	r2, [r7, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	f200 8361 	bhi.w	800cbba <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	4a64      	ldr	r2, [pc, #400]	; (800c690 <tcp_input+0x298>)
 800c500:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	8a3a      	ldrh	r2, [r7, #16]
 800c508:	4611      	mov	r1, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe f8b6 	bl	800a67c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	891a      	ldrh	r2, [r3, #8]
 800c514:	8a3b      	ldrh	r3, [r7, #16]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	b29a      	uxth	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	895b      	ldrh	r3, [r3, #10]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d005      	beq.n	800c532 <tcp_input+0x13a>
 800c526:	4b54      	ldr	r3, [pc, #336]	; (800c678 <tcp_input+0x280>)
 800c528:	22df      	movs	r2, #223	; 0xdf
 800c52a:	495c      	ldr	r1, [pc, #368]	; (800c69c <tcp_input+0x2a4>)
 800c52c:	4854      	ldr	r0, [pc, #336]	; (800c680 <tcp_input+0x288>)
 800c52e:	f009 f9a5 	bl	801587c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	891a      	ldrh	r2, [r3, #8]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	891b      	ldrh	r3, [r3, #8]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d005      	beq.n	800c54c <tcp_input+0x154>
 800c540:	4b4d      	ldr	r3, [pc, #308]	; (800c678 <tcp_input+0x280>)
 800c542:	22e0      	movs	r2, #224	; 0xe0
 800c544:	4956      	ldr	r1, [pc, #344]	; (800c6a0 <tcp_input+0x2a8>)
 800c546:	484e      	ldr	r0, [pc, #312]	; (800c680 <tcp_input+0x288>)
 800c548:	f009 f998 	bl	801587c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c54c:	4b4d      	ldr	r3, [pc, #308]	; (800c684 <tcp_input+0x28c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	4a4b      	ldr	r2, [pc, #300]	; (800c684 <tcp_input+0x28c>)
 800c556:	6814      	ldr	r4, [r2, #0]
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fc fe79 	bl	8009250 <lwip_htons>
 800c55e:	4603      	mov	r3, r0
 800c560:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c562:	4b48      	ldr	r3, [pc, #288]	; (800c684 <tcp_input+0x28c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	885b      	ldrh	r3, [r3, #2]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	4a46      	ldr	r2, [pc, #280]	; (800c684 <tcp_input+0x28c>)
 800c56c:	6814      	ldr	r4, [r2, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fc fe6e 	bl	8009250 <lwip_htons>
 800c574:	4603      	mov	r3, r0
 800c576:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c578:	4b42      	ldr	r3, [pc, #264]	; (800c684 <tcp_input+0x28c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	4a41      	ldr	r2, [pc, #260]	; (800c684 <tcp_input+0x28c>)
 800c580:	6814      	ldr	r4, [r2, #0]
 800c582:	4618      	mov	r0, r3
 800c584:	f7fc fe79 	bl	800927a <lwip_htonl>
 800c588:	4603      	mov	r3, r0
 800c58a:	6063      	str	r3, [r4, #4]
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	4a45      	ldr	r2, [pc, #276]	; (800c6a4 <tcp_input+0x2ac>)
 800c590:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c592:	4b3c      	ldr	r3, [pc, #240]	; (800c684 <tcp_input+0x28c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	4a3a      	ldr	r2, [pc, #232]	; (800c684 <tcp_input+0x28c>)
 800c59a:	6814      	ldr	r4, [r2, #0]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fc fe6c 	bl	800927a <lwip_htonl>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	68a3      	ldr	r3, [r4, #8]
 800c5a8:	4a3f      	ldr	r2, [pc, #252]	; (800c6a8 <tcp_input+0x2b0>)
 800c5aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c5ac:	4b35      	ldr	r3, [pc, #212]	; (800c684 <tcp_input+0x28c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	89db      	ldrh	r3, [r3, #14]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	4a33      	ldr	r2, [pc, #204]	; (800c684 <tcp_input+0x28c>)
 800c5b6:	6814      	ldr	r4, [r2, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fc fe49 	bl	8009250 <lwip_htons>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c5c2:	4b30      	ldr	r3, [pc, #192]	; (800c684 <tcp_input+0x28c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	899b      	ldrh	r3, [r3, #12]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fc fe40 	bl	8009250 <lwip_htons>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b34      	ldr	r3, [pc, #208]	; (800c6ac <tcp_input+0x2b4>)
 800c5dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	891a      	ldrh	r2, [r3, #8]
 800c5e2:	4b33      	ldr	r3, [pc, #204]	; (800c6b0 <tcp_input+0x2b8>)
 800c5e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c5e6:	4b31      	ldr	r3, [pc, #196]	; (800c6ac <tcp_input+0x2b4>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 0303 	and.w	r3, r3, #3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00c      	beq.n	800c60c <tcp_input+0x214>
    tcplen++;
 800c5f2:	4b2f      	ldr	r3, [pc, #188]	; (800c6b0 <tcp_input+0x2b8>)
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	4b2d      	ldr	r3, [pc, #180]	; (800c6b0 <tcp_input+0x2b8>)
 800c5fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	891a      	ldrh	r2, [r3, #8]
 800c602:	4b2b      	ldr	r3, [pc, #172]	; (800c6b0 <tcp_input+0x2b8>)
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	f200 82d9 	bhi.w	800cbbe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c610:	4b28      	ldr	r3, [pc, #160]	; (800c6b4 <tcp_input+0x2bc>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	e09d      	b.n	800c754 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	7d1b      	ldrb	r3, [r3, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d105      	bne.n	800c62c <tcp_input+0x234>
 800c620:	4b15      	ldr	r3, [pc, #84]	; (800c678 <tcp_input+0x280>)
 800c622:	22fb      	movs	r2, #251	; 0xfb
 800c624:	4924      	ldr	r1, [pc, #144]	; (800c6b8 <tcp_input+0x2c0>)
 800c626:	4816      	ldr	r0, [pc, #88]	; (800c680 <tcp_input+0x288>)
 800c628:	f009 f928 	bl	801587c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b0a      	cmp	r3, #10
 800c632:	d105      	bne.n	800c640 <tcp_input+0x248>
 800c634:	4b10      	ldr	r3, [pc, #64]	; (800c678 <tcp_input+0x280>)
 800c636:	22fc      	movs	r2, #252	; 0xfc
 800c638:	4920      	ldr	r1, [pc, #128]	; (800c6bc <tcp_input+0x2c4>)
 800c63a:	4811      	ldr	r0, [pc, #68]	; (800c680 <tcp_input+0x288>)
 800c63c:	f009 f91e 	bl	801587c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	7d1b      	ldrb	r3, [r3, #20]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d105      	bne.n	800c654 <tcp_input+0x25c>
 800c648:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <tcp_input+0x280>)
 800c64a:	22fd      	movs	r2, #253	; 0xfd
 800c64c:	491c      	ldr	r1, [pc, #112]	; (800c6c0 <tcp_input+0x2c8>)
 800c64e:	480c      	ldr	r0, [pc, #48]	; (800c680 <tcp_input+0x288>)
 800c650:	f009 f914 	bl	801587c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	7a1b      	ldrb	r3, [r3, #8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d033      	beq.n	800c6c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	7a1a      	ldrb	r2, [r3, #8]
 800c660:	4b09      	ldr	r3, [pc, #36]	; (800c688 <tcp_input+0x290>)
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c668:	3301      	adds	r3, #1
 800c66a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d029      	beq.n	800c6c4 <tcp_input+0x2cc>
      prev = pcb;
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	61bb      	str	r3, [r7, #24]
      continue;
 800c674:	e06b      	b.n	800c74e <tcp_input+0x356>
 800c676:	bf00      	nop
 800c678:	0801a46c 	.word	0x0801a46c
 800c67c:	0801a4a0 	.word	0x0801a4a0
 800c680:	0801a4b8 	.word	0x0801a4b8
 800c684:	200003ec 	.word	0x200003ec
 800c688:	2000399c 	.word	0x2000399c
 800c68c:	200003f0 	.word	0x200003f0
 800c690:	200003f4 	.word	0x200003f4
 800c694:	200003f2 	.word	0x200003f2
 800c698:	0801a4e0 	.word	0x0801a4e0
 800c69c:	0801a4f0 	.word	0x0801a4f0
 800c6a0:	0801a4fc 	.word	0x0801a4fc
 800c6a4:	200003fc 	.word	0x200003fc
 800c6a8:	20000400 	.word	0x20000400
 800c6ac:	20000408 	.word	0x20000408
 800c6b0:	20000406 	.word	0x20000406
 800c6b4:	20006ac0 	.word	0x20006ac0
 800c6b8:	0801a51c 	.word	0x0801a51c
 800c6bc:	0801a544 	.word	0x0801a544
 800c6c0:	0801a570 	.word	0x0801a570
    }

    if (pcb->remote_port == tcphdr->src &&
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	8b1a      	ldrh	r2, [r3, #24]
 800c6c8:	4b94      	ldr	r3, [pc, #592]	; (800c91c <tcp_input+0x524>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d13a      	bne.n	800c74a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	8ada      	ldrh	r2, [r3, #22]
 800c6d8:	4b90      	ldr	r3, [pc, #576]	; (800c91c <tcp_input+0x524>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	885b      	ldrh	r3, [r3, #2]
 800c6de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d132      	bne.n	800c74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	4b8d      	ldr	r3, [pc, #564]	; (800c920 <tcp_input+0x528>)
 800c6ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d12c      	bne.n	800c74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	4b8a      	ldr	r3, [pc, #552]	; (800c920 <tcp_input+0x528>)
 800c6f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d126      	bne.n	800c74a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	69fa      	ldr	r2, [r7, #28]
 800c702:	429a      	cmp	r2, r3
 800c704:	d106      	bne.n	800c714 <tcp_input+0x31c>
 800c706:	4b87      	ldr	r3, [pc, #540]	; (800c924 <tcp_input+0x52c>)
 800c708:	f240 120d 	movw	r2, #269	; 0x10d
 800c70c:	4986      	ldr	r1, [pc, #536]	; (800c928 <tcp_input+0x530>)
 800c70e:	4887      	ldr	r0, [pc, #540]	; (800c92c <tcp_input+0x534>)
 800c710:	f009 f8b4 	bl	801587c <iprintf>
      if (prev != NULL) {
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <tcp_input+0x338>
        prev->next = pcb->next;
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	68da      	ldr	r2, [r3, #12]
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c722:	4b83      	ldr	r3, [pc, #524]	; (800c930 <tcp_input+0x538>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c72a:	4a81      	ldr	r2, [pc, #516]	; (800c930 <tcp_input+0x538>)
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	69fa      	ldr	r2, [r7, #28]
 800c736:	429a      	cmp	r2, r3
 800c738:	d111      	bne.n	800c75e <tcp_input+0x366>
 800c73a:	4b7a      	ldr	r3, [pc, #488]	; (800c924 <tcp_input+0x52c>)
 800c73c:	f240 1215 	movw	r2, #277	; 0x115
 800c740:	497c      	ldr	r1, [pc, #496]	; (800c934 <tcp_input+0x53c>)
 800c742:	487a      	ldr	r0, [pc, #488]	; (800c92c <tcp_input+0x534>)
 800c744:	f009 f89a 	bl	801587c <iprintf>
      break;
 800c748:	e009      	b.n	800c75e <tcp_input+0x366>
    }
    prev = pcb;
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	61fb      	str	r3, [r7, #28]
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f47f af5e 	bne.w	800c618 <tcp_input+0x220>
 800c75c:	e000      	b.n	800c760 <tcp_input+0x368>
      break;
 800c75e:	bf00      	nop
  }

  if (pcb == NULL) {
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f040 8095 	bne.w	800c892 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c768:	4b73      	ldr	r3, [pc, #460]	; (800c938 <tcp_input+0x540>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	e03f      	b.n	800c7f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	7d1b      	ldrb	r3, [r3, #20]
 800c774:	2b0a      	cmp	r3, #10
 800c776:	d006      	beq.n	800c786 <tcp_input+0x38e>
 800c778:	4b6a      	ldr	r3, [pc, #424]	; (800c924 <tcp_input+0x52c>)
 800c77a:	f240 121f 	movw	r2, #287	; 0x11f
 800c77e:	496f      	ldr	r1, [pc, #444]	; (800c93c <tcp_input+0x544>)
 800c780:	486a      	ldr	r0, [pc, #424]	; (800c92c <tcp_input+0x534>)
 800c782:	f009 f87b 	bl	801587c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	7a1b      	ldrb	r3, [r3, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	7a1a      	ldrb	r2, [r3, #8]
 800c792:	4b63      	ldr	r3, [pc, #396]	; (800c920 <tcp_input+0x528>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c79a:	3301      	adds	r3, #1
 800c79c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d122      	bne.n	800c7e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	8b1a      	ldrh	r2, [r3, #24]
 800c7a6:	4b5d      	ldr	r3, [pc, #372]	; (800c91c <tcp_input+0x524>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d11b      	bne.n	800c7ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	8ada      	ldrh	r2, [r3, #22]
 800c7b6:	4b59      	ldr	r3, [pc, #356]	; (800c91c <tcp_input+0x524>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	885b      	ldrh	r3, [r3, #2]
 800c7bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d113      	bne.n	800c7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b56      	ldr	r3, [pc, #344]	; (800c920 <tcp_input+0x528>)
 800c7c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d10d      	bne.n	800c7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b53      	ldr	r3, [pc, #332]	; (800c920 <tcp_input+0x528>)
 800c7d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d107      	bne.n	800c7ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c7da:	69f8      	ldr	r0, [r7, #28]
 800c7dc:	f000 fb54 	bl	800ce88 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7fd ffd1 	bl	800a788 <pbuf_free>
        return;
 800c7e6:	e1f0      	b.n	800cbca <tcp_input+0x7d2>
        continue;
 800c7e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1bc      	bne.n	800c770 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c7fa:	4b51      	ldr	r3, [pc, #324]	; (800c940 <tcp_input+0x548>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e02a      	b.n	800c858 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	7a1b      	ldrb	r3, [r3, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00c      	beq.n	800c824 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	7a1a      	ldrb	r2, [r3, #8]
 800c80e:	4b44      	ldr	r3, [pc, #272]	; (800c920 <tcp_input+0x528>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c816:	3301      	adds	r3, #1
 800c818:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d002      	beq.n	800c824 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	61bb      	str	r3, [r7, #24]
        continue;
 800c822:	e016      	b.n	800c852 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	8ada      	ldrh	r2, [r3, #22]
 800c828:	4b3c      	ldr	r3, [pc, #240]	; (800c91c <tcp_input+0x524>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	429a      	cmp	r2, r3
 800c832:	d10c      	bne.n	800c84e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	4b39      	ldr	r3, [pc, #228]	; (800c920 <tcp_input+0x528>)
 800c83a:	695b      	ldr	r3, [r3, #20]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d00f      	beq.n	800c860 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00d      	beq.n	800c862 <tcp_input+0x46a>
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1d1      	bne.n	800c802 <tcp_input+0x40a>
 800c85e:	e000      	b.n	800c862 <tcp_input+0x46a>
            break;
 800c860:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d014      	beq.n	800c892 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c876:	4b32      	ldr	r3, [pc, #200]	; (800c940 <tcp_input+0x548>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c87e:	4a30      	ldr	r2, [pc, #192]	; (800c940 <tcp_input+0x548>)
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c884:	6978      	ldr	r0, [r7, #20]
 800c886:	f000 fa01 	bl	800cc8c <tcp_listen_input>
      }
      pbuf_free(p);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fd ff7c 	bl	800a788 <pbuf_free>
      return;
 800c890:	e19b      	b.n	800cbca <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8160 	beq.w	800cb5a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c89a:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <tcp_input+0x54c>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	891a      	ldrh	r2, [r3, #8]
 800c8a4:	4b27      	ldr	r3, [pc, #156]	; (800c944 <tcp_input+0x54c>)
 800c8a6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c8a8:	4a26      	ldr	r2, [pc, #152]	; (800c944 <tcp_input+0x54c>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c8ae:	4b1b      	ldr	r3, [pc, #108]	; (800c91c <tcp_input+0x524>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a24      	ldr	r2, [pc, #144]	; (800c944 <tcp_input+0x54c>)
 800c8b4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c8b6:	4b24      	ldr	r3, [pc, #144]	; (800c948 <tcp_input+0x550>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c8bc:	4b23      	ldr	r3, [pc, #140]	; (800c94c <tcp_input+0x554>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c8c2:	4b23      	ldr	r3, [pc, #140]	; (800c950 <tcp_input+0x558>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c8c8:	4b22      	ldr	r3, [pc, #136]	; (800c954 <tcp_input+0x55c>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	f003 0308 	and.w	r3, r3, #8
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7b5b      	ldrb	r3, [r3, #13]
 800c8d8:	f043 0301 	orr.w	r3, r3, #1
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d038      	beq.n	800c95c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c8ea:	69f8      	ldr	r0, [r7, #28]
 800c8ec:	f7ff f93e 	bl	800bb6c <tcp_process_refused_data>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	f113 0f0d 	cmn.w	r3, #13
 800c8f6:	d007      	beq.n	800c908 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d02d      	beq.n	800c95c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c900:	4b15      	ldr	r3, [pc, #84]	; (800c958 <tcp_input+0x560>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d029      	beq.n	800c95c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 8104 	bne.w	800cb1a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c912:	69f8      	ldr	r0, [r7, #28]
 800c914:	f003 f9bc 	bl	800fc90 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c918:	e0ff      	b.n	800cb1a <tcp_input+0x722>
 800c91a:	bf00      	nop
 800c91c:	200003ec 	.word	0x200003ec
 800c920:	2000399c 	.word	0x2000399c
 800c924:	0801a46c 	.word	0x0801a46c
 800c928:	0801a598 	.word	0x0801a598
 800c92c:	0801a4b8 	.word	0x0801a4b8
 800c930:	20006ac0 	.word	0x20006ac0
 800c934:	0801a5c4 	.word	0x0801a5c4
 800c938:	20006ad0 	.word	0x20006ad0
 800c93c:	0801a5f0 	.word	0x0801a5f0
 800c940:	20006ac8 	.word	0x20006ac8
 800c944:	200003dc 	.word	0x200003dc
 800c948:	2000040c 	.word	0x2000040c
 800c94c:	20000409 	.word	0x20000409
 800c950:	20000404 	.word	0x20000404
 800c954:	20000408 	.word	0x20000408
 800c958:	20000406 	.word	0x20000406
      }
    }
    tcp_input_pcb = pcb;
 800c95c:	4a9c      	ldr	r2, [pc, #624]	; (800cbd0 <tcp_input+0x7d8>)
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c962:	69f8      	ldr	r0, [r7, #28]
 800c964:	f000 fb0a 	bl	800cf7c <tcp_process>
 800c968:	4603      	mov	r3, r0
 800c96a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c96c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c970:	f113 0f0d 	cmn.w	r3, #13
 800c974:	f000 80d3 	beq.w	800cb1e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c978:	4b96      	ldr	r3, [pc, #600]	; (800cbd4 <tcp_input+0x7dc>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b00      	cmp	r3, #0
 800c982:	d015      	beq.n	800c9b0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d008      	beq.n	800c9a0 <tcp_input+0x5a8>
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	6912      	ldr	r2, [r2, #16]
 800c998:	f06f 010d 	mvn.w	r1, #13
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c9a0:	69f9      	ldr	r1, [r7, #28]
 800c9a2:	488d      	ldr	r0, [pc, #564]	; (800cbd8 <tcp_input+0x7e0>)
 800c9a4:	f7ff fbb0 	bl	800c108 <tcp_pcb_remove>
        tcp_free(pcb);
 800c9a8:	69f8      	ldr	r0, [r7, #28]
 800c9aa:	f7fe f99d 	bl	800ace8 <tcp_free>
 800c9ae:	e0c1      	b.n	800cb34 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c9b4:	4b89      	ldr	r3, [pc, #548]	; (800cbdc <tcp_input+0x7e4>)
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01d      	beq.n	800c9f8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c9bc:	4b87      	ldr	r3, [pc, #540]	; (800cbdc <tcp_input+0x7e4>)
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <tcp_input+0x5ea>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	6910      	ldr	r0, [r2, #16]
 800c9d6:	89fa      	ldrh	r2, [r7, #14]
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	4798      	blx	r3
 800c9dc:	4603      	mov	r3, r0
 800c9de:	74fb      	strb	r3, [r7, #19]
 800c9e0:	e001      	b.n	800c9e6 <tcp_input+0x5ee>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9ea:	f113 0f0d 	cmn.w	r3, #13
 800c9ee:	f000 8098 	beq.w	800cb22 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c9f2:	4b7a      	ldr	r3, [pc, #488]	; (800cbdc <tcp_input+0x7e4>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c9f8:	69f8      	ldr	r0, [r7, #28]
 800c9fa:	f000 f907 	bl	800cc0c <tcp_input_delayed_close>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f040 8090 	bne.w	800cb26 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ca06:	4b76      	ldr	r3, [pc, #472]	; (800cbe0 <tcp_input+0x7e8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d041      	beq.n	800ca92 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <tcp_input+0x62c>
 800ca16:	4b73      	ldr	r3, [pc, #460]	; (800cbe4 <tcp_input+0x7ec>)
 800ca18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca1c:	4972      	ldr	r1, [pc, #456]	; (800cbe8 <tcp_input+0x7f0>)
 800ca1e:	4873      	ldr	r0, [pc, #460]	; (800cbec <tcp_input+0x7f4>)
 800ca20:	f008 ff2c 	bl	801587c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	8b5b      	ldrh	r3, [r3, #26]
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d008      	beq.n	800ca42 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ca30:	4b6b      	ldr	r3, [pc, #428]	; (800cbe0 <tcp_input+0x7e8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fd fea7 	bl	800a788 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ca3a:	69f8      	ldr	r0, [r7, #28]
 800ca3c:	f7fe fc3c 	bl	800b2b8 <tcp_abort>
            goto aborted;
 800ca40:	e078      	b.n	800cb34 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00c      	beq.n	800ca66 <tcp_input+0x66e>
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	6918      	ldr	r0, [r3, #16]
 800ca56:	4b62      	ldr	r3, [pc, #392]	; (800cbe0 <tcp_input+0x7e8>)
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	69f9      	ldr	r1, [r7, #28]
 800ca5e:	47a0      	blx	r4
 800ca60:	4603      	mov	r3, r0
 800ca62:	74fb      	strb	r3, [r7, #19]
 800ca64:	e008      	b.n	800ca78 <tcp_input+0x680>
 800ca66:	4b5e      	ldr	r3, [pc, #376]	; (800cbe0 <tcp_input+0x7e8>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	69f9      	ldr	r1, [r7, #28]
 800ca6e:	2000      	movs	r0, #0
 800ca70:	f7ff f952 	bl	800bd18 <tcp_recv_null>
 800ca74:	4603      	mov	r3, r0
 800ca76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ca78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca7c:	f113 0f0d 	cmn.w	r3, #13
 800ca80:	d053      	beq.n	800cb2a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ca82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ca8a:	4b55      	ldr	r3, [pc, #340]	; (800cbe0 <tcp_input+0x7e8>)
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ca92:	4b50      	ldr	r3, [pc, #320]	; (800cbd4 <tcp_input+0x7dc>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d030      	beq.n	800cb00 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d009      	beq.n	800caba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caaa:	7b5a      	ldrb	r2, [r3, #13]
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cab0:	f042 0220 	orr.w	r2, r2, #32
 800cab4:	b2d2      	uxtb	r2, r2
 800cab6:	735a      	strb	r2, [r3, #13]
 800cab8:	e022      	b.n	800cb00 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac2:	d005      	beq.n	800cad0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac8:	3301      	adds	r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00b      	beq.n	800caf2 <tcp_input+0x6fa>
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	6918      	ldr	r0, [r3, #16]
 800cae4:	2300      	movs	r3, #0
 800cae6:	2200      	movs	r2, #0
 800cae8:	69f9      	ldr	r1, [r7, #28]
 800caea:	47a0      	blx	r4
 800caec:	4603      	mov	r3, r0
 800caee:	74fb      	strb	r3, [r7, #19]
 800caf0:	e001      	b.n	800caf6 <tcp_input+0x6fe>
 800caf2:	2300      	movs	r3, #0
 800caf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800caf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cafa:	f113 0f0d 	cmn.w	r3, #13
 800cafe:	d016      	beq.n	800cb2e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cb00:	4b33      	ldr	r3, [pc, #204]	; (800cbd0 <tcp_input+0x7d8>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cb06:	69f8      	ldr	r0, [r7, #28]
 800cb08:	f000 f880 	bl	800cc0c <tcp_input_delayed_close>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10f      	bne.n	800cb32 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cb12:	69f8      	ldr	r0, [r7, #28]
 800cb14:	f002 fab8 	bl	800f088 <tcp_output>
 800cb18:	e00c      	b.n	800cb34 <tcp_input+0x73c>
        goto aborted;
 800cb1a:	bf00      	nop
 800cb1c:	e00a      	b.n	800cb34 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cb1e:	bf00      	nop
 800cb20:	e008      	b.n	800cb34 <tcp_input+0x73c>
              goto aborted;
 800cb22:	bf00      	nop
 800cb24:	e006      	b.n	800cb34 <tcp_input+0x73c>
          goto aborted;
 800cb26:	bf00      	nop
 800cb28:	e004      	b.n	800cb34 <tcp_input+0x73c>
            goto aborted;
 800cb2a:	bf00      	nop
 800cb2c:	e002      	b.n	800cb34 <tcp_input+0x73c>
              goto aborted;
 800cb2e:	bf00      	nop
 800cb30:	e000      	b.n	800cb34 <tcp_input+0x73c>
          goto aborted;
 800cb32:	bf00      	nop
    tcp_input_pcb = NULL;
 800cb34:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <tcp_input+0x7d8>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cb3a:	4b29      	ldr	r3, [pc, #164]	; (800cbe0 <tcp_input+0x7e8>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cb40:	4b2b      	ldr	r3, [pc, #172]	; (800cbf0 <tcp_input+0x7f8>)
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d03f      	beq.n	800cbc8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800cb48:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <tcp_input+0x7f8>)
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fd fe1b 	bl	800a788 <pbuf_free>
      inseg.p = NULL;
 800cb52:	4b27      	ldr	r3, [pc, #156]	; (800cbf0 <tcp_input+0x7f8>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cb58:	e036      	b.n	800cbc8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cb5a:	4b26      	ldr	r3, [pc, #152]	; (800cbf4 <tcp_input+0x7fc>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	899b      	ldrh	r3, [r3, #12]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fc fb74 	bl	8009250 <lwip_htons>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 0304 	and.w	r3, r3, #4
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d118      	bne.n	800cba6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb74:	4b20      	ldr	r3, [pc, #128]	; (800cbf8 <tcp_input+0x800>)
 800cb76:	6819      	ldr	r1, [r3, #0]
 800cb78:	4b20      	ldr	r3, [pc, #128]	; (800cbfc <tcp_input+0x804>)
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4b20      	ldr	r3, [pc, #128]	; (800cc00 <tcp_input+0x808>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb84:	4b1b      	ldr	r3, [pc, #108]	; (800cbf4 <tcp_input+0x7fc>)
 800cb86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb88:	885b      	ldrh	r3, [r3, #2]
 800cb8a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb8c:	4a19      	ldr	r2, [pc, #100]	; (800cbf4 <tcp_input+0x7fc>)
 800cb8e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb90:	8812      	ldrh	r2, [r2, #0]
 800cb92:	b292      	uxth	r2, r2
 800cb94:	9202      	str	r2, [sp, #8]
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	4b1a      	ldr	r3, [pc, #104]	; (800cc04 <tcp_input+0x80c>)
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <tcp_input+0x810>)
 800cb9e:	4602      	mov	r2, r0
 800cba0:	2000      	movs	r0, #0
 800cba2:	f003 f825 	bl	800fbf0 <tcp_rst>
    pbuf_free(p);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7fd fdee 	bl	800a788 <pbuf_free>
  return;
 800cbac:	e00c      	b.n	800cbc8 <tcp_input+0x7d0>
    goto dropped;
 800cbae:	bf00      	nop
 800cbb0:	e006      	b.n	800cbc0 <tcp_input+0x7c8>
    goto dropped;
 800cbb2:	bf00      	nop
 800cbb4:	e004      	b.n	800cbc0 <tcp_input+0x7c8>
    goto dropped;
 800cbb6:	bf00      	nop
 800cbb8:	e002      	b.n	800cbc0 <tcp_input+0x7c8>
      goto dropped;
 800cbba:	bf00      	nop
 800cbbc:	e000      	b.n	800cbc0 <tcp_input+0x7c8>
      goto dropped;
 800cbbe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7fd fde1 	bl	800a788 <pbuf_free>
 800cbc6:	e000      	b.n	800cbca <tcp_input+0x7d2>
  return;
 800cbc8:	bf00      	nop
}
 800cbca:	3724      	adds	r7, #36	; 0x24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd90      	pop	{r4, r7, pc}
 800cbd0:	20006ad4 	.word	0x20006ad4
 800cbd4:	20000409 	.word	0x20000409
 800cbd8:	20006ac0 	.word	0x20006ac0
 800cbdc:	20000404 	.word	0x20000404
 800cbe0:	2000040c 	.word	0x2000040c
 800cbe4:	0801a46c 	.word	0x0801a46c
 800cbe8:	0801a620 	.word	0x0801a620
 800cbec:	0801a4b8 	.word	0x0801a4b8
 800cbf0:	200003dc 	.word	0x200003dc
 800cbf4:	200003ec 	.word	0x200003ec
 800cbf8:	20000400 	.word	0x20000400
 800cbfc:	20000406 	.word	0x20000406
 800cc00:	200003fc 	.word	0x200003fc
 800cc04:	200039ac 	.word	0x200039ac
 800cc08:	200039b0 	.word	0x200039b0

0800cc0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <tcp_input_delayed_close+0x1c>
 800cc1a:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <tcp_input_delayed_close+0x6c>)
 800cc1c:	f240 225a 	movw	r2, #602	; 0x25a
 800cc20:	4916      	ldr	r1, [pc, #88]	; (800cc7c <tcp_input_delayed_close+0x70>)
 800cc22:	4817      	ldr	r0, [pc, #92]	; (800cc80 <tcp_input_delayed_close+0x74>)
 800cc24:	f008 fe2a 	bl	801587c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cc28:	4b16      	ldr	r3, [pc, #88]	; (800cc84 <tcp_input_delayed_close+0x78>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f003 0310 	and.w	r3, r3, #16
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01c      	beq.n	800cc6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	8b5b      	ldrh	r3, [r3, #26]
 800cc38:	f003 0310 	and.w	r3, r3, #16
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10d      	bne.n	800cc5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d008      	beq.n	800cc5c <tcp_input_delayed_close+0x50>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	6912      	ldr	r2, [r2, #16]
 800cc54:	f06f 010e 	mvn.w	r1, #14
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	480a      	ldr	r0, [pc, #40]	; (800cc88 <tcp_input_delayed_close+0x7c>)
 800cc60:	f7ff fa52 	bl	800c108 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7fe f83f 	bl	800ace8 <tcp_free>
    return 1;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	0801a46c 	.word	0x0801a46c
 800cc7c:	0801a63c 	.word	0x0801a63c
 800cc80:	0801a4b8 	.word	0x0801a4b8
 800cc84:	20000409 	.word	0x20000409
 800cc88:	20006ac0 	.word	0x20006ac0

0800cc8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b08b      	sub	sp, #44	; 0x2c
 800cc90:	af04      	add	r7, sp, #16
 800cc92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cc94:	4b6f      	ldr	r3, [pc, #444]	; (800ce54 <tcp_listen_input+0x1c8>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	f003 0304 	and.w	r3, r3, #4
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f040 80d2 	bne.w	800ce46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <tcp_listen_input+0x2a>
 800cca8:	4b6b      	ldr	r3, [pc, #428]	; (800ce58 <tcp_listen_input+0x1cc>)
 800ccaa:	f240 2281 	movw	r2, #641	; 0x281
 800ccae:	496b      	ldr	r1, [pc, #428]	; (800ce5c <tcp_listen_input+0x1d0>)
 800ccb0:	486b      	ldr	r0, [pc, #428]	; (800ce60 <tcp_listen_input+0x1d4>)
 800ccb2:	f008 fde3 	bl	801587c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ccb6:	4b67      	ldr	r3, [pc, #412]	; (800ce54 <tcp_listen_input+0x1c8>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	f003 0310 	and.w	r3, r3, #16
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d019      	beq.n	800ccf6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccc2:	4b68      	ldr	r3, [pc, #416]	; (800ce64 <tcp_listen_input+0x1d8>)
 800ccc4:	6819      	ldr	r1, [r3, #0]
 800ccc6:	4b68      	ldr	r3, [pc, #416]	; (800ce68 <tcp_listen_input+0x1dc>)
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	4b67      	ldr	r3, [pc, #412]	; (800ce6c <tcp_listen_input+0x1e0>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccd2:	4b67      	ldr	r3, [pc, #412]	; (800ce70 <tcp_listen_input+0x1e4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccd6:	885b      	ldrh	r3, [r3, #2]
 800ccd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccda:	4a65      	ldr	r2, [pc, #404]	; (800ce70 <tcp_listen_input+0x1e4>)
 800ccdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccde:	8812      	ldrh	r2, [r2, #0]
 800cce0:	b292      	uxth	r2, r2
 800cce2:	9202      	str	r2, [sp, #8]
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	4b63      	ldr	r3, [pc, #396]	; (800ce74 <tcp_listen_input+0x1e8>)
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	4b63      	ldr	r3, [pc, #396]	; (800ce78 <tcp_listen_input+0x1ec>)
 800ccec:	4602      	mov	r2, r0
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f002 ff7e 	bl	800fbf0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ccf4:	e0a9      	b.n	800ce4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ccf6:	4b57      	ldr	r3, [pc, #348]	; (800ce54 <tcp_listen_input+0x1c8>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	f003 0302 	and.w	r3, r3, #2
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 80a3 	beq.w	800ce4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7d5b      	ldrb	r3, [r3, #21]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff f929 	bl	800bf60 <tcp_alloc>
 800cd0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d111      	bne.n	800cd3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <tcp_listen_input+0xa8>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	6910      	ldr	r0, [r2, #16]
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4798      	blx	r3
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73bb      	strb	r3, [r7, #14]
      return;
 800cd32:	e08b      	b.n	800ce4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd34:	23f0      	movs	r3, #240	; 0xf0
 800cd36:	73bb      	strb	r3, [r7, #14]
      return;
 800cd38:	e088      	b.n	800ce4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cd3a:	4b50      	ldr	r3, [pc, #320]	; (800ce7c <tcp_listen_input+0x1f0>)
 800cd3c:	695a      	ldr	r2, [r3, #20]
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cd42:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <tcp_listen_input+0x1f0>)
 800cd44:	691a      	ldr	r2, [r3, #16]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8ada      	ldrh	r2, [r3, #22]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cd52:	4b47      	ldr	r3, [pc, #284]	; (800ce70 <tcp_listen_input+0x1e4>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2203      	movs	r2, #3
 800cd62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cd64:	4b41      	ldr	r3, [pc, #260]	; (800ce6c <tcp_listen_input+0x1e0>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cd76:	6978      	ldr	r0, [r7, #20]
 800cd78:	f7ff fa5a 	bl	800c230 <tcp_next_iss>
 800cd7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cd96:	4b35      	ldr	r3, [pc, #212]	; (800ce6c <tcp_listen_input+0x1e0>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	1e5a      	subs	r2, r3, #1
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	691a      	ldr	r2, [r3, #16]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7a5b      	ldrb	r3, [r3, #9]
 800cdb2:	f003 030c 	and.w	r3, r3, #12
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7a1a      	ldrb	r2, [r3, #8]
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cdc4:	4b2e      	ldr	r3, [pc, #184]	; (800ce80 <tcp_listen_input+0x1f4>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	60da      	str	r2, [r3, #12]
 800cdcc:	4a2c      	ldr	r2, [pc, #176]	; (800ce80 <tcp_listen_input+0x1f4>)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	f003 f8cd 	bl	800ff70 <tcp_timer_needed>
 800cdd6:	4b2b      	ldr	r3, [pc, #172]	; (800ce84 <tcp_listen_input+0x1f8>)
 800cdd8:	2201      	movs	r2, #1
 800cdda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cddc:	6978      	ldr	r0, [r7, #20]
 800cdde:	f001 fd8d 	bl	800e8fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cde2:	4b23      	ldr	r3, [pc, #140]	; (800ce70 <tcp_listen_input+0x1e4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	89db      	ldrh	r3, [r3, #14]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f006 fdab 	bl	8013960 <ip4_route>
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	3304      	adds	r3, #4
 800ce10:	461a      	mov	r2, r3
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7ff fa32 	bl	800c27c <tcp_eff_send_mss_netif>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce20:	2112      	movs	r1, #18
 800ce22:	6978      	ldr	r0, [r7, #20]
 800ce24:	f002 f842 	bl	800eeac <tcp_enqueue_flags>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ce2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d004      	beq.n	800ce3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ce34:	2100      	movs	r1, #0
 800ce36:	6978      	ldr	r0, [r7, #20]
 800ce38:	f7fe f980 	bl	800b13c <tcp_abandon>
      return;
 800ce3c:	e006      	b.n	800ce4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ce3e:	6978      	ldr	r0, [r7, #20]
 800ce40:	f002 f922 	bl	800f088 <tcp_output>
  return;
 800ce44:	e001      	b.n	800ce4a <tcp_listen_input+0x1be>
    return;
 800ce46:	bf00      	nop
 800ce48:	e000      	b.n	800ce4c <tcp_listen_input+0x1c0>
  return;
 800ce4a:	bf00      	nop
}
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd90      	pop	{r4, r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20000408 	.word	0x20000408
 800ce58:	0801a46c 	.word	0x0801a46c
 800ce5c:	0801a664 	.word	0x0801a664
 800ce60:	0801a4b8 	.word	0x0801a4b8
 800ce64:	20000400 	.word	0x20000400
 800ce68:	20000406 	.word	0x20000406
 800ce6c:	200003fc 	.word	0x200003fc
 800ce70:	200003ec 	.word	0x200003ec
 800ce74:	200039ac 	.word	0x200039ac
 800ce78:	200039b0 	.word	0x200039b0
 800ce7c:	2000399c 	.word	0x2000399c
 800ce80:	20006ac0 	.word	0x20006ac0
 800ce84:	20006abc 	.word	0x20006abc

0800ce88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af04      	add	r7, sp, #16
 800ce8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ce90:	4b2f      	ldr	r3, [pc, #188]	; (800cf50 <tcp_timewait_input+0xc8>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d153      	bne.n	800cf44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <tcp_timewait_input+0x28>
 800cea2:	4b2c      	ldr	r3, [pc, #176]	; (800cf54 <tcp_timewait_input+0xcc>)
 800cea4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cea8:	492b      	ldr	r1, [pc, #172]	; (800cf58 <tcp_timewait_input+0xd0>)
 800ceaa:	482c      	ldr	r0, [pc, #176]	; (800cf5c <tcp_timewait_input+0xd4>)
 800ceac:	f008 fce6 	bl	801587c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ceb0:	4b27      	ldr	r3, [pc, #156]	; (800cf50 <tcp_timewait_input+0xc8>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	f003 0302 	and.w	r3, r3, #2
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d02a      	beq.n	800cf12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cebc:	4b28      	ldr	r3, [pc, #160]	; (800cf60 <tcp_timewait_input+0xd8>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	db2d      	blt.n	800cf26 <tcp_timewait_input+0x9e>
 800ceca:	4b25      	ldr	r3, [pc, #148]	; (800cf60 <tcp_timewait_input+0xd8>)
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ced6:	440b      	add	r3, r1
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	dc23      	bgt.n	800cf26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cede:	4b21      	ldr	r3, [pc, #132]	; (800cf64 <tcp_timewait_input+0xdc>)
 800cee0:	6819      	ldr	r1, [r3, #0]
 800cee2:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <tcp_timewait_input+0xe0>)
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	4b1d      	ldr	r3, [pc, #116]	; (800cf60 <tcp_timewait_input+0xd8>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceee:	4b1f      	ldr	r3, [pc, #124]	; (800cf6c <tcp_timewait_input+0xe4>)
 800cef0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cef2:	885b      	ldrh	r3, [r3, #2]
 800cef4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cef6:	4a1d      	ldr	r2, [pc, #116]	; (800cf6c <tcp_timewait_input+0xe4>)
 800cef8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cefa:	8812      	ldrh	r2, [r2, #0]
 800cefc:	b292      	uxth	r2, r2
 800cefe:	9202      	str	r2, [sp, #8]
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <tcp_timewait_input+0xe8>)
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	4b1b      	ldr	r3, [pc, #108]	; (800cf74 <tcp_timewait_input+0xec>)
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f002 fe70 	bl	800fbf0 <tcp_rst>
      return;
 800cf10:	e01b      	b.n	800cf4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cf12:	4b0f      	ldr	r3, [pc, #60]	; (800cf50 <tcp_timewait_input+0xc8>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cf1e:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <tcp_timewait_input+0xf0>)
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cf26:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <tcp_timewait_input+0xe0>)
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00c      	beq.n	800cf48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	8b5b      	ldrh	r3, [r3, #26]
 800cf32:	f043 0302 	orr.w	r3, r3, #2
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f002 f8a3 	bl	800f088 <tcp_output>
  }
  return;
 800cf42:	e001      	b.n	800cf48 <tcp_timewait_input+0xc0>
    return;
 800cf44:	bf00      	nop
 800cf46:	e000      	b.n	800cf4a <tcp_timewait_input+0xc2>
  return;
 800cf48:	bf00      	nop
}
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20000408 	.word	0x20000408
 800cf54:	0801a46c 	.word	0x0801a46c
 800cf58:	0801a684 	.word	0x0801a684
 800cf5c:	0801a4b8 	.word	0x0801a4b8
 800cf60:	200003fc 	.word	0x200003fc
 800cf64:	20000400 	.word	0x20000400
 800cf68:	20000406 	.word	0x20000406
 800cf6c:	200003ec 	.word	0x200003ec
 800cf70:	200039ac 	.word	0x200039ac
 800cf74:	200039b0 	.word	0x200039b0
 800cf78:	20006ac4 	.word	0x20006ac4

0800cf7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b08d      	sub	sp, #52	; 0x34
 800cf80:	af04      	add	r7, sp, #16
 800cf82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <tcp_process+0x24>
 800cf92:	4ba5      	ldr	r3, [pc, #660]	; (800d228 <tcp_process+0x2ac>)
 800cf94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cf98:	49a4      	ldr	r1, [pc, #656]	; (800d22c <tcp_process+0x2b0>)
 800cf9a:	48a5      	ldr	r0, [pc, #660]	; (800d230 <tcp_process+0x2b4>)
 800cf9c:	f008 fc6e 	bl	801587c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cfa0:	4ba4      	ldr	r3, [pc, #656]	; (800d234 <tcp_process+0x2b8>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d04e      	beq.n	800d04a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d108      	bne.n	800cfc6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfb8:	4b9f      	ldr	r3, [pc, #636]	; (800d238 <tcp_process+0x2bc>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d123      	bne.n	800d008 <tcp_process+0x8c>
        acceptable = 1;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	76fb      	strb	r3, [r7, #27]
 800cfc4:	e020      	b.n	800d008 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfca:	4b9c      	ldr	r3, [pc, #624]	; (800d23c <tcp_process+0x2c0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d102      	bne.n	800cfd8 <tcp_process+0x5c>
        acceptable = 1;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	76fb      	strb	r3, [r7, #27]
 800cfd6:	e017      	b.n	800d008 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cfd8:	4b98      	ldr	r3, [pc, #608]	; (800d23c <tcp_process+0x2c0>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	db10      	blt.n	800d008 <tcp_process+0x8c>
 800cfe6:	4b95      	ldr	r3, [pc, #596]	; (800d23c <tcp_process+0x2c0>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cff2:	440b      	add	r3, r1
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dc06      	bgt.n	800d008 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	8b5b      	ldrh	r3, [r3, #26]
 800cffe:	f043 0302 	orr.w	r3, r3, #2
 800d002:	b29a      	uxth	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d008:	7efb      	ldrb	r3, [r7, #27]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d01b      	beq.n	800d046 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7d1b      	ldrb	r3, [r3, #20]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <tcp_process+0xa8>
 800d016:	4b84      	ldr	r3, [pc, #528]	; (800d228 <tcp_process+0x2ac>)
 800d018:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d01c:	4988      	ldr	r1, [pc, #544]	; (800d240 <tcp_process+0x2c4>)
 800d01e:	4884      	ldr	r0, [pc, #528]	; (800d230 <tcp_process+0x2b4>)
 800d020:	f008 fc2c 	bl	801587c <iprintf>
      recv_flags |= TF_RESET;
 800d024:	4b87      	ldr	r3, [pc, #540]	; (800d244 <tcp_process+0x2c8>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	f043 0308 	orr.w	r3, r3, #8
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	4b85      	ldr	r3, [pc, #532]	; (800d244 <tcp_process+0x2c8>)
 800d030:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	8b5b      	ldrh	r3, [r3, #26]
 800d036:	f023 0301 	bic.w	r3, r3, #1
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d040:	f06f 030d 	mvn.w	r3, #13
 800d044:	e37a      	b.n	800d73c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	e378      	b.n	800d73c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d04a:	4b7a      	ldr	r3, [pc, #488]	; (800d234 <tcp_process+0x2b8>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	f003 0302 	and.w	r3, r3, #2
 800d052:	2b00      	cmp	r3, #0
 800d054:	d010      	beq.n	800d078 <tcp_process+0xfc>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7d1b      	ldrb	r3, [r3, #20]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d00c      	beq.n	800d078 <tcp_process+0xfc>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7d1b      	ldrb	r3, [r3, #20]
 800d062:	2b03      	cmp	r3, #3
 800d064:	d008      	beq.n	800d078 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	8b5b      	ldrh	r3, [r3, #26]
 800d06a:	f043 0302 	orr.w	r3, r3, #2
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	e361      	b.n	800d73c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	8b5b      	ldrh	r3, [r3, #26]
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b00      	cmp	r3, #0
 800d082:	d103      	bne.n	800d08c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d084:	4b70      	ldr	r3, [pc, #448]	; (800d248 <tcp_process+0x2cc>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f001 fc2d 	bl	800e8fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	3b02      	subs	r3, #2
 800d0a8:	2b07      	cmp	r3, #7
 800d0aa:	f200 8337 	bhi.w	800d71c <tcp_process+0x7a0>
 800d0ae:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <tcp_process+0x138>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d0d5 	.word	0x0800d0d5
 800d0b8:	0800d305 	.word	0x0800d305
 800d0bc:	0800d47d 	.word	0x0800d47d
 800d0c0:	0800d4a7 	.word	0x0800d4a7
 800d0c4:	0800d5cb 	.word	0x0800d5cb
 800d0c8:	0800d47d 	.word	0x0800d47d
 800d0cc:	0800d657 	.word	0x0800d657
 800d0d0:	0800d6e7 	.word	0x0800d6e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d0d4:	4b57      	ldr	r3, [pc, #348]	; (800d234 <tcp_process+0x2b8>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f000 80e4 	beq.w	800d2aa <tcp_process+0x32e>
 800d0e2:	4b54      	ldr	r3, [pc, #336]	; (800d234 <tcp_process+0x2b8>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	f003 0302 	and.w	r3, r3, #2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 80dd 	beq.w	800d2aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	4b50      	ldr	r3, [pc, #320]	; (800d238 <tcp_process+0x2bc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	f040 80d5 	bne.w	800d2aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d100:	4b4e      	ldr	r3, [pc, #312]	; (800d23c <tcp_process+0x2c0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d112:	4b49      	ldr	r3, [pc, #292]	; (800d238 <tcp_process+0x2bc>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d11a:	4b4c      	ldr	r3, [pc, #304]	; (800d24c <tcp_process+0x2d0>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	89db      	ldrh	r3, [r3, #14]
 800d120:	b29a      	uxth	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d134:	4b41      	ldr	r3, [pc, #260]	; (800d23c <tcp_process+0x2c0>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2204      	movs	r2, #4
 800d142:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3304      	adds	r3, #4
 800d14c:	4618      	mov	r0, r3
 800d14e:	f006 fc07 	bl	8013960 <ip4_route>
 800d152:	4601      	mov	r1, r0
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3304      	adds	r3, #4
 800d158:	461a      	mov	r2, r3
 800d15a:	4620      	mov	r0, r4
 800d15c:	f7ff f88e 	bl	800c27c <tcp_eff_send_mss_netif>
 800d160:	4603      	mov	r3, r0
 800d162:	461a      	mov	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d16c:	009a      	lsls	r2, r3, #2
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	f241 111c 	movw	r1, #4380	; 0x111c
 800d178:	428b      	cmp	r3, r1
 800d17a:	bf38      	it	cc
 800d17c:	460b      	movcc	r3, r1
 800d17e:	429a      	cmp	r2, r3
 800d180:	d204      	bcs.n	800d18c <tcp_process+0x210>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	b29b      	uxth	r3, r3
 800d18a:	e00d      	b.n	800d1a8 <tcp_process+0x22c>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	f241 121c 	movw	r2, #4380	; 0x111c
 800d196:	4293      	cmp	r3, r2
 800d198:	d904      	bls.n	800d1a4 <tcp_process+0x228>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	e001      	b.n	800d1a8 <tcp_process+0x22c>
 800d1a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <tcp_process+0x24a>
 800d1b8:	4b1b      	ldr	r3, [pc, #108]	; (800d228 <tcp_process+0x2ac>)
 800d1ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d1be:	4924      	ldr	r1, [pc, #144]	; (800d250 <tcp_process+0x2d4>)
 800d1c0:	481b      	ldr	r0, [pc, #108]	; (800d230 <tcp_process+0x2b4>)
 800d1c2:	f008 fb5b 	bl	801587c <iprintf>
        --pcb->snd_queuelen;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d111      	bne.n	800d206 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <tcp_process+0x280>
 800d1ee:	4b0e      	ldr	r3, [pc, #56]	; (800d228 <tcp_process+0x2ac>)
 800d1f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d1f4:	4917      	ldr	r1, [pc, #92]	; (800d254 <tcp_process+0x2d8>)
 800d1f6:	480e      	ldr	r0, [pc, #56]	; (800d230 <tcp_process+0x2b4>)
 800d1f8:	f008 fb40 	bl	801587c <iprintf>
          pcb->unsent = rseg->next;
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	66da      	str	r2, [r3, #108]	; 0x6c
 800d204:	e003      	b.n	800d20e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d20e:	69f8      	ldr	r0, [r7, #28]
 800d210:	f7fe fd3d 	bl	800bc8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11d      	bne.n	800d258 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d222:	861a      	strh	r2, [r3, #48]	; 0x30
 800d224:	e01f      	b.n	800d266 <tcp_process+0x2ea>
 800d226:	bf00      	nop
 800d228:	0801a46c 	.word	0x0801a46c
 800d22c:	0801a6a4 	.word	0x0801a6a4
 800d230:	0801a4b8 	.word	0x0801a4b8
 800d234:	20000408 	.word	0x20000408
 800d238:	20000400 	.word	0x20000400
 800d23c:	200003fc 	.word	0x200003fc
 800d240:	0801a6c0 	.word	0x0801a6c0
 800d244:	20000409 	.word	0x20000409
 800d248:	20006ac4 	.word	0x20006ac4
 800d24c:	200003ec 	.word	0x200003ec
 800d250:	0801a6e0 	.word	0x0801a6e0
 800d254:	0801a6f8 	.word	0x0801a6f8
        } else {
          pcb->rtime = 0;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00a      	beq.n	800d286 <tcp_process+0x30a>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	6910      	ldr	r0, [r2, #16]
 800d27a:	2200      	movs	r2, #0
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	4798      	blx	r3
 800d280:	4603      	mov	r3, r0
 800d282:	76bb      	strb	r3, [r7, #26]
 800d284:	e001      	b.n	800d28a <tcp_process+0x30e>
 800d286:	2300      	movs	r3, #0
 800d288:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d28a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d28e:	f113 0f0d 	cmn.w	r3, #13
 800d292:	d102      	bne.n	800d29a <tcp_process+0x31e>
          return ERR_ABRT;
 800d294:	f06f 030c 	mvn.w	r3, #12
 800d298:	e250      	b.n	800d73c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8b5b      	ldrh	r3, [r3, #26]
 800d29e:	f043 0302 	orr.w	r3, r3, #2
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d2a8:	e23a      	b.n	800d720 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d2aa:	4b9d      	ldr	r3, [pc, #628]	; (800d520 <tcp_process+0x5a4>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	f003 0310 	and.w	r3, r3, #16
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 8234 	beq.w	800d720 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2b8:	4b9a      	ldr	r3, [pc, #616]	; (800d524 <tcp_process+0x5a8>)
 800d2ba:	6819      	ldr	r1, [r3, #0]
 800d2bc:	4b9a      	ldr	r3, [pc, #616]	; (800d528 <tcp_process+0x5ac>)
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4b9a      	ldr	r3, [pc, #616]	; (800d52c <tcp_process+0x5b0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2c8:	4b99      	ldr	r3, [pc, #612]	; (800d530 <tcp_process+0x5b4>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2cc:	885b      	ldrh	r3, [r3, #2]
 800d2ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2d0:	4a97      	ldr	r2, [pc, #604]	; (800d530 <tcp_process+0x5b4>)
 800d2d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2d4:	8812      	ldrh	r2, [r2, #0]
 800d2d6:	b292      	uxth	r2, r2
 800d2d8:	9202      	str	r2, [sp, #8]
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	4b95      	ldr	r3, [pc, #596]	; (800d534 <tcp_process+0x5b8>)
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	4b95      	ldr	r3, [pc, #596]	; (800d538 <tcp_process+0x5bc>)
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f002 fc83 	bl	800fbf0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2f0:	2b05      	cmp	r3, #5
 800d2f2:	f200 8215 	bhi.w	800d720 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f002 fa4d 	bl	800f79c <tcp_rexmit_rto>
      break;
 800d302:	e20d      	b.n	800d720 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d304:	4b86      	ldr	r3, [pc, #536]	; (800d520 <tcp_process+0x5a4>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	f003 0310 	and.w	r3, r3, #16
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 80a1 	beq.w	800d454 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d312:	4b84      	ldr	r3, [pc, #528]	; (800d524 <tcp_process+0x5a8>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	3b01      	subs	r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	db7e      	blt.n	800d420 <tcp_process+0x4a4>
 800d322:	4b80      	ldr	r3, [pc, #512]	; (800d524 <tcp_process+0x5a8>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dc77      	bgt.n	800d420 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2204      	movs	r2, #4
 800d334:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d33e:	23fa      	movs	r3, #250	; 0xfa
 800d340:	76bb      	strb	r3, [r7, #26]
 800d342:	e01d      	b.n	800d380 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <tcp_process+0x3e0>
 800d34e:	4b7b      	ldr	r3, [pc, #492]	; (800d53c <tcp_process+0x5c0>)
 800d350:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d354:	497a      	ldr	r1, [pc, #488]	; (800d540 <tcp_process+0x5c4>)
 800d356:	487b      	ldr	r0, [pc, #492]	; (800d544 <tcp_process+0x5c8>)
 800d358:	f008 fa90 	bl	801587c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <tcp_process+0x400>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	6910      	ldr	r0, [r2, #16]
 800d370:	2200      	movs	r2, #0
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	4798      	blx	r3
 800d376:	4603      	mov	r3, r0
 800d378:	76bb      	strb	r3, [r7, #26]
 800d37a:	e001      	b.n	800d380 <tcp_process+0x404>
 800d37c:	23f0      	movs	r3, #240	; 0xf0
 800d37e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d380:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00a      	beq.n	800d39e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d388:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d38c:	f113 0f0d 	cmn.w	r3, #13
 800d390:	d002      	beq.n	800d398 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7fd ff90 	bl	800b2b8 <tcp_abort>
            }
            return ERR_ABRT;
 800d398:	f06f 030c 	mvn.w	r3, #12
 800d39c:	e1ce      	b.n	800d73c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fae0 	bl	800d964 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d3a4:	4b68      	ldr	r3, [pc, #416]	; (800d548 <tcp_process+0x5cc>)
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d005      	beq.n	800d3b8 <tcp_process+0x43c>
            recv_acked--;
 800d3ac:	4b66      	ldr	r3, [pc, #408]	; (800d548 <tcp_process+0x5cc>)
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	4b64      	ldr	r3, [pc, #400]	; (800d548 <tcp_process+0x5cc>)
 800d3b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3bc:	009a      	lsls	r2, r3, #2
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	f241 111c 	movw	r1, #4380	; 0x111c
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	bf38      	it	cc
 800d3cc:	460b      	movcc	r3, r1
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d204      	bcs.n	800d3dc <tcp_process+0x460>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	e00d      	b.n	800d3f8 <tcp_process+0x47c>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d904      	bls.n	800d3f4 <tcp_process+0x478>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	e001      	b.n	800d3f8 <tcp_process+0x47c>
 800d3f4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d3fe:	4b53      	ldr	r3, [pc, #332]	; (800d54c <tcp_process+0x5d0>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	2b00      	cmp	r3, #0
 800d408:	d037      	beq.n	800d47a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	8b5b      	ldrh	r3, [r3, #26]
 800d40e:	f043 0302 	orr.w	r3, r3, #2
 800d412:	b29a      	uxth	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2207      	movs	r2, #7
 800d41c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d41e:	e02c      	b.n	800d47a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d420:	4b40      	ldr	r3, [pc, #256]	; (800d524 <tcp_process+0x5a8>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	4b40      	ldr	r3, [pc, #256]	; (800d528 <tcp_process+0x5ac>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	4b40      	ldr	r3, [pc, #256]	; (800d52c <tcp_process+0x5b0>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d430:	4b3f      	ldr	r3, [pc, #252]	; (800d530 <tcp_process+0x5b4>)
 800d432:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d434:	885b      	ldrh	r3, [r3, #2]
 800d436:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d438:	4a3d      	ldr	r2, [pc, #244]	; (800d530 <tcp_process+0x5b4>)
 800d43a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d43c:	8812      	ldrh	r2, [r2, #0]
 800d43e:	b292      	uxth	r2, r2
 800d440:	9202      	str	r2, [sp, #8]
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	4b3b      	ldr	r3, [pc, #236]	; (800d534 <tcp_process+0x5b8>)
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	4b3b      	ldr	r3, [pc, #236]	; (800d538 <tcp_process+0x5bc>)
 800d44a:	4602      	mov	r2, r0
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f002 fbcf 	bl	800fbf0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d452:	e167      	b.n	800d724 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d454:	4b32      	ldr	r3, [pc, #200]	; (800d520 <tcp_process+0x5a4>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 8161 	beq.w	800d724 <tcp_process+0x7a8>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d466:	1e5a      	subs	r2, r3, #1
 800d468:	4b30      	ldr	r3, [pc, #192]	; (800d52c <tcp_process+0x5b0>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	f040 8159 	bne.w	800d724 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f002 f9b4 	bl	800f7e0 <tcp_rexmit>
      break;
 800d478:	e154      	b.n	800d724 <tcp_process+0x7a8>
 800d47a:	e153      	b.n	800d724 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fa71 	bl	800d964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d482:	4b32      	ldr	r3, [pc, #200]	; (800d54c <tcp_process+0x5d0>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	f003 0320 	and.w	r3, r3, #32
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 814c 	beq.w	800d728 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8b5b      	ldrh	r3, [r3, #26]
 800d494:	f043 0302 	orr.w	r3, r3, #2
 800d498:	b29a      	uxth	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2207      	movs	r2, #7
 800d4a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4a4:	e140      	b.n	800d728 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fa5c 	bl	800d964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d4ac:	4b27      	ldr	r3, [pc, #156]	; (800d54c <tcp_process+0x5d0>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 0320 	and.w	r3, r3, #32
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d071      	beq.n	800d59c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4b8:	4b19      	ldr	r3, [pc, #100]	; (800d520 <tcp_process+0x5a4>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	f003 0310 	and.w	r3, r3, #16
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d060      	beq.n	800d586 <tcp_process+0x60a>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4c8:	4b16      	ldr	r3, [pc, #88]	; (800d524 <tcp_process+0x5a8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d15a      	bne.n	800d586 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d156      	bne.n	800d586 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	8b5b      	ldrh	r3, [r3, #26]
 800d4dc:	f043 0302 	orr.w	r3, r3, #2
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7fe fdbe 	bl	800c068 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d4ec:	4b18      	ldr	r3, [pc, #96]	; (800d550 <tcp_process+0x5d4>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d105      	bne.n	800d502 <tcp_process+0x586>
 800d4f6:	4b16      	ldr	r3, [pc, #88]	; (800d550 <tcp_process+0x5d4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4a14      	ldr	r2, [pc, #80]	; (800d550 <tcp_process+0x5d4>)
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	e02e      	b.n	800d560 <tcp_process+0x5e4>
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <tcp_process+0x5d4>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	617b      	str	r3, [r7, #20]
 800d508:	e027      	b.n	800d55a <tcp_process+0x5de>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d11f      	bne.n	800d554 <tcp_process+0x5d8>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	60da      	str	r2, [r3, #12]
 800d51c:	e020      	b.n	800d560 <tcp_process+0x5e4>
 800d51e:	bf00      	nop
 800d520:	20000408 	.word	0x20000408
 800d524:	20000400 	.word	0x20000400
 800d528:	20000406 	.word	0x20000406
 800d52c:	200003fc 	.word	0x200003fc
 800d530:	200003ec 	.word	0x200003ec
 800d534:	200039ac 	.word	0x200039ac
 800d538:	200039b0 	.word	0x200039b0
 800d53c:	0801a46c 	.word	0x0801a46c
 800d540:	0801a70c 	.word	0x0801a70c
 800d544:	0801a4b8 	.word	0x0801a4b8
 800d548:	20000404 	.word	0x20000404
 800d54c:	20000409 	.word	0x20000409
 800d550:	20006ac0 	.word	0x20006ac0
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1d4      	bne.n	800d50a <tcp_process+0x58e>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	60da      	str	r2, [r3, #12]
 800d566:	4b77      	ldr	r3, [pc, #476]	; (800d744 <tcp_process+0x7c8>)
 800d568:	2201      	movs	r2, #1
 800d56a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	220a      	movs	r2, #10
 800d570:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d572:	4b75      	ldr	r3, [pc, #468]	; (800d748 <tcp_process+0x7cc>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	60da      	str	r2, [r3, #12]
 800d57a:	4a73      	ldr	r2, [pc, #460]	; (800d748 <tcp_process+0x7cc>)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	f002 fcf6 	bl	800ff70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d584:	e0d2      	b.n	800d72c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8b5b      	ldrh	r3, [r3, #26]
 800d58a:	f043 0302 	orr.w	r3, r3, #2
 800d58e:	b29a      	uxth	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2208      	movs	r2, #8
 800d598:	751a      	strb	r2, [r3, #20]
      break;
 800d59a:	e0c7      	b.n	800d72c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d59c:	4b6b      	ldr	r3, [pc, #428]	; (800d74c <tcp_process+0x7d0>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f003 0310 	and.w	r3, r3, #16
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 80c1 	beq.w	800d72c <tcp_process+0x7b0>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5ae:	4b68      	ldr	r3, [pc, #416]	; (800d750 <tcp_process+0x7d4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	f040 80ba 	bne.w	800d72c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f040 80b5 	bne.w	800d72c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2206      	movs	r2, #6
 800d5c6:	751a      	strb	r2, [r3, #20]
      break;
 800d5c8:	e0b0      	b.n	800d72c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f9ca 	bl	800d964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d5d0:	4b60      	ldr	r3, [pc, #384]	; (800d754 <tcp_process+0x7d8>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 80a9 	beq.w	800d730 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	8b5b      	ldrh	r3, [r3, #26]
 800d5e2:	f043 0302 	orr.w	r3, r3, #2
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7fe fd3b 	bl	800c068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d5f2:	4b59      	ldr	r3, [pc, #356]	; (800d758 <tcp_process+0x7dc>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d105      	bne.n	800d608 <tcp_process+0x68c>
 800d5fc:	4b56      	ldr	r3, [pc, #344]	; (800d758 <tcp_process+0x7dc>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	4a55      	ldr	r2, [pc, #340]	; (800d758 <tcp_process+0x7dc>)
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	e013      	b.n	800d630 <tcp_process+0x6b4>
 800d608:	4b53      	ldr	r3, [pc, #332]	; (800d758 <tcp_process+0x7dc>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	613b      	str	r3, [r7, #16]
 800d60e:	e00c      	b.n	800d62a <tcp_process+0x6ae>
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d104      	bne.n	800d624 <tcp_process+0x6a8>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68da      	ldr	r2, [r3, #12]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	60da      	str	r2, [r3, #12]
 800d622:	e005      	b.n	800d630 <tcp_process+0x6b4>
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1ef      	bne.n	800d610 <tcp_process+0x694>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	60da      	str	r2, [r3, #12]
 800d636:	4b43      	ldr	r3, [pc, #268]	; (800d744 <tcp_process+0x7c8>)
 800d638:	2201      	movs	r2, #1
 800d63a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	220a      	movs	r2, #10
 800d640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d642:	4b41      	ldr	r3, [pc, #260]	; (800d748 <tcp_process+0x7cc>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60da      	str	r2, [r3, #12]
 800d64a:	4a3f      	ldr	r2, [pc, #252]	; (800d748 <tcp_process+0x7cc>)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	f002 fc8e 	bl	800ff70 <tcp_timer_needed>
      }
      break;
 800d654:	e06c      	b.n	800d730 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f984 	bl	800d964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d65c:	4b3b      	ldr	r3, [pc, #236]	; (800d74c <tcp_process+0x7d0>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f003 0310 	and.w	r3, r3, #16
 800d664:	2b00      	cmp	r3, #0
 800d666:	d065      	beq.n	800d734 <tcp_process+0x7b8>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d66c:	4b38      	ldr	r3, [pc, #224]	; (800d750 <tcp_process+0x7d4>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d15f      	bne.n	800d734 <tcp_process+0x7b8>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d15b      	bne.n	800d734 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7fe fcf3 	bl	800c068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d682:	4b35      	ldr	r3, [pc, #212]	; (800d758 <tcp_process+0x7dc>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d105      	bne.n	800d698 <tcp_process+0x71c>
 800d68c:	4b32      	ldr	r3, [pc, #200]	; (800d758 <tcp_process+0x7dc>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	4a31      	ldr	r2, [pc, #196]	; (800d758 <tcp_process+0x7dc>)
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e013      	b.n	800d6c0 <tcp_process+0x744>
 800d698:	4b2f      	ldr	r3, [pc, #188]	; (800d758 <tcp_process+0x7dc>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e00c      	b.n	800d6ba <tcp_process+0x73e>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d104      	bne.n	800d6b4 <tcp_process+0x738>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	60da      	str	r2, [r3, #12]
 800d6b2:	e005      	b.n	800d6c0 <tcp_process+0x744>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1ef      	bne.n	800d6a0 <tcp_process+0x724>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	4b1f      	ldr	r3, [pc, #124]	; (800d744 <tcp_process+0x7c8>)
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	220a      	movs	r2, #10
 800d6d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d6d2:	4b1d      	ldr	r3, [pc, #116]	; (800d748 <tcp_process+0x7cc>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	60da      	str	r2, [r3, #12]
 800d6da:	4a1b      	ldr	r2, [pc, #108]	; (800d748 <tcp_process+0x7cc>)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	f002 fc46 	bl	800ff70 <tcp_timer_needed>
      }
      break;
 800d6e4:	e026      	b.n	800d734 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f93c 	bl	800d964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6ec:	4b17      	ldr	r3, [pc, #92]	; (800d74c <tcp_process+0x7d0>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f003 0310 	and.w	r3, r3, #16
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01f      	beq.n	800d738 <tcp_process+0x7bc>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6fc:	4b14      	ldr	r3, [pc, #80]	; (800d750 <tcp_process+0x7d4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	429a      	cmp	r2, r3
 800d702:	d119      	bne.n	800d738 <tcp_process+0x7bc>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d115      	bne.n	800d738 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d70c:	4b11      	ldr	r3, [pc, #68]	; (800d754 <tcp_process+0x7d8>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	f043 0310 	orr.w	r3, r3, #16
 800d714:	b2da      	uxtb	r2, r3
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <tcp_process+0x7d8>)
 800d718:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d71a:	e00d      	b.n	800d738 <tcp_process+0x7bc>
    default:
      break;
 800d71c:	bf00      	nop
 800d71e:	e00c      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d720:	bf00      	nop
 800d722:	e00a      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d724:	bf00      	nop
 800d726:	e008      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d728:	bf00      	nop
 800d72a:	e006      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d72c:	bf00      	nop
 800d72e:	e004      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d730:	bf00      	nop
 800d732:	e002      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d734:	bf00      	nop
 800d736:	e000      	b.n	800d73a <tcp_process+0x7be>
      break;
 800d738:	bf00      	nop
  }
  return ERR_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3724      	adds	r7, #36	; 0x24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd90      	pop	{r4, r7, pc}
 800d744:	20006abc 	.word	0x20006abc
 800d748:	20006ad0 	.word	0x20006ad0
 800d74c:	20000408 	.word	0x20000408
 800d750:	20000400 	.word	0x20000400
 800d754:	20000409 	.word	0x20000409
 800d758:	20006ac0 	.word	0x20006ac0

0800d75c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d75c:	b590      	push	{r4, r7, lr}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d106      	bne.n	800d77a <tcp_oos_insert_segment+0x1e>
 800d76c:	4b3b      	ldr	r3, [pc, #236]	; (800d85c <tcp_oos_insert_segment+0x100>)
 800d76e:	f240 421f 	movw	r2, #1055	; 0x41f
 800d772:	493b      	ldr	r1, [pc, #236]	; (800d860 <tcp_oos_insert_segment+0x104>)
 800d774:	483b      	ldr	r0, [pc, #236]	; (800d864 <tcp_oos_insert_segment+0x108>)
 800d776:	f008 f881 	bl	801587c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	899b      	ldrh	r3, [r3, #12]
 800d780:	b29b      	uxth	r3, r3
 800d782:	4618      	mov	r0, r3
 800d784:	f7fb fd64 	bl	8009250 <lwip_htons>
 800d788:	4603      	mov	r3, r0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d028      	beq.n	800d7e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d794:	6838      	ldr	r0, [r7, #0]
 800d796:	f7fe fa65 	bl	800bc64 <tcp_segs_free>
    next = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	603b      	str	r3, [r7, #0]
 800d79e:	e056      	b.n	800d84e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	899b      	ldrh	r3, [r3, #12]
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fb fd51 	bl	8009250 <lwip_htons>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00d      	beq.n	800d7d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	899b      	ldrh	r3, [r3, #12]
 800d7c0:	b29c      	uxth	r4, r3
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	f7fb fd44 	bl	8009250 <lwip_htons>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	4322      	orrs	r2, r4
 800d7d2:	b292      	uxth	r2, r2
 800d7d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f7fe fa54 	bl	800bc8e <tcp_seg_free>
    while (next &&
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00e      	beq.n	800d80a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	891b      	ldrh	r3, [r3, #8]
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <tcp_oos_insert_segment+0x10c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	441a      	add	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	8909      	ldrh	r1, [r1, #8]
 800d802:	440b      	add	r3, r1
 800d804:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d806:	2b00      	cmp	r3, #0
 800d808:	daca      	bge.n	800d7a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d01e      	beq.n	800d84e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	891b      	ldrh	r3, [r3, #8]
 800d814:	461a      	mov	r2, r3
 800d816:	4b14      	ldr	r3, [pc, #80]	; (800d868 <tcp_oos_insert_segment+0x10c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	441a      	add	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d824:	2b00      	cmp	r3, #0
 800d826:	dd12      	ble.n	800d84e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	b29a      	uxth	r2, r3
 800d830:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <tcp_oos_insert_segment+0x10c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	b29b      	uxth	r3, r3
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	891b      	ldrh	r3, [r3, #8]
 800d846:	4619      	mov	r1, r3
 800d848:	4610      	mov	r0, r2
 800d84a:	f7fc fe17 	bl	800a47c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	601a      	str	r2, [r3, #0]
}
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd90      	pop	{r4, r7, pc}
 800d85c:	0801a46c 	.word	0x0801a46c
 800d860:	0801a72c 	.word	0x0801a72c
 800d864:	0801a4b8 	.word	0x0801a4b8
 800d868:	200003fc 	.word	0x200003fc

0800d86c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d86c:	b5b0      	push	{r4, r5, r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d87a:	e03e      	b.n	800d8fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd f804 	bl	800a898 <pbuf_clen>
 800d890:	4603      	mov	r3, r0
 800d892:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d89a:	8a7a      	ldrh	r2, [r7, #18]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d906      	bls.n	800d8ae <tcp_free_acked_segments+0x42>
 800d8a0:	4b2a      	ldr	r3, [pc, #168]	; (800d94c <tcp_free_acked_segments+0xe0>)
 800d8a2:	f240 4257 	movw	r2, #1111	; 0x457
 800d8a6:	492a      	ldr	r1, [pc, #168]	; (800d950 <tcp_free_acked_segments+0xe4>)
 800d8a8:	482a      	ldr	r0, [pc, #168]	; (800d954 <tcp_free_acked_segments+0xe8>)
 800d8aa:	f007 ffe7 	bl	801587c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d8b4:	8a7b      	ldrh	r3, [r7, #18]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	891a      	ldrh	r2, [r3, #8]
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <tcp_free_acked_segments+0xec>)
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	4b22      	ldr	r3, [pc, #136]	; (800d958 <tcp_free_acked_segments+0xec>)
 800d8ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d8d0:	6978      	ldr	r0, [r7, #20]
 800d8d2:	f7fe f9dc 	bl	800bc8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00c      	beq.n	800d8fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d109      	bne.n	800d8fa <tcp_free_acked_segments+0x8e>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <tcp_free_acked_segments+0x8e>
 800d8ec:	4b17      	ldr	r3, [pc, #92]	; (800d94c <tcp_free_acked_segments+0xe0>)
 800d8ee:	f240 4261 	movw	r2, #1121	; 0x461
 800d8f2:	491a      	ldr	r1, [pc, #104]	; (800d95c <tcp_free_acked_segments+0xf0>)
 800d8f4:	4817      	ldr	r0, [pc, #92]	; (800d954 <tcp_free_acked_segments+0xe8>)
 800d8f6:	f007 ffc1 	bl	801587c <iprintf>
  while (seg_list != NULL &&
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d020      	beq.n	800d942 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fb fcb7 	bl	800927a <lwip_htonl>
 800d90c:	4604      	mov	r4, r0
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	891b      	ldrh	r3, [r3, #8]
 800d912:	461d      	mov	r5, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	899b      	ldrh	r3, [r3, #12]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fb fc97 	bl	8009250 <lwip_htons>
 800d922:	4603      	mov	r3, r0
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 0303 	and.w	r3, r3, #3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <tcp_free_acked_segments+0xc6>
 800d92e:	2301      	movs	r3, #1
 800d930:	e000      	b.n	800d934 <tcp_free_acked_segments+0xc8>
 800d932:	2300      	movs	r3, #0
 800d934:	442b      	add	r3, r5
 800d936:	18e2      	adds	r2, r4, r3
 800d938:	4b09      	ldr	r3, [pc, #36]	; (800d960 <tcp_free_acked_segments+0xf4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d93e:	2b00      	cmp	r3, #0
 800d940:	dd9c      	ble.n	800d87c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d942:	68bb      	ldr	r3, [r7, #8]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3718      	adds	r7, #24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bdb0      	pop	{r4, r5, r7, pc}
 800d94c:	0801a46c 	.word	0x0801a46c
 800d950:	0801a754 	.word	0x0801a754
 800d954:	0801a4b8 	.word	0x0801a4b8
 800d958:	20000404 	.word	0x20000404
 800d95c:	0801a77c 	.word	0x0801a77c
 800d960:	20000400 	.word	0x20000400

0800d964 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d964:	b5b0      	push	{r4, r5, r7, lr}
 800d966:	b094      	sub	sp, #80	; 0x50
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d106      	bne.n	800d984 <tcp_receive+0x20>
 800d976:	4ba6      	ldr	r3, [pc, #664]	; (800dc10 <tcp_receive+0x2ac>)
 800d978:	f240 427b 	movw	r2, #1147	; 0x47b
 800d97c:	49a5      	ldr	r1, [pc, #660]	; (800dc14 <tcp_receive+0x2b0>)
 800d97e:	48a6      	ldr	r0, [pc, #664]	; (800dc18 <tcp_receive+0x2b4>)
 800d980:	f007 ff7c 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d806      	bhi.n	800d99a <tcp_receive+0x36>
 800d98c:	4ba0      	ldr	r3, [pc, #640]	; (800dc10 <tcp_receive+0x2ac>)
 800d98e:	f240 427c 	movw	r2, #1148	; 0x47c
 800d992:	49a2      	ldr	r1, [pc, #648]	; (800dc1c <tcp_receive+0x2b8>)
 800d994:	48a0      	ldr	r0, [pc, #640]	; (800dc18 <tcp_receive+0x2b4>)
 800d996:	f007 ff71 	bl	801587c <iprintf>

  if (flags & TCP_ACK) {
 800d99a:	4ba1      	ldr	r3, [pc, #644]	; (800dc20 <tcp_receive+0x2bc>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	f003 0310 	and.w	r3, r3, #16
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8263 	beq.w	800de6e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9b4:	4413      	add	r3, r2
 800d9b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9bc:	4b99      	ldr	r3, [pc, #612]	; (800dc24 <tcp_receive+0x2c0>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	db1b      	blt.n	800d9fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ca:	4b96      	ldr	r3, [pc, #600]	; (800dc24 <tcp_receive+0x2c0>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d106      	bne.n	800d9e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9d6:	4b94      	ldr	r3, [pc, #592]	; (800dc28 <tcp_receive+0x2c4>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	db0e      	blt.n	800d9fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9e4:	4b90      	ldr	r3, [pc, #576]	; (800dc28 <tcp_receive+0x2c4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d125      	bne.n	800da38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d9ec:	4b8f      	ldr	r3, [pc, #572]	; (800dc2c <tcp_receive+0x2c8>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	89db      	ldrh	r3, [r3, #14]
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d91c      	bls.n	800da38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d9fe:	4b8b      	ldr	r3, [pc, #556]	; (800dc2c <tcp_receive+0x2c8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	89db      	ldrh	r3, [r3, #14]
 800da04:	b29a      	uxth	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da18:	429a      	cmp	r2, r3
 800da1a:	d205      	bcs.n	800da28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800da28:	4b7e      	ldr	r3, [pc, #504]	; (800dc24 <tcp_receive+0x2c0>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800da30:	4b7d      	ldr	r3, [pc, #500]	; (800dc28 <tcp_receive+0x2c4>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800da38:	4b7b      	ldr	r3, [pc, #492]	; (800dc28 <tcp_receive+0x2c4>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	dc58      	bgt.n	800daf8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800da46:	4b7a      	ldr	r3, [pc, #488]	; (800dc30 <tcp_receive+0x2cc>)
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d14b      	bne.n	800dae6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800da58:	4413      	add	r3, r2
 800da5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d142      	bne.n	800dae6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da66:	2b00      	cmp	r3, #0
 800da68:	db3d      	blt.n	800dae6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da6e:	4b6e      	ldr	r3, [pc, #440]	; (800dc28 <tcp_receive+0x2c4>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d137      	bne.n	800dae6 <tcp_receive+0x182>
              found_dupack = 1;
 800da76:	2301      	movs	r3, #1
 800da78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da80:	2bff      	cmp	r3, #255	; 0xff
 800da82:	d007      	beq.n	800da94 <tcp_receive+0x130>
                ++pcb->dupacks;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da8a:	3301      	adds	r3, #1
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d91b      	bls.n	800dad6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daa8:	4413      	add	r3, r2
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d30a      	bcc.n	800dacc <tcp_receive+0x168>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dac0:	4413      	add	r3, r2
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800daca:	e004      	b.n	800dad6 <tcp_receive+0x172>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d902      	bls.n	800dae6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f001 fee9 	bl	800f8b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f040 8160 	bne.w	800ddae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800daf6:	e15a      	b.n	800ddae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800daf8:	4b4b      	ldr	r3, [pc, #300]	; (800dc28 <tcp_receive+0x2c4>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	f2c0 814d 	blt.w	800dda4 <tcp_receive+0x440>
 800db0a:	4b47      	ldr	r3, [pc, #284]	; (800dc28 <tcp_receive+0x2c4>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	f300 8145 	bgt.w	800dda4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	8b5b      	ldrh	r3, [r3, #26]
 800db1e:	f003 0304 	and.w	r3, r3, #4
 800db22:	2b00      	cmp	r3, #0
 800db24:	d010      	beq.n	800db48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	8b5b      	ldrh	r3, [r3, #26]
 800db2a:	f023 0304 	bic.w	r3, r3, #4
 800db2e:	b29a      	uxth	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db56:	10db      	asrs	r3, r3, #3
 800db58:	b21b      	sxth	r3, r3
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db62:	b29b      	uxth	r3, r3
 800db64:	4413      	add	r3, r2
 800db66:	b29b      	uxth	r3, r3
 800db68:	b21a      	sxth	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800db70:	4b2d      	ldr	r3, [pc, #180]	; (800dc28 <tcp_receive+0x2c4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800db88:	4b27      	ldr	r3, [pc, #156]	; (800dc28 <tcp_receive+0x2c4>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7d1b      	ldrb	r3, [r3, #20]
 800db94:	2b03      	cmp	r3, #3
 800db96:	f240 8096 	bls.w	800dcc6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d244      	bcs.n	800dc34 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8b5b      	ldrh	r3, [r3, #26]
 800dbae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <tcp_receive+0x256>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e000      	b.n	800dbbc <tcp_receive+0x258>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dbc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbca:	fb12 f303 	smulbb	r3, r2, r3
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	bf28      	it	cs
 800dbd6:	4613      	movcs	r3, r2
 800dbd8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbe0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d309      	bcc.n	800dc04 <tcp_receive+0x2a0>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dbf8:	4413      	add	r3, r2
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc02:	e060      	b.n	800dcc6 <tcp_receive+0x362>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc0e:	e05a      	b.n	800dcc6 <tcp_receive+0x362>
 800dc10:	0801a46c 	.word	0x0801a46c
 800dc14:	0801a79c 	.word	0x0801a79c
 800dc18:	0801a4b8 	.word	0x0801a4b8
 800dc1c:	0801a7b8 	.word	0x0801a7b8
 800dc20:	20000408 	.word	0x20000408
 800dc24:	200003fc 	.word	0x200003fc
 800dc28:	20000400 	.word	0x20000400
 800dc2c:	200003ec 	.word	0x200003ec
 800dc30:	20000406 	.word	0x20000406
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc3c:	4413      	add	r3, r2
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d309      	bcc.n	800dc5e <tcp_receive+0x2fa>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc52:	4413      	add	r3, r2
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc5c:	e004      	b.n	800dc68 <tcp_receive+0x304>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d326      	bcc.n	800dcc6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc98:	4413      	add	r3, r2
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d30a      	bcc.n	800dcbc <tcp_receive+0x358>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcb0:	4413      	add	r3, r2
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcba:	e004      	b.n	800dcc6 <tcp_receive+0x362>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcce:	4a98      	ldr	r2, [pc, #608]	; (800df30 <tcp_receive+0x5cc>)
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fdcb 	bl	800d86c <tcp_free_acked_segments>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dce4:	4a93      	ldr	r2, [pc, #588]	; (800df34 <tcp_receive+0x5d0>)
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fdc0 	bl	800d86c <tcp_free_acked_segments>
 800dcec:	4602      	mov	r2, r0
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d104      	bne.n	800dd04 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd00:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd02:	e002      	b.n	800dd0a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dd26:	4b84      	ldr	r3, [pc, #528]	; (800df38 <tcp_receive+0x5d4>)
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8b5b      	ldrh	r3, [r3, #26]
 800dd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d035      	beq.n	800ddac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d118      	bne.n	800dd7a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00c      	beq.n	800dd6a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fb fa8c 	bl	800927a <lwip_htonl>
 800dd62:	4603      	mov	r3, r0
 800dd64:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dc20      	bgt.n	800ddac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	8b5b      	ldrh	r3, [r3, #26]
 800dd6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd78:	e018      	b.n	800ddac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fb fa77 	bl	800927a <lwip_htonl>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	1ae3      	subs	r3, r4, r3
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	dc0b      	bgt.n	800ddac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8b5b      	ldrh	r3, [r3, #26]
 800dd98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dda2:	e003      	b.n	800ddac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f001 ff73 	bl	800fc90 <tcp_send_empty_ack>
 800ddaa:	e000      	b.n	800ddae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d05b      	beq.n	800de6e <tcp_receive+0x50a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddba:	4b60      	ldr	r3, [pc, #384]	; (800df3c <tcp_receive+0x5d8>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	da54      	bge.n	800de6e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ddc4:	4b5e      	ldr	r3, [pc, #376]	; (800df40 <tcp_receive+0x5dc>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ddd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dde2:	10db      	asrs	r3, r3, #3
 800dde4:	b21b      	sxth	r3, r3
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ddfc:	4413      	add	r3, r2
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	b21a      	sxth	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da05      	bge.n	800de1a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800de0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de12:	425b      	negs	r3, r3
 800de14:	b29b      	uxth	r3, r3
 800de16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800de1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de24:	109b      	asrs	r3, r3, #2
 800de26:	b21b      	sxth	r3, r3
 800de28:	b29b      	uxth	r3, r3
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de38:	b29a      	uxth	r2, r3
 800de3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de3e:	4413      	add	r3, r2
 800de40:	b29b      	uxth	r3, r3
 800de42:	b21a      	sxth	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de4e:	10db      	asrs	r3, r3, #3
 800de50:	b21b      	sxth	r3, r3
 800de52:	b29a      	uxth	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4413      	add	r3, r2
 800de5e:	b29b      	uxth	r3, r3
 800de60:	b21a      	sxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800de6e:	4b35      	ldr	r3, [pc, #212]	; (800df44 <tcp_receive+0x5e0>)
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 84e1 	beq.w	800e83a <tcp_receive+0xed6>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7d1b      	ldrb	r3, [r3, #20]
 800de7c:	2b06      	cmp	r3, #6
 800de7e:	f200 84dc 	bhi.w	800e83a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de86:	4b30      	ldr	r3, [pc, #192]	; (800df48 <tcp_receive+0x5e4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	3b01      	subs	r3, #1
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f2c0 808e 	blt.w	800dfb0 <tcp_receive+0x64c>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de98:	4b2a      	ldr	r3, [pc, #168]	; (800df44 <tcp_receive+0x5e0>)
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	4619      	mov	r1, r3
 800de9e:	4b2a      	ldr	r3, [pc, #168]	; (800df48 <tcp_receive+0x5e4>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	440b      	add	r3, r1
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	3301      	adds	r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f300 8081 	bgt.w	800dfb0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800deae:	4b27      	ldr	r3, [pc, #156]	; (800df4c <tcp_receive+0x5e8>)
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deb8:	4b23      	ldr	r3, [pc, #140]	; (800df48 <tcp_receive+0x5e4>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dec0:	4b22      	ldr	r3, [pc, #136]	; (800df4c <tcp_receive+0x5e8>)
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <tcp_receive+0x572>
 800dec8:	4b21      	ldr	r3, [pc, #132]	; (800df50 <tcp_receive+0x5ec>)
 800deca:	f240 5294 	movw	r2, #1428	; 0x594
 800dece:	4921      	ldr	r1, [pc, #132]	; (800df54 <tcp_receive+0x5f0>)
 800ded0:	4821      	ldr	r0, [pc, #132]	; (800df58 <tcp_receive+0x5f4>)
 800ded2:	f007 fcd3 	bl	801587c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dedc:	4293      	cmp	r3, r2
 800dede:	d906      	bls.n	800deee <tcp_receive+0x58a>
 800dee0:	4b1b      	ldr	r3, [pc, #108]	; (800df50 <tcp_receive+0x5ec>)
 800dee2:	f240 5295 	movw	r2, #1429	; 0x595
 800dee6:	491d      	ldr	r1, [pc, #116]	; (800df5c <tcp_receive+0x5f8>)
 800dee8:	481b      	ldr	r0, [pc, #108]	; (800df58 <tcp_receive+0x5f4>)
 800deea:	f007 fcc7 	bl	801587c <iprintf>
      off = (u16_t)off32;
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800def4:	4b15      	ldr	r3, [pc, #84]	; (800df4c <tcp_receive+0x5e8>)
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800defe:	429a      	cmp	r2, r3
 800df00:	d906      	bls.n	800df10 <tcp_receive+0x5ac>
 800df02:	4b13      	ldr	r3, [pc, #76]	; (800df50 <tcp_receive+0x5ec>)
 800df04:	f240 5297 	movw	r2, #1431	; 0x597
 800df08:	4915      	ldr	r1, [pc, #84]	; (800df60 <tcp_receive+0x5fc>)
 800df0a:	4813      	ldr	r0, [pc, #76]	; (800df58 <tcp_receive+0x5f4>)
 800df0c:	f007 fcb6 	bl	801587c <iprintf>
      inseg.len -= off;
 800df10:	4b0e      	ldr	r3, [pc, #56]	; (800df4c <tcp_receive+0x5e8>)
 800df12:	891a      	ldrh	r2, [r3, #8]
 800df14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <tcp_receive+0x5e8>)
 800df1e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df20:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <tcp_receive+0x5e8>)
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	891a      	ldrh	r2, [r3, #8]
 800df26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800df2e:	e029      	b.n	800df84 <tcp_receive+0x620>
 800df30:	0801a7d4 	.word	0x0801a7d4
 800df34:	0801a7dc 	.word	0x0801a7dc
 800df38:	20000404 	.word	0x20000404
 800df3c:	20000400 	.word	0x20000400
 800df40:	20006ac4 	.word	0x20006ac4
 800df44:	20000406 	.word	0x20000406
 800df48:	200003fc 	.word	0x200003fc
 800df4c:	200003dc 	.word	0x200003dc
 800df50:	0801a46c 	.word	0x0801a46c
 800df54:	0801a7e4 	.word	0x0801a7e4
 800df58:	0801a4b8 	.word	0x0801a4b8
 800df5c:	0801a7f4 	.word	0x0801a7f4
 800df60:	0801a804 	.word	0x0801a804
        off -= p->len;
 800df64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df66:	895b      	ldrh	r3, [r3, #10]
 800df68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800df72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800df78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df7a:	2200      	movs	r2, #0
 800df7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800df7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800df84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df86:	895b      	ldrh	r3, [r3, #10]
 800df88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d8e9      	bhi.n	800df64 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800df90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df94:	4619      	mov	r1, r3
 800df96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df98:	f7fc fb70 	bl	800a67c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	4a91      	ldr	r2, [pc, #580]	; (800e1e8 <tcp_receive+0x884>)
 800dfa2:	6013      	str	r3, [r2, #0]
 800dfa4:	4b91      	ldr	r3, [pc, #580]	; (800e1ec <tcp_receive+0x888>)
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	4a8f      	ldr	r2, [pc, #572]	; (800e1e8 <tcp_receive+0x884>)
 800dfaa:	6812      	ldr	r2, [r2, #0]
 800dfac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dfae:	e00d      	b.n	800dfcc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dfb0:	4b8d      	ldr	r3, [pc, #564]	; (800e1e8 <tcp_receive+0x884>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	da06      	bge.n	800dfcc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	8b5b      	ldrh	r3, [r3, #26]
 800dfc2:	f043 0302 	orr.w	r3, r3, #2
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dfcc:	4b86      	ldr	r3, [pc, #536]	; (800e1e8 <tcp_receive+0x884>)
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f2c0 842a 	blt.w	800e830 <tcp_receive+0xecc>
 800dfdc:	4b82      	ldr	r3, [pc, #520]	; (800e1e8 <tcp_receive+0x884>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dfe8:	440b      	add	r3, r1
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	3301      	adds	r3, #1
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f300 841e 	bgt.w	800e830 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dff8:	4b7b      	ldr	r3, [pc, #492]	; (800e1e8 <tcp_receive+0x884>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	f040 829a 	bne.w	800e536 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e002:	4b7a      	ldr	r3, [pc, #488]	; (800e1ec <tcp_receive+0x888>)
 800e004:	891c      	ldrh	r4, [r3, #8]
 800e006:	4b79      	ldr	r3, [pc, #484]	; (800e1ec <tcp_receive+0x888>)
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	899b      	ldrh	r3, [r3, #12]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fb f91e 	bl	8009250 <lwip_htons>
 800e014:	4603      	mov	r3, r0
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <tcp_receive+0x6c0>
 800e020:	2301      	movs	r3, #1
 800e022:	e000      	b.n	800e026 <tcp_receive+0x6c2>
 800e024:	2300      	movs	r3, #0
 800e026:	4423      	add	r3, r4
 800e028:	b29a      	uxth	r2, r3
 800e02a:	4b71      	ldr	r3, [pc, #452]	; (800e1f0 <tcp_receive+0x88c>)
 800e02c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e032:	4b6f      	ldr	r3, [pc, #444]	; (800e1f0 <tcp_receive+0x88c>)
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d275      	bcs.n	800e126 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e03a:	4b6c      	ldr	r3, [pc, #432]	; (800e1ec <tcp_receive+0x888>)
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	899b      	ldrh	r3, [r3, #12]
 800e040:	b29b      	uxth	r3, r3
 800e042:	4618      	mov	r0, r3
 800e044:	f7fb f904 	bl	8009250 <lwip_htons>
 800e048:	4603      	mov	r3, r0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d01f      	beq.n	800e094 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e054:	4b65      	ldr	r3, [pc, #404]	; (800e1ec <tcp_receive+0x888>)
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	899b      	ldrh	r3, [r3, #12]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	b21b      	sxth	r3, r3
 800e05e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e062:	b21c      	sxth	r4, r3
 800e064:	4b61      	ldr	r3, [pc, #388]	; (800e1ec <tcp_receive+0x888>)
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	899b      	ldrh	r3, [r3, #12]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fb f8ef 	bl	8009250 <lwip_htons>
 800e072:	4603      	mov	r3, r0
 800e074:	b2db      	uxtb	r3, r3
 800e076:	b29b      	uxth	r3, r3
 800e078:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fb f8e6 	bl	8009250 <lwip_htons>
 800e084:	4603      	mov	r3, r0
 800e086:	b21b      	sxth	r3, r3
 800e088:	4323      	orrs	r3, r4
 800e08a:	b21a      	sxth	r2, r3
 800e08c:	4b57      	ldr	r3, [pc, #348]	; (800e1ec <tcp_receive+0x888>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	b292      	uxth	r2, r2
 800e092:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e098:	4b54      	ldr	r3, [pc, #336]	; (800e1ec <tcp_receive+0x888>)
 800e09a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e09c:	4b53      	ldr	r3, [pc, #332]	; (800e1ec <tcp_receive+0x888>)
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	899b      	ldrh	r3, [r3, #12]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fb f8d3 	bl	8009250 <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 0302 	and.w	r3, r3, #2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d005      	beq.n	800e0c2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800e0b6:	4b4d      	ldr	r3, [pc, #308]	; (800e1ec <tcp_receive+0x888>)
 800e0b8:	891b      	ldrh	r3, [r3, #8]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	4b4b      	ldr	r3, [pc, #300]	; (800e1ec <tcp_receive+0x888>)
 800e0c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e0c2:	4b4a      	ldr	r3, [pc, #296]	; (800e1ec <tcp_receive+0x888>)
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	4a49      	ldr	r2, [pc, #292]	; (800e1ec <tcp_receive+0x888>)
 800e0c8:	8912      	ldrh	r2, [r2, #8]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fc f9d5 	bl	800a47c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e0d2:	4b46      	ldr	r3, [pc, #280]	; (800e1ec <tcp_receive+0x888>)
 800e0d4:	891c      	ldrh	r4, [r3, #8]
 800e0d6:	4b45      	ldr	r3, [pc, #276]	; (800e1ec <tcp_receive+0x888>)
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	899b      	ldrh	r3, [r3, #12]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fb f8b6 	bl	8009250 <lwip_htons>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	f003 0303 	and.w	r3, r3, #3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <tcp_receive+0x790>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e000      	b.n	800e0f6 <tcp_receive+0x792>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4423      	add	r3, r4
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	4b3d      	ldr	r3, [pc, #244]	; (800e1f0 <tcp_receive+0x88c>)
 800e0fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e0fe:	4b3c      	ldr	r3, [pc, #240]	; (800e1f0 <tcp_receive+0x88c>)
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	4b38      	ldr	r3, [pc, #224]	; (800e1e8 <tcp_receive+0x884>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	441a      	add	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	6879      	ldr	r1, [r7, #4]
 800e110:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e112:	440b      	add	r3, r1
 800e114:	429a      	cmp	r2, r3
 800e116:	d006      	beq.n	800e126 <tcp_receive+0x7c2>
 800e118:	4b36      	ldr	r3, [pc, #216]	; (800e1f4 <tcp_receive+0x890>)
 800e11a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e11e:	4936      	ldr	r1, [pc, #216]	; (800e1f8 <tcp_receive+0x894>)
 800e120:	4836      	ldr	r0, [pc, #216]	; (800e1fc <tcp_receive+0x898>)
 800e122:	f007 fbab 	bl	801587c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 80e7 	beq.w	800e2fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e130:	4b2e      	ldr	r3, [pc, #184]	; (800e1ec <tcp_receive+0x888>)
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	b29b      	uxth	r3, r3
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fb f889 	bl	8009250 <lwip_htons>
 800e13e:	4603      	mov	r3, r0
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	2b00      	cmp	r3, #0
 800e148:	d010      	beq.n	800e16c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e14a:	e00a      	b.n	800e162 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e150:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7fd fd96 	bl	800bc8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1f0      	bne.n	800e14c <tcp_receive+0x7e8>
 800e16a:	e0c8      	b.n	800e2fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e172:	e052      	b.n	800e21a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	899b      	ldrh	r3, [r3, #12]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fb f867 	bl	8009250 <lwip_htons>
 800e182:	4603      	mov	r3, r0
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d03d      	beq.n	800e20a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e18e:	4b17      	ldr	r3, [pc, #92]	; (800e1ec <tcp_receive+0x888>)
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	899b      	ldrh	r3, [r3, #12]
 800e194:	b29b      	uxth	r3, r3
 800e196:	4618      	mov	r0, r3
 800e198:	f7fb f85a 	bl	8009250 <lwip_htons>
 800e19c:	4603      	mov	r3, r0
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d130      	bne.n	800e20a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e1a8:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <tcp_receive+0x888>)
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	899b      	ldrh	r3, [r3, #12]
 800e1ae:	b29c      	uxth	r4, r3
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	f7fb f84d 	bl	8009250 <lwip_htons>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <tcp_receive+0x888>)
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	4322      	orrs	r2, r4
 800e1c0:	b292      	uxth	r2, r2
 800e1c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e1c4:	4b09      	ldr	r3, [pc, #36]	; (800e1ec <tcp_receive+0x888>)
 800e1c6:	891c      	ldrh	r4, [r3, #8]
 800e1c8:	4b08      	ldr	r3, [pc, #32]	; (800e1ec <tcp_receive+0x888>)
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	899b      	ldrh	r3, [r3, #12]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fb f83d 	bl	8009250 <lwip_htons>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	f003 0303 	and.w	r3, r3, #3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00e      	beq.n	800e200 <tcp_receive+0x89c>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e00d      	b.n	800e202 <tcp_receive+0x89e>
 800e1e6:	bf00      	nop
 800e1e8:	200003fc 	.word	0x200003fc
 800e1ec:	200003dc 	.word	0x200003dc
 800e1f0:	20000406 	.word	0x20000406
 800e1f4:	0801a46c 	.word	0x0801a46c
 800e1f8:	0801a814 	.word	0x0801a814
 800e1fc:	0801a4b8 	.word	0x0801a4b8
 800e200:	2300      	movs	r3, #0
 800e202:	4423      	add	r3, r4
 800e204:	b29a      	uxth	r2, r3
 800e206:	4b98      	ldr	r3, [pc, #608]	; (800e468 <tcp_receive+0xb04>)
 800e208:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e214:	6938      	ldr	r0, [r7, #16]
 800e216:	f7fd fd3a 	bl	800bc8e <tcp_seg_free>
            while (next &&
 800e21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00e      	beq.n	800e23e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e220:	4b91      	ldr	r3, [pc, #580]	; (800e468 <tcp_receive+0xb04>)
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	461a      	mov	r2, r3
 800e226:	4b91      	ldr	r3, [pc, #580]	; (800e46c <tcp_receive+0xb08>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	441a      	add	r2, r3
 800e22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e234:	8909      	ldrh	r1, [r1, #8]
 800e236:	440b      	add	r3, r1
 800e238:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da9a      	bge.n	800e174 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d059      	beq.n	800e2f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e244:	4b88      	ldr	r3, [pc, #544]	; (800e468 <tcp_receive+0xb04>)
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	461a      	mov	r2, r3
 800e24a:	4b88      	ldr	r3, [pc, #544]	; (800e46c <tcp_receive+0xb08>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	441a      	add	r2, r3
 800e250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dd4d      	ble.n	800e2f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	b29a      	uxth	r2, r3
 800e264:	4b81      	ldr	r3, [pc, #516]	; (800e46c <tcp_receive+0xb08>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	4b80      	ldr	r3, [pc, #512]	; (800e470 <tcp_receive+0xb0c>)
 800e270:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e272:	4b7f      	ldr	r3, [pc, #508]	; (800e470 <tcp_receive+0xb0c>)
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	899b      	ldrh	r3, [r3, #12]
 800e278:	b29b      	uxth	r3, r3
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fa ffe8 	bl	8009250 <lwip_htons>
 800e280:	4603      	mov	r3, r0
 800e282:	b2db      	uxtb	r3, r3
 800e284:	f003 0302 	and.w	r3, r3, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <tcp_receive+0x934>
                inseg.len -= 1;
 800e28c:	4b78      	ldr	r3, [pc, #480]	; (800e470 <tcp_receive+0xb0c>)
 800e28e:	891b      	ldrh	r3, [r3, #8]
 800e290:	3b01      	subs	r3, #1
 800e292:	b29a      	uxth	r2, r3
 800e294:	4b76      	ldr	r3, [pc, #472]	; (800e470 <tcp_receive+0xb0c>)
 800e296:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e298:	4b75      	ldr	r3, [pc, #468]	; (800e470 <tcp_receive+0xb0c>)
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	4a74      	ldr	r2, [pc, #464]	; (800e470 <tcp_receive+0xb0c>)
 800e29e:	8912      	ldrh	r2, [r2, #8]
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fc f8ea 	bl	800a47c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e2a8:	4b71      	ldr	r3, [pc, #452]	; (800e470 <tcp_receive+0xb0c>)
 800e2aa:	891c      	ldrh	r4, [r3, #8]
 800e2ac:	4b70      	ldr	r3, [pc, #448]	; (800e470 <tcp_receive+0xb0c>)
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	899b      	ldrh	r3, [r3, #12]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fa ffcb 	bl	8009250 <lwip_htons>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <tcp_receive+0x966>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <tcp_receive+0x968>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4423      	add	r3, r4
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	4b65      	ldr	r3, [pc, #404]	; (800e468 <tcp_receive+0xb04>)
 800e2d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e2d4:	4b64      	ldr	r3, [pc, #400]	; (800e468 <tcp_receive+0xb04>)
 800e2d6:	881b      	ldrh	r3, [r3, #0]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4b64      	ldr	r3, [pc, #400]	; (800e46c <tcp_receive+0xb08>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	441a      	add	r2, r3
 800e2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d006      	beq.n	800e2f8 <tcp_receive+0x994>
 800e2ea:	4b62      	ldr	r3, [pc, #392]	; (800e474 <tcp_receive+0xb10>)
 800e2ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e2f0:	4961      	ldr	r1, [pc, #388]	; (800e478 <tcp_receive+0xb14>)
 800e2f2:	4862      	ldr	r0, [pc, #392]	; (800e47c <tcp_receive+0xb18>)
 800e2f4:	f007 fac2 	bl	801587c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e2fe:	4b5a      	ldr	r3, [pc, #360]	; (800e468 <tcp_receive+0xb04>)
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	461a      	mov	r2, r3
 800e304:	4b59      	ldr	r3, [pc, #356]	; (800e46c <tcp_receive+0xb08>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	441a      	add	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e312:	4b55      	ldr	r3, [pc, #340]	; (800e468 <tcp_receive+0xb04>)
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d206      	bcs.n	800e328 <tcp_receive+0x9c4>
 800e31a:	4b56      	ldr	r3, [pc, #344]	; (800e474 <tcp_receive+0xb10>)
 800e31c:	f240 6207 	movw	r2, #1543	; 0x607
 800e320:	4957      	ldr	r1, [pc, #348]	; (800e480 <tcp_receive+0xb1c>)
 800e322:	4856      	ldr	r0, [pc, #344]	; (800e47c <tcp_receive+0xb18>)
 800e324:	f007 faaa 	bl	801587c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e32c:	4b4e      	ldr	r3, [pc, #312]	; (800e468 <tcp_receive+0xb04>)
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	b29a      	uxth	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7fc ffc9 	bl	800b2d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e33e:	4b4c      	ldr	r3, [pc, #304]	; (800e470 <tcp_receive+0xb0c>)
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	891b      	ldrh	r3, [r3, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d006      	beq.n	800e356 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e348:	4b49      	ldr	r3, [pc, #292]	; (800e470 <tcp_receive+0xb0c>)
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	4a4d      	ldr	r2, [pc, #308]	; (800e484 <tcp_receive+0xb20>)
 800e34e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e350:	4b47      	ldr	r3, [pc, #284]	; (800e470 <tcp_receive+0xb0c>)
 800e352:	2200      	movs	r2, #0
 800e354:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e356:	4b46      	ldr	r3, [pc, #280]	; (800e470 <tcp_receive+0xb0c>)
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	899b      	ldrh	r3, [r3, #12]
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fa ff76 	bl	8009250 <lwip_htons>
 800e364:	4603      	mov	r3, r0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 80b8 	beq.w	800e4e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e372:	4b45      	ldr	r3, [pc, #276]	; (800e488 <tcp_receive+0xb24>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	f043 0320 	orr.w	r3, r3, #32
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	4b42      	ldr	r3, [pc, #264]	; (800e488 <tcp_receive+0xb24>)
 800e37e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e380:	e0af      	b.n	800e4e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e386:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a36      	ldr	r2, [pc, #216]	; (800e46c <tcp_receive+0xb08>)
 800e392:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	891b      	ldrh	r3, [r3, #8]
 800e398:	461c      	mov	r4, r3
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	899b      	ldrh	r3, [r3, #12]
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fa ff54 	bl	8009250 <lwip_htons>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	f003 0303 	and.w	r3, r3, #3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d001      	beq.n	800e3b8 <tcp_receive+0xa54>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e000      	b.n	800e3ba <tcp_receive+0xa56>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	191a      	adds	r2, r3, r4
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	441a      	add	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ca:	461c      	mov	r4, r3
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	891b      	ldrh	r3, [r3, #8]
 800e3d0:	461d      	mov	r5, r3
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	899b      	ldrh	r3, [r3, #12]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fa ff38 	bl	8009250 <lwip_htons>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	f003 0303 	and.w	r3, r3, #3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <tcp_receive+0xa8c>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e000      	b.n	800e3f2 <tcp_receive+0xa8e>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	442b      	add	r3, r5
 800e3f4:	429c      	cmp	r4, r3
 800e3f6:	d206      	bcs.n	800e406 <tcp_receive+0xaa2>
 800e3f8:	4b1e      	ldr	r3, [pc, #120]	; (800e474 <tcp_receive+0xb10>)
 800e3fa:	f240 622b 	movw	r2, #1579	; 0x62b
 800e3fe:	4923      	ldr	r1, [pc, #140]	; (800e48c <tcp_receive+0xb28>)
 800e400:	481e      	ldr	r0, [pc, #120]	; (800e47c <tcp_receive+0xb18>)
 800e402:	f007 fa3b 	bl	801587c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	891b      	ldrh	r3, [r3, #8]
 800e40a:	461c      	mov	r4, r3
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	899b      	ldrh	r3, [r3, #12]
 800e412:	b29b      	uxth	r3, r3
 800e414:	4618      	mov	r0, r3
 800e416:	f7fa ff1b 	bl	8009250 <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	f003 0303 	and.w	r3, r3, #3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <tcp_receive+0xac6>
 800e426:	2301      	movs	r3, #1
 800e428:	e000      	b.n	800e42c <tcp_receive+0xac8>
 800e42a:	2300      	movs	r3, #0
 800e42c:	1919      	adds	r1, r3, r4
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e432:	b28b      	uxth	r3, r1
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7fc ff47 	bl	800b2d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	891b      	ldrh	r3, [r3, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d028      	beq.n	800e49e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e44c:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <tcp_receive+0xb20>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d01d      	beq.n	800e490 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e454:	4b0b      	ldr	r3, [pc, #44]	; (800e484 <tcp_receive+0xb20>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	4619      	mov	r1, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	f7fc fa54 	bl	800a90c <pbuf_cat>
 800e464:	e018      	b.n	800e498 <tcp_receive+0xb34>
 800e466:	bf00      	nop
 800e468:	20000406 	.word	0x20000406
 800e46c:	200003fc 	.word	0x200003fc
 800e470:	200003dc 	.word	0x200003dc
 800e474:	0801a46c 	.word	0x0801a46c
 800e478:	0801a84c 	.word	0x0801a84c
 800e47c:	0801a4b8 	.word	0x0801a4b8
 800e480:	0801a888 	.word	0x0801a888
 800e484:	2000040c 	.word	0x2000040c
 800e488:	20000409 	.word	0x20000409
 800e48c:	0801a8a8 	.word	0x0801a8a8
            } else {
              recv_data = cseg->p;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4a70      	ldr	r2, [pc, #448]	; (800e658 <tcp_receive+0xcf4>)
 800e496:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2200      	movs	r2, #0
 800e49c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	899b      	ldrh	r3, [r3, #12]
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fa fed2 	bl	8009250 <lwip_htons>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	f003 0301 	and.w	r3, r3, #1
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00d      	beq.n	800e4d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e4b8:	4b68      	ldr	r3, [pc, #416]	; (800e65c <tcp_receive+0xcf8>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f043 0320 	orr.w	r3, r3, #32
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	4b66      	ldr	r3, [pc, #408]	; (800e65c <tcp_receive+0xcf8>)
 800e4c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	d102      	bne.n	800e4d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e4dc:	68b8      	ldr	r0, [r7, #8]
 800e4de:	f7fd fbd6 	bl	800bc8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d008      	beq.n	800e4fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	f43f af43 	beq.w	800e382 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	8b5b      	ldrh	r3, [r3, #26]
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00e      	beq.n	800e526 <tcp_receive+0xbc2>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	8b5b      	ldrh	r3, [r3, #26]
 800e50c:	f023 0301 	bic.w	r3, r3, #1
 800e510:	b29a      	uxth	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	835a      	strh	r2, [r3, #26]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8b5b      	ldrh	r3, [r3, #26]
 800e51a:	f043 0302 	orr.w	r3, r3, #2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e524:	e188      	b.n	800e838 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8b5b      	ldrh	r3, [r3, #26]
 800e52a:	f043 0301 	orr.w	r3, r3, #1
 800e52e:	b29a      	uxth	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e534:	e180      	b.n	800e838 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e53e:	4848      	ldr	r0, [pc, #288]	; (800e660 <tcp_receive+0xcfc>)
 800e540:	f7fd fbbe 	bl	800bcc0 <tcp_seg_copy>
 800e544:	4602      	mov	r2, r0
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	675a      	str	r2, [r3, #116]	; 0x74
 800e54a:	e16d      	b.n	800e828 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e54c:	2300      	movs	r3, #0
 800e54e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e554:	63bb      	str	r3, [r7, #56]	; 0x38
 800e556:	e157      	b.n	800e808 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	4b41      	ldr	r3, [pc, #260]	; (800e664 <tcp_receive+0xd00>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d11d      	bne.n	800e5a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e566:	4b3e      	ldr	r3, [pc, #248]	; (800e660 <tcp_receive+0xcfc>)
 800e568:	891a      	ldrh	r2, [r3, #8]
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	891b      	ldrh	r3, [r3, #8]
 800e56e:	429a      	cmp	r2, r3
 800e570:	f240 814f 	bls.w	800e812 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e574:	483a      	ldr	r0, [pc, #232]	; (800e660 <tcp_receive+0xcfc>)
 800e576:	f7fd fba3 	bl	800bcc0 <tcp_seg_copy>
 800e57a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f000 8149 	beq.w	800e816 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	2b00      	cmp	r3, #0
 800e588:	d003      	beq.n	800e592 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	e002      	b.n	800e598 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e59a:	6978      	ldr	r0, [r7, #20]
 800e59c:	f7ff f8de 	bl	800d75c <tcp_oos_insert_segment>
                }
                break;
 800e5a0:	e139      	b.n	800e816 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d117      	bne.n	800e5d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e5a8:	4b2e      	ldr	r3, [pc, #184]	; (800e664 <tcp_receive+0xd00>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	da57      	bge.n	800e668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5b8:	4829      	ldr	r0, [pc, #164]	; (800e660 <tcp_receive+0xcfc>)
 800e5ba:	f7fd fb81 	bl	800bcc0 <tcp_seg_copy>
 800e5be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8129 	beq.w	800e81a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e5ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5d0:	69b8      	ldr	r0, [r7, #24]
 800e5d2:	f7ff f8c3 	bl	800d75c <tcp_oos_insert_segment>
                  }
                  break;
 800e5d6:	e120      	b.n	800e81a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e5d8:	4b22      	ldr	r3, [pc, #136]	; (800e664 <tcp_receive+0xd00>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	db3e      	blt.n	800e668 <tcp_receive+0xd04>
 800e5ea:	4b1e      	ldr	r3, [pc, #120]	; (800e664 <tcp_receive+0xd00>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc35      	bgt.n	800e668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5fc:	4818      	ldr	r0, [pc, #96]	; (800e660 <tcp_receive+0xcfc>)
 800e5fe:	f7fd fb5f 	bl	800bcc0 <tcp_seg_copy>
 800e602:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 8109 	beq.w	800e81e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e614:	8912      	ldrh	r2, [r2, #8]
 800e616:	441a      	add	r2, r3
 800e618:	4b12      	ldr	r3, [pc, #72]	; (800e664 <tcp_receive+0xd00>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dd12      	ble.n	800e648 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e622:	4b10      	ldr	r3, [pc, #64]	; (800e664 <tcp_receive+0xd00>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	b29a      	uxth	r2, r3
 800e628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	b29a      	uxth	r2, r3
 800e634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e636:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63e:	891b      	ldrh	r3, [r3, #8]
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f7fb ff1a 	bl	800a47c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64a:	69fa      	ldr	r2, [r7, #28]
 800e64c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e64e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e650:	69f8      	ldr	r0, [r7, #28]
 800e652:	f7ff f883 	bl	800d75c <tcp_oos_insert_segment>
                  }
                  break;
 800e656:	e0e2      	b.n	800e81e <tcp_receive+0xeba>
 800e658:	2000040c 	.word	0x2000040c
 800e65c:	20000409 	.word	0x20000409
 800e660:	200003dc 	.word	0x200003dc
 800e664:	200003fc 	.word	0x200003fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 80c6 	bne.w	800e802 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e676:	4b80      	ldr	r3, [pc, #512]	; (800e878 <tcp_receive+0xf14>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e682:	2b00      	cmp	r3, #0
 800e684:	f340 80bd 	ble.w	800e802 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	899b      	ldrh	r3, [r3, #12]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	4618      	mov	r0, r3
 800e692:	f7fa fddd 	bl	8009250 <lwip_htons>
 800e696:	4603      	mov	r3, r0
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	f003 0301 	and.w	r3, r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f040 80bf 	bne.w	800e822 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e6a4:	4875      	ldr	r0, [pc, #468]	; (800e87c <tcp_receive+0xf18>)
 800e6a6:	f7fd fb0b 	bl	800bcc0 <tcp_seg_copy>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 80b6 	beq.w	800e826 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c2:	8912      	ldrh	r2, [r2, #8]
 800e6c4:	441a      	add	r2, r3
 800e6c6:	4b6c      	ldr	r3, [pc, #432]	; (800e878 <tcp_receive+0xf14>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	1ad3      	subs	r3, r2, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dd12      	ble.n	800e6f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e6d0:	4b69      	ldr	r3, [pc, #420]	; (800e878 <tcp_receive+0xf14>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	1ad3      	subs	r3, r2, r3
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	891b      	ldrh	r3, [r3, #8]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	f7fb fec3 	bl	800a47c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e6f6:	4b62      	ldr	r3, [pc, #392]	; (800e880 <tcp_receive+0xf1c>)
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	4b5e      	ldr	r3, [pc, #376]	; (800e878 <tcp_receive+0xf14>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	441a      	add	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	6879      	ldr	r1, [r7, #4]
 800e708:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e70a:	440b      	add	r3, r1
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f340 8089 	ble.w	800e826 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	899b      	ldrh	r3, [r3, #12]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fa fd96 	bl	8009250 <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 0301 	and.w	r3, r3, #1
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d022      	beq.n	800e776 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	899b      	ldrh	r3, [r3, #12]
 800e738:	b29b      	uxth	r3, r3
 800e73a:	b21b      	sxth	r3, r3
 800e73c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e740:	b21c      	sxth	r4, r3
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	899b      	ldrh	r3, [r3, #12]
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fa fd7f 	bl	8009250 <lwip_htons>
 800e752:	4603      	mov	r3, r0
 800e754:	b2db      	uxtb	r3, r3
 800e756:	b29b      	uxth	r3, r3
 800e758:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fa fd76 	bl	8009250 <lwip_htons>
 800e764:	4603      	mov	r3, r0
 800e766:	b21b      	sxth	r3, r3
 800e768:	4323      	orrs	r3, r4
 800e76a:	b21a      	sxth	r2, r3
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	b292      	uxth	r2, r2
 800e774:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e780:	4413      	add	r3, r2
 800e782:	b299      	uxth	r1, r3
 800e784:	4b3c      	ldr	r3, [pc, #240]	; (800e878 <tcp_receive+0xf14>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	b29a      	uxth	r2, r3
 800e78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	1a8a      	subs	r2, r1, r2
 800e790:	b292      	uxth	r2, r2
 800e792:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	891b      	ldrh	r3, [r3, #8]
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fb fe6a 	bl	800a47c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	891c      	ldrh	r4, [r3, #8]
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	899b      	ldrh	r3, [r3, #12]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fa fd49 	bl	8009250 <lwip_htons>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	f003 0303 	and.w	r3, r3, #3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <tcp_receive+0xe6a>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e000      	b.n	800e7d0 <tcp_receive+0xe6c>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4423      	add	r3, r4
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	4b2a      	ldr	r3, [pc, #168]	; (800e880 <tcp_receive+0xf1c>)
 800e7d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e7d8:	4b29      	ldr	r3, [pc, #164]	; (800e880 <tcp_receive+0xf1c>)
 800e7da:	881b      	ldrh	r3, [r3, #0]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4b26      	ldr	r3, [pc, #152]	; (800e878 <tcp_receive+0xf14>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	441a      	add	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7ec:	440b      	add	r3, r1
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d019      	beq.n	800e826 <tcp_receive+0xec2>
 800e7f2:	4b24      	ldr	r3, [pc, #144]	; (800e884 <tcp_receive+0xf20>)
 800e7f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e7f8:	4923      	ldr	r1, [pc, #140]	; (800e888 <tcp_receive+0xf24>)
 800e7fa:	4824      	ldr	r0, [pc, #144]	; (800e88c <tcp_receive+0xf28>)
 800e7fc:	f007 f83e 	bl	801587c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e800:	e011      	b.n	800e826 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	63bb      	str	r3, [r7, #56]	; 0x38
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f47f aea4 	bne.w	800e558 <tcp_receive+0xbf4>
 800e810:	e00a      	b.n	800e828 <tcp_receive+0xec4>
                break;
 800e812:	bf00      	nop
 800e814:	e008      	b.n	800e828 <tcp_receive+0xec4>
                break;
 800e816:	bf00      	nop
 800e818:	e006      	b.n	800e828 <tcp_receive+0xec4>
                  break;
 800e81a:	bf00      	nop
 800e81c:	e004      	b.n	800e828 <tcp_receive+0xec4>
                  break;
 800e81e:	bf00      	nop
 800e820:	e002      	b.n	800e828 <tcp_receive+0xec4>
                  break;
 800e822:	bf00      	nop
 800e824:	e000      	b.n	800e828 <tcp_receive+0xec4>
                break;
 800e826:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 fa31 	bl	800fc90 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e82e:	e003      	b.n	800e838 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 fa2d 	bl	800fc90 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e836:	e01a      	b.n	800e86e <tcp_receive+0xf0a>
 800e838:	e019      	b.n	800e86e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e83a:	4b0f      	ldr	r3, [pc, #60]	; (800e878 <tcp_receive+0xf14>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	db0a      	blt.n	800e85e <tcp_receive+0xefa>
 800e848:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <tcp_receive+0xf14>)
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	6879      	ldr	r1, [r7, #4]
 800e852:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e854:	440b      	add	r3, r1
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	3301      	adds	r3, #1
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dd07      	ble.n	800e86e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8b5b      	ldrh	r3, [r3, #26]
 800e862:	f043 0302 	orr.w	r3, r3, #2
 800e866:	b29a      	uxth	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e86c:	e7ff      	b.n	800e86e <tcp_receive+0xf0a>
 800e86e:	bf00      	nop
 800e870:	3750      	adds	r7, #80	; 0x50
 800e872:	46bd      	mov	sp, r7
 800e874:	bdb0      	pop	{r4, r5, r7, pc}
 800e876:	bf00      	nop
 800e878:	200003fc 	.word	0x200003fc
 800e87c:	200003dc 	.word	0x200003dc
 800e880:	20000406 	.word	0x20000406
 800e884:	0801a46c 	.word	0x0801a46c
 800e888:	0801a814 	.word	0x0801a814
 800e88c:	0801a4b8 	.word	0x0801a4b8

0800e890 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <tcp_get_next_optbyte+0x5c>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	1c5a      	adds	r2, r3, #1
 800e89c:	b291      	uxth	r1, r2
 800e89e:	4a13      	ldr	r2, [pc, #76]	; (800e8ec <tcp_get_next_optbyte+0x5c>)
 800e8a0:	8011      	strh	r1, [r2, #0]
 800e8a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e8a4:	4b12      	ldr	r3, [pc, #72]	; (800e8f0 <tcp_get_next_optbyte+0x60>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <tcp_get_next_optbyte+0x26>
 800e8ac:	4b11      	ldr	r3, [pc, #68]	; (800e8f4 <tcp_get_next_optbyte+0x64>)
 800e8ae:	881b      	ldrh	r3, [r3, #0]
 800e8b0:	88fa      	ldrh	r2, [r7, #6]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d208      	bcs.n	800e8c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e8b6:	4b10      	ldr	r3, [pc, #64]	; (800e8f8 <tcp_get_next_optbyte+0x68>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3314      	adds	r3, #20
 800e8bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	683a      	ldr	r2, [r7, #0]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	e00b      	b.n	800e8e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e8c8:	88fb      	ldrh	r3, [r7, #6]
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	4b09      	ldr	r3, [pc, #36]	; (800e8f4 <tcp_get_next_optbyte+0x64>)
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e8d6:	4b06      	ldr	r3, [pc, #24]	; (800e8f0 <tcp_get_next_optbyte+0x60>)
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	797b      	ldrb	r3, [r7, #5]
 800e8dc:	4413      	add	r3, r2
 800e8de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	200003f8 	.word	0x200003f8
 800e8f0:	200003f4 	.word	0x200003f4
 800e8f4:	200003f2 	.word	0x200003f2
 800e8f8:	200003ec 	.word	0x200003ec

0800e8fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <tcp_parseopt+0x1c>
 800e90a:	4b32      	ldr	r3, [pc, #200]	; (800e9d4 <tcp_parseopt+0xd8>)
 800e90c:	f240 727d 	movw	r2, #1917	; 0x77d
 800e910:	4931      	ldr	r1, [pc, #196]	; (800e9d8 <tcp_parseopt+0xdc>)
 800e912:	4832      	ldr	r0, [pc, #200]	; (800e9dc <tcp_parseopt+0xe0>)
 800e914:	f006 ffb2 	bl	801587c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e918:	4b31      	ldr	r3, [pc, #196]	; (800e9e0 <tcp_parseopt+0xe4>)
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d055      	beq.n	800e9cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e920:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <tcp_parseopt+0xe8>)
 800e922:	2200      	movs	r2, #0
 800e924:	801a      	strh	r2, [r3, #0]
 800e926:	e045      	b.n	800e9b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e928:	f7ff ffb2 	bl	800e890 <tcp_get_next_optbyte>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e930:	7bfb      	ldrb	r3, [r7, #15]
 800e932:	2b02      	cmp	r3, #2
 800e934:	d006      	beq.n	800e944 <tcp_parseopt+0x48>
 800e936:	2b02      	cmp	r3, #2
 800e938:	dc2b      	bgt.n	800e992 <tcp_parseopt+0x96>
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d041      	beq.n	800e9c2 <tcp_parseopt+0xc6>
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d127      	bne.n	800e992 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e942:	e037      	b.n	800e9b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e944:	f7ff ffa4 	bl	800e890 <tcp_get_next_optbyte>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	d13b      	bne.n	800e9c6 <tcp_parseopt+0xca>
 800e94e:	4b25      	ldr	r3, [pc, #148]	; (800e9e4 <tcp_parseopt+0xe8>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	3301      	adds	r3, #1
 800e954:	4a22      	ldr	r2, [pc, #136]	; (800e9e0 <tcp_parseopt+0xe4>)
 800e956:	8812      	ldrh	r2, [r2, #0]
 800e958:	4293      	cmp	r3, r2
 800e95a:	da34      	bge.n	800e9c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e95c:	f7ff ff98 	bl	800e890 <tcp_get_next_optbyte>
 800e960:	4603      	mov	r3, r0
 800e962:	b29b      	uxth	r3, r3
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e968:	f7ff ff92 	bl	800e890 <tcp_get_next_optbyte>
 800e96c:	4603      	mov	r3, r0
 800e96e:	b29a      	uxth	r2, r3
 800e970:	89bb      	ldrh	r3, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e976:	89bb      	ldrh	r3, [r7, #12]
 800e978:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800e97c:	d804      	bhi.n	800e988 <tcp_parseopt+0x8c>
 800e97e:	89bb      	ldrh	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <tcp_parseopt+0x8c>
 800e984:	89ba      	ldrh	r2, [r7, #12]
 800e986:	e001      	b.n	800e98c <tcp_parseopt+0x90>
 800e988:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e990:	e010      	b.n	800e9b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e992:	f7ff ff7d 	bl	800e890 <tcp_get_next_optbyte>
 800e996:	4603      	mov	r3, r0
 800e998:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d914      	bls.n	800e9ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e9a0:	7afb      	ldrb	r3, [r7, #11]
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <tcp_parseopt+0xe8>)
 800e9a6:	881b      	ldrh	r3, [r3, #0]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b02      	subs	r3, #2
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	4b0c      	ldr	r3, [pc, #48]	; (800e9e4 <tcp_parseopt+0xe8>)
 800e9b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9b4:	4b0b      	ldr	r3, [pc, #44]	; (800e9e4 <tcp_parseopt+0xe8>)
 800e9b6:	881a      	ldrh	r2, [r3, #0]
 800e9b8:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <tcp_parseopt+0xe4>)
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d3b3      	bcc.n	800e928 <tcp_parseopt+0x2c>
 800e9c0:	e004      	b.n	800e9cc <tcp_parseopt+0xd0>
          return;
 800e9c2:	bf00      	nop
 800e9c4:	e002      	b.n	800e9cc <tcp_parseopt+0xd0>
            return;
 800e9c6:	bf00      	nop
 800e9c8:	e000      	b.n	800e9cc <tcp_parseopt+0xd0>
            return;
 800e9ca:	bf00      	nop
      }
    }
  }
}
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0801a46c 	.word	0x0801a46c
 800e9d8:	0801a8d0 	.word	0x0801a8d0
 800e9dc:	0801a4b8 	.word	0x0801a4b8
 800e9e0:	200003f0 	.word	0x200003f0
 800e9e4:	200003f8 	.word	0x200003f8

0800e9e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e9ec:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <tcp_trigger_input_pcb_close+0x1c>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f043 0310 	orr.w	r3, r3, #16
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	4b03      	ldr	r3, [pc, #12]	; (800ea04 <tcp_trigger_input_pcb_close+0x1c>)
 800e9f8:	701a      	strb	r2, [r3, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	20000409 	.word	0x20000409

0800ea08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <tcp_route+0x28>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	7a1b      	ldrb	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d006      	beq.n	800ea30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7a1b      	ldrb	r3, [r3, #8]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fb fb6e 	bl	800a108 <netif_get_by_index>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	e003      	b.n	800ea38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f004 ff95 	bl	8013960 <ip4_route>
 800ea36:	4603      	mov	r3, r0
  }
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ea40:	b590      	push	{r4, r7, lr}
 800ea42:	b087      	sub	sp, #28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	603b      	str	r3, [r7, #0]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d105      	bne.n	800ea62 <tcp_create_segment+0x22>
 800ea56:	4b44      	ldr	r3, [pc, #272]	; (800eb68 <tcp_create_segment+0x128>)
 800ea58:	22a3      	movs	r2, #163	; 0xa3
 800ea5a:	4944      	ldr	r1, [pc, #272]	; (800eb6c <tcp_create_segment+0x12c>)
 800ea5c:	4844      	ldr	r0, [pc, #272]	; (800eb70 <tcp_create_segment+0x130>)
 800ea5e:	f006 ff0d 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d105      	bne.n	800ea74 <tcp_create_segment+0x34>
 800ea68:	4b3f      	ldr	r3, [pc, #252]	; (800eb68 <tcp_create_segment+0x128>)
 800ea6a:	22a4      	movs	r2, #164	; 0xa4
 800ea6c:	4941      	ldr	r1, [pc, #260]	; (800eb74 <tcp_create_segment+0x134>)
 800ea6e:	4840      	ldr	r0, [pc, #256]	; (800eb70 <tcp_create_segment+0x130>)
 800ea70:	f006 ff04 	bl	801587c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ea82:	2003      	movs	r0, #3
 800ea84:	f7fb f83a 	bl	8009afc <memp_malloc>
 800ea88:	6138      	str	r0, [r7, #16]
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ea90:	68b8      	ldr	r0, [r7, #8]
 800ea92:	f7fb fe79 	bl	800a788 <pbuf_free>
    return NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	e061      	b.n	800eb5e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eaa0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	891a      	ldrh	r2, [r3, #8]
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d205      	bcs.n	800eac6 <tcp_create_segment+0x86>
 800eaba:	4b2b      	ldr	r3, [pc, #172]	; (800eb68 <tcp_create_segment+0x128>)
 800eabc:	22b0      	movs	r2, #176	; 0xb0
 800eabe:	492e      	ldr	r1, [pc, #184]	; (800eb78 <tcp_create_segment+0x138>)
 800eac0:	482b      	ldr	r0, [pc, #172]	; (800eb70 <tcp_create_segment+0x130>)
 800eac2:	f006 fedb 	bl	801587c <iprintf>
  seg->len = p->tot_len - optlen;
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	891a      	ldrh	r2, [r3, #8]
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ead6:	2114      	movs	r1, #20
 800ead8:	68b8      	ldr	r0, [r7, #8]
 800eada:	f7fb fdbf 	bl	800a65c <pbuf_add_header>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d004      	beq.n	800eaee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eae4:	6938      	ldr	r0, [r7, #16]
 800eae6:	f7fd f8d2 	bl	800bc8e <tcp_seg_free>
    return NULL;
 800eaea:	2300      	movs	r3, #0
 800eaec:	e037      	b.n	800eb5e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	8ada      	ldrh	r2, [r3, #22]
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	68dc      	ldr	r4, [r3, #12]
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fa fba5 	bl	8009250 <lwip_htons>
 800eb06:	4603      	mov	r3, r0
 800eb08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8b1a      	ldrh	r2, [r3, #24]
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	68dc      	ldr	r4, [r3, #12]
 800eb12:	4610      	mov	r0, r2
 800eb14:	f7fa fb9c 	bl	8009250 <lwip_htons>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	68dc      	ldr	r4, [r3, #12]
 800eb20:	6838      	ldr	r0, [r7, #0]
 800eb22:	f7fa fbaa 	bl	800927a <lwip_htonl>
 800eb26:	4603      	mov	r3, r0
 800eb28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	089b      	lsrs	r3, r3, #2
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	3305      	adds	r3, #5
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	031b      	lsls	r3, r3, #12
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	68dc      	ldr	r4, [r3, #12]
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7fa fb82 	bl	8009250 <lwip_htons>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	749a      	strb	r2, [r3, #18]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	74da      	strb	r2, [r3, #19]
  return seg;
 800eb5c:	693b      	ldr	r3, [r7, #16]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd90      	pop	{r4, r7, pc}
 800eb66:	bf00      	nop
 800eb68:	0801a8ec 	.word	0x0801a8ec
 800eb6c:	0801a920 	.word	0x0801a920
 800eb70:	0801a940 	.word	0x0801a940
 800eb74:	0801a968 	.word	0x0801a968
 800eb78:	0801a98c 	.word	0x0801a98c

0800eb7c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800eb7c:	b590      	push	{r4, r7, lr}
 800eb7e:	b08b      	sub	sp, #44	; 0x2c
 800eb80:	af02      	add	r7, sp, #8
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	460b      	mov	r3, r1
 800eb86:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61fb      	str	r3, [r7, #28]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d106      	bne.n	800eba8 <tcp_split_unsent_seg+0x2c>
 800eb9a:	4b95      	ldr	r3, [pc, #596]	; (800edf0 <tcp_split_unsent_seg+0x274>)
 800eb9c:	f240 324b 	movw	r2, #843	; 0x34b
 800eba0:	4994      	ldr	r1, [pc, #592]	; (800edf4 <tcp_split_unsent_seg+0x278>)
 800eba2:	4895      	ldr	r0, [pc, #596]	; (800edf8 <tcp_split_unsent_seg+0x27c>)
 800eba4:	f006 fe6a 	bl	801587c <iprintf>

  useg = pcb->unsent;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d102      	bne.n	800ebba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb8:	e116      	b.n	800ede8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ebba:	887b      	ldrh	r3, [r7, #2]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d109      	bne.n	800ebd4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ebc0:	4b8b      	ldr	r3, [pc, #556]	; (800edf0 <tcp_split_unsent_seg+0x274>)
 800ebc2:	f240 3253 	movw	r2, #851	; 0x353
 800ebc6:	498d      	ldr	r1, [pc, #564]	; (800edfc <tcp_split_unsent_seg+0x280>)
 800ebc8:	488b      	ldr	r0, [pc, #556]	; (800edf8 <tcp_split_unsent_seg+0x27c>)
 800ebca:	f006 fe57 	bl	801587c <iprintf>
    return ERR_VAL;
 800ebce:	f06f 0305 	mvn.w	r3, #5
 800ebd2:	e109      	b.n	800ede8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	891b      	ldrh	r3, [r3, #8]
 800ebd8:	887a      	ldrh	r2, [r7, #2]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d301      	bcc.n	800ebe2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e102      	b.n	800ede8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebe6:	887a      	ldrh	r2, [r7, #2]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d906      	bls.n	800ebfa <tcp_split_unsent_seg+0x7e>
 800ebec:	4b80      	ldr	r3, [pc, #512]	; (800edf0 <tcp_split_unsent_seg+0x274>)
 800ebee:	f240 325b 	movw	r2, #859	; 0x35b
 800ebf2:	4983      	ldr	r1, [pc, #524]	; (800ee00 <tcp_split_unsent_seg+0x284>)
 800ebf4:	4880      	ldr	r0, [pc, #512]	; (800edf8 <tcp_split_unsent_seg+0x27c>)
 800ebf6:	f006 fe41 	bl	801587c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	891b      	ldrh	r3, [r3, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d106      	bne.n	800ec10 <tcp_split_unsent_seg+0x94>
 800ec02:	4b7b      	ldr	r3, [pc, #492]	; (800edf0 <tcp_split_unsent_seg+0x274>)
 800ec04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ec08:	497e      	ldr	r1, [pc, #504]	; (800ee04 <tcp_split_unsent_seg+0x288>)
 800ec0a:	487b      	ldr	r0, [pc, #492]	; (800edf8 <tcp_split_unsent_seg+0x27c>)
 800ec0c:	f006 fe36 	bl	801587c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	7a9b      	ldrb	r3, [r3, #10]
 800ec14:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	891a      	ldrh	r2, [r3, #8]
 800ec26:	887b      	ldrh	r3, [r7, #2]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	89bb      	ldrh	r3, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	2036      	movs	r0, #54	; 0x36
 800ec3e:	f7fb fabf 	bl	800a1c0 <pbuf_alloc>
 800ec42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80b7 	beq.w	800edba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	891a      	ldrh	r2, [r3, #8]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	891b      	ldrh	r3, [r3, #8]
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	887b      	ldrh	r3, [r7, #2]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	6858      	ldr	r0, [r3, #4]
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	7bbb      	ldrb	r3, [r7, #14]
 800ec6a:	18d1      	adds	r1, r2, r3
 800ec6c:	897b      	ldrh	r3, [r7, #10]
 800ec6e:	89ba      	ldrh	r2, [r7, #12]
 800ec70:	f7fb ff84 	bl	800ab7c <pbuf_copy_partial>
 800ec74:	4603      	mov	r3, r0
 800ec76:	461a      	mov	r2, r3
 800ec78:	89bb      	ldrh	r3, [r7, #12]
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	f040 809f 	bne.w	800edbe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	899b      	ldrh	r3, [r3, #12]
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fa fae1 	bl	8009250 <lwip_htons>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec96:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ec98:	2300      	movs	r3, #0
 800ec9a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ec9c:	7efb      	ldrb	r3, [r7, #27]
 800ec9e:	f003 0308 	and.w	r3, r3, #8
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d007      	beq.n	800ecb6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eca6:	7efb      	ldrb	r3, [r7, #27]
 800eca8:	f023 0308 	bic.w	r3, r3, #8
 800ecac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ecae:	7ebb      	ldrb	r3, [r7, #26]
 800ecb0:	f043 0308 	orr.w	r3, r3, #8
 800ecb4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ecb6:	7efb      	ldrb	r3, [r7, #27]
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d007      	beq.n	800ecd0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ecc0:	7efb      	ldrb	r3, [r7, #27]
 800ecc2:	f023 0301 	bic.w	r3, r3, #1
 800ecc6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ecc8:	7ebb      	ldrb	r3, [r7, #26]
 800ecca:	f043 0301 	orr.w	r3, r3, #1
 800ecce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fa facf 	bl	800927a <lwip_htonl>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	887b      	ldrh	r3, [r7, #2]
 800ece0:	18d1      	adds	r1, r2, r3
 800ece2:	7eba      	ldrb	r2, [r7, #26]
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	460b      	mov	r3, r1
 800ecea:	6939      	ldr	r1, [r7, #16]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff fea7 	bl	800ea40 <tcp_create_segment>
 800ecf2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d063      	beq.n	800edc2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fb fdca 	bl	800a898 <pbuf_clen>
 800ed04:	4603      	mov	r3, r0
 800ed06:	461a      	mov	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed0e:	1a9b      	subs	r3, r3, r2
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	6858      	ldr	r0, [r3, #4]
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	891a      	ldrh	r2, [r3, #8]
 800ed22:	89bb      	ldrh	r3, [r7, #12]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	4619      	mov	r1, r3
 800ed2a:	f7fb fba7 	bl	800a47c <pbuf_realloc>
  useg->len -= remainder;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	891a      	ldrh	r2, [r3, #8]
 800ed32:	89bb      	ldrh	r3, [r7, #12]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	899b      	ldrh	r3, [r3, #12]
 800ed42:	b29c      	uxth	r4, r3
 800ed44:	7efb      	ldrb	r3, [r7, #27]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fa fa81 	bl	8009250 <lwip_htons>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	461a      	mov	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	4322      	orrs	r2, r4
 800ed58:	b292      	uxth	r2, r2
 800ed5a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fb fd99 	bl	800a898 <pbuf_clen>
 800ed66:	4603      	mov	r3, r0
 800ed68:	461a      	mov	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed70:	4413      	add	r3, r2
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fb fd8a 	bl	800a898 <pbuf_clen>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed8e:	4413      	add	r3, r2
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	69fa      	ldr	r2, [r7, #28]
 800eda4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d103      	bne.n	800edb6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	e016      	b.n	800ede8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800edba:	bf00      	nop
 800edbc:	e002      	b.n	800edc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800edbe:	bf00      	nop
 800edc0:	e000      	b.n	800edc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800edc2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d006      	beq.n	800edd8 <tcp_split_unsent_seg+0x25c>
 800edca:	4b09      	ldr	r3, [pc, #36]	; (800edf0 <tcp_split_unsent_seg+0x274>)
 800edcc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800edd0:	490d      	ldr	r1, [pc, #52]	; (800ee08 <tcp_split_unsent_seg+0x28c>)
 800edd2:	4809      	ldr	r0, [pc, #36]	; (800edf8 <tcp_split_unsent_seg+0x27c>)
 800edd4:	f006 fd52 	bl	801587c <iprintf>
  if (p != NULL) {
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800edde:	6938      	ldr	r0, [r7, #16]
 800ede0:	f7fb fcd2 	bl	800a788 <pbuf_free>
  }

  return ERR_MEM;
 800ede4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3724      	adds	r7, #36	; 0x24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd90      	pop	{r4, r7, pc}
 800edf0:	0801a8ec 	.word	0x0801a8ec
 800edf4:	0801ac80 	.word	0x0801ac80
 800edf8:	0801a940 	.word	0x0801a940
 800edfc:	0801aca4 	.word	0x0801aca4
 800ee00:	0801acc8 	.word	0x0801acc8
 800ee04:	0801acd8 	.word	0x0801acd8
 800ee08:	0801ace8 	.word	0x0801ace8

0800ee0c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <tcp_send_fin+0x1c>
 800ee1a:	4b21      	ldr	r3, [pc, #132]	; (800eea0 <tcp_send_fin+0x94>)
 800ee1c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ee20:	4920      	ldr	r1, [pc, #128]	; (800eea4 <tcp_send_fin+0x98>)
 800ee22:	4821      	ldr	r0, [pc, #132]	; (800eea8 <tcp_send_fin+0x9c>)
 800ee24:	f006 fd2a 	bl	801587c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d02e      	beq.n	800ee8e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	e002      	b.n	800ee3e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1f8      	bne.n	800ee38 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	899b      	ldrh	r3, [r3, #12]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fa f9fe 	bl	8009250 <lwip_htons>
 800ee54:	4603      	mov	r3, r0
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f003 0307 	and.w	r3, r3, #7
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d116      	bne.n	800ee8e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	899b      	ldrh	r3, [r3, #12]
 800ee66:	b29c      	uxth	r4, r3
 800ee68:	2001      	movs	r0, #1
 800ee6a:	f7fa f9f1 	bl	8009250 <lwip_htons>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461a      	mov	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	4322      	orrs	r2, r4
 800ee78:	b292      	uxth	r2, r2
 800ee7a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	8b5b      	ldrh	r3, [r3, #26]
 800ee80:	f043 0320 	orr.w	r3, r3, #32
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e004      	b.n	800ee98 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ee8e:	2101      	movs	r1, #1
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f80b 	bl	800eeac <tcp_enqueue_flags>
 800ee96:	4603      	mov	r3, r0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd90      	pop	{r4, r7, pc}
 800eea0:	0801a8ec 	.word	0x0801a8ec
 800eea4:	0801acf4 	.word	0x0801acf4
 800eea8:	0801a940 	.word	0x0801a940

0800eeac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	; 0x28
 800eeb0:	af02      	add	r7, sp, #8
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eec0:	78fb      	ldrb	r3, [r7, #3]
 800eec2:	f003 0303 	and.w	r3, r3, #3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <tcp_enqueue_flags+0x2c>
 800eeca:	4b67      	ldr	r3, [pc, #412]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800eecc:	f240 4211 	movw	r2, #1041	; 0x411
 800eed0:	4966      	ldr	r1, [pc, #408]	; (800f06c <tcp_enqueue_flags+0x1c0>)
 800eed2:	4867      	ldr	r0, [pc, #412]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800eed4:	f006 fcd2 	bl	801587c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d106      	bne.n	800eeec <tcp_enqueue_flags+0x40>
 800eede:	4b62      	ldr	r3, [pc, #392]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800eee0:	f240 4213 	movw	r2, #1043	; 0x413
 800eee4:	4963      	ldr	r1, [pc, #396]	; (800f074 <tcp_enqueue_flags+0x1c8>)
 800eee6:	4862      	ldr	r0, [pc, #392]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800eee8:	f006 fcc8 	bl	801587c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	f003 0302 	and.w	r3, r3, #2
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800eef6:	2301      	movs	r3, #1
 800eef8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eefa:	7ffb      	ldrb	r3, [r7, #31]
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef0e:	4619      	mov	r1, r3
 800ef10:	2036      	movs	r0, #54	; 0x36
 800ef12:	f7fb f955 	bl	800a1c0 <pbuf_alloc>
 800ef16:	6138      	str	r0, [r7, #16]
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d109      	bne.n	800ef32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8b5b      	ldrh	r3, [r3, #26]
 800ef22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef30:	e095      	b.n	800f05e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	895a      	ldrh	r2, [r3, #10]
 800ef36:	7dfb      	ldrb	r3, [r7, #23]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d206      	bcs.n	800ef4c <tcp_enqueue_flags+0xa0>
 800ef3e:	4b4a      	ldr	r3, [pc, #296]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800ef40:	f240 4239 	movw	r2, #1081	; 0x439
 800ef44:	494c      	ldr	r1, [pc, #304]	; (800f078 <tcp_enqueue_flags+0x1cc>)
 800ef46:	484a      	ldr	r0, [pc, #296]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800ef48:	f006 fc98 	bl	801587c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ef50:	78fa      	ldrb	r2, [r7, #3]
 800ef52:	7ffb      	ldrb	r3, [r7, #31]
 800ef54:	9300      	str	r3, [sp, #0]
 800ef56:	460b      	mov	r3, r1
 800ef58:	6939      	ldr	r1, [r7, #16]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f7ff fd70 	bl	800ea40 <tcp_create_segment>
 800ef60:	60f8      	str	r0, [r7, #12]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d109      	bne.n	800ef7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	8b5b      	ldrh	r3, [r3, #26]
 800ef6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef76:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7a:	e070      	b.n	800f05e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	f003 0303 	and.w	r3, r3, #3
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d006      	beq.n	800ef96 <tcp_enqueue_flags+0xea>
 800ef88:	4b37      	ldr	r3, [pc, #220]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800ef8a:	f240 4242 	movw	r2, #1090	; 0x442
 800ef8e:	493b      	ldr	r1, [pc, #236]	; (800f07c <tcp_enqueue_flags+0x1d0>)
 800ef90:	4837      	ldr	r0, [pc, #220]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800ef92:	f006 fc73 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	891b      	ldrh	r3, [r3, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d006      	beq.n	800efac <tcp_enqueue_flags+0x100>
 800ef9e:	4b32      	ldr	r3, [pc, #200]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800efa0:	f240 4243 	movw	r2, #1091	; 0x443
 800efa4:	4936      	ldr	r1, [pc, #216]	; (800f080 <tcp_enqueue_flags+0x1d4>)
 800efa6:	4832      	ldr	r0, [pc, #200]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800efa8:	f006 fc68 	bl	801587c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d103      	bne.n	800efbc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	66da      	str	r2, [r3, #108]	; 0x6c
 800efba:	e00d      	b.n	800efd8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc0:	61bb      	str	r3, [r7, #24]
 800efc2:	e002      	b.n	800efca <tcp_enqueue_flags+0x11e>
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	61bb      	str	r3, [r7, #24]
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f8      	bne.n	800efc4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800efe0:	78fb      	ldrb	r3, [r7, #3]
 800efe2:	f003 0302 	and.w	r3, r3, #2
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d104      	bne.n	800eff4 <tcp_enqueue_flags+0x148>
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eff8:	1c5a      	adds	r2, r3, #1
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	f003 0301 	and.w	r3, r3, #1
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	8b5b      	ldrh	r3, [r3, #26]
 800f00c:	f043 0320 	orr.w	r3, r3, #32
 800f010:	b29a      	uxth	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fb fc3c 	bl	800a898 <pbuf_clen>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f02a:	4413      	add	r3, r2
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d00e      	beq.n	800f05c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10a      	bne.n	800f05c <tcp_enqueue_flags+0x1b0>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <tcp_enqueue_flags+0x1b0>
 800f04e:	4b06      	ldr	r3, [pc, #24]	; (800f068 <tcp_enqueue_flags+0x1bc>)
 800f050:	f240 4265 	movw	r2, #1125	; 0x465
 800f054:	490b      	ldr	r1, [pc, #44]	; (800f084 <tcp_enqueue_flags+0x1d8>)
 800f056:	4806      	ldr	r0, [pc, #24]	; (800f070 <tcp_enqueue_flags+0x1c4>)
 800f058:	f006 fc10 	bl	801587c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3720      	adds	r7, #32
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	0801a8ec 	.word	0x0801a8ec
 800f06c:	0801ad10 	.word	0x0801ad10
 800f070:	0801a940 	.word	0x0801a940
 800f074:	0801ad68 	.word	0x0801ad68
 800f078:	0801ad88 	.word	0x0801ad88
 800f07c:	0801adc4 	.word	0x0801adc4
 800f080:	0801addc 	.word	0x0801addc
 800f084:	0801ae08 	.word	0x0801ae08

0800f088 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f088:	b5b0      	push	{r4, r5, r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_output+0x1c>
 800f096:	4b9e      	ldr	r3, [pc, #632]	; (800f310 <tcp_output+0x288>)
 800f098:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f09c:	499d      	ldr	r1, [pc, #628]	; (800f314 <tcp_output+0x28c>)
 800f09e:	489e      	ldr	r0, [pc, #632]	; (800f318 <tcp_output+0x290>)
 800f0a0:	f006 fbec 	bl	801587c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7d1b      	ldrb	r3, [r3, #20]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d106      	bne.n	800f0ba <tcp_output+0x32>
 800f0ac:	4b98      	ldr	r3, [pc, #608]	; (800f310 <tcp_output+0x288>)
 800f0ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f0b2:	499a      	ldr	r1, [pc, #616]	; (800f31c <tcp_output+0x294>)
 800f0b4:	4898      	ldr	r0, [pc, #608]	; (800f318 <tcp_output+0x290>)
 800f0b6:	f006 fbe1 	bl	801587c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f0ba:	4b99      	ldr	r3, [pc, #612]	; (800f320 <tcp_output+0x298>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d101      	bne.n	800f0c8 <tcp_output+0x40>
    return ERR_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	e1ce      	b.n	800f466 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	bf28      	it	cs
 800f0d8:	4613      	movcs	r3, r2
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10b      	bne.n	800f102 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	8b5b      	ldrh	r3, [r3, #26]
 800f0ee:	f003 0302 	and.w	r3, r3, #2
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 81aa 	beq.w	800f44c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fdc9 	bl	800fc90 <tcp_send_empty_ack>
 800f0fe:	4603      	mov	r3, r0
 800f100:	e1b1      	b.n	800f466 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f102:	6879      	ldr	r1, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	461a      	mov	r2, r3
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f7ff fc7c 	bl	800ea08 <tcp_route>
 800f110:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d102      	bne.n	800f11e <tcp_output+0x96>
    return ERR_RTE;
 800f118:	f06f 0303 	mvn.w	r3, #3
 800f11c:	e1a3      	b.n	800f466 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d003      	beq.n	800f12c <tcp_output+0xa4>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d111      	bne.n	800f150 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d002      	beq.n	800f138 <tcp_output+0xb0>
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	3304      	adds	r3, #4
 800f136:	e000      	b.n	800f13a <tcp_output+0xb2>
 800f138:	2300      	movs	r3, #0
 800f13a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d102      	bne.n	800f148 <tcp_output+0xc0>
      return ERR_RTE;
 800f142:	f06f 0303 	mvn.w	r3, #3
 800f146:	e18e      	b.n	800f466 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	4618      	mov	r0, r3
 800f158:	f7fa f88f 	bl	800927a <lwip_htonl>
 800f15c:	4602      	mov	r2, r0
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f166:	8912      	ldrh	r2, [r2, #8]
 800f168:	4413      	add	r3, r2
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d227      	bcs.n	800f1c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f176:	461a      	mov	r2, r3
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d114      	bne.n	800f1a8 <tcp_output+0x120>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f182:	2b00      	cmp	r3, #0
 800f184:	d110      	bne.n	800f1a8 <tcp_output+0x120>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10b      	bne.n	800f1a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8b5b      	ldrh	r3, [r3, #26]
 800f1ac:	f003 0302 	and.w	r3, r3, #2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f000 814d 	beq.w	800f450 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 fd6a 	bl	800fc90 <tcp_send_empty_ack>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	e152      	b.n	800f466 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f000 811c 	beq.w	800f40e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f1d6:	e002      	b.n	800f1de <tcp_output+0x156>
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	623b      	str	r3, [r7, #32]
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1f8      	bne.n	800f1d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f1e6:	e112      	b.n	800f40e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	899b      	ldrh	r3, [r3, #12]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fa f82d 	bl	8009250 <lwip_htons>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	f003 0304 	and.w	r3, r3, #4
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d006      	beq.n	800f210 <tcp_output+0x188>
 800f202:	4b43      	ldr	r3, [pc, #268]	; (800f310 <tcp_output+0x288>)
 800f204:	f240 5236 	movw	r2, #1334	; 0x536
 800f208:	4946      	ldr	r1, [pc, #280]	; (800f324 <tcp_output+0x29c>)
 800f20a:	4843      	ldr	r0, [pc, #268]	; (800f318 <tcp_output+0x290>)
 800f20c:	f006 fb36 	bl	801587c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f214:	2b00      	cmp	r3, #0
 800f216:	d01f      	beq.n	800f258 <tcp_output+0x1d0>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	8b5b      	ldrh	r3, [r3, #26]
 800f21c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f220:	2b00      	cmp	r3, #0
 800f222:	d119      	bne.n	800f258 <tcp_output+0x1d0>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00b      	beq.n	800f244 <tcp_output+0x1bc>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d110      	bne.n	800f258 <tcp_output+0x1d0>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f23a:	891a      	ldrh	r2, [r3, #8]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f240:	429a      	cmp	r2, r3
 800f242:	d209      	bcs.n	800f258 <tcp_output+0x1d0>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d004      	beq.n	800f258 <tcp_output+0x1d0>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f254:	2b0f      	cmp	r3, #15
 800f256:	d901      	bls.n	800f25c <tcp_output+0x1d4>
 800f258:	2301      	movs	r3, #1
 800f25a:	e000      	b.n	800f25e <tcp_output+0x1d6>
 800f25c:	2300      	movs	r3, #0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	8b5b      	ldrh	r3, [r3, #26]
 800f266:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f000 80e4 	beq.w	800f438 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7d1b      	ldrb	r3, [r3, #20]
 800f274:	2b02      	cmp	r3, #2
 800f276:	d00d      	beq.n	800f294 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	899b      	ldrh	r3, [r3, #12]
 800f27e:	b29c      	uxth	r4, r3
 800f280:	2010      	movs	r0, #16
 800f282:	f7f9 ffe5 	bl	8009250 <lwip_htons>
 800f286:	4603      	mov	r3, r0
 800f288:	461a      	mov	r2, r3
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	4322      	orrs	r2, r4
 800f290:	b292      	uxth	r2, r2
 800f292:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	6879      	ldr	r1, [r7, #4]
 800f298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f29a:	f000 f909 	bl	800f4b0 <tcp_output_segment>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d009      	beq.n	800f2be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	8b5b      	ldrh	r3, [r3, #26]
 800f2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	835a      	strh	r2, [r3, #26]
      return err;
 800f2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2bc:	e0d3      	b.n	800f466 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d006      	beq.n	800f2dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	8b5b      	ldrh	r3, [r3, #26]
 800f2d2:	f023 0303 	bic.w	r3, r3, #3
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f9 ffc9 	bl	800927a <lwip_htonl>
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	461d      	mov	r5, r3
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	899b      	ldrh	r3, [r3, #12]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f9 ffa9 	bl	8009250 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	b2db      	uxtb	r3, r3
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00e      	beq.n	800f328 <tcp_output+0x2a0>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e00d      	b.n	800f32a <tcp_output+0x2a2>
 800f30e:	bf00      	nop
 800f310:	0801a8ec 	.word	0x0801a8ec
 800f314:	0801ae30 	.word	0x0801ae30
 800f318:	0801a940 	.word	0x0801a940
 800f31c:	0801ae48 	.word	0x0801ae48
 800f320:	20006ad4 	.word	0x20006ad4
 800f324:	0801ae70 	.word	0x0801ae70
 800f328:	2300      	movs	r3, #0
 800f32a:	442b      	add	r3, r5
 800f32c:	4423      	add	r3, r4
 800f32e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	da02      	bge.n	800f342 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f344:	891b      	ldrh	r3, [r3, #8]
 800f346:	461c      	mov	r4, r3
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	899b      	ldrh	r3, [r3, #12]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7f9 ff7d 	bl	8009250 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	f003 0303 	and.w	r3, r3, #3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <tcp_output+0x2de>
 800f362:	2301      	movs	r3, #1
 800f364:	e000      	b.n	800f368 <tcp_output+0x2e0>
 800f366:	2300      	movs	r3, #0
 800f368:	4423      	add	r3, r4
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d049      	beq.n	800f402 <tcp_output+0x37a>
      seg->next = NULL;
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	2200      	movs	r2, #0
 800f372:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d105      	bne.n	800f388 <tcp_output+0x300>
        pcb->unacked = seg;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f380:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	623b      	str	r3, [r7, #32]
 800f386:	e03f      	b.n	800f408 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7f9 ff73 	bl	800927a <lwip_htonl>
 800f394:	4604      	mov	r4, r0
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f9 ff6c 	bl	800927a <lwip_htonl>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	1ae3      	subs	r3, r4, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	da24      	bge.n	800f3f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	3370      	adds	r3, #112	; 0x70
 800f3ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f3b0:	e002      	b.n	800f3b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d011      	beq.n	800f3e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7f9 ff56 	bl	800927a <lwip_htonl>
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f9 ff4f 	bl	800927a <lwip_htonl>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	dbe6      	blt.n	800f3b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	e009      	b.n	800f408 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	623b      	str	r3, [r7, #32]
 800f400:	e002      	b.n	800f408 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f404:	f7fc fc43 	bl	800bc8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	2b00      	cmp	r3, #0
 800f412:	d012      	beq.n	800f43a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7f9 ff2d 	bl	800927a <lwip_htonl>
 800f420:	4602      	mov	r2, r0
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f426:	1ad3      	subs	r3, r2, r3
 800f428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f42a:	8912      	ldrh	r2, [r2, #8]
 800f42c:	4413      	add	r3, r2
  while (seg != NULL &&
 800f42e:	69ba      	ldr	r2, [r7, #24]
 800f430:	429a      	cmp	r2, r3
 800f432:	f4bf aed9 	bcs.w	800f1e8 <tcp_output+0x160>
 800f436:	e000      	b.n	800f43a <tcp_output+0x3b2>
      break;
 800f438:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d108      	bne.n	800f454 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f44a:	e004      	b.n	800f456 <tcp_output+0x3ce>
    goto output_done;
 800f44c:	bf00      	nop
 800f44e:	e002      	b.n	800f456 <tcp_output+0x3ce>
    goto output_done;
 800f450:	bf00      	nop
 800f452:	e000      	b.n	800f456 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f454:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	8b5b      	ldrh	r3, [r3, #26]
 800f45a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f45e:	b29a      	uxth	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3728      	adds	r7, #40	; 0x28
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bdb0      	pop	{r4, r5, r7, pc}
 800f46e:	bf00      	nop

0800f470 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d106      	bne.n	800f48c <tcp_output_segment_busy+0x1c>
 800f47e:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <tcp_output_segment_busy+0x34>)
 800f480:	f240 529a 	movw	r2, #1434	; 0x59a
 800f484:	4908      	ldr	r1, [pc, #32]	; (800f4a8 <tcp_output_segment_busy+0x38>)
 800f486:	4809      	ldr	r0, [pc, #36]	; (800f4ac <tcp_output_segment_busy+0x3c>)
 800f488:	f006 f9f8 	bl	801587c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	7b9b      	ldrb	r3, [r3, #14]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d001      	beq.n	800f49a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f496:	2301      	movs	r3, #1
 800f498:	e000      	b.n	800f49c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	0801a8ec 	.word	0x0801a8ec
 800f4a8:	0801ae88 	.word	0x0801ae88
 800f4ac:	0801a940 	.word	0x0801a940

0800f4b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f4b0:	b5b0      	push	{r4, r5, r7, lr}
 800f4b2:	b08c      	sub	sp, #48	; 0x30
 800f4b4:	af04      	add	r7, sp, #16
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d106      	bne.n	800f4d0 <tcp_output_segment+0x20>
 800f4c2:	4b63      	ldr	r3, [pc, #396]	; (800f650 <tcp_output_segment+0x1a0>)
 800f4c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f4c8:	4962      	ldr	r1, [pc, #392]	; (800f654 <tcp_output_segment+0x1a4>)
 800f4ca:	4863      	ldr	r0, [pc, #396]	; (800f658 <tcp_output_segment+0x1a8>)
 800f4cc:	f006 f9d6 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d106      	bne.n	800f4e4 <tcp_output_segment+0x34>
 800f4d6:	4b5e      	ldr	r3, [pc, #376]	; (800f650 <tcp_output_segment+0x1a0>)
 800f4d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f4dc:	495f      	ldr	r1, [pc, #380]	; (800f65c <tcp_output_segment+0x1ac>)
 800f4de:	485e      	ldr	r0, [pc, #376]	; (800f658 <tcp_output_segment+0x1a8>)
 800f4e0:	f006 f9cc 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <tcp_output_segment+0x48>
 800f4ea:	4b59      	ldr	r3, [pc, #356]	; (800f650 <tcp_output_segment+0x1a0>)
 800f4ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f4f0:	495b      	ldr	r1, [pc, #364]	; (800f660 <tcp_output_segment+0x1b0>)
 800f4f2:	4859      	ldr	r0, [pc, #356]	; (800f658 <tcp_output_segment+0x1a8>)
 800f4f4:	f006 f9c2 	bl	801587c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff ffb9 	bl	800f470 <tcp_output_segment_busy>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f504:	2300      	movs	r3, #0
 800f506:	e09f      	b.n	800f648 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	68dc      	ldr	r4, [r3, #12]
 800f510:	4610      	mov	r0, r2
 800f512:	f7f9 feb2 	bl	800927a <lwip_htonl>
 800f516:	4603      	mov	r3, r0
 800f518:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	68dc      	ldr	r4, [r3, #12]
 800f522:	4610      	mov	r0, r2
 800f524:	f7f9 fe94 	bl	8009250 <lwip_htons>
 800f528:	4603      	mov	r3, r0
 800f52a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f534:	441a      	add	r2, r3
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	3314      	adds	r3, #20
 800f540:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	7a9b      	ldrb	r3, [r3, #10]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d015      	beq.n	800f57a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	3304      	adds	r3, #4
 800f552:	461a      	mov	r2, r3
 800f554:	6879      	ldr	r1, [r7, #4]
 800f556:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800f55a:	f7fc fe8f 	bl	800c27c <tcp_eff_send_mss_netif>
 800f55e:	4603      	mov	r3, r0
 800f560:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f562:	8b7b      	ldrh	r3, [r7, #26]
 800f564:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f9 fe86 	bl	800927a <lwip_htonl>
 800f56e:	4602      	mov	r2, r0
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	3304      	adds	r3, #4
 800f578:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f580:	2b00      	cmp	r3, #0
 800f582:	da02      	bge.n	800f58a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2200      	movs	r2, #0
 800f588:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d10c      	bne.n	800f5ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f592:	4b34      	ldr	r3, [pc, #208]	; (800f664 <tcp_output_segment+0x1b4>)
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7f9 fe6a 	bl	800927a <lwip_htonl>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	68da      	ldr	r2, [r3, #12]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	8959      	ldrh	r1, [r3, #10]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	8b3a      	ldrh	r2, [r7, #24]
 800f5c6:	1a8a      	subs	r2, r1, r2
 800f5c8:	b292      	uxth	r2, r2
 800f5ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	8919      	ldrh	r1, [r3, #8]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	8b3a      	ldrh	r2, [r7, #24]
 800f5d8:	1a8a      	subs	r2, r1, r2
 800f5da:	b292      	uxth	r2, r2
 800f5dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	68d2      	ldr	r2, [r2, #12]
 800f5e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	741a      	strb	r2, [r3, #16]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	f103 0214 	add.w	r2, r3, #20
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	7a9b      	ldrb	r3, [r3, #10]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	f003 0304 	and.w	r3, r3, #4
 800f606:	4413      	add	r3, r2
 800f608:	69fa      	ldr	r2, [r7, #28]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d006      	beq.n	800f61c <tcp_output_segment+0x16c>
 800f60e:	4b10      	ldr	r3, [pc, #64]	; (800f650 <tcp_output_segment+0x1a0>)
 800f610:	f240 621c 	movw	r2, #1564	; 0x61c
 800f614:	4914      	ldr	r1, [pc, #80]	; (800f668 <tcp_output_segment+0x1b8>)
 800f616:	4810      	ldr	r0, [pc, #64]	; (800f658 <tcp_output_segment+0x1a8>)
 800f618:	f006 f930 	bl	801587c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6858      	ldr	r0, [r3, #4]
 800f620:	68b9      	ldr	r1, [r7, #8]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	1d1c      	adds	r4, r3, #4
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	7add      	ldrb	r5, [r3, #11]
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	7a9b      	ldrb	r3, [r3, #10]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	9202      	str	r2, [sp, #8]
 800f632:	2206      	movs	r2, #6
 800f634:	9201      	str	r2, [sp, #4]
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	462b      	mov	r3, r5
 800f63a:	4622      	mov	r2, r4
 800f63c:	f004 fb6c 	bl	8013d18 <ip4_output_if>
 800f640:	4603      	mov	r3, r0
 800f642:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3720      	adds	r7, #32
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bdb0      	pop	{r4, r5, r7, pc}
 800f650:	0801a8ec 	.word	0x0801a8ec
 800f654:	0801aeb0 	.word	0x0801aeb0
 800f658:	0801a940 	.word	0x0801a940
 800f65c:	0801aed0 	.word	0x0801aed0
 800f660:	0801aef0 	.word	0x0801aef0
 800f664:	20006ac4 	.word	0x20006ac4
 800f668:	0801af14 	.word	0x0801af14

0800f66c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f66c:	b5b0      	push	{r4, r5, r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d106      	bne.n	800f688 <tcp_rexmit_rto_prepare+0x1c>
 800f67a:	4b31      	ldr	r3, [pc, #196]	; (800f740 <tcp_rexmit_rto_prepare+0xd4>)
 800f67c:	f240 6263 	movw	r2, #1635	; 0x663
 800f680:	4930      	ldr	r1, [pc, #192]	; (800f744 <tcp_rexmit_rto_prepare+0xd8>)
 800f682:	4831      	ldr	r0, [pc, #196]	; (800f748 <tcp_rexmit_rto_prepare+0xdc>)
 800f684:	f006 f8fa 	bl	801587c <iprintf>

  if (pcb->unacked == NULL) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d102      	bne.n	800f696 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f690:	f06f 0305 	mvn.w	r3, #5
 800f694:	e050      	b.n	800f738 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f69a:	60fb      	str	r3, [r7, #12]
 800f69c:	e00b      	b.n	800f6b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f7ff fee6 	bl	800f470 <tcp_output_segment_busy>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f6aa:	f06f 0305 	mvn.w	r3, #5
 800f6ae:	e043      	b.n	800f738 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ef      	bne.n	800f69e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7ff fed6 	bl	800f470 <tcp_output_segment_busy>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f6ca:	f06f 0305 	mvn.w	r3, #5
 800f6ce:	e033      	b.n	800f738 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	8b5b      	ldrh	r3, [r3, #26]
 800f6ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f9 fdbd 	bl	800927a <lwip_htonl>
 800f700:	4604      	mov	r4, r0
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	891b      	ldrh	r3, [r3, #8]
 800f706:	461d      	mov	r5, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	899b      	ldrh	r3, [r3, #12]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4618      	mov	r0, r3
 800f712:	f7f9 fd9d 	bl	8009250 <lwip_htons>
 800f716:	4603      	mov	r3, r0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <tcp_rexmit_rto_prepare+0xba>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <tcp_rexmit_rto_prepare+0xbc>
 800f726:	2300      	movs	r3, #0
 800f728:	442b      	add	r3, r5
 800f72a:	18e2      	adds	r2, r4, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bdb0      	pop	{r4, r5, r7, pc}
 800f740:	0801a8ec 	.word	0x0801a8ec
 800f744:	0801af28 	.word	0x0801af28
 800f748:	0801a940 	.word	0x0801a940

0800f74c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <tcp_rexmit_rto_commit+0x1c>
 800f75a:	4b0d      	ldr	r3, [pc, #52]	; (800f790 <tcp_rexmit_rto_commit+0x44>)
 800f75c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f760:	490c      	ldr	r1, [pc, #48]	; (800f794 <tcp_rexmit_rto_commit+0x48>)
 800f762:	480d      	ldr	r0, [pc, #52]	; (800f798 <tcp_rexmit_rto_commit+0x4c>)
 800f764:	f006 f88a 	bl	801587c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f76e:	2bff      	cmp	r3, #255	; 0xff
 800f770:	d007      	beq.n	800f782 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f778:	3301      	adds	r3, #1
 800f77a:	b2da      	uxtb	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7ff fc80 	bl	800f088 <tcp_output>
}
 800f788:	bf00      	nop
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	0801a8ec 	.word	0x0801a8ec
 800f794:	0801af4c 	.word	0x0801af4c
 800f798:	0801a940 	.word	0x0801a940

0800f79c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d106      	bne.n	800f7b8 <tcp_rexmit_rto+0x1c>
 800f7aa:	4b0a      	ldr	r3, [pc, #40]	; (800f7d4 <tcp_rexmit_rto+0x38>)
 800f7ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f7b0:	4909      	ldr	r1, [pc, #36]	; (800f7d8 <tcp_rexmit_rto+0x3c>)
 800f7b2:	480a      	ldr	r0, [pc, #40]	; (800f7dc <tcp_rexmit_rto+0x40>)
 800f7b4:	f006 f862 	bl	801587c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff ff57 	bl	800f66c <tcp_rexmit_rto_prepare>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d102      	bne.n	800f7ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff ffc1 	bl	800f74c <tcp_rexmit_rto_commit>
  }
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	0801a8ec 	.word	0x0801a8ec
 800f7d8:	0801af70 	.word	0x0801af70
 800f7dc:	0801a940 	.word	0x0801a940

0800f7e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f7e0:	b590      	push	{r4, r7, lr}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_rexmit+0x1c>
 800f7ee:	4b2f      	ldr	r3, [pc, #188]	; (800f8ac <tcp_rexmit+0xcc>)
 800f7f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f7f4:	492e      	ldr	r1, [pc, #184]	; (800f8b0 <tcp_rexmit+0xd0>)
 800f7f6:	482f      	ldr	r0, [pc, #188]	; (800f8b4 <tcp_rexmit+0xd4>)
 800f7f8:	f006 f840 	bl	801587c <iprintf>

  if (pcb->unacked == NULL) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f800:	2b00      	cmp	r3, #0
 800f802:	d102      	bne.n	800f80a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f804:	f06f 0305 	mvn.w	r3, #5
 800f808:	e04c      	b.n	800f8a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f810:	68b8      	ldr	r0, [r7, #8]
 800f812:	f7ff fe2d 	bl	800f470 <tcp_output_segment_busy>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f81c:	f06f 0305 	mvn.w	r3, #5
 800f820:	e040      	b.n	800f8a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	336c      	adds	r3, #108	; 0x6c
 800f82e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f830:	e002      	b.n	800f838 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d011      	beq.n	800f864 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f7f9 fd16 	bl	800927a <lwip_htonl>
 800f84e:	4604      	mov	r4, r0
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	4618      	mov	r0, r3
 800f858:	f7f9 fd0f 	bl	800927a <lwip_htonl>
 800f85c:	4603      	mov	r3, r0
 800f85e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f860:	2b00      	cmp	r3, #0
 800f862:	dbe6      	blt.n	800f832 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d103      	bne.n	800f882 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f888:	2bff      	cmp	r3, #255	; 0xff
 800f88a:	d007      	beq.n	800f89c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f892:	3301      	adds	r3, #1
 800f894:	b2da      	uxtb	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3714      	adds	r7, #20
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd90      	pop	{r4, r7, pc}
 800f8ac:	0801a8ec 	.word	0x0801a8ec
 800f8b0:	0801af8c 	.word	0x0801af8c
 800f8b4:	0801a940 	.word	0x0801a940

0800f8b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d106      	bne.n	800f8d4 <tcp_rexmit_fast+0x1c>
 800f8c6:	4b2a      	ldr	r3, [pc, #168]	; (800f970 <tcp_rexmit_fast+0xb8>)
 800f8c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f8cc:	4929      	ldr	r1, [pc, #164]	; (800f974 <tcp_rexmit_fast+0xbc>)
 800f8ce:	482a      	ldr	r0, [pc, #168]	; (800f978 <tcp_rexmit_fast+0xc0>)
 800f8d0:	f005 ffd4 	bl	801587c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d044      	beq.n	800f966 <tcp_rexmit_fast+0xae>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8b5b      	ldrh	r3, [r3, #26]
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d13e      	bne.n	800f966 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff ff79 	bl	800f7e0 <tcp_rexmit>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d138      	bne.n	800f966 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f900:	4293      	cmp	r3, r2
 800f902:	bf28      	it	cs
 800f904:	4613      	movcs	r3, r2
 800f906:	b29b      	uxth	r3, r3
 800f908:	0fda      	lsrs	r2, r3, #31
 800f90a:	4413      	add	r3, r2
 800f90c:	105b      	asrs	r3, r3, #1
 800f90e:	b29a      	uxth	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f91c:	461a      	mov	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f922:	005b      	lsls	r3, r3, #1
 800f924:	429a      	cmp	r2, r3
 800f926:	d206      	bcs.n	800f936 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	b29a      	uxth	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f940:	4619      	mov	r1, r3
 800f942:	0049      	lsls	r1, r1, #1
 800f944:	440b      	add	r3, r1
 800f946:	b29b      	uxth	r3, r3
 800f948:	4413      	add	r3, r2
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	8b5b      	ldrh	r3, [r3, #26]
 800f956:	f043 0304 	orr.w	r3, r3, #4
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	0801a8ec 	.word	0x0801a8ec
 800f974:	0801afa4 	.word	0x0801afa4
 800f978:	0801a940 	.word	0x0801a940

0800f97c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b086      	sub	sp, #24
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	607b      	str	r3, [r7, #4]
 800f986:	460b      	mov	r3, r1
 800f988:	817b      	strh	r3, [r7, #10]
 800f98a:	4613      	mov	r3, r2
 800f98c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f98e:	897a      	ldrh	r2, [r7, #10]
 800f990:	893b      	ldrh	r3, [r7, #8]
 800f992:	4413      	add	r3, r2
 800f994:	b29b      	uxth	r3, r3
 800f996:	3314      	adds	r3, #20
 800f998:	b29b      	uxth	r3, r3
 800f99a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f99e:	4619      	mov	r1, r3
 800f9a0:	2022      	movs	r0, #34	; 0x22
 800f9a2:	f7fa fc0d 	bl	800a1c0 <pbuf_alloc>
 800f9a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d04d      	beq.n	800fa4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f9ae:	897b      	ldrh	r3, [r7, #10]
 800f9b0:	3313      	adds	r3, #19
 800f9b2:	697a      	ldr	r2, [r7, #20]
 800f9b4:	8952      	ldrh	r2, [r2, #10]
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	db06      	blt.n	800f9c8 <tcp_output_alloc_header_common+0x4c>
 800f9ba:	4b26      	ldr	r3, [pc, #152]	; (800fa54 <tcp_output_alloc_header_common+0xd8>)
 800f9bc:	f240 7223 	movw	r2, #1827	; 0x723
 800f9c0:	4925      	ldr	r1, [pc, #148]	; (800fa58 <tcp_output_alloc_header_common+0xdc>)
 800f9c2:	4826      	ldr	r0, [pc, #152]	; (800fa5c <tcp_output_alloc_header_common+0xe0>)
 800f9c4:	f005 ff5a 	bl	801587c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f9ce:	8c3b      	ldrh	r3, [r7, #32]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7f9 fc3d 	bl	8009250 <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	461a      	mov	r2, r3
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f9de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7f9 fc35 	bl	8009250 <lwip_htons>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f7f9 fc40 	bl	800927a <lwip_htonl>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fa00:	897b      	ldrh	r3, [r7, #10]
 800fa02:	089b      	lsrs	r3, r3, #2
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	3305      	adds	r3, #5
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	031b      	lsls	r3, r3, #12
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4313      	orrs	r3, r2
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f9 fc19 	bl	8009250 <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	461a      	mov	r2, r3
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fa26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7f9 fc11 	bl	8009250 <lwip_htons>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	461a      	mov	r2, r3
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	741a      	strb	r2, [r3, #16]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	2200      	movs	r2, #0
 800fa44:	749a      	strb	r2, [r3, #18]
 800fa46:	2200      	movs	r2, #0
 800fa48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fa4a:	697b      	ldr	r3, [r7, #20]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	0801a8ec 	.word	0x0801a8ec
 800fa58:	0801afc4 	.word	0x0801afc4
 800fa5c:	0801a940 	.word	0x0801a940

0800fa60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fa60:	b5b0      	push	{r4, r5, r7, lr}
 800fa62:	b08a      	sub	sp, #40	; 0x28
 800fa64:	af04      	add	r7, sp, #16
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	607b      	str	r3, [r7, #4]
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	817b      	strh	r3, [r7, #10]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d106      	bne.n	800fa86 <tcp_output_alloc_header+0x26>
 800fa78:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <tcp_output_alloc_header+0x70>)
 800fa7a:	f240 7242 	movw	r2, #1858	; 0x742
 800fa7e:	4915      	ldr	r1, [pc, #84]	; (800fad4 <tcp_output_alloc_header+0x74>)
 800fa80:	4815      	ldr	r0, [pc, #84]	; (800fad8 <tcp_output_alloc_header+0x78>)
 800fa82:	f005 fefb 	bl	801587c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	8adb      	ldrh	r3, [r3, #22]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	8b12      	ldrh	r2, [r2, #24]
 800fa92:	68f9      	ldr	r1, [r7, #12]
 800fa94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fa96:	893d      	ldrh	r5, [r7, #8]
 800fa98:	897c      	ldrh	r4, [r7, #10]
 800fa9a:	9103      	str	r1, [sp, #12]
 800fa9c:	2110      	movs	r1, #16
 800fa9e:	9102      	str	r1, [sp, #8]
 800faa0:	9201      	str	r2, [sp, #4]
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	462a      	mov	r2, r5
 800faa8:	4621      	mov	r1, r4
 800faaa:	f7ff ff67 	bl	800f97c <tcp_output_alloc_header_common>
 800faae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d006      	beq.n	800fac4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fabe:	441a      	add	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fac4:	697b      	ldr	r3, [r7, #20]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bdb0      	pop	{r4, r5, r7, pc}
 800face:	bf00      	nop
 800fad0:	0801a8ec 	.word	0x0801a8ec
 800fad4:	0801aff4 	.word	0x0801aff4
 800fad8:	0801a940 	.word	0x0801a940

0800fadc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b088      	sub	sp, #32
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	4611      	mov	r1, r2
 800fae8:	461a      	mov	r2, r3
 800faea:	460b      	mov	r3, r1
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	4613      	mov	r3, r2
 800faf0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d106      	bne.n	800fb0a <tcp_output_fill_options+0x2e>
 800fafc:	4b13      	ldr	r3, [pc, #76]	; (800fb4c <tcp_output_fill_options+0x70>)
 800fafe:	f240 7256 	movw	r2, #1878	; 0x756
 800fb02:	4913      	ldr	r1, [pc, #76]	; (800fb50 <tcp_output_fill_options+0x74>)
 800fb04:	4813      	ldr	r0, [pc, #76]	; (800fb54 <tcp_output_fill_options+0x78>)
 800fb06:	f005 feb9 	bl	801587c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	3314      	adds	r3, #20
 800fb14:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	f103 0214 	add.w	r2, r3, #20
 800fb1c:	8bfb      	ldrh	r3, [r7, #30]
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4619      	mov	r1, r3
 800fb22:	79fb      	ldrb	r3, [r7, #7]
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	f003 0304 	and.w	r3, r3, #4
 800fb2a:	440b      	add	r3, r1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d006      	beq.n	800fb42 <tcp_output_fill_options+0x66>
 800fb34:	4b05      	ldr	r3, [pc, #20]	; (800fb4c <tcp_output_fill_options+0x70>)
 800fb36:	f240 7275 	movw	r2, #1909	; 0x775
 800fb3a:	4907      	ldr	r1, [pc, #28]	; (800fb58 <tcp_output_fill_options+0x7c>)
 800fb3c:	4805      	ldr	r0, [pc, #20]	; (800fb54 <tcp_output_fill_options+0x78>)
 800fb3e:	f005 fe9d 	bl	801587c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fb42:	bf00      	nop
 800fb44:	3720      	adds	r7, #32
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	0801a8ec 	.word	0x0801a8ec
 800fb50:	0801b01c 	.word	0x0801b01c
 800fb54:	0801a940 	.word	0x0801a940
 800fb58:	0801af14 	.word	0x0801af14

0800fb5c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08a      	sub	sp, #40	; 0x28
 800fb60:	af04      	add	r7, sp, #16
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
 800fb68:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d106      	bne.n	800fb7e <tcp_output_control_segment+0x22>
 800fb70:	4b1c      	ldr	r3, [pc, #112]	; (800fbe4 <tcp_output_control_segment+0x88>)
 800fb72:	f240 7287 	movw	r2, #1927	; 0x787
 800fb76:	491c      	ldr	r1, [pc, #112]	; (800fbe8 <tcp_output_control_segment+0x8c>)
 800fb78:	481c      	ldr	r0, [pc, #112]	; (800fbec <tcp_output_control_segment+0x90>)
 800fb7a:	f005 fe7f 	bl	801587c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	6879      	ldr	r1, [r7, #4]
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7fe ff40 	bl	800ea08 <tcp_route>
 800fb88:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d102      	bne.n	800fb96 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fb90:	23fc      	movs	r3, #252	; 0xfc
 800fb92:	75fb      	strb	r3, [r7, #23]
 800fb94:	e01c      	b.n	800fbd0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	7adb      	ldrb	r3, [r3, #11]
 800fba0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	7a9b      	ldrb	r3, [r3, #10]
 800fba6:	757b      	strb	r3, [r7, #21]
 800fba8:	e003      	b.n	800fbb2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fbaa:	23ff      	movs	r3, #255	; 0xff
 800fbac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fbb2:	7dba      	ldrb	r2, [r7, #22]
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	9302      	str	r3, [sp, #8]
 800fbb8:	2306      	movs	r3, #6
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	7d7b      	ldrb	r3, [r7, #21]
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f004 f8a6 	bl	8013d18 <ip4_output_if>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fbd0:	68b8      	ldr	r0, [r7, #8]
 800fbd2:	f7fa fdd9 	bl	800a788 <pbuf_free>
  return err;
 800fbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	0801a8ec 	.word	0x0801a8ec
 800fbe8:	0801b044 	.word	0x0801b044
 800fbec:	0801a940 	.word	0x0801a940

0800fbf0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fbf0:	b590      	push	{r4, r7, lr}
 800fbf2:	b08b      	sub	sp, #44	; 0x2c
 800fbf4:	af04      	add	r7, sp, #16
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d106      	bne.n	800fc12 <tcp_rst+0x22>
 800fc04:	4b1e      	ldr	r3, [pc, #120]	; (800fc80 <tcp_rst+0x90>)
 800fc06:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fc0a:	491e      	ldr	r1, [pc, #120]	; (800fc84 <tcp_rst+0x94>)
 800fc0c:	481e      	ldr	r0, [pc, #120]	; (800fc88 <tcp_rst+0x98>)
 800fc0e:	f005 fe35 	bl	801587c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d106      	bne.n	800fc26 <tcp_rst+0x36>
 800fc18:	4b19      	ldr	r3, [pc, #100]	; (800fc80 <tcp_rst+0x90>)
 800fc1a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fc1e:	491b      	ldr	r1, [pc, #108]	; (800fc8c <tcp_rst+0x9c>)
 800fc20:	4819      	ldr	r0, [pc, #100]	; (800fc88 <tcp_rst+0x98>)
 800fc22:	f005 fe2b 	bl	801587c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc26:	2300      	movs	r3, #0
 800fc28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fc2a:	2308      	movs	r3, #8
 800fc2c:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
 800fc30:	b29c      	uxth	r4, r3
 800fc32:	68b8      	ldr	r0, [r7, #8]
 800fc34:	f7f9 fb21 	bl	800927a <lwip_htonl>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	8abb      	ldrh	r3, [r7, #20]
 800fc3c:	9303      	str	r3, [sp, #12]
 800fc3e:	2314      	movs	r3, #20
 800fc40:	9302      	str	r3, [sp, #8]
 800fc42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	4621      	mov	r1, r4
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff fe93 	bl	800f97c <tcp_output_alloc_header_common>
 800fc56:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00c      	beq.n	800fc78 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	2200      	movs	r2, #0
 800fc62:	6939      	ldr	r1, [r7, #16]
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f7ff ff39 	bl	800fadc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	683a      	ldr	r2, [r7, #0]
 800fc6e:	6939      	ldr	r1, [r7, #16]
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff ff73 	bl	800fb5c <tcp_output_control_segment>
 800fc76:	e000      	b.n	800fc7a <tcp_rst+0x8a>
    return;
 800fc78:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd90      	pop	{r4, r7, pc}
 800fc80:	0801a8ec 	.word	0x0801a8ec
 800fc84:	0801b070 	.word	0x0801b070
 800fc88:	0801a940 	.word	0x0801a940
 800fc8c:	0801b08c 	.word	0x0801b08c

0800fc90 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fc90:	b590      	push	{r4, r7, lr}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_send_empty_ack+0x24>
 800fca6:	4b28      	ldr	r3, [pc, #160]	; (800fd48 <tcp_send_empty_ack+0xb8>)
 800fca8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fcac:	4927      	ldr	r1, [pc, #156]	; (800fd4c <tcp_send_empty_ack+0xbc>)
 800fcae:	4828      	ldr	r0, [pc, #160]	; (800fd50 <tcp_send_empty_ack+0xc0>)
 800fcb0:	f005 fde4 	bl	801587c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fcc0:	7d7b      	ldrb	r3, [r7, #21]
 800fcc2:	b29c      	uxth	r4, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f9 fad6 	bl	800927a <lwip_htonl>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7ff fec3 	bl	800fa60 <tcp_output_alloc_header>
 800fcda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d109      	bne.n	800fcf6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8b5b      	ldrh	r3, [r3, #26]
 800fce6:	f043 0303 	orr.w	r3, r3, #3
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fcf0:	f06f 0301 	mvn.w	r3, #1
 800fcf4:	e023      	b.n	800fd3e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fcf6:	7dbb      	ldrb	r3, [r7, #22]
 800fcf8:	7dfa      	ldrb	r2, [r7, #23]
 800fcfa:	6939      	ldr	r1, [r7, #16]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7ff feed 	bl	800fadc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3304      	adds	r3, #4
 800fd08:	6939      	ldr	r1, [r7, #16]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7ff ff26 	bl	800fb5c <tcp_output_control_segment>
 800fd10:	4603      	mov	r3, r0
 800fd12:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d007      	beq.n	800fd2c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8b5b      	ldrh	r3, [r3, #26]
 800fd20:	f043 0303 	orr.w	r3, r3, #3
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	835a      	strh	r2, [r3, #26]
 800fd2a:	e006      	b.n	800fd3a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	8b5b      	ldrh	r3, [r3, #26]
 800fd30:	f023 0303 	bic.w	r3, r3, #3
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	371c      	adds	r7, #28
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd90      	pop	{r4, r7, pc}
 800fd46:	bf00      	nop
 800fd48:	0801a8ec 	.word	0x0801a8ec
 800fd4c:	0801b0a8 	.word	0x0801b0a8
 800fd50:	0801a940 	.word	0x0801a940

0800fd54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fd54:	b590      	push	{r4, r7, lr}
 800fd56:	b087      	sub	sp, #28
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d106      	bne.n	800fd74 <tcp_keepalive+0x20>
 800fd66:	4b18      	ldr	r3, [pc, #96]	; (800fdc8 <tcp_keepalive+0x74>)
 800fd68:	f640 0224 	movw	r2, #2084	; 0x824
 800fd6c:	4917      	ldr	r1, [pc, #92]	; (800fdcc <tcp_keepalive+0x78>)
 800fd6e:	4818      	ldr	r0, [pc, #96]	; (800fdd0 <tcp_keepalive+0x7c>)
 800fd70:	f005 fd84 	bl	801587c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fd74:	7dfb      	ldrb	r3, [r7, #23]
 800fd76:	b29c      	uxth	r4, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7f9 fa7b 	bl	800927a <lwip_htonl>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2200      	movs	r2, #0
 800fd88:	4621      	mov	r1, r4
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f7ff fe68 	bl	800fa60 <tcp_output_alloc_header>
 800fd90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d102      	bne.n	800fd9e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	e010      	b.n	800fdc0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd9e:	7dfb      	ldrb	r3, [r7, #23]
 800fda0:	2200      	movs	r2, #0
 800fda2:	6939      	ldr	r1, [r7, #16]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7ff fe99 	bl	800fadc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	3304      	adds	r3, #4
 800fdb0:	6939      	ldr	r1, [r7, #16]
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7ff fed2 	bl	800fb5c <tcp_output_control_segment>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	371c      	adds	r7, #28
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd90      	pop	{r4, r7, pc}
 800fdc8:	0801a8ec 	.word	0x0801a8ec
 800fdcc:	0801b0c8 	.word	0x0801b0c8
 800fdd0:	0801a940 	.word	0x0801a940

0800fdd4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fdd4:	b590      	push	{r4, r7, lr}
 800fdd6:	b08b      	sub	sp, #44	; 0x2c
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fddc:	2300      	movs	r3, #0
 800fdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d106      	bne.n	800fdf6 <tcp_zero_window_probe+0x22>
 800fde8:	4b4c      	ldr	r3, [pc, #304]	; (800ff1c <tcp_zero_window_probe+0x148>)
 800fdea:	f640 024f 	movw	r2, #2127	; 0x84f
 800fdee:	494c      	ldr	r1, [pc, #304]	; (800ff20 <tcp_zero_window_probe+0x14c>)
 800fdf0:	484c      	ldr	r0, [pc, #304]	; (800ff24 <tcp_zero_window_probe+0x150>)
 800fdf2:	f005 fd43 	bl	801587c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdfa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fdfc:	6a3b      	ldr	r3, [r7, #32]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fe02:	2300      	movs	r3, #0
 800fe04:	e086      	b.n	800ff14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe0c:	2bff      	cmp	r3, #255	; 0xff
 800fe0e:	d007      	beq.n	800fe20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fe20:	6a3b      	ldr	r3, [r7, #32]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	899b      	ldrh	r3, [r3, #12]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7f9 fa11 	bl	8009250 <lwip_htons>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	f003 0301 	and.w	r3, r3, #1
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d005      	beq.n	800fe46 <tcp_zero_window_probe+0x72>
 800fe3a:	6a3b      	ldr	r3, [r7, #32]
 800fe3c:	891b      	ldrh	r3, [r3, #8]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <tcp_zero_window_probe+0x72>
 800fe42:	2301      	movs	r3, #1
 800fe44:	e000      	b.n	800fe48 <tcp_zero_window_probe+0x74>
 800fe46:	2300      	movs	r3, #0
 800fe48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fe4a:	7ffb      	ldrb	r3, [r7, #31]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	bf0c      	ite	eq
 800fe50:	2301      	moveq	r3, #1
 800fe52:	2300      	movne	r3, #0
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fe58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe5c:	b299      	uxth	r1, r3
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	8bba      	ldrh	r2, [r7, #28]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7ff fdfa 	bl	800fa60 <tcp_output_alloc_header>
 800fe6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d102      	bne.n	800fe7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fe74:	f04f 33ff 	mov.w	r3, #4294967295
 800fe78:	e04c      	b.n	800ff14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fe80:	7ffb      	ldrb	r3, [r7, #31]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d011      	beq.n	800feaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	899b      	ldrh	r3, [r3, #12]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	b21b      	sxth	r3, r3
 800fe8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe92:	b21c      	sxth	r4, r3
 800fe94:	2011      	movs	r0, #17
 800fe96:	f7f9 f9db 	bl	8009250 <lwip_htons>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	b21b      	sxth	r3, r3
 800fe9e:	4323      	orrs	r3, r4
 800fea0:	b21b      	sxth	r3, r3
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	819a      	strh	r2, [r3, #12]
 800fea8:	e010      	b.n	800fecc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	3314      	adds	r3, #20
 800feb0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	6858      	ldr	r0, [r3, #4]
 800feb6:	6a3b      	ldr	r3, [r7, #32]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	891a      	ldrh	r2, [r3, #8]
 800febc:	6a3b      	ldr	r3, [r7, #32]
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	2201      	movs	r2, #1
 800fec6:	6939      	ldr	r1, [r7, #16]
 800fec8:	f7fa fe58 	bl	800ab7c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fecc:	6a3b      	ldr	r3, [r7, #32]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f9 f9d1 	bl	800927a <lwip_htonl>
 800fed8:	4603      	mov	r3, r0
 800feda:	3301      	adds	r3, #1
 800fedc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	da02      	bge.n	800fef0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fef4:	2200      	movs	r2, #0
 800fef6:	69b9      	ldr	r1, [r7, #24]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7ff fdef 	bl	800fadc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	3304      	adds	r3, #4
 800ff04:	69b9      	ldr	r1, [r7, #24]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff fe28 	bl	800fb5c <tcp_output_control_segment>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ff10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	372c      	adds	r7, #44	; 0x2c
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd90      	pop	{r4, r7, pc}
 800ff1c:	0801a8ec 	.word	0x0801a8ec
 800ff20:	0801b0e4 	.word	0x0801b0e4
 800ff24:	0801a940 	.word	0x0801a940

0800ff28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ff30:	f7fa ff12 	bl	800ad58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <tcpip_tcp_timer+0x38>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d103      	bne.n	800ff44 <tcpip_tcp_timer+0x1c>
 800ff3c:	4b09      	ldr	r3, [pc, #36]	; (800ff64 <tcpip_tcp_timer+0x3c>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d005      	beq.n	800ff50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ff44:	2200      	movs	r2, #0
 800ff46:	4908      	ldr	r1, [pc, #32]	; (800ff68 <tcpip_tcp_timer+0x40>)
 800ff48:	20fa      	movs	r0, #250	; 0xfa
 800ff4a:	f000 f8f3 	bl	8010134 <sys_timeout>
 800ff4e:	e003      	b.n	800ff58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ff50:	4b06      	ldr	r3, [pc, #24]	; (800ff6c <tcpip_tcp_timer+0x44>)
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]
  }
}
 800ff56:	bf00      	nop
 800ff58:	bf00      	nop
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	20006ac0 	.word	0x20006ac0
 800ff64:	20006ad0 	.word	0x20006ad0
 800ff68:	0800ff29 	.word	0x0800ff29
 800ff6c:	20000418 	.word	0x20000418

0800ff70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ff74:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <tcp_timer_needed+0x30>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10f      	bne.n	800ff9c <tcp_timer_needed+0x2c>
 800ff7c:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <tcp_timer_needed+0x34>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d103      	bne.n	800ff8c <tcp_timer_needed+0x1c>
 800ff84:	4b08      	ldr	r3, [pc, #32]	; (800ffa8 <tcp_timer_needed+0x38>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d007      	beq.n	800ff9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ff8c:	4b04      	ldr	r3, [pc, #16]	; (800ffa0 <tcp_timer_needed+0x30>)
 800ff8e:	2201      	movs	r2, #1
 800ff90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ff92:	2200      	movs	r2, #0
 800ff94:	4905      	ldr	r1, [pc, #20]	; (800ffac <tcp_timer_needed+0x3c>)
 800ff96:	20fa      	movs	r0, #250	; 0xfa
 800ff98:	f000 f8cc 	bl	8010134 <sys_timeout>
  }
}
 800ff9c:	bf00      	nop
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20000418 	.word	0x20000418
 800ffa4:	20006ac0 	.word	0x20006ac0
 800ffa8:	20006ad0 	.word	0x20006ad0
 800ffac:	0800ff29 	.word	0x0800ff29

0800ffb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ffbc:	2006      	movs	r0, #6
 800ffbe:	f7f9 fd9d 	bl	8009afc <memp_malloc>
 800ffc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d109      	bne.n	800ffde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d151      	bne.n	8010074 <sys_timeout_abs+0xc4>
 800ffd0:	4b2a      	ldr	r3, [pc, #168]	; (801007c <sys_timeout_abs+0xcc>)
 800ffd2:	22be      	movs	r2, #190	; 0xbe
 800ffd4:	492a      	ldr	r1, [pc, #168]	; (8010080 <sys_timeout_abs+0xd0>)
 800ffd6:	482b      	ldr	r0, [pc, #172]	; (8010084 <sys_timeout_abs+0xd4>)
 800ffd8:	f005 fc50 	bl	801587c <iprintf>
    return;
 800ffdc:	e04a      	b.n	8010074 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fff6:	4b24      	ldr	r3, [pc, #144]	; (8010088 <sys_timeout_abs+0xd8>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d103      	bne.n	8010006 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fffe:	4a22      	ldr	r2, [pc, #136]	; (8010088 <sys_timeout_abs+0xd8>)
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	6013      	str	r3, [r2, #0]
    return;
 8010004:	e037      	b.n	8010076 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	685a      	ldr	r2, [r3, #4]
 801000a:	4b1f      	ldr	r3, [pc, #124]	; (8010088 <sys_timeout_abs+0xd8>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	0fdb      	lsrs	r3, r3, #31
 8010014:	f003 0301 	and.w	r3, r3, #1
 8010018:	b2db      	uxtb	r3, r3
 801001a:	2b00      	cmp	r3, #0
 801001c:	d007      	beq.n	801002e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801001e:	4b1a      	ldr	r3, [pc, #104]	; (8010088 <sys_timeout_abs+0xd8>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010026:	4a18      	ldr	r2, [pc, #96]	; (8010088 <sys_timeout_abs+0xd8>)
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	e023      	b.n	8010076 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801002e:	4b16      	ldr	r3, [pc, #88]	; (8010088 <sys_timeout_abs+0xd8>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	617b      	str	r3, [r7, #20]
 8010034:	e01a      	b.n	801006c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00b      	beq.n	8010056 <sys_timeout_abs+0xa6>
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	685a      	ldr	r2, [r3, #4]
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	0fdb      	lsrs	r3, r3, #31
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	d007      	beq.n	8010066 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	601a      	str	r2, [r3, #0]
        break;
 8010064:	e007      	b.n	8010076 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	617b      	str	r3, [r7, #20]
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1e1      	bne.n	8010036 <sys_timeout_abs+0x86>
 8010072:	e000      	b.n	8010076 <sys_timeout_abs+0xc6>
    return;
 8010074:	bf00      	nop
      }
    }
  }
}
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801b108 	.word	0x0801b108
 8010080:	0801b13c 	.word	0x0801b13c
 8010084:	0801b17c 	.word	0x0801b17c
 8010088:	20000410 	.word	0x20000410

0801008c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	4798      	blx	r3

  now = sys_now();
 801009e:	f7f9 f849 	bl	8009134 <sys_now>
 80100a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	4b0f      	ldr	r3, [pc, #60]	; (80100e8 <lwip_cyclic_timer+0x5c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4413      	add	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	0fdb      	lsrs	r3, r3, #31
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d009      	beq.n	80100d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	4413      	add	r3, r2
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	4907      	ldr	r1, [pc, #28]	; (80100ec <lwip_cyclic_timer+0x60>)
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff ff6e 	bl	800ffb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80100d4:	e004      	b.n	80100e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	4904      	ldr	r1, [pc, #16]	; (80100ec <lwip_cyclic_timer+0x60>)
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7ff ff68 	bl	800ffb0 <sys_timeout_abs>
}
 80100e0:	bf00      	nop
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	20000414 	.word	0x20000414
 80100ec:	0801008d 	.word	0x0801008d

080100f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80100f6:	2301      	movs	r3, #1
 80100f8:	607b      	str	r3, [r7, #4]
 80100fa:	e00e      	b.n	801011a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80100fc:	4a0b      	ldr	r2, [pc, #44]	; (801012c <sys_timeouts_init+0x3c>)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	00db      	lsls	r3, r3, #3
 8010108:	4a08      	ldr	r2, [pc, #32]	; (801012c <sys_timeouts_init+0x3c>)
 801010a:	4413      	add	r3, r2
 801010c:	461a      	mov	r2, r3
 801010e:	4908      	ldr	r1, [pc, #32]	; (8010130 <sys_timeouts_init+0x40>)
 8010110:	f000 f810 	bl	8010134 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3301      	adds	r3, #1
 8010118:	607b      	str	r3, [r7, #4]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b04      	cmp	r3, #4
 801011e:	d9ed      	bls.n	80100fc <sys_timeouts_init+0xc>
  }
}
 8010120:	bf00      	nop
 8010122:	bf00      	nop
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	0801c090 	.word	0x0801c090
 8010130:	0801008d 	.word	0x0801008d

08010134 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b086      	sub	sp, #24
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010146:	d306      	bcc.n	8010156 <sys_timeout+0x22>
 8010148:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <sys_timeout+0x40>)
 801014a:	f240 1229 	movw	r2, #297	; 0x129
 801014e:	490a      	ldr	r1, [pc, #40]	; (8010178 <sys_timeout+0x44>)
 8010150:	480a      	ldr	r0, [pc, #40]	; (801017c <sys_timeout+0x48>)
 8010152:	f005 fb93 	bl	801587c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010156:	f7f8 ffed 	bl	8009134 <sys_now>
 801015a:	4602      	mov	r2, r0
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	4413      	add	r3, r2
 8010160:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	68b9      	ldr	r1, [r7, #8]
 8010166:	6978      	ldr	r0, [r7, #20]
 8010168:	f7ff ff22 	bl	800ffb0 <sys_timeout_abs>
#endif
}
 801016c:	bf00      	nop
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	0801b108 	.word	0x0801b108
 8010178:	0801b1a4 	.word	0x0801b1a4
 801017c:	0801b17c 	.word	0x0801b17c

08010180 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010184:	f005 fb92 	bl	80158ac <rand>
 8010188:	4603      	mov	r3, r0
 801018a:	b29b      	uxth	r3, r3
 801018c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010190:	b29b      	uxth	r3, r3
 8010192:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010196:	b29a      	uxth	r2, r3
 8010198:	4b01      	ldr	r3, [pc, #4]	; (80101a0 <udp_init+0x20>)
 801019a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801019c:	bf00      	nop
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	2000001c 	.word	0x2000001c

080101a4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80101ae:	4b17      	ldr	r3, [pc, #92]	; (801020c <udp_new_port+0x68>)
 80101b0:	881b      	ldrh	r3, [r3, #0]
 80101b2:	1c5a      	adds	r2, r3, #1
 80101b4:	b291      	uxth	r1, r2
 80101b6:	4a15      	ldr	r2, [pc, #84]	; (801020c <udp_new_port+0x68>)
 80101b8:	8011      	strh	r1, [r2, #0]
 80101ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101be:	4293      	cmp	r3, r2
 80101c0:	d103      	bne.n	80101ca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80101c2:	4b12      	ldr	r3, [pc, #72]	; (801020c <udp_new_port+0x68>)
 80101c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80101c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80101ca:	4b11      	ldr	r3, [pc, #68]	; (8010210 <udp_new_port+0x6c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	e011      	b.n	80101f6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	8a5a      	ldrh	r2, [r3, #18]
 80101d6:	4b0d      	ldr	r3, [pc, #52]	; (801020c <udp_new_port+0x68>)
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d108      	bne.n	80101f0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80101de:	88fb      	ldrh	r3, [r7, #6]
 80101e0:	3301      	adds	r3, #1
 80101e2:	80fb      	strh	r3, [r7, #6]
 80101e4:	88fb      	ldrh	r3, [r7, #6]
 80101e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101ea:	d3e0      	bcc.n	80101ae <udp_new_port+0xa>
        return 0;
 80101ec:	2300      	movs	r3, #0
 80101ee:	e007      	b.n	8010200 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	603b      	str	r3, [r7, #0]
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1ea      	bne.n	80101d2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80101fc:	4b03      	ldr	r3, [pc, #12]	; (801020c <udp_new_port+0x68>)
 80101fe:	881b      	ldrh	r3, [r3, #0]
}
 8010200:	4618      	mov	r0, r3
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	2000001c 	.word	0x2000001c
 8010210:	20006ad8 	.word	0x20006ad8

08010214 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	4613      	mov	r3, r2
 8010220:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d105      	bne.n	8010234 <udp_input_local_match+0x20>
 8010228:	4b27      	ldr	r3, [pc, #156]	; (80102c8 <udp_input_local_match+0xb4>)
 801022a:	2287      	movs	r2, #135	; 0x87
 801022c:	4927      	ldr	r1, [pc, #156]	; (80102cc <udp_input_local_match+0xb8>)
 801022e:	4828      	ldr	r0, [pc, #160]	; (80102d0 <udp_input_local_match+0xbc>)
 8010230:	f005 fb24 	bl	801587c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d105      	bne.n	8010246 <udp_input_local_match+0x32>
 801023a:	4b23      	ldr	r3, [pc, #140]	; (80102c8 <udp_input_local_match+0xb4>)
 801023c:	2288      	movs	r2, #136	; 0x88
 801023e:	4925      	ldr	r1, [pc, #148]	; (80102d4 <udp_input_local_match+0xc0>)
 8010240:	4823      	ldr	r0, [pc, #140]	; (80102d0 <udp_input_local_match+0xbc>)
 8010242:	f005 fb1b 	bl	801587c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	7a1b      	ldrb	r3, [r3, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00b      	beq.n	8010266 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	7a1a      	ldrb	r2, [r3, #8]
 8010252:	4b21      	ldr	r3, [pc, #132]	; (80102d8 <udp_input_local_match+0xc4>)
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801025a:	3301      	adds	r3, #1
 801025c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801025e:	429a      	cmp	r2, r3
 8010260:	d001      	beq.n	8010266 <udp_input_local_match+0x52>
    return 0;
 8010262:	2300      	movs	r3, #0
 8010264:	e02b      	b.n	80102be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d018      	beq.n	801029e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d013      	beq.n	801029a <udp_input_local_match+0x86>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00f      	beq.n	801029a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801027a:	4b17      	ldr	r3, [pc, #92]	; (80102d8 <udp_input_local_match+0xc4>)
 801027c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801027e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010282:	d00a      	beq.n	801029a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	4b13      	ldr	r3, [pc, #76]	; (80102d8 <udp_input_local_match+0xc4>)
 801028a:	695b      	ldr	r3, [r3, #20]
 801028c:	405a      	eors	r2, r3
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	3308      	adds	r3, #8
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010296:	2b00      	cmp	r3, #0
 8010298:	d110      	bne.n	80102bc <udp_input_local_match+0xa8>
          return 1;
 801029a:	2301      	movs	r3, #1
 801029c:	e00f      	b.n	80102be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <udp_input_local_match+0xa4>
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d005      	beq.n	80102b8 <udp_input_local_match+0xa4>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <udp_input_local_match+0xc4>)
 80102b2:	695b      	ldr	r3, [r3, #20]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d101      	bne.n	80102bc <udp_input_local_match+0xa8>
        return 1;
 80102b8:	2301      	movs	r3, #1
 80102ba:	e000      	b.n	80102be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	0801b1f0 	.word	0x0801b1f0
 80102cc:	0801b220 	.word	0x0801b220
 80102d0:	0801b244 	.word	0x0801b244
 80102d4:	0801b26c 	.word	0x0801b26c
 80102d8:	2000399c 	.word	0x2000399c

080102dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b08d      	sub	sp, #52	; 0x34
 80102e0:	af02      	add	r7, sp, #8
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80102e6:	2300      	movs	r3, #0
 80102e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d105      	bne.n	80102fc <udp_input+0x20>
 80102f0:	4b7c      	ldr	r3, [pc, #496]	; (80104e4 <udp_input+0x208>)
 80102f2:	22cf      	movs	r2, #207	; 0xcf
 80102f4:	497c      	ldr	r1, [pc, #496]	; (80104e8 <udp_input+0x20c>)
 80102f6:	487d      	ldr	r0, [pc, #500]	; (80104ec <udp_input+0x210>)
 80102f8:	f005 fac0 	bl	801587c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d105      	bne.n	801030e <udp_input+0x32>
 8010302:	4b78      	ldr	r3, [pc, #480]	; (80104e4 <udp_input+0x208>)
 8010304:	22d0      	movs	r2, #208	; 0xd0
 8010306:	497a      	ldr	r1, [pc, #488]	; (80104f0 <udp_input+0x214>)
 8010308:	4878      	ldr	r0, [pc, #480]	; (80104ec <udp_input+0x210>)
 801030a:	f005 fab7 	bl	801587c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	895b      	ldrh	r3, [r3, #10]
 8010312:	2b07      	cmp	r3, #7
 8010314:	d803      	bhi.n	801031e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f7fa fa36 	bl	800a788 <pbuf_free>
    goto end;
 801031c:	e0de      	b.n	80104dc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010324:	4b73      	ldr	r3, [pc, #460]	; (80104f4 <udp_input+0x218>)
 8010326:	695b      	ldr	r3, [r3, #20]
 8010328:	4a72      	ldr	r2, [pc, #456]	; (80104f4 <udp_input+0x218>)
 801032a:	6812      	ldr	r2, [r2, #0]
 801032c:	4611      	mov	r1, r2
 801032e:	4618      	mov	r0, r3
 8010330:	f003 fdca 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8010334:	4603      	mov	r3, r0
 8010336:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	b29b      	uxth	r3, r3
 801033e:	4618      	mov	r0, r3
 8010340:	f7f8 ff86 	bl	8009250 <lwip_htons>
 8010344:	4603      	mov	r3, r0
 8010346:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	885b      	ldrh	r3, [r3, #2]
 801034c:	b29b      	uxth	r3, r3
 801034e:	4618      	mov	r0, r3
 8010350:	f7f8 ff7e 	bl	8009250 <lwip_htons>
 8010354:	4603      	mov	r3, r0
 8010356:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010358:	2300      	movs	r3, #0
 801035a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801035c:	2300      	movs	r3, #0
 801035e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010360:	2300      	movs	r3, #0
 8010362:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010364:	4b64      	ldr	r3, [pc, #400]	; (80104f8 <udp_input+0x21c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	627b      	str	r3, [r7, #36]	; 0x24
 801036a:	e054      	b.n	8010416 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	8a5b      	ldrh	r3, [r3, #18]
 8010370:	89fa      	ldrh	r2, [r7, #14]
 8010372:	429a      	cmp	r2, r3
 8010374:	d14a      	bne.n	801040c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010376:	7cfb      	ldrb	r3, [r7, #19]
 8010378:	461a      	mov	r2, r3
 801037a:	6839      	ldr	r1, [r7, #0]
 801037c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801037e:	f7ff ff49 	bl	8010214 <udp_input_local_match>
 8010382:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010384:	2b00      	cmp	r3, #0
 8010386:	d041      	beq.n	801040c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038a:	7c1b      	ldrb	r3, [r3, #16]
 801038c:	f003 0304 	and.w	r3, r3, #4
 8010390:	2b00      	cmp	r3, #0
 8010392:	d11d      	bne.n	80103d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d102      	bne.n	80103a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	e017      	b.n	80103d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80103a0:	7cfb      	ldrb	r3, [r7, #19]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d014      	beq.n	80103d0 <udp_input+0xf4>
 80103a6:	4b53      	ldr	r3, [pc, #332]	; (80104f4 <udp_input+0x218>)
 80103a8:	695b      	ldr	r3, [r3, #20]
 80103aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ae:	d10f      	bne.n	80103d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	3304      	adds	r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d008      	beq.n	80103d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	3304      	adds	r3, #4
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d101      	bne.n	80103d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80103cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	8a9b      	ldrh	r3, [r3, #20]
 80103d4:	8a3a      	ldrh	r2, [r7, #16]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d118      	bne.n	801040c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80103da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d005      	beq.n	80103ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	685a      	ldr	r2, [r3, #4]
 80103e6:	4b43      	ldr	r3, [pc, #268]	; (80104f4 <udp_input+0x218>)
 80103e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d10e      	bne.n	801040c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d014      	beq.n	801041e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	68da      	ldr	r2, [r3, #12]
 80103f8:	6a3b      	ldr	r3, [r7, #32]
 80103fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80103fc:	4b3e      	ldr	r3, [pc, #248]	; (80104f8 <udp_input+0x21c>)
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010404:	4a3c      	ldr	r2, [pc, #240]	; (80104f8 <udp_input+0x21c>)
 8010406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010408:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801040a:	e008      	b.n	801041e <udp_input+0x142>
      }
    }

    prev = pcb;
 801040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	627b      	str	r3, [r7, #36]	; 0x24
 8010416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1a7      	bne.n	801036c <udp_input+0x90>
 801041c:	e000      	b.n	8010420 <udp_input+0x144>
        break;
 801041e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010422:	2b00      	cmp	r3, #0
 8010424:	d101      	bne.n	801042a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <udp_input+0x15a>
    for_us = 1;
 8010430:	2301      	movs	r3, #1
 8010432:	76fb      	strb	r3, [r7, #27]
 8010434:	e00a      	b.n	801044c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	3304      	adds	r3, #4
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	4b2d      	ldr	r3, [pc, #180]	; (80104f4 <udp_input+0x218>)
 801043e:	695b      	ldr	r3, [r3, #20]
 8010440:	429a      	cmp	r2, r3
 8010442:	bf0c      	ite	eq
 8010444:	2301      	moveq	r3, #1
 8010446:	2300      	movne	r3, #0
 8010448:	b2db      	uxtb	r3, r3
 801044a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801044c:	7efb      	ldrb	r3, [r7, #27]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d041      	beq.n	80104d6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010452:	2108      	movs	r1, #8
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7fa f911 	bl	800a67c <pbuf_remove_header>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010460:	4b20      	ldr	r3, [pc, #128]	; (80104e4 <udp_input+0x208>)
 8010462:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010466:	4925      	ldr	r1, [pc, #148]	; (80104fc <udp_input+0x220>)
 8010468:	4820      	ldr	r0, [pc, #128]	; (80104ec <udp_input+0x210>)
 801046a:	f005 fa07 	bl	801587c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7fa f98a 	bl	800a788 <pbuf_free>
      goto end;
 8010474:	e032      	b.n	80104dc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010478:	2b00      	cmp	r3, #0
 801047a:	d012      	beq.n	80104a2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	699b      	ldr	r3, [r3, #24]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00a      	beq.n	801049a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010486:	699c      	ldr	r4, [r3, #24]
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	69d8      	ldr	r0, [r3, #28]
 801048c:	8a3b      	ldrh	r3, [r7, #16]
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	4b1b      	ldr	r3, [pc, #108]	; (8010500 <udp_input+0x224>)
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010496:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010498:	e021      	b.n	80104de <udp_input+0x202>
        pbuf_free(p);
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7fa f974 	bl	800a788 <pbuf_free>
        goto end;
 80104a0:	e01c      	b.n	80104dc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80104a2:	7cfb      	ldrb	r3, [r7, #19]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d112      	bne.n	80104ce <udp_input+0x1f2>
 80104a8:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <udp_input+0x218>)
 80104aa:	695b      	ldr	r3, [r3, #20]
 80104ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104b0:	2be0      	cmp	r3, #224	; 0xe0
 80104b2:	d00c      	beq.n	80104ce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80104b4:	4b0f      	ldr	r3, [pc, #60]	; (80104f4 <udp_input+0x218>)
 80104b6:	899b      	ldrh	r3, [r3, #12]
 80104b8:	3308      	adds	r3, #8
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	b21b      	sxth	r3, r3
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7fa f94e 	bl	800a762 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80104c6:	2103      	movs	r1, #3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f003 f9bf 	bl	801384c <icmp_dest_unreach>
      pbuf_free(p);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7fa f95a 	bl	800a788 <pbuf_free>
  return;
 80104d4:	e003      	b.n	80104de <udp_input+0x202>
    pbuf_free(p);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7fa f956 	bl	800a788 <pbuf_free>
  return;
 80104dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80104de:	372c      	adds	r7, #44	; 0x2c
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd90      	pop	{r4, r7, pc}
 80104e4:	0801b1f0 	.word	0x0801b1f0
 80104e8:	0801b294 	.word	0x0801b294
 80104ec:	0801b244 	.word	0x0801b244
 80104f0:	0801b2ac 	.word	0x0801b2ac
 80104f4:	2000399c 	.word	0x2000399c
 80104f8:	20006ad8 	.word	0x20006ad8
 80104fc:	0801b2c8 	.word	0x0801b2c8
 8010500:	200039ac 	.word	0x200039ac

08010504 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af02      	add	r7, sp, #8
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d109      	bne.n	801052c <udp_sendto_if+0x28>
 8010518:	4b2e      	ldr	r3, [pc, #184]	; (80105d4 <udp_sendto_if+0xd0>)
 801051a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801051e:	492e      	ldr	r1, [pc, #184]	; (80105d8 <udp_sendto_if+0xd4>)
 8010520:	482e      	ldr	r0, [pc, #184]	; (80105dc <udp_sendto_if+0xd8>)
 8010522:	f005 f9ab 	bl	801587c <iprintf>
 8010526:	f06f 030f 	mvn.w	r3, #15
 801052a:	e04f      	b.n	80105cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d109      	bne.n	8010546 <udp_sendto_if+0x42>
 8010532:	4b28      	ldr	r3, [pc, #160]	; (80105d4 <udp_sendto_if+0xd0>)
 8010534:	f240 2281 	movw	r2, #641	; 0x281
 8010538:	4929      	ldr	r1, [pc, #164]	; (80105e0 <udp_sendto_if+0xdc>)
 801053a:	4828      	ldr	r0, [pc, #160]	; (80105dc <udp_sendto_if+0xd8>)
 801053c:	f005 f99e 	bl	801587c <iprintf>
 8010540:	f06f 030f 	mvn.w	r3, #15
 8010544:	e042      	b.n	80105cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d109      	bne.n	8010560 <udp_sendto_if+0x5c>
 801054c:	4b21      	ldr	r3, [pc, #132]	; (80105d4 <udp_sendto_if+0xd0>)
 801054e:	f240 2282 	movw	r2, #642	; 0x282
 8010552:	4924      	ldr	r1, [pc, #144]	; (80105e4 <udp_sendto_if+0xe0>)
 8010554:	4821      	ldr	r0, [pc, #132]	; (80105dc <udp_sendto_if+0xd8>)
 8010556:	f005 f991 	bl	801587c <iprintf>
 801055a:	f06f 030f 	mvn.w	r3, #15
 801055e:	e035      	b.n	80105cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d109      	bne.n	801057a <udp_sendto_if+0x76>
 8010566:	4b1b      	ldr	r3, [pc, #108]	; (80105d4 <udp_sendto_if+0xd0>)
 8010568:	f240 2283 	movw	r2, #643	; 0x283
 801056c:	491e      	ldr	r1, [pc, #120]	; (80105e8 <udp_sendto_if+0xe4>)
 801056e:	481b      	ldr	r0, [pc, #108]	; (80105dc <udp_sendto_if+0xd8>)
 8010570:	f005 f984 	bl	801587c <iprintf>
 8010574:	f06f 030f 	mvn.w	r3, #15
 8010578:	e028      	b.n	80105cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d009      	beq.n	8010594 <udp_sendto_if+0x90>
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d005      	beq.n	8010594 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010590:	2be0      	cmp	r3, #224	; 0xe0
 8010592:	d103      	bne.n	801059c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	3304      	adds	r3, #4
 8010598:	617b      	str	r3, [r7, #20]
 801059a:	e00b      	b.n	80105b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	6a3b      	ldr	r3, [r7, #32]
 80105a2:	3304      	adds	r3, #4
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d002      	beq.n	80105b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80105aa:	f06f 0303 	mvn.w	r3, #3
 80105ae:	e00d      	b.n	80105cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80105b4:	887a      	ldrh	r2, [r7, #2]
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	9301      	str	r3, [sp, #4]
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	4613      	mov	r3, r2
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f000 f811 	bl	80105ec <udp_sendto_if_src>
 80105ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3718      	adds	r7, #24
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	0801b1f0 	.word	0x0801b1f0
 80105d8:	0801b364 	.word	0x0801b364
 80105dc:	0801b244 	.word	0x0801b244
 80105e0:	0801b380 	.word	0x0801b380
 80105e4:	0801b39c 	.word	0x0801b39c
 80105e8:	0801b3bc 	.word	0x0801b3bc

080105ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08c      	sub	sp, #48	; 0x30
 80105f0:	af04      	add	r7, sp, #16
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d109      	bne.n	8010614 <udp_sendto_if_src+0x28>
 8010600:	4b65      	ldr	r3, [pc, #404]	; (8010798 <udp_sendto_if_src+0x1ac>)
 8010602:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010606:	4965      	ldr	r1, [pc, #404]	; (801079c <udp_sendto_if_src+0x1b0>)
 8010608:	4865      	ldr	r0, [pc, #404]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 801060a:	f005 f937 	bl	801587c <iprintf>
 801060e:	f06f 030f 	mvn.w	r3, #15
 8010612:	e0bc      	b.n	801078e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d109      	bne.n	801062e <udp_sendto_if_src+0x42>
 801061a:	4b5f      	ldr	r3, [pc, #380]	; (8010798 <udp_sendto_if_src+0x1ac>)
 801061c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010620:	4960      	ldr	r1, [pc, #384]	; (80107a4 <udp_sendto_if_src+0x1b8>)
 8010622:	485f      	ldr	r0, [pc, #380]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 8010624:	f005 f92a 	bl	801587c <iprintf>
 8010628:	f06f 030f 	mvn.w	r3, #15
 801062c:	e0af      	b.n	801078e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d109      	bne.n	8010648 <udp_sendto_if_src+0x5c>
 8010634:	4b58      	ldr	r3, [pc, #352]	; (8010798 <udp_sendto_if_src+0x1ac>)
 8010636:	f240 22d3 	movw	r2, #723	; 0x2d3
 801063a:	495b      	ldr	r1, [pc, #364]	; (80107a8 <udp_sendto_if_src+0x1bc>)
 801063c:	4858      	ldr	r0, [pc, #352]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 801063e:	f005 f91d 	bl	801587c <iprintf>
 8010642:	f06f 030f 	mvn.w	r3, #15
 8010646:	e0a2      	b.n	801078e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d109      	bne.n	8010662 <udp_sendto_if_src+0x76>
 801064e:	4b52      	ldr	r3, [pc, #328]	; (8010798 <udp_sendto_if_src+0x1ac>)
 8010650:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010654:	4955      	ldr	r1, [pc, #340]	; (80107ac <udp_sendto_if_src+0x1c0>)
 8010656:	4852      	ldr	r0, [pc, #328]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 8010658:	f005 f910 	bl	801587c <iprintf>
 801065c:	f06f 030f 	mvn.w	r3, #15
 8010660:	e095      	b.n	801078e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010664:	2b00      	cmp	r3, #0
 8010666:	d109      	bne.n	801067c <udp_sendto_if_src+0x90>
 8010668:	4b4b      	ldr	r3, [pc, #300]	; (8010798 <udp_sendto_if_src+0x1ac>)
 801066a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801066e:	4950      	ldr	r1, [pc, #320]	; (80107b0 <udp_sendto_if_src+0x1c4>)
 8010670:	484b      	ldr	r0, [pc, #300]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 8010672:	f005 f903 	bl	801587c <iprintf>
 8010676:	f06f 030f 	mvn.w	r3, #15
 801067a:	e088      	b.n	801078e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	8a5b      	ldrh	r3, [r3, #18]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10f      	bne.n	80106a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010684:	68f9      	ldr	r1, [r7, #12]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	8a5b      	ldrh	r3, [r3, #18]
 801068a:	461a      	mov	r2, r3
 801068c:	68f8      	ldr	r0, [r7, #12]
 801068e:	f000 f893 	bl	80107b8 <udp_bind>
 8010692:	4603      	mov	r3, r0
 8010694:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010696:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801069e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80106a2:	e074      	b.n	801078e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	891b      	ldrh	r3, [r3, #8]
 80106a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d902      	bls.n	80106b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80106b0:	f04f 33ff 	mov.w	r3, #4294967295
 80106b4:	e06b      	b.n	801078e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80106b6:	2108      	movs	r1, #8
 80106b8:	68b8      	ldr	r0, [r7, #8]
 80106ba:	f7f9 ffcf 	bl	800a65c <pbuf_add_header>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d015      	beq.n	80106f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80106c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106c8:	2108      	movs	r1, #8
 80106ca:	2022      	movs	r0, #34	; 0x22
 80106cc:	f7f9 fd78 	bl	800a1c0 <pbuf_alloc>
 80106d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80106d8:	f04f 33ff 	mov.w	r3, #4294967295
 80106dc:	e057      	b.n	801078e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	891b      	ldrh	r3, [r3, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d006      	beq.n	80106f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80106e6:	68b9      	ldr	r1, [r7, #8]
 80106e8:	69f8      	ldr	r0, [r7, #28]
 80106ea:	f7fa f965 	bl	800a9b8 <pbuf_chain>
 80106ee:	e001      	b.n	80106f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	895b      	ldrh	r3, [r3, #10]
 80106f8:	2b07      	cmp	r3, #7
 80106fa:	d806      	bhi.n	801070a <udp_sendto_if_src+0x11e>
 80106fc:	4b26      	ldr	r3, [pc, #152]	; (8010798 <udp_sendto_if_src+0x1ac>)
 80106fe:	f240 320d 	movw	r2, #781	; 0x30d
 8010702:	492c      	ldr	r1, [pc, #176]	; (80107b4 <udp_sendto_if_src+0x1c8>)
 8010704:	4826      	ldr	r0, [pc, #152]	; (80107a0 <udp_sendto_if_src+0x1b4>)
 8010706:	f005 f8b9 	bl	801587c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	8a5b      	ldrh	r3, [r3, #18]
 8010714:	4618      	mov	r0, r3
 8010716:	f7f8 fd9b 	bl	8009250 <lwip_htons>
 801071a:	4603      	mov	r3, r0
 801071c:	461a      	mov	r2, r3
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010722:	887b      	ldrh	r3, [r7, #2]
 8010724:	4618      	mov	r0, r3
 8010726:	f7f8 fd93 	bl	8009250 <lwip_htons>
 801072a:	4603      	mov	r3, r0
 801072c:	461a      	mov	r2, r3
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	2200      	movs	r2, #0
 8010736:	719a      	strb	r2, [r3, #6]
 8010738:	2200      	movs	r2, #0
 801073a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	891b      	ldrh	r3, [r3, #8]
 8010740:	4618      	mov	r0, r3
 8010742:	f7f8 fd85 	bl	8009250 <lwip_htons>
 8010746:	4603      	mov	r3, r0
 8010748:	461a      	mov	r2, r3
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801074e:	2311      	movs	r3, #17
 8010750:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	7adb      	ldrb	r3, [r3, #11]
 8010756:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	7a9b      	ldrb	r3, [r3, #10]
 801075c:	7cb9      	ldrb	r1, [r7, #18]
 801075e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010760:	9202      	str	r2, [sp, #8]
 8010762:	7cfa      	ldrb	r2, [r7, #19]
 8010764:	9201      	str	r2, [sp, #4]
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	460b      	mov	r3, r1
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801076e:	69f8      	ldr	r0, [r7, #28]
 8010770:	f003 fafc 	bl	8013d6c <ip4_output_if_src>
 8010774:	4603      	mov	r3, r0
 8010776:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010778:	69fa      	ldr	r2, [r7, #28]
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	429a      	cmp	r2, r3
 801077e:	d004      	beq.n	801078a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010780:	69f8      	ldr	r0, [r7, #28]
 8010782:	f7fa f801 	bl	800a788 <pbuf_free>
    q = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801078a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3720      	adds	r7, #32
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	0801b1f0 	.word	0x0801b1f0
 801079c:	0801b3dc 	.word	0x0801b3dc
 80107a0:	0801b244 	.word	0x0801b244
 80107a4:	0801b3fc 	.word	0x0801b3fc
 80107a8:	0801b41c 	.word	0x0801b41c
 80107ac:	0801b440 	.word	0x0801b440
 80107b0:	0801b464 	.word	0x0801b464
 80107b4:	0801b488 	.word	0x0801b488

080107b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4613      	mov	r3, r2
 80107c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d101      	bne.n	80107d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80107cc:	4b39      	ldr	r3, [pc, #228]	; (80108b4 <udp_bind+0xfc>)
 80107ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d109      	bne.n	80107ea <udp_bind+0x32>
 80107d6:	4b38      	ldr	r3, [pc, #224]	; (80108b8 <udp_bind+0x100>)
 80107d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80107dc:	4937      	ldr	r1, [pc, #220]	; (80108bc <udp_bind+0x104>)
 80107de:	4838      	ldr	r0, [pc, #224]	; (80108c0 <udp_bind+0x108>)
 80107e0:	f005 f84c 	bl	801587c <iprintf>
 80107e4:	f06f 030f 	mvn.w	r3, #15
 80107e8:	e060      	b.n	80108ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107ee:	4b35      	ldr	r3, [pc, #212]	; (80108c4 <udp_bind+0x10c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	617b      	str	r3, [r7, #20]
 80107f4:	e009      	b.n	801080a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80107f6:	68fa      	ldr	r2, [r7, #12]
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d102      	bne.n	8010804 <udp_bind+0x4c>
      rebind = 1;
 80107fe:	2301      	movs	r3, #1
 8010800:	74fb      	strb	r3, [r7, #19]
      break;
 8010802:	e005      	b.n	8010810 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	617b      	str	r3, [r7, #20]
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1f2      	bne.n	80107f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010810:	88fb      	ldrh	r3, [r7, #6]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d109      	bne.n	801082a <udp_bind+0x72>
    port = udp_new_port();
 8010816:	f7ff fcc5 	bl	80101a4 <udp_new_port>
 801081a:	4603      	mov	r3, r0
 801081c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801081e:	88fb      	ldrh	r3, [r7, #6]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d12c      	bne.n	801087e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010824:	f06f 0307 	mvn.w	r3, #7
 8010828:	e040      	b.n	80108ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801082a:	4b26      	ldr	r3, [pc, #152]	; (80108c4 <udp_bind+0x10c>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	617b      	str	r3, [r7, #20]
 8010830:	e022      	b.n	8010878 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	429a      	cmp	r2, r3
 8010838:	d01b      	beq.n	8010872 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	8a5b      	ldrh	r3, [r3, #18]
 801083e:	88fa      	ldrh	r2, [r7, #6]
 8010840:	429a      	cmp	r2, r3
 8010842:	d116      	bne.n	8010872 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801084c:	429a      	cmp	r2, r3
 801084e:	d00d      	beq.n	801086c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00a      	beq.n	801086c <udp_bind+0xb4>
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d006      	beq.n	801086c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801085e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010860:	2b00      	cmp	r3, #0
 8010862:	d003      	beq.n	801086c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d102      	bne.n	8010872 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801086c:	f06f 0307 	mvn.w	r3, #7
 8010870:	e01c      	b.n	80108ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	617b      	str	r3, [r7, #20]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1d9      	bne.n	8010832 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <udp_bind+0xd2>
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	e000      	b.n	801088c <udp_bind+0xd4>
 801088a:	2300      	movs	r3, #0
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	88fa      	ldrh	r2, [r7, #6]
 8010894:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010896:	7cfb      	ldrb	r3, [r7, #19]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801089c:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <udp_bind+0x10c>)
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80108a4:	4a07      	ldr	r2, [pc, #28]	; (80108c4 <udp_bind+0x10c>)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3718      	adds	r7, #24
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	0801c0b8 	.word	0x0801c0b8
 80108b8:	0801b1f0 	.word	0x0801b1f0
 80108bc:	0801b4b8 	.word	0x0801b4b8
 80108c0:	0801b244 	.word	0x0801b244
 80108c4:	20006ad8 	.word	0x20006ad8

080108c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b086      	sub	sp, #24
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	4613      	mov	r3, r2
 80108d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d109      	bne.n	80108f0 <udp_connect+0x28>
 80108dc:	4b2c      	ldr	r3, [pc, #176]	; (8010990 <udp_connect+0xc8>)
 80108de:	f240 4235 	movw	r2, #1077	; 0x435
 80108e2:	492c      	ldr	r1, [pc, #176]	; (8010994 <udp_connect+0xcc>)
 80108e4:	482c      	ldr	r0, [pc, #176]	; (8010998 <udp_connect+0xd0>)
 80108e6:	f004 ffc9 	bl	801587c <iprintf>
 80108ea:	f06f 030f 	mvn.w	r3, #15
 80108ee:	e04b      	b.n	8010988 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d109      	bne.n	801090a <udp_connect+0x42>
 80108f6:	4b26      	ldr	r3, [pc, #152]	; (8010990 <udp_connect+0xc8>)
 80108f8:	f240 4236 	movw	r2, #1078	; 0x436
 80108fc:	4927      	ldr	r1, [pc, #156]	; (801099c <udp_connect+0xd4>)
 80108fe:	4826      	ldr	r0, [pc, #152]	; (8010998 <udp_connect+0xd0>)
 8010900:	f004 ffbc 	bl	801587c <iprintf>
 8010904:	f06f 030f 	mvn.w	r3, #15
 8010908:	e03e      	b.n	8010988 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	8a5b      	ldrh	r3, [r3, #18]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10f      	bne.n	8010932 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010912:	68f9      	ldr	r1, [r7, #12]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	8a5b      	ldrh	r3, [r3, #18]
 8010918:	461a      	mov	r2, r3
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f7ff ff4c 	bl	80107b8 <udp_bind>
 8010920:	4603      	mov	r3, r0
 8010922:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <udp_connect+0x6a>
      return err;
 801092c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010930:	e02a      	b.n	8010988 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <udp_connect+0x76>
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	e000      	b.n	8010940 <udp_connect+0x78>
 801093e:	2300      	movs	r3, #0
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	88fa      	ldrh	r2, [r7, #6]
 8010948:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	7c1b      	ldrb	r3, [r3, #16]
 801094e:	f043 0304 	orr.w	r3, r3, #4
 8010952:	b2da      	uxtb	r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010958:	4b11      	ldr	r3, [pc, #68]	; (80109a0 <udp_connect+0xd8>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	617b      	str	r3, [r7, #20]
 801095e:	e008      	b.n	8010972 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	429a      	cmp	r2, r3
 8010966:	d101      	bne.n	801096c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	e00d      	b.n	8010988 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	617b      	str	r3, [r7, #20]
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1f3      	bne.n	8010960 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010978:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <udp_connect+0xd8>)
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010980:	4a07      	ldr	r2, [pc, #28]	; (80109a0 <udp_connect+0xd8>)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	0801b1f0 	.word	0x0801b1f0
 8010994:	0801b4d0 	.word	0x0801b4d0
 8010998:	0801b244 	.word	0x0801b244
 801099c:	0801b4ec 	.word	0x0801b4ec
 80109a0:	20006ad8 	.word	0x20006ad8

080109a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d107      	bne.n	80109c6 <udp_recv+0x22>
 80109b6:	4b08      	ldr	r3, [pc, #32]	; (80109d8 <udp_recv+0x34>)
 80109b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80109bc:	4907      	ldr	r1, [pc, #28]	; (80109dc <udp_recv+0x38>)
 80109be:	4808      	ldr	r0, [pc, #32]	; (80109e0 <udp_recv+0x3c>)
 80109c0:	f004 ff5c 	bl	801587c <iprintf>
 80109c4:	e005      	b.n	80109d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	61da      	str	r2, [r3, #28]
}
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	0801b1f0 	.word	0x0801b1f0
 80109dc:	0801b524 	.word	0x0801b524
 80109e0:	0801b244 	.word	0x0801b244

080109e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d107      	bne.n	8010a02 <udp_remove+0x1e>
 80109f2:	4b19      	ldr	r3, [pc, #100]	; (8010a58 <udp_remove+0x74>)
 80109f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80109f8:	4918      	ldr	r1, [pc, #96]	; (8010a5c <udp_remove+0x78>)
 80109fa:	4819      	ldr	r0, [pc, #100]	; (8010a60 <udp_remove+0x7c>)
 80109fc:	f004 ff3e 	bl	801587c <iprintf>
 8010a00:	e026      	b.n	8010a50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010a02:	4b18      	ldr	r3, [pc, #96]	; (8010a64 <udp_remove+0x80>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d105      	bne.n	8010a18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010a0c:	4b15      	ldr	r3, [pc, #84]	; (8010a64 <udp_remove+0x80>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	4a14      	ldr	r2, [pc, #80]	; (8010a64 <udp_remove+0x80>)
 8010a14:	6013      	str	r3, [r2, #0]
 8010a16:	e017      	b.n	8010a48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010a18:	4b12      	ldr	r3, [pc, #72]	; (8010a64 <udp_remove+0x80>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	60fb      	str	r3, [r7, #12]
 8010a1e:	e010      	b.n	8010a42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d009      	beq.n	8010a3c <udp_remove+0x58>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d104      	bne.n	8010a3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	60da      	str	r2, [r3, #12]
        break;
 8010a3a:	e005      	b.n	8010a48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1eb      	bne.n	8010a20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010a48:	6879      	ldr	r1, [r7, #4]
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7f9 f8a2 	bl	8009b94 <memp_free>
}
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	0801b1f0 	.word	0x0801b1f0
 8010a5c:	0801b53c 	.word	0x0801b53c
 8010a60:	0801b244 	.word	0x0801b244
 8010a64:	20006ad8 	.word	0x20006ad8

08010a68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f7f9 f844 	bl	8009afc <memp_malloc>
 8010a74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d007      	beq.n	8010a8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	2100      	movs	r1, #0
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f004 f9df 	bl	8014e44 <memset>
    pcb->ttl = UDP_TTL;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	22ff      	movs	r2, #255	; 0xff
 8010a8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010a8c:	687b      	ldr	r3, [r7, #4]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d01e      	beq.n	8010ae6 <udp_netif_ip_addr_changed+0x4e>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01a      	beq.n	8010ae6 <udp_netif_ip_addr_changed+0x4e>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d017      	beq.n	8010ae6 <udp_netif_ip_addr_changed+0x4e>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d013      	beq.n	8010ae6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010abe:	4b0d      	ldr	r3, [pc, #52]	; (8010af4 <udp_netif_ip_addr_changed+0x5c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	e00c      	b.n	8010ae0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d103      	bne.n	8010ada <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1ef      	bne.n	8010ac6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010ae6:	bf00      	nop
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop
 8010af4:	20006ad8 	.word	0x20006ad8

08010af8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010afc:	4b20      	ldr	r3, [pc, #128]	; (8010b80 <dhcp_inc_pcb_refcount+0x88>)
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d133      	bne.n	8010b6c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010b04:	4b1f      	ldr	r3, [pc, #124]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <dhcp_inc_pcb_refcount+0x20>
 8010b0c:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <dhcp_inc_pcb_refcount+0x90>)
 8010b0e:	22e5      	movs	r2, #229	; 0xe5
 8010b10:	491e      	ldr	r1, [pc, #120]	; (8010b8c <dhcp_inc_pcb_refcount+0x94>)
 8010b12:	481f      	ldr	r0, [pc, #124]	; (8010b90 <dhcp_inc_pcb_refcount+0x98>)
 8010b14:	f004 feb2 	bl	801587c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010b18:	f7ff ffa6 	bl	8010a68 <udp_new>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	4a19      	ldr	r2, [pc, #100]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b20:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010b22:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d102      	bne.n	8010b30 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b2e:	e024      	b.n	8010b7a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010b30:	4b14      	ldr	r3, [pc, #80]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	7a5a      	ldrb	r2, [r3, #9]
 8010b36:	4b13      	ldr	r3, [pc, #76]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f042 0220 	orr.w	r2, r2, #32
 8010b3e:	b2d2      	uxtb	r2, r2
 8010b40:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010b42:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2244      	movs	r2, #68	; 0x44
 8010b48:	4912      	ldr	r1, [pc, #72]	; (8010b94 <dhcp_inc_pcb_refcount+0x9c>)
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ff fe34 	bl	80107b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010b50:	4b0c      	ldr	r3, [pc, #48]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2243      	movs	r2, #67	; 0x43
 8010b56:	490f      	ldr	r1, [pc, #60]	; (8010b94 <dhcp_inc_pcb_refcount+0x9c>)
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff feb5 	bl	80108c8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010b5e:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <dhcp_inc_pcb_refcount+0x8c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2200      	movs	r2, #0
 8010b64:	490c      	ldr	r1, [pc, #48]	; (8010b98 <dhcp_inc_pcb_refcount+0xa0>)
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ff ff1c 	bl	80109a4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010b6c:	4b04      	ldr	r3, [pc, #16]	; (8010b80 <dhcp_inc_pcb_refcount+0x88>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	3301      	adds	r3, #1
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <dhcp_inc_pcb_refcount+0x88>)
 8010b76:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20000420 	.word	0x20000420
 8010b84:	2000041c 	.word	0x2000041c
 8010b88:	0801b554 	.word	0x0801b554
 8010b8c:	0801b58c 	.word	0x0801b58c
 8010b90:	0801b5b4 	.word	0x0801b5b4
 8010b94:	0801c0b8 	.word	0x0801c0b8
 8010b98:	080123b5 	.word	0x080123b5

08010b9c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010ba0:	4b0e      	ldr	r3, [pc, #56]	; (8010bdc <dhcp_dec_pcb_refcount+0x40>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d105      	bne.n	8010bb4 <dhcp_dec_pcb_refcount+0x18>
 8010ba8:	4b0d      	ldr	r3, [pc, #52]	; (8010be0 <dhcp_dec_pcb_refcount+0x44>)
 8010baa:	22ff      	movs	r2, #255	; 0xff
 8010bac:	490d      	ldr	r1, [pc, #52]	; (8010be4 <dhcp_dec_pcb_refcount+0x48>)
 8010bae:	480e      	ldr	r0, [pc, #56]	; (8010be8 <dhcp_dec_pcb_refcount+0x4c>)
 8010bb0:	f004 fe64 	bl	801587c <iprintf>
  dhcp_pcb_refcount--;
 8010bb4:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <dhcp_dec_pcb_refcount+0x40>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4b07      	ldr	r3, [pc, #28]	; (8010bdc <dhcp_dec_pcb_refcount+0x40>)
 8010bbe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010bc0:	4b06      	ldr	r3, [pc, #24]	; (8010bdc <dhcp_dec_pcb_refcount+0x40>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d107      	bne.n	8010bd8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010bc8:	4b08      	ldr	r3, [pc, #32]	; (8010bec <dhcp_dec_pcb_refcount+0x50>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff ff09 	bl	80109e4 <udp_remove>
    dhcp_pcb = NULL;
 8010bd2:	4b06      	ldr	r3, [pc, #24]	; (8010bec <dhcp_dec_pcb_refcount+0x50>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	601a      	str	r2, [r3, #0]
  }
}
 8010bd8:	bf00      	nop
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	20000420 	.word	0x20000420
 8010be0:	0801b554 	.word	0x0801b554
 8010be4:	0801b5dc 	.word	0x0801b5dc
 8010be8:	0801b5b4 	.word	0x0801b5b4
 8010bec:	2000041c 	.word	0x2000041c

08010bf0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010bfe:	210c      	movs	r1, #12
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f001 f819 	bl	8011c38 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010c06:	4b06      	ldr	r3, [pc, #24]	; (8010c20 <dhcp_handle_nak+0x30>)
 8010c08:	4a05      	ldr	r2, [pc, #20]	; (8010c20 <dhcp_handle_nak+0x30>)
 8010c0a:	4905      	ldr	r1, [pc, #20]	; (8010c20 <dhcp_handle_nak+0x30>)
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7f9 f963 	bl	8009ed8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fc0c 	bl	8011430 <dhcp_discover>
}
 8010c18:	bf00      	nop
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0801c0b8 	.word	0x0801c0b8

08010c24 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010c32:	2108      	movs	r1, #8
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f000 ffff 	bl	8011c38 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	331c      	adds	r3, #28
 8010c3e:	2200      	movs	r2, #0
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f002 fb00 	bl	8013248 <etharp_query>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	799b      	ldrb	r3, [r3, #6]
 8010c50:	2bff      	cmp	r3, #255	; 0xff
 8010c52:	d005      	beq.n	8010c60 <dhcp_check+0x3c>
    dhcp->tries++;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	799b      	ldrb	r3, [r3, #6]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010c60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010c64:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010c66:	893b      	ldrh	r3, [r7, #8]
 8010c68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010c6c:	4a06      	ldr	r2, [pc, #24]	; (8010c88 <dhcp_check+0x64>)
 8010c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8010c72:	1152      	asrs	r2, r2, #5
 8010c74:	17db      	asrs	r3, r3, #31
 8010c76:	1ad3      	subs	r3, r2, r3
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010c7e:	bf00      	nop
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	10624dd3 	.word	0x10624dd3

08010c8c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010c9c:	4b0c      	ldr	r3, [pc, #48]	; (8010cd0 <dhcp_handle_offer+0x44>)
 8010c9e:	789b      	ldrb	r3, [r3, #2]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d011      	beq.n	8010cc8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010caa:	4b0a      	ldr	r3, [pc, #40]	; (8010cd4 <dhcp_handle_offer+0x48>)
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7f8 fae3 	bl	800927a <lwip_htonl>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	691a      	ldr	r2, [r3, #16]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f808 	bl	8010cd8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010cc8:	bf00      	nop
 8010cca:	3710      	adds	r7, #16
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	20006adc 	.word	0x20006adc
 8010cd4:	20006ae4 	.word	0x20006ae4

08010cd8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010cd8:	b5b0      	push	{r4, r5, r7, lr}
 8010cda:	b08a      	sub	sp, #40	; 0x28
 8010cdc:	af02      	add	r7, sp, #8
 8010cde:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d109      	bne.n	8010cfa <dhcp_select+0x22>
 8010ce6:	4b71      	ldr	r3, [pc, #452]	; (8010eac <dhcp_select+0x1d4>)
 8010ce8:	f240 1277 	movw	r2, #375	; 0x177
 8010cec:	4970      	ldr	r1, [pc, #448]	; (8010eb0 <dhcp_select+0x1d8>)
 8010cee:	4871      	ldr	r0, [pc, #452]	; (8010eb4 <dhcp_select+0x1dc>)
 8010cf0:	f004 fdc4 	bl	801587c <iprintf>
 8010cf4:	f06f 030f 	mvn.w	r3, #15
 8010cf8:	e0d3      	b.n	8010ea2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010d00:	69bb      	ldr	r3, [r7, #24]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d109      	bne.n	8010d1a <dhcp_select+0x42>
 8010d06:	4b69      	ldr	r3, [pc, #420]	; (8010eac <dhcp_select+0x1d4>)
 8010d08:	f240 1279 	movw	r2, #377	; 0x179
 8010d0c:	496a      	ldr	r1, [pc, #424]	; (8010eb8 <dhcp_select+0x1e0>)
 8010d0e:	4869      	ldr	r0, [pc, #420]	; (8010eb4 <dhcp_select+0x1dc>)
 8010d10:	f004 fdb4 	bl	801587c <iprintf>
 8010d14:	f06f 0305 	mvn.w	r3, #5
 8010d18:	e0c3      	b.n	8010ea2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010d1a:	2101      	movs	r1, #1
 8010d1c:	69b8      	ldr	r0, [r7, #24]
 8010d1e:	f000 ff8b 	bl	8011c38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010d22:	f107 030c 	add.w	r3, r7, #12
 8010d26:	2203      	movs	r2, #3
 8010d28:	69b9      	ldr	r1, [r7, #24]
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f001 fc10 	bl	8012550 <dhcp_create_msg>
 8010d30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 8085 	beq.w	8010e44 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010d40:	89b8      	ldrh	r0, [r7, #12]
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d48:	2302      	movs	r3, #2
 8010d4a:	2239      	movs	r2, #57	; 0x39
 8010d4c:	f000 ff8e 	bl	8011c6c <dhcp_option>
 8010d50:	4603      	mov	r3, r0
 8010d52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010d54:	89b8      	ldrh	r0, [r7, #12]
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d60:	461a      	mov	r2, r3
 8010d62:	f000 ffdd 	bl	8011d20 <dhcp_option_short>
 8010d66:	4603      	mov	r3, r0
 8010d68:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010d6a:	89b8      	ldrh	r0, [r7, #12]
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d72:	2304      	movs	r3, #4
 8010d74:	2232      	movs	r2, #50	; 0x32
 8010d76:	f000 ff79 	bl	8011c6c <dhcp_option>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010d7e:	89bc      	ldrh	r4, [r7, #12]
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	69db      	ldr	r3, [r3, #28]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7f8 fa75 	bl	800927a <lwip_htonl>
 8010d90:	4603      	mov	r3, r0
 8010d92:	461a      	mov	r2, r3
 8010d94:	4629      	mov	r1, r5
 8010d96:	4620      	mov	r0, r4
 8010d98:	f000 fff4 	bl	8011d84 <dhcp_option_long>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010da0:	89b8      	ldrh	r0, [r7, #12]
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010da8:	2304      	movs	r3, #4
 8010daa:	2236      	movs	r2, #54	; 0x36
 8010dac:	f000 ff5e 	bl	8011c6c <dhcp_option>
 8010db0:	4603      	mov	r3, r0
 8010db2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010db4:	89bc      	ldrh	r4, [r7, #12]
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f8 fa5a 	bl	800927a <lwip_htonl>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	461a      	mov	r2, r3
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f000 ffd9 	bl	8011d84 <dhcp_option_long>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010dd6:	89b8      	ldrh	r0, [r7, #12]
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010dde:	2303      	movs	r3, #3
 8010de0:	2237      	movs	r2, #55	; 0x37
 8010de2:	f000 ff43 	bl	8011c6c <dhcp_option>
 8010de6:	4603      	mov	r3, r0
 8010de8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010dea:	2300      	movs	r3, #0
 8010dec:	77bb      	strb	r3, [r7, #30]
 8010dee:	e00e      	b.n	8010e0e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010df0:	89b8      	ldrh	r0, [r7, #12]
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010df8:	7fbb      	ldrb	r3, [r7, #30]
 8010dfa:	4a30      	ldr	r2, [pc, #192]	; (8010ebc <dhcp_select+0x1e4>)
 8010dfc:	5cd3      	ldrb	r3, [r2, r3]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	f000 ff68 	bl	8011cd4 <dhcp_option_byte>
 8010e04:	4603      	mov	r3, r0
 8010e06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010e08:	7fbb      	ldrb	r3, [r7, #30]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	77bb      	strb	r3, [r7, #30]
 8010e0e:	7fbb      	ldrb	r3, [r7, #30]
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d9ed      	bls.n	8010df0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010e14:	89b8      	ldrh	r0, [r7, #12]
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	33f0      	adds	r3, #240	; 0xf0
 8010e1a:	697a      	ldr	r2, [r7, #20]
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	f001 fc6d 	bl	80126fc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010e22:	4b27      	ldr	r3, [pc, #156]	; (8010ec0 <dhcp_select+0x1e8>)
 8010e24:	6818      	ldr	r0, [r3, #0]
 8010e26:	4b27      	ldr	r3, [pc, #156]	; (8010ec4 <dhcp_select+0x1ec>)
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	2343      	movs	r3, #67	; 0x43
 8010e30:	4a25      	ldr	r2, [pc, #148]	; (8010ec8 <dhcp_select+0x1f0>)
 8010e32:	6979      	ldr	r1, [r7, #20]
 8010e34:	f7ff fbda 	bl	80105ec <udp_sendto_if_src>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010e3c:	6978      	ldr	r0, [r7, #20]
 8010e3e:	f7f9 fca3 	bl	800a788 <pbuf_free>
 8010e42:	e001      	b.n	8010e48 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010e44:	23ff      	movs	r3, #255	; 0xff
 8010e46:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	799b      	ldrb	r3, [r3, #6]
 8010e4c:	2bff      	cmp	r3, #255	; 0xff
 8010e4e:	d005      	beq.n	8010e5c <dhcp_select+0x184>
    dhcp->tries++;
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	799b      	ldrb	r3, [r3, #6]
 8010e54:	3301      	adds	r3, #1
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	799b      	ldrb	r3, [r3, #6]
 8010e60:	2b05      	cmp	r3, #5
 8010e62:	d80d      	bhi.n	8010e80 <dhcp_select+0x1a8>
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	799b      	ldrb	r3, [r3, #6]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	4093      	lsls	r3, r2
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	461a      	mov	r2, r3
 8010e72:	0152      	lsls	r2, r2, #5
 8010e74:	1ad2      	subs	r2, r2, r3
 8010e76:	0092      	lsls	r2, r2, #2
 8010e78:	4413      	add	r3, r2
 8010e7a:	00db      	lsls	r3, r3, #3
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	e001      	b.n	8010e84 <dhcp_select+0x1ac>
 8010e80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010e84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010e86:	89fb      	ldrh	r3, [r7, #14]
 8010e88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010e8c:	4a0f      	ldr	r2, [pc, #60]	; (8010ecc <dhcp_select+0x1f4>)
 8010e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8010e92:	1152      	asrs	r2, r2, #5
 8010e94:	17db      	asrs	r3, r3, #31
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010e9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801b554 	.word	0x0801b554
 8010eb0:	0801b600 	.word	0x0801b600
 8010eb4:	0801b5b4 	.word	0x0801b5b4
 8010eb8:	0801b61c 	.word	0x0801b61c
 8010ebc:	20000020 	.word	0x20000020
 8010ec0:	2000041c 	.word	0x2000041c
 8010ec4:	0801c0b8 	.word	0x0801c0b8
 8010ec8:	0801c0bc 	.word	0x0801c0bc
 8010ecc:	10624dd3 	.word	0x10624dd3

08010ed0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010ed6:	4b27      	ldr	r3, [pc, #156]	; (8010f74 <dhcp_coarse_tmr+0xa4>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	607b      	str	r3, [r7, #4]
 8010edc:	e042      	b.n	8010f64 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d039      	beq.n	8010f5e <dhcp_coarse_tmr+0x8e>
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	795b      	ldrb	r3, [r3, #5]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d035      	beq.n	8010f5e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	8a9b      	ldrh	r3, [r3, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d012      	beq.n	8010f20 <dhcp_coarse_tmr+0x50>
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	8a5b      	ldrh	r3, [r3, #18]
 8010efe:	3301      	adds	r3, #1
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	825a      	strh	r2, [r3, #18]
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	8a5a      	ldrh	r2, [r3, #18]
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	8a9b      	ldrh	r3, [r3, #20]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d106      	bne.n	8010f20 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fdf6 	bl	8011b04 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f969 	bl	80111f0 <dhcp_start>
 8010f1e:	e01e      	b.n	8010f5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	8a1b      	ldrh	r3, [r3, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00b      	beq.n	8010f40 <dhcp_coarse_tmr+0x70>
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	8a1b      	ldrh	r3, [r3, #16]
 8010f2c:	1e5a      	subs	r2, r3, #1
 8010f2e:	b291      	uxth	r1, r2
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	8211      	strh	r1, [r2, #16]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d103      	bne.n	8010f40 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f8c6 	bl	80110ca <dhcp_t2_timeout>
 8010f3e:	e00e      	b.n	8010f5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	89db      	ldrh	r3, [r3, #14]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00a      	beq.n	8010f5e <dhcp_coarse_tmr+0x8e>
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	89db      	ldrh	r3, [r3, #14]
 8010f4c:	1e5a      	subs	r2, r3, #1
 8010f4e:	b291      	uxth	r1, r2
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	81d1      	strh	r1, [r2, #14]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d102      	bne.n	8010f5e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f888 	bl	801106e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	607b      	str	r3, [r7, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1b9      	bne.n	8010ede <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	bf00      	nop
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	20006ab0 	.word	0x20006ab0

08010f78 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010f7e:	4b16      	ldr	r3, [pc, #88]	; (8010fd8 <dhcp_fine_tmr+0x60>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	607b      	str	r3, [r7, #4]
 8010f84:	e020      	b.n	8010fc8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d017      	beq.n	8010fc2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	891b      	ldrh	r3, [r3, #8]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d906      	bls.n	8010fa8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	891b      	ldrh	r3, [r3, #8]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	811a      	strh	r2, [r3, #8]
 8010fa6:	e00c      	b.n	8010fc2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	891b      	ldrh	r3, [r3, #8]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d108      	bne.n	8010fc2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	891b      	ldrh	r3, [r3, #8]
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f80d 	bl	8010fdc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	607b      	str	r3, [r7, #4]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1db      	bne.n	8010f86 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010fce:	bf00      	nop
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	20006ab0 	.word	0x20006ab0

08010fdc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	795b      	ldrb	r3, [r3, #5]
 8010fee:	2b0c      	cmp	r3, #12
 8010ff0:	d003      	beq.n	8010ffa <dhcp_timeout+0x1e>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	795b      	ldrb	r3, [r3, #5]
 8010ff6:	2b06      	cmp	r3, #6
 8010ff8:	d103      	bne.n	8011002 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fa18 	bl	8011430 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011000:	e031      	b.n	8011066 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	795b      	ldrb	r3, [r3, #5]
 8011006:	2b01      	cmp	r3, #1
 8011008:	d10e      	bne.n	8011028 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	799b      	ldrb	r3, [r3, #6]
 801100e:	2b05      	cmp	r3, #5
 8011010:	d803      	bhi.n	801101a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff fe60 	bl	8010cd8 <dhcp_select>
}
 8011018:	e025      	b.n	8011066 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fd72 	bl	8011b04 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f8e5 	bl	80111f0 <dhcp_start>
}
 8011026:	e01e      	b.n	8011066 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	795b      	ldrb	r3, [r3, #5]
 801102c:	2b08      	cmp	r3, #8
 801102e:	d10b      	bne.n	8011048 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	799b      	ldrb	r3, [r3, #6]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d803      	bhi.n	8011040 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7ff fdf3 	bl	8010c24 <dhcp_check>
}
 801103e:	e012      	b.n	8011066 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fa97 	bl	8011574 <dhcp_bind>
}
 8011046:	e00e      	b.n	8011066 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	795b      	ldrb	r3, [r3, #5]
 801104c:	2b03      	cmp	r3, #3
 801104e:	d10a      	bne.n	8011066 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	799b      	ldrb	r3, [r3, #6]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d803      	bhi.n	8011060 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fc9d 	bl	8011998 <dhcp_reboot>
}
 801105e:	e002      	b.n	8011066 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f000 f9e5 	bl	8011430 <dhcp_discover>
}
 8011066:	bf00      	nop
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	795b      	ldrb	r3, [r3, #5]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d007      	beq.n	8011094 <dhcp_t1_timeout+0x26>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	795b      	ldrb	r3, [r3, #5]
 8011088:	2b0a      	cmp	r3, #10
 801108a:	d003      	beq.n	8011094 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011090:	2b05      	cmp	r3, #5
 8011092:	d116      	bne.n	80110c2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fb47 	bl	8011728 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	899b      	ldrh	r3, [r3, #12]
 801109e:	461a      	mov	r2, r3
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	8a5b      	ldrh	r3, [r3, #18]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	dd0b      	ble.n	80110c2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	461a      	mov	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	8a5b      	ldrh	r3, [r3, #18]
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	0fda      	lsrs	r2, r3, #31
 80110b8:	4413      	add	r3, r2
 80110ba:	105b      	asrs	r3, r3, #1
 80110bc:	b29a      	uxth	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80110c2:	bf00      	nop
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b084      	sub	sp, #16
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	795b      	ldrb	r3, [r3, #5]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d00b      	beq.n	80110f8 <dhcp_t2_timeout+0x2e>
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	795b      	ldrb	r3, [r3, #5]
 80110e4:	2b0a      	cmp	r3, #10
 80110e6:	d007      	beq.n	80110f8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80110ec:	2b05      	cmp	r3, #5
 80110ee:	d003      	beq.n	80110f8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	795b      	ldrb	r3, [r3, #5]
 80110f4:	2b04      	cmp	r3, #4
 80110f6:	d116      	bne.n	8011126 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 fbb1 	bl	8011860 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	8a9b      	ldrh	r3, [r3, #20]
 8011102:	461a      	mov	r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	8a5b      	ldrh	r3, [r3, #18]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	2b01      	cmp	r3, #1
 801110c:	dd0b      	ble.n	8011126 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	8a9b      	ldrh	r3, [r3, #20]
 8011112:	461a      	mov	r2, r3
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	8a5b      	ldrh	r3, [r3, #18]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	0fda      	lsrs	r2, r3, #31
 801111c:	4413      	add	r3, r2
 801111e:	105b      	asrs	r3, r3, #1
 8011120:	b29a      	uxth	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011126:	bf00      	nop
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
	...

08011130 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2200      	movs	r2, #0
 8011144:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801114c:	4b26      	ldr	r3, [pc, #152]	; (80111e8 <dhcp_handle_ack+0xb8>)
 801114e:	78db      	ldrb	r3, [r3, #3]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011154:	4b25      	ldr	r3, [pc, #148]	; (80111ec <dhcp_handle_ack+0xbc>)
 8011156:	68da      	ldr	r2, [r3, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801115c:	4b22      	ldr	r3, [pc, #136]	; (80111e8 <dhcp_handle_ack+0xb8>)
 801115e:	791b      	ldrb	r3, [r3, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d004      	beq.n	801116e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011164:	4b21      	ldr	r3, [pc, #132]	; (80111ec <dhcp_handle_ack+0xbc>)
 8011166:	691a      	ldr	r2, [r3, #16]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	62da      	str	r2, [r3, #44]	; 0x2c
 801116c:	e004      	b.n	8011178 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011172:	085a      	lsrs	r2, r3, #1
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011178:	4b1b      	ldr	r3, [pc, #108]	; (80111e8 <dhcp_handle_ack+0xb8>)
 801117a:	795b      	ldrb	r3, [r3, #5]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d004      	beq.n	801118a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011180:	4b1a      	ldr	r3, [pc, #104]	; (80111ec <dhcp_handle_ack+0xbc>)
 8011182:	695a      	ldr	r2, [r3, #20]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	631a      	str	r2, [r3, #48]	; 0x30
 8011188:	e007      	b.n	801119a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801118e:	4613      	mov	r3, r2
 8011190:	00db      	lsls	r3, r3, #3
 8011192:	1a9b      	subs	r3, r3, r2
 8011194:	08da      	lsrs	r2, r3, #3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	691a      	ldr	r2, [r3, #16]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80111a2:	4b11      	ldr	r3, [pc, #68]	; (80111e8 <dhcp_handle_ack+0xb8>)
 80111a4:	799b      	ldrb	r3, [r3, #6]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00b      	beq.n	80111c2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80111aa:	4b10      	ldr	r3, [pc, #64]	; (80111ec <dhcp_handle_ack+0xbc>)
 80111ac:	699b      	ldr	r3, [r3, #24]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7f8 f863 	bl	800927a <lwip_htonl>
 80111b4:	4602      	mov	r2, r0
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2201      	movs	r2, #1
 80111be:	71da      	strb	r2, [r3, #7]
 80111c0:	e002      	b.n	80111c8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80111c8:	4b07      	ldr	r3, [pc, #28]	; (80111e8 <dhcp_handle_ack+0xb8>)
 80111ca:	79db      	ldrb	r3, [r3, #7]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d007      	beq.n	80111e0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80111d0:	4b06      	ldr	r3, [pc, #24]	; (80111ec <dhcp_handle_ack+0xbc>)
 80111d2:	69db      	ldr	r3, [r3, #28]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f8 f850 	bl	800927a <lwip_htonl>
 80111da:	4602      	mov	r2, r0
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80111e0:	bf00      	nop
 80111e2:	3710      	adds	r7, #16
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20006adc 	.word	0x20006adc
 80111ec:	20006ae4 	.word	0x20006ae4

080111f0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d109      	bne.n	8011212 <dhcp_start+0x22>
 80111fe:	4b37      	ldr	r3, [pc, #220]	; (80112dc <dhcp_start+0xec>)
 8011200:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011204:	4936      	ldr	r1, [pc, #216]	; (80112e0 <dhcp_start+0xf0>)
 8011206:	4837      	ldr	r0, [pc, #220]	; (80112e4 <dhcp_start+0xf4>)
 8011208:	f004 fb38 	bl	801587c <iprintf>
 801120c:	f06f 030f 	mvn.w	r3, #15
 8011210:	e060      	b.n	80112d4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d109      	bne.n	8011234 <dhcp_start+0x44>
 8011220:	4b2e      	ldr	r3, [pc, #184]	; (80112dc <dhcp_start+0xec>)
 8011222:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011226:	4930      	ldr	r1, [pc, #192]	; (80112e8 <dhcp_start+0xf8>)
 8011228:	482e      	ldr	r0, [pc, #184]	; (80112e4 <dhcp_start+0xf4>)
 801122a:	f004 fb27 	bl	801587c <iprintf>
 801122e:	f06f 030f 	mvn.w	r3, #15
 8011232:	e04f      	b.n	80112d4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011238:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801123e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011242:	d202      	bcs.n	801124a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011244:	f04f 33ff 	mov.w	r3, #4294967295
 8011248:	e044      	b.n	80112d4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d10d      	bne.n	801126c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011250:	2034      	movs	r0, #52	; 0x34
 8011252:	f7f8 fae5 	bl	8009820 <mem_malloc>
 8011256:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d102      	bne.n	8011264 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801125e:	f04f 33ff 	mov.w	r3, #4294967295
 8011262:	e037      	b.n	80112d4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	625a      	str	r2, [r3, #36]	; 0x24
 801126a:	e005      	b.n	8011278 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	791b      	ldrb	r3, [r3, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011274:	f7ff fc92 	bl	8010b9c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011278:	2234      	movs	r2, #52	; 0x34
 801127a:	2100      	movs	r1, #0
 801127c:	68f8      	ldr	r0, [r7, #12]
 801127e:	f003 fde1 	bl	8014e44 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011282:	f7ff fc39 	bl	8010af8 <dhcp_inc_pcb_refcount>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <dhcp_start+0xa2>
    return ERR_MEM;
 801128c:	f04f 33ff 	mov.w	r3, #4294967295
 8011290:	e020      	b.n	80112d4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2201      	movs	r2, #1
 8011296:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801129e:	f003 0304 	and.w	r3, r3, #4
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d105      	bne.n	80112b2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80112a6:	2102      	movs	r1, #2
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	f000 fcc5 	bl	8011c38 <dhcp_set_state>
    return ERR_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	e010      	b.n	80112d4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f8bc 	bl	8011430 <dhcp_discover>
 80112b8:	4603      	mov	r3, r0
 80112ba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80112bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d005      	beq.n	80112d0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fc1d 	bl	8011b04 <dhcp_release_and_stop>
    return ERR_MEM;
 80112ca:	f04f 33ff 	mov.w	r3, #4294967295
 80112ce:	e001      	b.n	80112d4 <dhcp_start+0xe4>
  }
  return result;
 80112d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	0801b554 	.word	0x0801b554
 80112e0:	0801b638 	.word	0x0801b638
 80112e4:	0801b5b4 	.word	0x0801b5b4
 80112e8:	0801b67c 	.word	0x0801b67c

080112ec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d107      	bne.n	801130c <dhcp_arp_reply+0x20>
 80112fc:	4b0e      	ldr	r3, [pc, #56]	; (8011338 <dhcp_arp_reply+0x4c>)
 80112fe:	f240 328b 	movw	r2, #907	; 0x38b
 8011302:	490e      	ldr	r1, [pc, #56]	; (801133c <dhcp_arp_reply+0x50>)
 8011304:	480e      	ldr	r0, [pc, #56]	; (8011340 <dhcp_arp_reply+0x54>)
 8011306:	f004 fab9 	bl	801587c <iprintf>
 801130a:	e012      	b.n	8011332 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011310:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d00c      	beq.n	8011332 <dhcp_arp_reply+0x46>
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	795b      	ldrb	r3, [r3, #5]
 801131c:	2b08      	cmp	r3, #8
 801131e:	d108      	bne.n	8011332 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	429a      	cmp	r2, r3
 801132a:	d102      	bne.n	8011332 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 f809 	bl	8011344 <dhcp_decline>
    }
  }
}
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	0801b554 	.word	0x0801b554
 801133c:	0801b638 	.word	0x0801b638
 8011340:	0801b5b4 	.word	0x0801b5b4

08011344 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011344:	b5b0      	push	{r4, r5, r7, lr}
 8011346:	b08a      	sub	sp, #40	; 0x28
 8011348:	af02      	add	r7, sp, #8
 801134a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011350:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011352:	210c      	movs	r1, #12
 8011354:	69b8      	ldr	r0, [r7, #24]
 8011356:	f000 fc6f 	bl	8011c38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801135a:	f107 030c 	add.w	r3, r7, #12
 801135e:	2204      	movs	r2, #4
 8011360:	69b9      	ldr	r1, [r7, #24]
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f001 f8f4 	bl	8012550 <dhcp_create_msg>
 8011368:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d035      	beq.n	80113dc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011376:	89b8      	ldrh	r0, [r7, #12]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801137e:	2304      	movs	r3, #4
 8011380:	2232      	movs	r2, #50	; 0x32
 8011382:	f000 fc73 	bl	8011c6c <dhcp_option>
 8011386:	4603      	mov	r3, r0
 8011388:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801138a:	89bc      	ldrh	r4, [r7, #12]
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	69db      	ldr	r3, [r3, #28]
 8011396:	4618      	mov	r0, r3
 8011398:	f7f7 ff6f 	bl	800927a <lwip_htonl>
 801139c:	4603      	mov	r3, r0
 801139e:	461a      	mov	r2, r3
 80113a0:	4629      	mov	r1, r5
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 fcee 	bl	8011d84 <dhcp_option_long>
 80113a8:	4603      	mov	r3, r0
 80113aa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80113ac:	89b8      	ldrh	r0, [r7, #12]
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	33f0      	adds	r3, #240	; 0xf0
 80113b2:	697a      	ldr	r2, [r7, #20]
 80113b4:	4619      	mov	r1, r3
 80113b6:	f001 f9a1 	bl	80126fc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80113ba:	4b19      	ldr	r3, [pc, #100]	; (8011420 <dhcp_decline+0xdc>)
 80113bc:	6818      	ldr	r0, [r3, #0]
 80113be:	4b19      	ldr	r3, [pc, #100]	; (8011424 <dhcp_decline+0xe0>)
 80113c0:	9301      	str	r3, [sp, #4]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	2343      	movs	r3, #67	; 0x43
 80113c8:	4a17      	ldr	r2, [pc, #92]	; (8011428 <dhcp_decline+0xe4>)
 80113ca:	6979      	ldr	r1, [r7, #20]
 80113cc:	f7ff f90e 	bl	80105ec <udp_sendto_if_src>
 80113d0:	4603      	mov	r3, r0
 80113d2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80113d4:	6978      	ldr	r0, [r7, #20]
 80113d6:	f7f9 f9d7 	bl	800a788 <pbuf_free>
 80113da:	e001      	b.n	80113e0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80113dc:	23ff      	movs	r3, #255	; 0xff
 80113de:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	799b      	ldrb	r3, [r3, #6]
 80113e4:	2bff      	cmp	r3, #255	; 0xff
 80113e6:	d005      	beq.n	80113f4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	799b      	ldrb	r3, [r3, #6]
 80113ec:	3301      	adds	r3, #1
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80113f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80113f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80113fa:	89fb      	ldrh	r3, [r7, #14]
 80113fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011400:	4a0a      	ldr	r2, [pc, #40]	; (801142c <dhcp_decline+0xe8>)
 8011402:	fb82 1203 	smull	r1, r2, r2, r3
 8011406:	1152      	asrs	r2, r2, #5
 8011408:	17db      	asrs	r3, r3, #31
 801140a:	1ad3      	subs	r3, r2, r3
 801140c:	b29a      	uxth	r2, r3
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011412:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3720      	adds	r7, #32
 801141a:	46bd      	mov	sp, r7
 801141c:	bdb0      	pop	{r4, r5, r7, pc}
 801141e:	bf00      	nop
 8011420:	2000041c 	.word	0x2000041c
 8011424:	0801c0b8 	.word	0x0801c0b8
 8011428:	0801c0bc 	.word	0x0801c0bc
 801142c:	10624dd3 	.word	0x10624dd3

08011430 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b08a      	sub	sp, #40	; 0x28
 8011434:	af02      	add	r7, sp, #8
 8011436:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801143e:	2300      	movs	r3, #0
 8011440:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2200      	movs	r2, #0
 8011446:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011448:	2106      	movs	r1, #6
 801144a:	69b8      	ldr	r0, [r7, #24]
 801144c:	f000 fbf4 	bl	8011c38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011450:	f107 0308 	add.w	r3, r7, #8
 8011454:	2201      	movs	r2, #1
 8011456:	69b9      	ldr	r1, [r7, #24]
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f001 f879 	bl	8012550 <dhcp_create_msg>
 801145e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d04b      	beq.n	80114fe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801146c:	8938      	ldrh	r0, [r7, #8]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011474:	2302      	movs	r3, #2
 8011476:	2239      	movs	r2, #57	; 0x39
 8011478:	f000 fbf8 	bl	8011c6c <dhcp_option>
 801147c:	4603      	mov	r3, r0
 801147e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011480:	8938      	ldrh	r0, [r7, #8]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801148c:	461a      	mov	r2, r3
 801148e:	f000 fc47 	bl	8011d20 <dhcp_option_short>
 8011492:	4603      	mov	r3, r0
 8011494:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011496:	8938      	ldrh	r0, [r7, #8]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801149e:	2303      	movs	r3, #3
 80114a0:	2237      	movs	r2, #55	; 0x37
 80114a2:	f000 fbe3 	bl	8011c6c <dhcp_option>
 80114a6:	4603      	mov	r3, r0
 80114a8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80114aa:	2300      	movs	r3, #0
 80114ac:	77fb      	strb	r3, [r7, #31]
 80114ae:	e00e      	b.n	80114ce <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80114b0:	8938      	ldrh	r0, [r7, #8]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114b8:	7ffb      	ldrb	r3, [r7, #31]
 80114ba:	4a29      	ldr	r2, [pc, #164]	; (8011560 <dhcp_discover+0x130>)
 80114bc:	5cd3      	ldrb	r3, [r2, r3]
 80114be:	461a      	mov	r2, r3
 80114c0:	f000 fc08 	bl	8011cd4 <dhcp_option_byte>
 80114c4:	4603      	mov	r3, r0
 80114c6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80114c8:	7ffb      	ldrb	r3, [r7, #31]
 80114ca:	3301      	adds	r3, #1
 80114cc:	77fb      	strb	r3, [r7, #31]
 80114ce:	7ffb      	ldrb	r3, [r7, #31]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d9ed      	bls.n	80114b0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80114d4:	8938      	ldrh	r0, [r7, #8]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	33f0      	adds	r3, #240	; 0xf0
 80114da:	693a      	ldr	r2, [r7, #16]
 80114dc:	4619      	mov	r1, r3
 80114de:	f001 f90d 	bl	80126fc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80114e2:	4b20      	ldr	r3, [pc, #128]	; (8011564 <dhcp_discover+0x134>)
 80114e4:	6818      	ldr	r0, [r3, #0]
 80114e6:	4b20      	ldr	r3, [pc, #128]	; (8011568 <dhcp_discover+0x138>)
 80114e8:	9301      	str	r3, [sp, #4]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	9300      	str	r3, [sp, #0]
 80114ee:	2343      	movs	r3, #67	; 0x43
 80114f0:	4a1e      	ldr	r2, [pc, #120]	; (801156c <dhcp_discover+0x13c>)
 80114f2:	6939      	ldr	r1, [r7, #16]
 80114f4:	f7ff f87a 	bl	80105ec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80114f8:	6938      	ldr	r0, [r7, #16]
 80114fa:	f7f9 f945 	bl	800a788 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	799b      	ldrb	r3, [r3, #6]
 8011502:	2bff      	cmp	r3, #255	; 0xff
 8011504:	d005      	beq.n	8011512 <dhcp_discover+0xe2>
    dhcp->tries++;
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	799b      	ldrb	r3, [r3, #6]
 801150a:	3301      	adds	r3, #1
 801150c:	b2da      	uxtb	r2, r3
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	799b      	ldrb	r3, [r3, #6]
 8011516:	2b05      	cmp	r3, #5
 8011518:	d80d      	bhi.n	8011536 <dhcp_discover+0x106>
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	799b      	ldrb	r3, [r3, #6]
 801151e:	461a      	mov	r2, r3
 8011520:	2301      	movs	r3, #1
 8011522:	4093      	lsls	r3, r2
 8011524:	b29b      	uxth	r3, r3
 8011526:	461a      	mov	r2, r3
 8011528:	0152      	lsls	r2, r2, #5
 801152a:	1ad2      	subs	r2, r2, r3
 801152c:	0092      	lsls	r2, r2, #2
 801152e:	4413      	add	r3, r2
 8011530:	00db      	lsls	r3, r3, #3
 8011532:	b29b      	uxth	r3, r3
 8011534:	e001      	b.n	801153a <dhcp_discover+0x10a>
 8011536:	f64e 2360 	movw	r3, #60000	; 0xea60
 801153a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801153c:	897b      	ldrh	r3, [r7, #10]
 801153e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011542:	4a0b      	ldr	r2, [pc, #44]	; (8011570 <dhcp_discover+0x140>)
 8011544:	fb82 1203 	smull	r1, r2, r2, r3
 8011548:	1152      	asrs	r2, r2, #5
 801154a:	17db      	asrs	r3, r3, #31
 801154c:	1ad3      	subs	r3, r2, r3
 801154e:	b29a      	uxth	r2, r3
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3720      	adds	r7, #32
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	20000020 	.word	0x20000020
 8011564:	2000041c 	.word	0x2000041c
 8011568:	0801c0b8 	.word	0x0801c0b8
 801156c:	0801c0bc 	.word	0x0801c0bc
 8011570:	10624dd3 	.word	0x10624dd3

08011574 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b088      	sub	sp, #32
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d107      	bne.n	8011592 <dhcp_bind+0x1e>
 8011582:	4b64      	ldr	r3, [pc, #400]	; (8011714 <dhcp_bind+0x1a0>)
 8011584:	f240 4215 	movw	r2, #1045	; 0x415
 8011588:	4963      	ldr	r1, [pc, #396]	; (8011718 <dhcp_bind+0x1a4>)
 801158a:	4864      	ldr	r0, [pc, #400]	; (801171c <dhcp_bind+0x1a8>)
 801158c:	f004 f976 	bl	801587c <iprintf>
 8011590:	e0bc      	b.n	801170c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011596:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d107      	bne.n	80115ae <dhcp_bind+0x3a>
 801159e:	4b5d      	ldr	r3, [pc, #372]	; (8011714 <dhcp_bind+0x1a0>)
 80115a0:	f240 4217 	movw	r2, #1047	; 0x417
 80115a4:	495e      	ldr	r1, [pc, #376]	; (8011720 <dhcp_bind+0x1ac>)
 80115a6:	485d      	ldr	r0, [pc, #372]	; (801171c <dhcp_bind+0x1a8>)
 80115a8:	f004 f968 	bl	801587c <iprintf>
 80115ac:	e0ae      	b.n	801170c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	2200      	movs	r2, #0
 80115b2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115bc:	d019      	beq.n	80115f2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c2:	331e      	adds	r3, #30
 80115c4:	4a57      	ldr	r2, [pc, #348]	; (8011724 <dhcp_bind+0x1b0>)
 80115c6:	fba2 2303 	umull	r2, r3, r2, r3
 80115ca:	095b      	lsrs	r3, r3, #5
 80115cc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115d4:	d302      	bcc.n	80115dc <dhcp_bind+0x68>
      timeout = 0xffff;
 80115d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115da:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	b29a      	uxth	r2, r3
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	8a9b      	ldrh	r3, [r3, #20]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	2201      	movs	r2, #1
 80115f0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115fa:	d01d      	beq.n	8011638 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011600:	331e      	adds	r3, #30
 8011602:	4a48      	ldr	r2, [pc, #288]	; (8011724 <dhcp_bind+0x1b0>)
 8011604:	fba2 2303 	umull	r2, r3, r2, r3
 8011608:	095b      	lsrs	r3, r3, #5
 801160a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011612:	d302      	bcc.n	801161a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011618:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	b29a      	uxth	r2, r3
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	895b      	ldrh	r3, [r3, #10]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d102      	bne.n	8011630 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	2201      	movs	r2, #1
 801162e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	895a      	ldrh	r2, [r3, #10]
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011640:	d01d      	beq.n	801167e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011646:	331e      	adds	r3, #30
 8011648:	4a36      	ldr	r2, [pc, #216]	; (8011724 <dhcp_bind+0x1b0>)
 801164a:	fba2 2303 	umull	r2, r3, r2, r3
 801164e:	095b      	lsrs	r3, r3, #5
 8011650:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011658:	d302      	bcc.n	8011660 <dhcp_bind+0xec>
      timeout = 0xffff;
 801165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801165e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	b29a      	uxth	r2, r3
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	899b      	ldrh	r3, [r3, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d102      	bne.n	8011676 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	2201      	movs	r2, #1
 8011674:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	899a      	ldrh	r2, [r3, #12]
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	895a      	ldrh	r2, [r3, #10]
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	899b      	ldrh	r3, [r3, #12]
 8011686:	429a      	cmp	r2, r3
 8011688:	d306      	bcc.n	8011698 <dhcp_bind+0x124>
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	899b      	ldrh	r3, [r3, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d002      	beq.n	8011698 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	2200      	movs	r2, #0
 8011696:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	79db      	ldrb	r3, [r3, #7]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d003      	beq.n	80116a8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	6a1b      	ldr	r3, [r3, #32]
 80116a4:	613b      	str	r3, [r7, #16]
 80116a6:	e014      	b.n	80116d2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	331c      	adds	r3, #28
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80116b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	db02      	blt.n	80116be <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80116b8:	23ff      	movs	r3, #255	; 0xff
 80116ba:	613b      	str	r3, [r7, #16]
 80116bc:	e009      	b.n	80116d2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	2bbf      	cmp	r3, #191	; 0xbf
 80116c2:	d903      	bls.n	80116cc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80116c4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80116c8:	613b      	str	r3, [r7, #16]
 80116ca:	e002      	b.n	80116d2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80116cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116d0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d108      	bne.n	80116f0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	69da      	ldr	r2, [r3, #28]
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	4013      	ands	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80116ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80116f0:	210a      	movs	r1, #10
 80116f2:	69b8      	ldr	r0, [r7, #24]
 80116f4:	f000 faa0 	bl	8011c38 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	f103 011c 	add.w	r1, r3, #28
 80116fe:	f107 030c 	add.w	r3, r7, #12
 8011702:	f107 0210 	add.w	r2, r7, #16
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7f8 fbe6 	bl	8009ed8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801170c:	3720      	adds	r7, #32
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	0801b554 	.word	0x0801b554
 8011718:	0801b6b4 	.word	0x0801b6b4
 801171c:	0801b5b4 	.word	0x0801b5b4
 8011720:	0801b6d0 	.word	0x0801b6d0
 8011724:	88888889 	.word	0x88888889

08011728 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b08a      	sub	sp, #40	; 0x28
 801172c:	af02      	add	r7, sp, #8
 801172e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011736:	2105      	movs	r1, #5
 8011738:	69b8      	ldr	r0, [r7, #24]
 801173a:	f000 fa7d 	bl	8011c38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801173e:	f107 030c 	add.w	r3, r7, #12
 8011742:	2203      	movs	r2, #3
 8011744:	69b9      	ldr	r1, [r7, #24]
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 ff02 	bl	8012550 <dhcp_create_msg>
 801174c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d04e      	beq.n	80117f2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801175a:	89b8      	ldrh	r0, [r7, #12]
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011762:	2302      	movs	r3, #2
 8011764:	2239      	movs	r2, #57	; 0x39
 8011766:	f000 fa81 	bl	8011c6c <dhcp_option>
 801176a:	4603      	mov	r3, r0
 801176c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801176e:	89b8      	ldrh	r0, [r7, #12]
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801177a:	461a      	mov	r2, r3
 801177c:	f000 fad0 	bl	8011d20 <dhcp_option_short>
 8011780:	4603      	mov	r3, r0
 8011782:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011784:	89b8      	ldrh	r0, [r7, #12]
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801178c:	2303      	movs	r3, #3
 801178e:	2237      	movs	r2, #55	; 0x37
 8011790:	f000 fa6c 	bl	8011c6c <dhcp_option>
 8011794:	4603      	mov	r3, r0
 8011796:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011798:	2300      	movs	r3, #0
 801179a:	77bb      	strb	r3, [r7, #30]
 801179c:	e00e      	b.n	80117bc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801179e:	89b8      	ldrh	r0, [r7, #12]
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117a6:	7fbb      	ldrb	r3, [r7, #30]
 80117a8:	4a2a      	ldr	r2, [pc, #168]	; (8011854 <dhcp_renew+0x12c>)
 80117aa:	5cd3      	ldrb	r3, [r2, r3]
 80117ac:	461a      	mov	r2, r3
 80117ae:	f000 fa91 	bl	8011cd4 <dhcp_option_byte>
 80117b2:	4603      	mov	r3, r0
 80117b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80117b6:	7fbb      	ldrb	r3, [r7, #30]
 80117b8:	3301      	adds	r3, #1
 80117ba:	77bb      	strb	r3, [r7, #30]
 80117bc:	7fbb      	ldrb	r3, [r7, #30]
 80117be:	2b02      	cmp	r3, #2
 80117c0:	d9ed      	bls.n	801179e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80117c2:	89b8      	ldrh	r0, [r7, #12]
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	33f0      	adds	r3, #240	; 0xf0
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	4619      	mov	r1, r3
 80117cc:	f000 ff96 	bl	80126fc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80117d0:	4b21      	ldr	r3, [pc, #132]	; (8011858 <dhcp_renew+0x130>)
 80117d2:	6818      	ldr	r0, [r3, #0]
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	f103 0218 	add.w	r2, r3, #24
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	2343      	movs	r3, #67	; 0x43
 80117e0:	6979      	ldr	r1, [r7, #20]
 80117e2:	f7fe fe8f 	bl	8010504 <udp_sendto_if>
 80117e6:	4603      	mov	r3, r0
 80117e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80117ea:	6978      	ldr	r0, [r7, #20]
 80117ec:	f7f8 ffcc 	bl	800a788 <pbuf_free>
 80117f0:	e001      	b.n	80117f6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80117f2:	23ff      	movs	r3, #255	; 0xff
 80117f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	799b      	ldrb	r3, [r3, #6]
 80117fa:	2bff      	cmp	r3, #255	; 0xff
 80117fc:	d005      	beq.n	801180a <dhcp_renew+0xe2>
    dhcp->tries++;
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	799b      	ldrb	r3, [r3, #6]
 8011802:	3301      	adds	r3, #1
 8011804:	b2da      	uxtb	r2, r3
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	799b      	ldrb	r3, [r3, #6]
 801180e:	2b09      	cmp	r3, #9
 8011810:	d80a      	bhi.n	8011828 <dhcp_renew+0x100>
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	799b      	ldrb	r3, [r3, #6]
 8011816:	b29b      	uxth	r3, r3
 8011818:	461a      	mov	r2, r3
 801181a:	0152      	lsls	r2, r2, #5
 801181c:	1ad2      	subs	r2, r2, r3
 801181e:	0092      	lsls	r2, r2, #2
 8011820:	4413      	add	r3, r2
 8011822:	011b      	lsls	r3, r3, #4
 8011824:	b29b      	uxth	r3, r3
 8011826:	e001      	b.n	801182c <dhcp_renew+0x104>
 8011828:	f644 6320 	movw	r3, #20000	; 0x4e20
 801182c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801182e:	89fb      	ldrh	r3, [r7, #14]
 8011830:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011834:	4a09      	ldr	r2, [pc, #36]	; (801185c <dhcp_renew+0x134>)
 8011836:	fb82 1203 	smull	r1, r2, r2, r3
 801183a:	1152      	asrs	r2, r2, #5
 801183c:	17db      	asrs	r3, r3, #31
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	b29a      	uxth	r2, r3
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801184a:	4618      	mov	r0, r3
 801184c:	3720      	adds	r7, #32
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	20000020 	.word	0x20000020
 8011858:	2000041c 	.word	0x2000041c
 801185c:	10624dd3 	.word	0x10624dd3

08011860 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08a      	sub	sp, #40	; 0x28
 8011864:	af02      	add	r7, sp, #8
 8011866:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801186e:	2104      	movs	r1, #4
 8011870:	69b8      	ldr	r0, [r7, #24]
 8011872:	f000 f9e1 	bl	8011c38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011876:	f107 030c 	add.w	r3, r7, #12
 801187a:	2203      	movs	r2, #3
 801187c:	69b9      	ldr	r1, [r7, #24]
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fe66 	bl	8012550 <dhcp_create_msg>
 8011884:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d04c      	beq.n	8011926 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011892:	89b8      	ldrh	r0, [r7, #12]
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801189a:	2302      	movs	r3, #2
 801189c:	2239      	movs	r2, #57	; 0x39
 801189e:	f000 f9e5 	bl	8011c6c <dhcp_option>
 80118a2:	4603      	mov	r3, r0
 80118a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80118a6:	89b8      	ldrh	r0, [r7, #12]
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118b2:	461a      	mov	r2, r3
 80118b4:	f000 fa34 	bl	8011d20 <dhcp_option_short>
 80118b8:	4603      	mov	r3, r0
 80118ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80118bc:	89b8      	ldrh	r0, [r7, #12]
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118c4:	2303      	movs	r3, #3
 80118c6:	2237      	movs	r2, #55	; 0x37
 80118c8:	f000 f9d0 	bl	8011c6c <dhcp_option>
 80118cc:	4603      	mov	r3, r0
 80118ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118d0:	2300      	movs	r3, #0
 80118d2:	77bb      	strb	r3, [r7, #30]
 80118d4:	e00e      	b.n	80118f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80118d6:	89b8      	ldrh	r0, [r7, #12]
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118de:	7fbb      	ldrb	r3, [r7, #30]
 80118e0:	4a29      	ldr	r2, [pc, #164]	; (8011988 <dhcp_rebind+0x128>)
 80118e2:	5cd3      	ldrb	r3, [r2, r3]
 80118e4:	461a      	mov	r2, r3
 80118e6:	f000 f9f5 	bl	8011cd4 <dhcp_option_byte>
 80118ea:	4603      	mov	r3, r0
 80118ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118ee:	7fbb      	ldrb	r3, [r7, #30]
 80118f0:	3301      	adds	r3, #1
 80118f2:	77bb      	strb	r3, [r7, #30]
 80118f4:	7fbb      	ldrb	r3, [r7, #30]
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	d9ed      	bls.n	80118d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118fa:	89b8      	ldrh	r0, [r7, #12]
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	33f0      	adds	r3, #240	; 0xf0
 8011900:	697a      	ldr	r2, [r7, #20]
 8011902:	4619      	mov	r1, r3
 8011904:	f000 fefa 	bl	80126fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011908:	4b20      	ldr	r3, [pc, #128]	; (801198c <dhcp_rebind+0x12c>)
 801190a:	6818      	ldr	r0, [r3, #0]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	2343      	movs	r3, #67	; 0x43
 8011912:	4a1f      	ldr	r2, [pc, #124]	; (8011990 <dhcp_rebind+0x130>)
 8011914:	6979      	ldr	r1, [r7, #20]
 8011916:	f7fe fdf5 	bl	8010504 <udp_sendto_if>
 801191a:	4603      	mov	r3, r0
 801191c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801191e:	6978      	ldr	r0, [r7, #20]
 8011920:	f7f8 ff32 	bl	800a788 <pbuf_free>
 8011924:	e001      	b.n	801192a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011926:	23ff      	movs	r3, #255	; 0xff
 8011928:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	799b      	ldrb	r3, [r3, #6]
 801192e:	2bff      	cmp	r3, #255	; 0xff
 8011930:	d005      	beq.n	801193e <dhcp_rebind+0xde>
    dhcp->tries++;
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	799b      	ldrb	r3, [r3, #6]
 8011936:	3301      	adds	r3, #1
 8011938:	b2da      	uxtb	r2, r3
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	799b      	ldrb	r3, [r3, #6]
 8011942:	2b09      	cmp	r3, #9
 8011944:	d80a      	bhi.n	801195c <dhcp_rebind+0xfc>
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	799b      	ldrb	r3, [r3, #6]
 801194a:	b29b      	uxth	r3, r3
 801194c:	461a      	mov	r2, r3
 801194e:	0152      	lsls	r2, r2, #5
 8011950:	1ad2      	subs	r2, r2, r3
 8011952:	0092      	lsls	r2, r2, #2
 8011954:	4413      	add	r3, r2
 8011956:	00db      	lsls	r3, r3, #3
 8011958:	b29b      	uxth	r3, r3
 801195a:	e001      	b.n	8011960 <dhcp_rebind+0x100>
 801195c:	f242 7310 	movw	r3, #10000	; 0x2710
 8011960:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011962:	89fb      	ldrh	r3, [r7, #14]
 8011964:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011968:	4a0a      	ldr	r2, [pc, #40]	; (8011994 <dhcp_rebind+0x134>)
 801196a:	fb82 1203 	smull	r1, r2, r2, r3
 801196e:	1152      	asrs	r2, r2, #5
 8011970:	17db      	asrs	r3, r3, #31
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	b29a      	uxth	r2, r3
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801197a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801197e:	4618      	mov	r0, r3
 8011980:	3720      	adds	r7, #32
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	20000020 	.word	0x20000020
 801198c:	2000041c 	.word	0x2000041c
 8011990:	0801c0bc 	.word	0x0801c0bc
 8011994:	10624dd3 	.word	0x10624dd3

08011998 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011998:	b5b0      	push	{r4, r5, r7, lr}
 801199a:	b08a      	sub	sp, #40	; 0x28
 801199c:	af02      	add	r7, sp, #8
 801199e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80119a6:	2103      	movs	r1, #3
 80119a8:	69b8      	ldr	r0, [r7, #24]
 80119aa:	f000 f945 	bl	8011c38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80119ae:	f107 030c 	add.w	r3, r7, #12
 80119b2:	2203      	movs	r2, #3
 80119b4:	69b9      	ldr	r1, [r7, #24]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fdca 	bl	8012550 <dhcp_create_msg>
 80119bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d066      	beq.n	8011a92 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80119ca:	89b8      	ldrh	r0, [r7, #12]
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119d2:	2302      	movs	r3, #2
 80119d4:	2239      	movs	r2, #57	; 0x39
 80119d6:	f000 f949 	bl	8011c6c <dhcp_option>
 80119da:	4603      	mov	r3, r0
 80119dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80119de:	89b8      	ldrh	r0, [r7, #12]
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	33f0      	adds	r3, #240	; 0xf0
 80119e4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80119e8:	4619      	mov	r1, r3
 80119ea:	f000 f999 	bl	8011d20 <dhcp_option_short>
 80119ee:	4603      	mov	r3, r0
 80119f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80119f2:	89b8      	ldrh	r0, [r7, #12]
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119fa:	2304      	movs	r3, #4
 80119fc:	2232      	movs	r2, #50	; 0x32
 80119fe:	f000 f935 	bl	8011c6c <dhcp_option>
 8011a02:	4603      	mov	r3, r0
 8011a04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011a06:	89bc      	ldrh	r4, [r7, #12]
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	69db      	ldr	r3, [r3, #28]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7f7 fc31 	bl	800927a <lwip_htonl>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f000 f9b0 	bl	8011d84 <dhcp_option_long>
 8011a24:	4603      	mov	r3, r0
 8011a26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011a28:	89b8      	ldrh	r0, [r7, #12]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a30:	2303      	movs	r3, #3
 8011a32:	2237      	movs	r2, #55	; 0x37
 8011a34:	f000 f91a 	bl	8011c6c <dhcp_option>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	77bb      	strb	r3, [r7, #30]
 8011a40:	e00e      	b.n	8011a60 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011a42:	89b8      	ldrh	r0, [r7, #12]
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a4a:	7fbb      	ldrb	r3, [r7, #30]
 8011a4c:	4a29      	ldr	r2, [pc, #164]	; (8011af4 <dhcp_reboot+0x15c>)
 8011a4e:	5cd3      	ldrb	r3, [r2, r3]
 8011a50:	461a      	mov	r2, r3
 8011a52:	f000 f93f 	bl	8011cd4 <dhcp_option_byte>
 8011a56:	4603      	mov	r3, r0
 8011a58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a5a:	7fbb      	ldrb	r3, [r7, #30]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	77bb      	strb	r3, [r7, #30]
 8011a60:	7fbb      	ldrb	r3, [r7, #30]
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d9ed      	bls.n	8011a42 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011a66:	89b8      	ldrh	r0, [r7, #12]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	33f0      	adds	r3, #240	; 0xf0
 8011a6c:	697a      	ldr	r2, [r7, #20]
 8011a6e:	4619      	mov	r1, r3
 8011a70:	f000 fe44 	bl	80126fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011a74:	4b20      	ldr	r3, [pc, #128]	; (8011af8 <dhcp_reboot+0x160>)
 8011a76:	6818      	ldr	r0, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	2343      	movs	r3, #67	; 0x43
 8011a7e:	4a1f      	ldr	r2, [pc, #124]	; (8011afc <dhcp_reboot+0x164>)
 8011a80:	6979      	ldr	r1, [r7, #20]
 8011a82:	f7fe fd3f 	bl	8010504 <udp_sendto_if>
 8011a86:	4603      	mov	r3, r0
 8011a88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011a8a:	6978      	ldr	r0, [r7, #20]
 8011a8c:	f7f8 fe7c 	bl	800a788 <pbuf_free>
 8011a90:	e001      	b.n	8011a96 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011a92:	23ff      	movs	r3, #255	; 0xff
 8011a94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	799b      	ldrb	r3, [r3, #6]
 8011a9a:	2bff      	cmp	r3, #255	; 0xff
 8011a9c:	d005      	beq.n	8011aaa <dhcp_reboot+0x112>
    dhcp->tries++;
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	799b      	ldrb	r3, [r3, #6]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	799b      	ldrb	r3, [r3, #6]
 8011aae:	2b09      	cmp	r3, #9
 8011ab0:	d80a      	bhi.n	8011ac8 <dhcp_reboot+0x130>
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	799b      	ldrb	r3, [r3, #6]
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	461a      	mov	r2, r3
 8011aba:	0152      	lsls	r2, r2, #5
 8011abc:	1ad2      	subs	r2, r2, r3
 8011abe:	0092      	lsls	r2, r2, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	e001      	b.n	8011acc <dhcp_reboot+0x134>
 8011ac8:	f242 7310 	movw	r3, #10000	; 0x2710
 8011acc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ace:	89fb      	ldrh	r3, [r7, #14]
 8011ad0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ad4:	4a0a      	ldr	r2, [pc, #40]	; (8011b00 <dhcp_reboot+0x168>)
 8011ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8011ada:	1152      	asrs	r2, r2, #5
 8011adc:	17db      	asrs	r3, r3, #31
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011ae6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3720      	adds	r7, #32
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bdb0      	pop	{r4, r5, r7, pc}
 8011af2:	bf00      	nop
 8011af4:	20000020 	.word	0x20000020
 8011af8:	2000041c 	.word	0x2000041c
 8011afc:	0801c0bc 	.word	0x0801c0bc
 8011b00:	10624dd3 	.word	0x10624dd3

08011b04 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011b04:	b5b0      	push	{r4, r5, r7, lr}
 8011b06:	b08a      	sub	sp, #40	; 0x28
 8011b08:	af02      	add	r7, sp, #8
 8011b0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b10:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f000 8084 	beq.w	8011c22 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	795b      	ldrb	r3, [r3, #5]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f000 8081 	beq.w	8011c26 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	2200      	movs	r2, #0
 8011b34:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	2200      	movs	r2, #0
 8011b46:	631a      	str	r2, [r3, #48]	; 0x30
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	829a      	strh	r2, [r3, #20]
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	8a9a      	ldrh	r2, [r3, #20]
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	825a      	strh	r2, [r3, #18]
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	8a5a      	ldrh	r2, [r3, #18]
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	821a      	strh	r2, [r3, #16]
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	8a1a      	ldrh	r2, [r3, #16]
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fdee 	bl	8012758 <dhcp_supplied_address>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d03b      	beq.n	8011bfa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011b82:	f107 030e 	add.w	r3, r7, #14
 8011b86:	2207      	movs	r2, #7
 8011b88:	69f9      	ldr	r1, [r7, #28]
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 fce0 	bl	8012550 <dhcp_create_msg>
 8011b90:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d030      	beq.n	8011bfa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011b9e:	89f8      	ldrh	r0, [r7, #14]
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ba6:	2304      	movs	r3, #4
 8011ba8:	2236      	movs	r2, #54	; 0x36
 8011baa:	f000 f85f 	bl	8011c6c <dhcp_option>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011bb2:	89fc      	ldrh	r4, [r7, #14]
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f7 fb5c 	bl	800927a <lwip_htonl>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 f8db 	bl	8011d84 <dhcp_option_long>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011bd2:	89f8      	ldrh	r0, [r7, #14]
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	33f0      	adds	r3, #240	; 0xf0
 8011bd8:	69ba      	ldr	r2, [r7, #24]
 8011bda:	4619      	mov	r1, r3
 8011bdc:	f000 fd8e 	bl	80126fc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011be0:	4b13      	ldr	r3, [pc, #76]	; (8011c30 <dhcp_release_and_stop+0x12c>)
 8011be2:	6818      	ldr	r0, [r3, #0]
 8011be4:	f107 0210 	add.w	r2, r7, #16
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	2343      	movs	r3, #67	; 0x43
 8011bee:	69b9      	ldr	r1, [r7, #24]
 8011bf0:	f7fe fc88 	bl	8010504 <udp_sendto_if>
      pbuf_free(p_out);
 8011bf4:	69b8      	ldr	r0, [r7, #24]
 8011bf6:	f7f8 fdc7 	bl	800a788 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011bfa:	4b0e      	ldr	r3, [pc, #56]	; (8011c34 <dhcp_release_and_stop+0x130>)
 8011bfc:	4a0d      	ldr	r2, [pc, #52]	; (8011c34 <dhcp_release_and_stop+0x130>)
 8011bfe:	490d      	ldr	r1, [pc, #52]	; (8011c34 <dhcp_release_and_stop+0x130>)
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7f8 f969 	bl	8009ed8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011c06:	2100      	movs	r1, #0
 8011c08:	69f8      	ldr	r0, [r7, #28]
 8011c0a:	f000 f815 	bl	8011c38 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011c0e:	69fb      	ldr	r3, [r7, #28]
 8011c10:	791b      	ldrb	r3, [r3, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d008      	beq.n	8011c28 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011c16:	f7fe ffc1 	bl	8010b9c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	711a      	strb	r2, [r3, #4]
 8011c20:	e002      	b.n	8011c28 <dhcp_release_and_stop+0x124>
    return;
 8011c22:	bf00      	nop
 8011c24:	e000      	b.n	8011c28 <dhcp_release_and_stop+0x124>
    return;
 8011c26:	bf00      	nop
  }
}
 8011c28:	3720      	adds	r7, #32
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	2000041c 	.word	0x2000041c
 8011c34:	0801c0b8 	.word	0x0801c0b8

08011c38 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	460b      	mov	r3, r1
 8011c42:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	795b      	ldrb	r3, [r3, #5]
 8011c48:	78fa      	ldrb	r2, [r7, #3]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d008      	beq.n	8011c60 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	78fa      	ldrb	r2, [r7, #3]
 8011c52:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2200      	movs	r2, #0
 8011c58:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	811a      	strh	r2, [r3, #8]
  }
}
 8011c60:	bf00      	nop
 8011c62:	370c      	adds	r7, #12
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6039      	str	r1, [r7, #0]
 8011c74:	4611      	mov	r1, r2
 8011c76:	461a      	mov	r2, r3
 8011c78:	4603      	mov	r3, r0
 8011c7a:	80fb      	strh	r3, [r7, #6]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	717b      	strb	r3, [r7, #5]
 8011c80:	4613      	mov	r3, r2
 8011c82:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011c84:	88fa      	ldrh	r2, [r7, #6]
 8011c86:	793b      	ldrb	r3, [r7, #4]
 8011c88:	4413      	add	r3, r2
 8011c8a:	3302      	adds	r3, #2
 8011c8c:	2b44      	cmp	r3, #68	; 0x44
 8011c8e:	d906      	bls.n	8011c9e <dhcp_option+0x32>
 8011c90:	4b0d      	ldr	r3, [pc, #52]	; (8011cc8 <dhcp_option+0x5c>)
 8011c92:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c96:	490d      	ldr	r1, [pc, #52]	; (8011ccc <dhcp_option+0x60>)
 8011c98:	480d      	ldr	r0, [pc, #52]	; (8011cd0 <dhcp_option+0x64>)
 8011c9a:	f003 fdef 	bl	801587c <iprintf>
  options[options_out_len++] = option_type;
 8011c9e:	88fb      	ldrh	r3, [r7, #6]
 8011ca0:	1c5a      	adds	r2, r3, #1
 8011ca2:	80fa      	strh	r2, [r7, #6]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	4413      	add	r3, r2
 8011caa:	797a      	ldrb	r2, [r7, #5]
 8011cac:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011cae:	88fb      	ldrh	r3, [r7, #6]
 8011cb0:	1c5a      	adds	r2, r3, #1
 8011cb2:	80fa      	strh	r2, [r7, #6]
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	4413      	add	r3, r2
 8011cba:	793a      	ldrb	r2, [r7, #4]
 8011cbc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011cbe:	88fb      	ldrh	r3, [r7, #6]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	0801b554 	.word	0x0801b554
 8011ccc:	0801b6e8 	.word	0x0801b6e8
 8011cd0:	0801b5b4 	.word	0x0801b5b4

08011cd4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	6039      	str	r1, [r7, #0]
 8011cde:	80fb      	strh	r3, [r7, #6]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	2b43      	cmp	r3, #67	; 0x43
 8011ce8:	d906      	bls.n	8011cf8 <dhcp_option_byte+0x24>
 8011cea:	4b0a      	ldr	r3, [pc, #40]	; (8011d14 <dhcp_option_byte+0x40>)
 8011cec:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011cf0:	4909      	ldr	r1, [pc, #36]	; (8011d18 <dhcp_option_byte+0x44>)
 8011cf2:	480a      	ldr	r0, [pc, #40]	; (8011d1c <dhcp_option_byte+0x48>)
 8011cf4:	f003 fdc2 	bl	801587c <iprintf>
  options[options_out_len++] = value;
 8011cf8:	88fb      	ldrh	r3, [r7, #6]
 8011cfa:	1c5a      	adds	r2, r3, #1
 8011cfc:	80fa      	strh	r2, [r7, #6]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	4413      	add	r3, r2
 8011d04:	797a      	ldrb	r2, [r7, #5]
 8011d06:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011d08:	88fb      	ldrh	r3, [r7, #6]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	0801b554 	.word	0x0801b554
 8011d18:	0801b72c 	.word	0x0801b72c
 8011d1c:	0801b5b4 	.word	0x0801b5b4

08011d20 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	80fb      	strh	r3, [r7, #6]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011d30:	88fb      	ldrh	r3, [r7, #6]
 8011d32:	3302      	adds	r3, #2
 8011d34:	2b44      	cmp	r3, #68	; 0x44
 8011d36:	d906      	bls.n	8011d46 <dhcp_option_short+0x26>
 8011d38:	4b0f      	ldr	r3, [pc, #60]	; (8011d78 <dhcp_option_short+0x58>)
 8011d3a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011d3e:	490f      	ldr	r1, [pc, #60]	; (8011d7c <dhcp_option_short+0x5c>)
 8011d40:	480f      	ldr	r0, [pc, #60]	; (8011d80 <dhcp_option_short+0x60>)
 8011d42:	f003 fd9b 	bl	801587c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011d46:	88bb      	ldrh	r3, [r7, #4]
 8011d48:	0a1b      	lsrs	r3, r3, #8
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	88fb      	ldrh	r3, [r7, #6]
 8011d4e:	1c59      	adds	r1, r3, #1
 8011d50:	80f9      	strh	r1, [r7, #6]
 8011d52:	4619      	mov	r1, r3
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	440b      	add	r3, r1
 8011d58:	b2d2      	uxtb	r2, r2
 8011d5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011d5c:	88fb      	ldrh	r3, [r7, #6]
 8011d5e:	1c5a      	adds	r2, r3, #1
 8011d60:	80fa      	strh	r2, [r7, #6]
 8011d62:	461a      	mov	r2, r3
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	4413      	add	r3, r2
 8011d68:	88ba      	ldrh	r2, [r7, #4]
 8011d6a:	b2d2      	uxtb	r2, r2
 8011d6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011d6e:	88fb      	ldrh	r3, [r7, #6]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3708      	adds	r7, #8
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	0801b554 	.word	0x0801b554
 8011d7c:	0801b764 	.word	0x0801b764
 8011d80:	0801b5b4 	.word	0x0801b5b4

08011d84 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
 8011d90:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011d92:	89fb      	ldrh	r3, [r7, #14]
 8011d94:	3304      	adds	r3, #4
 8011d96:	2b44      	cmp	r3, #68	; 0x44
 8011d98:	d906      	bls.n	8011da8 <dhcp_option_long+0x24>
 8011d9a:	4b19      	ldr	r3, [pc, #100]	; (8011e00 <dhcp_option_long+0x7c>)
 8011d9c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011da0:	4918      	ldr	r1, [pc, #96]	; (8011e04 <dhcp_option_long+0x80>)
 8011da2:	4819      	ldr	r0, [pc, #100]	; (8011e08 <dhcp_option_long+0x84>)
 8011da4:	f003 fd6a 	bl	801587c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	0e1a      	lsrs	r2, r3, #24
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	1c59      	adds	r1, r3, #1
 8011db0:	81f9      	strh	r1, [r7, #14]
 8011db2:	4619      	mov	r1, r3
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	440b      	add	r3, r1
 8011db8:	b2d2      	uxtb	r2, r2
 8011dba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	0c1a      	lsrs	r2, r3, #16
 8011dc0:	89fb      	ldrh	r3, [r7, #14]
 8011dc2:	1c59      	adds	r1, r3, #1
 8011dc4:	81f9      	strh	r1, [r7, #14]
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	440b      	add	r3, r1
 8011dcc:	b2d2      	uxtb	r2, r2
 8011dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	0a1a      	lsrs	r2, r3, #8
 8011dd4:	89fb      	ldrh	r3, [r7, #14]
 8011dd6:	1c59      	adds	r1, r3, #1
 8011dd8:	81f9      	strh	r1, [r7, #14]
 8011dda:	4619      	mov	r1, r3
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	440b      	add	r3, r1
 8011de0:	b2d2      	uxtb	r2, r2
 8011de2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011de4:	89fb      	ldrh	r3, [r7, #14]
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	81fa      	strh	r2, [r7, #14]
 8011dea:	461a      	mov	r2, r3
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	4413      	add	r3, r2
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	b2d2      	uxtb	r2, r2
 8011df4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011df6:	89fb      	ldrh	r3, [r7, #14]
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0801b554 	.word	0x0801b554
 8011e04:	0801b7a0 	.word	0x0801b7a0
 8011e08:	0801b5b4 	.word	0x0801b5b4

08011e0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b090      	sub	sp, #64	; 0x40
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011e16:	2300      	movs	r3, #0
 8011e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011e1e:	2208      	movs	r2, #8
 8011e20:	2100      	movs	r1, #0
 8011e22:	48be      	ldr	r0, [pc, #760]	; (801211c <dhcp_parse_reply+0x310>)
 8011e24:	f003 f80e 	bl	8014e44 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	895b      	ldrh	r3, [r3, #10]
 8011e2c:	2b2b      	cmp	r3, #43	; 0x2b
 8011e2e:	d802      	bhi.n	8011e36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011e30:	f06f 0301 	mvn.w	r3, #1
 8011e34:	e2a8      	b.n	8012388 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011e3c:	23f0      	movs	r3, #240	; 0xf0
 8011e3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	891b      	ldrh	r3, [r3, #8]
 8011e44:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011e4a:	e00c      	b.n	8011e66 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4e:	895b      	ldrh	r3, [r3, #10]
 8011e50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	895b      	ldrh	r3, [r3, #10]
 8011e5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d004      	beq.n	8011e76 <dhcp_parse_reply+0x6a>
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	895b      	ldrh	r3, [r3, #10]
 8011e70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d2ea      	bcs.n	8011e4c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d102      	bne.n	8011e82 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011e7c:	f06f 0301 	mvn.w	r3, #1
 8011e80:	e282      	b.n	8012388 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8011e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011e84:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011e86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011e88:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011e90:	e23a      	b.n	8012308 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8011e92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e96:	4413      	add	r3, r2
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011eaa:	3302      	adds	r3, #2
 8011eac:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011eae:	8bfa      	ldrh	r2, [r7, #30]
 8011eb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d202      	bcs.n	8011ebc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011eb6:	f06f 0301 	mvn.w	r3, #1
 8011eba:	e265      	b.n	8012388 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011ebc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ec2:	8952      	ldrh	r2, [r2, #10]
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	da07      	bge.n	8011ed8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011ec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011eca:	3301      	adds	r3, #1
 8011ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ece:	4413      	add	r3, r2
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ed6:	e00b      	b.n	8011ef0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <dhcp_parse_reply+0xde>
 8011ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	e000      	b.n	8011eec <dhcp_parse_reply+0xe0>
 8011eea:	2300      	movs	r3, #0
 8011eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011ef8:	7dfb      	ldrb	r3, [r7, #23]
 8011efa:	2b3b      	cmp	r3, #59	; 0x3b
 8011efc:	f200 812d 	bhi.w	801215a <dhcp_parse_reply+0x34e>
 8011f00:	a201      	add	r2, pc, #4	; (adr r2, 8011f08 <dhcp_parse_reply+0xfc>)
 8011f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f06:	bf00      	nop
 8011f08:	08011ff9 	.word	0x08011ff9
 8011f0c:	08012009 	.word	0x08012009
 8011f10:	0801215b 	.word	0x0801215b
 8011f14:	0801202b 	.word	0x0801202b
 8011f18:	0801215b 	.word	0x0801215b
 8011f1c:	0801215b 	.word	0x0801215b
 8011f20:	0801215b 	.word	0x0801215b
 8011f24:	0801215b 	.word	0x0801215b
 8011f28:	0801215b 	.word	0x0801215b
 8011f2c:	0801215b 	.word	0x0801215b
 8011f30:	0801215b 	.word	0x0801215b
 8011f34:	0801215b 	.word	0x0801215b
 8011f38:	0801215b 	.word	0x0801215b
 8011f3c:	0801215b 	.word	0x0801215b
 8011f40:	0801215b 	.word	0x0801215b
 8011f44:	0801215b 	.word	0x0801215b
 8011f48:	0801215b 	.word	0x0801215b
 8011f4c:	0801215b 	.word	0x0801215b
 8011f50:	0801215b 	.word	0x0801215b
 8011f54:	0801215b 	.word	0x0801215b
 8011f58:	0801215b 	.word	0x0801215b
 8011f5c:	0801215b 	.word	0x0801215b
 8011f60:	0801215b 	.word	0x0801215b
 8011f64:	0801215b 	.word	0x0801215b
 8011f68:	0801215b 	.word	0x0801215b
 8011f6c:	0801215b 	.word	0x0801215b
 8011f70:	0801215b 	.word	0x0801215b
 8011f74:	0801215b 	.word	0x0801215b
 8011f78:	0801215b 	.word	0x0801215b
 8011f7c:	0801215b 	.word	0x0801215b
 8011f80:	0801215b 	.word	0x0801215b
 8011f84:	0801215b 	.word	0x0801215b
 8011f88:	0801215b 	.word	0x0801215b
 8011f8c:	0801215b 	.word	0x0801215b
 8011f90:	0801215b 	.word	0x0801215b
 8011f94:	0801215b 	.word	0x0801215b
 8011f98:	0801215b 	.word	0x0801215b
 8011f9c:	0801215b 	.word	0x0801215b
 8011fa0:	0801215b 	.word	0x0801215b
 8011fa4:	0801215b 	.word	0x0801215b
 8011fa8:	0801215b 	.word	0x0801215b
 8011fac:	0801215b 	.word	0x0801215b
 8011fb0:	0801215b 	.word	0x0801215b
 8011fb4:	0801215b 	.word	0x0801215b
 8011fb8:	0801215b 	.word	0x0801215b
 8011fbc:	0801215b 	.word	0x0801215b
 8011fc0:	0801215b 	.word	0x0801215b
 8011fc4:	0801215b 	.word	0x0801215b
 8011fc8:	0801215b 	.word	0x0801215b
 8011fcc:	0801215b 	.word	0x0801215b
 8011fd0:	0801215b 	.word	0x0801215b
 8011fd4:	08012057 	.word	0x08012057
 8011fd8:	08012079 	.word	0x08012079
 8011fdc:	080120b5 	.word	0x080120b5
 8011fe0:	080120d7 	.word	0x080120d7
 8011fe4:	0801215b 	.word	0x0801215b
 8011fe8:	0801215b 	.word	0x0801215b
 8011fec:	0801215b 	.word	0x0801215b
 8011ff0:	080120f9 	.word	0x080120f9
 8011ff4:	08012139 	.word	0x08012139
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012006:	e0ac      	b.n	8012162 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801200c:	2b04      	cmp	r3, #4
 801200e:	d009      	beq.n	8012024 <dhcp_parse_reply+0x218>
 8012010:	4b43      	ldr	r3, [pc, #268]	; (8012120 <dhcp_parse_reply+0x314>)
 8012012:	f240 622e 	movw	r2, #1582	; 0x62e
 8012016:	4943      	ldr	r1, [pc, #268]	; (8012124 <dhcp_parse_reply+0x318>)
 8012018:	4843      	ldr	r0, [pc, #268]	; (8012128 <dhcp_parse_reply+0x31c>)
 801201a:	f003 fc2f 	bl	801587c <iprintf>
 801201e:	f06f 0305 	mvn.w	r3, #5
 8012022:	e1b1      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012024:	2306      	movs	r3, #6
 8012026:	623b      	str	r3, [r7, #32]
        break;
 8012028:	e09b      	b.n	8012162 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801202a:	2304      	movs	r3, #4
 801202c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012030:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012038:	429a      	cmp	r2, r3
 801203a:	d209      	bcs.n	8012050 <dhcp_parse_reply+0x244>
 801203c:	4b38      	ldr	r3, [pc, #224]	; (8012120 <dhcp_parse_reply+0x314>)
 801203e:	f240 6233 	movw	r2, #1587	; 0x633
 8012042:	493a      	ldr	r1, [pc, #232]	; (801212c <dhcp_parse_reply+0x320>)
 8012044:	4838      	ldr	r0, [pc, #224]	; (8012128 <dhcp_parse_reply+0x31c>)
 8012046:	f003 fc19 	bl	801587c <iprintf>
 801204a:	f06f 0305 	mvn.w	r3, #5
 801204e:	e19b      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012050:	2307      	movs	r3, #7
 8012052:	623b      	str	r3, [r7, #32]
        break;
 8012054:	e085      	b.n	8012162 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801205a:	2b04      	cmp	r3, #4
 801205c:	d009      	beq.n	8012072 <dhcp_parse_reply+0x266>
 801205e:	4b30      	ldr	r3, [pc, #192]	; (8012120 <dhcp_parse_reply+0x314>)
 8012060:	f240 6241 	movw	r2, #1601	; 0x641
 8012064:	492f      	ldr	r1, [pc, #188]	; (8012124 <dhcp_parse_reply+0x318>)
 8012066:	4830      	ldr	r0, [pc, #192]	; (8012128 <dhcp_parse_reply+0x31c>)
 8012068:	f003 fc08 	bl	801587c <iprintf>
 801206c:	f06f 0305 	mvn.w	r3, #5
 8012070:	e18a      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012072:	2303      	movs	r3, #3
 8012074:	623b      	str	r3, [r7, #32]
        break;
 8012076:	e074      	b.n	8012162 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801207c:	2b01      	cmp	r3, #1
 801207e:	d009      	beq.n	8012094 <dhcp_parse_reply+0x288>
 8012080:	4b27      	ldr	r3, [pc, #156]	; (8012120 <dhcp_parse_reply+0x314>)
 8012082:	f240 624f 	movw	r2, #1615	; 0x64f
 8012086:	492a      	ldr	r1, [pc, #168]	; (8012130 <dhcp_parse_reply+0x324>)
 8012088:	4827      	ldr	r0, [pc, #156]	; (8012128 <dhcp_parse_reply+0x31c>)
 801208a:	f003 fbf7 	bl	801587c <iprintf>
 801208e:	f06f 0305 	mvn.w	r3, #5
 8012092:	e179      	b.n	8012388 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012096:	2bf0      	cmp	r3, #240	; 0xf0
 8012098:	d009      	beq.n	80120ae <dhcp_parse_reply+0x2a2>
 801209a:	4b21      	ldr	r3, [pc, #132]	; (8012120 <dhcp_parse_reply+0x314>)
 801209c:	f240 6251 	movw	r2, #1617	; 0x651
 80120a0:	4924      	ldr	r1, [pc, #144]	; (8012134 <dhcp_parse_reply+0x328>)
 80120a2:	4821      	ldr	r0, [pc, #132]	; (8012128 <dhcp_parse_reply+0x31c>)
 80120a4:	f003 fbea 	bl	801587c <iprintf>
 80120a8:	f06f 0305 	mvn.w	r3, #5
 80120ac:	e16c      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80120ae:	2300      	movs	r3, #0
 80120b0:	623b      	str	r3, [r7, #32]
        break;
 80120b2:	e056      	b.n	8012162 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80120b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d009      	beq.n	80120d0 <dhcp_parse_reply+0x2c4>
 80120bc:	4b18      	ldr	r3, [pc, #96]	; (8012120 <dhcp_parse_reply+0x314>)
 80120be:	f240 6255 	movw	r2, #1621	; 0x655
 80120c2:	491b      	ldr	r1, [pc, #108]	; (8012130 <dhcp_parse_reply+0x324>)
 80120c4:	4818      	ldr	r0, [pc, #96]	; (8012128 <dhcp_parse_reply+0x31c>)
 80120c6:	f003 fbd9 	bl	801587c <iprintf>
 80120ca:	f06f 0305 	mvn.w	r3, #5
 80120ce:	e15b      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80120d0:	2301      	movs	r3, #1
 80120d2:	623b      	str	r3, [r7, #32]
        break;
 80120d4:	e045      	b.n	8012162 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120da:	2b04      	cmp	r3, #4
 80120dc:	d009      	beq.n	80120f2 <dhcp_parse_reply+0x2e6>
 80120de:	4b10      	ldr	r3, [pc, #64]	; (8012120 <dhcp_parse_reply+0x314>)
 80120e0:	f240 6259 	movw	r2, #1625	; 0x659
 80120e4:	490f      	ldr	r1, [pc, #60]	; (8012124 <dhcp_parse_reply+0x318>)
 80120e6:	4810      	ldr	r0, [pc, #64]	; (8012128 <dhcp_parse_reply+0x31c>)
 80120e8:	f003 fbc8 	bl	801587c <iprintf>
 80120ec:	f06f 0305 	mvn.w	r3, #5
 80120f0:	e14a      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80120f2:	2302      	movs	r3, #2
 80120f4:	623b      	str	r3, [r7, #32]
        break;
 80120f6:	e034      	b.n	8012162 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120fc:	2b04      	cmp	r3, #4
 80120fe:	d009      	beq.n	8012114 <dhcp_parse_reply+0x308>
 8012100:	4b07      	ldr	r3, [pc, #28]	; (8012120 <dhcp_parse_reply+0x314>)
 8012102:	f240 625d 	movw	r2, #1629	; 0x65d
 8012106:	4907      	ldr	r1, [pc, #28]	; (8012124 <dhcp_parse_reply+0x318>)
 8012108:	4807      	ldr	r0, [pc, #28]	; (8012128 <dhcp_parse_reply+0x31c>)
 801210a:	f003 fbb7 	bl	801587c <iprintf>
 801210e:	f06f 0305 	mvn.w	r3, #5
 8012112:	e139      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012114:	2304      	movs	r3, #4
 8012116:	623b      	str	r3, [r7, #32]
        break;
 8012118:	e023      	b.n	8012162 <dhcp_parse_reply+0x356>
 801211a:	bf00      	nop
 801211c:	20006adc 	.word	0x20006adc
 8012120:	0801b554 	.word	0x0801b554
 8012124:	0801b7dc 	.word	0x0801b7dc
 8012128:	0801b5b4 	.word	0x0801b5b4
 801212c:	0801b7e8 	.word	0x0801b7e8
 8012130:	0801b7fc 	.word	0x0801b7fc
 8012134:	0801b808 	.word	0x0801b808
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213c:	2b04      	cmp	r3, #4
 801213e:	d009      	beq.n	8012154 <dhcp_parse_reply+0x348>
 8012140:	4b93      	ldr	r3, [pc, #588]	; (8012390 <dhcp_parse_reply+0x584>)
 8012142:	f240 6261 	movw	r2, #1633	; 0x661
 8012146:	4993      	ldr	r1, [pc, #588]	; (8012394 <dhcp_parse_reply+0x588>)
 8012148:	4893      	ldr	r0, [pc, #588]	; (8012398 <dhcp_parse_reply+0x58c>)
 801214a:	f003 fb97 	bl	801587c <iprintf>
 801214e:	f06f 0305 	mvn.w	r3, #5
 8012152:	e119      	b.n	8012388 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012154:	2305      	movs	r3, #5
 8012156:	623b      	str	r3, [r7, #32]
        break;
 8012158:	e003      	b.n	8012162 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801215a:	2300      	movs	r3, #0
 801215c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012160:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d103      	bne.n	8012170 <dhcp_parse_reply+0x364>
      offset++;
 8012168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801216a:	3301      	adds	r3, #1
 801216c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801216e:	e0a1      	b.n	80122b4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012170:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012176:	4413      	add	r3, r2
 8012178:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801217c:	4293      	cmp	r3, r2
 801217e:	dd02      	ble.n	8012186 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8012180:	f06f 0301 	mvn.w	r3, #1
 8012184:	e100      	b.n	8012388 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8012186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801218a:	b29a      	uxth	r2, r3
 801218c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801218e:	4413      	add	r3, r2
 8012190:	b29b      	uxth	r3, r3
 8012192:	3302      	adds	r3, #2
 8012194:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 808a 	beq.w	80122b4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80121a0:	2300      	movs	r3, #0
 80121a2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	db02      	blt.n	80121b0 <dhcp_parse_reply+0x3a4>
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	2b07      	cmp	r3, #7
 80121ae:	dd06      	ble.n	80121be <dhcp_parse_reply+0x3b2>
 80121b0:	4b77      	ldr	r3, [pc, #476]	; (8012390 <dhcp_parse_reply+0x584>)
 80121b2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80121b6:	4979      	ldr	r1, [pc, #484]	; (801239c <dhcp_parse_reply+0x590>)
 80121b8:	4877      	ldr	r0, [pc, #476]	; (8012398 <dhcp_parse_reply+0x58c>)
 80121ba:	f003 fb5f 	bl	801587c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80121be:	4a78      	ldr	r2, [pc, #480]	; (80123a0 <dhcp_parse_reply+0x594>)
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	4413      	add	r3, r2
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d174      	bne.n	80122b4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80121ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121ce:	2b04      	cmp	r3, #4
 80121d0:	bf28      	it	cs
 80121d2:	2304      	movcs	r3, #4
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80121d8:	8bfb      	ldrh	r3, [r7, #30]
 80121da:	8aba      	ldrh	r2, [r7, #20]
 80121dc:	f107 0108 	add.w	r1, r7, #8
 80121e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121e2:	f7f8 fccb 	bl	800ab7c <pbuf_copy_partial>
 80121e6:	4603      	mov	r3, r0
 80121e8:	461a      	mov	r2, r3
 80121ea:	8abb      	ldrh	r3, [r7, #20]
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d002      	beq.n	80121f6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80121f0:	f06f 0301 	mvn.w	r3, #1
 80121f4:	e0c8      	b.n	8012388 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80121f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121fa:	2b04      	cmp	r3, #4
 80121fc:	d933      	bls.n	8012266 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80121fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012202:	f003 0303 	and.w	r3, r3, #3
 8012206:	b2db      	uxtb	r3, r3
 8012208:	2b00      	cmp	r3, #0
 801220a:	d009      	beq.n	8012220 <dhcp_parse_reply+0x414>
 801220c:	4b60      	ldr	r3, [pc, #384]	; (8012390 <dhcp_parse_reply+0x584>)
 801220e:	f240 6281 	movw	r2, #1665	; 0x681
 8012212:	4964      	ldr	r1, [pc, #400]	; (80123a4 <dhcp_parse_reply+0x598>)
 8012214:	4860      	ldr	r0, [pc, #384]	; (8012398 <dhcp_parse_reply+0x58c>)
 8012216:	f003 fb31 	bl	801587c <iprintf>
 801221a:	f06f 0305 	mvn.w	r3, #5
 801221e:	e0b3      	b.n	8012388 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8012220:	4a5f      	ldr	r2, [pc, #380]	; (80123a0 <dhcp_parse_reply+0x594>)
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	4413      	add	r3, r2
 8012226:	2201      	movs	r2, #1
 8012228:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	4618      	mov	r0, r3
 801222e:	f7f7 f824 	bl	800927a <lwip_htonl>
 8012232:	4602      	mov	r2, r0
 8012234:	495c      	ldr	r1, [pc, #368]	; (80123a8 <dhcp_parse_reply+0x59c>)
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801223c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012240:	3b04      	subs	r3, #4
 8012242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012246:	8bfb      	ldrh	r3, [r7, #30]
 8012248:	3304      	adds	r3, #4
 801224a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801224c:	8a7a      	ldrh	r2, [r7, #18]
 801224e:	8bfb      	ldrh	r3, [r7, #30]
 8012250:	429a      	cmp	r2, r3
 8012252:	d202      	bcs.n	801225a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8012254:	f06f 0301 	mvn.w	r3, #1
 8012258:	e096      	b.n	8012388 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801225a:	8a7b      	ldrh	r3, [r7, #18]
 801225c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	3301      	adds	r3, #1
 8012262:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012264:	e79e      	b.n	80121a4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8012266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801226a:	2b04      	cmp	r3, #4
 801226c:	d106      	bne.n	801227c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	4618      	mov	r0, r3
 8012272:	f7f7 f802 	bl	800927a <lwip_htonl>
 8012276:	4603      	mov	r3, r0
 8012278:	60bb      	str	r3, [r7, #8]
 801227a:	e011      	b.n	80122a0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801227c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012280:	2b01      	cmp	r3, #1
 8012282:	d009      	beq.n	8012298 <dhcp_parse_reply+0x48c>
 8012284:	4b42      	ldr	r3, [pc, #264]	; (8012390 <dhcp_parse_reply+0x584>)
 8012286:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801228a:	4948      	ldr	r1, [pc, #288]	; (80123ac <dhcp_parse_reply+0x5a0>)
 801228c:	4842      	ldr	r0, [pc, #264]	; (8012398 <dhcp_parse_reply+0x58c>)
 801228e:	f003 faf5 	bl	801587c <iprintf>
 8012292:	f06f 0305 	mvn.w	r3, #5
 8012296:	e077      	b.n	8012388 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8012298:	f107 0308 	add.w	r3, r7, #8
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80122a0:	4a3f      	ldr	r2, [pc, #252]	; (80123a0 <dhcp_parse_reply+0x594>)
 80122a2:	6a3b      	ldr	r3, [r7, #32]
 80122a4:	4413      	add	r3, r2
 80122a6:	2201      	movs	r2, #1
 80122a8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80122aa:	68ba      	ldr	r2, [r7, #8]
 80122ac:	493e      	ldr	r1, [pc, #248]	; (80123a8 <dhcp_parse_reply+0x59c>)
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b6:	895b      	ldrh	r3, [r3, #10]
 80122b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d324      	bcc.n	8012308 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80122be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c0:	895b      	ldrh	r3, [r3, #10]
 80122c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80122c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ca:	895b      	ldrh	r3, [r3, #10]
 80122cc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80122d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d213      	bcs.n	8012302 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80122e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d109      	bne.n	80122fa <dhcp_parse_reply+0x4ee>
 80122e6:	4b2a      	ldr	r3, [pc, #168]	; (8012390 <dhcp_parse_reply+0x584>)
 80122e8:	f240 629d 	movw	r2, #1693	; 0x69d
 80122ec:	4930      	ldr	r1, [pc, #192]	; (80123b0 <dhcp_parse_reply+0x5a4>)
 80122ee:	482a      	ldr	r0, [pc, #168]	; (8012398 <dhcp_parse_reply+0x58c>)
 80122f0:	f003 fac4 	bl	801587c <iprintf>
 80122f4:	f06f 0305 	mvn.w	r3, #5
 80122f8:	e046      	b.n	8012388 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80122fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012300:	e002      	b.n	8012308 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012302:	f06f 0301 	mvn.w	r3, #1
 8012306:	e03f      	b.n	8012388 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230a:	2b00      	cmp	r3, #0
 801230c:	d00a      	beq.n	8012324 <dhcp_parse_reply+0x518>
 801230e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012310:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012312:	429a      	cmp	r2, r3
 8012314:	d206      	bcs.n	8012324 <dhcp_parse_reply+0x518>
 8012316:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801231a:	4413      	add	r3, r2
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	2bff      	cmp	r3, #255	; 0xff
 8012320:	f47f adb7 	bne.w	8011e92 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012324:	4b1e      	ldr	r3, [pc, #120]	; (80123a0 <dhcp_parse_reply+0x594>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d018      	beq.n	801235e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801232c:	4b1e      	ldr	r3, [pc, #120]	; (80123a8 <dhcp_parse_reply+0x59c>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012332:	4b1b      	ldr	r3, [pc, #108]	; (80123a0 <dhcp_parse_reply+0x594>)
 8012334:	2200      	movs	r2, #0
 8012336:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2b01      	cmp	r3, #1
 801233c:	d102      	bne.n	8012344 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801233e:	2301      	movs	r3, #1
 8012340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012342:	e00c      	b.n	801235e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b02      	cmp	r3, #2
 8012348:	d102      	bne.n	8012350 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801234a:	2301      	movs	r3, #1
 801234c:	62bb      	str	r3, [r7, #40]	; 0x28
 801234e:	e006      	b.n	801235e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b03      	cmp	r3, #3
 8012354:	d103      	bne.n	801235e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8012356:	2301      	movs	r3, #1
 8012358:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801235a:	2301      	movs	r3, #1
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012360:	2b00      	cmp	r3, #0
 8012362:	d006      	beq.n	8012372 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012364:	2300      	movs	r3, #0
 8012366:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012368:	236c      	movs	r3, #108	; 0x6c
 801236a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801236c:	23ec      	movs	r3, #236	; 0xec
 801236e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012370:	e569      	b.n	8011e46 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012374:	2b00      	cmp	r3, #0
 8012376:	d006      	beq.n	8012386 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8012378:	2300      	movs	r3, #0
 801237a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801237c:	232c      	movs	r3, #44	; 0x2c
 801237e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012380:	236c      	movs	r3, #108	; 0x6c
 8012382:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012384:	e55f      	b.n	8011e46 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3740      	adds	r7, #64	; 0x40
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	0801b554 	.word	0x0801b554
 8012394:	0801b7dc 	.word	0x0801b7dc
 8012398:	0801b5b4 	.word	0x0801b5b4
 801239c:	0801b820 	.word	0x0801b820
 80123a0:	20006adc 	.word	0x20006adc
 80123a4:	0801b834 	.word	0x0801b834
 80123a8:	20006ae4 	.word	0x20006ae4
 80123ac:	0801b84c 	.word	0x0801b84c
 80123b0:	0801b860 	.word	0x0801b860

080123b4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b08a      	sub	sp, #40	; 0x28
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80123c2:	4b60      	ldr	r3, [pc, #384]	; (8012544 <dhcp_recv+0x190>)
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123c8:	6a3b      	ldr	r3, [r7, #32]
 80123ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123cc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f000 809d 	beq.w	8012516 <dhcp_recv+0x162>
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	791b      	ldrb	r3, [r3, #4]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f000 8098 	beq.w	8012516 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	895b      	ldrh	r3, [r3, #10]
 80123ea:	2b2b      	cmp	r3, #43	; 0x2b
 80123ec:	f240 8095 	bls.w	801251a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	f040 8092 	bne.w	801251e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123fa:	2300      	movs	r3, #0
 80123fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012400:	e012      	b.n	8012428 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012406:	6a3a      	ldr	r2, [r7, #32]
 8012408:	4413      	add	r3, r2
 801240a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801240e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012412:	69b9      	ldr	r1, [r7, #24]
 8012414:	440b      	add	r3, r1
 8012416:	7f1b      	ldrb	r3, [r3, #28]
 8012418:	429a      	cmp	r2, r3
 801241a:	f040 8082 	bne.w	8012522 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801241e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012422:	3301      	adds	r3, #1
 8012424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801242e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012432:	429a      	cmp	r2, r3
 8012434:	d203      	bcs.n	801243e <dhcp_recv+0x8a>
 8012436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801243a:	2b05      	cmp	r3, #5
 801243c:	d9e1      	bls.n	8012402 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	4618      	mov	r0, r3
 8012444:	f7f6 ff19 	bl	800927a <lwip_htonl>
 8012448:	4602      	mov	r2, r0
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	429a      	cmp	r2, r3
 8012450:	d169      	bne.n	8012526 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012452:	69f9      	ldr	r1, [r7, #28]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff fcd9 	bl	8011e0c <dhcp_parse_reply>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d164      	bne.n	801252a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012460:	4b39      	ldr	r3, [pc, #228]	; (8012548 <dhcp_recv+0x194>)
 8012462:	785b      	ldrb	r3, [r3, #1]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d062      	beq.n	801252e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801246e:	4b37      	ldr	r3, [pc, #220]	; (801254c <dhcp_recv+0x198>)
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012474:	7cfb      	ldrb	r3, [r7, #19]
 8012476:	2b05      	cmp	r3, #5
 8012478:	d12a      	bne.n	80124d0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	795b      	ldrb	r3, [r3, #5]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d112      	bne.n	80124a8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012482:	6979      	ldr	r1, [r7, #20]
 8012484:	6a38      	ldr	r0, [r7, #32]
 8012486:	f7fe fe53 	bl	8011130 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801248a:	6a3b      	ldr	r3, [r7, #32]
 801248c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012490:	f003 0308 	and.w	r3, r3, #8
 8012494:	2b00      	cmp	r3, #0
 8012496:	d003      	beq.n	80124a0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012498:	6a38      	ldr	r0, [r7, #32]
 801249a:	f7fe fbc3 	bl	8010c24 <dhcp_check>
 801249e:	e049      	b.n	8012534 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80124a0:	6a38      	ldr	r0, [r7, #32]
 80124a2:	f7ff f867 	bl	8011574 <dhcp_bind>
 80124a6:	e045      	b.n	8012534 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	795b      	ldrb	r3, [r3, #5]
 80124ac:	2b03      	cmp	r3, #3
 80124ae:	d007      	beq.n	80124c0 <dhcp_recv+0x10c>
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	795b      	ldrb	r3, [r3, #5]
 80124b4:	2b04      	cmp	r3, #4
 80124b6:	d003      	beq.n	80124c0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80124b8:	69fb      	ldr	r3, [r7, #28]
 80124ba:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80124bc:	2b05      	cmp	r3, #5
 80124be:	d139      	bne.n	8012534 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80124c0:	6979      	ldr	r1, [r7, #20]
 80124c2:	6a38      	ldr	r0, [r7, #32]
 80124c4:	f7fe fe34 	bl	8011130 <dhcp_handle_ack>
      dhcp_bind(netif);
 80124c8:	6a38      	ldr	r0, [r7, #32]
 80124ca:	f7ff f853 	bl	8011574 <dhcp_bind>
 80124ce:	e031      	b.n	8012534 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80124d0:	7cfb      	ldrb	r3, [r7, #19]
 80124d2:	2b06      	cmp	r3, #6
 80124d4:	d113      	bne.n	80124fe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80124da:	2b03      	cmp	r3, #3
 80124dc:	d00b      	beq.n	80124f6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	795b      	ldrb	r3, [r3, #5]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d007      	beq.n	80124f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	d003      	beq.n	80124f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	795b      	ldrb	r3, [r3, #5]
 80124f2:	2b05      	cmp	r3, #5
 80124f4:	d103      	bne.n	80124fe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80124f6:	6a38      	ldr	r0, [r7, #32]
 80124f8:	f7fe fb7a 	bl	8010bf0 <dhcp_handle_nak>
 80124fc:	e01a      	b.n	8012534 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80124fe:	7cfb      	ldrb	r3, [r7, #19]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d116      	bne.n	8012532 <dhcp_recv+0x17e>
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	795b      	ldrb	r3, [r3, #5]
 8012508:	2b06      	cmp	r3, #6
 801250a:	d112      	bne.n	8012532 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801250c:	6979      	ldr	r1, [r7, #20]
 801250e:	6a38      	ldr	r0, [r7, #32]
 8012510:	f7fe fbbc 	bl	8010c8c <dhcp_handle_offer>
 8012514:	e00e      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012516:	bf00      	nop
 8012518:	e00c      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801251a:	bf00      	nop
 801251c:	e00a      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801251e:	bf00      	nop
 8012520:	e008      	b.n	8012534 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012522:	bf00      	nop
 8012524:	e006      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012526:	bf00      	nop
 8012528:	e004      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801252a:	bf00      	nop
 801252c:	e002      	b.n	8012534 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801252e:	bf00      	nop
 8012530:	e000      	b.n	8012534 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012532:	bf00      	nop
  pbuf_free(p);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f7f8 f927 	bl	800a788 <pbuf_free>
}
 801253a:	bf00      	nop
 801253c:	3728      	adds	r7, #40	; 0x28
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	2000399c 	.word	0x2000399c
 8012548:	20006adc 	.word	0x20006adc
 801254c:	20006ae4 	.word	0x20006ae4

08012550 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	603b      	str	r3, [r7, #0]
 801255c:	4613      	mov	r3, r2
 801255e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d108      	bne.n	8012578 <dhcp_create_msg+0x28>
 8012566:	4b5f      	ldr	r3, [pc, #380]	; (80126e4 <dhcp_create_msg+0x194>)
 8012568:	f240 7269 	movw	r2, #1897	; 0x769
 801256c:	495e      	ldr	r1, [pc, #376]	; (80126e8 <dhcp_create_msg+0x198>)
 801256e:	485f      	ldr	r0, [pc, #380]	; (80126ec <dhcp_create_msg+0x19c>)
 8012570:	f003 f984 	bl	801587c <iprintf>
 8012574:	2300      	movs	r3, #0
 8012576:	e0b1      	b.n	80126dc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d108      	bne.n	8012590 <dhcp_create_msg+0x40>
 801257e:	4b59      	ldr	r3, [pc, #356]	; (80126e4 <dhcp_create_msg+0x194>)
 8012580:	f240 726a 	movw	r2, #1898	; 0x76a
 8012584:	495a      	ldr	r1, [pc, #360]	; (80126f0 <dhcp_create_msg+0x1a0>)
 8012586:	4859      	ldr	r0, [pc, #356]	; (80126ec <dhcp_create_msg+0x19c>)
 8012588:	f003 f978 	bl	801587c <iprintf>
 801258c:	2300      	movs	r3, #0
 801258e:	e0a5      	b.n	80126dc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012590:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012594:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012598:	2036      	movs	r0, #54	; 0x36
 801259a:	f7f7 fe11 	bl	800a1c0 <pbuf_alloc>
 801259e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d101      	bne.n	80125aa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	e098      	b.n	80126dc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	895b      	ldrh	r3, [r3, #10]
 80125ae:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80125b2:	d206      	bcs.n	80125c2 <dhcp_create_msg+0x72>
 80125b4:	4b4b      	ldr	r3, [pc, #300]	; (80126e4 <dhcp_create_msg+0x194>)
 80125b6:	f240 7271 	movw	r2, #1905	; 0x771
 80125ba:	494e      	ldr	r1, [pc, #312]	; (80126f4 <dhcp_create_msg+0x1a4>)
 80125bc:	484b      	ldr	r0, [pc, #300]	; (80126ec <dhcp_create_msg+0x19c>)
 80125be:	f003 f95d 	bl	801587c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b03      	cmp	r3, #3
 80125c6:	d103      	bne.n	80125d0 <dhcp_create_msg+0x80>
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	795b      	ldrb	r3, [r3, #5]
 80125cc:	2b03      	cmp	r3, #3
 80125ce:	d10d      	bne.n	80125ec <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	799b      	ldrb	r3, [r3, #6]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d105      	bne.n	80125e4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80125d8:	f003 f968 	bl	80158ac <rand>
 80125dc:	4603      	mov	r3, r0
 80125de:	461a      	mov	r2, r3
 80125e0:	4b45      	ldr	r3, [pc, #276]	; (80126f8 <dhcp_create_msg+0x1a8>)
 80125e2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80125e4:	4b44      	ldr	r3, [pc, #272]	; (80126f8 <dhcp_create_msg+0x1a8>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80125f2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80125f6:	2100      	movs	r1, #0
 80125f8:	6978      	ldr	r0, [r7, #20]
 80125fa:	f002 fc23 	bl	8014e44 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2201      	movs	r2, #1
 8012602:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2201      	movs	r2, #1
 8012608:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4618      	mov	r0, r3
 801261a:	f7f6 fe2e 	bl	800927a <lwip_htonl>
 801261e:	4602      	mov	r2, r0
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012624:	79fb      	ldrb	r3, [r7, #7]
 8012626:	2b08      	cmp	r3, #8
 8012628:	d010      	beq.n	801264c <dhcp_create_msg+0xfc>
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	2b04      	cmp	r3, #4
 801262e:	d00d      	beq.n	801264c <dhcp_create_msg+0xfc>
 8012630:	79fb      	ldrb	r3, [r7, #7]
 8012632:	2b07      	cmp	r3, #7
 8012634:	d00a      	beq.n	801264c <dhcp_create_msg+0xfc>
 8012636:	79fb      	ldrb	r3, [r7, #7]
 8012638:	2b03      	cmp	r3, #3
 801263a:	d10c      	bne.n	8012656 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012640:	2b05      	cmp	r3, #5
 8012642:	d003      	beq.n	801264c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	795b      	ldrb	r3, [r3, #5]
 8012648:	2b04      	cmp	r3, #4
 801264a:	d104      	bne.n	8012656 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	3304      	adds	r3, #4
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012656:	2300      	movs	r3, #0
 8012658:	83fb      	strh	r3, [r7, #30]
 801265a:	e00c      	b.n	8012676 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801265c:	8bfa      	ldrh	r2, [r7, #30]
 801265e:	8bfb      	ldrh	r3, [r7, #30]
 8012660:	68f9      	ldr	r1, [r7, #12]
 8012662:	440a      	add	r2, r1
 8012664:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012668:	697a      	ldr	r2, [r7, #20]
 801266a:	4413      	add	r3, r2
 801266c:	460a      	mov	r2, r1
 801266e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012670:	8bfb      	ldrh	r3, [r7, #30]
 8012672:	3301      	adds	r3, #1
 8012674:	83fb      	strh	r3, [r7, #30]
 8012676:	8bfb      	ldrh	r3, [r7, #30]
 8012678:	2b05      	cmp	r3, #5
 801267a:	d9ef      	bls.n	801265c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	2200      	movs	r2, #0
 8012680:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012684:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012688:	2200      	movs	r2, #0
 801268a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801268e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012692:	2200      	movs	r2, #0
 8012694:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012698:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801269c:	2200      	movs	r2, #0
 801269e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80126a2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126ac:	2301      	movs	r3, #1
 80126ae:	2235      	movs	r2, #53	; 0x35
 80126b0:	2000      	movs	r0, #0
 80126b2:	f7ff fadb 	bl	8011c6c <dhcp_option>
 80126b6:	4603      	mov	r3, r0
 80126b8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126c0:	79fa      	ldrb	r2, [r7, #7]
 80126c2:	8a7b      	ldrh	r3, [r7, #18]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff fb05 	bl	8011cd4 <dhcp_option_byte>
 80126ca:	4603      	mov	r3, r0
 80126cc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	8a7a      	ldrh	r2, [r7, #18]
 80126d8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80126da:	69bb      	ldr	r3, [r7, #24]
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3720      	adds	r7, #32
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	0801b554 	.word	0x0801b554
 80126e8:	0801b874 	.word	0x0801b874
 80126ec:	0801b5b4 	.word	0x0801b5b4
 80126f0:	0801b894 	.word	0x0801b894
 80126f4:	0801b8b4 	.word	0x0801b8b4
 80126f8:	20000424 	.word	0x20000424

080126fc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	4603      	mov	r3, r0
 8012704:	60b9      	str	r1, [r7, #8]
 8012706:	607a      	str	r2, [r7, #4]
 8012708:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801270a:	89fb      	ldrh	r3, [r7, #14]
 801270c:	1c5a      	adds	r2, r3, #1
 801270e:	81fa      	strh	r2, [r7, #14]
 8012710:	461a      	mov	r2, r3
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	4413      	add	r3, r2
 8012716:	22ff      	movs	r2, #255	; 0xff
 8012718:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801271a:	e007      	b.n	801272c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801271c:	89fb      	ldrh	r3, [r7, #14]
 801271e:	1c5a      	adds	r2, r3, #1
 8012720:	81fa      	strh	r2, [r7, #14]
 8012722:	461a      	mov	r2, r3
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	4413      	add	r3, r2
 8012728:	2200      	movs	r2, #0
 801272a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801272c:	89fb      	ldrh	r3, [r7, #14]
 801272e:	2b43      	cmp	r3, #67	; 0x43
 8012730:	d904      	bls.n	801273c <dhcp_option_trailer+0x40>
 8012732:	89fb      	ldrh	r3, [r7, #14]
 8012734:	f003 0303 	and.w	r3, r3, #3
 8012738:	2b00      	cmp	r3, #0
 801273a:	d002      	beq.n	8012742 <dhcp_option_trailer+0x46>
 801273c:	89fb      	ldrh	r3, [r7, #14]
 801273e:	2b43      	cmp	r3, #67	; 0x43
 8012740:	d9ec      	bls.n	801271c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012742:	89fb      	ldrh	r3, [r7, #14]
 8012744:	33f0      	adds	r3, #240	; 0xf0
 8012746:	b29b      	uxth	r3, r3
 8012748:	4619      	mov	r1, r3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7f7 fe96 	bl	800a47c <pbuf_realloc>
}
 8012750:	bf00      	nop
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d017      	beq.n	8012796 <dhcp_supplied_address+0x3e>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d013      	beq.n	8012796 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012772:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	795b      	ldrb	r3, [r3, #5]
 8012778:	2b0a      	cmp	r3, #10
 801277a:	d007      	beq.n	801278c <dhcp_supplied_address+0x34>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	795b      	ldrb	r3, [r3, #5]
 8012780:	2b05      	cmp	r3, #5
 8012782:	d003      	beq.n	801278c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012788:	2b04      	cmp	r3, #4
 801278a:	d101      	bne.n	8012790 <dhcp_supplied_address+0x38>
 801278c:	2301      	movs	r3, #1
 801278e:	e000      	b.n	8012792 <dhcp_supplied_address+0x3a>
 8012790:	2300      	movs	r3, #0
 8012792:	b2db      	uxtb	r3, r3
 8012794:	e000      	b.n	8012798 <dhcp_supplied_address+0x40>
  }
  return 0;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	3714      	adds	r7, #20
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80127ac:	4915      	ldr	r1, [pc, #84]	; (8012804 <etharp_free_entry+0x60>)
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4613      	mov	r3, r2
 80127b2:	005b      	lsls	r3, r3, #1
 80127b4:	4413      	add	r3, r2
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	440b      	add	r3, r1
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d013      	beq.n	80127e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80127c0:	4910      	ldr	r1, [pc, #64]	; (8012804 <etharp_free_entry+0x60>)
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	4613      	mov	r3, r2
 80127c6:	005b      	lsls	r3, r3, #1
 80127c8:	4413      	add	r3, r2
 80127ca:	00db      	lsls	r3, r3, #3
 80127cc:	440b      	add	r3, r1
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7f7 ffd9 	bl	800a788 <pbuf_free>
    arp_table[i].q = NULL;
 80127d6:	490b      	ldr	r1, [pc, #44]	; (8012804 <etharp_free_entry+0x60>)
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	4613      	mov	r3, r2
 80127dc:	005b      	lsls	r3, r3, #1
 80127de:	4413      	add	r3, r2
 80127e0:	00db      	lsls	r3, r3, #3
 80127e2:	440b      	add	r3, r1
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80127e8:	4906      	ldr	r1, [pc, #24]	; (8012804 <etharp_free_entry+0x60>)
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	4613      	mov	r3, r2
 80127ee:	005b      	lsls	r3, r3, #1
 80127f0:	4413      	add	r3, r2
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	440b      	add	r3, r1
 80127f6:	3314      	adds	r3, #20
 80127f8:	2200      	movs	r2, #0
 80127fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127fc:	bf00      	nop
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	20000428 	.word	0x20000428

08012808 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801280e:	2300      	movs	r3, #0
 8012810:	607b      	str	r3, [r7, #4]
 8012812:	e096      	b.n	8012942 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012814:	494f      	ldr	r1, [pc, #316]	; (8012954 <etharp_tmr+0x14c>)
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	4613      	mov	r3, r2
 801281a:	005b      	lsls	r3, r3, #1
 801281c:	4413      	add	r3, r2
 801281e:	00db      	lsls	r3, r3, #3
 8012820:	440b      	add	r3, r1
 8012822:	3314      	adds	r3, #20
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012828:	78fb      	ldrb	r3, [r7, #3]
 801282a:	2b00      	cmp	r3, #0
 801282c:	f000 8086 	beq.w	801293c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012830:	4948      	ldr	r1, [pc, #288]	; (8012954 <etharp_tmr+0x14c>)
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	4613      	mov	r3, r2
 8012836:	005b      	lsls	r3, r3, #1
 8012838:	4413      	add	r3, r2
 801283a:	00db      	lsls	r3, r3, #3
 801283c:	440b      	add	r3, r1
 801283e:	3312      	adds	r3, #18
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	3301      	adds	r3, #1
 8012844:	b298      	uxth	r0, r3
 8012846:	4943      	ldr	r1, [pc, #268]	; (8012954 <etharp_tmr+0x14c>)
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	4613      	mov	r3, r2
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	4413      	add	r3, r2
 8012850:	00db      	lsls	r3, r3, #3
 8012852:	440b      	add	r3, r1
 8012854:	3312      	adds	r3, #18
 8012856:	4602      	mov	r2, r0
 8012858:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801285a:	493e      	ldr	r1, [pc, #248]	; (8012954 <etharp_tmr+0x14c>)
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	4613      	mov	r3, r2
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	4413      	add	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	440b      	add	r3, r1
 8012868:	3312      	adds	r3, #18
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012870:	d215      	bcs.n	801289e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012872:	4938      	ldr	r1, [pc, #224]	; (8012954 <etharp_tmr+0x14c>)
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	4613      	mov	r3, r2
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	4413      	add	r3, r2
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	440b      	add	r3, r1
 8012880:	3314      	adds	r3, #20
 8012882:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012884:	2b01      	cmp	r3, #1
 8012886:	d10e      	bne.n	80128a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012888:	4932      	ldr	r1, [pc, #200]	; (8012954 <etharp_tmr+0x14c>)
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	4613      	mov	r3, r2
 801288e:	005b      	lsls	r3, r3, #1
 8012890:	4413      	add	r3, r2
 8012892:	00db      	lsls	r3, r3, #3
 8012894:	440b      	add	r3, r1
 8012896:	3312      	adds	r3, #18
 8012898:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801289a:	2b04      	cmp	r3, #4
 801289c:	d903      	bls.n	80128a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7ff ff80 	bl	80127a4 <etharp_free_entry>
 80128a4:	e04a      	b.n	801293c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80128a6:	492b      	ldr	r1, [pc, #172]	; (8012954 <etharp_tmr+0x14c>)
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	4613      	mov	r3, r2
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	4413      	add	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	440b      	add	r3, r1
 80128b4:	3314      	adds	r3, #20
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d10a      	bne.n	80128d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80128bc:	4925      	ldr	r1, [pc, #148]	; (8012954 <etharp_tmr+0x14c>)
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	4613      	mov	r3, r2
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	4413      	add	r3, r2
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	440b      	add	r3, r1
 80128ca:	3314      	adds	r3, #20
 80128cc:	2204      	movs	r2, #4
 80128ce:	701a      	strb	r2, [r3, #0]
 80128d0:	e034      	b.n	801293c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80128d2:	4920      	ldr	r1, [pc, #128]	; (8012954 <etharp_tmr+0x14c>)
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	4613      	mov	r3, r2
 80128d8:	005b      	lsls	r3, r3, #1
 80128da:	4413      	add	r3, r2
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	440b      	add	r3, r1
 80128e0:	3314      	adds	r3, #20
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b04      	cmp	r3, #4
 80128e6:	d10a      	bne.n	80128fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80128e8:	491a      	ldr	r1, [pc, #104]	; (8012954 <etharp_tmr+0x14c>)
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	4613      	mov	r3, r2
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	4413      	add	r3, r2
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	440b      	add	r3, r1
 80128f6:	3314      	adds	r3, #20
 80128f8:	2202      	movs	r2, #2
 80128fa:	701a      	strb	r2, [r3, #0]
 80128fc:	e01e      	b.n	801293c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128fe:	4915      	ldr	r1, [pc, #84]	; (8012954 <etharp_tmr+0x14c>)
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	4613      	mov	r3, r2
 8012904:	005b      	lsls	r3, r3, #1
 8012906:	4413      	add	r3, r2
 8012908:	00db      	lsls	r3, r3, #3
 801290a:	440b      	add	r3, r1
 801290c:	3314      	adds	r3, #20
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b01      	cmp	r3, #1
 8012912:	d113      	bne.n	801293c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012914:	490f      	ldr	r1, [pc, #60]	; (8012954 <etharp_tmr+0x14c>)
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	4613      	mov	r3, r2
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	4413      	add	r3, r2
 801291e:	00db      	lsls	r3, r3, #3
 8012920:	440b      	add	r3, r1
 8012922:	3308      	adds	r3, #8
 8012924:	6818      	ldr	r0, [r3, #0]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4613      	mov	r3, r2
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	4413      	add	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	4a08      	ldr	r2, [pc, #32]	; (8012954 <etharp_tmr+0x14c>)
 8012932:	4413      	add	r3, r2
 8012934:	3304      	adds	r3, #4
 8012936:	4619      	mov	r1, r3
 8012938:	f000 fe72 	bl	8013620 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3301      	adds	r3, #1
 8012940:	607b      	str	r3, [r7, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b09      	cmp	r3, #9
 8012946:	f77f af65 	ble.w	8012814 <etharp_tmr+0xc>
      }
    }
  }
}
 801294a:	bf00      	nop
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	20000428 	.word	0x20000428

08012958 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b08a      	sub	sp, #40	; 0x28
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	460b      	mov	r3, r1
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012966:	230a      	movs	r3, #10
 8012968:	84fb      	strh	r3, [r7, #38]	; 0x26
 801296a:	230a      	movs	r3, #10
 801296c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801296e:	230a      	movs	r3, #10
 8012970:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012972:	2300      	movs	r3, #0
 8012974:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012976:	230a      	movs	r3, #10
 8012978:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	83bb      	strh	r3, [r7, #28]
 801297e:	2300      	movs	r3, #0
 8012980:	837b      	strh	r3, [r7, #26]
 8012982:	2300      	movs	r3, #0
 8012984:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012986:	2300      	movs	r3, #0
 8012988:	843b      	strh	r3, [r7, #32]
 801298a:	e0ae      	b.n	8012aea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801298c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012990:	49a6      	ldr	r1, [pc, #664]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012992:	4613      	mov	r3, r2
 8012994:	005b      	lsls	r3, r3, #1
 8012996:	4413      	add	r3, r2
 8012998:	00db      	lsls	r3, r3, #3
 801299a:	440b      	add	r3, r1
 801299c:	3314      	adds	r3, #20
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80129a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129a6:	2b0a      	cmp	r3, #10
 80129a8:	d105      	bne.n	80129b6 <etharp_find_entry+0x5e>
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d102      	bne.n	80129b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80129b0:	8c3b      	ldrh	r3, [r7, #32]
 80129b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80129b4:	e095      	b.n	8012ae2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80129b6:	7dfb      	ldrb	r3, [r7, #23]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f000 8092 	beq.w	8012ae2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80129be:	7dfb      	ldrb	r3, [r7, #23]
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d009      	beq.n	80129d8 <etharp_find_entry+0x80>
 80129c4:	7dfb      	ldrb	r3, [r7, #23]
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d806      	bhi.n	80129d8 <etharp_find_entry+0x80>
 80129ca:	4b99      	ldr	r3, [pc, #612]	; (8012c30 <etharp_find_entry+0x2d8>)
 80129cc:	f240 1223 	movw	r2, #291	; 0x123
 80129d0:	4998      	ldr	r1, [pc, #608]	; (8012c34 <etharp_find_entry+0x2dc>)
 80129d2:	4899      	ldr	r0, [pc, #612]	; (8012c38 <etharp_find_entry+0x2e0>)
 80129d4:	f002 ff52 	bl	801587c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d020      	beq.n	8012a20 <etharp_find_entry+0xc8>
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6819      	ldr	r1, [r3, #0]
 80129e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129e6:	4891      	ldr	r0, [pc, #580]	; (8012c2c <etharp_find_entry+0x2d4>)
 80129e8:	4613      	mov	r3, r2
 80129ea:	005b      	lsls	r3, r3, #1
 80129ec:	4413      	add	r3, r2
 80129ee:	00db      	lsls	r3, r3, #3
 80129f0:	4403      	add	r3, r0
 80129f2:	3304      	adds	r3, #4
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4299      	cmp	r1, r3
 80129f8:	d112      	bne.n	8012a20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d00c      	beq.n	8012a1a <etharp_find_entry+0xc2>
 8012a00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a04:	4989      	ldr	r1, [pc, #548]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a06:	4613      	mov	r3, r2
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	4413      	add	r3, r2
 8012a0c:	00db      	lsls	r3, r3, #3
 8012a0e:	440b      	add	r3, r1
 8012a10:	3308      	adds	r3, #8
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d102      	bne.n	8012a20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012a1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a1e:	e100      	b.n	8012c22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012a20:	7dfb      	ldrb	r3, [r7, #23]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d140      	bne.n	8012aa8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a2a:	4980      	ldr	r1, [pc, #512]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	005b      	lsls	r3, r3, #1
 8012a30:	4413      	add	r3, r2
 8012a32:	00db      	lsls	r3, r3, #3
 8012a34:	440b      	add	r3, r1
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d01a      	beq.n	8012a72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012a3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a40:	497a      	ldr	r1, [pc, #488]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a42:	4613      	mov	r3, r2
 8012a44:	005b      	lsls	r3, r3, #1
 8012a46:	4413      	add	r3, r2
 8012a48:	00db      	lsls	r3, r3, #3
 8012a4a:	440b      	add	r3, r1
 8012a4c:	3312      	adds	r3, #18
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	8bba      	ldrh	r2, [r7, #28]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d845      	bhi.n	8012ae2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a56:	8c3b      	ldrh	r3, [r7, #32]
 8012a58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a5e:	4973      	ldr	r1, [pc, #460]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	440b      	add	r3, r1
 8012a6a:	3312      	adds	r3, #18
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	83bb      	strh	r3, [r7, #28]
 8012a70:	e037      	b.n	8012ae2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a76:	496d      	ldr	r1, [pc, #436]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	4413      	add	r3, r2
 8012a7e:	00db      	lsls	r3, r3, #3
 8012a80:	440b      	add	r3, r1
 8012a82:	3312      	adds	r3, #18
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	8b7a      	ldrh	r2, [r7, #26]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d82a      	bhi.n	8012ae2 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a8c:	8c3b      	ldrh	r3, [r7, #32]
 8012a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a94:	4965      	ldr	r1, [pc, #404]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	005b      	lsls	r3, r3, #1
 8012a9a:	4413      	add	r3, r2
 8012a9c:	00db      	lsls	r3, r3, #3
 8012a9e:	440b      	add	r3, r1
 8012aa0:	3312      	adds	r3, #18
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	837b      	strh	r3, [r7, #26]
 8012aa6:	e01c      	b.n	8012ae2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d919      	bls.n	8012ae2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012aae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ab2:	495e      	ldr	r1, [pc, #376]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	4413      	add	r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	440b      	add	r3, r1
 8012abe:	3312      	adds	r3, #18
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	8b3a      	ldrh	r2, [r7, #24]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d80c      	bhi.n	8012ae2 <etharp_find_entry+0x18a>
            old_stable = i;
 8012ac8:	8c3b      	ldrh	r3, [r7, #32]
 8012aca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012acc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ad0:	4956      	ldr	r1, [pc, #344]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	440b      	add	r3, r1
 8012adc:	3312      	adds	r3, #18
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ae2:	8c3b      	ldrh	r3, [r7, #32]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	843b      	strh	r3, [r7, #32]
 8012aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aee:	2b09      	cmp	r3, #9
 8012af0:	f77f af4c 	ble.w	801298c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012af4:	7afb      	ldrb	r3, [r7, #11]
 8012af6:	f003 0302 	and.w	r3, r3, #2
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d108      	bne.n	8012b10 <etharp_find_entry+0x1b8>
 8012afe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b02:	2b0a      	cmp	r3, #10
 8012b04:	d107      	bne.n	8012b16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012b06:	7afb      	ldrb	r3, [r7, #11]
 8012b08:	f003 0301 	and.w	r3, r3, #1
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d102      	bne.n	8012b16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012b10:	f04f 33ff 	mov.w	r3, #4294967295
 8012b14:	e085      	b.n	8012c22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012b16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b1a:	2b09      	cmp	r3, #9
 8012b1c:	dc02      	bgt.n	8012b24 <etharp_find_entry+0x1cc>
    i = empty;
 8012b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b20:	843b      	strh	r3, [r7, #32]
 8012b22:	e039      	b.n	8012b98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012b24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012b28:	2b09      	cmp	r3, #9
 8012b2a:	dc14      	bgt.n	8012b56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012b30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b34:	493d      	ldr	r1, [pc, #244]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012b36:	4613      	mov	r3, r2
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	4413      	add	r3, r2
 8012b3c:	00db      	lsls	r3, r3, #3
 8012b3e:	440b      	add	r3, r1
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d018      	beq.n	8012b78 <etharp_find_entry+0x220>
 8012b46:	4b3a      	ldr	r3, [pc, #232]	; (8012c30 <etharp_find_entry+0x2d8>)
 8012b48:	f240 126d 	movw	r2, #365	; 0x16d
 8012b4c:	493b      	ldr	r1, [pc, #236]	; (8012c3c <etharp_find_entry+0x2e4>)
 8012b4e:	483a      	ldr	r0, [pc, #232]	; (8012c38 <etharp_find_entry+0x2e0>)
 8012b50:	f002 fe94 	bl	801587c <iprintf>
 8012b54:	e010      	b.n	8012b78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b5a:	2b09      	cmp	r3, #9
 8012b5c:	dc02      	bgt.n	8012b64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b60:	843b      	strh	r3, [r7, #32]
 8012b62:	e009      	b.n	8012b78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b68:	2b09      	cmp	r3, #9
 8012b6a:	dc02      	bgt.n	8012b72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b6c:	8bfb      	ldrh	r3, [r7, #30]
 8012b6e:	843b      	strh	r3, [r7, #32]
 8012b70:	e002      	b.n	8012b78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b72:	f04f 33ff 	mov.w	r3, #4294967295
 8012b76:	e054      	b.n	8012c22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b7c:	2b09      	cmp	r3, #9
 8012b7e:	dd06      	ble.n	8012b8e <etharp_find_entry+0x236>
 8012b80:	4b2b      	ldr	r3, [pc, #172]	; (8012c30 <etharp_find_entry+0x2d8>)
 8012b82:	f240 127f 	movw	r2, #383	; 0x17f
 8012b86:	492e      	ldr	r1, [pc, #184]	; (8012c40 <etharp_find_entry+0x2e8>)
 8012b88:	482b      	ldr	r0, [pc, #172]	; (8012c38 <etharp_find_entry+0x2e0>)
 8012b8a:	f002 fe77 	bl	801587c <iprintf>
    etharp_free_entry(i);
 8012b8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff fe06 	bl	80127a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b9c:	2b09      	cmp	r3, #9
 8012b9e:	dd06      	ble.n	8012bae <etharp_find_entry+0x256>
 8012ba0:	4b23      	ldr	r3, [pc, #140]	; (8012c30 <etharp_find_entry+0x2d8>)
 8012ba2:	f240 1283 	movw	r2, #387	; 0x183
 8012ba6:	4926      	ldr	r1, [pc, #152]	; (8012c40 <etharp_find_entry+0x2e8>)
 8012ba8:	4823      	ldr	r0, [pc, #140]	; (8012c38 <etharp_find_entry+0x2e0>)
 8012baa:	f002 fe67 	bl	801587c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012bae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bb2:	491e      	ldr	r1, [pc, #120]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	440b      	add	r3, r1
 8012bbe:	3314      	adds	r3, #20
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d006      	beq.n	8012bd4 <etharp_find_entry+0x27c>
 8012bc6:	4b1a      	ldr	r3, [pc, #104]	; (8012c30 <etharp_find_entry+0x2d8>)
 8012bc8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012bcc:	491d      	ldr	r1, [pc, #116]	; (8012c44 <etharp_find_entry+0x2ec>)
 8012bce:	481a      	ldr	r0, [pc, #104]	; (8012c38 <etharp_find_entry+0x2e0>)
 8012bd0:	f002 fe54 	bl	801587c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d00b      	beq.n	8012bf2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012bda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6819      	ldr	r1, [r3, #0]
 8012be2:	4812      	ldr	r0, [pc, #72]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012be4:	4613      	mov	r3, r2
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	4413      	add	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	4403      	add	r3, r0
 8012bee:	3304      	adds	r3, #4
 8012bf0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012bf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bf6:	490d      	ldr	r1, [pc, #52]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	00db      	lsls	r3, r3, #3
 8012c00:	440b      	add	r3, r1
 8012c02:	3312      	adds	r3, #18
 8012c04:	2200      	movs	r2, #0
 8012c06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012c08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c0c:	4907      	ldr	r1, [pc, #28]	; (8012c2c <etharp_find_entry+0x2d4>)
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	440b      	add	r3, r1
 8012c18:	3308      	adds	r3, #8
 8012c1a:	687a      	ldr	r2, [r7, #4]
 8012c1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3728      	adds	r7, #40	; 0x28
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20000428 	.word	0x20000428
 8012c30:	0801b8f4 	.word	0x0801b8f4
 8012c34:	0801b92c 	.word	0x0801b92c
 8012c38:	0801b96c 	.word	0x0801b96c
 8012c3c:	0801b994 	.word	0x0801b994
 8012c40:	0801b9ac 	.word	0x0801b9ac
 8012c44:	0801b9c0 	.word	0x0801b9c0

08012c48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af02      	add	r7, sp, #8
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	607a      	str	r2, [r7, #4]
 8012c54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c5c:	2b06      	cmp	r3, #6
 8012c5e:	d006      	beq.n	8012c6e <etharp_update_arp_entry+0x26>
 8012c60:	4b48      	ldr	r3, [pc, #288]	; (8012d84 <etharp_update_arp_entry+0x13c>)
 8012c62:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012c66:	4948      	ldr	r1, [pc, #288]	; (8012d88 <etharp_update_arp_entry+0x140>)
 8012c68:	4848      	ldr	r0, [pc, #288]	; (8012d8c <etharp_update_arp_entry+0x144>)
 8012c6a:	f002 fe07 	bl	801587c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d012      	beq.n	8012c9a <etharp_update_arp_entry+0x52>
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d00e      	beq.n	8012c9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	68f9      	ldr	r1, [r7, #12]
 8012c82:	4618      	mov	r0, r3
 8012c84:	f001 f920 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8012c88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d105      	bne.n	8012c9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c96:	2be0      	cmp	r3, #224	; 0xe0
 8012c98:	d102      	bne.n	8012ca0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c9a:	f06f 030f 	mvn.w	r3, #15
 8012c9e:	e06c      	b.n	8012d7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012ca0:	78fb      	ldrb	r3, [r7, #3]
 8012ca2:	68fa      	ldr	r2, [r7, #12]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	68b8      	ldr	r0, [r7, #8]
 8012ca8:	f7ff fe56 	bl	8012958 <etharp_find_entry>
 8012cac:	4603      	mov	r3, r0
 8012cae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012cb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	da02      	bge.n	8012cbe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012cb8:	8afb      	ldrh	r3, [r7, #22]
 8012cba:	b25b      	sxtb	r3, r3
 8012cbc:	e05d      	b.n	8012d7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012cbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cc2:	4933      	ldr	r1, [pc, #204]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	4413      	add	r3, r2
 8012cca:	00db      	lsls	r3, r3, #3
 8012ccc:	440b      	add	r3, r1
 8012cce:	3314      	adds	r3, #20
 8012cd0:	2202      	movs	r2, #2
 8012cd2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd8:	492d      	ldr	r1, [pc, #180]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012cda:	4613      	mov	r3, r2
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	4413      	add	r3, r2
 8012ce0:	00db      	lsls	r3, r3, #3
 8012ce2:	440b      	add	r3, r1
 8012ce4:	3308      	adds	r3, #8
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012cea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	005b      	lsls	r3, r3, #1
 8012cf2:	4413      	add	r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	3308      	adds	r3, #8
 8012cf8:	4a25      	ldr	r2, [pc, #148]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012cfa:	4413      	add	r3, r2
 8012cfc:	3304      	adds	r3, #4
 8012cfe:	2206      	movs	r2, #6
 8012d00:	6879      	ldr	r1, [r7, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f002 f876 	bl	8014df4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012d08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d0c:	4920      	ldr	r1, [pc, #128]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012d0e:	4613      	mov	r3, r2
 8012d10:	005b      	lsls	r3, r3, #1
 8012d12:	4413      	add	r3, r2
 8012d14:	00db      	lsls	r3, r3, #3
 8012d16:	440b      	add	r3, r1
 8012d18:	3312      	adds	r3, #18
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012d1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d22:	491b      	ldr	r1, [pc, #108]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	440b      	add	r3, r1
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d021      	beq.n	8012d78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012d34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d38:	4915      	ldr	r1, [pc, #84]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	005b      	lsls	r3, r3, #1
 8012d3e:	4413      	add	r3, r2
 8012d40:	00db      	lsls	r3, r3, #3
 8012d42:	440b      	add	r3, r1
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012d48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d4c:	4910      	ldr	r1, [pc, #64]	; (8012d90 <etharp_update_arp_entry+0x148>)
 8012d4e:	4613      	mov	r3, r2
 8012d50:	005b      	lsls	r3, r3, #1
 8012d52:	4413      	add	r3, r2
 8012d54:	00db      	lsls	r3, r3, #3
 8012d56:	440b      	add	r3, r1
 8012d58:	2200      	movs	r2, #0
 8012d5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6939      	ldr	r1, [r7, #16]
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f001 ffb3 	bl	8014cd8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d72:	6938      	ldr	r0, [r7, #16]
 8012d74:	f7f7 fd08 	bl	800a788 <pbuf_free>
  }
  return ERR_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3718      	adds	r7, #24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	0801b8f4 	.word	0x0801b8f4
 8012d88:	0801b9ec 	.word	0x0801b9ec
 8012d8c:	0801b96c 	.word	0x0801b96c
 8012d90:	20000428 	.word	0x20000428

08012d94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	60fb      	str	r3, [r7, #12]
 8012da0:	e01e      	b.n	8012de0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012da2:	4913      	ldr	r1, [pc, #76]	; (8012df0 <etharp_cleanup_netif+0x5c>)
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	4613      	mov	r3, r2
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	440b      	add	r3, r1
 8012db0:	3314      	adds	r3, #20
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012db6:	7afb      	ldrb	r3, [r7, #11]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00e      	beq.n	8012dda <etharp_cleanup_netif+0x46>
 8012dbc:	490c      	ldr	r1, [pc, #48]	; (8012df0 <etharp_cleanup_netif+0x5c>)
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	4413      	add	r3, r2
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	440b      	add	r3, r1
 8012dca:	3308      	adds	r3, #8
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d102      	bne.n	8012dda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012dd4:	68f8      	ldr	r0, [r7, #12]
 8012dd6:	f7ff fce5 	bl	80127a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	60fb      	str	r3, [r7, #12]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b09      	cmp	r3, #9
 8012de4:	dddd      	ble.n	8012da2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012de6:	bf00      	nop
 8012de8:	bf00      	nop
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	20000428 	.word	0x20000428

08012df4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012df4:	b5b0      	push	{r4, r5, r7, lr}
 8012df6:	b08a      	sub	sp, #40	; 0x28
 8012df8:	af04      	add	r7, sp, #16
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d107      	bne.n	8012e14 <etharp_input+0x20>
 8012e04:	4b3f      	ldr	r3, [pc, #252]	; (8012f04 <etharp_input+0x110>)
 8012e06:	f240 228a 	movw	r2, #650	; 0x28a
 8012e0a:	493f      	ldr	r1, [pc, #252]	; (8012f08 <etharp_input+0x114>)
 8012e0c:	483f      	ldr	r0, [pc, #252]	; (8012f0c <etharp_input+0x118>)
 8012e0e:	f002 fd35 	bl	801587c <iprintf>
 8012e12:	e074      	b.n	8012efe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	881b      	ldrh	r3, [r3, #0]
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e24:	d10c      	bne.n	8012e40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e2a:	2b06      	cmp	r3, #6
 8012e2c:	d108      	bne.n	8012e40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e32:	2b04      	cmp	r3, #4
 8012e34:	d104      	bne.n	8012e40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	885b      	ldrh	r3, [r3, #2]
 8012e3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e3c:	2b08      	cmp	r3, #8
 8012e3e:	d003      	beq.n	8012e48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f7f7 fca1 	bl	800a788 <pbuf_free>
    return;
 8012e46:	e05a      	b.n	8012efe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	330e      	adds	r3, #14
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	3318      	adds	r3, #24
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	3304      	adds	r3, #4
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d102      	bne.n	8012e68 <etharp_input+0x74>
    for_us = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	75fb      	strb	r3, [r7, #23]
 8012e66:	e009      	b.n	8012e7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	3304      	adds	r3, #4
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	bf0c      	ite	eq
 8012e74:	2301      	moveq	r3, #1
 8012e76:	2300      	movne	r3, #0
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	f103 0208 	add.w	r2, r3, #8
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d001      	beq.n	8012e8c <etharp_input+0x98>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	e000      	b.n	8012e8e <etharp_input+0x9a>
 8012e8c:	2302      	movs	r3, #2
 8012e8e:	f107 010c 	add.w	r1, r7, #12
 8012e92:	6838      	ldr	r0, [r7, #0]
 8012e94:	f7ff fed8 	bl	8012c48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	88db      	ldrh	r3, [r3, #6]
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ea2:	d003      	beq.n	8012eac <etharp_input+0xb8>
 8012ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ea8:	d01e      	beq.n	8012ee8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012eaa:	e025      	b.n	8012ef8 <etharp_input+0x104>
      if (for_us) {
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d021      	beq.n	8012ef6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012ec8:	693a      	ldr	r2, [r7, #16]
 8012eca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012ecc:	2102      	movs	r1, #2
 8012ece:	9103      	str	r1, [sp, #12]
 8012ed0:	f107 010c 	add.w	r1, r7, #12
 8012ed4:	9102      	str	r1, [sp, #8]
 8012ed6:	9201      	str	r2, [sp, #4]
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	462b      	mov	r3, r5
 8012edc:	4622      	mov	r2, r4
 8012ede:	4601      	mov	r1, r0
 8012ee0:	6838      	ldr	r0, [r7, #0]
 8012ee2:	f000 faef 	bl	80134c4 <etharp_raw>
      break;
 8012ee6:	e006      	b.n	8012ef6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012ee8:	f107 030c 	add.w	r3, r7, #12
 8012eec:	4619      	mov	r1, r3
 8012eee:	6838      	ldr	r0, [r7, #0]
 8012ef0:	f7fe f9fc 	bl	80112ec <dhcp_arp_reply>
      break;
 8012ef4:	e000      	b.n	8012ef8 <etharp_input+0x104>
      break;
 8012ef6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f7f7 fc45 	bl	800a788 <pbuf_free>
}
 8012efe:	3718      	adds	r7, #24
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bdb0      	pop	{r4, r5, r7, pc}
 8012f04:	0801b8f4 	.word	0x0801b8f4
 8012f08:	0801ba44 	.word	0x0801ba44
 8012f0c:	0801b96c 	.word	0x0801b96c

08012f10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af02      	add	r7, sp, #8
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	4613      	mov	r3, r2
 8012f1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012f1e:	79fa      	ldrb	r2, [r7, #7]
 8012f20:	4944      	ldr	r1, [pc, #272]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012f22:	4613      	mov	r3, r2
 8012f24:	005b      	lsls	r3, r3, #1
 8012f26:	4413      	add	r3, r2
 8012f28:	00db      	lsls	r3, r3, #3
 8012f2a:	440b      	add	r3, r1
 8012f2c:	3314      	adds	r3, #20
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d806      	bhi.n	8012f42 <etharp_output_to_arp_index+0x32>
 8012f34:	4b40      	ldr	r3, [pc, #256]	; (8013038 <etharp_output_to_arp_index+0x128>)
 8012f36:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012f3a:	4940      	ldr	r1, [pc, #256]	; (801303c <etharp_output_to_arp_index+0x12c>)
 8012f3c:	4840      	ldr	r0, [pc, #256]	; (8013040 <etharp_output_to_arp_index+0x130>)
 8012f3e:	f002 fc9d 	bl	801587c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012f42:	79fa      	ldrb	r2, [r7, #7]
 8012f44:	493b      	ldr	r1, [pc, #236]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012f46:	4613      	mov	r3, r2
 8012f48:	005b      	lsls	r3, r3, #1
 8012f4a:	4413      	add	r3, r2
 8012f4c:	00db      	lsls	r3, r3, #3
 8012f4e:	440b      	add	r3, r1
 8012f50:	3314      	adds	r3, #20
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d153      	bne.n	8013000 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f58:	79fa      	ldrb	r2, [r7, #7]
 8012f5a:	4936      	ldr	r1, [pc, #216]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	4413      	add	r3, r2
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	440b      	add	r3, r1
 8012f66:	3312      	adds	r3, #18
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012f6e:	d919      	bls.n	8012fa4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f70:	79fa      	ldrb	r2, [r7, #7]
 8012f72:	4613      	mov	r3, r2
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	4413      	add	r3, r2
 8012f78:	00db      	lsls	r3, r3, #3
 8012f7a:	4a2e      	ldr	r2, [pc, #184]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012f7c:	4413      	add	r3, r2
 8012f7e:	3304      	adds	r3, #4
 8012f80:	4619      	mov	r1, r3
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f000 fb4c 	bl	8013620 <etharp_request>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d138      	bne.n	8013000 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f8e:	79fa      	ldrb	r2, [r7, #7]
 8012f90:	4928      	ldr	r1, [pc, #160]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012f92:	4613      	mov	r3, r2
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	4413      	add	r3, r2
 8012f98:	00db      	lsls	r3, r3, #3
 8012f9a:	440b      	add	r3, r1
 8012f9c:	3314      	adds	r3, #20
 8012f9e:	2203      	movs	r2, #3
 8012fa0:	701a      	strb	r2, [r3, #0]
 8012fa2:	e02d      	b.n	8013000 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012fa4:	79fa      	ldrb	r2, [r7, #7]
 8012fa6:	4923      	ldr	r1, [pc, #140]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012fa8:	4613      	mov	r3, r2
 8012faa:	005b      	lsls	r3, r3, #1
 8012fac:	4413      	add	r3, r2
 8012fae:	00db      	lsls	r3, r3, #3
 8012fb0:	440b      	add	r3, r1
 8012fb2:	3312      	adds	r3, #18
 8012fb4:	881b      	ldrh	r3, [r3, #0]
 8012fb6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012fba:	d321      	bcc.n	8013000 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012fbc:	79fa      	ldrb	r2, [r7, #7]
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	4a1b      	ldr	r2, [pc, #108]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012fc8:	4413      	add	r3, r2
 8012fca:	1d19      	adds	r1, r3, #4
 8012fcc:	79fa      	ldrb	r2, [r7, #7]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	005b      	lsls	r3, r3, #1
 8012fd2:	4413      	add	r3, r2
 8012fd4:	00db      	lsls	r3, r3, #3
 8012fd6:	3308      	adds	r3, #8
 8012fd8:	4a16      	ldr	r2, [pc, #88]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012fda:	4413      	add	r3, r2
 8012fdc:	3304      	adds	r3, #4
 8012fde:	461a      	mov	r2, r3
 8012fe0:	68f8      	ldr	r0, [r7, #12]
 8012fe2:	f000 fafb 	bl	80135dc <etharp_request_dst>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d109      	bne.n	8013000 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012fec:	79fa      	ldrb	r2, [r7, #7]
 8012fee:	4911      	ldr	r1, [pc, #68]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	005b      	lsls	r3, r3, #1
 8012ff4:	4413      	add	r3, r2
 8012ff6:	00db      	lsls	r3, r3, #3
 8012ff8:	440b      	add	r3, r1
 8012ffa:	3314      	adds	r3, #20
 8012ffc:	2203      	movs	r2, #3
 8012ffe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013006:	79fa      	ldrb	r2, [r7, #7]
 8013008:	4613      	mov	r3, r2
 801300a:	005b      	lsls	r3, r3, #1
 801300c:	4413      	add	r3, r2
 801300e:	00db      	lsls	r3, r3, #3
 8013010:	3308      	adds	r3, #8
 8013012:	4a08      	ldr	r2, [pc, #32]	; (8013034 <etharp_output_to_arp_index+0x124>)
 8013014:	4413      	add	r3, r2
 8013016:	3304      	adds	r3, #4
 8013018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801301c:	9200      	str	r2, [sp, #0]
 801301e:	460a      	mov	r2, r1
 8013020:	68b9      	ldr	r1, [r7, #8]
 8013022:	68f8      	ldr	r0, [r7, #12]
 8013024:	f001 fe58 	bl	8014cd8 <ethernet_output>
 8013028:	4603      	mov	r3, r0
}
 801302a:	4618      	mov	r0, r3
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	20000428 	.word	0x20000428
 8013038:	0801b8f4 	.word	0x0801b8f4
 801303c:	0801ba64 	.word	0x0801ba64
 8013040:	0801b96c 	.word	0x0801b96c

08013044 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08a      	sub	sp, #40	; 0x28
 8013048:	af02      	add	r7, sp, #8
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <etharp_output+0x24>
 801305a:	4b73      	ldr	r3, [pc, #460]	; (8013228 <etharp_output+0x1e4>)
 801305c:	f240 321e 	movw	r2, #798	; 0x31e
 8013060:	4972      	ldr	r1, [pc, #456]	; (801322c <etharp_output+0x1e8>)
 8013062:	4873      	ldr	r0, [pc, #460]	; (8013230 <etharp_output+0x1ec>)
 8013064:	f002 fc0a 	bl	801587c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <etharp_output+0x38>
 801306e:	4b6e      	ldr	r3, [pc, #440]	; (8013228 <etharp_output+0x1e4>)
 8013070:	f240 321f 	movw	r2, #799	; 0x31f
 8013074:	496f      	ldr	r1, [pc, #444]	; (8013234 <etharp_output+0x1f0>)
 8013076:	486e      	ldr	r0, [pc, #440]	; (8013230 <etharp_output+0x1ec>)
 8013078:	f002 fc00 	bl	801587c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d106      	bne.n	8013090 <etharp_output+0x4c>
 8013082:	4b69      	ldr	r3, [pc, #420]	; (8013228 <etharp_output+0x1e4>)
 8013084:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013088:	496b      	ldr	r1, [pc, #428]	; (8013238 <etharp_output+0x1f4>)
 801308a:	4869      	ldr	r0, [pc, #420]	; (8013230 <etharp_output+0x1ec>)
 801308c:	f002 fbf6 	bl	801587c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	68f9      	ldr	r1, [r7, #12]
 8013096:	4618      	mov	r0, r3
 8013098:	f000 ff16 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80130a2:	4b66      	ldr	r3, [pc, #408]	; (801323c <etharp_output+0x1f8>)
 80130a4:	61fb      	str	r3, [r7, #28]
 80130a6:	e0af      	b.n	8013208 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130b0:	2be0      	cmp	r3, #224	; 0xe0
 80130b2:	d118      	bne.n	80130e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80130b4:	2301      	movs	r3, #1
 80130b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80130b8:	2300      	movs	r3, #0
 80130ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80130bc:	235e      	movs	r3, #94	; 0x5e
 80130be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	3301      	adds	r3, #1
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	3302      	adds	r3, #2
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	3303      	adds	r3, #3
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80130de:	f107 0310 	add.w	r3, r7, #16
 80130e2:	61fb      	str	r3, [r7, #28]
 80130e4:	e090      	b.n	8013208 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	3304      	adds	r3, #4
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	405a      	eors	r2, r3
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	3308      	adds	r3, #8
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4013      	ands	r3, r2
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d012      	beq.n	8013124 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013104:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013108:	4293      	cmp	r3, r2
 801310a:	d00b      	beq.n	8013124 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	330c      	adds	r3, #12
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d003      	beq.n	801311e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	330c      	adds	r3, #12
 801311a:	61bb      	str	r3, [r7, #24]
 801311c:	e002      	b.n	8013124 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801311e:	f06f 0303 	mvn.w	r3, #3
 8013122:	e07d      	b.n	8013220 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013124:	4b46      	ldr	r3, [pc, #280]	; (8013240 <etharp_output+0x1fc>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	4619      	mov	r1, r3
 801312a:	4a46      	ldr	r2, [pc, #280]	; (8013244 <etharp_output+0x200>)
 801312c:	460b      	mov	r3, r1
 801312e:	005b      	lsls	r3, r3, #1
 8013130:	440b      	add	r3, r1
 8013132:	00db      	lsls	r3, r3, #3
 8013134:	4413      	add	r3, r2
 8013136:	3314      	adds	r3, #20
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	2b01      	cmp	r3, #1
 801313c:	d925      	bls.n	801318a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801313e:	4b40      	ldr	r3, [pc, #256]	; (8013240 <etharp_output+0x1fc>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	4619      	mov	r1, r3
 8013144:	4a3f      	ldr	r2, [pc, #252]	; (8013244 <etharp_output+0x200>)
 8013146:	460b      	mov	r3, r1
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	440b      	add	r3, r1
 801314c:	00db      	lsls	r3, r3, #3
 801314e:	4413      	add	r3, r2
 8013150:	3308      	adds	r3, #8
 8013152:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	429a      	cmp	r2, r3
 8013158:	d117      	bne.n	801318a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	4b38      	ldr	r3, [pc, #224]	; (8013240 <etharp_output+0x1fc>)
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	4618      	mov	r0, r3
 8013164:	4937      	ldr	r1, [pc, #220]	; (8013244 <etharp_output+0x200>)
 8013166:	4603      	mov	r3, r0
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	4403      	add	r3, r0
 801316c:	00db      	lsls	r3, r3, #3
 801316e:	440b      	add	r3, r1
 8013170:	3304      	adds	r3, #4
 8013172:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013174:	429a      	cmp	r2, r3
 8013176:	d108      	bne.n	801318a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013178:	4b31      	ldr	r3, [pc, #196]	; (8013240 <etharp_output+0x1fc>)
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	461a      	mov	r2, r3
 801317e:	68b9      	ldr	r1, [r7, #8]
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f7ff fec5 	bl	8012f10 <etharp_output_to_arp_index>
 8013186:	4603      	mov	r3, r0
 8013188:	e04a      	b.n	8013220 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801318a:	2300      	movs	r3, #0
 801318c:	75fb      	strb	r3, [r7, #23]
 801318e:	e031      	b.n	80131f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013190:	7dfa      	ldrb	r2, [r7, #23]
 8013192:	492c      	ldr	r1, [pc, #176]	; (8013244 <etharp_output+0x200>)
 8013194:	4613      	mov	r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	4413      	add	r3, r2
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	440b      	add	r3, r1
 801319e:	3314      	adds	r3, #20
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d923      	bls.n	80131ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80131a6:	7dfa      	ldrb	r2, [r7, #23]
 80131a8:	4926      	ldr	r1, [pc, #152]	; (8013244 <etharp_output+0x200>)
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	3308      	adds	r3, #8
 80131b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d117      	bne.n	80131ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80131be:	69bb      	ldr	r3, [r7, #24]
 80131c0:	6819      	ldr	r1, [r3, #0]
 80131c2:	7dfa      	ldrb	r2, [r7, #23]
 80131c4:	481f      	ldr	r0, [pc, #124]	; (8013244 <etharp_output+0x200>)
 80131c6:	4613      	mov	r3, r2
 80131c8:	005b      	lsls	r3, r3, #1
 80131ca:	4413      	add	r3, r2
 80131cc:	00db      	lsls	r3, r3, #3
 80131ce:	4403      	add	r3, r0
 80131d0:	3304      	adds	r3, #4
 80131d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80131d4:	4299      	cmp	r1, r3
 80131d6:	d10a      	bne.n	80131ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80131d8:	4a19      	ldr	r2, [pc, #100]	; (8013240 <etharp_output+0x1fc>)
 80131da:	7dfb      	ldrb	r3, [r7, #23]
 80131dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80131de:	7dfb      	ldrb	r3, [r7, #23]
 80131e0:	461a      	mov	r2, r3
 80131e2:	68b9      	ldr	r1, [r7, #8]
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff fe93 	bl	8012f10 <etharp_output_to_arp_index>
 80131ea:	4603      	mov	r3, r0
 80131ec:	e018      	b.n	8013220 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
 80131f0:	3301      	adds	r3, #1
 80131f2:	75fb      	strb	r3, [r7, #23]
 80131f4:	7dfb      	ldrb	r3, [r7, #23]
 80131f6:	2b09      	cmp	r3, #9
 80131f8:	d9ca      	bls.n	8013190 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	69b9      	ldr	r1, [r7, #24]
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f000 f822 	bl	8013248 <etharp_query>
 8013204:	4603      	mov	r3, r0
 8013206:	e00b      	b.n	8013220 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801320e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	68b9      	ldr	r1, [r7, #8]
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f001 fd5d 	bl	8014cd8 <ethernet_output>
 801321e:	4603      	mov	r3, r0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3720      	adds	r7, #32
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	0801b8f4 	.word	0x0801b8f4
 801322c:	0801ba44 	.word	0x0801ba44
 8013230:	0801b96c 	.word	0x0801b96c
 8013234:	0801ba94 	.word	0x0801ba94
 8013238:	0801ba34 	.word	0x0801ba34
 801323c:	0801c0c0 	.word	0x0801c0c0
 8013240:	20000518 	.word	0x20000518
 8013244:	20000428 	.word	0x20000428

08013248 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b08c      	sub	sp, #48	; 0x30
 801324c:	af02      	add	r7, sp, #8
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	332a      	adds	r3, #42	; 0x2a
 8013258:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801325a:	23ff      	movs	r3, #255	; 0xff
 801325c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013260:	2300      	movs	r3, #0
 8013262:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	68f9      	ldr	r1, [r7, #12]
 801326a:	4618      	mov	r0, r3
 801326c:	f000 fe2c 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d10c      	bne.n	8013290 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801327e:	2be0      	cmp	r3, #224	; 0xe0
 8013280:	d006      	beq.n	8013290 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013290:	f06f 030f 	mvn.w	r3, #15
 8013294:	e101      	b.n	801349a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	2101      	movs	r1, #1
 801329a:	68b8      	ldr	r0, [r7, #8]
 801329c:	f7ff fb5c 	bl	8012958 <etharp_find_entry>
 80132a0:	4603      	mov	r3, r0
 80132a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80132a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	da02      	bge.n	80132b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80132ac:	8a7b      	ldrh	r3, [r7, #18]
 80132ae:	b25b      	sxtb	r3, r3
 80132b0:	e0f3      	b.n	801349a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80132b2:	8a7b      	ldrh	r3, [r7, #18]
 80132b4:	2b7e      	cmp	r3, #126	; 0x7e
 80132b6:	d906      	bls.n	80132c6 <etharp_query+0x7e>
 80132b8:	4b7a      	ldr	r3, [pc, #488]	; (80134a4 <etharp_query+0x25c>)
 80132ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80132be:	497a      	ldr	r1, [pc, #488]	; (80134a8 <etharp_query+0x260>)
 80132c0:	487a      	ldr	r0, [pc, #488]	; (80134ac <etharp_query+0x264>)
 80132c2:	f002 fadb 	bl	801587c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80132c6:	8a7b      	ldrh	r3, [r7, #18]
 80132c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80132ca:	7c7a      	ldrb	r2, [r7, #17]
 80132cc:	4978      	ldr	r1, [pc, #480]	; (80134b0 <etharp_query+0x268>)
 80132ce:	4613      	mov	r3, r2
 80132d0:	005b      	lsls	r3, r3, #1
 80132d2:	4413      	add	r3, r2
 80132d4:	00db      	lsls	r3, r3, #3
 80132d6:	440b      	add	r3, r1
 80132d8:	3314      	adds	r3, #20
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d115      	bne.n	801330c <etharp_query+0xc4>
    is_new_entry = 1;
 80132e0:	2301      	movs	r3, #1
 80132e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80132e4:	7c7a      	ldrb	r2, [r7, #17]
 80132e6:	4972      	ldr	r1, [pc, #456]	; (80134b0 <etharp_query+0x268>)
 80132e8:	4613      	mov	r3, r2
 80132ea:	005b      	lsls	r3, r3, #1
 80132ec:	4413      	add	r3, r2
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	440b      	add	r3, r1
 80132f2:	3314      	adds	r3, #20
 80132f4:	2201      	movs	r2, #1
 80132f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80132f8:	7c7a      	ldrb	r2, [r7, #17]
 80132fa:	496d      	ldr	r1, [pc, #436]	; (80134b0 <etharp_query+0x268>)
 80132fc:	4613      	mov	r3, r2
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	4413      	add	r3, r2
 8013302:	00db      	lsls	r3, r3, #3
 8013304:	440b      	add	r3, r1
 8013306:	3308      	adds	r3, #8
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801330c:	7c7a      	ldrb	r2, [r7, #17]
 801330e:	4968      	ldr	r1, [pc, #416]	; (80134b0 <etharp_query+0x268>)
 8013310:	4613      	mov	r3, r2
 8013312:	005b      	lsls	r3, r3, #1
 8013314:	4413      	add	r3, r2
 8013316:	00db      	lsls	r3, r3, #3
 8013318:	440b      	add	r3, r1
 801331a:	3314      	adds	r3, #20
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2b01      	cmp	r3, #1
 8013320:	d011      	beq.n	8013346 <etharp_query+0xfe>
 8013322:	7c7a      	ldrb	r2, [r7, #17]
 8013324:	4962      	ldr	r1, [pc, #392]	; (80134b0 <etharp_query+0x268>)
 8013326:	4613      	mov	r3, r2
 8013328:	005b      	lsls	r3, r3, #1
 801332a:	4413      	add	r3, r2
 801332c:	00db      	lsls	r3, r3, #3
 801332e:	440b      	add	r3, r1
 8013330:	3314      	adds	r3, #20
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b01      	cmp	r3, #1
 8013336:	d806      	bhi.n	8013346 <etharp_query+0xfe>
 8013338:	4b5a      	ldr	r3, [pc, #360]	; (80134a4 <etharp_query+0x25c>)
 801333a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801333e:	495d      	ldr	r1, [pc, #372]	; (80134b4 <etharp_query+0x26c>)
 8013340:	485a      	ldr	r0, [pc, #360]	; (80134ac <etharp_query+0x264>)
 8013342:	f002 fa9b 	bl	801587c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d102      	bne.n	8013352 <etharp_query+0x10a>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d10c      	bne.n	801336c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013352:	68b9      	ldr	r1, [r7, #8]
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f000 f963 	bl	8013620 <etharp_request>
 801335a:	4603      	mov	r3, r0
 801335c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d102      	bne.n	801336c <etharp_query+0x124>
      return result;
 8013366:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801336a:	e096      	b.n	801349a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d106      	bne.n	8013380 <etharp_query+0x138>
 8013372:	4b4c      	ldr	r3, [pc, #304]	; (80134a4 <etharp_query+0x25c>)
 8013374:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013378:	494f      	ldr	r1, [pc, #316]	; (80134b8 <etharp_query+0x270>)
 801337a:	484c      	ldr	r0, [pc, #304]	; (80134ac <etharp_query+0x264>)
 801337c:	f002 fa7e 	bl	801587c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013380:	7c7a      	ldrb	r2, [r7, #17]
 8013382:	494b      	ldr	r1, [pc, #300]	; (80134b0 <etharp_query+0x268>)
 8013384:	4613      	mov	r3, r2
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4413      	add	r3, r2
 801338a:	00db      	lsls	r3, r3, #3
 801338c:	440b      	add	r3, r1
 801338e:	3314      	adds	r3, #20
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d917      	bls.n	80133c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013396:	4a49      	ldr	r2, [pc, #292]	; (80134bc <etharp_query+0x274>)
 8013398:	7c7b      	ldrb	r3, [r7, #17]
 801339a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801339c:	7c7a      	ldrb	r2, [r7, #17]
 801339e:	4613      	mov	r3, r2
 80133a0:	005b      	lsls	r3, r3, #1
 80133a2:	4413      	add	r3, r2
 80133a4:	00db      	lsls	r3, r3, #3
 80133a6:	3308      	adds	r3, #8
 80133a8:	4a41      	ldr	r2, [pc, #260]	; (80134b0 <etharp_query+0x268>)
 80133aa:	4413      	add	r3, r2
 80133ac:	3304      	adds	r3, #4
 80133ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80133b2:	9200      	str	r2, [sp, #0]
 80133b4:	697a      	ldr	r2, [r7, #20]
 80133b6:	6879      	ldr	r1, [r7, #4]
 80133b8:	68f8      	ldr	r0, [r7, #12]
 80133ba:	f001 fc8d 	bl	8014cd8 <ethernet_output>
 80133be:	4603      	mov	r3, r0
 80133c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133c4:	e067      	b.n	8013496 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80133c6:	7c7a      	ldrb	r2, [r7, #17]
 80133c8:	4939      	ldr	r1, [pc, #228]	; (80134b0 <etharp_query+0x268>)
 80133ca:	4613      	mov	r3, r2
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	4413      	add	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	3314      	adds	r3, #20
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d15c      	bne.n	8013496 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80133dc:	2300      	movs	r3, #0
 80133de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133e4:	e01c      	b.n	8013420 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	895a      	ldrh	r2, [r3, #10]
 80133ea:	69fb      	ldr	r3, [r7, #28]
 80133ec:	891b      	ldrh	r3, [r3, #8]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d10a      	bne.n	8013408 <etharp_query+0x1c0>
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d006      	beq.n	8013408 <etharp_query+0x1c0>
 80133fa:	4b2a      	ldr	r3, [pc, #168]	; (80134a4 <etharp_query+0x25c>)
 80133fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013400:	492f      	ldr	r1, [pc, #188]	; (80134c0 <etharp_query+0x278>)
 8013402:	482a      	ldr	r0, [pc, #168]	; (80134ac <etharp_query+0x264>)
 8013404:	f002 fa3a 	bl	801587c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	7b1b      	ldrb	r3, [r3, #12]
 801340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <etharp_query+0x1d2>
        copy_needed = 1;
 8013414:	2301      	movs	r3, #1
 8013416:	61bb      	str	r3, [r7, #24]
        break;
 8013418:	e005      	b.n	8013426 <etharp_query+0x1de>
      }
      p = p->next;
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d1df      	bne.n	80133e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d007      	beq.n	801343c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013432:	200e      	movs	r0, #14
 8013434:	f7f7 fc14 	bl	800ac60 <pbuf_clone>
 8013438:	61f8      	str	r0, [r7, #28]
 801343a:	e004      	b.n	8013446 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013440:	69f8      	ldr	r0, [r7, #28]
 8013442:	f7f7 fa41 	bl	800a8c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d021      	beq.n	8013490 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801344c:	7c7a      	ldrb	r2, [r7, #17]
 801344e:	4918      	ldr	r1, [pc, #96]	; (80134b0 <etharp_query+0x268>)
 8013450:	4613      	mov	r3, r2
 8013452:	005b      	lsls	r3, r3, #1
 8013454:	4413      	add	r3, r2
 8013456:	00db      	lsls	r3, r3, #3
 8013458:	440b      	add	r3, r1
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00a      	beq.n	8013476 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013460:	7c7a      	ldrb	r2, [r7, #17]
 8013462:	4913      	ldr	r1, [pc, #76]	; (80134b0 <etharp_query+0x268>)
 8013464:	4613      	mov	r3, r2
 8013466:	005b      	lsls	r3, r3, #1
 8013468:	4413      	add	r3, r2
 801346a:	00db      	lsls	r3, r3, #3
 801346c:	440b      	add	r3, r1
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4618      	mov	r0, r3
 8013472:	f7f7 f989 	bl	800a788 <pbuf_free>
      }
      arp_table[i].q = p;
 8013476:	7c7a      	ldrb	r2, [r7, #17]
 8013478:	490d      	ldr	r1, [pc, #52]	; (80134b0 <etharp_query+0x268>)
 801347a:	4613      	mov	r3, r2
 801347c:	005b      	lsls	r3, r3, #1
 801347e:	4413      	add	r3, r2
 8013480:	00db      	lsls	r3, r3, #3
 8013482:	440b      	add	r3, r1
 8013484:	69fa      	ldr	r2, [r7, #28]
 8013486:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013488:	2300      	movs	r3, #0
 801348a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801348e:	e002      	b.n	8013496 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013490:	23ff      	movs	r3, #255	; 0xff
 8013492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013496:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801349a:	4618      	mov	r0, r3
 801349c:	3728      	adds	r7, #40	; 0x28
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	0801b8f4 	.word	0x0801b8f4
 80134a8:	0801baa0 	.word	0x0801baa0
 80134ac:	0801b96c 	.word	0x0801b96c
 80134b0:	20000428 	.word	0x20000428
 80134b4:	0801bab0 	.word	0x0801bab0
 80134b8:	0801ba94 	.word	0x0801ba94
 80134bc:	20000518 	.word	0x20000518
 80134c0:	0801bad8 	.word	0x0801bad8

080134c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08a      	sub	sp, #40	; 0x28
 80134c8:	af02      	add	r7, sp, #8
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80134d2:	2300      	movs	r3, #0
 80134d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <etharp_raw+0x26>
 80134dc:	4b3a      	ldr	r3, [pc, #232]	; (80135c8 <etharp_raw+0x104>)
 80134de:	f240 4257 	movw	r2, #1111	; 0x457
 80134e2:	493a      	ldr	r1, [pc, #232]	; (80135cc <etharp_raw+0x108>)
 80134e4:	483a      	ldr	r0, [pc, #232]	; (80135d0 <etharp_raw+0x10c>)
 80134e6:	f002 f9c9 	bl	801587c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80134ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134ee:	211c      	movs	r1, #28
 80134f0:	200e      	movs	r0, #14
 80134f2:	f7f6 fe65 	bl	800a1c0 <pbuf_alloc>
 80134f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80134fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013502:	e05d      	b.n	80135c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	895b      	ldrh	r3, [r3, #10]
 8013508:	2b1b      	cmp	r3, #27
 801350a:	d806      	bhi.n	801351a <etharp_raw+0x56>
 801350c:	4b2e      	ldr	r3, [pc, #184]	; (80135c8 <etharp_raw+0x104>)
 801350e:	f240 4262 	movw	r2, #1122	; 0x462
 8013512:	4930      	ldr	r1, [pc, #192]	; (80135d4 <etharp_raw+0x110>)
 8013514:	482e      	ldr	r0, [pc, #184]	; (80135d0 <etharp_raw+0x10c>)
 8013516:	f002 f9b1 	bl	801587c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013520:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013522:	4618      	mov	r0, r3
 8013524:	f7f5 fe94 	bl	8009250 <lwip_htons>
 8013528:	4603      	mov	r3, r0
 801352a:	461a      	mov	r2, r3
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013536:	2b06      	cmp	r3, #6
 8013538:	d006      	beq.n	8013548 <etharp_raw+0x84>
 801353a:	4b23      	ldr	r3, [pc, #140]	; (80135c8 <etharp_raw+0x104>)
 801353c:	f240 4269 	movw	r2, #1129	; 0x469
 8013540:	4925      	ldr	r1, [pc, #148]	; (80135d8 <etharp_raw+0x114>)
 8013542:	4823      	ldr	r0, [pc, #140]	; (80135d0 <etharp_raw+0x10c>)
 8013544:	f002 f99a 	bl	801587c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	3308      	adds	r3, #8
 801354c:	2206      	movs	r2, #6
 801354e:	6839      	ldr	r1, [r7, #0]
 8013550:	4618      	mov	r0, r3
 8013552:	f001 fc4f 	bl	8014df4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	3312      	adds	r3, #18
 801355a:	2206      	movs	r2, #6
 801355c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801355e:	4618      	mov	r0, r3
 8013560:	f001 fc48 	bl	8014df4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	330e      	adds	r3, #14
 8013568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801356a:	6812      	ldr	r2, [r2, #0]
 801356c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	3318      	adds	r3, #24
 8013572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013574:	6812      	ldr	r2, [r2, #0]
 8013576:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	2200      	movs	r2, #0
 801357c:	701a      	strb	r2, [r3, #0]
 801357e:	2200      	movs	r2, #0
 8013580:	f042 0201 	orr.w	r2, r2, #1
 8013584:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2200      	movs	r2, #0
 801358a:	f042 0208 	orr.w	r2, r2, #8
 801358e:	709a      	strb	r2, [r3, #2]
 8013590:	2200      	movs	r2, #0
 8013592:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2206      	movs	r2, #6
 8013598:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	2204      	movs	r2, #4
 801359e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80135a0:	f640 0306 	movw	r3, #2054	; 0x806
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	68ba      	ldr	r2, [r7, #8]
 80135aa:	69b9      	ldr	r1, [r7, #24]
 80135ac:	68f8      	ldr	r0, [r7, #12]
 80135ae:	f001 fb93 	bl	8014cd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80135b2:	69b8      	ldr	r0, [r7, #24]
 80135b4:	f7f7 f8e8 	bl	800a788 <pbuf_free>
  p = NULL;
 80135b8:	2300      	movs	r3, #0
 80135ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80135bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3720      	adds	r7, #32
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	0801b8f4 	.word	0x0801b8f4
 80135cc:	0801ba44 	.word	0x0801ba44
 80135d0:	0801b96c 	.word	0x0801b96c
 80135d4:	0801baf4 	.word	0x0801baf4
 80135d8:	0801bb28 	.word	0x0801bb28

080135dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b088      	sub	sp, #32
 80135e0:	af04      	add	r7, sp, #16
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135f8:	2201      	movs	r2, #1
 80135fa:	9203      	str	r2, [sp, #12]
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	9202      	str	r2, [sp, #8]
 8013600:	4a06      	ldr	r2, [pc, #24]	; (801361c <etharp_request_dst+0x40>)
 8013602:	9201      	str	r2, [sp, #4]
 8013604:	9300      	str	r3, [sp, #0]
 8013606:	4603      	mov	r3, r0
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7ff ff5a 	bl	80134c4 <etharp_raw>
 8013610:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	0801c0c8 	.word	0x0801c0c8

08013620 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801362a:	4a05      	ldr	r2, [pc, #20]	; (8013640 <etharp_request+0x20>)
 801362c:	6839      	ldr	r1, [r7, #0]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ff ffd4 	bl	80135dc <etharp_request_dst>
 8013634:	4603      	mov	r3, r0
}
 8013636:	4618      	mov	r0, r3
 8013638:	3708      	adds	r7, #8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	0801c0c0 	.word	0x0801c0c0

08013644 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b08e      	sub	sp, #56	; 0x38
 8013648:	af04      	add	r7, sp, #16
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801364e:	4b79      	ldr	r3, [pc, #484]	; (8013834 <icmp_input+0x1f0>)
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	f003 030f 	and.w	r3, r3, #15
 801365c:	b2db      	uxtb	r3, r3
 801365e:	009b      	lsls	r3, r3, #2
 8013660:	b2db      	uxtb	r3, r3
 8013662:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013666:	2b13      	cmp	r3, #19
 8013668:	f240 80cd 	bls.w	8013806 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	895b      	ldrh	r3, [r3, #10]
 8013670:	2b03      	cmp	r3, #3
 8013672:	f240 80ca 	bls.w	801380a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013680:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013684:	2b00      	cmp	r3, #0
 8013686:	f000 80b7 	beq.w	80137f8 <icmp_input+0x1b4>
 801368a:	2b08      	cmp	r3, #8
 801368c:	f040 80b7 	bne.w	80137fe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013690:	4b69      	ldr	r3, [pc, #420]	; (8013838 <icmp_input+0x1f4>)
 8013692:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013694:	4b67      	ldr	r3, [pc, #412]	; (8013834 <icmp_input+0x1f0>)
 8013696:	695b      	ldr	r3, [r3, #20]
 8013698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801369c:	2be0      	cmp	r3, #224	; 0xe0
 801369e:	f000 80bb 	beq.w	8013818 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80136a2:	4b64      	ldr	r3, [pc, #400]	; (8013834 <icmp_input+0x1f0>)
 80136a4:	695b      	ldr	r3, [r3, #20]
 80136a6:	4a63      	ldr	r2, [pc, #396]	; (8013834 <icmp_input+0x1f0>)
 80136a8:	6812      	ldr	r2, [r2, #0]
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 fc0b 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f040 80b1 	bne.w	801381c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	891b      	ldrh	r3, [r3, #8]
 80136be:	2b07      	cmp	r3, #7
 80136c0:	f240 80a5 	bls.w	801380e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136c6:	330e      	adds	r3, #14
 80136c8:	4619      	mov	r1, r3
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7f6 ffc6 	bl	800a65c <pbuf_add_header>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d04b      	beq.n	801376e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	891a      	ldrh	r2, [r3, #8]
 80136da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136dc:	4413      	add	r3, r2
 80136de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	891b      	ldrh	r3, [r3, #8]
 80136e4:	8b7a      	ldrh	r2, [r7, #26]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	f0c0 809a 	bcc.w	8013820 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80136ec:	8b7b      	ldrh	r3, [r7, #26]
 80136ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136f2:	4619      	mov	r1, r3
 80136f4:	200e      	movs	r0, #14
 80136f6:	f7f6 fd63 	bl	800a1c0 <pbuf_alloc>
 80136fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	f000 8090 	beq.w	8013824 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	895b      	ldrh	r3, [r3, #10]
 8013708:	461a      	mov	r2, r3
 801370a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801370c:	3308      	adds	r3, #8
 801370e:	429a      	cmp	r2, r3
 8013710:	d203      	bcs.n	801371a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013712:	6978      	ldr	r0, [r7, #20]
 8013714:	f7f7 f838 	bl	800a788 <pbuf_free>
          goto icmperr;
 8013718:	e085      	b.n	8013826 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013722:	4618      	mov	r0, r3
 8013724:	f001 fb66 	bl	8014df4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801372a:	4619      	mov	r1, r3
 801372c:	6978      	ldr	r0, [r7, #20]
 801372e:	f7f6 ffa5 	bl	800a67c <pbuf_remove_header>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d009      	beq.n	801374c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013738:	4b40      	ldr	r3, [pc, #256]	; (801383c <icmp_input+0x1f8>)
 801373a:	22b6      	movs	r2, #182	; 0xb6
 801373c:	4940      	ldr	r1, [pc, #256]	; (8013840 <icmp_input+0x1fc>)
 801373e:	4841      	ldr	r0, [pc, #260]	; (8013844 <icmp_input+0x200>)
 8013740:	f002 f89c 	bl	801587c <iprintf>
          pbuf_free(r);
 8013744:	6978      	ldr	r0, [r7, #20]
 8013746:	f7f7 f81f 	bl	800a788 <pbuf_free>
          goto icmperr;
 801374a:	e06c      	b.n	8013826 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801374c:	6879      	ldr	r1, [r7, #4]
 801374e:	6978      	ldr	r0, [r7, #20]
 8013750:	f7f7 f942 	bl	800a9d8 <pbuf_copy>
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d003      	beq.n	8013762 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801375a:	6978      	ldr	r0, [r7, #20]
 801375c:	f7f7 f814 	bl	800a788 <pbuf_free>
          goto icmperr;
 8013760:	e061      	b.n	8013826 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f7f7 f810 	bl	800a788 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	607b      	str	r3, [r7, #4]
 801376c:	e00f      	b.n	801378e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801376e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013770:	330e      	adds	r3, #14
 8013772:	4619      	mov	r1, r3
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7f6 ff81 	bl	800a67c <pbuf_remove_header>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d006      	beq.n	801378e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013780:	4b2e      	ldr	r3, [pc, #184]	; (801383c <icmp_input+0x1f8>)
 8013782:	22c7      	movs	r2, #199	; 0xc7
 8013784:	4930      	ldr	r1, [pc, #192]	; (8013848 <icmp_input+0x204>)
 8013786:	482f      	ldr	r0, [pc, #188]	; (8013844 <icmp_input+0x200>)
 8013788:	f002 f878 	bl	801587c <iprintf>
          goto icmperr;
 801378c:	e04b      	b.n	8013826 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013796:	4619      	mov	r1, r3
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7f6 ff5f 	bl	800a65c <pbuf_add_header>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d12b      	bne.n	80137fc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80137b2:	4b20      	ldr	r3, [pc, #128]	; (8013834 <icmp_input+0x1f0>)
 80137b4:	691a      	ldr	r2, [r3, #16]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	2200      	movs	r2, #0
 80137be:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	2200      	movs	r2, #0
 80137c4:	709a      	strb	r2, [r3, #2]
 80137c6:	2200      	movs	r2, #0
 80137c8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	22ff      	movs	r2, #255	; 0xff
 80137ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	2200      	movs	r2, #0
 80137d4:	729a      	strb	r2, [r3, #10]
 80137d6:	2200      	movs	r2, #0
 80137d8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	9302      	str	r3, [sp, #8]
 80137de:	2301      	movs	r3, #1
 80137e0:	9301      	str	r3, [sp, #4]
 80137e2:	2300      	movs	r3, #0
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	23ff      	movs	r3, #255	; 0xff
 80137e8:	2200      	movs	r2, #0
 80137ea:	69f9      	ldr	r1, [r7, #28]
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f000 fa93 	bl	8013d18 <ip4_output_if>
 80137f2:	4603      	mov	r3, r0
 80137f4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137f6:	e001      	b.n	80137fc <icmp_input+0x1b8>
      break;
 80137f8:	bf00      	nop
 80137fa:	e000      	b.n	80137fe <icmp_input+0x1ba>
      break;
 80137fc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7f6 ffc2 	bl	800a788 <pbuf_free>
  return;
 8013804:	e013      	b.n	801382e <icmp_input+0x1ea>
    goto lenerr;
 8013806:	bf00      	nop
 8013808:	e002      	b.n	8013810 <icmp_input+0x1cc>
    goto lenerr;
 801380a:	bf00      	nop
 801380c:	e000      	b.n	8013810 <icmp_input+0x1cc>
        goto lenerr;
 801380e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7f6 ffb9 	bl	800a788 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013816:	e00a      	b.n	801382e <icmp_input+0x1ea>
        goto icmperr;
 8013818:	bf00      	nop
 801381a:	e004      	b.n	8013826 <icmp_input+0x1e2>
        goto icmperr;
 801381c:	bf00      	nop
 801381e:	e002      	b.n	8013826 <icmp_input+0x1e2>
          goto icmperr;
 8013820:	bf00      	nop
 8013822:	e000      	b.n	8013826 <icmp_input+0x1e2>
          goto icmperr;
 8013824:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7f6 ffae 	bl	800a788 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801382c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801382e:	3728      	adds	r7, #40	; 0x28
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	2000399c 	.word	0x2000399c
 8013838:	200039b0 	.word	0x200039b0
 801383c:	0801bb6c 	.word	0x0801bb6c
 8013840:	0801bba4 	.word	0x0801bba4
 8013844:	0801bbdc 	.word	0x0801bbdc
 8013848:	0801bc04 	.word	0x0801bc04

0801384c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	460b      	mov	r3, r1
 8013856:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013858:	78fb      	ldrb	r3, [r7, #3]
 801385a:	461a      	mov	r2, r3
 801385c:	2103      	movs	r1, #3
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f000 f814 	bl	801388c <icmp_send_response>
}
 8013864:	bf00      	nop
 8013866:	3708      	adds	r7, #8
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	460b      	mov	r3, r1
 8013876:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013878:	78fb      	ldrb	r3, [r7, #3]
 801387a:	461a      	mov	r2, r3
 801387c:	210b      	movs	r1, #11
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f000 f804 	bl	801388c <icmp_send_response>
}
 8013884:	bf00      	nop
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}

0801388c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b08c      	sub	sp, #48	; 0x30
 8013890:	af04      	add	r7, sp, #16
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	460b      	mov	r3, r1
 8013896:	70fb      	strb	r3, [r7, #3]
 8013898:	4613      	mov	r3, r2
 801389a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801389c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138a0:	2124      	movs	r1, #36	; 0x24
 80138a2:	2022      	movs	r0, #34	; 0x22
 80138a4:	f7f6 fc8c 	bl	800a1c0 <pbuf_alloc>
 80138a8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d04c      	beq.n	801394a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	895b      	ldrh	r3, [r3, #10]
 80138b4:	2b23      	cmp	r3, #35	; 0x23
 80138b6:	d806      	bhi.n	80138c6 <icmp_send_response+0x3a>
 80138b8:	4b26      	ldr	r3, [pc, #152]	; (8013954 <icmp_send_response+0xc8>)
 80138ba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80138be:	4926      	ldr	r1, [pc, #152]	; (8013958 <icmp_send_response+0xcc>)
 80138c0:	4826      	ldr	r0, [pc, #152]	; (801395c <icmp_send_response+0xd0>)
 80138c2:	f001 ffdb 	bl	801587c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	78fa      	ldrb	r2, [r7, #3]
 80138d6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	78ba      	ldrb	r2, [r7, #2]
 80138dc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	2200      	movs	r2, #0
 80138e2:	711a      	strb	r2, [r3, #4]
 80138e4:	2200      	movs	r2, #0
 80138e6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	2200      	movs	r2, #0
 80138ec:	719a      	strb	r2, [r3, #6]
 80138ee:	2200      	movs	r2, #0
 80138f0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	f103 0008 	add.w	r0, r3, #8
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	221c      	movs	r2, #28
 8013900:	4619      	mov	r1, r3
 8013902:	f001 fa77 	bl	8014df4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801390c:	f107 030c 	add.w	r3, r7, #12
 8013910:	4618      	mov	r0, r3
 8013912:	f000 f825 	bl	8013960 <ip4_route>
 8013916:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d011      	beq.n	8013942 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	2200      	movs	r2, #0
 8013922:	709a      	strb	r2, [r3, #2]
 8013924:	2200      	movs	r2, #0
 8013926:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013928:	f107 020c 	add.w	r2, r7, #12
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	9302      	str	r3, [sp, #8]
 8013930:	2301      	movs	r3, #1
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	2300      	movs	r3, #0
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	23ff      	movs	r3, #255	; 0xff
 801393a:	2100      	movs	r1, #0
 801393c:	69f8      	ldr	r0, [r7, #28]
 801393e:	f000 f9eb 	bl	8013d18 <ip4_output_if>
  }
  pbuf_free(q);
 8013942:	69f8      	ldr	r0, [r7, #28]
 8013944:	f7f6 ff20 	bl	800a788 <pbuf_free>
 8013948:	e000      	b.n	801394c <icmp_send_response+0xc0>
    return;
 801394a:	bf00      	nop
}
 801394c:	3720      	adds	r7, #32
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
 8013952:	bf00      	nop
 8013954:	0801bb6c 	.word	0x0801bb6c
 8013958:	0801bc38 	.word	0x0801bc38
 801395c:	0801bbdc 	.word	0x0801bbdc

08013960 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013960:	b480      	push	{r7}
 8013962:	b085      	sub	sp, #20
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013968:	4b33      	ldr	r3, [pc, #204]	; (8013a38 <ip4_route+0xd8>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	60fb      	str	r3, [r7, #12]
 801396e:	e036      	b.n	80139de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013976:	f003 0301 	and.w	r3, r3, #1
 801397a:	b2db      	uxtb	r3, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	d02b      	beq.n	80139d8 <ip4_route+0x78>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013986:	089b      	lsrs	r3, r3, #2
 8013988:	f003 0301 	and.w	r3, r3, #1
 801398c:	b2db      	uxtb	r3, r3
 801398e:	2b00      	cmp	r3, #0
 8013990:	d022      	beq.n	80139d8 <ip4_route+0x78>
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	3304      	adds	r3, #4
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d01d      	beq.n	80139d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	3304      	adds	r3, #4
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	405a      	eors	r2, r3
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	3308      	adds	r3, #8
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4013      	ands	r3, r2
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d101      	bne.n	80139b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	e038      	b.n	8013a2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139be:	f003 0302 	and.w	r3, r3, #2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d108      	bne.n	80139d8 <ip4_route+0x78>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	330c      	adds	r3, #12
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d101      	bne.n	80139d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	e028      	b.n	8013a2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	60fb      	str	r3, [r7, #12]
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d1c5      	bne.n	8013970 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139e4:	4b15      	ldr	r3, [pc, #84]	; (8013a3c <ip4_route+0xdc>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d01a      	beq.n	8013a22 <ip4_route+0xc2>
 80139ec:	4b13      	ldr	r3, [pc, #76]	; (8013a3c <ip4_route+0xdc>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139f4:	f003 0301 	and.w	r3, r3, #1
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d012      	beq.n	8013a22 <ip4_route+0xc2>
 80139fc:	4b0f      	ldr	r3, [pc, #60]	; (8013a3c <ip4_route+0xdc>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a04:	f003 0304 	and.w	r3, r3, #4
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d00a      	beq.n	8013a22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a0c:	4b0b      	ldr	r3, [pc, #44]	; (8013a3c <ip4_route+0xdc>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	3304      	adds	r3, #4
 8013a12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d004      	beq.n	8013a22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8013a20:	d101      	bne.n	8013a26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	e001      	b.n	8013a2a <ip4_route+0xca>
  }

  return netif_default;
 8013a26:	4b05      	ldr	r3, [pc, #20]	; (8013a3c <ip4_route+0xdc>)
 8013a28:	681b      	ldr	r3, [r3, #0]
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3714      	adds	r7, #20
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	20006ab0 	.word	0x20006ab0
 8013a3c:	20006ab4 	.word	0x20006ab4

08013a40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a4e:	f003 0301 	and.w	r3, r3, #1
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d016      	beq.n	8013a86 <ip4_input_accept+0x46>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d011      	beq.n	8013a86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a62:	4b0b      	ldr	r3, [pc, #44]	; (8013a90 <ip4_input_accept+0x50>)
 8013a64:	695a      	ldr	r2, [r3, #20]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	3304      	adds	r3, #4
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d008      	beq.n	8013a82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a70:	4b07      	ldr	r3, [pc, #28]	; (8013a90 <ip4_input_accept+0x50>)
 8013a72:	695b      	ldr	r3, [r3, #20]
 8013a74:	6879      	ldr	r1, [r7, #4]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 fa26 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8013a7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a82:	2301      	movs	r3, #1
 8013a84:	e000      	b.n	8013a88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	2000399c 	.word	0x2000399c

08013a94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b088      	sub	sp, #32
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	091b      	lsrs	r3, r3, #4
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	2b04      	cmp	r3, #4
 8013ab2:	d004      	beq.n	8013abe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f7f6 fe67 	bl	800a788 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013aba:	2300      	movs	r3, #0
 8013abc:	e123      	b.n	8013d06 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	f003 030f 	and.w	r3, r3, #15
 8013ac6:	b2db      	uxtb	r3, r3
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	885b      	ldrh	r3, [r3, #2]
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f5 fbbb 	bl	8009250 <lwip_htons>
 8013ada:	4603      	mov	r3, r0
 8013adc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	891b      	ldrh	r3, [r3, #8]
 8013ae2:	8a3a      	ldrh	r2, [r7, #16]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d204      	bcs.n	8013af2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013ae8:	8a3b      	ldrh	r3, [r7, #16]
 8013aea:	4619      	mov	r1, r3
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7f6 fcc5 	bl	800a47c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	895b      	ldrh	r3, [r3, #10]
 8013af6:	8a7a      	ldrh	r2, [r7, #18]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d807      	bhi.n	8013b0c <ip4_input+0x78>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	891b      	ldrh	r3, [r3, #8]
 8013b00:	8a3a      	ldrh	r2, [r7, #16]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d802      	bhi.n	8013b0c <ip4_input+0x78>
 8013b06:	8a7b      	ldrh	r3, [r7, #18]
 8013b08:	2b13      	cmp	r3, #19
 8013b0a:	d804      	bhi.n	8013b16 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7f6 fe3b 	bl	800a788 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	e0f7      	b.n	8013d06 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	691b      	ldr	r3, [r3, #16]
 8013b1a:	4a7d      	ldr	r2, [pc, #500]	; (8013d10 <ip4_input+0x27c>)
 8013b1c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	4a7b      	ldr	r2, [pc, #492]	; (8013d10 <ip4_input+0x27c>)
 8013b24:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b26:	4b7a      	ldr	r3, [pc, #488]	; (8013d10 <ip4_input+0x27c>)
 8013b28:	695b      	ldr	r3, [r3, #20]
 8013b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b2e:	2be0      	cmp	r3, #224	; 0xe0
 8013b30:	d112      	bne.n	8013b58 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b38:	f003 0301 	and.w	r3, r3, #1
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d007      	beq.n	8013b52 <ip4_input+0xbe>
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	3304      	adds	r3, #4
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <ip4_input+0xbe>
      netif = inp;
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	61bb      	str	r3, [r7, #24]
 8013b50:	e02a      	b.n	8013ba8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b52:	2300      	movs	r3, #0
 8013b54:	61bb      	str	r3, [r7, #24]
 8013b56:	e027      	b.n	8013ba8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b58:	6838      	ldr	r0, [r7, #0]
 8013b5a:	f7ff ff71 	bl	8013a40 <ip4_input_accept>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d002      	beq.n	8013b6a <ip4_input+0xd6>
      netif = inp;
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	61bb      	str	r3, [r7, #24]
 8013b68:	e01e      	b.n	8013ba8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b6e:	4b68      	ldr	r3, [pc, #416]	; (8013d10 <ip4_input+0x27c>)
 8013b70:	695b      	ldr	r3, [r3, #20]
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	2b7f      	cmp	r3, #127	; 0x7f
 8013b76:	d017      	beq.n	8013ba8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b78:	4b66      	ldr	r3, [pc, #408]	; (8013d14 <ip4_input+0x280>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	61bb      	str	r3, [r7, #24]
 8013b7e:	e00e      	b.n	8013b9e <ip4_input+0x10a>
          if (netif == inp) {
 8013b80:	69ba      	ldr	r2, [r7, #24]
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d006      	beq.n	8013b96 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b88:	69b8      	ldr	r0, [r7, #24]
 8013b8a:	f7ff ff59 	bl	8013a40 <ip4_input_accept>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d108      	bne.n	8013ba6 <ip4_input+0x112>
 8013b94:	e000      	b.n	8013b98 <ip4_input+0x104>
            continue;
 8013b96:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	61bb      	str	r3, [r7, #24]
 8013b9e:	69bb      	ldr	r3, [r7, #24]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d1ed      	bne.n	8013b80 <ip4_input+0xec>
 8013ba4:	e000      	b.n	8013ba8 <ip4_input+0x114>
            break;
 8013ba6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d111      	bne.n	8013bd2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	7a5b      	ldrb	r3, [r3, #9]
 8013bb2:	2b11      	cmp	r3, #17
 8013bb4:	d10d      	bne.n	8013bd2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013bb6:	8a7b      	ldrh	r3, [r7, #18]
 8013bb8:	69fa      	ldr	r2, [r7, #28]
 8013bba:	4413      	add	r3, r2
 8013bbc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	885b      	ldrh	r3, [r3, #2]
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013bc8:	d103      	bne.n	8013bd2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d017      	beq.n	8013c08 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013bd8:	4b4d      	ldr	r3, [pc, #308]	; (8013d10 <ip4_input+0x27c>)
 8013bda:	691b      	ldr	r3, [r3, #16]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d013      	beq.n	8013c08 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013be0:	4b4b      	ldr	r3, [pc, #300]	; (8013d10 <ip4_input+0x27c>)
 8013be2:	691b      	ldr	r3, [r3, #16]
 8013be4:	6839      	ldr	r1, [r7, #0]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 f96e 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d105      	bne.n	8013bfe <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013bf2:	4b47      	ldr	r3, [pc, #284]	; (8013d10 <ip4_input+0x27c>)
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013bfa:	2be0      	cmp	r3, #224	; 0xe0
 8013bfc:	d104      	bne.n	8013c08 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7f6 fdc2 	bl	800a788 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c04:	2300      	movs	r3, #0
 8013c06:	e07e      	b.n	8013d06 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d104      	bne.n	8013c18 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f7f6 fdba 	bl	800a788 <pbuf_free>
    return ERR_OK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	e076      	b.n	8013d06 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	88db      	ldrh	r3, [r3, #6]
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	461a      	mov	r2, r3
 8013c20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013c24:	4013      	ands	r3, r2
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00b      	beq.n	8013c42 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 fc92 	bl	8014554 <ip4_reass>
 8013c30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d101      	bne.n	8013c3c <ip4_input+0x1a8>
      return ERR_OK;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	e064      	b.n	8013d06 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013c42:	4a33      	ldr	r2, [pc, #204]	; (8013d10 <ip4_input+0x27c>)
 8013c44:	69bb      	ldr	r3, [r7, #24]
 8013c46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013c48:	4a31      	ldr	r2, [pc, #196]	; (8013d10 <ip4_input+0x27c>)
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013c4e:	4a30      	ldr	r2, [pc, #192]	; (8013d10 <ip4_input+0x27c>)
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	f003 030f 	and.w	r3, r3, #15
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	4b2a      	ldr	r3, [pc, #168]	; (8013d10 <ip4_input+0x27c>)
 8013c66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c68:	8a7b      	ldrh	r3, [r7, #18]
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7f6 fd05 	bl	800a67c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	7a5b      	ldrb	r3, [r3, #9]
 8013c76:	2b11      	cmp	r3, #17
 8013c78:	d006      	beq.n	8013c88 <ip4_input+0x1f4>
 8013c7a:	2b11      	cmp	r3, #17
 8013c7c:	dc13      	bgt.n	8013ca6 <ip4_input+0x212>
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d00c      	beq.n	8013c9c <ip4_input+0x208>
 8013c82:	2b06      	cmp	r3, #6
 8013c84:	d005      	beq.n	8013c92 <ip4_input+0x1fe>
 8013c86:	e00e      	b.n	8013ca6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7fc fb26 	bl	80102dc <udp_input>
        break;
 8013c90:	e026      	b.n	8013ce0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c92:	6839      	ldr	r1, [r7, #0]
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7f8 fbaf 	bl	800c3f8 <tcp_input>
        break;
 8013c9a:	e021      	b.n	8013ce0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c9c:	6839      	ldr	r1, [r7, #0]
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f7ff fcd0 	bl	8013644 <icmp_input>
        break;
 8013ca4:	e01c      	b.n	8013ce0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ca6:	4b1a      	ldr	r3, [pc, #104]	; (8013d10 <ip4_input+0x27c>)
 8013ca8:	695b      	ldr	r3, [r3, #20]
 8013caa:	69b9      	ldr	r1, [r7, #24]
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 f90b 	bl	8013ec8 <ip4_addr_isbroadcast_u32>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d10f      	bne.n	8013cd8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013cb8:	4b15      	ldr	r3, [pc, #84]	; (8013d10 <ip4_input+0x27c>)
 8013cba:	695b      	ldr	r3, [r3, #20]
 8013cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013cc0:	2be0      	cmp	r3, #224	; 0xe0
 8013cc2:	d009      	beq.n	8013cd8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013cc8:	4619      	mov	r1, r3
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7f6 fd49 	bl	800a762 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013cd0:	2102      	movs	r1, #2
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7ff fdba 	bl	801384c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7f6 fd55 	bl	800a788 <pbuf_free>
        break;
 8013cde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013ce0:	4b0b      	ldr	r3, [pc, #44]	; (8013d10 <ip4_input+0x27c>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013ce6:	4b0a      	ldr	r3, [pc, #40]	; (8013d10 <ip4_input+0x27c>)
 8013ce8:	2200      	movs	r2, #0
 8013cea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013cec:	4b08      	ldr	r3, [pc, #32]	; (8013d10 <ip4_input+0x27c>)
 8013cee:	2200      	movs	r2, #0
 8013cf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013cf2:	4b07      	ldr	r3, [pc, #28]	; (8013d10 <ip4_input+0x27c>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013cf8:	4b05      	ldr	r3, [pc, #20]	; (8013d10 <ip4_input+0x27c>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013cfe:	4b04      	ldr	r3, [pc, #16]	; (8013d10 <ip4_input+0x27c>)
 8013d00:	2200      	movs	r2, #0
 8013d02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3720      	adds	r7, #32
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	2000399c 	.word	0x2000399c
 8013d14:	20006ab0 	.word	0x20006ab0

08013d18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b08a      	sub	sp, #40	; 0x28
 8013d1c:	af04      	add	r7, sp, #16
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d009      	beq.n	8013d44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d003      	beq.n	8013d3e <ip4_output_if+0x26>
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d102      	bne.n	8013d44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	3304      	adds	r3, #4
 8013d42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013d44:	78fa      	ldrb	r2, [r7, #3]
 8013d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d48:	9302      	str	r3, [sp, #8]
 8013d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4613      	mov	r3, r2
 8013d58:	687a      	ldr	r2, [r7, #4]
 8013d5a:	6979      	ldr	r1, [r7, #20]
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f000 f805 	bl	8013d6c <ip4_output_if_src>
 8013d62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3718      	adds	r7, #24
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b088      	sub	sp, #32
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	7b9b      	ldrb	r3, [r3, #14]
 8013d7e:	2b01      	cmp	r3, #1
 8013d80:	d006      	beq.n	8013d90 <ip4_output_if_src+0x24>
 8013d82:	4b4b      	ldr	r3, [pc, #300]	; (8013eb0 <ip4_output_if_src+0x144>)
 8013d84:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013d88:	494a      	ldr	r1, [pc, #296]	; (8013eb4 <ip4_output_if_src+0x148>)
 8013d8a:	484b      	ldr	r0, [pc, #300]	; (8013eb8 <ip4_output_if_src+0x14c>)
 8013d8c:	f001 fd76 	bl	801587c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d060      	beq.n	8013e58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d96:	2314      	movs	r3, #20
 8013d98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d9a:	2114      	movs	r1, #20
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f7f6 fc5d 	bl	800a65c <pbuf_add_header>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d002      	beq.n	8013dae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013da8:	f06f 0301 	mvn.w	r3, #1
 8013dac:	e07c      	b.n	8013ea8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	895b      	ldrh	r3, [r3, #10]
 8013db8:	2b13      	cmp	r3, #19
 8013dba:	d806      	bhi.n	8013dca <ip4_output_if_src+0x5e>
 8013dbc:	4b3c      	ldr	r3, [pc, #240]	; (8013eb0 <ip4_output_if_src+0x144>)
 8013dbe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013dc2:	493e      	ldr	r1, [pc, #248]	; (8013ebc <ip4_output_if_src+0x150>)
 8013dc4:	483c      	ldr	r0, [pc, #240]	; (8013eb8 <ip4_output_if_src+0x14c>)
 8013dc6:	f001 fd59 	bl	801587c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	78fa      	ldrb	r2, [r7, #3]
 8013dce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013dd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	69fb      	ldr	r3, [r7, #28]
 8013dde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013de0:	8b7b      	ldrh	r3, [r7, #26]
 8013de2:	089b      	lsrs	r3, r3, #2
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013df2:	69fb      	ldr	r3, [r7, #28]
 8013df4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013df8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	891b      	ldrh	r3, [r3, #8]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f5 fa26 	bl	8009250 <lwip_htons>
 8013e04:	4603      	mov	r3, r0
 8013e06:	461a      	mov	r2, r3
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	719a      	strb	r2, [r3, #6]
 8013e12:	2200      	movs	r2, #0
 8013e14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013e16:	4b2a      	ldr	r3, [pc, #168]	; (8013ec0 <ip4_output_if_src+0x154>)
 8013e18:	881b      	ldrh	r3, [r3, #0]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7f5 fa18 	bl	8009250 <lwip_htons>
 8013e20:	4603      	mov	r3, r0
 8013e22:	461a      	mov	r2, r3
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013e28:	4b25      	ldr	r3, [pc, #148]	; (8013ec0 <ip4_output_if_src+0x154>)
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	b29a      	uxth	r2, r3
 8013e30:	4b23      	ldr	r3, [pc, #140]	; (8013ec0 <ip4_output_if_src+0x154>)
 8013e32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d104      	bne.n	8013e44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013e3a:	4b22      	ldr	r3, [pc, #136]	; (8013ec4 <ip4_output_if_src+0x158>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	60da      	str	r2, [r3, #12]
 8013e42:	e003      	b.n	8013e4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	729a      	strb	r2, [r3, #10]
 8013e52:	2200      	movs	r2, #0
 8013e54:	72da      	strb	r2, [r3, #11]
 8013e56:	e00f      	b.n	8013e78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	895b      	ldrh	r3, [r3, #10]
 8013e5c:	2b13      	cmp	r3, #19
 8013e5e:	d802      	bhi.n	8013e66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e60:	f06f 0301 	mvn.w	r3, #1
 8013e64:	e020      	b.n	8013ea8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e72:	f107 0314 	add.w	r3, r7, #20
 8013e76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00c      	beq.n	8013e9a <ip4_output_if_src+0x12e>
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	891a      	ldrh	r2, [r3, #8]
 8013e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d906      	bls.n	8013e9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	f000 fd4d 	bl	8014930 <ip4_frag>
 8013e96:	4603      	mov	r3, r0
 8013e98:	e006      	b.n	8013ea8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	695b      	ldr	r3, [r3, #20]
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	68f9      	ldr	r1, [r7, #12]
 8013ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ea4:	4798      	blx	r3
 8013ea6:	4603      	mov	r3, r0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3720      	adds	r7, #32
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	0801bc64 	.word	0x0801bc64
 8013eb4:	0801bc98 	.word	0x0801bc98
 8013eb8:	0801bca4 	.word	0x0801bca4
 8013ebc:	0801bccc 	.word	0x0801bccc
 8013ec0:	2000051a 	.word	0x2000051a
 8013ec4:	0801c0b8 	.word	0x0801c0b8

08013ec8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b085      	sub	sp, #20
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013edc:	d002      	beq.n	8013ee4 <ip4_addr_isbroadcast_u32+0x1c>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d101      	bne.n	8013ee8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	e02a      	b.n	8013f3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013eee:	f003 0302 	and.w	r3, r3, #2
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d101      	bne.n	8013efa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	e021      	b.n	8013f3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	3304      	adds	r3, #4
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	687a      	ldr	r2, [r7, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d101      	bne.n	8013f0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	e019      	b.n	8013f3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	3304      	adds	r3, #4
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	405a      	eors	r2, r3
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	3308      	adds	r3, #8
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d10d      	bne.n	8013f3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	3308      	adds	r3, #8
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	43da      	mvns	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	3308      	adds	r3, #8
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d101      	bne.n	8013f3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e000      	b.n	8013f3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013f3c:	2300      	movs	r3, #0
  }
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
	...

08013f4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013f52:	2300      	movs	r3, #0
 8013f54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013f56:	4b12      	ldr	r3, [pc, #72]	; (8013fa0 <ip_reass_tmr+0x54>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013f5c:	e018      	b.n	8013f90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	7fdb      	ldrb	r3, [r3, #31]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d00b      	beq.n	8013f7e <ip_reass_tmr+0x32>
      r->timer--;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	7fdb      	ldrb	r3, [r3, #31]
 8013f6a:	3b01      	subs	r3, #1
 8013f6c:	b2da      	uxtb	r2, r3
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	60fb      	str	r3, [r7, #12]
 8013f7c:	e008      	b.n	8013f90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f88:	68b9      	ldr	r1, [r7, #8]
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 f80a 	bl	8013fa4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d1e3      	bne.n	8013f5e <ip_reass_tmr+0x12>
    }
  }
}
 8013f96:	bf00      	nop
 8013f98:	bf00      	nop
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	2000051c 	.word	0x2000051c

08013fa4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b088      	sub	sp, #32
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013fb2:	683a      	ldr	r2, [r7, #0]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d105      	bne.n	8013fc6 <ip_reass_free_complete_datagram+0x22>
 8013fba:	4b45      	ldr	r3, [pc, #276]	; (80140d0 <ip_reass_free_complete_datagram+0x12c>)
 8013fbc:	22ab      	movs	r2, #171	; 0xab
 8013fbe:	4945      	ldr	r1, [pc, #276]	; (80140d4 <ip_reass_free_complete_datagram+0x130>)
 8013fc0:	4845      	ldr	r0, [pc, #276]	; (80140d8 <ip_reass_free_complete_datagram+0x134>)
 8013fc2:	f001 fc5b 	bl	801587c <iprintf>
  if (prev != NULL) {
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00a      	beq.n	8013fe2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d005      	beq.n	8013fe2 <ip_reass_free_complete_datagram+0x3e>
 8013fd6:	4b3e      	ldr	r3, [pc, #248]	; (80140d0 <ip_reass_free_complete_datagram+0x12c>)
 8013fd8:	22ad      	movs	r2, #173	; 0xad
 8013fda:	4940      	ldr	r1, [pc, #256]	; (80140dc <ip_reass_free_complete_datagram+0x138>)
 8013fdc:	483e      	ldr	r0, [pc, #248]	; (80140d8 <ip_reass_free_complete_datagram+0x134>)
 8013fde:	f001 fc4d 	bl	801587c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	889b      	ldrh	r3, [r3, #4]
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d12a      	bne.n	801404a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	6858      	ldr	r0, [r3, #4]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	3308      	adds	r3, #8
 801400a:	2214      	movs	r2, #20
 801400c:	4619      	mov	r1, r3
 801400e:	f000 fef1 	bl	8014df4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014012:	2101      	movs	r1, #1
 8014014:	69b8      	ldr	r0, [r7, #24]
 8014016:	f7ff fc29 	bl	801386c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801401a:	69b8      	ldr	r0, [r7, #24]
 801401c:	f7f6 fc3c 	bl	800a898 <pbuf_clen>
 8014020:	4603      	mov	r3, r0
 8014022:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014024:	8bfa      	ldrh	r2, [r7, #30]
 8014026:	8a7b      	ldrh	r3, [r7, #18]
 8014028:	4413      	add	r3, r2
 801402a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801402e:	db05      	blt.n	801403c <ip_reass_free_complete_datagram+0x98>
 8014030:	4b27      	ldr	r3, [pc, #156]	; (80140d0 <ip_reass_free_complete_datagram+0x12c>)
 8014032:	22bc      	movs	r2, #188	; 0xbc
 8014034:	492a      	ldr	r1, [pc, #168]	; (80140e0 <ip_reass_free_complete_datagram+0x13c>)
 8014036:	4828      	ldr	r0, [pc, #160]	; (80140d8 <ip_reass_free_complete_datagram+0x134>)
 8014038:	f001 fc20 	bl	801587c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801403c:	8bfa      	ldrh	r2, [r7, #30]
 801403e:	8a7b      	ldrh	r3, [r7, #18]
 8014040:	4413      	add	r3, r2
 8014042:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014044:	69b8      	ldr	r0, [r7, #24]
 8014046:	f7f6 fb9f 	bl	800a788 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014050:	e01f      	b.n	8014092 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014062:	68f8      	ldr	r0, [r7, #12]
 8014064:	f7f6 fc18 	bl	800a898 <pbuf_clen>
 8014068:	4603      	mov	r3, r0
 801406a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801406c:	8bfa      	ldrh	r2, [r7, #30]
 801406e:	8a7b      	ldrh	r3, [r7, #18]
 8014070:	4413      	add	r3, r2
 8014072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014076:	db05      	blt.n	8014084 <ip_reass_free_complete_datagram+0xe0>
 8014078:	4b15      	ldr	r3, [pc, #84]	; (80140d0 <ip_reass_free_complete_datagram+0x12c>)
 801407a:	22cc      	movs	r2, #204	; 0xcc
 801407c:	4918      	ldr	r1, [pc, #96]	; (80140e0 <ip_reass_free_complete_datagram+0x13c>)
 801407e:	4816      	ldr	r0, [pc, #88]	; (80140d8 <ip_reass_free_complete_datagram+0x134>)
 8014080:	f001 fbfc 	bl	801587c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014084:	8bfa      	ldrh	r2, [r7, #30]
 8014086:	8a7b      	ldrh	r3, [r7, #18]
 8014088:	4413      	add	r3, r2
 801408a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f7f6 fb7b 	bl	800a788 <pbuf_free>
  while (p != NULL) {
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1dc      	bne.n	8014052 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014098:	6839      	ldr	r1, [r7, #0]
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f000 f8c2 	bl	8014224 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80140a0:	4b10      	ldr	r3, [pc, #64]	; (80140e4 <ip_reass_free_complete_datagram+0x140>)
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	8bfa      	ldrh	r2, [r7, #30]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d905      	bls.n	80140b6 <ip_reass_free_complete_datagram+0x112>
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <ip_reass_free_complete_datagram+0x12c>)
 80140ac:	22d2      	movs	r2, #210	; 0xd2
 80140ae:	490e      	ldr	r1, [pc, #56]	; (80140e8 <ip_reass_free_complete_datagram+0x144>)
 80140b0:	4809      	ldr	r0, [pc, #36]	; (80140d8 <ip_reass_free_complete_datagram+0x134>)
 80140b2:	f001 fbe3 	bl	801587c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80140b6:	4b0b      	ldr	r3, [pc, #44]	; (80140e4 <ip_reass_free_complete_datagram+0x140>)
 80140b8:	881a      	ldrh	r2, [r3, #0]
 80140ba:	8bfb      	ldrh	r3, [r7, #30]
 80140bc:	1ad3      	subs	r3, r2, r3
 80140be:	b29a      	uxth	r2, r3
 80140c0:	4b08      	ldr	r3, [pc, #32]	; (80140e4 <ip_reass_free_complete_datagram+0x140>)
 80140c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80140c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3720      	adds	r7, #32
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}
 80140ce:	bf00      	nop
 80140d0:	0801bcfc 	.word	0x0801bcfc
 80140d4:	0801bd38 	.word	0x0801bd38
 80140d8:	0801bd44 	.word	0x0801bd44
 80140dc:	0801bd6c 	.word	0x0801bd6c
 80140e0:	0801bd80 	.word	0x0801bd80
 80140e4:	20000520 	.word	0x20000520
 80140e8:	0801bda0 	.word	0x0801bda0

080140ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08a      	sub	sp, #40	; 0x28
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80140f6:	2300      	movs	r3, #0
 80140f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80140fa:	2300      	movs	r3, #0
 80140fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80140fe:	2300      	movs	r3, #0
 8014100:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014102:	2300      	movs	r3, #0
 8014104:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014106:	2300      	movs	r3, #0
 8014108:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801410a:	4b28      	ldr	r3, [pc, #160]	; (80141ac <ip_reass_remove_oldest_datagram+0xc0>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014110:	e030      	b.n	8014174 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014114:	695a      	ldr	r2, [r3, #20]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	429a      	cmp	r2, r3
 801411c:	d10c      	bne.n	8014138 <ip_reass_remove_oldest_datagram+0x4c>
 801411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014120:	699a      	ldr	r2, [r3, #24]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	429a      	cmp	r2, r3
 8014128:	d106      	bne.n	8014138 <ip_reass_remove_oldest_datagram+0x4c>
 801412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412c:	899a      	ldrh	r2, [r3, #12]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	889b      	ldrh	r3, [r3, #4]
 8014132:	b29b      	uxth	r3, r3
 8014134:	429a      	cmp	r2, r3
 8014136:	d014      	beq.n	8014162 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	3301      	adds	r3, #1
 801413c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d104      	bne.n	801414e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014146:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	61bb      	str	r3, [r7, #24]
 801414c:	e009      	b.n	8014162 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	7fda      	ldrb	r2, [r3, #31]
 8014152:	6a3b      	ldr	r3, [r7, #32]
 8014154:	7fdb      	ldrb	r3, [r3, #31]
 8014156:	429a      	cmp	r2, r3
 8014158:	d803      	bhi.n	8014162 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014176:	2b00      	cmp	r3, #0
 8014178:	d1cb      	bne.n	8014112 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801417a:	6a3b      	ldr	r3, [r7, #32]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d008      	beq.n	8014192 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014180:	69b9      	ldr	r1, [r7, #24]
 8014182:	6a38      	ldr	r0, [r7, #32]
 8014184:	f7ff ff0e 	bl	8013fa4 <ip_reass_free_complete_datagram>
 8014188:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801418a:	697a      	ldr	r2, [r7, #20]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	4413      	add	r3, r2
 8014190:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014192:	697a      	ldr	r2, [r7, #20]
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	da02      	bge.n	80141a0 <ip_reass_remove_oldest_datagram+0xb4>
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	2b01      	cmp	r3, #1
 801419e:	dcac      	bgt.n	80140fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80141a0:	697b      	ldr	r3, [r7, #20]
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3728      	adds	r7, #40	; 0x28
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	2000051c 	.word	0x2000051c

080141b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80141ba:	2004      	movs	r0, #4
 80141bc:	f7f5 fc9e 	bl	8009afc <memp_malloc>
 80141c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d110      	bne.n	80141ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f7ff ff8e 	bl	80140ec <ip_reass_remove_oldest_datagram>
 80141d0:	4602      	mov	r2, r0
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	4293      	cmp	r3, r2
 80141d6:	dc03      	bgt.n	80141e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80141d8:	2004      	movs	r0, #4
 80141da:	f7f5 fc8f 	bl	8009afc <memp_malloc>
 80141de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d101      	bne.n	80141ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80141e6:	2300      	movs	r3, #0
 80141e8:	e016      	b.n	8014218 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80141ea:	2220      	movs	r2, #32
 80141ec:	2100      	movs	r1, #0
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f000 fe28 	bl	8014e44 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	220f      	movs	r2, #15
 80141f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80141fa:	4b09      	ldr	r3, [pc, #36]	; (8014220 <ip_reass_enqueue_new_datagram+0x70>)
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014202:	4a07      	ldr	r2, [pc, #28]	; (8014220 <ip_reass_enqueue_new_datagram+0x70>)
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	3308      	adds	r3, #8
 801420c:	2214      	movs	r2, #20
 801420e:	6879      	ldr	r1, [r7, #4]
 8014210:	4618      	mov	r0, r3
 8014212:	f000 fdef 	bl	8014df4 <memcpy>
  return ipr;
 8014216:	68fb      	ldr	r3, [r7, #12]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	2000051c 	.word	0x2000051c

08014224 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801422e:	4b10      	ldr	r3, [pc, #64]	; (8014270 <ip_reass_dequeue_datagram+0x4c>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	429a      	cmp	r2, r3
 8014236:	d104      	bne.n	8014242 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a0c      	ldr	r2, [pc, #48]	; (8014270 <ip_reass_dequeue_datagram+0x4c>)
 801423e:	6013      	str	r3, [r2, #0]
 8014240:	e00d      	b.n	801425e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d106      	bne.n	8014256 <ip_reass_dequeue_datagram+0x32>
 8014248:	4b0a      	ldr	r3, [pc, #40]	; (8014274 <ip_reass_dequeue_datagram+0x50>)
 801424a:	f240 1245 	movw	r2, #325	; 0x145
 801424e:	490a      	ldr	r1, [pc, #40]	; (8014278 <ip_reass_dequeue_datagram+0x54>)
 8014250:	480a      	ldr	r0, [pc, #40]	; (801427c <ip_reass_dequeue_datagram+0x58>)
 8014252:	f001 fb13 	bl	801587c <iprintf>
    prev->next = ipr->next;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801425e:	6879      	ldr	r1, [r7, #4]
 8014260:	2004      	movs	r0, #4
 8014262:	f7f5 fc97 	bl	8009b94 <memp_free>
}
 8014266:	bf00      	nop
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	2000051c 	.word	0x2000051c
 8014274:	0801bcfc 	.word	0x0801bcfc
 8014278:	0801bdc4 	.word	0x0801bdc4
 801427c:	0801bd44 	.word	0x0801bd44

08014280 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b08c      	sub	sp, #48	; 0x30
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801428c:	2300      	movs	r3, #0
 801428e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014290:	2301      	movs	r3, #1
 8014292:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	885b      	ldrh	r3, [r3, #2]
 801429e:	b29b      	uxth	r3, r3
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f4 ffd5 	bl	8009250 <lwip_htons>
 80142a6:	4603      	mov	r3, r0
 80142a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	f003 030f 	and.w	r3, r3, #15
 80142b2:	b2db      	uxtb	r3, r3
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80142b8:	7e7b      	ldrb	r3, [r7, #25]
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	8b7a      	ldrh	r2, [r7, #26]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d202      	bcs.n	80142c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142c2:	f04f 33ff 	mov.w	r3, #4294967295
 80142c6:	e135      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80142c8:	7e7b      	ldrb	r3, [r7, #25]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	8b7a      	ldrh	r2, [r7, #26]
 80142ce:	1ad3      	subs	r3, r2, r3
 80142d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	88db      	ldrh	r3, [r3, #6]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4618      	mov	r0, r3
 80142da:	f7f4 ffb9 	bl	8009250 <lwip_htons>
 80142de:	4603      	mov	r3, r0
 80142e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	00db      	lsls	r3, r3, #3
 80142e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80142f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f2:	2200      	movs	r2, #0
 80142f4:	701a      	strb	r2, [r3, #0]
 80142f6:	2200      	movs	r2, #0
 80142f8:	705a      	strb	r2, [r3, #1]
 80142fa:	2200      	movs	r2, #0
 80142fc:	709a      	strb	r2, [r3, #2]
 80142fe:	2200      	movs	r2, #0
 8014300:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014304:	8afa      	ldrh	r2, [r7, #22]
 8014306:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014308:	8afa      	ldrh	r2, [r7, #22]
 801430a:	8b7b      	ldrh	r3, [r7, #26]
 801430c:	4413      	add	r3, r2
 801430e:	b29a      	uxth	r2, r3
 8014310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014312:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014316:	88db      	ldrh	r3, [r3, #6]
 8014318:	b29b      	uxth	r3, r3
 801431a:	8afa      	ldrh	r2, [r7, #22]
 801431c:	429a      	cmp	r2, r3
 801431e:	d902      	bls.n	8014326 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014320:	f04f 33ff 	mov.w	r3, #4294967295
 8014324:	e106      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	627b      	str	r3, [r7, #36]	; 0x24
 801432c:	e068      	b.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014336:	889b      	ldrh	r3, [r3, #4]
 8014338:	b29a      	uxth	r2, r3
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	889b      	ldrh	r3, [r3, #4]
 801433e:	b29b      	uxth	r3, r3
 8014340:	429a      	cmp	r2, r3
 8014342:	d235      	bcs.n	80143b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014348:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434c:	2b00      	cmp	r3, #0
 801434e:	d020      	beq.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014352:	889b      	ldrh	r3, [r3, #4]
 8014354:	b29a      	uxth	r2, r3
 8014356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014358:	88db      	ldrh	r3, [r3, #6]
 801435a:	b29b      	uxth	r3, r3
 801435c:	429a      	cmp	r2, r3
 801435e:	d307      	bcc.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	88db      	ldrh	r3, [r3, #6]
 8014364:	b29a      	uxth	r2, r3
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	889b      	ldrh	r3, [r3, #4]
 801436a:	b29b      	uxth	r3, r3
 801436c:	429a      	cmp	r2, r3
 801436e:	d902      	bls.n	8014376 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014370:	f04f 33ff 	mov.w	r3, #4294967295
 8014374:	e0de      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	68ba      	ldr	r2, [r7, #8]
 801437a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437e:	88db      	ldrh	r3, [r3, #6]
 8014380:	b29a      	uxth	r2, r3
 8014382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014384:	889b      	ldrh	r3, [r3, #4]
 8014386:	b29b      	uxth	r3, r3
 8014388:	429a      	cmp	r2, r3
 801438a:	d03d      	beq.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801438c:	2300      	movs	r3, #0
 801438e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014390:	e03a      	b.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014394:	88db      	ldrh	r3, [r3, #6]
 8014396:	b29a      	uxth	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	889b      	ldrh	r3, [r3, #4]
 801439c:	b29b      	uxth	r3, r3
 801439e:	429a      	cmp	r2, r3
 80143a0:	d902      	bls.n	80143a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143a2:	f04f 33ff 	mov.w	r3, #4294967295
 80143a6:	e0c5      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	68ba      	ldr	r2, [r7, #8]
 80143ac:	605a      	str	r2, [r3, #4]
      break;
 80143ae:	e02b      	b.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	889b      	ldrh	r3, [r3, #4]
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	889b      	ldrh	r3, [r3, #4]
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	429a      	cmp	r2, r3
 80143be:	d102      	bne.n	80143c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143c0:	f04f 33ff 	mov.w	r3, #4294967295
 80143c4:	e0b6      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80143c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c8:	889b      	ldrh	r3, [r3, #4]
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	88db      	ldrh	r3, [r3, #6]
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d202      	bcs.n	80143dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143d6:	f04f 33ff 	mov.w	r3, #4294967295
 80143da:	e0ab      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d009      	beq.n	80143f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	88db      	ldrh	r3, [r3, #6]
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	889b      	ldrh	r3, [r3, #4]
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d001      	beq.n	80143f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80143f2:	2300      	movs	r3, #0
 80143f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014402:	2b00      	cmp	r3, #0
 8014404:	d193      	bne.n	801432e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014406:	e000      	b.n	801440a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	2b00      	cmp	r3, #0
 801440e:	d12d      	bne.n	801446c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014412:	2b00      	cmp	r3, #0
 8014414:	d01c      	beq.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014418:	88db      	ldrh	r3, [r3, #6]
 801441a:	b29a      	uxth	r2, r3
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	889b      	ldrh	r3, [r3, #4]
 8014420:	b29b      	uxth	r3, r3
 8014422:	429a      	cmp	r2, r3
 8014424:	d906      	bls.n	8014434 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014426:	4b45      	ldr	r3, [pc, #276]	; (801453c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014428:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801442c:	4944      	ldr	r1, [pc, #272]	; (8014540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801442e:	4845      	ldr	r0, [pc, #276]	; (8014544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014430:	f001 fa24 	bl	801587c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443c:	88db      	ldrh	r3, [r3, #6]
 801443e:	b29a      	uxth	r2, r3
 8014440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014442:	889b      	ldrh	r3, [r3, #4]
 8014444:	b29b      	uxth	r3, r3
 8014446:	429a      	cmp	r2, r3
 8014448:	d010      	beq.n	801446c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801444a:	2300      	movs	r3, #0
 801444c:	623b      	str	r3, [r7, #32]
 801444e:	e00d      	b.n	801446c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014458:	4b38      	ldr	r3, [pc, #224]	; (801453c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801445a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801445e:	493a      	ldr	r1, [pc, #232]	; (8014548 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014460:	4838      	ldr	r0, [pc, #224]	; (8014544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014462:	f001 fa0b 	bl	801587c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	68ba      	ldr	r2, [r7, #8]
 801446a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d105      	bne.n	801447e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	7f9b      	ldrb	r3, [r3, #30]
 8014476:	f003 0301 	and.w	r3, r3, #1
 801447a:	2b00      	cmp	r3, #0
 801447c:	d059      	beq.n	8014532 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801447e:	6a3b      	ldr	r3, [r7, #32]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d04f      	beq.n	8014524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d006      	beq.n	801449a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	889b      	ldrh	r3, [r3, #4]
 8014494:	b29b      	uxth	r3, r3
 8014496:	2b00      	cmp	r3, #0
 8014498:	d002      	beq.n	80144a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801449a:	2300      	movs	r3, #0
 801449c:	623b      	str	r3, [r7, #32]
 801449e:	e041      	b.n	8014524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80144a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80144a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80144aa:	e012      	b.n	80144d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80144b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b4:	88db      	ldrh	r3, [r3, #6]
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ba:	889b      	ldrh	r3, [r3, #4]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	429a      	cmp	r2, r3
 80144c0:	d002      	beq.n	80144c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	623b      	str	r3, [r7, #32]
            break;
 80144c6:	e007      	b.n	80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80144c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80144cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80144d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d1e9      	bne.n	80144ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d022      	beq.n	8014524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d106      	bne.n	80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80144e6:	4b15      	ldr	r3, [pc, #84]	; (801453c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144e8:	f240 12df 	movw	r2, #479	; 0x1df
 80144ec:	4917      	ldr	r1, [pc, #92]	; (801454c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144ee:	4815      	ldr	r0, [pc, #84]	; (8014544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144f0:	f001 f9c4 	bl	801587c <iprintf>
          LWIP_ASSERT("sanity check",
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d106      	bne.n	801450e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014500:	4b0e      	ldr	r3, [pc, #56]	; (801453c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014502:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014506:	4911      	ldr	r1, [pc, #68]	; (801454c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014508:	480e      	ldr	r0, [pc, #56]	; (8014544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801450a:	f001 f9b7 	bl	801587c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d006      	beq.n	8014524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014518:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801451c:	490c      	ldr	r1, [pc, #48]	; (8014550 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801451e:	4809      	ldr	r0, [pc, #36]	; (8014544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014520:	f001 f9ac 	bl	801587c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014524:	6a3b      	ldr	r3, [r7, #32]
 8014526:	2b00      	cmp	r3, #0
 8014528:	bf14      	ite	ne
 801452a:	2301      	movne	r3, #1
 801452c:	2300      	moveq	r3, #0
 801452e:	b2db      	uxtb	r3, r3
 8014530:	e000      	b.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014532:	2300      	movs	r3, #0
}
 8014534:	4618      	mov	r0, r3
 8014536:	3730      	adds	r7, #48	; 0x30
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	0801bcfc 	.word	0x0801bcfc
 8014540:	0801bde0 	.word	0x0801bde0
 8014544:	0801bd44 	.word	0x0801bd44
 8014548:	0801be00 	.word	0x0801be00
 801454c:	0801be38 	.word	0x0801be38
 8014550:	0801be48 	.word	0x0801be48

08014554 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b08e      	sub	sp, #56	; 0x38
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	f003 030f 	and.w	r3, r3, #15
 801456a:	b2db      	uxtb	r3, r3
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	b2db      	uxtb	r3, r3
 8014570:	2b14      	cmp	r3, #20
 8014572:	f040 8167 	bne.w	8014844 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	88db      	ldrh	r3, [r3, #6]
 801457a:	b29b      	uxth	r3, r3
 801457c:	4618      	mov	r0, r3
 801457e:	f7f4 fe67 	bl	8009250 <lwip_htons>
 8014582:	4603      	mov	r3, r0
 8014584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014588:	b29b      	uxth	r3, r3
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014590:	885b      	ldrh	r3, [r3, #2]
 8014592:	b29b      	uxth	r3, r3
 8014594:	4618      	mov	r0, r3
 8014596:	f7f4 fe5b 	bl	8009250 <lwip_htons>
 801459a:	4603      	mov	r3, r0
 801459c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	f003 030f 	and.w	r3, r3, #15
 80145a6:	b2db      	uxtb	r3, r3
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80145ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80145b6:	429a      	cmp	r2, r3
 80145b8:	f0c0 8146 	bcc.w	8014848 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80145bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80145c4:	1ad3      	subs	r3, r2, r3
 80145c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7f6 f965 	bl	800a898 <pbuf_clen>
 80145ce:	4603      	mov	r3, r0
 80145d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80145d2:	4b9f      	ldr	r3, [pc, #636]	; (8014850 <ip4_reass+0x2fc>)
 80145d4:	881b      	ldrh	r3, [r3, #0]
 80145d6:	461a      	mov	r2, r3
 80145d8:	8c3b      	ldrh	r3, [r7, #32]
 80145da:	4413      	add	r3, r2
 80145dc:	2b0a      	cmp	r3, #10
 80145de:	dd10      	ble.n	8014602 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145e0:	8c3b      	ldrh	r3, [r7, #32]
 80145e2:	4619      	mov	r1, r3
 80145e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145e6:	f7ff fd81 	bl	80140ec <ip_reass_remove_oldest_datagram>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	f000 812d 	beq.w	801484c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80145f2:	4b97      	ldr	r3, [pc, #604]	; (8014850 <ip4_reass+0x2fc>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	8c3b      	ldrh	r3, [r7, #32]
 80145fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145fc:	2b0a      	cmp	r3, #10
 80145fe:	f300 8125 	bgt.w	801484c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014602:	4b94      	ldr	r3, [pc, #592]	; (8014854 <ip4_reass+0x300>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	633b      	str	r3, [r7, #48]	; 0x30
 8014608:	e015      	b.n	8014636 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460c:	695a      	ldr	r2, [r3, #20]
 801460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	429a      	cmp	r2, r3
 8014614:	d10c      	bne.n	8014630 <ip4_reass+0xdc>
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	699a      	ldr	r2, [r3, #24]
 801461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	429a      	cmp	r2, r3
 8014620:	d106      	bne.n	8014630 <ip4_reass+0xdc>
 8014622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014624:	899a      	ldrh	r2, [r3, #12]
 8014626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014628:	889b      	ldrh	r3, [r3, #4]
 801462a:	b29b      	uxth	r3, r3
 801462c:	429a      	cmp	r2, r3
 801462e:	d006      	beq.n	801463e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	633b      	str	r3, [r7, #48]	; 0x30
 8014636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1e6      	bne.n	801460a <ip4_reass+0xb6>
 801463c:	e000      	b.n	8014640 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801463e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014642:	2b00      	cmp	r3, #0
 8014644:	d109      	bne.n	801465a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014646:	8c3b      	ldrh	r3, [r7, #32]
 8014648:	4619      	mov	r1, r3
 801464a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801464c:	f7ff fdb0 	bl	80141b0 <ip_reass_enqueue_new_datagram>
 8014650:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	2b00      	cmp	r3, #0
 8014656:	d11c      	bne.n	8014692 <ip4_reass+0x13e>
      goto nullreturn;
 8014658:	e109      	b.n	801486e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465c:	88db      	ldrh	r3, [r3, #6]
 801465e:	b29b      	uxth	r3, r3
 8014660:	4618      	mov	r0, r3
 8014662:	f7f4 fdf5 	bl	8009250 <lwip_htons>
 8014666:	4603      	mov	r3, r0
 8014668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801466c:	2b00      	cmp	r3, #0
 801466e:	d110      	bne.n	8014692 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014672:	89db      	ldrh	r3, [r3, #14]
 8014674:	4618      	mov	r0, r3
 8014676:	f7f4 fdeb 	bl	8009250 <lwip_htons>
 801467a:	4603      	mov	r3, r0
 801467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014680:	2b00      	cmp	r3, #0
 8014682:	d006      	beq.n	8014692 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014686:	3308      	adds	r3, #8
 8014688:	2214      	movs	r2, #20
 801468a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801468c:	4618      	mov	r0, r3
 801468e:	f000 fbb1 	bl	8014df4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014694:	88db      	ldrh	r3, [r3, #6]
 8014696:	b29b      	uxth	r3, r3
 8014698:	f003 0320 	and.w	r3, r3, #32
 801469c:	2b00      	cmp	r3, #0
 801469e:	bf0c      	ite	eq
 80146a0:	2301      	moveq	r3, #1
 80146a2:	2300      	movne	r3, #0
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d00e      	beq.n	80146cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80146ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80146b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146b2:	4413      	add	r3, r2
 80146b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80146b6:	8b7a      	ldrh	r2, [r7, #26]
 80146b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146ba:	429a      	cmp	r2, r3
 80146bc:	f0c0 80a0 	bcc.w	8014800 <ip4_reass+0x2ac>
 80146c0:	8b7b      	ldrh	r3, [r7, #26]
 80146c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80146c6:	4293      	cmp	r3, r2
 80146c8:	f200 809a 	bhi.w	8014800 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80146cc:	69fa      	ldr	r2, [r7, #28]
 80146ce:	6879      	ldr	r1, [r7, #4]
 80146d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146d2:	f7ff fdd5 	bl	8014280 <ip_reass_chain_frag_into_datagram_and_validate>
 80146d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146de:	f000 8091 	beq.w	8014804 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80146e2:	4b5b      	ldr	r3, [pc, #364]	; (8014850 <ip4_reass+0x2fc>)
 80146e4:	881a      	ldrh	r2, [r3, #0]
 80146e6:	8c3b      	ldrh	r3, [r7, #32]
 80146e8:	4413      	add	r3, r2
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	4b58      	ldr	r3, [pc, #352]	; (8014850 <ip4_reass+0x2fc>)
 80146ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00d      	beq.n	8014712 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80146f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80146f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146fa:	4413      	add	r3, r2
 80146fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80146fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014700:	8a7a      	ldrh	r2, [r7, #18]
 8014702:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014706:	7f9b      	ldrb	r3, [r3, #30]
 8014708:	f043 0301 	orr.w	r3, r3, #1
 801470c:	b2da      	uxtb	r2, r3
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d171      	bne.n	80147fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471a:	8b9b      	ldrh	r3, [r3, #28]
 801471c:	3314      	adds	r3, #20
 801471e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	3308      	adds	r3, #8
 8014736:	2214      	movs	r2, #20
 8014738:	4619      	mov	r1, r3
 801473a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801473c:	f000 fb5a 	bl	8014df4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014740:	8a3b      	ldrh	r3, [r7, #16]
 8014742:	4618      	mov	r0, r3
 8014744:	f7f4 fd84 	bl	8009250 <lwip_htons>
 8014748:	4603      	mov	r3, r0
 801474a:	461a      	mov	r2, r3
 801474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014752:	2200      	movs	r2, #0
 8014754:	719a      	strb	r2, [r3, #6]
 8014756:	2200      	movs	r2, #0
 8014758:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475c:	2200      	movs	r2, #0
 801475e:	729a      	strb	r2, [r3, #10]
 8014760:	2200      	movs	r2, #0
 8014762:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801476a:	e00d      	b.n	8014788 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014772:	2114      	movs	r1, #20
 8014774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014776:	f7f5 ff81 	bl	800a67c <pbuf_remove_header>
      pbuf_cat(p, r);
 801477a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7f6 f8c5 	bl	800a90c <pbuf_cat>
      r = iprh->next_pbuf;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801478a:	2b00      	cmp	r3, #0
 801478c:	d1ee      	bne.n	801476c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801478e:	4b31      	ldr	r3, [pc, #196]	; (8014854 <ip4_reass+0x300>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014794:	429a      	cmp	r2, r3
 8014796:	d102      	bne.n	801479e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014798:	2300      	movs	r3, #0
 801479a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801479c:	e010      	b.n	80147c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801479e:	4b2d      	ldr	r3, [pc, #180]	; (8014854 <ip4_reass+0x300>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147a4:	e007      	b.n	80147b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80147a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d006      	beq.n	80147be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d1f4      	bne.n	80147a6 <ip4_reass+0x252>
 80147bc:	e000      	b.n	80147c0 <ip4_reass+0x26c>
          break;
 80147be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80147c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147c4:	f7ff fd2e 	bl	8014224 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7f6 f865 	bl	800a898 <pbuf_clen>
 80147ce:	4603      	mov	r3, r0
 80147d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80147d2:	4b1f      	ldr	r3, [pc, #124]	; (8014850 <ip4_reass+0x2fc>)
 80147d4:	881b      	ldrh	r3, [r3, #0]
 80147d6:	8c3a      	ldrh	r2, [r7, #32]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d906      	bls.n	80147ea <ip4_reass+0x296>
 80147dc:	4b1e      	ldr	r3, [pc, #120]	; (8014858 <ip4_reass+0x304>)
 80147de:	f240 229b 	movw	r2, #667	; 0x29b
 80147e2:	491e      	ldr	r1, [pc, #120]	; (801485c <ip4_reass+0x308>)
 80147e4:	481e      	ldr	r0, [pc, #120]	; (8014860 <ip4_reass+0x30c>)
 80147e6:	f001 f849 	bl	801587c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80147ea:	4b19      	ldr	r3, [pc, #100]	; (8014850 <ip4_reass+0x2fc>)
 80147ec:	881a      	ldrh	r2, [r3, #0]
 80147ee:	8c3b      	ldrh	r3, [r7, #32]
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	4b16      	ldr	r3, [pc, #88]	; (8014850 <ip4_reass+0x2fc>)
 80147f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	e03c      	b.n	8014876 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80147fc:	2300      	movs	r3, #0
 80147fe:	e03a      	b.n	8014876 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014800:	bf00      	nop
 8014802:	e000      	b.n	8014806 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014804:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014808:	2b00      	cmp	r3, #0
 801480a:	d106      	bne.n	801481a <ip4_reass+0x2c6>
 801480c:	4b12      	ldr	r3, [pc, #72]	; (8014858 <ip4_reass+0x304>)
 801480e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014812:	4914      	ldr	r1, [pc, #80]	; (8014864 <ip4_reass+0x310>)
 8014814:	4812      	ldr	r0, [pc, #72]	; (8014860 <ip4_reass+0x30c>)
 8014816:	f001 f831 	bl	801587c <iprintf>
  if (ipr->p == NULL) {
 801481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d124      	bne.n	801486c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014822:	4b0c      	ldr	r3, [pc, #48]	; (8014854 <ip4_reass+0x300>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014828:	429a      	cmp	r2, r3
 801482a:	d006      	beq.n	801483a <ip4_reass+0x2e6>
 801482c:	4b0a      	ldr	r3, [pc, #40]	; (8014858 <ip4_reass+0x304>)
 801482e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014832:	490d      	ldr	r1, [pc, #52]	; (8014868 <ip4_reass+0x314>)
 8014834:	480a      	ldr	r0, [pc, #40]	; (8014860 <ip4_reass+0x30c>)
 8014836:	f001 f821 	bl	801587c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801483a:	2100      	movs	r1, #0
 801483c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801483e:	f7ff fcf1 	bl	8014224 <ip_reass_dequeue_datagram>
 8014842:	e014      	b.n	801486e <ip4_reass+0x31a>
    goto nullreturn;
 8014844:	bf00      	nop
 8014846:	e012      	b.n	801486e <ip4_reass+0x31a>
    goto nullreturn;
 8014848:	bf00      	nop
 801484a:	e010      	b.n	801486e <ip4_reass+0x31a>
      goto nullreturn;
 801484c:	bf00      	nop
 801484e:	e00e      	b.n	801486e <ip4_reass+0x31a>
 8014850:	20000520 	.word	0x20000520
 8014854:	2000051c 	.word	0x2000051c
 8014858:	0801bcfc 	.word	0x0801bcfc
 801485c:	0801be6c 	.word	0x0801be6c
 8014860:	0801bd44 	.word	0x0801bd44
 8014864:	0801be88 	.word	0x0801be88
 8014868:	0801be94 	.word	0x0801be94
  }

nullreturn:
 801486c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7f5 ff8a 	bl	800a788 <pbuf_free>
  return NULL;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3738      	adds	r7, #56	; 0x38
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop

08014880 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014884:	2005      	movs	r0, #5
 8014886:	f7f5 f939 	bl	8009afc <memp_malloc>
 801488a:	4603      	mov	r3, r0
}
 801488c:	4618      	mov	r0, r3
 801488e:	bd80      	pop	{r7, pc}

08014890 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d106      	bne.n	80148ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801489e:	4b07      	ldr	r3, [pc, #28]	; (80148bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80148a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80148a4:	4906      	ldr	r1, [pc, #24]	; (80148c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80148a6:	4807      	ldr	r0, [pc, #28]	; (80148c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80148a8:	f000 ffe8 	bl	801587c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80148ac:	6879      	ldr	r1, [r7, #4]
 80148ae:	2005      	movs	r0, #5
 80148b0:	f7f5 f970 	bl	8009b94 <memp_free>
}
 80148b4:	bf00      	nop
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	0801bcfc 	.word	0x0801bcfc
 80148c0:	0801beb4 	.word	0x0801beb4
 80148c4:	0801bd44 	.word	0x0801bd44

080148c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d106      	bne.n	80148e8 <ipfrag_free_pbuf_custom+0x20>
 80148da:	4b11      	ldr	r3, [pc, #68]	; (8014920 <ipfrag_free_pbuf_custom+0x58>)
 80148dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80148e0:	4910      	ldr	r1, [pc, #64]	; (8014924 <ipfrag_free_pbuf_custom+0x5c>)
 80148e2:	4811      	ldr	r0, [pc, #68]	; (8014928 <ipfrag_free_pbuf_custom+0x60>)
 80148e4:	f000 ffca 	bl	801587c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d006      	beq.n	80148fe <ipfrag_free_pbuf_custom+0x36>
 80148f0:	4b0b      	ldr	r3, [pc, #44]	; (8014920 <ipfrag_free_pbuf_custom+0x58>)
 80148f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80148f6:	490d      	ldr	r1, [pc, #52]	; (801492c <ipfrag_free_pbuf_custom+0x64>)
 80148f8:	480b      	ldr	r0, [pc, #44]	; (8014928 <ipfrag_free_pbuf_custom+0x60>)
 80148fa:	f000 ffbf 	bl	801587c <iprintf>
  if (pcr->original != NULL) {
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	695b      	ldr	r3, [r3, #20]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d004      	beq.n	8014910 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	695b      	ldr	r3, [r3, #20]
 801490a:	4618      	mov	r0, r3
 801490c:	f7f5 ff3c 	bl	800a788 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f7ff ffbd 	bl	8014890 <ip_frag_free_pbuf_custom_ref>
}
 8014916:	bf00      	nop
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	0801bcfc 	.word	0x0801bcfc
 8014924:	0801bec0 	.word	0x0801bec0
 8014928:	0801bd44 	.word	0x0801bd44
 801492c:	0801becc 	.word	0x0801becc

08014930 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b094      	sub	sp, #80	; 0x50
 8014934:	af02      	add	r7, sp, #8
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801493c:	2300      	movs	r3, #0
 801493e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014946:	3b14      	subs	r3, #20
 8014948:	2b00      	cmp	r3, #0
 801494a:	da00      	bge.n	801494e <ip4_frag+0x1e>
 801494c:	3307      	adds	r3, #7
 801494e:	10db      	asrs	r3, r3, #3
 8014950:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014952:	2314      	movs	r3, #20
 8014954:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801495e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	f003 030f 	and.w	r3, r3, #15
 8014968:	b2db      	uxtb	r3, r3
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	b2db      	uxtb	r3, r3
 801496e:	2b14      	cmp	r3, #20
 8014970:	d002      	beq.n	8014978 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014972:	f06f 0305 	mvn.w	r3, #5
 8014976:	e110      	b.n	8014b9a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	895b      	ldrh	r3, [r3, #10]
 801497c:	2b13      	cmp	r3, #19
 801497e:	d809      	bhi.n	8014994 <ip4_frag+0x64>
 8014980:	4b88      	ldr	r3, [pc, #544]	; (8014ba4 <ip4_frag+0x274>)
 8014982:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014986:	4988      	ldr	r1, [pc, #544]	; (8014ba8 <ip4_frag+0x278>)
 8014988:	4888      	ldr	r0, [pc, #544]	; (8014bac <ip4_frag+0x27c>)
 801498a:	f000 ff77 	bl	801587c <iprintf>
 801498e:	f06f 0305 	mvn.w	r3, #5
 8014992:	e102      	b.n	8014b9a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014996:	88db      	ldrh	r3, [r3, #6]
 8014998:	b29b      	uxth	r3, r3
 801499a:	4618      	mov	r0, r3
 801499c:	f7f4 fc58 	bl	8009250 <lwip_htons>
 80149a0:	4603      	mov	r3, r0
 80149a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80149a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80149aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80149ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80149b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	891b      	ldrh	r3, [r3, #8]
 80149ba:	3b14      	subs	r3, #20
 80149bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80149c0:	e0e1      	b.n	8014b86 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80149c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80149cc:	4293      	cmp	r3, r2
 80149ce:	bf28      	it	cs
 80149d0:	4613      	movcs	r3, r2
 80149d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80149d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149d8:	2114      	movs	r1, #20
 80149da:	200e      	movs	r0, #14
 80149dc:	f7f5 fbf0 	bl	800a1c0 <pbuf_alloc>
 80149e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	f000 80d5 	beq.w	8014b94 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80149ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ec:	895b      	ldrh	r3, [r3, #10]
 80149ee:	2b13      	cmp	r3, #19
 80149f0:	d806      	bhi.n	8014a00 <ip4_frag+0xd0>
 80149f2:	4b6c      	ldr	r3, [pc, #432]	; (8014ba4 <ip4_frag+0x274>)
 80149f4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80149f8:	496d      	ldr	r1, [pc, #436]	; (8014bb0 <ip4_frag+0x280>)
 80149fa:	486c      	ldr	r0, [pc, #432]	; (8014bac <ip4_frag+0x27c>)
 80149fc:	f000 ff3e 	bl	801587c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	2214      	movs	r2, #20
 8014a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f000 f9f3 	bl	8014df4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014a1a:	e064      	b.n	8014ae6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	895a      	ldrh	r2, [r3, #10]
 8014a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a22:	1ad3      	subs	r3, r2, r3
 8014a24:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	895b      	ldrh	r3, [r3, #10]
 8014a2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d906      	bls.n	8014a3e <ip4_frag+0x10e>
 8014a30:	4b5c      	ldr	r3, [pc, #368]	; (8014ba4 <ip4_frag+0x274>)
 8014a32:	f240 322d 	movw	r2, #813	; 0x32d
 8014a36:	495f      	ldr	r1, [pc, #380]	; (8014bb4 <ip4_frag+0x284>)
 8014a38:	485c      	ldr	r0, [pc, #368]	; (8014bac <ip4_frag+0x27c>)
 8014a3a:	f000 ff1f 	bl	801587c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014a3e:	8bfa      	ldrh	r2, [r7, #30]
 8014a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a44:	4293      	cmp	r3, r2
 8014a46:	bf28      	it	cs
 8014a48:	4613      	movcs	r3, r2
 8014a4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014a4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d105      	bne.n	8014a62 <ip4_frag+0x132>
        poff = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	60fb      	str	r3, [r7, #12]
        continue;
 8014a60:	e041      	b.n	8014ae6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014a62:	f7ff ff0d 	bl	8014880 <ip_frag_alloc_pbuf_custom_ref>
 8014a66:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d103      	bne.n	8014a76 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a70:	f7f5 fe8a 	bl	800a788 <pbuf_free>
        goto memerr;
 8014a74:	e08f      	b.n	8014b96 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a76:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a7e:	4413      	add	r3, r2
 8014a80:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014a84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014a88:	9201      	str	r2, [sp, #4]
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2241      	movs	r2, #65	; 0x41
 8014a90:	2000      	movs	r0, #0
 8014a92:	f7f5 fcbf 	bl	800a414 <pbuf_alloced_custom>
 8014a96:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d106      	bne.n	8014aac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a9e:	69b8      	ldr	r0, [r7, #24]
 8014aa0:	f7ff fef6 	bl	8014890 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014aa6:	f7f5 fe6f 	bl	800a788 <pbuf_free>
        goto memerr;
 8014aaa:	e074      	b.n	8014b96 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	f7f5 ff0b 	bl	800a8c8 <pbuf_ref>
      pcr->original = p;
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014ab8:	69bb      	ldr	r3, [r7, #24]
 8014aba:	4a3f      	ldr	r2, [pc, #252]	; (8014bb8 <ip4_frag+0x288>)
 8014abc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014abe:	6979      	ldr	r1, [r7, #20]
 8014ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ac2:	f7f5 ff23 	bl	800a90c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014ac6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ace:	1ad3      	subs	r3, r2, r3
 8014ad0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014ad4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d004      	beq.n	8014ae6 <ip4_frag+0x1b6>
        poff = 0;
 8014adc:	2300      	movs	r3, #0
 8014ade:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014ae6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d196      	bne.n	8014a1c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014aee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014af0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014af4:	4413      	add	r3, r2
 8014af6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014afc:	f1a3 0213 	sub.w	r2, r3, #19
 8014b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b04:	429a      	cmp	r2, r3
 8014b06:	bfcc      	ite	gt
 8014b08:	2301      	movgt	r3, #1
 8014b0a:	2300      	movle	r3, #0
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014b1a:	6a3b      	ldr	r3, [r7, #32]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d002      	beq.n	8014b26 <ip4_frag+0x1f6>
 8014b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d003      	beq.n	8014b2e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014b26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014b2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014b2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7f4 fb8d 	bl	8009250 <lwip_htons>
 8014b36:	4603      	mov	r3, r0
 8014b38:	461a      	mov	r2, r3
 8014b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b40:	3314      	adds	r3, #20
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7f4 fb83 	bl	8009250 <lwip_htons>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	2200      	movs	r2, #0
 8014b56:	729a      	strb	r2, [r3, #10]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	695b      	ldr	r3, [r3, #20]
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b64:	68b8      	ldr	r0, [r7, #8]
 8014b66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b6a:	f7f5 fe0d 	bl	800a788 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b80:	4413      	add	r3, r2
 8014b82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f47f af19 	bne.w	80149c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	e002      	b.n	8014b9a <ip4_frag+0x26a>
      goto memerr;
 8014b94:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3748      	adds	r7, #72	; 0x48
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	0801bcfc 	.word	0x0801bcfc
 8014ba8:	0801bed8 	.word	0x0801bed8
 8014bac:	0801bd44 	.word	0x0801bd44
 8014bb0:	0801bef4 	.word	0x0801bef4
 8014bb4:	0801bf14 	.word	0x0801bf14
 8014bb8:	080148c9 	.word	0x080148c9

08014bbc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014bc6:	230e      	movs	r3, #14
 8014bc8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	895b      	ldrh	r3, [r3, #10]
 8014bce:	2b0e      	cmp	r3, #14
 8014bd0:	d96e      	bls.n	8014cb0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	7bdb      	ldrb	r3, [r3, #15]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d106      	bne.n	8014be8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014be0:	3301      	adds	r3, #1
 8014be2:	b2da      	uxtb	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	7b1a      	ldrb	r2, [r3, #12]
 8014bf2:	7b5b      	ldrb	r3, [r3, #13]
 8014bf4:	021b      	lsls	r3, r3, #8
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	f003 0301 	and.w	r3, r3, #1
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d023      	beq.n	8014c4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	781b      	ldrb	r3, [r3, #0]
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d10f      	bne.n	8014c2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	785b      	ldrb	r3, [r3, #1]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d11b      	bne.n	8014c4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c1a:	2b5e      	cmp	r3, #94	; 0x5e
 8014c1c:	d117      	bne.n	8014c4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7b5b      	ldrb	r3, [r3, #13]
 8014c22:	f043 0310 	orr.w	r3, r3, #16
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	735a      	strb	r2, [r3, #13]
 8014c2c:	e00f      	b.n	8014c4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	2206      	movs	r2, #6
 8014c32:	4928      	ldr	r1, [pc, #160]	; (8014cd4 <ethernet_input+0x118>)
 8014c34:	4618      	mov	r0, r3
 8014c36:	f000 f8cf 	bl	8014dd8 <memcmp>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d106      	bne.n	8014c4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	7b5b      	ldrb	r3, [r3, #13]
 8014c44:	f043 0308 	orr.w	r3, r3, #8
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014c4e:	89fb      	ldrh	r3, [r7, #14]
 8014c50:	2b08      	cmp	r3, #8
 8014c52:	d003      	beq.n	8014c5c <ethernet_input+0xa0>
 8014c54:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014c58:	d014      	beq.n	8014c84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014c5a:	e032      	b.n	8014cc2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c62:	f003 0308 	and.w	r3, r3, #8
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d024      	beq.n	8014cb4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c6a:	8afb      	ldrh	r3, [r7, #22]
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f7f5 fd04 	bl	800a67c <pbuf_remove_header>
 8014c74:	4603      	mov	r3, r0
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d11e      	bne.n	8014cb8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c7a:	6839      	ldr	r1, [r7, #0]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7fe ff09 	bl	8013a94 <ip4_input>
      break;
 8014c82:	e013      	b.n	8014cac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c8a:	f003 0308 	and.w	r3, r3, #8
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d014      	beq.n	8014cbc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c92:	8afb      	ldrh	r3, [r7, #22]
 8014c94:	4619      	mov	r1, r3
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f7f5 fcf0 	bl	800a67c <pbuf_remove_header>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d10e      	bne.n	8014cc0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7fe f8a5 	bl	8012df4 <etharp_input>
      break;
 8014caa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014cac:	2300      	movs	r3, #0
 8014cae:	e00c      	b.n	8014cca <ethernet_input+0x10e>
    goto free_and_return;
 8014cb0:	bf00      	nop
 8014cb2:	e006      	b.n	8014cc2 <ethernet_input+0x106>
        goto free_and_return;
 8014cb4:	bf00      	nop
 8014cb6:	e004      	b.n	8014cc2 <ethernet_input+0x106>
        goto free_and_return;
 8014cb8:	bf00      	nop
 8014cba:	e002      	b.n	8014cc2 <ethernet_input+0x106>
        goto free_and_return;
 8014cbc:	bf00      	nop
 8014cbe:	e000      	b.n	8014cc2 <ethernet_input+0x106>
        goto free_and_return;
 8014cc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7f5 fd60 	bl	800a788 <pbuf_free>
  return ERR_OK;
 8014cc8:	2300      	movs	r3, #0
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3718      	adds	r7, #24
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	0801c0c0 	.word	0x0801c0c0

08014cd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b086      	sub	sp, #24
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607a      	str	r2, [r7, #4]
 8014ce4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014ce6:	8c3b      	ldrh	r3, [r7, #32]
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7f4 fab1 	bl	8009250 <lwip_htons>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014cf2:	210e      	movs	r1, #14
 8014cf4:	68b8      	ldr	r0, [r7, #8]
 8014cf6:	f7f5 fcb1 	bl	800a65c <pbuf_add_header>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d125      	bne.n	8014d4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	8afa      	ldrh	r2, [r7, #22]
 8014d0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	2206      	movs	r2, #6
 8014d10:	6839      	ldr	r1, [r7, #0]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f000 f86e 	bl	8014df4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	3306      	adds	r3, #6
 8014d1c:	2206      	movs	r2, #6
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f000 f867 	bl	8014df4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d2c:	2b06      	cmp	r3, #6
 8014d2e:	d006      	beq.n	8014d3e <ethernet_output+0x66>
 8014d30:	4b0a      	ldr	r3, [pc, #40]	; (8014d5c <ethernet_output+0x84>)
 8014d32:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014d36:	490a      	ldr	r1, [pc, #40]	; (8014d60 <ethernet_output+0x88>)
 8014d38:	480a      	ldr	r0, [pc, #40]	; (8014d64 <ethernet_output+0x8c>)
 8014d3a:	f000 fd9f 	bl	801587c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	699b      	ldr	r3, [r3, #24]
 8014d42:	68b9      	ldr	r1, [r7, #8]
 8014d44:	68f8      	ldr	r0, [r7, #12]
 8014d46:	4798      	blx	r3
 8014d48:	4603      	mov	r3, r0
 8014d4a:	e002      	b.n	8014d52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014d4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014d4e:	f06f 0301 	mvn.w	r3, #1
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3718      	adds	r7, #24
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	0801bf24 	.word	0x0801bf24
 8014d60:	0801bf5c 	.word	0x0801bf5c
 8014d64:	0801bf90 	.word	0x0801bf90

08014d68 <atoi>:
 8014d68:	220a      	movs	r2, #10
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	f000 bed0 	b.w	8015b10 <strtol>

08014d70 <__libc_init_array>:
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	4d0d      	ldr	r5, [pc, #52]	; (8014da8 <__libc_init_array+0x38>)
 8014d74:	4c0d      	ldr	r4, [pc, #52]	; (8014dac <__libc_init_array+0x3c>)
 8014d76:	1b64      	subs	r4, r4, r5
 8014d78:	10a4      	asrs	r4, r4, #2
 8014d7a:	2600      	movs	r6, #0
 8014d7c:	42a6      	cmp	r6, r4
 8014d7e:	d109      	bne.n	8014d94 <__libc_init_array+0x24>
 8014d80:	4d0b      	ldr	r5, [pc, #44]	; (8014db0 <__libc_init_array+0x40>)
 8014d82:	4c0c      	ldr	r4, [pc, #48]	; (8014db4 <__libc_init_array+0x44>)
 8014d84:	f003 ffaa 	bl	8018cdc <_init>
 8014d88:	1b64      	subs	r4, r4, r5
 8014d8a:	10a4      	asrs	r4, r4, #2
 8014d8c:	2600      	movs	r6, #0
 8014d8e:	42a6      	cmp	r6, r4
 8014d90:	d105      	bne.n	8014d9e <__libc_init_array+0x2e>
 8014d92:	bd70      	pop	{r4, r5, r6, pc}
 8014d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d98:	4798      	blx	r3
 8014d9a:	3601      	adds	r6, #1
 8014d9c:	e7ee      	b.n	8014d7c <__libc_init_array+0xc>
 8014d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014da2:	4798      	blx	r3
 8014da4:	3601      	adds	r6, #1
 8014da6:	e7f2      	b.n	8014d8e <__libc_init_array+0x1e>
 8014da8:	0801c558 	.word	0x0801c558
 8014dac:	0801c558 	.word	0x0801c558
 8014db0:	0801c558 	.word	0x0801c558
 8014db4:	0801c55c 	.word	0x0801c55c

08014db8 <malloc>:
 8014db8:	4b02      	ldr	r3, [pc, #8]	; (8014dc4 <malloc+0xc>)
 8014dba:	4601      	mov	r1, r0
 8014dbc:	6818      	ldr	r0, [r3, #0]
 8014dbe:	f000 b899 	b.w	8014ef4 <_malloc_r>
 8014dc2:	bf00      	nop
 8014dc4:	20000024 	.word	0x20000024

08014dc8 <free>:
 8014dc8:	4b02      	ldr	r3, [pc, #8]	; (8014dd4 <free+0xc>)
 8014dca:	4601      	mov	r1, r0
 8014dcc:	6818      	ldr	r0, [r3, #0]
 8014dce:	f000 b841 	b.w	8014e54 <_free_r>
 8014dd2:	bf00      	nop
 8014dd4:	20000024 	.word	0x20000024

08014dd8 <memcmp>:
 8014dd8:	b530      	push	{r4, r5, lr}
 8014dda:	3901      	subs	r1, #1
 8014ddc:	2400      	movs	r4, #0
 8014dde:	42a2      	cmp	r2, r4
 8014de0:	d101      	bne.n	8014de6 <memcmp+0xe>
 8014de2:	2000      	movs	r0, #0
 8014de4:	e005      	b.n	8014df2 <memcmp+0x1a>
 8014de6:	5d03      	ldrb	r3, [r0, r4]
 8014de8:	3401      	adds	r4, #1
 8014dea:	5d0d      	ldrb	r5, [r1, r4]
 8014dec:	42ab      	cmp	r3, r5
 8014dee:	d0f6      	beq.n	8014dde <memcmp+0x6>
 8014df0:	1b58      	subs	r0, r3, r5
 8014df2:	bd30      	pop	{r4, r5, pc}

08014df4 <memcpy>:
 8014df4:	440a      	add	r2, r1
 8014df6:	4291      	cmp	r1, r2
 8014df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8014dfc:	d100      	bne.n	8014e00 <memcpy+0xc>
 8014dfe:	4770      	bx	lr
 8014e00:	b510      	push	{r4, lr}
 8014e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e0a:	4291      	cmp	r1, r2
 8014e0c:	d1f9      	bne.n	8014e02 <memcpy+0xe>
 8014e0e:	bd10      	pop	{r4, pc}

08014e10 <memmove>:
 8014e10:	4288      	cmp	r0, r1
 8014e12:	b510      	push	{r4, lr}
 8014e14:	eb01 0402 	add.w	r4, r1, r2
 8014e18:	d902      	bls.n	8014e20 <memmove+0x10>
 8014e1a:	4284      	cmp	r4, r0
 8014e1c:	4623      	mov	r3, r4
 8014e1e:	d807      	bhi.n	8014e30 <memmove+0x20>
 8014e20:	1e43      	subs	r3, r0, #1
 8014e22:	42a1      	cmp	r1, r4
 8014e24:	d008      	beq.n	8014e38 <memmove+0x28>
 8014e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e2e:	e7f8      	b.n	8014e22 <memmove+0x12>
 8014e30:	4402      	add	r2, r0
 8014e32:	4601      	mov	r1, r0
 8014e34:	428a      	cmp	r2, r1
 8014e36:	d100      	bne.n	8014e3a <memmove+0x2a>
 8014e38:	bd10      	pop	{r4, pc}
 8014e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e42:	e7f7      	b.n	8014e34 <memmove+0x24>

08014e44 <memset>:
 8014e44:	4402      	add	r2, r0
 8014e46:	4603      	mov	r3, r0
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d100      	bne.n	8014e4e <memset+0xa>
 8014e4c:	4770      	bx	lr
 8014e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e52:	e7f9      	b.n	8014e48 <memset+0x4>

08014e54 <_free_r>:
 8014e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e56:	2900      	cmp	r1, #0
 8014e58:	d048      	beq.n	8014eec <_free_r+0x98>
 8014e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e5e:	9001      	str	r0, [sp, #4]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f1a1 0404 	sub.w	r4, r1, #4
 8014e66:	bfb8      	it	lt
 8014e68:	18e4      	addlt	r4, r4, r3
 8014e6a:	f001 fe07 	bl	8016a7c <__malloc_lock>
 8014e6e:	4a20      	ldr	r2, [pc, #128]	; (8014ef0 <_free_r+0x9c>)
 8014e70:	9801      	ldr	r0, [sp, #4]
 8014e72:	6813      	ldr	r3, [r2, #0]
 8014e74:	4615      	mov	r5, r2
 8014e76:	b933      	cbnz	r3, 8014e86 <_free_r+0x32>
 8014e78:	6063      	str	r3, [r4, #4]
 8014e7a:	6014      	str	r4, [r2, #0]
 8014e7c:	b003      	add	sp, #12
 8014e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e82:	f001 be01 	b.w	8016a88 <__malloc_unlock>
 8014e86:	42a3      	cmp	r3, r4
 8014e88:	d90b      	bls.n	8014ea2 <_free_r+0x4e>
 8014e8a:	6821      	ldr	r1, [r4, #0]
 8014e8c:	1862      	adds	r2, r4, r1
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	bf04      	itt	eq
 8014e92:	681a      	ldreq	r2, [r3, #0]
 8014e94:	685b      	ldreq	r3, [r3, #4]
 8014e96:	6063      	str	r3, [r4, #4]
 8014e98:	bf04      	itt	eq
 8014e9a:	1852      	addeq	r2, r2, r1
 8014e9c:	6022      	streq	r2, [r4, #0]
 8014e9e:	602c      	str	r4, [r5, #0]
 8014ea0:	e7ec      	b.n	8014e7c <_free_r+0x28>
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	b10b      	cbz	r3, 8014eac <_free_r+0x58>
 8014ea8:	42a3      	cmp	r3, r4
 8014eaa:	d9fa      	bls.n	8014ea2 <_free_r+0x4e>
 8014eac:	6811      	ldr	r1, [r2, #0]
 8014eae:	1855      	adds	r5, r2, r1
 8014eb0:	42a5      	cmp	r5, r4
 8014eb2:	d10b      	bne.n	8014ecc <_free_r+0x78>
 8014eb4:	6824      	ldr	r4, [r4, #0]
 8014eb6:	4421      	add	r1, r4
 8014eb8:	1854      	adds	r4, r2, r1
 8014eba:	42a3      	cmp	r3, r4
 8014ebc:	6011      	str	r1, [r2, #0]
 8014ebe:	d1dd      	bne.n	8014e7c <_free_r+0x28>
 8014ec0:	681c      	ldr	r4, [r3, #0]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	6053      	str	r3, [r2, #4]
 8014ec6:	4421      	add	r1, r4
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	e7d7      	b.n	8014e7c <_free_r+0x28>
 8014ecc:	d902      	bls.n	8014ed4 <_free_r+0x80>
 8014ece:	230c      	movs	r3, #12
 8014ed0:	6003      	str	r3, [r0, #0]
 8014ed2:	e7d3      	b.n	8014e7c <_free_r+0x28>
 8014ed4:	6825      	ldr	r5, [r4, #0]
 8014ed6:	1961      	adds	r1, r4, r5
 8014ed8:	428b      	cmp	r3, r1
 8014eda:	bf04      	itt	eq
 8014edc:	6819      	ldreq	r1, [r3, #0]
 8014ede:	685b      	ldreq	r3, [r3, #4]
 8014ee0:	6063      	str	r3, [r4, #4]
 8014ee2:	bf04      	itt	eq
 8014ee4:	1949      	addeq	r1, r1, r5
 8014ee6:	6021      	streq	r1, [r4, #0]
 8014ee8:	6054      	str	r4, [r2, #4]
 8014eea:	e7c7      	b.n	8014e7c <_free_r+0x28>
 8014eec:	b003      	add	sp, #12
 8014eee:	bd30      	pop	{r4, r5, pc}
 8014ef0:	20000524 	.word	0x20000524

08014ef4 <_malloc_r>:
 8014ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef6:	1ccd      	adds	r5, r1, #3
 8014ef8:	f025 0503 	bic.w	r5, r5, #3
 8014efc:	3508      	adds	r5, #8
 8014efe:	2d0c      	cmp	r5, #12
 8014f00:	bf38      	it	cc
 8014f02:	250c      	movcc	r5, #12
 8014f04:	2d00      	cmp	r5, #0
 8014f06:	4606      	mov	r6, r0
 8014f08:	db01      	blt.n	8014f0e <_malloc_r+0x1a>
 8014f0a:	42a9      	cmp	r1, r5
 8014f0c:	d903      	bls.n	8014f16 <_malloc_r+0x22>
 8014f0e:	230c      	movs	r3, #12
 8014f10:	6033      	str	r3, [r6, #0]
 8014f12:	2000      	movs	r0, #0
 8014f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f16:	f001 fdb1 	bl	8016a7c <__malloc_lock>
 8014f1a:	4921      	ldr	r1, [pc, #132]	; (8014fa0 <_malloc_r+0xac>)
 8014f1c:	680a      	ldr	r2, [r1, #0]
 8014f1e:	4614      	mov	r4, r2
 8014f20:	b99c      	cbnz	r4, 8014f4a <_malloc_r+0x56>
 8014f22:	4f20      	ldr	r7, [pc, #128]	; (8014fa4 <_malloc_r+0xb0>)
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	b923      	cbnz	r3, 8014f32 <_malloc_r+0x3e>
 8014f28:	4621      	mov	r1, r4
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f000 fcfe 	bl	801592c <_sbrk_r>
 8014f30:	6038      	str	r0, [r7, #0]
 8014f32:	4629      	mov	r1, r5
 8014f34:	4630      	mov	r0, r6
 8014f36:	f000 fcf9 	bl	801592c <_sbrk_r>
 8014f3a:	1c43      	adds	r3, r0, #1
 8014f3c:	d123      	bne.n	8014f86 <_malloc_r+0x92>
 8014f3e:	230c      	movs	r3, #12
 8014f40:	6033      	str	r3, [r6, #0]
 8014f42:	4630      	mov	r0, r6
 8014f44:	f001 fda0 	bl	8016a88 <__malloc_unlock>
 8014f48:	e7e3      	b.n	8014f12 <_malloc_r+0x1e>
 8014f4a:	6823      	ldr	r3, [r4, #0]
 8014f4c:	1b5b      	subs	r3, r3, r5
 8014f4e:	d417      	bmi.n	8014f80 <_malloc_r+0x8c>
 8014f50:	2b0b      	cmp	r3, #11
 8014f52:	d903      	bls.n	8014f5c <_malloc_r+0x68>
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	441c      	add	r4, r3
 8014f58:	6025      	str	r5, [r4, #0]
 8014f5a:	e004      	b.n	8014f66 <_malloc_r+0x72>
 8014f5c:	6863      	ldr	r3, [r4, #4]
 8014f5e:	42a2      	cmp	r2, r4
 8014f60:	bf0c      	ite	eq
 8014f62:	600b      	streq	r3, [r1, #0]
 8014f64:	6053      	strne	r3, [r2, #4]
 8014f66:	4630      	mov	r0, r6
 8014f68:	f001 fd8e 	bl	8016a88 <__malloc_unlock>
 8014f6c:	f104 000b 	add.w	r0, r4, #11
 8014f70:	1d23      	adds	r3, r4, #4
 8014f72:	f020 0007 	bic.w	r0, r0, #7
 8014f76:	1ac2      	subs	r2, r0, r3
 8014f78:	d0cc      	beq.n	8014f14 <_malloc_r+0x20>
 8014f7a:	1a1b      	subs	r3, r3, r0
 8014f7c:	50a3      	str	r3, [r4, r2]
 8014f7e:	e7c9      	b.n	8014f14 <_malloc_r+0x20>
 8014f80:	4622      	mov	r2, r4
 8014f82:	6864      	ldr	r4, [r4, #4]
 8014f84:	e7cc      	b.n	8014f20 <_malloc_r+0x2c>
 8014f86:	1cc4      	adds	r4, r0, #3
 8014f88:	f024 0403 	bic.w	r4, r4, #3
 8014f8c:	42a0      	cmp	r0, r4
 8014f8e:	d0e3      	beq.n	8014f58 <_malloc_r+0x64>
 8014f90:	1a21      	subs	r1, r4, r0
 8014f92:	4630      	mov	r0, r6
 8014f94:	f000 fcca 	bl	801592c <_sbrk_r>
 8014f98:	3001      	adds	r0, #1
 8014f9a:	d1dd      	bne.n	8014f58 <_malloc_r+0x64>
 8014f9c:	e7cf      	b.n	8014f3e <_malloc_r+0x4a>
 8014f9e:	bf00      	nop
 8014fa0:	20000524 	.word	0x20000524
 8014fa4:	20000528 	.word	0x20000528

08014fa8 <__cvt>:
 8014fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fac:	ec55 4b10 	vmov	r4, r5, d0
 8014fb0:	2d00      	cmp	r5, #0
 8014fb2:	460e      	mov	r6, r1
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	462b      	mov	r3, r5
 8014fb8:	bfbb      	ittet	lt
 8014fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014fbe:	461d      	movlt	r5, r3
 8014fc0:	2300      	movge	r3, #0
 8014fc2:	232d      	movlt	r3, #45	; 0x2d
 8014fc4:	700b      	strb	r3, [r1, #0]
 8014fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014fcc:	4691      	mov	r9, r2
 8014fce:	f023 0820 	bic.w	r8, r3, #32
 8014fd2:	bfbc      	itt	lt
 8014fd4:	4622      	movlt	r2, r4
 8014fd6:	4614      	movlt	r4, r2
 8014fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014fdc:	d005      	beq.n	8014fea <__cvt+0x42>
 8014fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014fe2:	d100      	bne.n	8014fe6 <__cvt+0x3e>
 8014fe4:	3601      	adds	r6, #1
 8014fe6:	2102      	movs	r1, #2
 8014fe8:	e000      	b.n	8014fec <__cvt+0x44>
 8014fea:	2103      	movs	r1, #3
 8014fec:	ab03      	add	r3, sp, #12
 8014fee:	9301      	str	r3, [sp, #4]
 8014ff0:	ab02      	add	r3, sp, #8
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	ec45 4b10 	vmov	d0, r4, r5
 8014ff8:	4653      	mov	r3, sl
 8014ffa:	4632      	mov	r2, r6
 8014ffc:	f000 fe3c 	bl	8015c78 <_dtoa_r>
 8015000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015004:	4607      	mov	r7, r0
 8015006:	d102      	bne.n	801500e <__cvt+0x66>
 8015008:	f019 0f01 	tst.w	r9, #1
 801500c:	d022      	beq.n	8015054 <__cvt+0xac>
 801500e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015012:	eb07 0906 	add.w	r9, r7, r6
 8015016:	d110      	bne.n	801503a <__cvt+0x92>
 8015018:	783b      	ldrb	r3, [r7, #0]
 801501a:	2b30      	cmp	r3, #48	; 0x30
 801501c:	d10a      	bne.n	8015034 <__cvt+0x8c>
 801501e:	2200      	movs	r2, #0
 8015020:	2300      	movs	r3, #0
 8015022:	4620      	mov	r0, r4
 8015024:	4629      	mov	r1, r5
 8015026:	f7eb fd5f 	bl	8000ae8 <__aeabi_dcmpeq>
 801502a:	b918      	cbnz	r0, 8015034 <__cvt+0x8c>
 801502c:	f1c6 0601 	rsb	r6, r6, #1
 8015030:	f8ca 6000 	str.w	r6, [sl]
 8015034:	f8da 3000 	ldr.w	r3, [sl]
 8015038:	4499      	add	r9, r3
 801503a:	2200      	movs	r2, #0
 801503c:	2300      	movs	r3, #0
 801503e:	4620      	mov	r0, r4
 8015040:	4629      	mov	r1, r5
 8015042:	f7eb fd51 	bl	8000ae8 <__aeabi_dcmpeq>
 8015046:	b108      	cbz	r0, 801504c <__cvt+0xa4>
 8015048:	f8cd 900c 	str.w	r9, [sp, #12]
 801504c:	2230      	movs	r2, #48	; 0x30
 801504e:	9b03      	ldr	r3, [sp, #12]
 8015050:	454b      	cmp	r3, r9
 8015052:	d307      	bcc.n	8015064 <__cvt+0xbc>
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015058:	1bdb      	subs	r3, r3, r7
 801505a:	4638      	mov	r0, r7
 801505c:	6013      	str	r3, [r2, #0]
 801505e:	b004      	add	sp, #16
 8015060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015064:	1c59      	adds	r1, r3, #1
 8015066:	9103      	str	r1, [sp, #12]
 8015068:	701a      	strb	r2, [r3, #0]
 801506a:	e7f0      	b.n	801504e <__cvt+0xa6>

0801506c <__exponent>:
 801506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801506e:	4603      	mov	r3, r0
 8015070:	2900      	cmp	r1, #0
 8015072:	bfb8      	it	lt
 8015074:	4249      	neglt	r1, r1
 8015076:	f803 2b02 	strb.w	r2, [r3], #2
 801507a:	bfb4      	ite	lt
 801507c:	222d      	movlt	r2, #45	; 0x2d
 801507e:	222b      	movge	r2, #43	; 0x2b
 8015080:	2909      	cmp	r1, #9
 8015082:	7042      	strb	r2, [r0, #1]
 8015084:	dd2a      	ble.n	80150dc <__exponent+0x70>
 8015086:	f10d 0407 	add.w	r4, sp, #7
 801508a:	46a4      	mov	ip, r4
 801508c:	270a      	movs	r7, #10
 801508e:	46a6      	mov	lr, r4
 8015090:	460a      	mov	r2, r1
 8015092:	fb91 f6f7 	sdiv	r6, r1, r7
 8015096:	fb07 1516 	mls	r5, r7, r6, r1
 801509a:	3530      	adds	r5, #48	; 0x30
 801509c:	2a63      	cmp	r2, #99	; 0x63
 801509e:	f104 34ff 	add.w	r4, r4, #4294967295
 80150a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80150a6:	4631      	mov	r1, r6
 80150a8:	dcf1      	bgt.n	801508e <__exponent+0x22>
 80150aa:	3130      	adds	r1, #48	; 0x30
 80150ac:	f1ae 0502 	sub.w	r5, lr, #2
 80150b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80150b4:	1c44      	adds	r4, r0, #1
 80150b6:	4629      	mov	r1, r5
 80150b8:	4561      	cmp	r1, ip
 80150ba:	d30a      	bcc.n	80150d2 <__exponent+0x66>
 80150bc:	f10d 0209 	add.w	r2, sp, #9
 80150c0:	eba2 020e 	sub.w	r2, r2, lr
 80150c4:	4565      	cmp	r5, ip
 80150c6:	bf88      	it	hi
 80150c8:	2200      	movhi	r2, #0
 80150ca:	4413      	add	r3, r2
 80150cc:	1a18      	subs	r0, r3, r0
 80150ce:	b003      	add	sp, #12
 80150d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80150da:	e7ed      	b.n	80150b8 <__exponent+0x4c>
 80150dc:	2330      	movs	r3, #48	; 0x30
 80150de:	3130      	adds	r1, #48	; 0x30
 80150e0:	7083      	strb	r3, [r0, #2]
 80150e2:	70c1      	strb	r1, [r0, #3]
 80150e4:	1d03      	adds	r3, r0, #4
 80150e6:	e7f1      	b.n	80150cc <__exponent+0x60>

080150e8 <_printf_float>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	ed2d 8b02 	vpush	{d8}
 80150f0:	b08d      	sub	sp, #52	; 0x34
 80150f2:	460c      	mov	r4, r1
 80150f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80150f8:	4616      	mov	r6, r2
 80150fa:	461f      	mov	r7, r3
 80150fc:	4605      	mov	r5, r0
 80150fe:	f001 fcb5 	bl	8016a6c <_localeconv_r>
 8015102:	f8d0 a000 	ldr.w	sl, [r0]
 8015106:	4650      	mov	r0, sl
 8015108:	f7eb f86c 	bl	80001e4 <strlen>
 801510c:	2300      	movs	r3, #0
 801510e:	930a      	str	r3, [sp, #40]	; 0x28
 8015110:	6823      	ldr	r3, [r4, #0]
 8015112:	9305      	str	r3, [sp, #20]
 8015114:	f8d8 3000 	ldr.w	r3, [r8]
 8015118:	f894 b018 	ldrb.w	fp, [r4, #24]
 801511c:	3307      	adds	r3, #7
 801511e:	f023 0307 	bic.w	r3, r3, #7
 8015122:	f103 0208 	add.w	r2, r3, #8
 8015126:	f8c8 2000 	str.w	r2, [r8]
 801512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801512e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801513a:	9307      	str	r3, [sp, #28]
 801513c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015140:	ee08 0a10 	vmov	s16, r0
 8015144:	4b9f      	ldr	r3, [pc, #636]	; (80153c4 <_printf_float+0x2dc>)
 8015146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801514a:	f04f 32ff 	mov.w	r2, #4294967295
 801514e:	f7eb fcfd 	bl	8000b4c <__aeabi_dcmpun>
 8015152:	bb88      	cbnz	r0, 80151b8 <_printf_float+0xd0>
 8015154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015158:	4b9a      	ldr	r3, [pc, #616]	; (80153c4 <_printf_float+0x2dc>)
 801515a:	f04f 32ff 	mov.w	r2, #4294967295
 801515e:	f7eb fcd7 	bl	8000b10 <__aeabi_dcmple>
 8015162:	bb48      	cbnz	r0, 80151b8 <_printf_float+0xd0>
 8015164:	2200      	movs	r2, #0
 8015166:	2300      	movs	r3, #0
 8015168:	4640      	mov	r0, r8
 801516a:	4649      	mov	r1, r9
 801516c:	f7eb fcc6 	bl	8000afc <__aeabi_dcmplt>
 8015170:	b110      	cbz	r0, 8015178 <_printf_float+0x90>
 8015172:	232d      	movs	r3, #45	; 0x2d
 8015174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015178:	4b93      	ldr	r3, [pc, #588]	; (80153c8 <_printf_float+0x2e0>)
 801517a:	4894      	ldr	r0, [pc, #592]	; (80153cc <_printf_float+0x2e4>)
 801517c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015180:	bf94      	ite	ls
 8015182:	4698      	movls	r8, r3
 8015184:	4680      	movhi	r8, r0
 8015186:	2303      	movs	r3, #3
 8015188:	6123      	str	r3, [r4, #16]
 801518a:	9b05      	ldr	r3, [sp, #20]
 801518c:	f023 0204 	bic.w	r2, r3, #4
 8015190:	6022      	str	r2, [r4, #0]
 8015192:	f04f 0900 	mov.w	r9, #0
 8015196:	9700      	str	r7, [sp, #0]
 8015198:	4633      	mov	r3, r6
 801519a:	aa0b      	add	r2, sp, #44	; 0x2c
 801519c:	4621      	mov	r1, r4
 801519e:	4628      	mov	r0, r5
 80151a0:	f000 f9d8 	bl	8015554 <_printf_common>
 80151a4:	3001      	adds	r0, #1
 80151a6:	f040 8090 	bne.w	80152ca <_printf_float+0x1e2>
 80151aa:	f04f 30ff 	mov.w	r0, #4294967295
 80151ae:	b00d      	add	sp, #52	; 0x34
 80151b0:	ecbd 8b02 	vpop	{d8}
 80151b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b8:	4642      	mov	r2, r8
 80151ba:	464b      	mov	r3, r9
 80151bc:	4640      	mov	r0, r8
 80151be:	4649      	mov	r1, r9
 80151c0:	f7eb fcc4 	bl	8000b4c <__aeabi_dcmpun>
 80151c4:	b140      	cbz	r0, 80151d8 <_printf_float+0xf0>
 80151c6:	464b      	mov	r3, r9
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	bfbc      	itt	lt
 80151cc:	232d      	movlt	r3, #45	; 0x2d
 80151ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80151d2:	487f      	ldr	r0, [pc, #508]	; (80153d0 <_printf_float+0x2e8>)
 80151d4:	4b7f      	ldr	r3, [pc, #508]	; (80153d4 <_printf_float+0x2ec>)
 80151d6:	e7d1      	b.n	801517c <_printf_float+0x94>
 80151d8:	6863      	ldr	r3, [r4, #4]
 80151da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80151de:	9206      	str	r2, [sp, #24]
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	d13f      	bne.n	8015264 <_printf_float+0x17c>
 80151e4:	2306      	movs	r3, #6
 80151e6:	6063      	str	r3, [r4, #4]
 80151e8:	9b05      	ldr	r3, [sp, #20]
 80151ea:	6861      	ldr	r1, [r4, #4]
 80151ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80151f0:	2300      	movs	r3, #0
 80151f2:	9303      	str	r3, [sp, #12]
 80151f4:	ab0a      	add	r3, sp, #40	; 0x28
 80151f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80151fa:	ab09      	add	r3, sp, #36	; 0x24
 80151fc:	ec49 8b10 	vmov	d0, r8, r9
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	6022      	str	r2, [r4, #0]
 8015204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015208:	4628      	mov	r0, r5
 801520a:	f7ff fecd 	bl	8014fa8 <__cvt>
 801520e:	9b06      	ldr	r3, [sp, #24]
 8015210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015212:	2b47      	cmp	r3, #71	; 0x47
 8015214:	4680      	mov	r8, r0
 8015216:	d108      	bne.n	801522a <_printf_float+0x142>
 8015218:	1cc8      	adds	r0, r1, #3
 801521a:	db02      	blt.n	8015222 <_printf_float+0x13a>
 801521c:	6863      	ldr	r3, [r4, #4]
 801521e:	4299      	cmp	r1, r3
 8015220:	dd41      	ble.n	80152a6 <_printf_float+0x1be>
 8015222:	f1ab 0b02 	sub.w	fp, fp, #2
 8015226:	fa5f fb8b 	uxtb.w	fp, fp
 801522a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801522e:	d820      	bhi.n	8015272 <_printf_float+0x18a>
 8015230:	3901      	subs	r1, #1
 8015232:	465a      	mov	r2, fp
 8015234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015238:	9109      	str	r1, [sp, #36]	; 0x24
 801523a:	f7ff ff17 	bl	801506c <__exponent>
 801523e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015240:	1813      	adds	r3, r2, r0
 8015242:	2a01      	cmp	r2, #1
 8015244:	4681      	mov	r9, r0
 8015246:	6123      	str	r3, [r4, #16]
 8015248:	dc02      	bgt.n	8015250 <_printf_float+0x168>
 801524a:	6822      	ldr	r2, [r4, #0]
 801524c:	07d2      	lsls	r2, r2, #31
 801524e:	d501      	bpl.n	8015254 <_printf_float+0x16c>
 8015250:	3301      	adds	r3, #1
 8015252:	6123      	str	r3, [r4, #16]
 8015254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015258:	2b00      	cmp	r3, #0
 801525a:	d09c      	beq.n	8015196 <_printf_float+0xae>
 801525c:	232d      	movs	r3, #45	; 0x2d
 801525e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015262:	e798      	b.n	8015196 <_printf_float+0xae>
 8015264:	9a06      	ldr	r2, [sp, #24]
 8015266:	2a47      	cmp	r2, #71	; 0x47
 8015268:	d1be      	bne.n	80151e8 <_printf_float+0x100>
 801526a:	2b00      	cmp	r3, #0
 801526c:	d1bc      	bne.n	80151e8 <_printf_float+0x100>
 801526e:	2301      	movs	r3, #1
 8015270:	e7b9      	b.n	80151e6 <_printf_float+0xfe>
 8015272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015276:	d118      	bne.n	80152aa <_printf_float+0x1c2>
 8015278:	2900      	cmp	r1, #0
 801527a:	6863      	ldr	r3, [r4, #4]
 801527c:	dd0b      	ble.n	8015296 <_printf_float+0x1ae>
 801527e:	6121      	str	r1, [r4, #16]
 8015280:	b913      	cbnz	r3, 8015288 <_printf_float+0x1a0>
 8015282:	6822      	ldr	r2, [r4, #0]
 8015284:	07d0      	lsls	r0, r2, #31
 8015286:	d502      	bpl.n	801528e <_printf_float+0x1a6>
 8015288:	3301      	adds	r3, #1
 801528a:	440b      	add	r3, r1
 801528c:	6123      	str	r3, [r4, #16]
 801528e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015290:	f04f 0900 	mov.w	r9, #0
 8015294:	e7de      	b.n	8015254 <_printf_float+0x16c>
 8015296:	b913      	cbnz	r3, 801529e <_printf_float+0x1b6>
 8015298:	6822      	ldr	r2, [r4, #0]
 801529a:	07d2      	lsls	r2, r2, #31
 801529c:	d501      	bpl.n	80152a2 <_printf_float+0x1ba>
 801529e:	3302      	adds	r3, #2
 80152a0:	e7f4      	b.n	801528c <_printf_float+0x1a4>
 80152a2:	2301      	movs	r3, #1
 80152a4:	e7f2      	b.n	801528c <_printf_float+0x1a4>
 80152a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80152aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ac:	4299      	cmp	r1, r3
 80152ae:	db05      	blt.n	80152bc <_printf_float+0x1d4>
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	6121      	str	r1, [r4, #16]
 80152b4:	07d8      	lsls	r0, r3, #31
 80152b6:	d5ea      	bpl.n	801528e <_printf_float+0x1a6>
 80152b8:	1c4b      	adds	r3, r1, #1
 80152ba:	e7e7      	b.n	801528c <_printf_float+0x1a4>
 80152bc:	2900      	cmp	r1, #0
 80152be:	bfd4      	ite	le
 80152c0:	f1c1 0202 	rsble	r2, r1, #2
 80152c4:	2201      	movgt	r2, #1
 80152c6:	4413      	add	r3, r2
 80152c8:	e7e0      	b.n	801528c <_printf_float+0x1a4>
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	055a      	lsls	r2, r3, #21
 80152ce:	d407      	bmi.n	80152e0 <_printf_float+0x1f8>
 80152d0:	6923      	ldr	r3, [r4, #16]
 80152d2:	4642      	mov	r2, r8
 80152d4:	4631      	mov	r1, r6
 80152d6:	4628      	mov	r0, r5
 80152d8:	47b8      	blx	r7
 80152da:	3001      	adds	r0, #1
 80152dc:	d12c      	bne.n	8015338 <_printf_float+0x250>
 80152de:	e764      	b.n	80151aa <_printf_float+0xc2>
 80152e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80152e4:	f240 80e0 	bls.w	80154a8 <_printf_float+0x3c0>
 80152e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80152ec:	2200      	movs	r2, #0
 80152ee:	2300      	movs	r3, #0
 80152f0:	f7eb fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d034      	beq.n	8015362 <_printf_float+0x27a>
 80152f8:	4a37      	ldr	r2, [pc, #220]	; (80153d8 <_printf_float+0x2f0>)
 80152fa:	2301      	movs	r3, #1
 80152fc:	4631      	mov	r1, r6
 80152fe:	4628      	mov	r0, r5
 8015300:	47b8      	blx	r7
 8015302:	3001      	adds	r0, #1
 8015304:	f43f af51 	beq.w	80151aa <_printf_float+0xc2>
 8015308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801530c:	429a      	cmp	r2, r3
 801530e:	db02      	blt.n	8015316 <_printf_float+0x22e>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	07d8      	lsls	r0, r3, #31
 8015314:	d510      	bpl.n	8015338 <_printf_float+0x250>
 8015316:	ee18 3a10 	vmov	r3, s16
 801531a:	4652      	mov	r2, sl
 801531c:	4631      	mov	r1, r6
 801531e:	4628      	mov	r0, r5
 8015320:	47b8      	blx	r7
 8015322:	3001      	adds	r0, #1
 8015324:	f43f af41 	beq.w	80151aa <_printf_float+0xc2>
 8015328:	f04f 0800 	mov.w	r8, #0
 801532c:	f104 091a 	add.w	r9, r4, #26
 8015330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015332:	3b01      	subs	r3, #1
 8015334:	4543      	cmp	r3, r8
 8015336:	dc09      	bgt.n	801534c <_printf_float+0x264>
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	079b      	lsls	r3, r3, #30
 801533c:	f100 8105 	bmi.w	801554a <_printf_float+0x462>
 8015340:	68e0      	ldr	r0, [r4, #12]
 8015342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015344:	4298      	cmp	r0, r3
 8015346:	bfb8      	it	lt
 8015348:	4618      	movlt	r0, r3
 801534a:	e730      	b.n	80151ae <_printf_float+0xc6>
 801534c:	2301      	movs	r3, #1
 801534e:	464a      	mov	r2, r9
 8015350:	4631      	mov	r1, r6
 8015352:	4628      	mov	r0, r5
 8015354:	47b8      	blx	r7
 8015356:	3001      	adds	r0, #1
 8015358:	f43f af27 	beq.w	80151aa <_printf_float+0xc2>
 801535c:	f108 0801 	add.w	r8, r8, #1
 8015360:	e7e6      	b.n	8015330 <_printf_float+0x248>
 8015362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	dc39      	bgt.n	80153dc <_printf_float+0x2f4>
 8015368:	4a1b      	ldr	r2, [pc, #108]	; (80153d8 <_printf_float+0x2f0>)
 801536a:	2301      	movs	r3, #1
 801536c:	4631      	mov	r1, r6
 801536e:	4628      	mov	r0, r5
 8015370:	47b8      	blx	r7
 8015372:	3001      	adds	r0, #1
 8015374:	f43f af19 	beq.w	80151aa <_printf_float+0xc2>
 8015378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801537c:	4313      	orrs	r3, r2
 801537e:	d102      	bne.n	8015386 <_printf_float+0x29e>
 8015380:	6823      	ldr	r3, [r4, #0]
 8015382:	07d9      	lsls	r1, r3, #31
 8015384:	d5d8      	bpl.n	8015338 <_printf_float+0x250>
 8015386:	ee18 3a10 	vmov	r3, s16
 801538a:	4652      	mov	r2, sl
 801538c:	4631      	mov	r1, r6
 801538e:	4628      	mov	r0, r5
 8015390:	47b8      	blx	r7
 8015392:	3001      	adds	r0, #1
 8015394:	f43f af09 	beq.w	80151aa <_printf_float+0xc2>
 8015398:	f04f 0900 	mov.w	r9, #0
 801539c:	f104 0a1a 	add.w	sl, r4, #26
 80153a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a2:	425b      	negs	r3, r3
 80153a4:	454b      	cmp	r3, r9
 80153a6:	dc01      	bgt.n	80153ac <_printf_float+0x2c4>
 80153a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153aa:	e792      	b.n	80152d2 <_printf_float+0x1ea>
 80153ac:	2301      	movs	r3, #1
 80153ae:	4652      	mov	r2, sl
 80153b0:	4631      	mov	r1, r6
 80153b2:	4628      	mov	r0, r5
 80153b4:	47b8      	blx	r7
 80153b6:	3001      	adds	r0, #1
 80153b8:	f43f aef7 	beq.w	80151aa <_printf_float+0xc2>
 80153bc:	f109 0901 	add.w	r9, r9, #1
 80153c0:	e7ee      	b.n	80153a0 <_printf_float+0x2b8>
 80153c2:	bf00      	nop
 80153c4:	7fefffff 	.word	0x7fefffff
 80153c8:	0801c1d4 	.word	0x0801c1d4
 80153cc:	0801c1d8 	.word	0x0801c1d8
 80153d0:	0801c1e0 	.word	0x0801c1e0
 80153d4:	0801c1dc 	.word	0x0801c1dc
 80153d8:	0801c1e4 	.word	0x0801c1e4
 80153dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80153e0:	429a      	cmp	r2, r3
 80153e2:	bfa8      	it	ge
 80153e4:	461a      	movge	r2, r3
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	4691      	mov	r9, r2
 80153ea:	dc37      	bgt.n	801545c <_printf_float+0x374>
 80153ec:	f04f 0b00 	mov.w	fp, #0
 80153f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80153f4:	f104 021a 	add.w	r2, r4, #26
 80153f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80153fa:	9305      	str	r3, [sp, #20]
 80153fc:	eba3 0309 	sub.w	r3, r3, r9
 8015400:	455b      	cmp	r3, fp
 8015402:	dc33      	bgt.n	801546c <_printf_float+0x384>
 8015404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015408:	429a      	cmp	r2, r3
 801540a:	db3b      	blt.n	8015484 <_printf_float+0x39c>
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	07da      	lsls	r2, r3, #31
 8015410:	d438      	bmi.n	8015484 <_printf_float+0x39c>
 8015412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015414:	9b05      	ldr	r3, [sp, #20]
 8015416:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	eba2 0901 	sub.w	r9, r2, r1
 801541e:	4599      	cmp	r9, r3
 8015420:	bfa8      	it	ge
 8015422:	4699      	movge	r9, r3
 8015424:	f1b9 0f00 	cmp.w	r9, #0
 8015428:	dc35      	bgt.n	8015496 <_printf_float+0x3ae>
 801542a:	f04f 0800 	mov.w	r8, #0
 801542e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015432:	f104 0a1a 	add.w	sl, r4, #26
 8015436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801543a:	1a9b      	subs	r3, r3, r2
 801543c:	eba3 0309 	sub.w	r3, r3, r9
 8015440:	4543      	cmp	r3, r8
 8015442:	f77f af79 	ble.w	8015338 <_printf_float+0x250>
 8015446:	2301      	movs	r3, #1
 8015448:	4652      	mov	r2, sl
 801544a:	4631      	mov	r1, r6
 801544c:	4628      	mov	r0, r5
 801544e:	47b8      	blx	r7
 8015450:	3001      	adds	r0, #1
 8015452:	f43f aeaa 	beq.w	80151aa <_printf_float+0xc2>
 8015456:	f108 0801 	add.w	r8, r8, #1
 801545a:	e7ec      	b.n	8015436 <_printf_float+0x34e>
 801545c:	4613      	mov	r3, r2
 801545e:	4631      	mov	r1, r6
 8015460:	4642      	mov	r2, r8
 8015462:	4628      	mov	r0, r5
 8015464:	47b8      	blx	r7
 8015466:	3001      	adds	r0, #1
 8015468:	d1c0      	bne.n	80153ec <_printf_float+0x304>
 801546a:	e69e      	b.n	80151aa <_printf_float+0xc2>
 801546c:	2301      	movs	r3, #1
 801546e:	4631      	mov	r1, r6
 8015470:	4628      	mov	r0, r5
 8015472:	9205      	str	r2, [sp, #20]
 8015474:	47b8      	blx	r7
 8015476:	3001      	adds	r0, #1
 8015478:	f43f ae97 	beq.w	80151aa <_printf_float+0xc2>
 801547c:	9a05      	ldr	r2, [sp, #20]
 801547e:	f10b 0b01 	add.w	fp, fp, #1
 8015482:	e7b9      	b.n	80153f8 <_printf_float+0x310>
 8015484:	ee18 3a10 	vmov	r3, s16
 8015488:	4652      	mov	r2, sl
 801548a:	4631      	mov	r1, r6
 801548c:	4628      	mov	r0, r5
 801548e:	47b8      	blx	r7
 8015490:	3001      	adds	r0, #1
 8015492:	d1be      	bne.n	8015412 <_printf_float+0x32a>
 8015494:	e689      	b.n	80151aa <_printf_float+0xc2>
 8015496:	9a05      	ldr	r2, [sp, #20]
 8015498:	464b      	mov	r3, r9
 801549a:	4442      	add	r2, r8
 801549c:	4631      	mov	r1, r6
 801549e:	4628      	mov	r0, r5
 80154a0:	47b8      	blx	r7
 80154a2:	3001      	adds	r0, #1
 80154a4:	d1c1      	bne.n	801542a <_printf_float+0x342>
 80154a6:	e680      	b.n	80151aa <_printf_float+0xc2>
 80154a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154aa:	2a01      	cmp	r2, #1
 80154ac:	dc01      	bgt.n	80154b2 <_printf_float+0x3ca>
 80154ae:	07db      	lsls	r3, r3, #31
 80154b0:	d538      	bpl.n	8015524 <_printf_float+0x43c>
 80154b2:	2301      	movs	r3, #1
 80154b4:	4642      	mov	r2, r8
 80154b6:	4631      	mov	r1, r6
 80154b8:	4628      	mov	r0, r5
 80154ba:	47b8      	blx	r7
 80154bc:	3001      	adds	r0, #1
 80154be:	f43f ae74 	beq.w	80151aa <_printf_float+0xc2>
 80154c2:	ee18 3a10 	vmov	r3, s16
 80154c6:	4652      	mov	r2, sl
 80154c8:	4631      	mov	r1, r6
 80154ca:	4628      	mov	r0, r5
 80154cc:	47b8      	blx	r7
 80154ce:	3001      	adds	r0, #1
 80154d0:	f43f ae6b 	beq.w	80151aa <_printf_float+0xc2>
 80154d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80154d8:	2200      	movs	r2, #0
 80154da:	2300      	movs	r3, #0
 80154dc:	f7eb fb04 	bl	8000ae8 <__aeabi_dcmpeq>
 80154e0:	b9d8      	cbnz	r0, 801551a <_printf_float+0x432>
 80154e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e4:	f108 0201 	add.w	r2, r8, #1
 80154e8:	3b01      	subs	r3, #1
 80154ea:	4631      	mov	r1, r6
 80154ec:	4628      	mov	r0, r5
 80154ee:	47b8      	blx	r7
 80154f0:	3001      	adds	r0, #1
 80154f2:	d10e      	bne.n	8015512 <_printf_float+0x42a>
 80154f4:	e659      	b.n	80151aa <_printf_float+0xc2>
 80154f6:	2301      	movs	r3, #1
 80154f8:	4652      	mov	r2, sl
 80154fa:	4631      	mov	r1, r6
 80154fc:	4628      	mov	r0, r5
 80154fe:	47b8      	blx	r7
 8015500:	3001      	adds	r0, #1
 8015502:	f43f ae52 	beq.w	80151aa <_printf_float+0xc2>
 8015506:	f108 0801 	add.w	r8, r8, #1
 801550a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801550c:	3b01      	subs	r3, #1
 801550e:	4543      	cmp	r3, r8
 8015510:	dcf1      	bgt.n	80154f6 <_printf_float+0x40e>
 8015512:	464b      	mov	r3, r9
 8015514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015518:	e6dc      	b.n	80152d4 <_printf_float+0x1ec>
 801551a:	f04f 0800 	mov.w	r8, #0
 801551e:	f104 0a1a 	add.w	sl, r4, #26
 8015522:	e7f2      	b.n	801550a <_printf_float+0x422>
 8015524:	2301      	movs	r3, #1
 8015526:	4642      	mov	r2, r8
 8015528:	e7df      	b.n	80154ea <_printf_float+0x402>
 801552a:	2301      	movs	r3, #1
 801552c:	464a      	mov	r2, r9
 801552e:	4631      	mov	r1, r6
 8015530:	4628      	mov	r0, r5
 8015532:	47b8      	blx	r7
 8015534:	3001      	adds	r0, #1
 8015536:	f43f ae38 	beq.w	80151aa <_printf_float+0xc2>
 801553a:	f108 0801 	add.w	r8, r8, #1
 801553e:	68e3      	ldr	r3, [r4, #12]
 8015540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015542:	1a5b      	subs	r3, r3, r1
 8015544:	4543      	cmp	r3, r8
 8015546:	dcf0      	bgt.n	801552a <_printf_float+0x442>
 8015548:	e6fa      	b.n	8015340 <_printf_float+0x258>
 801554a:	f04f 0800 	mov.w	r8, #0
 801554e:	f104 0919 	add.w	r9, r4, #25
 8015552:	e7f4      	b.n	801553e <_printf_float+0x456>

08015554 <_printf_common>:
 8015554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015558:	4616      	mov	r6, r2
 801555a:	4699      	mov	r9, r3
 801555c:	688a      	ldr	r2, [r1, #8]
 801555e:	690b      	ldr	r3, [r1, #16]
 8015560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015564:	4293      	cmp	r3, r2
 8015566:	bfb8      	it	lt
 8015568:	4613      	movlt	r3, r2
 801556a:	6033      	str	r3, [r6, #0]
 801556c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015570:	4607      	mov	r7, r0
 8015572:	460c      	mov	r4, r1
 8015574:	b10a      	cbz	r2, 801557a <_printf_common+0x26>
 8015576:	3301      	adds	r3, #1
 8015578:	6033      	str	r3, [r6, #0]
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	0699      	lsls	r1, r3, #26
 801557e:	bf42      	ittt	mi
 8015580:	6833      	ldrmi	r3, [r6, #0]
 8015582:	3302      	addmi	r3, #2
 8015584:	6033      	strmi	r3, [r6, #0]
 8015586:	6825      	ldr	r5, [r4, #0]
 8015588:	f015 0506 	ands.w	r5, r5, #6
 801558c:	d106      	bne.n	801559c <_printf_common+0x48>
 801558e:	f104 0a19 	add.w	sl, r4, #25
 8015592:	68e3      	ldr	r3, [r4, #12]
 8015594:	6832      	ldr	r2, [r6, #0]
 8015596:	1a9b      	subs	r3, r3, r2
 8015598:	42ab      	cmp	r3, r5
 801559a:	dc26      	bgt.n	80155ea <_printf_common+0x96>
 801559c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80155a0:	1e13      	subs	r3, r2, #0
 80155a2:	6822      	ldr	r2, [r4, #0]
 80155a4:	bf18      	it	ne
 80155a6:	2301      	movne	r3, #1
 80155a8:	0692      	lsls	r2, r2, #26
 80155aa:	d42b      	bmi.n	8015604 <_printf_common+0xb0>
 80155ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80155b0:	4649      	mov	r1, r9
 80155b2:	4638      	mov	r0, r7
 80155b4:	47c0      	blx	r8
 80155b6:	3001      	adds	r0, #1
 80155b8:	d01e      	beq.n	80155f8 <_printf_common+0xa4>
 80155ba:	6823      	ldr	r3, [r4, #0]
 80155bc:	68e5      	ldr	r5, [r4, #12]
 80155be:	6832      	ldr	r2, [r6, #0]
 80155c0:	f003 0306 	and.w	r3, r3, #6
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	bf08      	it	eq
 80155c8:	1aad      	subeq	r5, r5, r2
 80155ca:	68a3      	ldr	r3, [r4, #8]
 80155cc:	6922      	ldr	r2, [r4, #16]
 80155ce:	bf0c      	ite	eq
 80155d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80155d4:	2500      	movne	r5, #0
 80155d6:	4293      	cmp	r3, r2
 80155d8:	bfc4      	itt	gt
 80155da:	1a9b      	subgt	r3, r3, r2
 80155dc:	18ed      	addgt	r5, r5, r3
 80155de:	2600      	movs	r6, #0
 80155e0:	341a      	adds	r4, #26
 80155e2:	42b5      	cmp	r5, r6
 80155e4:	d11a      	bne.n	801561c <_printf_common+0xc8>
 80155e6:	2000      	movs	r0, #0
 80155e8:	e008      	b.n	80155fc <_printf_common+0xa8>
 80155ea:	2301      	movs	r3, #1
 80155ec:	4652      	mov	r2, sl
 80155ee:	4649      	mov	r1, r9
 80155f0:	4638      	mov	r0, r7
 80155f2:	47c0      	blx	r8
 80155f4:	3001      	adds	r0, #1
 80155f6:	d103      	bne.n	8015600 <_printf_common+0xac>
 80155f8:	f04f 30ff 	mov.w	r0, #4294967295
 80155fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015600:	3501      	adds	r5, #1
 8015602:	e7c6      	b.n	8015592 <_printf_common+0x3e>
 8015604:	18e1      	adds	r1, r4, r3
 8015606:	1c5a      	adds	r2, r3, #1
 8015608:	2030      	movs	r0, #48	; 0x30
 801560a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801560e:	4422      	add	r2, r4
 8015610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015618:	3302      	adds	r3, #2
 801561a:	e7c7      	b.n	80155ac <_printf_common+0x58>
 801561c:	2301      	movs	r3, #1
 801561e:	4622      	mov	r2, r4
 8015620:	4649      	mov	r1, r9
 8015622:	4638      	mov	r0, r7
 8015624:	47c0      	blx	r8
 8015626:	3001      	adds	r0, #1
 8015628:	d0e6      	beq.n	80155f8 <_printf_common+0xa4>
 801562a:	3601      	adds	r6, #1
 801562c:	e7d9      	b.n	80155e2 <_printf_common+0x8e>
	...

08015630 <_printf_i>:
 8015630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015634:	460c      	mov	r4, r1
 8015636:	4691      	mov	r9, r2
 8015638:	7e27      	ldrb	r7, [r4, #24]
 801563a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801563c:	2f78      	cmp	r7, #120	; 0x78
 801563e:	4680      	mov	r8, r0
 8015640:	469a      	mov	sl, r3
 8015642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015646:	d807      	bhi.n	8015658 <_printf_i+0x28>
 8015648:	2f62      	cmp	r7, #98	; 0x62
 801564a:	d80a      	bhi.n	8015662 <_printf_i+0x32>
 801564c:	2f00      	cmp	r7, #0
 801564e:	f000 80d8 	beq.w	8015802 <_printf_i+0x1d2>
 8015652:	2f58      	cmp	r7, #88	; 0x58
 8015654:	f000 80a3 	beq.w	801579e <_printf_i+0x16e>
 8015658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801565c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015660:	e03a      	b.n	80156d8 <_printf_i+0xa8>
 8015662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015666:	2b15      	cmp	r3, #21
 8015668:	d8f6      	bhi.n	8015658 <_printf_i+0x28>
 801566a:	a001      	add	r0, pc, #4	; (adr r0, 8015670 <_printf_i+0x40>)
 801566c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015670:	080156c9 	.word	0x080156c9
 8015674:	080156dd 	.word	0x080156dd
 8015678:	08015659 	.word	0x08015659
 801567c:	08015659 	.word	0x08015659
 8015680:	08015659 	.word	0x08015659
 8015684:	08015659 	.word	0x08015659
 8015688:	080156dd 	.word	0x080156dd
 801568c:	08015659 	.word	0x08015659
 8015690:	08015659 	.word	0x08015659
 8015694:	08015659 	.word	0x08015659
 8015698:	08015659 	.word	0x08015659
 801569c:	080157e9 	.word	0x080157e9
 80156a0:	0801570d 	.word	0x0801570d
 80156a4:	080157cb 	.word	0x080157cb
 80156a8:	08015659 	.word	0x08015659
 80156ac:	08015659 	.word	0x08015659
 80156b0:	0801580b 	.word	0x0801580b
 80156b4:	08015659 	.word	0x08015659
 80156b8:	0801570d 	.word	0x0801570d
 80156bc:	08015659 	.word	0x08015659
 80156c0:	08015659 	.word	0x08015659
 80156c4:	080157d3 	.word	0x080157d3
 80156c8:	680b      	ldr	r3, [r1, #0]
 80156ca:	1d1a      	adds	r2, r3, #4
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	600a      	str	r2, [r1, #0]
 80156d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80156d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80156d8:	2301      	movs	r3, #1
 80156da:	e0a3      	b.n	8015824 <_printf_i+0x1f4>
 80156dc:	6825      	ldr	r5, [r4, #0]
 80156de:	6808      	ldr	r0, [r1, #0]
 80156e0:	062e      	lsls	r6, r5, #24
 80156e2:	f100 0304 	add.w	r3, r0, #4
 80156e6:	d50a      	bpl.n	80156fe <_printf_i+0xce>
 80156e8:	6805      	ldr	r5, [r0, #0]
 80156ea:	600b      	str	r3, [r1, #0]
 80156ec:	2d00      	cmp	r5, #0
 80156ee:	da03      	bge.n	80156f8 <_printf_i+0xc8>
 80156f0:	232d      	movs	r3, #45	; 0x2d
 80156f2:	426d      	negs	r5, r5
 80156f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156f8:	485e      	ldr	r0, [pc, #376]	; (8015874 <_printf_i+0x244>)
 80156fa:	230a      	movs	r3, #10
 80156fc:	e019      	b.n	8015732 <_printf_i+0x102>
 80156fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015702:	6805      	ldr	r5, [r0, #0]
 8015704:	600b      	str	r3, [r1, #0]
 8015706:	bf18      	it	ne
 8015708:	b22d      	sxthne	r5, r5
 801570a:	e7ef      	b.n	80156ec <_printf_i+0xbc>
 801570c:	680b      	ldr	r3, [r1, #0]
 801570e:	6825      	ldr	r5, [r4, #0]
 8015710:	1d18      	adds	r0, r3, #4
 8015712:	6008      	str	r0, [r1, #0]
 8015714:	0628      	lsls	r0, r5, #24
 8015716:	d501      	bpl.n	801571c <_printf_i+0xec>
 8015718:	681d      	ldr	r5, [r3, #0]
 801571a:	e002      	b.n	8015722 <_printf_i+0xf2>
 801571c:	0669      	lsls	r1, r5, #25
 801571e:	d5fb      	bpl.n	8015718 <_printf_i+0xe8>
 8015720:	881d      	ldrh	r5, [r3, #0]
 8015722:	4854      	ldr	r0, [pc, #336]	; (8015874 <_printf_i+0x244>)
 8015724:	2f6f      	cmp	r7, #111	; 0x6f
 8015726:	bf0c      	ite	eq
 8015728:	2308      	moveq	r3, #8
 801572a:	230a      	movne	r3, #10
 801572c:	2100      	movs	r1, #0
 801572e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015732:	6866      	ldr	r6, [r4, #4]
 8015734:	60a6      	str	r6, [r4, #8]
 8015736:	2e00      	cmp	r6, #0
 8015738:	bfa2      	ittt	ge
 801573a:	6821      	ldrge	r1, [r4, #0]
 801573c:	f021 0104 	bicge.w	r1, r1, #4
 8015740:	6021      	strge	r1, [r4, #0]
 8015742:	b90d      	cbnz	r5, 8015748 <_printf_i+0x118>
 8015744:	2e00      	cmp	r6, #0
 8015746:	d04d      	beq.n	80157e4 <_printf_i+0x1b4>
 8015748:	4616      	mov	r6, r2
 801574a:	fbb5 f1f3 	udiv	r1, r5, r3
 801574e:	fb03 5711 	mls	r7, r3, r1, r5
 8015752:	5dc7      	ldrb	r7, [r0, r7]
 8015754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015758:	462f      	mov	r7, r5
 801575a:	42bb      	cmp	r3, r7
 801575c:	460d      	mov	r5, r1
 801575e:	d9f4      	bls.n	801574a <_printf_i+0x11a>
 8015760:	2b08      	cmp	r3, #8
 8015762:	d10b      	bne.n	801577c <_printf_i+0x14c>
 8015764:	6823      	ldr	r3, [r4, #0]
 8015766:	07df      	lsls	r7, r3, #31
 8015768:	d508      	bpl.n	801577c <_printf_i+0x14c>
 801576a:	6923      	ldr	r3, [r4, #16]
 801576c:	6861      	ldr	r1, [r4, #4]
 801576e:	4299      	cmp	r1, r3
 8015770:	bfde      	ittt	le
 8015772:	2330      	movle	r3, #48	; 0x30
 8015774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015778:	f106 36ff 	addle.w	r6, r6, #4294967295
 801577c:	1b92      	subs	r2, r2, r6
 801577e:	6122      	str	r2, [r4, #16]
 8015780:	f8cd a000 	str.w	sl, [sp]
 8015784:	464b      	mov	r3, r9
 8015786:	aa03      	add	r2, sp, #12
 8015788:	4621      	mov	r1, r4
 801578a:	4640      	mov	r0, r8
 801578c:	f7ff fee2 	bl	8015554 <_printf_common>
 8015790:	3001      	adds	r0, #1
 8015792:	d14c      	bne.n	801582e <_printf_i+0x1fe>
 8015794:	f04f 30ff 	mov.w	r0, #4294967295
 8015798:	b004      	add	sp, #16
 801579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801579e:	4835      	ldr	r0, [pc, #212]	; (8015874 <_printf_i+0x244>)
 80157a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80157a4:	6823      	ldr	r3, [r4, #0]
 80157a6:	680e      	ldr	r6, [r1, #0]
 80157a8:	061f      	lsls	r7, r3, #24
 80157aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80157ae:	600e      	str	r6, [r1, #0]
 80157b0:	d514      	bpl.n	80157dc <_printf_i+0x1ac>
 80157b2:	07d9      	lsls	r1, r3, #31
 80157b4:	bf44      	itt	mi
 80157b6:	f043 0320 	orrmi.w	r3, r3, #32
 80157ba:	6023      	strmi	r3, [r4, #0]
 80157bc:	b91d      	cbnz	r5, 80157c6 <_printf_i+0x196>
 80157be:	6823      	ldr	r3, [r4, #0]
 80157c0:	f023 0320 	bic.w	r3, r3, #32
 80157c4:	6023      	str	r3, [r4, #0]
 80157c6:	2310      	movs	r3, #16
 80157c8:	e7b0      	b.n	801572c <_printf_i+0xfc>
 80157ca:	6823      	ldr	r3, [r4, #0]
 80157cc:	f043 0320 	orr.w	r3, r3, #32
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	2378      	movs	r3, #120	; 0x78
 80157d4:	4828      	ldr	r0, [pc, #160]	; (8015878 <_printf_i+0x248>)
 80157d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157da:	e7e3      	b.n	80157a4 <_printf_i+0x174>
 80157dc:	065e      	lsls	r6, r3, #25
 80157de:	bf48      	it	mi
 80157e0:	b2ad      	uxthmi	r5, r5
 80157e2:	e7e6      	b.n	80157b2 <_printf_i+0x182>
 80157e4:	4616      	mov	r6, r2
 80157e6:	e7bb      	b.n	8015760 <_printf_i+0x130>
 80157e8:	680b      	ldr	r3, [r1, #0]
 80157ea:	6826      	ldr	r6, [r4, #0]
 80157ec:	6960      	ldr	r0, [r4, #20]
 80157ee:	1d1d      	adds	r5, r3, #4
 80157f0:	600d      	str	r5, [r1, #0]
 80157f2:	0635      	lsls	r5, r6, #24
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	d501      	bpl.n	80157fc <_printf_i+0x1cc>
 80157f8:	6018      	str	r0, [r3, #0]
 80157fa:	e002      	b.n	8015802 <_printf_i+0x1d2>
 80157fc:	0671      	lsls	r1, r6, #25
 80157fe:	d5fb      	bpl.n	80157f8 <_printf_i+0x1c8>
 8015800:	8018      	strh	r0, [r3, #0]
 8015802:	2300      	movs	r3, #0
 8015804:	6123      	str	r3, [r4, #16]
 8015806:	4616      	mov	r6, r2
 8015808:	e7ba      	b.n	8015780 <_printf_i+0x150>
 801580a:	680b      	ldr	r3, [r1, #0]
 801580c:	1d1a      	adds	r2, r3, #4
 801580e:	600a      	str	r2, [r1, #0]
 8015810:	681e      	ldr	r6, [r3, #0]
 8015812:	6862      	ldr	r2, [r4, #4]
 8015814:	2100      	movs	r1, #0
 8015816:	4630      	mov	r0, r6
 8015818:	f7ea fcf2 	bl	8000200 <memchr>
 801581c:	b108      	cbz	r0, 8015822 <_printf_i+0x1f2>
 801581e:	1b80      	subs	r0, r0, r6
 8015820:	6060      	str	r0, [r4, #4]
 8015822:	6863      	ldr	r3, [r4, #4]
 8015824:	6123      	str	r3, [r4, #16]
 8015826:	2300      	movs	r3, #0
 8015828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582c:	e7a8      	b.n	8015780 <_printf_i+0x150>
 801582e:	6923      	ldr	r3, [r4, #16]
 8015830:	4632      	mov	r2, r6
 8015832:	4649      	mov	r1, r9
 8015834:	4640      	mov	r0, r8
 8015836:	47d0      	blx	sl
 8015838:	3001      	adds	r0, #1
 801583a:	d0ab      	beq.n	8015794 <_printf_i+0x164>
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	079b      	lsls	r3, r3, #30
 8015840:	d413      	bmi.n	801586a <_printf_i+0x23a>
 8015842:	68e0      	ldr	r0, [r4, #12]
 8015844:	9b03      	ldr	r3, [sp, #12]
 8015846:	4298      	cmp	r0, r3
 8015848:	bfb8      	it	lt
 801584a:	4618      	movlt	r0, r3
 801584c:	e7a4      	b.n	8015798 <_printf_i+0x168>
 801584e:	2301      	movs	r3, #1
 8015850:	4632      	mov	r2, r6
 8015852:	4649      	mov	r1, r9
 8015854:	4640      	mov	r0, r8
 8015856:	47d0      	blx	sl
 8015858:	3001      	adds	r0, #1
 801585a:	d09b      	beq.n	8015794 <_printf_i+0x164>
 801585c:	3501      	adds	r5, #1
 801585e:	68e3      	ldr	r3, [r4, #12]
 8015860:	9903      	ldr	r1, [sp, #12]
 8015862:	1a5b      	subs	r3, r3, r1
 8015864:	42ab      	cmp	r3, r5
 8015866:	dcf2      	bgt.n	801584e <_printf_i+0x21e>
 8015868:	e7eb      	b.n	8015842 <_printf_i+0x212>
 801586a:	2500      	movs	r5, #0
 801586c:	f104 0619 	add.w	r6, r4, #25
 8015870:	e7f5      	b.n	801585e <_printf_i+0x22e>
 8015872:	bf00      	nop
 8015874:	0801c1e6 	.word	0x0801c1e6
 8015878:	0801c1f7 	.word	0x0801c1f7

0801587c <iprintf>:
 801587c:	b40f      	push	{r0, r1, r2, r3}
 801587e:	4b0a      	ldr	r3, [pc, #40]	; (80158a8 <iprintf+0x2c>)
 8015880:	b513      	push	{r0, r1, r4, lr}
 8015882:	681c      	ldr	r4, [r3, #0]
 8015884:	b124      	cbz	r4, 8015890 <iprintf+0x14>
 8015886:	69a3      	ldr	r3, [r4, #24]
 8015888:	b913      	cbnz	r3, 8015890 <iprintf+0x14>
 801588a:	4620      	mov	r0, r4
 801588c:	f001 f83e 	bl	801690c <__sinit>
 8015890:	ab05      	add	r3, sp, #20
 8015892:	9a04      	ldr	r2, [sp, #16]
 8015894:	68a1      	ldr	r1, [r4, #8]
 8015896:	9301      	str	r3, [sp, #4]
 8015898:	4620      	mov	r0, r4
 801589a:	f001 fe0d 	bl	80174b8 <_vfiprintf_r>
 801589e:	b002      	add	sp, #8
 80158a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a4:	b004      	add	sp, #16
 80158a6:	4770      	bx	lr
 80158a8:	20000024 	.word	0x20000024

080158ac <rand>:
 80158ac:	4b17      	ldr	r3, [pc, #92]	; (801590c <rand+0x60>)
 80158ae:	b510      	push	{r4, lr}
 80158b0:	681c      	ldr	r4, [r3, #0]
 80158b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80158b4:	b9b3      	cbnz	r3, 80158e4 <rand+0x38>
 80158b6:	2018      	movs	r0, #24
 80158b8:	f7ff fa7e 	bl	8014db8 <malloc>
 80158bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80158be:	b928      	cbnz	r0, 80158cc <rand+0x20>
 80158c0:	4602      	mov	r2, r0
 80158c2:	4b13      	ldr	r3, [pc, #76]	; (8015910 <rand+0x64>)
 80158c4:	4813      	ldr	r0, [pc, #76]	; (8015914 <rand+0x68>)
 80158c6:	214e      	movs	r1, #78	; 0x4e
 80158c8:	f000 f92c 	bl	8015b24 <__assert_func>
 80158cc:	4a12      	ldr	r2, [pc, #72]	; (8015918 <rand+0x6c>)
 80158ce:	4b13      	ldr	r3, [pc, #76]	; (801591c <rand+0x70>)
 80158d0:	e9c0 2300 	strd	r2, r3, [r0]
 80158d4:	4b12      	ldr	r3, [pc, #72]	; (8015920 <rand+0x74>)
 80158d6:	6083      	str	r3, [r0, #8]
 80158d8:	230b      	movs	r3, #11
 80158da:	8183      	strh	r3, [r0, #12]
 80158dc:	2201      	movs	r2, #1
 80158de:	2300      	movs	r3, #0
 80158e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80158e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80158e6:	480f      	ldr	r0, [pc, #60]	; (8015924 <rand+0x78>)
 80158e8:	690a      	ldr	r2, [r1, #16]
 80158ea:	694b      	ldr	r3, [r1, #20]
 80158ec:	4c0e      	ldr	r4, [pc, #56]	; (8015928 <rand+0x7c>)
 80158ee:	4350      	muls	r0, r2
 80158f0:	fb04 0003 	mla	r0, r4, r3, r0
 80158f4:	fba2 3404 	umull	r3, r4, r2, r4
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	4404      	add	r4, r0
 80158fc:	f144 0000 	adc.w	r0, r4, #0
 8015900:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015904:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015908:	bd10      	pop	{r4, pc}
 801590a:	bf00      	nop
 801590c:	20000024 	.word	0x20000024
 8015910:	0801c208 	.word	0x0801c208
 8015914:	0801c21f 	.word	0x0801c21f
 8015918:	abcd330e 	.word	0xabcd330e
 801591c:	e66d1234 	.word	0xe66d1234
 8015920:	0005deec 	.word	0x0005deec
 8015924:	5851f42d 	.word	0x5851f42d
 8015928:	4c957f2d 	.word	0x4c957f2d

0801592c <_sbrk_r>:
 801592c:	b538      	push	{r3, r4, r5, lr}
 801592e:	4d06      	ldr	r5, [pc, #24]	; (8015948 <_sbrk_r+0x1c>)
 8015930:	2300      	movs	r3, #0
 8015932:	4604      	mov	r4, r0
 8015934:	4608      	mov	r0, r1
 8015936:	602b      	str	r3, [r5, #0]
 8015938:	f7ee fb08 	bl	8003f4c <_sbrk>
 801593c:	1c43      	adds	r3, r0, #1
 801593e:	d102      	bne.n	8015946 <_sbrk_r+0x1a>
 8015940:	682b      	ldr	r3, [r5, #0]
 8015942:	b103      	cbz	r3, 8015946 <_sbrk_r+0x1a>
 8015944:	6023      	str	r3, [r4, #0]
 8015946:	bd38      	pop	{r3, r4, r5, pc}
 8015948:	20006b04 	.word	0x20006b04

0801594c <sniprintf>:
 801594c:	b40c      	push	{r2, r3}
 801594e:	b530      	push	{r4, r5, lr}
 8015950:	4b17      	ldr	r3, [pc, #92]	; (80159b0 <sniprintf+0x64>)
 8015952:	1e0c      	subs	r4, r1, #0
 8015954:	681d      	ldr	r5, [r3, #0]
 8015956:	b09d      	sub	sp, #116	; 0x74
 8015958:	da08      	bge.n	801596c <sniprintf+0x20>
 801595a:	238b      	movs	r3, #139	; 0x8b
 801595c:	602b      	str	r3, [r5, #0]
 801595e:	f04f 30ff 	mov.w	r0, #4294967295
 8015962:	b01d      	add	sp, #116	; 0x74
 8015964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015968:	b002      	add	sp, #8
 801596a:	4770      	bx	lr
 801596c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015970:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015974:	bf14      	ite	ne
 8015976:	f104 33ff 	addne.w	r3, r4, #4294967295
 801597a:	4623      	moveq	r3, r4
 801597c:	9304      	str	r3, [sp, #16]
 801597e:	9307      	str	r3, [sp, #28]
 8015980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015984:	9002      	str	r0, [sp, #8]
 8015986:	9006      	str	r0, [sp, #24]
 8015988:	f8ad 3016 	strh.w	r3, [sp, #22]
 801598c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801598e:	ab21      	add	r3, sp, #132	; 0x84
 8015990:	a902      	add	r1, sp, #8
 8015992:	4628      	mov	r0, r5
 8015994:	9301      	str	r3, [sp, #4]
 8015996:	f001 fc65 	bl	8017264 <_svfiprintf_r>
 801599a:	1c43      	adds	r3, r0, #1
 801599c:	bfbc      	itt	lt
 801599e:	238b      	movlt	r3, #139	; 0x8b
 80159a0:	602b      	strlt	r3, [r5, #0]
 80159a2:	2c00      	cmp	r4, #0
 80159a4:	d0dd      	beq.n	8015962 <sniprintf+0x16>
 80159a6:	9b02      	ldr	r3, [sp, #8]
 80159a8:	2200      	movs	r2, #0
 80159aa:	701a      	strb	r2, [r3, #0]
 80159ac:	e7d9      	b.n	8015962 <sniprintf+0x16>
 80159ae:	bf00      	nop
 80159b0:	20000024 	.word	0x20000024

080159b4 <strncmp>:
 80159b4:	b510      	push	{r4, lr}
 80159b6:	b16a      	cbz	r2, 80159d4 <strncmp+0x20>
 80159b8:	3901      	subs	r1, #1
 80159ba:	1884      	adds	r4, r0, r2
 80159bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80159c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d103      	bne.n	80159d0 <strncmp+0x1c>
 80159c8:	42a0      	cmp	r0, r4
 80159ca:	d001      	beq.n	80159d0 <strncmp+0x1c>
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d1f5      	bne.n	80159bc <strncmp+0x8>
 80159d0:	1a98      	subs	r0, r3, r2
 80159d2:	bd10      	pop	{r4, pc}
 80159d4:	4610      	mov	r0, r2
 80159d6:	e7fc      	b.n	80159d2 <strncmp+0x1e>

080159d8 <strstr>:
 80159d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159da:	780c      	ldrb	r4, [r1, #0]
 80159dc:	b164      	cbz	r4, 80159f8 <strstr+0x20>
 80159de:	4603      	mov	r3, r0
 80159e0:	781a      	ldrb	r2, [r3, #0]
 80159e2:	4618      	mov	r0, r3
 80159e4:	1c5e      	adds	r6, r3, #1
 80159e6:	b90a      	cbnz	r2, 80159ec <strstr+0x14>
 80159e8:	4610      	mov	r0, r2
 80159ea:	e005      	b.n	80159f8 <strstr+0x20>
 80159ec:	4294      	cmp	r4, r2
 80159ee:	d108      	bne.n	8015a02 <strstr+0x2a>
 80159f0:	460d      	mov	r5, r1
 80159f2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80159f6:	b902      	cbnz	r2, 80159fa <strstr+0x22>
 80159f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159fa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80159fe:	4297      	cmp	r7, r2
 8015a00:	d0f7      	beq.n	80159f2 <strstr+0x1a>
 8015a02:	4633      	mov	r3, r6
 8015a04:	e7ec      	b.n	80159e0 <strstr+0x8>
	...

08015a08 <_strtol_l.isra.0>:
 8015a08:	2b01      	cmp	r3, #1
 8015a0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a0e:	d001      	beq.n	8015a14 <_strtol_l.isra.0+0xc>
 8015a10:	2b24      	cmp	r3, #36	; 0x24
 8015a12:	d906      	bls.n	8015a22 <_strtol_l.isra.0+0x1a>
 8015a14:	f000 ff1c 	bl	8016850 <__errno>
 8015a18:	2316      	movs	r3, #22
 8015a1a:	6003      	str	r3, [r0, #0]
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a22:	4f3a      	ldr	r7, [pc, #232]	; (8015b0c <_strtol_l.isra.0+0x104>)
 8015a24:	468e      	mov	lr, r1
 8015a26:	4676      	mov	r6, lr
 8015a28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015a2c:	5de5      	ldrb	r5, [r4, r7]
 8015a2e:	f015 0508 	ands.w	r5, r5, #8
 8015a32:	d1f8      	bne.n	8015a26 <_strtol_l.isra.0+0x1e>
 8015a34:	2c2d      	cmp	r4, #45	; 0x2d
 8015a36:	d134      	bne.n	8015aa2 <_strtol_l.isra.0+0x9a>
 8015a38:	f89e 4000 	ldrb.w	r4, [lr]
 8015a3c:	f04f 0801 	mov.w	r8, #1
 8015a40:	f106 0e02 	add.w	lr, r6, #2
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d05c      	beq.n	8015b02 <_strtol_l.isra.0+0xfa>
 8015a48:	2b10      	cmp	r3, #16
 8015a4a:	d10c      	bne.n	8015a66 <_strtol_l.isra.0+0x5e>
 8015a4c:	2c30      	cmp	r4, #48	; 0x30
 8015a4e:	d10a      	bne.n	8015a66 <_strtol_l.isra.0+0x5e>
 8015a50:	f89e 4000 	ldrb.w	r4, [lr]
 8015a54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015a58:	2c58      	cmp	r4, #88	; 0x58
 8015a5a:	d14d      	bne.n	8015af8 <_strtol_l.isra.0+0xf0>
 8015a5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015a60:	2310      	movs	r3, #16
 8015a62:	f10e 0e02 	add.w	lr, lr, #2
 8015a66:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015a6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015a6e:	2600      	movs	r6, #0
 8015a70:	fbbc f9f3 	udiv	r9, ip, r3
 8015a74:	4635      	mov	r5, r6
 8015a76:	fb03 ca19 	mls	sl, r3, r9, ip
 8015a7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015a7e:	2f09      	cmp	r7, #9
 8015a80:	d818      	bhi.n	8015ab4 <_strtol_l.isra.0+0xac>
 8015a82:	463c      	mov	r4, r7
 8015a84:	42a3      	cmp	r3, r4
 8015a86:	dd24      	ble.n	8015ad2 <_strtol_l.isra.0+0xca>
 8015a88:	2e00      	cmp	r6, #0
 8015a8a:	db1f      	blt.n	8015acc <_strtol_l.isra.0+0xc4>
 8015a8c:	45a9      	cmp	r9, r5
 8015a8e:	d31d      	bcc.n	8015acc <_strtol_l.isra.0+0xc4>
 8015a90:	d101      	bne.n	8015a96 <_strtol_l.isra.0+0x8e>
 8015a92:	45a2      	cmp	sl, r4
 8015a94:	db1a      	blt.n	8015acc <_strtol_l.isra.0+0xc4>
 8015a96:	fb05 4503 	mla	r5, r5, r3, r4
 8015a9a:	2601      	movs	r6, #1
 8015a9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015aa0:	e7eb      	b.n	8015a7a <_strtol_l.isra.0+0x72>
 8015aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8015aa4:	bf08      	it	eq
 8015aa6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015aaa:	46a8      	mov	r8, r5
 8015aac:	bf08      	it	eq
 8015aae:	f106 0e02 	addeq.w	lr, r6, #2
 8015ab2:	e7c7      	b.n	8015a44 <_strtol_l.isra.0+0x3c>
 8015ab4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015ab8:	2f19      	cmp	r7, #25
 8015aba:	d801      	bhi.n	8015ac0 <_strtol_l.isra.0+0xb8>
 8015abc:	3c37      	subs	r4, #55	; 0x37
 8015abe:	e7e1      	b.n	8015a84 <_strtol_l.isra.0+0x7c>
 8015ac0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015ac4:	2f19      	cmp	r7, #25
 8015ac6:	d804      	bhi.n	8015ad2 <_strtol_l.isra.0+0xca>
 8015ac8:	3c57      	subs	r4, #87	; 0x57
 8015aca:	e7db      	b.n	8015a84 <_strtol_l.isra.0+0x7c>
 8015acc:	f04f 36ff 	mov.w	r6, #4294967295
 8015ad0:	e7e4      	b.n	8015a9c <_strtol_l.isra.0+0x94>
 8015ad2:	2e00      	cmp	r6, #0
 8015ad4:	da05      	bge.n	8015ae2 <_strtol_l.isra.0+0xda>
 8015ad6:	2322      	movs	r3, #34	; 0x22
 8015ad8:	6003      	str	r3, [r0, #0]
 8015ada:	4665      	mov	r5, ip
 8015adc:	b942      	cbnz	r2, 8015af0 <_strtol_l.isra.0+0xe8>
 8015ade:	4628      	mov	r0, r5
 8015ae0:	e79d      	b.n	8015a1e <_strtol_l.isra.0+0x16>
 8015ae2:	f1b8 0f00 	cmp.w	r8, #0
 8015ae6:	d000      	beq.n	8015aea <_strtol_l.isra.0+0xe2>
 8015ae8:	426d      	negs	r5, r5
 8015aea:	2a00      	cmp	r2, #0
 8015aec:	d0f7      	beq.n	8015ade <_strtol_l.isra.0+0xd6>
 8015aee:	b10e      	cbz	r6, 8015af4 <_strtol_l.isra.0+0xec>
 8015af0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015af4:	6011      	str	r1, [r2, #0]
 8015af6:	e7f2      	b.n	8015ade <_strtol_l.isra.0+0xd6>
 8015af8:	2430      	movs	r4, #48	; 0x30
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d1b3      	bne.n	8015a66 <_strtol_l.isra.0+0x5e>
 8015afe:	2308      	movs	r3, #8
 8015b00:	e7b1      	b.n	8015a66 <_strtol_l.isra.0+0x5e>
 8015b02:	2c30      	cmp	r4, #48	; 0x30
 8015b04:	d0a4      	beq.n	8015a50 <_strtol_l.isra.0+0x48>
 8015b06:	230a      	movs	r3, #10
 8015b08:	e7ad      	b.n	8015a66 <_strtol_l.isra.0+0x5e>
 8015b0a:	bf00      	nop
 8015b0c:	0801c0cf 	.word	0x0801c0cf

08015b10 <strtol>:
 8015b10:	4613      	mov	r3, r2
 8015b12:	460a      	mov	r2, r1
 8015b14:	4601      	mov	r1, r0
 8015b16:	4802      	ldr	r0, [pc, #8]	; (8015b20 <strtol+0x10>)
 8015b18:	6800      	ldr	r0, [r0, #0]
 8015b1a:	f7ff bf75 	b.w	8015a08 <_strtol_l.isra.0>
 8015b1e:	bf00      	nop
 8015b20:	20000024 	.word	0x20000024

08015b24 <__assert_func>:
 8015b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b26:	4614      	mov	r4, r2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	4b09      	ldr	r3, [pc, #36]	; (8015b50 <__assert_func+0x2c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4605      	mov	r5, r0
 8015b30:	68d8      	ldr	r0, [r3, #12]
 8015b32:	b14c      	cbz	r4, 8015b48 <__assert_func+0x24>
 8015b34:	4b07      	ldr	r3, [pc, #28]	; (8015b54 <__assert_func+0x30>)
 8015b36:	9100      	str	r1, [sp, #0]
 8015b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b3c:	4906      	ldr	r1, [pc, #24]	; (8015b58 <__assert_func+0x34>)
 8015b3e:	462b      	mov	r3, r5
 8015b40:	f000 ff62 	bl	8016a08 <fiprintf>
 8015b44:	f001 fefe 	bl	8017944 <abort>
 8015b48:	4b04      	ldr	r3, [pc, #16]	; (8015b5c <__assert_func+0x38>)
 8015b4a:	461c      	mov	r4, r3
 8015b4c:	e7f3      	b.n	8015b36 <__assert_func+0x12>
 8015b4e:	bf00      	nop
 8015b50:	20000024 	.word	0x20000024
 8015b54:	0801c27e 	.word	0x0801c27e
 8015b58:	0801c28b 	.word	0x0801c28b
 8015b5c:	0801c2b9 	.word	0x0801c2b9

08015b60 <quorem>:
 8015b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b64:	6903      	ldr	r3, [r0, #16]
 8015b66:	690c      	ldr	r4, [r1, #16]
 8015b68:	42a3      	cmp	r3, r4
 8015b6a:	4607      	mov	r7, r0
 8015b6c:	f2c0 8081 	blt.w	8015c72 <quorem+0x112>
 8015b70:	3c01      	subs	r4, #1
 8015b72:	f101 0814 	add.w	r8, r1, #20
 8015b76:	f100 0514 	add.w	r5, r0, #20
 8015b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b7e:	9301      	str	r3, [sp, #4]
 8015b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b88:	3301      	adds	r3, #1
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015b94:	fbb2 f6f3 	udiv	r6, r2, r3
 8015b98:	d331      	bcc.n	8015bfe <quorem+0x9e>
 8015b9a:	f04f 0e00 	mov.w	lr, #0
 8015b9e:	4640      	mov	r0, r8
 8015ba0:	46ac      	mov	ip, r5
 8015ba2:	46f2      	mov	sl, lr
 8015ba4:	f850 2b04 	ldr.w	r2, [r0], #4
 8015ba8:	b293      	uxth	r3, r2
 8015baa:	fb06 e303 	mla	r3, r6, r3, lr
 8015bae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8015bb8:	0c12      	lsrs	r2, r2, #16
 8015bba:	f8dc a000 	ldr.w	sl, [ip]
 8015bbe:	fb06 e202 	mla	r2, r6, r2, lr
 8015bc2:	fa13 f38a 	uxtah	r3, r3, sl
 8015bc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015bca:	fa1f fa82 	uxth.w	sl, r2
 8015bce:	f8dc 2000 	ldr.w	r2, [ip]
 8015bd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015be0:	4581      	cmp	r9, r0
 8015be2:	f84c 3b04 	str.w	r3, [ip], #4
 8015be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015bea:	d2db      	bcs.n	8015ba4 <quorem+0x44>
 8015bec:	f855 300b 	ldr.w	r3, [r5, fp]
 8015bf0:	b92b      	cbnz	r3, 8015bfe <quorem+0x9e>
 8015bf2:	9b01      	ldr	r3, [sp, #4]
 8015bf4:	3b04      	subs	r3, #4
 8015bf6:	429d      	cmp	r5, r3
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	d32e      	bcc.n	8015c5a <quorem+0xfa>
 8015bfc:	613c      	str	r4, [r7, #16]
 8015bfe:	4638      	mov	r0, r7
 8015c00:	f001 f9c6 	bl	8016f90 <__mcmp>
 8015c04:	2800      	cmp	r0, #0
 8015c06:	db24      	blt.n	8015c52 <quorem+0xf2>
 8015c08:	3601      	adds	r6, #1
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	f04f 0c00 	mov.w	ip, #0
 8015c10:	f858 2b04 	ldr.w	r2, [r8], #4
 8015c14:	f8d0 e000 	ldr.w	lr, [r0]
 8015c18:	b293      	uxth	r3, r2
 8015c1a:	ebac 0303 	sub.w	r3, ip, r3
 8015c1e:	0c12      	lsrs	r2, r2, #16
 8015c20:	fa13 f38e 	uxtah	r3, r3, lr
 8015c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c32:	45c1      	cmp	r9, r8
 8015c34:	f840 3b04 	str.w	r3, [r0], #4
 8015c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015c3c:	d2e8      	bcs.n	8015c10 <quorem+0xb0>
 8015c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015c46:	b922      	cbnz	r2, 8015c52 <quorem+0xf2>
 8015c48:	3b04      	subs	r3, #4
 8015c4a:	429d      	cmp	r5, r3
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	d30a      	bcc.n	8015c66 <quorem+0x106>
 8015c50:	613c      	str	r4, [r7, #16]
 8015c52:	4630      	mov	r0, r6
 8015c54:	b003      	add	sp, #12
 8015c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c5a:	6812      	ldr	r2, [r2, #0]
 8015c5c:	3b04      	subs	r3, #4
 8015c5e:	2a00      	cmp	r2, #0
 8015c60:	d1cc      	bne.n	8015bfc <quorem+0x9c>
 8015c62:	3c01      	subs	r4, #1
 8015c64:	e7c7      	b.n	8015bf6 <quorem+0x96>
 8015c66:	6812      	ldr	r2, [r2, #0]
 8015c68:	3b04      	subs	r3, #4
 8015c6a:	2a00      	cmp	r2, #0
 8015c6c:	d1f0      	bne.n	8015c50 <quorem+0xf0>
 8015c6e:	3c01      	subs	r4, #1
 8015c70:	e7eb      	b.n	8015c4a <quorem+0xea>
 8015c72:	2000      	movs	r0, #0
 8015c74:	e7ee      	b.n	8015c54 <quorem+0xf4>
	...

08015c78 <_dtoa_r>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	ed2d 8b02 	vpush	{d8}
 8015c80:	ec57 6b10 	vmov	r6, r7, d0
 8015c84:	b095      	sub	sp, #84	; 0x54
 8015c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015c88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015c8c:	9105      	str	r1, [sp, #20]
 8015c8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015c92:	4604      	mov	r4, r0
 8015c94:	9209      	str	r2, [sp, #36]	; 0x24
 8015c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c98:	b975      	cbnz	r5, 8015cb8 <_dtoa_r+0x40>
 8015c9a:	2010      	movs	r0, #16
 8015c9c:	f7ff f88c 	bl	8014db8 <malloc>
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8015ca4:	b920      	cbnz	r0, 8015cb0 <_dtoa_r+0x38>
 8015ca6:	4bb2      	ldr	r3, [pc, #712]	; (8015f70 <_dtoa_r+0x2f8>)
 8015ca8:	21ea      	movs	r1, #234	; 0xea
 8015caa:	48b2      	ldr	r0, [pc, #712]	; (8015f74 <_dtoa_r+0x2fc>)
 8015cac:	f7ff ff3a 	bl	8015b24 <__assert_func>
 8015cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015cb4:	6005      	str	r5, [r0, #0]
 8015cb6:	60c5      	str	r5, [r0, #12]
 8015cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cba:	6819      	ldr	r1, [r3, #0]
 8015cbc:	b151      	cbz	r1, 8015cd4 <_dtoa_r+0x5c>
 8015cbe:	685a      	ldr	r2, [r3, #4]
 8015cc0:	604a      	str	r2, [r1, #4]
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	4093      	lsls	r3, r2
 8015cc6:	608b      	str	r3, [r1, #8]
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f000 ff23 	bl	8016b14 <_Bfree>
 8015cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	601a      	str	r2, [r3, #0]
 8015cd4:	1e3b      	subs	r3, r7, #0
 8015cd6:	bfb9      	ittee	lt
 8015cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015cdc:	9303      	strlt	r3, [sp, #12]
 8015cde:	2300      	movge	r3, #0
 8015ce0:	f8c8 3000 	strge.w	r3, [r8]
 8015ce4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015ce8:	4ba3      	ldr	r3, [pc, #652]	; (8015f78 <_dtoa_r+0x300>)
 8015cea:	bfbc      	itt	lt
 8015cec:	2201      	movlt	r2, #1
 8015cee:	f8c8 2000 	strlt.w	r2, [r8]
 8015cf2:	ea33 0309 	bics.w	r3, r3, r9
 8015cf6:	d11b      	bne.n	8015d30 <_dtoa_r+0xb8>
 8015cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015cfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8015cfe:	6013      	str	r3, [r2, #0]
 8015d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015d04:	4333      	orrs	r3, r6
 8015d06:	f000 857a 	beq.w	80167fe <_dtoa_r+0xb86>
 8015d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d0c:	b963      	cbnz	r3, 8015d28 <_dtoa_r+0xb0>
 8015d0e:	4b9b      	ldr	r3, [pc, #620]	; (8015f7c <_dtoa_r+0x304>)
 8015d10:	e024      	b.n	8015d5c <_dtoa_r+0xe4>
 8015d12:	4b9b      	ldr	r3, [pc, #620]	; (8015f80 <_dtoa_r+0x308>)
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	3308      	adds	r3, #8
 8015d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d1a:	6013      	str	r3, [r2, #0]
 8015d1c:	9800      	ldr	r0, [sp, #0]
 8015d1e:	b015      	add	sp, #84	; 0x54
 8015d20:	ecbd 8b02 	vpop	{d8}
 8015d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d28:	4b94      	ldr	r3, [pc, #592]	; (8015f7c <_dtoa_r+0x304>)
 8015d2a:	9300      	str	r3, [sp, #0]
 8015d2c:	3303      	adds	r3, #3
 8015d2e:	e7f3      	b.n	8015d18 <_dtoa_r+0xa0>
 8015d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d34:	2200      	movs	r2, #0
 8015d36:	ec51 0b17 	vmov	r0, r1, d7
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015d40:	f7ea fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d44:	4680      	mov	r8, r0
 8015d46:	b158      	cbz	r0, 8015d60 <_dtoa_r+0xe8>
 8015d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	6013      	str	r3, [r2, #0]
 8015d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	f000 8551 	beq.w	80167f8 <_dtoa_r+0xb80>
 8015d56:	488b      	ldr	r0, [pc, #556]	; (8015f84 <_dtoa_r+0x30c>)
 8015d58:	6018      	str	r0, [r3, #0]
 8015d5a:	1e43      	subs	r3, r0, #1
 8015d5c:	9300      	str	r3, [sp, #0]
 8015d5e:	e7dd      	b.n	8015d1c <_dtoa_r+0xa4>
 8015d60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015d64:	aa12      	add	r2, sp, #72	; 0x48
 8015d66:	a913      	add	r1, sp, #76	; 0x4c
 8015d68:	4620      	mov	r0, r4
 8015d6a:	f001 f9b5 	bl	80170d8 <__d2b>
 8015d6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015d72:	4683      	mov	fp, r0
 8015d74:	2d00      	cmp	r5, #0
 8015d76:	d07c      	beq.n	8015e72 <_dtoa_r+0x1fa>
 8015d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015d86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015d8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015d92:	4b7d      	ldr	r3, [pc, #500]	; (8015f88 <_dtoa_r+0x310>)
 8015d94:	2200      	movs	r2, #0
 8015d96:	4630      	mov	r0, r6
 8015d98:	4639      	mov	r1, r7
 8015d9a:	f7ea fa85 	bl	80002a8 <__aeabi_dsub>
 8015d9e:	a36e      	add	r3, pc, #440	; (adr r3, 8015f58 <_dtoa_r+0x2e0>)
 8015da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da4:	f7ea fc38 	bl	8000618 <__aeabi_dmul>
 8015da8:	a36d      	add	r3, pc, #436	; (adr r3, 8015f60 <_dtoa_r+0x2e8>)
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	f7ea fa7d 	bl	80002ac <__adddf3>
 8015db2:	4606      	mov	r6, r0
 8015db4:	4628      	mov	r0, r5
 8015db6:	460f      	mov	r7, r1
 8015db8:	f7ea fbc4 	bl	8000544 <__aeabi_i2d>
 8015dbc:	a36a      	add	r3, pc, #424	; (adr r3, 8015f68 <_dtoa_r+0x2f0>)
 8015dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc2:	f7ea fc29 	bl	8000618 <__aeabi_dmul>
 8015dc6:	4602      	mov	r2, r0
 8015dc8:	460b      	mov	r3, r1
 8015dca:	4630      	mov	r0, r6
 8015dcc:	4639      	mov	r1, r7
 8015dce:	f7ea fa6d 	bl	80002ac <__adddf3>
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	460f      	mov	r7, r1
 8015dd6:	f7ea fecf 	bl	8000b78 <__aeabi_d2iz>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	4682      	mov	sl, r0
 8015dde:	2300      	movs	r3, #0
 8015de0:	4630      	mov	r0, r6
 8015de2:	4639      	mov	r1, r7
 8015de4:	f7ea fe8a 	bl	8000afc <__aeabi_dcmplt>
 8015de8:	b148      	cbz	r0, 8015dfe <_dtoa_r+0x186>
 8015dea:	4650      	mov	r0, sl
 8015dec:	f7ea fbaa 	bl	8000544 <__aeabi_i2d>
 8015df0:	4632      	mov	r2, r6
 8015df2:	463b      	mov	r3, r7
 8015df4:	f7ea fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 8015df8:	b908      	cbnz	r0, 8015dfe <_dtoa_r+0x186>
 8015dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015dfe:	f1ba 0f16 	cmp.w	sl, #22
 8015e02:	d854      	bhi.n	8015eae <_dtoa_r+0x236>
 8015e04:	4b61      	ldr	r3, [pc, #388]	; (8015f8c <_dtoa_r+0x314>)
 8015e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015e12:	f7ea fe73 	bl	8000afc <__aeabi_dcmplt>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	d04b      	beq.n	8015eb2 <_dtoa_r+0x23a>
 8015e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e1e:	2300      	movs	r3, #0
 8015e20:	930e      	str	r3, [sp, #56]	; 0x38
 8015e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e24:	1b5d      	subs	r5, r3, r5
 8015e26:	1e6b      	subs	r3, r5, #1
 8015e28:	9304      	str	r3, [sp, #16]
 8015e2a:	bf43      	ittte	mi
 8015e2c:	2300      	movmi	r3, #0
 8015e2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8015e32:	9304      	strmi	r3, [sp, #16]
 8015e34:	f04f 0800 	movpl.w	r8, #0
 8015e38:	f1ba 0f00 	cmp.w	sl, #0
 8015e3c:	db3b      	blt.n	8015eb6 <_dtoa_r+0x23e>
 8015e3e:	9b04      	ldr	r3, [sp, #16]
 8015e40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015e44:	4453      	add	r3, sl
 8015e46:	9304      	str	r3, [sp, #16]
 8015e48:	2300      	movs	r3, #0
 8015e4a:	9306      	str	r3, [sp, #24]
 8015e4c:	9b05      	ldr	r3, [sp, #20]
 8015e4e:	2b09      	cmp	r3, #9
 8015e50:	d869      	bhi.n	8015f26 <_dtoa_r+0x2ae>
 8015e52:	2b05      	cmp	r3, #5
 8015e54:	bfc4      	itt	gt
 8015e56:	3b04      	subgt	r3, #4
 8015e58:	9305      	strgt	r3, [sp, #20]
 8015e5a:	9b05      	ldr	r3, [sp, #20]
 8015e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8015e60:	bfcc      	ite	gt
 8015e62:	2500      	movgt	r5, #0
 8015e64:	2501      	movle	r5, #1
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	d869      	bhi.n	8015f3e <_dtoa_r+0x2c6>
 8015e6a:	e8df f003 	tbb	[pc, r3]
 8015e6e:	4e2c      	.short	0x4e2c
 8015e70:	5a4c      	.short	0x5a4c
 8015e72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015e76:	441d      	add	r5, r3
 8015e78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015e7c:	2b20      	cmp	r3, #32
 8015e7e:	bfc1      	itttt	gt
 8015e80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015e84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015e88:	fa09 f303 	lslgt.w	r3, r9, r3
 8015e8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015e90:	bfda      	itte	le
 8015e92:	f1c3 0320 	rsble	r3, r3, #32
 8015e96:	fa06 f003 	lslle.w	r0, r6, r3
 8015e9a:	4318      	orrgt	r0, r3
 8015e9c:	f7ea fb42 	bl	8000524 <__aeabi_ui2d>
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	4606      	mov	r6, r0
 8015ea4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015ea8:	3d01      	subs	r5, #1
 8015eaa:	9310      	str	r3, [sp, #64]	; 0x40
 8015eac:	e771      	b.n	8015d92 <_dtoa_r+0x11a>
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e7b6      	b.n	8015e20 <_dtoa_r+0x1a8>
 8015eb2:	900e      	str	r0, [sp, #56]	; 0x38
 8015eb4:	e7b5      	b.n	8015e22 <_dtoa_r+0x1aa>
 8015eb6:	f1ca 0300 	rsb	r3, sl, #0
 8015eba:	9306      	str	r3, [sp, #24]
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	eba8 080a 	sub.w	r8, r8, sl
 8015ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8015ec4:	e7c2      	b.n	8015e4c <_dtoa_r+0x1d4>
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	9308      	str	r3, [sp, #32]
 8015eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	dc39      	bgt.n	8015f44 <_dtoa_r+0x2cc>
 8015ed0:	f04f 0901 	mov.w	r9, #1
 8015ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8015ed8:	464b      	mov	r3, r9
 8015eda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015ede:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	6042      	str	r2, [r0, #4]
 8015ee4:	2204      	movs	r2, #4
 8015ee6:	f102 0614 	add.w	r6, r2, #20
 8015eea:	429e      	cmp	r6, r3
 8015eec:	6841      	ldr	r1, [r0, #4]
 8015eee:	d92f      	bls.n	8015f50 <_dtoa_r+0x2d8>
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f000 fdcf 	bl	8016a94 <_Balloc>
 8015ef6:	9000      	str	r0, [sp, #0]
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d14b      	bne.n	8015f94 <_dtoa_r+0x31c>
 8015efc:	4b24      	ldr	r3, [pc, #144]	; (8015f90 <_dtoa_r+0x318>)
 8015efe:	4602      	mov	r2, r0
 8015f00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015f04:	e6d1      	b.n	8015caa <_dtoa_r+0x32>
 8015f06:	2301      	movs	r3, #1
 8015f08:	e7de      	b.n	8015ec8 <_dtoa_r+0x250>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	9308      	str	r3, [sp, #32]
 8015f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f10:	eb0a 0903 	add.w	r9, sl, r3
 8015f14:	f109 0301 	add.w	r3, r9, #1
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	9301      	str	r3, [sp, #4]
 8015f1c:	bfb8      	it	lt
 8015f1e:	2301      	movlt	r3, #1
 8015f20:	e7dd      	b.n	8015ede <_dtoa_r+0x266>
 8015f22:	2301      	movs	r3, #1
 8015f24:	e7f2      	b.n	8015f0c <_dtoa_r+0x294>
 8015f26:	2501      	movs	r5, #1
 8015f28:	2300      	movs	r3, #0
 8015f2a:	9305      	str	r3, [sp, #20]
 8015f2c:	9508      	str	r5, [sp, #32]
 8015f2e:	f04f 39ff 	mov.w	r9, #4294967295
 8015f32:	2200      	movs	r2, #0
 8015f34:	f8cd 9004 	str.w	r9, [sp, #4]
 8015f38:	2312      	movs	r3, #18
 8015f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8015f3c:	e7cf      	b.n	8015ede <_dtoa_r+0x266>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	9308      	str	r3, [sp, #32]
 8015f42:	e7f4      	b.n	8015f2e <_dtoa_r+0x2b6>
 8015f44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8015f4c:	464b      	mov	r3, r9
 8015f4e:	e7c6      	b.n	8015ede <_dtoa_r+0x266>
 8015f50:	3101      	adds	r1, #1
 8015f52:	6041      	str	r1, [r0, #4]
 8015f54:	0052      	lsls	r2, r2, #1
 8015f56:	e7c6      	b.n	8015ee6 <_dtoa_r+0x26e>
 8015f58:	636f4361 	.word	0x636f4361
 8015f5c:	3fd287a7 	.word	0x3fd287a7
 8015f60:	8b60c8b3 	.word	0x8b60c8b3
 8015f64:	3fc68a28 	.word	0x3fc68a28
 8015f68:	509f79fb 	.word	0x509f79fb
 8015f6c:	3fd34413 	.word	0x3fd34413
 8015f70:	0801c208 	.word	0x0801c208
 8015f74:	0801c2c7 	.word	0x0801c2c7
 8015f78:	7ff00000 	.word	0x7ff00000
 8015f7c:	0801c2c3 	.word	0x0801c2c3
 8015f80:	0801c2ba 	.word	0x0801c2ba
 8015f84:	0801c1e5 	.word	0x0801c1e5
 8015f88:	3ff80000 	.word	0x3ff80000
 8015f8c:	0801c420 	.word	0x0801c420
 8015f90:	0801c326 	.word	0x0801c326
 8015f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f96:	9a00      	ldr	r2, [sp, #0]
 8015f98:	601a      	str	r2, [r3, #0]
 8015f9a:	9b01      	ldr	r3, [sp, #4]
 8015f9c:	2b0e      	cmp	r3, #14
 8015f9e:	f200 80ad 	bhi.w	80160fc <_dtoa_r+0x484>
 8015fa2:	2d00      	cmp	r5, #0
 8015fa4:	f000 80aa 	beq.w	80160fc <_dtoa_r+0x484>
 8015fa8:	f1ba 0f00 	cmp.w	sl, #0
 8015fac:	dd36      	ble.n	801601c <_dtoa_r+0x3a4>
 8015fae:	4ac3      	ldr	r2, [pc, #780]	; (80162bc <_dtoa_r+0x644>)
 8015fb0:	f00a 030f 	and.w	r3, sl, #15
 8015fb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015fb8:	ed93 7b00 	vldr	d7, [r3]
 8015fbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015fc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8015fc8:	eef0 8a67 	vmov.f32	s17, s15
 8015fcc:	d016      	beq.n	8015ffc <_dtoa_r+0x384>
 8015fce:	4bbc      	ldr	r3, [pc, #752]	; (80162c0 <_dtoa_r+0x648>)
 8015fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015fd8:	f7ea fc48 	bl	800086c <__aeabi_ddiv>
 8015fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fe0:	f007 070f 	and.w	r7, r7, #15
 8015fe4:	2503      	movs	r5, #3
 8015fe6:	4eb6      	ldr	r6, [pc, #728]	; (80162c0 <_dtoa_r+0x648>)
 8015fe8:	b957      	cbnz	r7, 8016000 <_dtoa_r+0x388>
 8015fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fee:	ec53 2b18 	vmov	r2, r3, d8
 8015ff2:	f7ea fc3b 	bl	800086c <__aeabi_ddiv>
 8015ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ffa:	e029      	b.n	8016050 <_dtoa_r+0x3d8>
 8015ffc:	2502      	movs	r5, #2
 8015ffe:	e7f2      	b.n	8015fe6 <_dtoa_r+0x36e>
 8016000:	07f9      	lsls	r1, r7, #31
 8016002:	d508      	bpl.n	8016016 <_dtoa_r+0x39e>
 8016004:	ec51 0b18 	vmov	r0, r1, d8
 8016008:	e9d6 2300 	ldrd	r2, r3, [r6]
 801600c:	f7ea fb04 	bl	8000618 <__aeabi_dmul>
 8016010:	ec41 0b18 	vmov	d8, r0, r1
 8016014:	3501      	adds	r5, #1
 8016016:	107f      	asrs	r7, r7, #1
 8016018:	3608      	adds	r6, #8
 801601a:	e7e5      	b.n	8015fe8 <_dtoa_r+0x370>
 801601c:	f000 80a6 	beq.w	801616c <_dtoa_r+0x4f4>
 8016020:	f1ca 0600 	rsb	r6, sl, #0
 8016024:	4ba5      	ldr	r3, [pc, #660]	; (80162bc <_dtoa_r+0x644>)
 8016026:	4fa6      	ldr	r7, [pc, #664]	; (80162c0 <_dtoa_r+0x648>)
 8016028:	f006 020f 	and.w	r2, r6, #15
 801602c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016038:	f7ea faee 	bl	8000618 <__aeabi_dmul>
 801603c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016040:	1136      	asrs	r6, r6, #4
 8016042:	2300      	movs	r3, #0
 8016044:	2502      	movs	r5, #2
 8016046:	2e00      	cmp	r6, #0
 8016048:	f040 8085 	bne.w	8016156 <_dtoa_r+0x4de>
 801604c:	2b00      	cmp	r3, #0
 801604e:	d1d2      	bne.n	8015ff6 <_dtoa_r+0x37e>
 8016050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016052:	2b00      	cmp	r3, #0
 8016054:	f000 808c 	beq.w	8016170 <_dtoa_r+0x4f8>
 8016058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801605c:	4b99      	ldr	r3, [pc, #612]	; (80162c4 <_dtoa_r+0x64c>)
 801605e:	2200      	movs	r2, #0
 8016060:	4630      	mov	r0, r6
 8016062:	4639      	mov	r1, r7
 8016064:	f7ea fd4a 	bl	8000afc <__aeabi_dcmplt>
 8016068:	2800      	cmp	r0, #0
 801606a:	f000 8081 	beq.w	8016170 <_dtoa_r+0x4f8>
 801606e:	9b01      	ldr	r3, [sp, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d07d      	beq.n	8016170 <_dtoa_r+0x4f8>
 8016074:	f1b9 0f00 	cmp.w	r9, #0
 8016078:	dd3c      	ble.n	80160f4 <_dtoa_r+0x47c>
 801607a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801607e:	9307      	str	r3, [sp, #28]
 8016080:	2200      	movs	r2, #0
 8016082:	4b91      	ldr	r3, [pc, #580]	; (80162c8 <_dtoa_r+0x650>)
 8016084:	4630      	mov	r0, r6
 8016086:	4639      	mov	r1, r7
 8016088:	f7ea fac6 	bl	8000618 <__aeabi_dmul>
 801608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016090:	3501      	adds	r5, #1
 8016092:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8016096:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801609a:	4628      	mov	r0, r5
 801609c:	f7ea fa52 	bl	8000544 <__aeabi_i2d>
 80160a0:	4632      	mov	r2, r6
 80160a2:	463b      	mov	r3, r7
 80160a4:	f7ea fab8 	bl	8000618 <__aeabi_dmul>
 80160a8:	4b88      	ldr	r3, [pc, #544]	; (80162cc <_dtoa_r+0x654>)
 80160aa:	2200      	movs	r2, #0
 80160ac:	f7ea f8fe 	bl	80002ac <__adddf3>
 80160b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80160b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160b8:	9303      	str	r3, [sp, #12]
 80160ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d15c      	bne.n	801617a <_dtoa_r+0x502>
 80160c0:	4b83      	ldr	r3, [pc, #524]	; (80162d0 <_dtoa_r+0x658>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	4630      	mov	r0, r6
 80160c6:	4639      	mov	r1, r7
 80160c8:	f7ea f8ee 	bl	80002a8 <__aeabi_dsub>
 80160cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160d0:	4606      	mov	r6, r0
 80160d2:	460f      	mov	r7, r1
 80160d4:	f7ea fd30 	bl	8000b38 <__aeabi_dcmpgt>
 80160d8:	2800      	cmp	r0, #0
 80160da:	f040 8296 	bne.w	801660a <_dtoa_r+0x992>
 80160de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80160e2:	4630      	mov	r0, r6
 80160e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80160e8:	4639      	mov	r1, r7
 80160ea:	f7ea fd07 	bl	8000afc <__aeabi_dcmplt>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	f040 8288 	bne.w	8016604 <_dtoa_r+0x98c>
 80160f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80160f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80160fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f2c0 8158 	blt.w	80163b4 <_dtoa_r+0x73c>
 8016104:	f1ba 0f0e 	cmp.w	sl, #14
 8016108:	f300 8154 	bgt.w	80163b4 <_dtoa_r+0x73c>
 801610c:	4b6b      	ldr	r3, [pc, #428]	; (80162bc <_dtoa_r+0x644>)
 801610e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016118:	2b00      	cmp	r3, #0
 801611a:	f280 80e3 	bge.w	80162e4 <_dtoa_r+0x66c>
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	2b00      	cmp	r3, #0
 8016122:	f300 80df 	bgt.w	80162e4 <_dtoa_r+0x66c>
 8016126:	f040 826d 	bne.w	8016604 <_dtoa_r+0x98c>
 801612a:	4b69      	ldr	r3, [pc, #420]	; (80162d0 <_dtoa_r+0x658>)
 801612c:	2200      	movs	r2, #0
 801612e:	4640      	mov	r0, r8
 8016130:	4649      	mov	r1, r9
 8016132:	f7ea fa71 	bl	8000618 <__aeabi_dmul>
 8016136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801613a:	f7ea fcf3 	bl	8000b24 <__aeabi_dcmpge>
 801613e:	9e01      	ldr	r6, [sp, #4]
 8016140:	4637      	mov	r7, r6
 8016142:	2800      	cmp	r0, #0
 8016144:	f040 8243 	bne.w	80165ce <_dtoa_r+0x956>
 8016148:	9d00      	ldr	r5, [sp, #0]
 801614a:	2331      	movs	r3, #49	; 0x31
 801614c:	f805 3b01 	strb.w	r3, [r5], #1
 8016150:	f10a 0a01 	add.w	sl, sl, #1
 8016154:	e23f      	b.n	80165d6 <_dtoa_r+0x95e>
 8016156:	07f2      	lsls	r2, r6, #31
 8016158:	d505      	bpl.n	8016166 <_dtoa_r+0x4ee>
 801615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801615e:	f7ea fa5b 	bl	8000618 <__aeabi_dmul>
 8016162:	3501      	adds	r5, #1
 8016164:	2301      	movs	r3, #1
 8016166:	1076      	asrs	r6, r6, #1
 8016168:	3708      	adds	r7, #8
 801616a:	e76c      	b.n	8016046 <_dtoa_r+0x3ce>
 801616c:	2502      	movs	r5, #2
 801616e:	e76f      	b.n	8016050 <_dtoa_r+0x3d8>
 8016170:	9b01      	ldr	r3, [sp, #4]
 8016172:	f8cd a01c 	str.w	sl, [sp, #28]
 8016176:	930c      	str	r3, [sp, #48]	; 0x30
 8016178:	e78d      	b.n	8016096 <_dtoa_r+0x41e>
 801617a:	9900      	ldr	r1, [sp, #0]
 801617c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801617e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016180:	4b4e      	ldr	r3, [pc, #312]	; (80162bc <_dtoa_r+0x644>)
 8016182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016186:	4401      	add	r1, r0
 8016188:	9102      	str	r1, [sp, #8]
 801618a:	9908      	ldr	r1, [sp, #32]
 801618c:	eeb0 8a47 	vmov.f32	s16, s14
 8016190:	eef0 8a67 	vmov.f32	s17, s15
 8016194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801619c:	2900      	cmp	r1, #0
 801619e:	d045      	beq.n	801622c <_dtoa_r+0x5b4>
 80161a0:	494c      	ldr	r1, [pc, #304]	; (80162d4 <_dtoa_r+0x65c>)
 80161a2:	2000      	movs	r0, #0
 80161a4:	f7ea fb62 	bl	800086c <__aeabi_ddiv>
 80161a8:	ec53 2b18 	vmov	r2, r3, d8
 80161ac:	f7ea f87c 	bl	80002a8 <__aeabi_dsub>
 80161b0:	9d00      	ldr	r5, [sp, #0]
 80161b2:	ec41 0b18 	vmov	d8, r0, r1
 80161b6:	4639      	mov	r1, r7
 80161b8:	4630      	mov	r0, r6
 80161ba:	f7ea fcdd 	bl	8000b78 <__aeabi_d2iz>
 80161be:	900c      	str	r0, [sp, #48]	; 0x30
 80161c0:	f7ea f9c0 	bl	8000544 <__aeabi_i2d>
 80161c4:	4602      	mov	r2, r0
 80161c6:	460b      	mov	r3, r1
 80161c8:	4630      	mov	r0, r6
 80161ca:	4639      	mov	r1, r7
 80161cc:	f7ea f86c 	bl	80002a8 <__aeabi_dsub>
 80161d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161d2:	3330      	adds	r3, #48	; 0x30
 80161d4:	f805 3b01 	strb.w	r3, [r5], #1
 80161d8:	ec53 2b18 	vmov	r2, r3, d8
 80161dc:	4606      	mov	r6, r0
 80161de:	460f      	mov	r7, r1
 80161e0:	f7ea fc8c 	bl	8000afc <__aeabi_dcmplt>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d165      	bne.n	80162b4 <_dtoa_r+0x63c>
 80161e8:	4632      	mov	r2, r6
 80161ea:	463b      	mov	r3, r7
 80161ec:	4935      	ldr	r1, [pc, #212]	; (80162c4 <_dtoa_r+0x64c>)
 80161ee:	2000      	movs	r0, #0
 80161f0:	f7ea f85a 	bl	80002a8 <__aeabi_dsub>
 80161f4:	ec53 2b18 	vmov	r2, r3, d8
 80161f8:	f7ea fc80 	bl	8000afc <__aeabi_dcmplt>
 80161fc:	2800      	cmp	r0, #0
 80161fe:	f040 80b9 	bne.w	8016374 <_dtoa_r+0x6fc>
 8016202:	9b02      	ldr	r3, [sp, #8]
 8016204:	429d      	cmp	r5, r3
 8016206:	f43f af75 	beq.w	80160f4 <_dtoa_r+0x47c>
 801620a:	4b2f      	ldr	r3, [pc, #188]	; (80162c8 <_dtoa_r+0x650>)
 801620c:	ec51 0b18 	vmov	r0, r1, d8
 8016210:	2200      	movs	r2, #0
 8016212:	f7ea fa01 	bl	8000618 <__aeabi_dmul>
 8016216:	4b2c      	ldr	r3, [pc, #176]	; (80162c8 <_dtoa_r+0x650>)
 8016218:	ec41 0b18 	vmov	d8, r0, r1
 801621c:	2200      	movs	r2, #0
 801621e:	4630      	mov	r0, r6
 8016220:	4639      	mov	r1, r7
 8016222:	f7ea f9f9 	bl	8000618 <__aeabi_dmul>
 8016226:	4606      	mov	r6, r0
 8016228:	460f      	mov	r7, r1
 801622a:	e7c4      	b.n	80161b6 <_dtoa_r+0x53e>
 801622c:	ec51 0b17 	vmov	r0, r1, d7
 8016230:	f7ea f9f2 	bl	8000618 <__aeabi_dmul>
 8016234:	9b02      	ldr	r3, [sp, #8]
 8016236:	9d00      	ldr	r5, [sp, #0]
 8016238:	930c      	str	r3, [sp, #48]	; 0x30
 801623a:	ec41 0b18 	vmov	d8, r0, r1
 801623e:	4639      	mov	r1, r7
 8016240:	4630      	mov	r0, r6
 8016242:	f7ea fc99 	bl	8000b78 <__aeabi_d2iz>
 8016246:	9011      	str	r0, [sp, #68]	; 0x44
 8016248:	f7ea f97c 	bl	8000544 <__aeabi_i2d>
 801624c:	4602      	mov	r2, r0
 801624e:	460b      	mov	r3, r1
 8016250:	4630      	mov	r0, r6
 8016252:	4639      	mov	r1, r7
 8016254:	f7ea f828 	bl	80002a8 <__aeabi_dsub>
 8016258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801625a:	3330      	adds	r3, #48	; 0x30
 801625c:	f805 3b01 	strb.w	r3, [r5], #1
 8016260:	9b02      	ldr	r3, [sp, #8]
 8016262:	429d      	cmp	r5, r3
 8016264:	4606      	mov	r6, r0
 8016266:	460f      	mov	r7, r1
 8016268:	f04f 0200 	mov.w	r2, #0
 801626c:	d134      	bne.n	80162d8 <_dtoa_r+0x660>
 801626e:	4b19      	ldr	r3, [pc, #100]	; (80162d4 <_dtoa_r+0x65c>)
 8016270:	ec51 0b18 	vmov	r0, r1, d8
 8016274:	f7ea f81a 	bl	80002ac <__adddf3>
 8016278:	4602      	mov	r2, r0
 801627a:	460b      	mov	r3, r1
 801627c:	4630      	mov	r0, r6
 801627e:	4639      	mov	r1, r7
 8016280:	f7ea fc5a 	bl	8000b38 <__aeabi_dcmpgt>
 8016284:	2800      	cmp	r0, #0
 8016286:	d175      	bne.n	8016374 <_dtoa_r+0x6fc>
 8016288:	ec53 2b18 	vmov	r2, r3, d8
 801628c:	4911      	ldr	r1, [pc, #68]	; (80162d4 <_dtoa_r+0x65c>)
 801628e:	2000      	movs	r0, #0
 8016290:	f7ea f80a 	bl	80002a8 <__aeabi_dsub>
 8016294:	4602      	mov	r2, r0
 8016296:	460b      	mov	r3, r1
 8016298:	4630      	mov	r0, r6
 801629a:	4639      	mov	r1, r7
 801629c:	f7ea fc2e 	bl	8000afc <__aeabi_dcmplt>
 80162a0:	2800      	cmp	r0, #0
 80162a2:	f43f af27 	beq.w	80160f4 <_dtoa_r+0x47c>
 80162a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80162a8:	1e6b      	subs	r3, r5, #1
 80162aa:	930c      	str	r3, [sp, #48]	; 0x30
 80162ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80162b0:	2b30      	cmp	r3, #48	; 0x30
 80162b2:	d0f8      	beq.n	80162a6 <_dtoa_r+0x62e>
 80162b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80162b8:	e04a      	b.n	8016350 <_dtoa_r+0x6d8>
 80162ba:	bf00      	nop
 80162bc:	0801c420 	.word	0x0801c420
 80162c0:	0801c3f8 	.word	0x0801c3f8
 80162c4:	3ff00000 	.word	0x3ff00000
 80162c8:	40240000 	.word	0x40240000
 80162cc:	401c0000 	.word	0x401c0000
 80162d0:	40140000 	.word	0x40140000
 80162d4:	3fe00000 	.word	0x3fe00000
 80162d8:	4baf      	ldr	r3, [pc, #700]	; (8016598 <_dtoa_r+0x920>)
 80162da:	f7ea f99d 	bl	8000618 <__aeabi_dmul>
 80162de:	4606      	mov	r6, r0
 80162e0:	460f      	mov	r7, r1
 80162e2:	e7ac      	b.n	801623e <_dtoa_r+0x5c6>
 80162e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80162e8:	9d00      	ldr	r5, [sp, #0]
 80162ea:	4642      	mov	r2, r8
 80162ec:	464b      	mov	r3, r9
 80162ee:	4630      	mov	r0, r6
 80162f0:	4639      	mov	r1, r7
 80162f2:	f7ea fabb 	bl	800086c <__aeabi_ddiv>
 80162f6:	f7ea fc3f 	bl	8000b78 <__aeabi_d2iz>
 80162fa:	9002      	str	r0, [sp, #8]
 80162fc:	f7ea f922 	bl	8000544 <__aeabi_i2d>
 8016300:	4642      	mov	r2, r8
 8016302:	464b      	mov	r3, r9
 8016304:	f7ea f988 	bl	8000618 <__aeabi_dmul>
 8016308:	4602      	mov	r2, r0
 801630a:	460b      	mov	r3, r1
 801630c:	4630      	mov	r0, r6
 801630e:	4639      	mov	r1, r7
 8016310:	f7e9 ffca 	bl	80002a8 <__aeabi_dsub>
 8016314:	9e02      	ldr	r6, [sp, #8]
 8016316:	9f01      	ldr	r7, [sp, #4]
 8016318:	3630      	adds	r6, #48	; 0x30
 801631a:	f805 6b01 	strb.w	r6, [r5], #1
 801631e:	9e00      	ldr	r6, [sp, #0]
 8016320:	1bae      	subs	r6, r5, r6
 8016322:	42b7      	cmp	r7, r6
 8016324:	4602      	mov	r2, r0
 8016326:	460b      	mov	r3, r1
 8016328:	d137      	bne.n	801639a <_dtoa_r+0x722>
 801632a:	f7e9 ffbf 	bl	80002ac <__adddf3>
 801632e:	4642      	mov	r2, r8
 8016330:	464b      	mov	r3, r9
 8016332:	4606      	mov	r6, r0
 8016334:	460f      	mov	r7, r1
 8016336:	f7ea fbff 	bl	8000b38 <__aeabi_dcmpgt>
 801633a:	b9c8      	cbnz	r0, 8016370 <_dtoa_r+0x6f8>
 801633c:	4642      	mov	r2, r8
 801633e:	464b      	mov	r3, r9
 8016340:	4630      	mov	r0, r6
 8016342:	4639      	mov	r1, r7
 8016344:	f7ea fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8016348:	b110      	cbz	r0, 8016350 <_dtoa_r+0x6d8>
 801634a:	9b02      	ldr	r3, [sp, #8]
 801634c:	07d9      	lsls	r1, r3, #31
 801634e:	d40f      	bmi.n	8016370 <_dtoa_r+0x6f8>
 8016350:	4620      	mov	r0, r4
 8016352:	4659      	mov	r1, fp
 8016354:	f000 fbde 	bl	8016b14 <_Bfree>
 8016358:	2300      	movs	r3, #0
 801635a:	702b      	strb	r3, [r5, #0]
 801635c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801635e:	f10a 0001 	add.w	r0, sl, #1
 8016362:	6018      	str	r0, [r3, #0]
 8016364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016366:	2b00      	cmp	r3, #0
 8016368:	f43f acd8 	beq.w	8015d1c <_dtoa_r+0xa4>
 801636c:	601d      	str	r5, [r3, #0]
 801636e:	e4d5      	b.n	8015d1c <_dtoa_r+0xa4>
 8016370:	f8cd a01c 	str.w	sl, [sp, #28]
 8016374:	462b      	mov	r3, r5
 8016376:	461d      	mov	r5, r3
 8016378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801637c:	2a39      	cmp	r2, #57	; 0x39
 801637e:	d108      	bne.n	8016392 <_dtoa_r+0x71a>
 8016380:	9a00      	ldr	r2, [sp, #0]
 8016382:	429a      	cmp	r2, r3
 8016384:	d1f7      	bne.n	8016376 <_dtoa_r+0x6fe>
 8016386:	9a07      	ldr	r2, [sp, #28]
 8016388:	9900      	ldr	r1, [sp, #0]
 801638a:	3201      	adds	r2, #1
 801638c:	9207      	str	r2, [sp, #28]
 801638e:	2230      	movs	r2, #48	; 0x30
 8016390:	700a      	strb	r2, [r1, #0]
 8016392:	781a      	ldrb	r2, [r3, #0]
 8016394:	3201      	adds	r2, #1
 8016396:	701a      	strb	r2, [r3, #0]
 8016398:	e78c      	b.n	80162b4 <_dtoa_r+0x63c>
 801639a:	4b7f      	ldr	r3, [pc, #508]	; (8016598 <_dtoa_r+0x920>)
 801639c:	2200      	movs	r2, #0
 801639e:	f7ea f93b 	bl	8000618 <__aeabi_dmul>
 80163a2:	2200      	movs	r2, #0
 80163a4:	2300      	movs	r3, #0
 80163a6:	4606      	mov	r6, r0
 80163a8:	460f      	mov	r7, r1
 80163aa:	f7ea fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80163ae:	2800      	cmp	r0, #0
 80163b0:	d09b      	beq.n	80162ea <_dtoa_r+0x672>
 80163b2:	e7cd      	b.n	8016350 <_dtoa_r+0x6d8>
 80163b4:	9a08      	ldr	r2, [sp, #32]
 80163b6:	2a00      	cmp	r2, #0
 80163b8:	f000 80c4 	beq.w	8016544 <_dtoa_r+0x8cc>
 80163bc:	9a05      	ldr	r2, [sp, #20]
 80163be:	2a01      	cmp	r2, #1
 80163c0:	f300 80a8 	bgt.w	8016514 <_dtoa_r+0x89c>
 80163c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163c6:	2a00      	cmp	r2, #0
 80163c8:	f000 80a0 	beq.w	801650c <_dtoa_r+0x894>
 80163cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80163d0:	9e06      	ldr	r6, [sp, #24]
 80163d2:	4645      	mov	r5, r8
 80163d4:	9a04      	ldr	r2, [sp, #16]
 80163d6:	2101      	movs	r1, #1
 80163d8:	441a      	add	r2, r3
 80163da:	4620      	mov	r0, r4
 80163dc:	4498      	add	r8, r3
 80163de:	9204      	str	r2, [sp, #16]
 80163e0:	f000 fc54 	bl	8016c8c <__i2b>
 80163e4:	4607      	mov	r7, r0
 80163e6:	2d00      	cmp	r5, #0
 80163e8:	dd0b      	ble.n	8016402 <_dtoa_r+0x78a>
 80163ea:	9b04      	ldr	r3, [sp, #16]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	dd08      	ble.n	8016402 <_dtoa_r+0x78a>
 80163f0:	42ab      	cmp	r3, r5
 80163f2:	9a04      	ldr	r2, [sp, #16]
 80163f4:	bfa8      	it	ge
 80163f6:	462b      	movge	r3, r5
 80163f8:	eba8 0803 	sub.w	r8, r8, r3
 80163fc:	1aed      	subs	r5, r5, r3
 80163fe:	1ad3      	subs	r3, r2, r3
 8016400:	9304      	str	r3, [sp, #16]
 8016402:	9b06      	ldr	r3, [sp, #24]
 8016404:	b1fb      	cbz	r3, 8016446 <_dtoa_r+0x7ce>
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	2b00      	cmp	r3, #0
 801640a:	f000 809f 	beq.w	801654c <_dtoa_r+0x8d4>
 801640e:	2e00      	cmp	r6, #0
 8016410:	dd11      	ble.n	8016436 <_dtoa_r+0x7be>
 8016412:	4639      	mov	r1, r7
 8016414:	4632      	mov	r2, r6
 8016416:	4620      	mov	r0, r4
 8016418:	f000 fcf4 	bl	8016e04 <__pow5mult>
 801641c:	465a      	mov	r2, fp
 801641e:	4601      	mov	r1, r0
 8016420:	4607      	mov	r7, r0
 8016422:	4620      	mov	r0, r4
 8016424:	f000 fc48 	bl	8016cb8 <__multiply>
 8016428:	4659      	mov	r1, fp
 801642a:	9007      	str	r0, [sp, #28]
 801642c:	4620      	mov	r0, r4
 801642e:	f000 fb71 	bl	8016b14 <_Bfree>
 8016432:	9b07      	ldr	r3, [sp, #28]
 8016434:	469b      	mov	fp, r3
 8016436:	9b06      	ldr	r3, [sp, #24]
 8016438:	1b9a      	subs	r2, r3, r6
 801643a:	d004      	beq.n	8016446 <_dtoa_r+0x7ce>
 801643c:	4659      	mov	r1, fp
 801643e:	4620      	mov	r0, r4
 8016440:	f000 fce0 	bl	8016e04 <__pow5mult>
 8016444:	4683      	mov	fp, r0
 8016446:	2101      	movs	r1, #1
 8016448:	4620      	mov	r0, r4
 801644a:	f000 fc1f 	bl	8016c8c <__i2b>
 801644e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016450:	2b00      	cmp	r3, #0
 8016452:	4606      	mov	r6, r0
 8016454:	dd7c      	ble.n	8016550 <_dtoa_r+0x8d8>
 8016456:	461a      	mov	r2, r3
 8016458:	4601      	mov	r1, r0
 801645a:	4620      	mov	r0, r4
 801645c:	f000 fcd2 	bl	8016e04 <__pow5mult>
 8016460:	9b05      	ldr	r3, [sp, #20]
 8016462:	2b01      	cmp	r3, #1
 8016464:	4606      	mov	r6, r0
 8016466:	dd76      	ble.n	8016556 <_dtoa_r+0x8de>
 8016468:	2300      	movs	r3, #0
 801646a:	9306      	str	r3, [sp, #24]
 801646c:	6933      	ldr	r3, [r6, #16]
 801646e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016472:	6918      	ldr	r0, [r3, #16]
 8016474:	f000 fbba 	bl	8016bec <__hi0bits>
 8016478:	f1c0 0020 	rsb	r0, r0, #32
 801647c:	9b04      	ldr	r3, [sp, #16]
 801647e:	4418      	add	r0, r3
 8016480:	f010 001f 	ands.w	r0, r0, #31
 8016484:	f000 8086 	beq.w	8016594 <_dtoa_r+0x91c>
 8016488:	f1c0 0320 	rsb	r3, r0, #32
 801648c:	2b04      	cmp	r3, #4
 801648e:	dd7f      	ble.n	8016590 <_dtoa_r+0x918>
 8016490:	f1c0 001c 	rsb	r0, r0, #28
 8016494:	9b04      	ldr	r3, [sp, #16]
 8016496:	4403      	add	r3, r0
 8016498:	4480      	add	r8, r0
 801649a:	4405      	add	r5, r0
 801649c:	9304      	str	r3, [sp, #16]
 801649e:	f1b8 0f00 	cmp.w	r8, #0
 80164a2:	dd05      	ble.n	80164b0 <_dtoa_r+0x838>
 80164a4:	4659      	mov	r1, fp
 80164a6:	4642      	mov	r2, r8
 80164a8:	4620      	mov	r0, r4
 80164aa:	f000 fd05 	bl	8016eb8 <__lshift>
 80164ae:	4683      	mov	fp, r0
 80164b0:	9b04      	ldr	r3, [sp, #16]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	dd05      	ble.n	80164c2 <_dtoa_r+0x84a>
 80164b6:	4631      	mov	r1, r6
 80164b8:	461a      	mov	r2, r3
 80164ba:	4620      	mov	r0, r4
 80164bc:	f000 fcfc 	bl	8016eb8 <__lshift>
 80164c0:	4606      	mov	r6, r0
 80164c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d069      	beq.n	801659c <_dtoa_r+0x924>
 80164c8:	4631      	mov	r1, r6
 80164ca:	4658      	mov	r0, fp
 80164cc:	f000 fd60 	bl	8016f90 <__mcmp>
 80164d0:	2800      	cmp	r0, #0
 80164d2:	da63      	bge.n	801659c <_dtoa_r+0x924>
 80164d4:	2300      	movs	r3, #0
 80164d6:	4659      	mov	r1, fp
 80164d8:	220a      	movs	r2, #10
 80164da:	4620      	mov	r0, r4
 80164dc:	f000 fb3c 	bl	8016b58 <__multadd>
 80164e0:	9b08      	ldr	r3, [sp, #32]
 80164e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164e6:	4683      	mov	fp, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f000 818f 	beq.w	801680c <_dtoa_r+0xb94>
 80164ee:	4639      	mov	r1, r7
 80164f0:	2300      	movs	r3, #0
 80164f2:	220a      	movs	r2, #10
 80164f4:	4620      	mov	r0, r4
 80164f6:	f000 fb2f 	bl	8016b58 <__multadd>
 80164fa:	f1b9 0f00 	cmp.w	r9, #0
 80164fe:	4607      	mov	r7, r0
 8016500:	f300 808e 	bgt.w	8016620 <_dtoa_r+0x9a8>
 8016504:	9b05      	ldr	r3, [sp, #20]
 8016506:	2b02      	cmp	r3, #2
 8016508:	dc50      	bgt.n	80165ac <_dtoa_r+0x934>
 801650a:	e089      	b.n	8016620 <_dtoa_r+0x9a8>
 801650c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801650e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016512:	e75d      	b.n	80163d0 <_dtoa_r+0x758>
 8016514:	9b01      	ldr	r3, [sp, #4]
 8016516:	1e5e      	subs	r6, r3, #1
 8016518:	9b06      	ldr	r3, [sp, #24]
 801651a:	42b3      	cmp	r3, r6
 801651c:	bfbf      	itttt	lt
 801651e:	9b06      	ldrlt	r3, [sp, #24]
 8016520:	9606      	strlt	r6, [sp, #24]
 8016522:	1af2      	sublt	r2, r6, r3
 8016524:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016526:	bfb6      	itet	lt
 8016528:	189b      	addlt	r3, r3, r2
 801652a:	1b9e      	subge	r6, r3, r6
 801652c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	bfb8      	it	lt
 8016532:	2600      	movlt	r6, #0
 8016534:	2b00      	cmp	r3, #0
 8016536:	bfb5      	itete	lt
 8016538:	eba8 0503 	sublt.w	r5, r8, r3
 801653c:	9b01      	ldrge	r3, [sp, #4]
 801653e:	2300      	movlt	r3, #0
 8016540:	4645      	movge	r5, r8
 8016542:	e747      	b.n	80163d4 <_dtoa_r+0x75c>
 8016544:	9e06      	ldr	r6, [sp, #24]
 8016546:	9f08      	ldr	r7, [sp, #32]
 8016548:	4645      	mov	r5, r8
 801654a:	e74c      	b.n	80163e6 <_dtoa_r+0x76e>
 801654c:	9a06      	ldr	r2, [sp, #24]
 801654e:	e775      	b.n	801643c <_dtoa_r+0x7c4>
 8016550:	9b05      	ldr	r3, [sp, #20]
 8016552:	2b01      	cmp	r3, #1
 8016554:	dc18      	bgt.n	8016588 <_dtoa_r+0x910>
 8016556:	9b02      	ldr	r3, [sp, #8]
 8016558:	b9b3      	cbnz	r3, 8016588 <_dtoa_r+0x910>
 801655a:	9b03      	ldr	r3, [sp, #12]
 801655c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016560:	b9a3      	cbnz	r3, 801658c <_dtoa_r+0x914>
 8016562:	9b03      	ldr	r3, [sp, #12]
 8016564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016568:	0d1b      	lsrs	r3, r3, #20
 801656a:	051b      	lsls	r3, r3, #20
 801656c:	b12b      	cbz	r3, 801657a <_dtoa_r+0x902>
 801656e:	9b04      	ldr	r3, [sp, #16]
 8016570:	3301      	adds	r3, #1
 8016572:	9304      	str	r3, [sp, #16]
 8016574:	f108 0801 	add.w	r8, r8, #1
 8016578:	2301      	movs	r3, #1
 801657a:	9306      	str	r3, [sp, #24]
 801657c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801657e:	2b00      	cmp	r3, #0
 8016580:	f47f af74 	bne.w	801646c <_dtoa_r+0x7f4>
 8016584:	2001      	movs	r0, #1
 8016586:	e779      	b.n	801647c <_dtoa_r+0x804>
 8016588:	2300      	movs	r3, #0
 801658a:	e7f6      	b.n	801657a <_dtoa_r+0x902>
 801658c:	9b02      	ldr	r3, [sp, #8]
 801658e:	e7f4      	b.n	801657a <_dtoa_r+0x902>
 8016590:	d085      	beq.n	801649e <_dtoa_r+0x826>
 8016592:	4618      	mov	r0, r3
 8016594:	301c      	adds	r0, #28
 8016596:	e77d      	b.n	8016494 <_dtoa_r+0x81c>
 8016598:	40240000 	.word	0x40240000
 801659c:	9b01      	ldr	r3, [sp, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	dc38      	bgt.n	8016614 <_dtoa_r+0x99c>
 80165a2:	9b05      	ldr	r3, [sp, #20]
 80165a4:	2b02      	cmp	r3, #2
 80165a6:	dd35      	ble.n	8016614 <_dtoa_r+0x99c>
 80165a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80165ac:	f1b9 0f00 	cmp.w	r9, #0
 80165b0:	d10d      	bne.n	80165ce <_dtoa_r+0x956>
 80165b2:	4631      	mov	r1, r6
 80165b4:	464b      	mov	r3, r9
 80165b6:	2205      	movs	r2, #5
 80165b8:	4620      	mov	r0, r4
 80165ba:	f000 facd 	bl	8016b58 <__multadd>
 80165be:	4601      	mov	r1, r0
 80165c0:	4606      	mov	r6, r0
 80165c2:	4658      	mov	r0, fp
 80165c4:	f000 fce4 	bl	8016f90 <__mcmp>
 80165c8:	2800      	cmp	r0, #0
 80165ca:	f73f adbd 	bgt.w	8016148 <_dtoa_r+0x4d0>
 80165ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165d0:	9d00      	ldr	r5, [sp, #0]
 80165d2:	ea6f 0a03 	mvn.w	sl, r3
 80165d6:	f04f 0800 	mov.w	r8, #0
 80165da:	4631      	mov	r1, r6
 80165dc:	4620      	mov	r0, r4
 80165de:	f000 fa99 	bl	8016b14 <_Bfree>
 80165e2:	2f00      	cmp	r7, #0
 80165e4:	f43f aeb4 	beq.w	8016350 <_dtoa_r+0x6d8>
 80165e8:	f1b8 0f00 	cmp.w	r8, #0
 80165ec:	d005      	beq.n	80165fa <_dtoa_r+0x982>
 80165ee:	45b8      	cmp	r8, r7
 80165f0:	d003      	beq.n	80165fa <_dtoa_r+0x982>
 80165f2:	4641      	mov	r1, r8
 80165f4:	4620      	mov	r0, r4
 80165f6:	f000 fa8d 	bl	8016b14 <_Bfree>
 80165fa:	4639      	mov	r1, r7
 80165fc:	4620      	mov	r0, r4
 80165fe:	f000 fa89 	bl	8016b14 <_Bfree>
 8016602:	e6a5      	b.n	8016350 <_dtoa_r+0x6d8>
 8016604:	2600      	movs	r6, #0
 8016606:	4637      	mov	r7, r6
 8016608:	e7e1      	b.n	80165ce <_dtoa_r+0x956>
 801660a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801660c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016610:	4637      	mov	r7, r6
 8016612:	e599      	b.n	8016148 <_dtoa_r+0x4d0>
 8016614:	9b08      	ldr	r3, [sp, #32]
 8016616:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 80fd 	beq.w	801681a <_dtoa_r+0xba2>
 8016620:	2d00      	cmp	r5, #0
 8016622:	dd05      	ble.n	8016630 <_dtoa_r+0x9b8>
 8016624:	4639      	mov	r1, r7
 8016626:	462a      	mov	r2, r5
 8016628:	4620      	mov	r0, r4
 801662a:	f000 fc45 	bl	8016eb8 <__lshift>
 801662e:	4607      	mov	r7, r0
 8016630:	9b06      	ldr	r3, [sp, #24]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d05c      	beq.n	80166f0 <_dtoa_r+0xa78>
 8016636:	6879      	ldr	r1, [r7, #4]
 8016638:	4620      	mov	r0, r4
 801663a:	f000 fa2b 	bl	8016a94 <_Balloc>
 801663e:	4605      	mov	r5, r0
 8016640:	b928      	cbnz	r0, 801664e <_dtoa_r+0x9d6>
 8016642:	4b80      	ldr	r3, [pc, #512]	; (8016844 <_dtoa_r+0xbcc>)
 8016644:	4602      	mov	r2, r0
 8016646:	f240 21ea 	movw	r1, #746	; 0x2ea
 801664a:	f7ff bb2e 	b.w	8015caa <_dtoa_r+0x32>
 801664e:	693a      	ldr	r2, [r7, #16]
 8016650:	3202      	adds	r2, #2
 8016652:	0092      	lsls	r2, r2, #2
 8016654:	f107 010c 	add.w	r1, r7, #12
 8016658:	300c      	adds	r0, #12
 801665a:	f7fe fbcb 	bl	8014df4 <memcpy>
 801665e:	2201      	movs	r2, #1
 8016660:	4629      	mov	r1, r5
 8016662:	4620      	mov	r0, r4
 8016664:	f000 fc28 	bl	8016eb8 <__lshift>
 8016668:	9b00      	ldr	r3, [sp, #0]
 801666a:	3301      	adds	r3, #1
 801666c:	9301      	str	r3, [sp, #4]
 801666e:	9b00      	ldr	r3, [sp, #0]
 8016670:	444b      	add	r3, r9
 8016672:	9307      	str	r3, [sp, #28]
 8016674:	9b02      	ldr	r3, [sp, #8]
 8016676:	f003 0301 	and.w	r3, r3, #1
 801667a:	46b8      	mov	r8, r7
 801667c:	9306      	str	r3, [sp, #24]
 801667e:	4607      	mov	r7, r0
 8016680:	9b01      	ldr	r3, [sp, #4]
 8016682:	4631      	mov	r1, r6
 8016684:	3b01      	subs	r3, #1
 8016686:	4658      	mov	r0, fp
 8016688:	9302      	str	r3, [sp, #8]
 801668a:	f7ff fa69 	bl	8015b60 <quorem>
 801668e:	4603      	mov	r3, r0
 8016690:	3330      	adds	r3, #48	; 0x30
 8016692:	9004      	str	r0, [sp, #16]
 8016694:	4641      	mov	r1, r8
 8016696:	4658      	mov	r0, fp
 8016698:	9308      	str	r3, [sp, #32]
 801669a:	f000 fc79 	bl	8016f90 <__mcmp>
 801669e:	463a      	mov	r2, r7
 80166a0:	4681      	mov	r9, r0
 80166a2:	4631      	mov	r1, r6
 80166a4:	4620      	mov	r0, r4
 80166a6:	f000 fc8f 	bl	8016fc8 <__mdiff>
 80166aa:	68c2      	ldr	r2, [r0, #12]
 80166ac:	9b08      	ldr	r3, [sp, #32]
 80166ae:	4605      	mov	r5, r0
 80166b0:	bb02      	cbnz	r2, 80166f4 <_dtoa_r+0xa7c>
 80166b2:	4601      	mov	r1, r0
 80166b4:	4658      	mov	r0, fp
 80166b6:	f000 fc6b 	bl	8016f90 <__mcmp>
 80166ba:	9b08      	ldr	r3, [sp, #32]
 80166bc:	4602      	mov	r2, r0
 80166be:	4629      	mov	r1, r5
 80166c0:	4620      	mov	r0, r4
 80166c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80166c6:	f000 fa25 	bl	8016b14 <_Bfree>
 80166ca:	9b05      	ldr	r3, [sp, #20]
 80166cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166ce:	9d01      	ldr	r5, [sp, #4]
 80166d0:	ea43 0102 	orr.w	r1, r3, r2
 80166d4:	9b06      	ldr	r3, [sp, #24]
 80166d6:	430b      	orrs	r3, r1
 80166d8:	9b08      	ldr	r3, [sp, #32]
 80166da:	d10d      	bne.n	80166f8 <_dtoa_r+0xa80>
 80166dc:	2b39      	cmp	r3, #57	; 0x39
 80166de:	d029      	beq.n	8016734 <_dtoa_r+0xabc>
 80166e0:	f1b9 0f00 	cmp.w	r9, #0
 80166e4:	dd01      	ble.n	80166ea <_dtoa_r+0xa72>
 80166e6:	9b04      	ldr	r3, [sp, #16]
 80166e8:	3331      	adds	r3, #49	; 0x31
 80166ea:	9a02      	ldr	r2, [sp, #8]
 80166ec:	7013      	strb	r3, [r2, #0]
 80166ee:	e774      	b.n	80165da <_dtoa_r+0x962>
 80166f0:	4638      	mov	r0, r7
 80166f2:	e7b9      	b.n	8016668 <_dtoa_r+0x9f0>
 80166f4:	2201      	movs	r2, #1
 80166f6:	e7e2      	b.n	80166be <_dtoa_r+0xa46>
 80166f8:	f1b9 0f00 	cmp.w	r9, #0
 80166fc:	db06      	blt.n	801670c <_dtoa_r+0xa94>
 80166fe:	9905      	ldr	r1, [sp, #20]
 8016700:	ea41 0909 	orr.w	r9, r1, r9
 8016704:	9906      	ldr	r1, [sp, #24]
 8016706:	ea59 0101 	orrs.w	r1, r9, r1
 801670a:	d120      	bne.n	801674e <_dtoa_r+0xad6>
 801670c:	2a00      	cmp	r2, #0
 801670e:	ddec      	ble.n	80166ea <_dtoa_r+0xa72>
 8016710:	4659      	mov	r1, fp
 8016712:	2201      	movs	r2, #1
 8016714:	4620      	mov	r0, r4
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	f000 fbce 	bl	8016eb8 <__lshift>
 801671c:	4631      	mov	r1, r6
 801671e:	4683      	mov	fp, r0
 8016720:	f000 fc36 	bl	8016f90 <__mcmp>
 8016724:	2800      	cmp	r0, #0
 8016726:	9b01      	ldr	r3, [sp, #4]
 8016728:	dc02      	bgt.n	8016730 <_dtoa_r+0xab8>
 801672a:	d1de      	bne.n	80166ea <_dtoa_r+0xa72>
 801672c:	07da      	lsls	r2, r3, #31
 801672e:	d5dc      	bpl.n	80166ea <_dtoa_r+0xa72>
 8016730:	2b39      	cmp	r3, #57	; 0x39
 8016732:	d1d8      	bne.n	80166e6 <_dtoa_r+0xa6e>
 8016734:	9a02      	ldr	r2, [sp, #8]
 8016736:	2339      	movs	r3, #57	; 0x39
 8016738:	7013      	strb	r3, [r2, #0]
 801673a:	462b      	mov	r3, r5
 801673c:	461d      	mov	r5, r3
 801673e:	3b01      	subs	r3, #1
 8016740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016744:	2a39      	cmp	r2, #57	; 0x39
 8016746:	d050      	beq.n	80167ea <_dtoa_r+0xb72>
 8016748:	3201      	adds	r2, #1
 801674a:	701a      	strb	r2, [r3, #0]
 801674c:	e745      	b.n	80165da <_dtoa_r+0x962>
 801674e:	2a00      	cmp	r2, #0
 8016750:	dd03      	ble.n	801675a <_dtoa_r+0xae2>
 8016752:	2b39      	cmp	r3, #57	; 0x39
 8016754:	d0ee      	beq.n	8016734 <_dtoa_r+0xabc>
 8016756:	3301      	adds	r3, #1
 8016758:	e7c7      	b.n	80166ea <_dtoa_r+0xa72>
 801675a:	9a01      	ldr	r2, [sp, #4]
 801675c:	9907      	ldr	r1, [sp, #28]
 801675e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016762:	428a      	cmp	r2, r1
 8016764:	d02a      	beq.n	80167bc <_dtoa_r+0xb44>
 8016766:	4659      	mov	r1, fp
 8016768:	2300      	movs	r3, #0
 801676a:	220a      	movs	r2, #10
 801676c:	4620      	mov	r0, r4
 801676e:	f000 f9f3 	bl	8016b58 <__multadd>
 8016772:	45b8      	cmp	r8, r7
 8016774:	4683      	mov	fp, r0
 8016776:	f04f 0300 	mov.w	r3, #0
 801677a:	f04f 020a 	mov.w	r2, #10
 801677e:	4641      	mov	r1, r8
 8016780:	4620      	mov	r0, r4
 8016782:	d107      	bne.n	8016794 <_dtoa_r+0xb1c>
 8016784:	f000 f9e8 	bl	8016b58 <__multadd>
 8016788:	4680      	mov	r8, r0
 801678a:	4607      	mov	r7, r0
 801678c:	9b01      	ldr	r3, [sp, #4]
 801678e:	3301      	adds	r3, #1
 8016790:	9301      	str	r3, [sp, #4]
 8016792:	e775      	b.n	8016680 <_dtoa_r+0xa08>
 8016794:	f000 f9e0 	bl	8016b58 <__multadd>
 8016798:	4639      	mov	r1, r7
 801679a:	4680      	mov	r8, r0
 801679c:	2300      	movs	r3, #0
 801679e:	220a      	movs	r2, #10
 80167a0:	4620      	mov	r0, r4
 80167a2:	f000 f9d9 	bl	8016b58 <__multadd>
 80167a6:	4607      	mov	r7, r0
 80167a8:	e7f0      	b.n	801678c <_dtoa_r+0xb14>
 80167aa:	f1b9 0f00 	cmp.w	r9, #0
 80167ae:	9a00      	ldr	r2, [sp, #0]
 80167b0:	bfcc      	ite	gt
 80167b2:	464d      	movgt	r5, r9
 80167b4:	2501      	movle	r5, #1
 80167b6:	4415      	add	r5, r2
 80167b8:	f04f 0800 	mov.w	r8, #0
 80167bc:	4659      	mov	r1, fp
 80167be:	2201      	movs	r2, #1
 80167c0:	4620      	mov	r0, r4
 80167c2:	9301      	str	r3, [sp, #4]
 80167c4:	f000 fb78 	bl	8016eb8 <__lshift>
 80167c8:	4631      	mov	r1, r6
 80167ca:	4683      	mov	fp, r0
 80167cc:	f000 fbe0 	bl	8016f90 <__mcmp>
 80167d0:	2800      	cmp	r0, #0
 80167d2:	dcb2      	bgt.n	801673a <_dtoa_r+0xac2>
 80167d4:	d102      	bne.n	80167dc <_dtoa_r+0xb64>
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	07db      	lsls	r3, r3, #31
 80167da:	d4ae      	bmi.n	801673a <_dtoa_r+0xac2>
 80167dc:	462b      	mov	r3, r5
 80167de:	461d      	mov	r5, r3
 80167e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80167e4:	2a30      	cmp	r2, #48	; 0x30
 80167e6:	d0fa      	beq.n	80167de <_dtoa_r+0xb66>
 80167e8:	e6f7      	b.n	80165da <_dtoa_r+0x962>
 80167ea:	9a00      	ldr	r2, [sp, #0]
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d1a5      	bne.n	801673c <_dtoa_r+0xac4>
 80167f0:	f10a 0a01 	add.w	sl, sl, #1
 80167f4:	2331      	movs	r3, #49	; 0x31
 80167f6:	e779      	b.n	80166ec <_dtoa_r+0xa74>
 80167f8:	4b13      	ldr	r3, [pc, #76]	; (8016848 <_dtoa_r+0xbd0>)
 80167fa:	f7ff baaf 	b.w	8015d5c <_dtoa_r+0xe4>
 80167fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016800:	2b00      	cmp	r3, #0
 8016802:	f47f aa86 	bne.w	8015d12 <_dtoa_r+0x9a>
 8016806:	4b11      	ldr	r3, [pc, #68]	; (801684c <_dtoa_r+0xbd4>)
 8016808:	f7ff baa8 	b.w	8015d5c <_dtoa_r+0xe4>
 801680c:	f1b9 0f00 	cmp.w	r9, #0
 8016810:	dc03      	bgt.n	801681a <_dtoa_r+0xba2>
 8016812:	9b05      	ldr	r3, [sp, #20]
 8016814:	2b02      	cmp	r3, #2
 8016816:	f73f aec9 	bgt.w	80165ac <_dtoa_r+0x934>
 801681a:	9d00      	ldr	r5, [sp, #0]
 801681c:	4631      	mov	r1, r6
 801681e:	4658      	mov	r0, fp
 8016820:	f7ff f99e 	bl	8015b60 <quorem>
 8016824:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016828:	f805 3b01 	strb.w	r3, [r5], #1
 801682c:	9a00      	ldr	r2, [sp, #0]
 801682e:	1aaa      	subs	r2, r5, r2
 8016830:	4591      	cmp	r9, r2
 8016832:	ddba      	ble.n	80167aa <_dtoa_r+0xb32>
 8016834:	4659      	mov	r1, fp
 8016836:	2300      	movs	r3, #0
 8016838:	220a      	movs	r2, #10
 801683a:	4620      	mov	r0, r4
 801683c:	f000 f98c 	bl	8016b58 <__multadd>
 8016840:	4683      	mov	fp, r0
 8016842:	e7eb      	b.n	801681c <_dtoa_r+0xba4>
 8016844:	0801c326 	.word	0x0801c326
 8016848:	0801c1e4 	.word	0x0801c1e4
 801684c:	0801c2ba 	.word	0x0801c2ba

08016850 <__errno>:
 8016850:	4b01      	ldr	r3, [pc, #4]	; (8016858 <__errno+0x8>)
 8016852:	6818      	ldr	r0, [r3, #0]
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	20000024 	.word	0x20000024

0801685c <std>:
 801685c:	2300      	movs	r3, #0
 801685e:	b510      	push	{r4, lr}
 8016860:	4604      	mov	r4, r0
 8016862:	e9c0 3300 	strd	r3, r3, [r0]
 8016866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801686a:	6083      	str	r3, [r0, #8]
 801686c:	8181      	strh	r1, [r0, #12]
 801686e:	6643      	str	r3, [r0, #100]	; 0x64
 8016870:	81c2      	strh	r2, [r0, #14]
 8016872:	6183      	str	r3, [r0, #24]
 8016874:	4619      	mov	r1, r3
 8016876:	2208      	movs	r2, #8
 8016878:	305c      	adds	r0, #92	; 0x5c
 801687a:	f7fe fae3 	bl	8014e44 <memset>
 801687e:	4b05      	ldr	r3, [pc, #20]	; (8016894 <std+0x38>)
 8016880:	6263      	str	r3, [r4, #36]	; 0x24
 8016882:	4b05      	ldr	r3, [pc, #20]	; (8016898 <std+0x3c>)
 8016884:	62a3      	str	r3, [r4, #40]	; 0x28
 8016886:	4b05      	ldr	r3, [pc, #20]	; (801689c <std+0x40>)
 8016888:	62e3      	str	r3, [r4, #44]	; 0x2c
 801688a:	4b05      	ldr	r3, [pc, #20]	; (80168a0 <std+0x44>)
 801688c:	6224      	str	r4, [r4, #32]
 801688e:	6323      	str	r3, [r4, #48]	; 0x30
 8016890:	bd10      	pop	{r4, pc}
 8016892:	bf00      	nop
 8016894:	08017719 	.word	0x08017719
 8016898:	0801773b 	.word	0x0801773b
 801689c:	08017773 	.word	0x08017773
 80168a0:	08017797 	.word	0x08017797

080168a4 <_cleanup_r>:
 80168a4:	4901      	ldr	r1, [pc, #4]	; (80168ac <_cleanup_r+0x8>)
 80168a6:	f000 b8c1 	b.w	8016a2c <_fwalk_reent>
 80168aa:	bf00      	nop
 80168ac:	08017a81 	.word	0x08017a81

080168b0 <__sfmoreglue>:
 80168b0:	b570      	push	{r4, r5, r6, lr}
 80168b2:	1e4a      	subs	r2, r1, #1
 80168b4:	2568      	movs	r5, #104	; 0x68
 80168b6:	4355      	muls	r5, r2
 80168b8:	460e      	mov	r6, r1
 80168ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168be:	f7fe fb19 	bl	8014ef4 <_malloc_r>
 80168c2:	4604      	mov	r4, r0
 80168c4:	b140      	cbz	r0, 80168d8 <__sfmoreglue+0x28>
 80168c6:	2100      	movs	r1, #0
 80168c8:	e9c0 1600 	strd	r1, r6, [r0]
 80168cc:	300c      	adds	r0, #12
 80168ce:	60a0      	str	r0, [r4, #8]
 80168d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168d4:	f7fe fab6 	bl	8014e44 <memset>
 80168d8:	4620      	mov	r0, r4
 80168da:	bd70      	pop	{r4, r5, r6, pc}

080168dc <__sfp_lock_acquire>:
 80168dc:	4801      	ldr	r0, [pc, #4]	; (80168e4 <__sfp_lock_acquire+0x8>)
 80168de:	f000 b8ca 	b.w	8016a76 <__retarget_lock_acquire_recursive>
 80168e2:	bf00      	nop
 80168e4:	20006b10 	.word	0x20006b10

080168e8 <__sfp_lock_release>:
 80168e8:	4801      	ldr	r0, [pc, #4]	; (80168f0 <__sfp_lock_release+0x8>)
 80168ea:	f000 b8c5 	b.w	8016a78 <__retarget_lock_release_recursive>
 80168ee:	bf00      	nop
 80168f0:	20006b10 	.word	0x20006b10

080168f4 <__sinit_lock_acquire>:
 80168f4:	4801      	ldr	r0, [pc, #4]	; (80168fc <__sinit_lock_acquire+0x8>)
 80168f6:	f000 b8be 	b.w	8016a76 <__retarget_lock_acquire_recursive>
 80168fa:	bf00      	nop
 80168fc:	20006b0b 	.word	0x20006b0b

08016900 <__sinit_lock_release>:
 8016900:	4801      	ldr	r0, [pc, #4]	; (8016908 <__sinit_lock_release+0x8>)
 8016902:	f000 b8b9 	b.w	8016a78 <__retarget_lock_release_recursive>
 8016906:	bf00      	nop
 8016908:	20006b0b 	.word	0x20006b0b

0801690c <__sinit>:
 801690c:	b510      	push	{r4, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	f7ff fff0 	bl	80168f4 <__sinit_lock_acquire>
 8016914:	69a3      	ldr	r3, [r4, #24]
 8016916:	b11b      	cbz	r3, 8016920 <__sinit+0x14>
 8016918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801691c:	f7ff bff0 	b.w	8016900 <__sinit_lock_release>
 8016920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016924:	6523      	str	r3, [r4, #80]	; 0x50
 8016926:	4b13      	ldr	r3, [pc, #76]	; (8016974 <__sinit+0x68>)
 8016928:	4a13      	ldr	r2, [pc, #76]	; (8016978 <__sinit+0x6c>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	62a2      	str	r2, [r4, #40]	; 0x28
 801692e:	42a3      	cmp	r3, r4
 8016930:	bf04      	itt	eq
 8016932:	2301      	moveq	r3, #1
 8016934:	61a3      	streq	r3, [r4, #24]
 8016936:	4620      	mov	r0, r4
 8016938:	f000 f820 	bl	801697c <__sfp>
 801693c:	6060      	str	r0, [r4, #4]
 801693e:	4620      	mov	r0, r4
 8016940:	f000 f81c 	bl	801697c <__sfp>
 8016944:	60a0      	str	r0, [r4, #8]
 8016946:	4620      	mov	r0, r4
 8016948:	f000 f818 	bl	801697c <__sfp>
 801694c:	2200      	movs	r2, #0
 801694e:	60e0      	str	r0, [r4, #12]
 8016950:	2104      	movs	r1, #4
 8016952:	6860      	ldr	r0, [r4, #4]
 8016954:	f7ff ff82 	bl	801685c <std>
 8016958:	68a0      	ldr	r0, [r4, #8]
 801695a:	2201      	movs	r2, #1
 801695c:	2109      	movs	r1, #9
 801695e:	f7ff ff7d 	bl	801685c <std>
 8016962:	68e0      	ldr	r0, [r4, #12]
 8016964:	2202      	movs	r2, #2
 8016966:	2112      	movs	r1, #18
 8016968:	f7ff ff78 	bl	801685c <std>
 801696c:	2301      	movs	r3, #1
 801696e:	61a3      	str	r3, [r4, #24]
 8016970:	e7d2      	b.n	8016918 <__sinit+0xc>
 8016972:	bf00      	nop
 8016974:	0801c1d0 	.word	0x0801c1d0
 8016978:	080168a5 	.word	0x080168a5

0801697c <__sfp>:
 801697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801697e:	4607      	mov	r7, r0
 8016980:	f7ff ffac 	bl	80168dc <__sfp_lock_acquire>
 8016984:	4b1e      	ldr	r3, [pc, #120]	; (8016a00 <__sfp+0x84>)
 8016986:	681e      	ldr	r6, [r3, #0]
 8016988:	69b3      	ldr	r3, [r6, #24]
 801698a:	b913      	cbnz	r3, 8016992 <__sfp+0x16>
 801698c:	4630      	mov	r0, r6
 801698e:	f7ff ffbd 	bl	801690c <__sinit>
 8016992:	3648      	adds	r6, #72	; 0x48
 8016994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016998:	3b01      	subs	r3, #1
 801699a:	d503      	bpl.n	80169a4 <__sfp+0x28>
 801699c:	6833      	ldr	r3, [r6, #0]
 801699e:	b30b      	cbz	r3, 80169e4 <__sfp+0x68>
 80169a0:	6836      	ldr	r6, [r6, #0]
 80169a2:	e7f7      	b.n	8016994 <__sfp+0x18>
 80169a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80169a8:	b9d5      	cbnz	r5, 80169e0 <__sfp+0x64>
 80169aa:	4b16      	ldr	r3, [pc, #88]	; (8016a04 <__sfp+0x88>)
 80169ac:	60e3      	str	r3, [r4, #12]
 80169ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169b2:	6665      	str	r5, [r4, #100]	; 0x64
 80169b4:	f000 f85e 	bl	8016a74 <__retarget_lock_init_recursive>
 80169b8:	f7ff ff96 	bl	80168e8 <__sfp_lock_release>
 80169bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80169c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80169c4:	6025      	str	r5, [r4, #0]
 80169c6:	61a5      	str	r5, [r4, #24]
 80169c8:	2208      	movs	r2, #8
 80169ca:	4629      	mov	r1, r5
 80169cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169d0:	f7fe fa38 	bl	8014e44 <memset>
 80169d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169dc:	4620      	mov	r0, r4
 80169de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e0:	3468      	adds	r4, #104	; 0x68
 80169e2:	e7d9      	b.n	8016998 <__sfp+0x1c>
 80169e4:	2104      	movs	r1, #4
 80169e6:	4638      	mov	r0, r7
 80169e8:	f7ff ff62 	bl	80168b0 <__sfmoreglue>
 80169ec:	4604      	mov	r4, r0
 80169ee:	6030      	str	r0, [r6, #0]
 80169f0:	2800      	cmp	r0, #0
 80169f2:	d1d5      	bne.n	80169a0 <__sfp+0x24>
 80169f4:	f7ff ff78 	bl	80168e8 <__sfp_lock_release>
 80169f8:	230c      	movs	r3, #12
 80169fa:	603b      	str	r3, [r7, #0]
 80169fc:	e7ee      	b.n	80169dc <__sfp+0x60>
 80169fe:	bf00      	nop
 8016a00:	0801c1d0 	.word	0x0801c1d0
 8016a04:	ffff0001 	.word	0xffff0001

08016a08 <fiprintf>:
 8016a08:	b40e      	push	{r1, r2, r3}
 8016a0a:	b503      	push	{r0, r1, lr}
 8016a0c:	4601      	mov	r1, r0
 8016a0e:	ab03      	add	r3, sp, #12
 8016a10:	4805      	ldr	r0, [pc, #20]	; (8016a28 <fiprintf+0x20>)
 8016a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a16:	6800      	ldr	r0, [r0, #0]
 8016a18:	9301      	str	r3, [sp, #4]
 8016a1a:	f000 fd4d 	bl	80174b8 <_vfiprintf_r>
 8016a1e:	b002      	add	sp, #8
 8016a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a24:	b003      	add	sp, #12
 8016a26:	4770      	bx	lr
 8016a28:	20000024 	.word	0x20000024

08016a2c <_fwalk_reent>:
 8016a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a30:	4606      	mov	r6, r0
 8016a32:	4688      	mov	r8, r1
 8016a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a38:	2700      	movs	r7, #0
 8016a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8016a42:	d505      	bpl.n	8016a50 <_fwalk_reent+0x24>
 8016a44:	6824      	ldr	r4, [r4, #0]
 8016a46:	2c00      	cmp	r4, #0
 8016a48:	d1f7      	bne.n	8016a3a <_fwalk_reent+0xe>
 8016a4a:	4638      	mov	r0, r7
 8016a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a50:	89ab      	ldrh	r3, [r5, #12]
 8016a52:	2b01      	cmp	r3, #1
 8016a54:	d907      	bls.n	8016a66 <_fwalk_reent+0x3a>
 8016a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	d003      	beq.n	8016a66 <_fwalk_reent+0x3a>
 8016a5e:	4629      	mov	r1, r5
 8016a60:	4630      	mov	r0, r6
 8016a62:	47c0      	blx	r8
 8016a64:	4307      	orrs	r7, r0
 8016a66:	3568      	adds	r5, #104	; 0x68
 8016a68:	e7e9      	b.n	8016a3e <_fwalk_reent+0x12>
	...

08016a6c <_localeconv_r>:
 8016a6c:	4800      	ldr	r0, [pc, #0]	; (8016a70 <_localeconv_r+0x4>)
 8016a6e:	4770      	bx	lr
 8016a70:	20000178 	.word	0x20000178

08016a74 <__retarget_lock_init_recursive>:
 8016a74:	4770      	bx	lr

08016a76 <__retarget_lock_acquire_recursive>:
 8016a76:	4770      	bx	lr

08016a78 <__retarget_lock_release_recursive>:
 8016a78:	4770      	bx	lr
	...

08016a7c <__malloc_lock>:
 8016a7c:	4801      	ldr	r0, [pc, #4]	; (8016a84 <__malloc_lock+0x8>)
 8016a7e:	f7ff bffa 	b.w	8016a76 <__retarget_lock_acquire_recursive>
 8016a82:	bf00      	nop
 8016a84:	20006b0c 	.word	0x20006b0c

08016a88 <__malloc_unlock>:
 8016a88:	4801      	ldr	r0, [pc, #4]	; (8016a90 <__malloc_unlock+0x8>)
 8016a8a:	f7ff bff5 	b.w	8016a78 <__retarget_lock_release_recursive>
 8016a8e:	bf00      	nop
 8016a90:	20006b0c 	.word	0x20006b0c

08016a94 <_Balloc>:
 8016a94:	b570      	push	{r4, r5, r6, lr}
 8016a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016a98:	4604      	mov	r4, r0
 8016a9a:	460d      	mov	r5, r1
 8016a9c:	b976      	cbnz	r6, 8016abc <_Balloc+0x28>
 8016a9e:	2010      	movs	r0, #16
 8016aa0:	f7fe f98a 	bl	8014db8 <malloc>
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	6260      	str	r0, [r4, #36]	; 0x24
 8016aa8:	b920      	cbnz	r0, 8016ab4 <_Balloc+0x20>
 8016aaa:	4b18      	ldr	r3, [pc, #96]	; (8016b0c <_Balloc+0x78>)
 8016aac:	4818      	ldr	r0, [pc, #96]	; (8016b10 <_Balloc+0x7c>)
 8016aae:	2166      	movs	r1, #102	; 0x66
 8016ab0:	f7ff f838 	bl	8015b24 <__assert_func>
 8016ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ab8:	6006      	str	r6, [r0, #0]
 8016aba:	60c6      	str	r6, [r0, #12]
 8016abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016abe:	68f3      	ldr	r3, [r6, #12]
 8016ac0:	b183      	cbz	r3, 8016ae4 <_Balloc+0x50>
 8016ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016aca:	b9b8      	cbnz	r0, 8016afc <_Balloc+0x68>
 8016acc:	2101      	movs	r1, #1
 8016ace:	fa01 f605 	lsl.w	r6, r1, r5
 8016ad2:	1d72      	adds	r2, r6, #5
 8016ad4:	0092      	lsls	r2, r2, #2
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	f000 fb5a 	bl	8017190 <_calloc_r>
 8016adc:	b160      	cbz	r0, 8016af8 <_Balloc+0x64>
 8016ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ae2:	e00e      	b.n	8016b02 <_Balloc+0x6e>
 8016ae4:	2221      	movs	r2, #33	; 0x21
 8016ae6:	2104      	movs	r1, #4
 8016ae8:	4620      	mov	r0, r4
 8016aea:	f000 fb51 	bl	8017190 <_calloc_r>
 8016aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016af0:	60f0      	str	r0, [r6, #12]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d1e4      	bne.n	8016ac2 <_Balloc+0x2e>
 8016af8:	2000      	movs	r0, #0
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
 8016afc:	6802      	ldr	r2, [r0, #0]
 8016afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b02:	2300      	movs	r3, #0
 8016b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016b08:	e7f7      	b.n	8016afa <_Balloc+0x66>
 8016b0a:	bf00      	nop
 8016b0c:	0801c208 	.word	0x0801c208
 8016b10:	0801c398 	.word	0x0801c398

08016b14 <_Bfree>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016b18:	4605      	mov	r5, r0
 8016b1a:	460c      	mov	r4, r1
 8016b1c:	b976      	cbnz	r6, 8016b3c <_Bfree+0x28>
 8016b1e:	2010      	movs	r0, #16
 8016b20:	f7fe f94a 	bl	8014db8 <malloc>
 8016b24:	4602      	mov	r2, r0
 8016b26:	6268      	str	r0, [r5, #36]	; 0x24
 8016b28:	b920      	cbnz	r0, 8016b34 <_Bfree+0x20>
 8016b2a:	4b09      	ldr	r3, [pc, #36]	; (8016b50 <_Bfree+0x3c>)
 8016b2c:	4809      	ldr	r0, [pc, #36]	; (8016b54 <_Bfree+0x40>)
 8016b2e:	218a      	movs	r1, #138	; 0x8a
 8016b30:	f7fe fff8 	bl	8015b24 <__assert_func>
 8016b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b38:	6006      	str	r6, [r0, #0]
 8016b3a:	60c6      	str	r6, [r0, #12]
 8016b3c:	b13c      	cbz	r4, 8016b4e <_Bfree+0x3a>
 8016b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016b40:	6862      	ldr	r2, [r4, #4]
 8016b42:	68db      	ldr	r3, [r3, #12]
 8016b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016b48:	6021      	str	r1, [r4, #0]
 8016b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016b4e:	bd70      	pop	{r4, r5, r6, pc}
 8016b50:	0801c208 	.word	0x0801c208
 8016b54:	0801c398 	.word	0x0801c398

08016b58 <__multadd>:
 8016b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5c:	690e      	ldr	r6, [r1, #16]
 8016b5e:	4607      	mov	r7, r0
 8016b60:	4698      	mov	r8, r3
 8016b62:	460c      	mov	r4, r1
 8016b64:	f101 0014 	add.w	r0, r1, #20
 8016b68:	2300      	movs	r3, #0
 8016b6a:	6805      	ldr	r5, [r0, #0]
 8016b6c:	b2a9      	uxth	r1, r5
 8016b6e:	fb02 8101 	mla	r1, r2, r1, r8
 8016b72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016b76:	0c2d      	lsrs	r5, r5, #16
 8016b78:	fb02 c505 	mla	r5, r2, r5, ip
 8016b7c:	b289      	uxth	r1, r1
 8016b7e:	3301      	adds	r3, #1
 8016b80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016b84:	429e      	cmp	r6, r3
 8016b86:	f840 1b04 	str.w	r1, [r0], #4
 8016b8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016b8e:	dcec      	bgt.n	8016b6a <__multadd+0x12>
 8016b90:	f1b8 0f00 	cmp.w	r8, #0
 8016b94:	d022      	beq.n	8016bdc <__multadd+0x84>
 8016b96:	68a3      	ldr	r3, [r4, #8]
 8016b98:	42b3      	cmp	r3, r6
 8016b9a:	dc19      	bgt.n	8016bd0 <__multadd+0x78>
 8016b9c:	6861      	ldr	r1, [r4, #4]
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	3101      	adds	r1, #1
 8016ba2:	f7ff ff77 	bl	8016a94 <_Balloc>
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	b928      	cbnz	r0, 8016bb6 <__multadd+0x5e>
 8016baa:	4602      	mov	r2, r0
 8016bac:	4b0d      	ldr	r3, [pc, #52]	; (8016be4 <__multadd+0x8c>)
 8016bae:	480e      	ldr	r0, [pc, #56]	; (8016be8 <__multadd+0x90>)
 8016bb0:	21b5      	movs	r1, #181	; 0xb5
 8016bb2:	f7fe ffb7 	bl	8015b24 <__assert_func>
 8016bb6:	6922      	ldr	r2, [r4, #16]
 8016bb8:	3202      	adds	r2, #2
 8016bba:	f104 010c 	add.w	r1, r4, #12
 8016bbe:	0092      	lsls	r2, r2, #2
 8016bc0:	300c      	adds	r0, #12
 8016bc2:	f7fe f917 	bl	8014df4 <memcpy>
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	4638      	mov	r0, r7
 8016bca:	f7ff ffa3 	bl	8016b14 <_Bfree>
 8016bce:	462c      	mov	r4, r5
 8016bd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016bd4:	3601      	adds	r6, #1
 8016bd6:	f8c3 8014 	str.w	r8, [r3, #20]
 8016bda:	6126      	str	r6, [r4, #16]
 8016bdc:	4620      	mov	r0, r4
 8016bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be2:	bf00      	nop
 8016be4:	0801c326 	.word	0x0801c326
 8016be8:	0801c398 	.word	0x0801c398

08016bec <__hi0bits>:
 8016bec:	0c03      	lsrs	r3, r0, #16
 8016bee:	041b      	lsls	r3, r3, #16
 8016bf0:	b9d3      	cbnz	r3, 8016c28 <__hi0bits+0x3c>
 8016bf2:	0400      	lsls	r0, r0, #16
 8016bf4:	2310      	movs	r3, #16
 8016bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016bfa:	bf04      	itt	eq
 8016bfc:	0200      	lsleq	r0, r0, #8
 8016bfe:	3308      	addeq	r3, #8
 8016c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016c04:	bf04      	itt	eq
 8016c06:	0100      	lsleq	r0, r0, #4
 8016c08:	3304      	addeq	r3, #4
 8016c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016c0e:	bf04      	itt	eq
 8016c10:	0080      	lsleq	r0, r0, #2
 8016c12:	3302      	addeq	r3, #2
 8016c14:	2800      	cmp	r0, #0
 8016c16:	db05      	blt.n	8016c24 <__hi0bits+0x38>
 8016c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016c1c:	f103 0301 	add.w	r3, r3, #1
 8016c20:	bf08      	it	eq
 8016c22:	2320      	moveq	r3, #32
 8016c24:	4618      	mov	r0, r3
 8016c26:	4770      	bx	lr
 8016c28:	2300      	movs	r3, #0
 8016c2a:	e7e4      	b.n	8016bf6 <__hi0bits+0xa>

08016c2c <__lo0bits>:
 8016c2c:	6803      	ldr	r3, [r0, #0]
 8016c2e:	f013 0207 	ands.w	r2, r3, #7
 8016c32:	4601      	mov	r1, r0
 8016c34:	d00b      	beq.n	8016c4e <__lo0bits+0x22>
 8016c36:	07da      	lsls	r2, r3, #31
 8016c38:	d424      	bmi.n	8016c84 <__lo0bits+0x58>
 8016c3a:	0798      	lsls	r0, r3, #30
 8016c3c:	bf49      	itett	mi
 8016c3e:	085b      	lsrmi	r3, r3, #1
 8016c40:	089b      	lsrpl	r3, r3, #2
 8016c42:	2001      	movmi	r0, #1
 8016c44:	600b      	strmi	r3, [r1, #0]
 8016c46:	bf5c      	itt	pl
 8016c48:	600b      	strpl	r3, [r1, #0]
 8016c4a:	2002      	movpl	r0, #2
 8016c4c:	4770      	bx	lr
 8016c4e:	b298      	uxth	r0, r3
 8016c50:	b9b0      	cbnz	r0, 8016c80 <__lo0bits+0x54>
 8016c52:	0c1b      	lsrs	r3, r3, #16
 8016c54:	2010      	movs	r0, #16
 8016c56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016c5a:	bf04      	itt	eq
 8016c5c:	0a1b      	lsreq	r3, r3, #8
 8016c5e:	3008      	addeq	r0, #8
 8016c60:	071a      	lsls	r2, r3, #28
 8016c62:	bf04      	itt	eq
 8016c64:	091b      	lsreq	r3, r3, #4
 8016c66:	3004      	addeq	r0, #4
 8016c68:	079a      	lsls	r2, r3, #30
 8016c6a:	bf04      	itt	eq
 8016c6c:	089b      	lsreq	r3, r3, #2
 8016c6e:	3002      	addeq	r0, #2
 8016c70:	07da      	lsls	r2, r3, #31
 8016c72:	d403      	bmi.n	8016c7c <__lo0bits+0x50>
 8016c74:	085b      	lsrs	r3, r3, #1
 8016c76:	f100 0001 	add.w	r0, r0, #1
 8016c7a:	d005      	beq.n	8016c88 <__lo0bits+0x5c>
 8016c7c:	600b      	str	r3, [r1, #0]
 8016c7e:	4770      	bx	lr
 8016c80:	4610      	mov	r0, r2
 8016c82:	e7e8      	b.n	8016c56 <__lo0bits+0x2a>
 8016c84:	2000      	movs	r0, #0
 8016c86:	4770      	bx	lr
 8016c88:	2020      	movs	r0, #32
 8016c8a:	4770      	bx	lr

08016c8c <__i2b>:
 8016c8c:	b510      	push	{r4, lr}
 8016c8e:	460c      	mov	r4, r1
 8016c90:	2101      	movs	r1, #1
 8016c92:	f7ff feff 	bl	8016a94 <_Balloc>
 8016c96:	4602      	mov	r2, r0
 8016c98:	b928      	cbnz	r0, 8016ca6 <__i2b+0x1a>
 8016c9a:	4b05      	ldr	r3, [pc, #20]	; (8016cb0 <__i2b+0x24>)
 8016c9c:	4805      	ldr	r0, [pc, #20]	; (8016cb4 <__i2b+0x28>)
 8016c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016ca2:	f7fe ff3f 	bl	8015b24 <__assert_func>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	6144      	str	r4, [r0, #20]
 8016caa:	6103      	str	r3, [r0, #16]
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	bf00      	nop
 8016cb0:	0801c326 	.word	0x0801c326
 8016cb4:	0801c398 	.word	0x0801c398

08016cb8 <__multiply>:
 8016cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cbc:	4614      	mov	r4, r2
 8016cbe:	690a      	ldr	r2, [r1, #16]
 8016cc0:	6923      	ldr	r3, [r4, #16]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	bfb8      	it	lt
 8016cc6:	460b      	movlt	r3, r1
 8016cc8:	460d      	mov	r5, r1
 8016cca:	bfbc      	itt	lt
 8016ccc:	4625      	movlt	r5, r4
 8016cce:	461c      	movlt	r4, r3
 8016cd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016cd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016cd8:	68ab      	ldr	r3, [r5, #8]
 8016cda:	6869      	ldr	r1, [r5, #4]
 8016cdc:	eb0a 0709 	add.w	r7, sl, r9
 8016ce0:	42bb      	cmp	r3, r7
 8016ce2:	b085      	sub	sp, #20
 8016ce4:	bfb8      	it	lt
 8016ce6:	3101      	addlt	r1, #1
 8016ce8:	f7ff fed4 	bl	8016a94 <_Balloc>
 8016cec:	b930      	cbnz	r0, 8016cfc <__multiply+0x44>
 8016cee:	4602      	mov	r2, r0
 8016cf0:	4b42      	ldr	r3, [pc, #264]	; (8016dfc <__multiply+0x144>)
 8016cf2:	4843      	ldr	r0, [pc, #268]	; (8016e00 <__multiply+0x148>)
 8016cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8016cf8:	f7fe ff14 	bl	8015b24 <__assert_func>
 8016cfc:	f100 0614 	add.w	r6, r0, #20
 8016d00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016d04:	4633      	mov	r3, r6
 8016d06:	2200      	movs	r2, #0
 8016d08:	4543      	cmp	r3, r8
 8016d0a:	d31e      	bcc.n	8016d4a <__multiply+0x92>
 8016d0c:	f105 0c14 	add.w	ip, r5, #20
 8016d10:	f104 0314 	add.w	r3, r4, #20
 8016d14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016d18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016d1c:	9202      	str	r2, [sp, #8]
 8016d1e:	ebac 0205 	sub.w	r2, ip, r5
 8016d22:	3a15      	subs	r2, #21
 8016d24:	f022 0203 	bic.w	r2, r2, #3
 8016d28:	3204      	adds	r2, #4
 8016d2a:	f105 0115 	add.w	r1, r5, #21
 8016d2e:	458c      	cmp	ip, r1
 8016d30:	bf38      	it	cc
 8016d32:	2204      	movcc	r2, #4
 8016d34:	9201      	str	r2, [sp, #4]
 8016d36:	9a02      	ldr	r2, [sp, #8]
 8016d38:	9303      	str	r3, [sp, #12]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d808      	bhi.n	8016d50 <__multiply+0x98>
 8016d3e:	2f00      	cmp	r7, #0
 8016d40:	dc55      	bgt.n	8016dee <__multiply+0x136>
 8016d42:	6107      	str	r7, [r0, #16]
 8016d44:	b005      	add	sp, #20
 8016d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4a:	f843 2b04 	str.w	r2, [r3], #4
 8016d4e:	e7db      	b.n	8016d08 <__multiply+0x50>
 8016d50:	f8b3 a000 	ldrh.w	sl, [r3]
 8016d54:	f1ba 0f00 	cmp.w	sl, #0
 8016d58:	d020      	beq.n	8016d9c <__multiply+0xe4>
 8016d5a:	f105 0e14 	add.w	lr, r5, #20
 8016d5e:	46b1      	mov	r9, r6
 8016d60:	2200      	movs	r2, #0
 8016d62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016d66:	f8d9 b000 	ldr.w	fp, [r9]
 8016d6a:	b2a1      	uxth	r1, r4
 8016d6c:	fa1f fb8b 	uxth.w	fp, fp
 8016d70:	fb0a b101 	mla	r1, sl, r1, fp
 8016d74:	4411      	add	r1, r2
 8016d76:	f8d9 2000 	ldr.w	r2, [r9]
 8016d7a:	0c24      	lsrs	r4, r4, #16
 8016d7c:	0c12      	lsrs	r2, r2, #16
 8016d7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8016d82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016d86:	b289      	uxth	r1, r1
 8016d88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016d8c:	45f4      	cmp	ip, lr
 8016d8e:	f849 1b04 	str.w	r1, [r9], #4
 8016d92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016d96:	d8e4      	bhi.n	8016d62 <__multiply+0xaa>
 8016d98:	9901      	ldr	r1, [sp, #4]
 8016d9a:	5072      	str	r2, [r6, r1]
 8016d9c:	9a03      	ldr	r2, [sp, #12]
 8016d9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016da2:	3304      	adds	r3, #4
 8016da4:	f1b9 0f00 	cmp.w	r9, #0
 8016da8:	d01f      	beq.n	8016dea <__multiply+0x132>
 8016daa:	6834      	ldr	r4, [r6, #0]
 8016dac:	f105 0114 	add.w	r1, r5, #20
 8016db0:	46b6      	mov	lr, r6
 8016db2:	f04f 0a00 	mov.w	sl, #0
 8016db6:	880a      	ldrh	r2, [r1, #0]
 8016db8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016dbc:	fb09 b202 	mla	r2, r9, r2, fp
 8016dc0:	4492      	add	sl, r2
 8016dc2:	b2a4      	uxth	r4, r4
 8016dc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016dc8:	f84e 4b04 	str.w	r4, [lr], #4
 8016dcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8016dd0:	f8be 2000 	ldrh.w	r2, [lr]
 8016dd4:	0c24      	lsrs	r4, r4, #16
 8016dd6:	fb09 2404 	mla	r4, r9, r4, r2
 8016dda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016dde:	458c      	cmp	ip, r1
 8016de0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016de4:	d8e7      	bhi.n	8016db6 <__multiply+0xfe>
 8016de6:	9a01      	ldr	r2, [sp, #4]
 8016de8:	50b4      	str	r4, [r6, r2]
 8016dea:	3604      	adds	r6, #4
 8016dec:	e7a3      	b.n	8016d36 <__multiply+0x7e>
 8016dee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d1a5      	bne.n	8016d42 <__multiply+0x8a>
 8016df6:	3f01      	subs	r7, #1
 8016df8:	e7a1      	b.n	8016d3e <__multiply+0x86>
 8016dfa:	bf00      	nop
 8016dfc:	0801c326 	.word	0x0801c326
 8016e00:	0801c398 	.word	0x0801c398

08016e04 <__pow5mult>:
 8016e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e08:	4615      	mov	r5, r2
 8016e0a:	f012 0203 	ands.w	r2, r2, #3
 8016e0e:	4606      	mov	r6, r0
 8016e10:	460f      	mov	r7, r1
 8016e12:	d007      	beq.n	8016e24 <__pow5mult+0x20>
 8016e14:	4c25      	ldr	r4, [pc, #148]	; (8016eac <__pow5mult+0xa8>)
 8016e16:	3a01      	subs	r2, #1
 8016e18:	2300      	movs	r3, #0
 8016e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016e1e:	f7ff fe9b 	bl	8016b58 <__multadd>
 8016e22:	4607      	mov	r7, r0
 8016e24:	10ad      	asrs	r5, r5, #2
 8016e26:	d03d      	beq.n	8016ea4 <__pow5mult+0xa0>
 8016e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016e2a:	b97c      	cbnz	r4, 8016e4c <__pow5mult+0x48>
 8016e2c:	2010      	movs	r0, #16
 8016e2e:	f7fd ffc3 	bl	8014db8 <malloc>
 8016e32:	4602      	mov	r2, r0
 8016e34:	6270      	str	r0, [r6, #36]	; 0x24
 8016e36:	b928      	cbnz	r0, 8016e44 <__pow5mult+0x40>
 8016e38:	4b1d      	ldr	r3, [pc, #116]	; (8016eb0 <__pow5mult+0xac>)
 8016e3a:	481e      	ldr	r0, [pc, #120]	; (8016eb4 <__pow5mult+0xb0>)
 8016e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016e40:	f7fe fe70 	bl	8015b24 <__assert_func>
 8016e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016e48:	6004      	str	r4, [r0, #0]
 8016e4a:	60c4      	str	r4, [r0, #12]
 8016e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016e54:	b94c      	cbnz	r4, 8016e6a <__pow5mult+0x66>
 8016e56:	f240 2171 	movw	r1, #625	; 0x271
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7ff ff16 	bl	8016c8c <__i2b>
 8016e60:	2300      	movs	r3, #0
 8016e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8016e66:	4604      	mov	r4, r0
 8016e68:	6003      	str	r3, [r0, #0]
 8016e6a:	f04f 0900 	mov.w	r9, #0
 8016e6e:	07eb      	lsls	r3, r5, #31
 8016e70:	d50a      	bpl.n	8016e88 <__pow5mult+0x84>
 8016e72:	4639      	mov	r1, r7
 8016e74:	4622      	mov	r2, r4
 8016e76:	4630      	mov	r0, r6
 8016e78:	f7ff ff1e 	bl	8016cb8 <__multiply>
 8016e7c:	4639      	mov	r1, r7
 8016e7e:	4680      	mov	r8, r0
 8016e80:	4630      	mov	r0, r6
 8016e82:	f7ff fe47 	bl	8016b14 <_Bfree>
 8016e86:	4647      	mov	r7, r8
 8016e88:	106d      	asrs	r5, r5, #1
 8016e8a:	d00b      	beq.n	8016ea4 <__pow5mult+0xa0>
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	b938      	cbnz	r0, 8016ea0 <__pow5mult+0x9c>
 8016e90:	4622      	mov	r2, r4
 8016e92:	4621      	mov	r1, r4
 8016e94:	4630      	mov	r0, r6
 8016e96:	f7ff ff0f 	bl	8016cb8 <__multiply>
 8016e9a:	6020      	str	r0, [r4, #0]
 8016e9c:	f8c0 9000 	str.w	r9, [r0]
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	e7e4      	b.n	8016e6e <__pow5mult+0x6a>
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eaa:	bf00      	nop
 8016eac:	0801c4e8 	.word	0x0801c4e8
 8016eb0:	0801c208 	.word	0x0801c208
 8016eb4:	0801c398 	.word	0x0801c398

08016eb8 <__lshift>:
 8016eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ebc:	460c      	mov	r4, r1
 8016ebe:	6849      	ldr	r1, [r1, #4]
 8016ec0:	6923      	ldr	r3, [r4, #16]
 8016ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016ec6:	68a3      	ldr	r3, [r4, #8]
 8016ec8:	4607      	mov	r7, r0
 8016eca:	4691      	mov	r9, r2
 8016ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ed0:	f108 0601 	add.w	r6, r8, #1
 8016ed4:	42b3      	cmp	r3, r6
 8016ed6:	db0b      	blt.n	8016ef0 <__lshift+0x38>
 8016ed8:	4638      	mov	r0, r7
 8016eda:	f7ff fddb 	bl	8016a94 <_Balloc>
 8016ede:	4605      	mov	r5, r0
 8016ee0:	b948      	cbnz	r0, 8016ef6 <__lshift+0x3e>
 8016ee2:	4602      	mov	r2, r0
 8016ee4:	4b28      	ldr	r3, [pc, #160]	; (8016f88 <__lshift+0xd0>)
 8016ee6:	4829      	ldr	r0, [pc, #164]	; (8016f8c <__lshift+0xd4>)
 8016ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016eec:	f7fe fe1a 	bl	8015b24 <__assert_func>
 8016ef0:	3101      	adds	r1, #1
 8016ef2:	005b      	lsls	r3, r3, #1
 8016ef4:	e7ee      	b.n	8016ed4 <__lshift+0x1c>
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f100 0114 	add.w	r1, r0, #20
 8016efc:	f100 0210 	add.w	r2, r0, #16
 8016f00:	4618      	mov	r0, r3
 8016f02:	4553      	cmp	r3, sl
 8016f04:	db33      	blt.n	8016f6e <__lshift+0xb6>
 8016f06:	6920      	ldr	r0, [r4, #16]
 8016f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016f0c:	f104 0314 	add.w	r3, r4, #20
 8016f10:	f019 091f 	ands.w	r9, r9, #31
 8016f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016f1c:	d02b      	beq.n	8016f76 <__lshift+0xbe>
 8016f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8016f22:	468a      	mov	sl, r1
 8016f24:	2200      	movs	r2, #0
 8016f26:	6818      	ldr	r0, [r3, #0]
 8016f28:	fa00 f009 	lsl.w	r0, r0, r9
 8016f2c:	4302      	orrs	r2, r0
 8016f2e:	f84a 2b04 	str.w	r2, [sl], #4
 8016f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f36:	459c      	cmp	ip, r3
 8016f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8016f3c:	d8f3      	bhi.n	8016f26 <__lshift+0x6e>
 8016f3e:	ebac 0304 	sub.w	r3, ip, r4
 8016f42:	3b15      	subs	r3, #21
 8016f44:	f023 0303 	bic.w	r3, r3, #3
 8016f48:	3304      	adds	r3, #4
 8016f4a:	f104 0015 	add.w	r0, r4, #21
 8016f4e:	4584      	cmp	ip, r0
 8016f50:	bf38      	it	cc
 8016f52:	2304      	movcc	r3, #4
 8016f54:	50ca      	str	r2, [r1, r3]
 8016f56:	b10a      	cbz	r2, 8016f5c <__lshift+0xa4>
 8016f58:	f108 0602 	add.w	r6, r8, #2
 8016f5c:	3e01      	subs	r6, #1
 8016f5e:	4638      	mov	r0, r7
 8016f60:	612e      	str	r6, [r5, #16]
 8016f62:	4621      	mov	r1, r4
 8016f64:	f7ff fdd6 	bl	8016b14 <_Bfree>
 8016f68:	4628      	mov	r0, r5
 8016f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016f72:	3301      	adds	r3, #1
 8016f74:	e7c5      	b.n	8016f02 <__lshift+0x4a>
 8016f76:	3904      	subs	r1, #4
 8016f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016f80:	459c      	cmp	ip, r3
 8016f82:	d8f9      	bhi.n	8016f78 <__lshift+0xc0>
 8016f84:	e7ea      	b.n	8016f5c <__lshift+0xa4>
 8016f86:	bf00      	nop
 8016f88:	0801c326 	.word	0x0801c326
 8016f8c:	0801c398 	.word	0x0801c398

08016f90 <__mcmp>:
 8016f90:	b530      	push	{r4, r5, lr}
 8016f92:	6902      	ldr	r2, [r0, #16]
 8016f94:	690c      	ldr	r4, [r1, #16]
 8016f96:	1b12      	subs	r2, r2, r4
 8016f98:	d10e      	bne.n	8016fb8 <__mcmp+0x28>
 8016f9a:	f100 0314 	add.w	r3, r0, #20
 8016f9e:	3114      	adds	r1, #20
 8016fa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016fa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016fa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016fac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016fb0:	42a5      	cmp	r5, r4
 8016fb2:	d003      	beq.n	8016fbc <__mcmp+0x2c>
 8016fb4:	d305      	bcc.n	8016fc2 <__mcmp+0x32>
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	4610      	mov	r0, r2
 8016fba:	bd30      	pop	{r4, r5, pc}
 8016fbc:	4283      	cmp	r3, r0
 8016fbe:	d3f3      	bcc.n	8016fa8 <__mcmp+0x18>
 8016fc0:	e7fa      	b.n	8016fb8 <__mcmp+0x28>
 8016fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc6:	e7f7      	b.n	8016fb8 <__mcmp+0x28>

08016fc8 <__mdiff>:
 8016fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fcc:	460c      	mov	r4, r1
 8016fce:	4606      	mov	r6, r0
 8016fd0:	4611      	mov	r1, r2
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	4617      	mov	r7, r2
 8016fd6:	f7ff ffdb 	bl	8016f90 <__mcmp>
 8016fda:	1e05      	subs	r5, r0, #0
 8016fdc:	d110      	bne.n	8017000 <__mdiff+0x38>
 8016fde:	4629      	mov	r1, r5
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f7ff fd57 	bl	8016a94 <_Balloc>
 8016fe6:	b930      	cbnz	r0, 8016ff6 <__mdiff+0x2e>
 8016fe8:	4b39      	ldr	r3, [pc, #228]	; (80170d0 <__mdiff+0x108>)
 8016fea:	4602      	mov	r2, r0
 8016fec:	f240 2132 	movw	r1, #562	; 0x232
 8016ff0:	4838      	ldr	r0, [pc, #224]	; (80170d4 <__mdiff+0x10c>)
 8016ff2:	f7fe fd97 	bl	8015b24 <__assert_func>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017000:	bfa4      	itt	ge
 8017002:	463b      	movge	r3, r7
 8017004:	4627      	movge	r7, r4
 8017006:	4630      	mov	r0, r6
 8017008:	6879      	ldr	r1, [r7, #4]
 801700a:	bfa6      	itte	ge
 801700c:	461c      	movge	r4, r3
 801700e:	2500      	movge	r5, #0
 8017010:	2501      	movlt	r5, #1
 8017012:	f7ff fd3f 	bl	8016a94 <_Balloc>
 8017016:	b920      	cbnz	r0, 8017022 <__mdiff+0x5a>
 8017018:	4b2d      	ldr	r3, [pc, #180]	; (80170d0 <__mdiff+0x108>)
 801701a:	4602      	mov	r2, r0
 801701c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017020:	e7e6      	b.n	8016ff0 <__mdiff+0x28>
 8017022:	693e      	ldr	r6, [r7, #16]
 8017024:	60c5      	str	r5, [r0, #12]
 8017026:	6925      	ldr	r5, [r4, #16]
 8017028:	f107 0114 	add.w	r1, r7, #20
 801702c:	f104 0914 	add.w	r9, r4, #20
 8017030:	f100 0e14 	add.w	lr, r0, #20
 8017034:	f107 0210 	add.w	r2, r7, #16
 8017038:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801703c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8017040:	46f2      	mov	sl, lr
 8017042:	2700      	movs	r7, #0
 8017044:	f859 3b04 	ldr.w	r3, [r9], #4
 8017048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801704c:	fa1f f883 	uxth.w	r8, r3
 8017050:	fa17 f78b 	uxtah	r7, r7, fp
 8017054:	0c1b      	lsrs	r3, r3, #16
 8017056:	eba7 0808 	sub.w	r8, r7, r8
 801705a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801705e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017062:	fa1f f888 	uxth.w	r8, r8
 8017066:	141f      	asrs	r7, r3, #16
 8017068:	454d      	cmp	r5, r9
 801706a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801706e:	f84a 3b04 	str.w	r3, [sl], #4
 8017072:	d8e7      	bhi.n	8017044 <__mdiff+0x7c>
 8017074:	1b2b      	subs	r3, r5, r4
 8017076:	3b15      	subs	r3, #21
 8017078:	f023 0303 	bic.w	r3, r3, #3
 801707c:	3304      	adds	r3, #4
 801707e:	3415      	adds	r4, #21
 8017080:	42a5      	cmp	r5, r4
 8017082:	bf38      	it	cc
 8017084:	2304      	movcc	r3, #4
 8017086:	4419      	add	r1, r3
 8017088:	4473      	add	r3, lr
 801708a:	469e      	mov	lr, r3
 801708c:	460d      	mov	r5, r1
 801708e:	4565      	cmp	r5, ip
 8017090:	d30e      	bcc.n	80170b0 <__mdiff+0xe8>
 8017092:	f10c 0203 	add.w	r2, ip, #3
 8017096:	1a52      	subs	r2, r2, r1
 8017098:	f022 0203 	bic.w	r2, r2, #3
 801709c:	3903      	subs	r1, #3
 801709e:	458c      	cmp	ip, r1
 80170a0:	bf38      	it	cc
 80170a2:	2200      	movcc	r2, #0
 80170a4:	441a      	add	r2, r3
 80170a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80170aa:	b17b      	cbz	r3, 80170cc <__mdiff+0x104>
 80170ac:	6106      	str	r6, [r0, #16]
 80170ae:	e7a5      	b.n	8016ffc <__mdiff+0x34>
 80170b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80170b4:	fa17 f488 	uxtah	r4, r7, r8
 80170b8:	1422      	asrs	r2, r4, #16
 80170ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80170be:	b2a4      	uxth	r4, r4
 80170c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80170c4:	f84e 4b04 	str.w	r4, [lr], #4
 80170c8:	1417      	asrs	r7, r2, #16
 80170ca:	e7e0      	b.n	801708e <__mdiff+0xc6>
 80170cc:	3e01      	subs	r6, #1
 80170ce:	e7ea      	b.n	80170a6 <__mdiff+0xde>
 80170d0:	0801c326 	.word	0x0801c326
 80170d4:	0801c398 	.word	0x0801c398

080170d8 <__d2b>:
 80170d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80170dc:	4689      	mov	r9, r1
 80170de:	2101      	movs	r1, #1
 80170e0:	ec57 6b10 	vmov	r6, r7, d0
 80170e4:	4690      	mov	r8, r2
 80170e6:	f7ff fcd5 	bl	8016a94 <_Balloc>
 80170ea:	4604      	mov	r4, r0
 80170ec:	b930      	cbnz	r0, 80170fc <__d2b+0x24>
 80170ee:	4602      	mov	r2, r0
 80170f0:	4b25      	ldr	r3, [pc, #148]	; (8017188 <__d2b+0xb0>)
 80170f2:	4826      	ldr	r0, [pc, #152]	; (801718c <__d2b+0xb4>)
 80170f4:	f240 310a 	movw	r1, #778	; 0x30a
 80170f8:	f7fe fd14 	bl	8015b24 <__assert_func>
 80170fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017104:	bb35      	cbnz	r5, 8017154 <__d2b+0x7c>
 8017106:	2e00      	cmp	r6, #0
 8017108:	9301      	str	r3, [sp, #4]
 801710a:	d028      	beq.n	801715e <__d2b+0x86>
 801710c:	4668      	mov	r0, sp
 801710e:	9600      	str	r6, [sp, #0]
 8017110:	f7ff fd8c 	bl	8016c2c <__lo0bits>
 8017114:	9900      	ldr	r1, [sp, #0]
 8017116:	b300      	cbz	r0, 801715a <__d2b+0x82>
 8017118:	9a01      	ldr	r2, [sp, #4]
 801711a:	f1c0 0320 	rsb	r3, r0, #32
 801711e:	fa02 f303 	lsl.w	r3, r2, r3
 8017122:	430b      	orrs	r3, r1
 8017124:	40c2      	lsrs	r2, r0
 8017126:	6163      	str	r3, [r4, #20]
 8017128:	9201      	str	r2, [sp, #4]
 801712a:	9b01      	ldr	r3, [sp, #4]
 801712c:	61a3      	str	r3, [r4, #24]
 801712e:	2b00      	cmp	r3, #0
 8017130:	bf14      	ite	ne
 8017132:	2202      	movne	r2, #2
 8017134:	2201      	moveq	r2, #1
 8017136:	6122      	str	r2, [r4, #16]
 8017138:	b1d5      	cbz	r5, 8017170 <__d2b+0x98>
 801713a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801713e:	4405      	add	r5, r0
 8017140:	f8c9 5000 	str.w	r5, [r9]
 8017144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017148:	f8c8 0000 	str.w	r0, [r8]
 801714c:	4620      	mov	r0, r4
 801714e:	b003      	add	sp, #12
 8017150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017158:	e7d5      	b.n	8017106 <__d2b+0x2e>
 801715a:	6161      	str	r1, [r4, #20]
 801715c:	e7e5      	b.n	801712a <__d2b+0x52>
 801715e:	a801      	add	r0, sp, #4
 8017160:	f7ff fd64 	bl	8016c2c <__lo0bits>
 8017164:	9b01      	ldr	r3, [sp, #4]
 8017166:	6163      	str	r3, [r4, #20]
 8017168:	2201      	movs	r2, #1
 801716a:	6122      	str	r2, [r4, #16]
 801716c:	3020      	adds	r0, #32
 801716e:	e7e3      	b.n	8017138 <__d2b+0x60>
 8017170:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017178:	f8c9 0000 	str.w	r0, [r9]
 801717c:	6918      	ldr	r0, [r3, #16]
 801717e:	f7ff fd35 	bl	8016bec <__hi0bits>
 8017182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017186:	e7df      	b.n	8017148 <__d2b+0x70>
 8017188:	0801c326 	.word	0x0801c326
 801718c:	0801c398 	.word	0x0801c398

08017190 <_calloc_r>:
 8017190:	b513      	push	{r0, r1, r4, lr}
 8017192:	434a      	muls	r2, r1
 8017194:	4611      	mov	r1, r2
 8017196:	9201      	str	r2, [sp, #4]
 8017198:	f7fd feac 	bl	8014ef4 <_malloc_r>
 801719c:	4604      	mov	r4, r0
 801719e:	b118      	cbz	r0, 80171a8 <_calloc_r+0x18>
 80171a0:	9a01      	ldr	r2, [sp, #4]
 80171a2:	2100      	movs	r1, #0
 80171a4:	f7fd fe4e 	bl	8014e44 <memset>
 80171a8:	4620      	mov	r0, r4
 80171aa:	b002      	add	sp, #8
 80171ac:	bd10      	pop	{r4, pc}

080171ae <__ssputs_r>:
 80171ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171b2:	688e      	ldr	r6, [r1, #8]
 80171b4:	429e      	cmp	r6, r3
 80171b6:	4682      	mov	sl, r0
 80171b8:	460c      	mov	r4, r1
 80171ba:	4690      	mov	r8, r2
 80171bc:	461f      	mov	r7, r3
 80171be:	d838      	bhi.n	8017232 <__ssputs_r+0x84>
 80171c0:	898a      	ldrh	r2, [r1, #12]
 80171c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80171c6:	d032      	beq.n	801722e <__ssputs_r+0x80>
 80171c8:	6825      	ldr	r5, [r4, #0]
 80171ca:	6909      	ldr	r1, [r1, #16]
 80171cc:	eba5 0901 	sub.w	r9, r5, r1
 80171d0:	6965      	ldr	r5, [r4, #20]
 80171d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171da:	3301      	adds	r3, #1
 80171dc:	444b      	add	r3, r9
 80171de:	106d      	asrs	r5, r5, #1
 80171e0:	429d      	cmp	r5, r3
 80171e2:	bf38      	it	cc
 80171e4:	461d      	movcc	r5, r3
 80171e6:	0553      	lsls	r3, r2, #21
 80171e8:	d531      	bpl.n	801724e <__ssputs_r+0xa0>
 80171ea:	4629      	mov	r1, r5
 80171ec:	f7fd fe82 	bl	8014ef4 <_malloc_r>
 80171f0:	4606      	mov	r6, r0
 80171f2:	b950      	cbnz	r0, 801720a <__ssputs_r+0x5c>
 80171f4:	230c      	movs	r3, #12
 80171f6:	f8ca 3000 	str.w	r3, [sl]
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017200:	81a3      	strh	r3, [r4, #12]
 8017202:	f04f 30ff 	mov.w	r0, #4294967295
 8017206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801720a:	6921      	ldr	r1, [r4, #16]
 801720c:	464a      	mov	r2, r9
 801720e:	f7fd fdf1 	bl	8014df4 <memcpy>
 8017212:	89a3      	ldrh	r3, [r4, #12]
 8017214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801721c:	81a3      	strh	r3, [r4, #12]
 801721e:	6126      	str	r6, [r4, #16]
 8017220:	6165      	str	r5, [r4, #20]
 8017222:	444e      	add	r6, r9
 8017224:	eba5 0509 	sub.w	r5, r5, r9
 8017228:	6026      	str	r6, [r4, #0]
 801722a:	60a5      	str	r5, [r4, #8]
 801722c:	463e      	mov	r6, r7
 801722e:	42be      	cmp	r6, r7
 8017230:	d900      	bls.n	8017234 <__ssputs_r+0x86>
 8017232:	463e      	mov	r6, r7
 8017234:	4632      	mov	r2, r6
 8017236:	6820      	ldr	r0, [r4, #0]
 8017238:	4641      	mov	r1, r8
 801723a:	f7fd fde9 	bl	8014e10 <memmove>
 801723e:	68a3      	ldr	r3, [r4, #8]
 8017240:	6822      	ldr	r2, [r4, #0]
 8017242:	1b9b      	subs	r3, r3, r6
 8017244:	4432      	add	r2, r6
 8017246:	60a3      	str	r3, [r4, #8]
 8017248:	6022      	str	r2, [r4, #0]
 801724a:	2000      	movs	r0, #0
 801724c:	e7db      	b.n	8017206 <__ssputs_r+0x58>
 801724e:	462a      	mov	r2, r5
 8017250:	f000 fcda 	bl	8017c08 <_realloc_r>
 8017254:	4606      	mov	r6, r0
 8017256:	2800      	cmp	r0, #0
 8017258:	d1e1      	bne.n	801721e <__ssputs_r+0x70>
 801725a:	6921      	ldr	r1, [r4, #16]
 801725c:	4650      	mov	r0, sl
 801725e:	f7fd fdf9 	bl	8014e54 <_free_r>
 8017262:	e7c7      	b.n	80171f4 <__ssputs_r+0x46>

08017264 <_svfiprintf_r>:
 8017264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017268:	4698      	mov	r8, r3
 801726a:	898b      	ldrh	r3, [r1, #12]
 801726c:	061b      	lsls	r3, r3, #24
 801726e:	b09d      	sub	sp, #116	; 0x74
 8017270:	4607      	mov	r7, r0
 8017272:	460d      	mov	r5, r1
 8017274:	4614      	mov	r4, r2
 8017276:	d50e      	bpl.n	8017296 <_svfiprintf_r+0x32>
 8017278:	690b      	ldr	r3, [r1, #16]
 801727a:	b963      	cbnz	r3, 8017296 <_svfiprintf_r+0x32>
 801727c:	2140      	movs	r1, #64	; 0x40
 801727e:	f7fd fe39 	bl	8014ef4 <_malloc_r>
 8017282:	6028      	str	r0, [r5, #0]
 8017284:	6128      	str	r0, [r5, #16]
 8017286:	b920      	cbnz	r0, 8017292 <_svfiprintf_r+0x2e>
 8017288:	230c      	movs	r3, #12
 801728a:	603b      	str	r3, [r7, #0]
 801728c:	f04f 30ff 	mov.w	r0, #4294967295
 8017290:	e0d1      	b.n	8017436 <_svfiprintf_r+0x1d2>
 8017292:	2340      	movs	r3, #64	; 0x40
 8017294:	616b      	str	r3, [r5, #20]
 8017296:	2300      	movs	r3, #0
 8017298:	9309      	str	r3, [sp, #36]	; 0x24
 801729a:	2320      	movs	r3, #32
 801729c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80172a4:	2330      	movs	r3, #48	; 0x30
 80172a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017450 <_svfiprintf_r+0x1ec>
 80172aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172ae:	f04f 0901 	mov.w	r9, #1
 80172b2:	4623      	mov	r3, r4
 80172b4:	469a      	mov	sl, r3
 80172b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172ba:	b10a      	cbz	r2, 80172c0 <_svfiprintf_r+0x5c>
 80172bc:	2a25      	cmp	r2, #37	; 0x25
 80172be:	d1f9      	bne.n	80172b4 <_svfiprintf_r+0x50>
 80172c0:	ebba 0b04 	subs.w	fp, sl, r4
 80172c4:	d00b      	beq.n	80172de <_svfiprintf_r+0x7a>
 80172c6:	465b      	mov	r3, fp
 80172c8:	4622      	mov	r2, r4
 80172ca:	4629      	mov	r1, r5
 80172cc:	4638      	mov	r0, r7
 80172ce:	f7ff ff6e 	bl	80171ae <__ssputs_r>
 80172d2:	3001      	adds	r0, #1
 80172d4:	f000 80aa 	beq.w	801742c <_svfiprintf_r+0x1c8>
 80172d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172da:	445a      	add	r2, fp
 80172dc:	9209      	str	r2, [sp, #36]	; 0x24
 80172de:	f89a 3000 	ldrb.w	r3, [sl]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f000 80a2 	beq.w	801742c <_svfiprintf_r+0x1c8>
 80172e8:	2300      	movs	r3, #0
 80172ea:	f04f 32ff 	mov.w	r2, #4294967295
 80172ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172f2:	f10a 0a01 	add.w	sl, sl, #1
 80172f6:	9304      	str	r3, [sp, #16]
 80172f8:	9307      	str	r3, [sp, #28]
 80172fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017300:	4654      	mov	r4, sl
 8017302:	2205      	movs	r2, #5
 8017304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017308:	4851      	ldr	r0, [pc, #324]	; (8017450 <_svfiprintf_r+0x1ec>)
 801730a:	f7e8 ff79 	bl	8000200 <memchr>
 801730e:	9a04      	ldr	r2, [sp, #16]
 8017310:	b9d8      	cbnz	r0, 801734a <_svfiprintf_r+0xe6>
 8017312:	06d0      	lsls	r0, r2, #27
 8017314:	bf44      	itt	mi
 8017316:	2320      	movmi	r3, #32
 8017318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801731c:	0711      	lsls	r1, r2, #28
 801731e:	bf44      	itt	mi
 8017320:	232b      	movmi	r3, #43	; 0x2b
 8017322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017326:	f89a 3000 	ldrb.w	r3, [sl]
 801732a:	2b2a      	cmp	r3, #42	; 0x2a
 801732c:	d015      	beq.n	801735a <_svfiprintf_r+0xf6>
 801732e:	9a07      	ldr	r2, [sp, #28]
 8017330:	4654      	mov	r4, sl
 8017332:	2000      	movs	r0, #0
 8017334:	f04f 0c0a 	mov.w	ip, #10
 8017338:	4621      	mov	r1, r4
 801733a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801733e:	3b30      	subs	r3, #48	; 0x30
 8017340:	2b09      	cmp	r3, #9
 8017342:	d94e      	bls.n	80173e2 <_svfiprintf_r+0x17e>
 8017344:	b1b0      	cbz	r0, 8017374 <_svfiprintf_r+0x110>
 8017346:	9207      	str	r2, [sp, #28]
 8017348:	e014      	b.n	8017374 <_svfiprintf_r+0x110>
 801734a:	eba0 0308 	sub.w	r3, r0, r8
 801734e:	fa09 f303 	lsl.w	r3, r9, r3
 8017352:	4313      	orrs	r3, r2
 8017354:	9304      	str	r3, [sp, #16]
 8017356:	46a2      	mov	sl, r4
 8017358:	e7d2      	b.n	8017300 <_svfiprintf_r+0x9c>
 801735a:	9b03      	ldr	r3, [sp, #12]
 801735c:	1d19      	adds	r1, r3, #4
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	9103      	str	r1, [sp, #12]
 8017362:	2b00      	cmp	r3, #0
 8017364:	bfbb      	ittet	lt
 8017366:	425b      	neglt	r3, r3
 8017368:	f042 0202 	orrlt.w	r2, r2, #2
 801736c:	9307      	strge	r3, [sp, #28]
 801736e:	9307      	strlt	r3, [sp, #28]
 8017370:	bfb8      	it	lt
 8017372:	9204      	strlt	r2, [sp, #16]
 8017374:	7823      	ldrb	r3, [r4, #0]
 8017376:	2b2e      	cmp	r3, #46	; 0x2e
 8017378:	d10c      	bne.n	8017394 <_svfiprintf_r+0x130>
 801737a:	7863      	ldrb	r3, [r4, #1]
 801737c:	2b2a      	cmp	r3, #42	; 0x2a
 801737e:	d135      	bne.n	80173ec <_svfiprintf_r+0x188>
 8017380:	9b03      	ldr	r3, [sp, #12]
 8017382:	1d1a      	adds	r2, r3, #4
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	9203      	str	r2, [sp, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	bfb8      	it	lt
 801738c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017390:	3402      	adds	r4, #2
 8017392:	9305      	str	r3, [sp, #20]
 8017394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017460 <_svfiprintf_r+0x1fc>
 8017398:	7821      	ldrb	r1, [r4, #0]
 801739a:	2203      	movs	r2, #3
 801739c:	4650      	mov	r0, sl
 801739e:	f7e8 ff2f 	bl	8000200 <memchr>
 80173a2:	b140      	cbz	r0, 80173b6 <_svfiprintf_r+0x152>
 80173a4:	2340      	movs	r3, #64	; 0x40
 80173a6:	eba0 000a 	sub.w	r0, r0, sl
 80173aa:	fa03 f000 	lsl.w	r0, r3, r0
 80173ae:	9b04      	ldr	r3, [sp, #16]
 80173b0:	4303      	orrs	r3, r0
 80173b2:	3401      	adds	r4, #1
 80173b4:	9304      	str	r3, [sp, #16]
 80173b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173ba:	4826      	ldr	r0, [pc, #152]	; (8017454 <_svfiprintf_r+0x1f0>)
 80173bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173c0:	2206      	movs	r2, #6
 80173c2:	f7e8 ff1d 	bl	8000200 <memchr>
 80173c6:	2800      	cmp	r0, #0
 80173c8:	d038      	beq.n	801743c <_svfiprintf_r+0x1d8>
 80173ca:	4b23      	ldr	r3, [pc, #140]	; (8017458 <_svfiprintf_r+0x1f4>)
 80173cc:	bb1b      	cbnz	r3, 8017416 <_svfiprintf_r+0x1b2>
 80173ce:	9b03      	ldr	r3, [sp, #12]
 80173d0:	3307      	adds	r3, #7
 80173d2:	f023 0307 	bic.w	r3, r3, #7
 80173d6:	3308      	adds	r3, #8
 80173d8:	9303      	str	r3, [sp, #12]
 80173da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173dc:	4433      	add	r3, r6
 80173de:	9309      	str	r3, [sp, #36]	; 0x24
 80173e0:	e767      	b.n	80172b2 <_svfiprintf_r+0x4e>
 80173e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80173e6:	460c      	mov	r4, r1
 80173e8:	2001      	movs	r0, #1
 80173ea:	e7a5      	b.n	8017338 <_svfiprintf_r+0xd4>
 80173ec:	2300      	movs	r3, #0
 80173ee:	3401      	adds	r4, #1
 80173f0:	9305      	str	r3, [sp, #20]
 80173f2:	4619      	mov	r1, r3
 80173f4:	f04f 0c0a 	mov.w	ip, #10
 80173f8:	4620      	mov	r0, r4
 80173fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173fe:	3a30      	subs	r2, #48	; 0x30
 8017400:	2a09      	cmp	r2, #9
 8017402:	d903      	bls.n	801740c <_svfiprintf_r+0x1a8>
 8017404:	2b00      	cmp	r3, #0
 8017406:	d0c5      	beq.n	8017394 <_svfiprintf_r+0x130>
 8017408:	9105      	str	r1, [sp, #20]
 801740a:	e7c3      	b.n	8017394 <_svfiprintf_r+0x130>
 801740c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017410:	4604      	mov	r4, r0
 8017412:	2301      	movs	r3, #1
 8017414:	e7f0      	b.n	80173f8 <_svfiprintf_r+0x194>
 8017416:	ab03      	add	r3, sp, #12
 8017418:	9300      	str	r3, [sp, #0]
 801741a:	462a      	mov	r2, r5
 801741c:	4b0f      	ldr	r3, [pc, #60]	; (801745c <_svfiprintf_r+0x1f8>)
 801741e:	a904      	add	r1, sp, #16
 8017420:	4638      	mov	r0, r7
 8017422:	f7fd fe61 	bl	80150e8 <_printf_float>
 8017426:	1c42      	adds	r2, r0, #1
 8017428:	4606      	mov	r6, r0
 801742a:	d1d6      	bne.n	80173da <_svfiprintf_r+0x176>
 801742c:	89ab      	ldrh	r3, [r5, #12]
 801742e:	065b      	lsls	r3, r3, #25
 8017430:	f53f af2c 	bmi.w	801728c <_svfiprintf_r+0x28>
 8017434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017436:	b01d      	add	sp, #116	; 0x74
 8017438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743c:	ab03      	add	r3, sp, #12
 801743e:	9300      	str	r3, [sp, #0]
 8017440:	462a      	mov	r2, r5
 8017442:	4b06      	ldr	r3, [pc, #24]	; (801745c <_svfiprintf_r+0x1f8>)
 8017444:	a904      	add	r1, sp, #16
 8017446:	4638      	mov	r0, r7
 8017448:	f7fe f8f2 	bl	8015630 <_printf_i>
 801744c:	e7eb      	b.n	8017426 <_svfiprintf_r+0x1c2>
 801744e:	bf00      	nop
 8017450:	0801c4f4 	.word	0x0801c4f4
 8017454:	0801c4fe 	.word	0x0801c4fe
 8017458:	080150e9 	.word	0x080150e9
 801745c:	080171af 	.word	0x080171af
 8017460:	0801c4fa 	.word	0x0801c4fa

08017464 <__sfputc_r>:
 8017464:	6893      	ldr	r3, [r2, #8]
 8017466:	3b01      	subs	r3, #1
 8017468:	2b00      	cmp	r3, #0
 801746a:	b410      	push	{r4}
 801746c:	6093      	str	r3, [r2, #8]
 801746e:	da08      	bge.n	8017482 <__sfputc_r+0x1e>
 8017470:	6994      	ldr	r4, [r2, #24]
 8017472:	42a3      	cmp	r3, r4
 8017474:	db01      	blt.n	801747a <__sfputc_r+0x16>
 8017476:	290a      	cmp	r1, #10
 8017478:	d103      	bne.n	8017482 <__sfputc_r+0x1e>
 801747a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801747e:	f000 b98f 	b.w	80177a0 <__swbuf_r>
 8017482:	6813      	ldr	r3, [r2, #0]
 8017484:	1c58      	adds	r0, r3, #1
 8017486:	6010      	str	r0, [r2, #0]
 8017488:	7019      	strb	r1, [r3, #0]
 801748a:	4608      	mov	r0, r1
 801748c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017490:	4770      	bx	lr

08017492 <__sfputs_r>:
 8017492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017494:	4606      	mov	r6, r0
 8017496:	460f      	mov	r7, r1
 8017498:	4614      	mov	r4, r2
 801749a:	18d5      	adds	r5, r2, r3
 801749c:	42ac      	cmp	r4, r5
 801749e:	d101      	bne.n	80174a4 <__sfputs_r+0x12>
 80174a0:	2000      	movs	r0, #0
 80174a2:	e007      	b.n	80174b4 <__sfputs_r+0x22>
 80174a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174a8:	463a      	mov	r2, r7
 80174aa:	4630      	mov	r0, r6
 80174ac:	f7ff ffda 	bl	8017464 <__sfputc_r>
 80174b0:	1c43      	adds	r3, r0, #1
 80174b2:	d1f3      	bne.n	801749c <__sfputs_r+0xa>
 80174b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080174b8 <_vfiprintf_r>:
 80174b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174bc:	460d      	mov	r5, r1
 80174be:	b09d      	sub	sp, #116	; 0x74
 80174c0:	4614      	mov	r4, r2
 80174c2:	4698      	mov	r8, r3
 80174c4:	4606      	mov	r6, r0
 80174c6:	b118      	cbz	r0, 80174d0 <_vfiprintf_r+0x18>
 80174c8:	6983      	ldr	r3, [r0, #24]
 80174ca:	b90b      	cbnz	r3, 80174d0 <_vfiprintf_r+0x18>
 80174cc:	f7ff fa1e 	bl	801690c <__sinit>
 80174d0:	4b89      	ldr	r3, [pc, #548]	; (80176f8 <_vfiprintf_r+0x240>)
 80174d2:	429d      	cmp	r5, r3
 80174d4:	d11b      	bne.n	801750e <_vfiprintf_r+0x56>
 80174d6:	6875      	ldr	r5, [r6, #4]
 80174d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174da:	07d9      	lsls	r1, r3, #31
 80174dc:	d405      	bmi.n	80174ea <_vfiprintf_r+0x32>
 80174de:	89ab      	ldrh	r3, [r5, #12]
 80174e0:	059a      	lsls	r2, r3, #22
 80174e2:	d402      	bmi.n	80174ea <_vfiprintf_r+0x32>
 80174e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174e6:	f7ff fac6 	bl	8016a76 <__retarget_lock_acquire_recursive>
 80174ea:	89ab      	ldrh	r3, [r5, #12]
 80174ec:	071b      	lsls	r3, r3, #28
 80174ee:	d501      	bpl.n	80174f4 <_vfiprintf_r+0x3c>
 80174f0:	692b      	ldr	r3, [r5, #16]
 80174f2:	b9eb      	cbnz	r3, 8017530 <_vfiprintf_r+0x78>
 80174f4:	4629      	mov	r1, r5
 80174f6:	4630      	mov	r0, r6
 80174f8:	f000 f9b6 	bl	8017868 <__swsetup_r>
 80174fc:	b1c0      	cbz	r0, 8017530 <_vfiprintf_r+0x78>
 80174fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017500:	07dc      	lsls	r4, r3, #31
 8017502:	d50e      	bpl.n	8017522 <_vfiprintf_r+0x6a>
 8017504:	f04f 30ff 	mov.w	r0, #4294967295
 8017508:	b01d      	add	sp, #116	; 0x74
 801750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801750e:	4b7b      	ldr	r3, [pc, #492]	; (80176fc <_vfiprintf_r+0x244>)
 8017510:	429d      	cmp	r5, r3
 8017512:	d101      	bne.n	8017518 <_vfiprintf_r+0x60>
 8017514:	68b5      	ldr	r5, [r6, #8]
 8017516:	e7df      	b.n	80174d8 <_vfiprintf_r+0x20>
 8017518:	4b79      	ldr	r3, [pc, #484]	; (8017700 <_vfiprintf_r+0x248>)
 801751a:	429d      	cmp	r5, r3
 801751c:	bf08      	it	eq
 801751e:	68f5      	ldreq	r5, [r6, #12]
 8017520:	e7da      	b.n	80174d8 <_vfiprintf_r+0x20>
 8017522:	89ab      	ldrh	r3, [r5, #12]
 8017524:	0598      	lsls	r0, r3, #22
 8017526:	d4ed      	bmi.n	8017504 <_vfiprintf_r+0x4c>
 8017528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801752a:	f7ff faa5 	bl	8016a78 <__retarget_lock_release_recursive>
 801752e:	e7e9      	b.n	8017504 <_vfiprintf_r+0x4c>
 8017530:	2300      	movs	r3, #0
 8017532:	9309      	str	r3, [sp, #36]	; 0x24
 8017534:	2320      	movs	r3, #32
 8017536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801753a:	f8cd 800c 	str.w	r8, [sp, #12]
 801753e:	2330      	movs	r3, #48	; 0x30
 8017540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017704 <_vfiprintf_r+0x24c>
 8017544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017548:	f04f 0901 	mov.w	r9, #1
 801754c:	4623      	mov	r3, r4
 801754e:	469a      	mov	sl, r3
 8017550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017554:	b10a      	cbz	r2, 801755a <_vfiprintf_r+0xa2>
 8017556:	2a25      	cmp	r2, #37	; 0x25
 8017558:	d1f9      	bne.n	801754e <_vfiprintf_r+0x96>
 801755a:	ebba 0b04 	subs.w	fp, sl, r4
 801755e:	d00b      	beq.n	8017578 <_vfiprintf_r+0xc0>
 8017560:	465b      	mov	r3, fp
 8017562:	4622      	mov	r2, r4
 8017564:	4629      	mov	r1, r5
 8017566:	4630      	mov	r0, r6
 8017568:	f7ff ff93 	bl	8017492 <__sfputs_r>
 801756c:	3001      	adds	r0, #1
 801756e:	f000 80aa 	beq.w	80176c6 <_vfiprintf_r+0x20e>
 8017572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017574:	445a      	add	r2, fp
 8017576:	9209      	str	r2, [sp, #36]	; 0x24
 8017578:	f89a 3000 	ldrb.w	r3, [sl]
 801757c:	2b00      	cmp	r3, #0
 801757e:	f000 80a2 	beq.w	80176c6 <_vfiprintf_r+0x20e>
 8017582:	2300      	movs	r3, #0
 8017584:	f04f 32ff 	mov.w	r2, #4294967295
 8017588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801758c:	f10a 0a01 	add.w	sl, sl, #1
 8017590:	9304      	str	r3, [sp, #16]
 8017592:	9307      	str	r3, [sp, #28]
 8017594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017598:	931a      	str	r3, [sp, #104]	; 0x68
 801759a:	4654      	mov	r4, sl
 801759c:	2205      	movs	r2, #5
 801759e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a2:	4858      	ldr	r0, [pc, #352]	; (8017704 <_vfiprintf_r+0x24c>)
 80175a4:	f7e8 fe2c 	bl	8000200 <memchr>
 80175a8:	9a04      	ldr	r2, [sp, #16]
 80175aa:	b9d8      	cbnz	r0, 80175e4 <_vfiprintf_r+0x12c>
 80175ac:	06d1      	lsls	r1, r2, #27
 80175ae:	bf44      	itt	mi
 80175b0:	2320      	movmi	r3, #32
 80175b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175b6:	0713      	lsls	r3, r2, #28
 80175b8:	bf44      	itt	mi
 80175ba:	232b      	movmi	r3, #43	; 0x2b
 80175bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175c0:	f89a 3000 	ldrb.w	r3, [sl]
 80175c4:	2b2a      	cmp	r3, #42	; 0x2a
 80175c6:	d015      	beq.n	80175f4 <_vfiprintf_r+0x13c>
 80175c8:	9a07      	ldr	r2, [sp, #28]
 80175ca:	4654      	mov	r4, sl
 80175cc:	2000      	movs	r0, #0
 80175ce:	f04f 0c0a 	mov.w	ip, #10
 80175d2:	4621      	mov	r1, r4
 80175d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175d8:	3b30      	subs	r3, #48	; 0x30
 80175da:	2b09      	cmp	r3, #9
 80175dc:	d94e      	bls.n	801767c <_vfiprintf_r+0x1c4>
 80175de:	b1b0      	cbz	r0, 801760e <_vfiprintf_r+0x156>
 80175e0:	9207      	str	r2, [sp, #28]
 80175e2:	e014      	b.n	801760e <_vfiprintf_r+0x156>
 80175e4:	eba0 0308 	sub.w	r3, r0, r8
 80175e8:	fa09 f303 	lsl.w	r3, r9, r3
 80175ec:	4313      	orrs	r3, r2
 80175ee:	9304      	str	r3, [sp, #16]
 80175f0:	46a2      	mov	sl, r4
 80175f2:	e7d2      	b.n	801759a <_vfiprintf_r+0xe2>
 80175f4:	9b03      	ldr	r3, [sp, #12]
 80175f6:	1d19      	adds	r1, r3, #4
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	9103      	str	r1, [sp, #12]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	bfbb      	ittet	lt
 8017600:	425b      	neglt	r3, r3
 8017602:	f042 0202 	orrlt.w	r2, r2, #2
 8017606:	9307      	strge	r3, [sp, #28]
 8017608:	9307      	strlt	r3, [sp, #28]
 801760a:	bfb8      	it	lt
 801760c:	9204      	strlt	r2, [sp, #16]
 801760e:	7823      	ldrb	r3, [r4, #0]
 8017610:	2b2e      	cmp	r3, #46	; 0x2e
 8017612:	d10c      	bne.n	801762e <_vfiprintf_r+0x176>
 8017614:	7863      	ldrb	r3, [r4, #1]
 8017616:	2b2a      	cmp	r3, #42	; 0x2a
 8017618:	d135      	bne.n	8017686 <_vfiprintf_r+0x1ce>
 801761a:	9b03      	ldr	r3, [sp, #12]
 801761c:	1d1a      	adds	r2, r3, #4
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	9203      	str	r2, [sp, #12]
 8017622:	2b00      	cmp	r3, #0
 8017624:	bfb8      	it	lt
 8017626:	f04f 33ff 	movlt.w	r3, #4294967295
 801762a:	3402      	adds	r4, #2
 801762c:	9305      	str	r3, [sp, #20]
 801762e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017714 <_vfiprintf_r+0x25c>
 8017632:	7821      	ldrb	r1, [r4, #0]
 8017634:	2203      	movs	r2, #3
 8017636:	4650      	mov	r0, sl
 8017638:	f7e8 fde2 	bl	8000200 <memchr>
 801763c:	b140      	cbz	r0, 8017650 <_vfiprintf_r+0x198>
 801763e:	2340      	movs	r3, #64	; 0x40
 8017640:	eba0 000a 	sub.w	r0, r0, sl
 8017644:	fa03 f000 	lsl.w	r0, r3, r0
 8017648:	9b04      	ldr	r3, [sp, #16]
 801764a:	4303      	orrs	r3, r0
 801764c:	3401      	adds	r4, #1
 801764e:	9304      	str	r3, [sp, #16]
 8017650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017654:	482c      	ldr	r0, [pc, #176]	; (8017708 <_vfiprintf_r+0x250>)
 8017656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801765a:	2206      	movs	r2, #6
 801765c:	f7e8 fdd0 	bl	8000200 <memchr>
 8017660:	2800      	cmp	r0, #0
 8017662:	d03f      	beq.n	80176e4 <_vfiprintf_r+0x22c>
 8017664:	4b29      	ldr	r3, [pc, #164]	; (801770c <_vfiprintf_r+0x254>)
 8017666:	bb1b      	cbnz	r3, 80176b0 <_vfiprintf_r+0x1f8>
 8017668:	9b03      	ldr	r3, [sp, #12]
 801766a:	3307      	adds	r3, #7
 801766c:	f023 0307 	bic.w	r3, r3, #7
 8017670:	3308      	adds	r3, #8
 8017672:	9303      	str	r3, [sp, #12]
 8017674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017676:	443b      	add	r3, r7
 8017678:	9309      	str	r3, [sp, #36]	; 0x24
 801767a:	e767      	b.n	801754c <_vfiprintf_r+0x94>
 801767c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017680:	460c      	mov	r4, r1
 8017682:	2001      	movs	r0, #1
 8017684:	e7a5      	b.n	80175d2 <_vfiprintf_r+0x11a>
 8017686:	2300      	movs	r3, #0
 8017688:	3401      	adds	r4, #1
 801768a:	9305      	str	r3, [sp, #20]
 801768c:	4619      	mov	r1, r3
 801768e:	f04f 0c0a 	mov.w	ip, #10
 8017692:	4620      	mov	r0, r4
 8017694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017698:	3a30      	subs	r2, #48	; 0x30
 801769a:	2a09      	cmp	r2, #9
 801769c:	d903      	bls.n	80176a6 <_vfiprintf_r+0x1ee>
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d0c5      	beq.n	801762e <_vfiprintf_r+0x176>
 80176a2:	9105      	str	r1, [sp, #20]
 80176a4:	e7c3      	b.n	801762e <_vfiprintf_r+0x176>
 80176a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80176aa:	4604      	mov	r4, r0
 80176ac:	2301      	movs	r3, #1
 80176ae:	e7f0      	b.n	8017692 <_vfiprintf_r+0x1da>
 80176b0:	ab03      	add	r3, sp, #12
 80176b2:	9300      	str	r3, [sp, #0]
 80176b4:	462a      	mov	r2, r5
 80176b6:	4b16      	ldr	r3, [pc, #88]	; (8017710 <_vfiprintf_r+0x258>)
 80176b8:	a904      	add	r1, sp, #16
 80176ba:	4630      	mov	r0, r6
 80176bc:	f7fd fd14 	bl	80150e8 <_printf_float>
 80176c0:	4607      	mov	r7, r0
 80176c2:	1c78      	adds	r0, r7, #1
 80176c4:	d1d6      	bne.n	8017674 <_vfiprintf_r+0x1bc>
 80176c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176c8:	07d9      	lsls	r1, r3, #31
 80176ca:	d405      	bmi.n	80176d8 <_vfiprintf_r+0x220>
 80176cc:	89ab      	ldrh	r3, [r5, #12]
 80176ce:	059a      	lsls	r2, r3, #22
 80176d0:	d402      	bmi.n	80176d8 <_vfiprintf_r+0x220>
 80176d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176d4:	f7ff f9d0 	bl	8016a78 <__retarget_lock_release_recursive>
 80176d8:	89ab      	ldrh	r3, [r5, #12]
 80176da:	065b      	lsls	r3, r3, #25
 80176dc:	f53f af12 	bmi.w	8017504 <_vfiprintf_r+0x4c>
 80176e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176e2:	e711      	b.n	8017508 <_vfiprintf_r+0x50>
 80176e4:	ab03      	add	r3, sp, #12
 80176e6:	9300      	str	r3, [sp, #0]
 80176e8:	462a      	mov	r2, r5
 80176ea:	4b09      	ldr	r3, [pc, #36]	; (8017710 <_vfiprintf_r+0x258>)
 80176ec:	a904      	add	r1, sp, #16
 80176ee:	4630      	mov	r0, r6
 80176f0:	f7fd ff9e 	bl	8015630 <_printf_i>
 80176f4:	e7e4      	b.n	80176c0 <_vfiprintf_r+0x208>
 80176f6:	bf00      	nop
 80176f8:	0801c358 	.word	0x0801c358
 80176fc:	0801c378 	.word	0x0801c378
 8017700:	0801c338 	.word	0x0801c338
 8017704:	0801c4f4 	.word	0x0801c4f4
 8017708:	0801c4fe 	.word	0x0801c4fe
 801770c:	080150e9 	.word	0x080150e9
 8017710:	08017493 	.word	0x08017493
 8017714:	0801c4fa 	.word	0x0801c4fa

08017718 <__sread>:
 8017718:	b510      	push	{r4, lr}
 801771a:	460c      	mov	r4, r1
 801771c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017720:	f000 fa98 	bl	8017c54 <_read_r>
 8017724:	2800      	cmp	r0, #0
 8017726:	bfab      	itete	ge
 8017728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801772a:	89a3      	ldrhlt	r3, [r4, #12]
 801772c:	181b      	addge	r3, r3, r0
 801772e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017732:	bfac      	ite	ge
 8017734:	6563      	strge	r3, [r4, #84]	; 0x54
 8017736:	81a3      	strhlt	r3, [r4, #12]
 8017738:	bd10      	pop	{r4, pc}

0801773a <__swrite>:
 801773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801773e:	461f      	mov	r7, r3
 8017740:	898b      	ldrh	r3, [r1, #12]
 8017742:	05db      	lsls	r3, r3, #23
 8017744:	4605      	mov	r5, r0
 8017746:	460c      	mov	r4, r1
 8017748:	4616      	mov	r6, r2
 801774a:	d505      	bpl.n	8017758 <__swrite+0x1e>
 801774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017750:	2302      	movs	r3, #2
 8017752:	2200      	movs	r2, #0
 8017754:	f000 f9d0 	bl	8017af8 <_lseek_r>
 8017758:	89a3      	ldrh	r3, [r4, #12]
 801775a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801775e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017762:	81a3      	strh	r3, [r4, #12]
 8017764:	4632      	mov	r2, r6
 8017766:	463b      	mov	r3, r7
 8017768:	4628      	mov	r0, r5
 801776a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801776e:	f000 b869 	b.w	8017844 <_write_r>

08017772 <__sseek>:
 8017772:	b510      	push	{r4, lr}
 8017774:	460c      	mov	r4, r1
 8017776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801777a:	f000 f9bd 	bl	8017af8 <_lseek_r>
 801777e:	1c43      	adds	r3, r0, #1
 8017780:	89a3      	ldrh	r3, [r4, #12]
 8017782:	bf15      	itete	ne
 8017784:	6560      	strne	r0, [r4, #84]	; 0x54
 8017786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801778a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801778e:	81a3      	strheq	r3, [r4, #12]
 8017790:	bf18      	it	ne
 8017792:	81a3      	strhne	r3, [r4, #12]
 8017794:	bd10      	pop	{r4, pc}

08017796 <__sclose>:
 8017796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801779a:	f000 b8db 	b.w	8017954 <_close_r>
	...

080177a0 <__swbuf_r>:
 80177a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177a2:	460e      	mov	r6, r1
 80177a4:	4614      	mov	r4, r2
 80177a6:	4605      	mov	r5, r0
 80177a8:	b118      	cbz	r0, 80177b2 <__swbuf_r+0x12>
 80177aa:	6983      	ldr	r3, [r0, #24]
 80177ac:	b90b      	cbnz	r3, 80177b2 <__swbuf_r+0x12>
 80177ae:	f7ff f8ad 	bl	801690c <__sinit>
 80177b2:	4b21      	ldr	r3, [pc, #132]	; (8017838 <__swbuf_r+0x98>)
 80177b4:	429c      	cmp	r4, r3
 80177b6:	d12b      	bne.n	8017810 <__swbuf_r+0x70>
 80177b8:	686c      	ldr	r4, [r5, #4]
 80177ba:	69a3      	ldr	r3, [r4, #24]
 80177bc:	60a3      	str	r3, [r4, #8]
 80177be:	89a3      	ldrh	r3, [r4, #12]
 80177c0:	071a      	lsls	r2, r3, #28
 80177c2:	d52f      	bpl.n	8017824 <__swbuf_r+0x84>
 80177c4:	6923      	ldr	r3, [r4, #16]
 80177c6:	b36b      	cbz	r3, 8017824 <__swbuf_r+0x84>
 80177c8:	6923      	ldr	r3, [r4, #16]
 80177ca:	6820      	ldr	r0, [r4, #0]
 80177cc:	1ac0      	subs	r0, r0, r3
 80177ce:	6963      	ldr	r3, [r4, #20]
 80177d0:	b2f6      	uxtb	r6, r6
 80177d2:	4283      	cmp	r3, r0
 80177d4:	4637      	mov	r7, r6
 80177d6:	dc04      	bgt.n	80177e2 <__swbuf_r+0x42>
 80177d8:	4621      	mov	r1, r4
 80177da:	4628      	mov	r0, r5
 80177dc:	f000 f950 	bl	8017a80 <_fflush_r>
 80177e0:	bb30      	cbnz	r0, 8017830 <__swbuf_r+0x90>
 80177e2:	68a3      	ldr	r3, [r4, #8]
 80177e4:	3b01      	subs	r3, #1
 80177e6:	60a3      	str	r3, [r4, #8]
 80177e8:	6823      	ldr	r3, [r4, #0]
 80177ea:	1c5a      	adds	r2, r3, #1
 80177ec:	6022      	str	r2, [r4, #0]
 80177ee:	701e      	strb	r6, [r3, #0]
 80177f0:	6963      	ldr	r3, [r4, #20]
 80177f2:	3001      	adds	r0, #1
 80177f4:	4283      	cmp	r3, r0
 80177f6:	d004      	beq.n	8017802 <__swbuf_r+0x62>
 80177f8:	89a3      	ldrh	r3, [r4, #12]
 80177fa:	07db      	lsls	r3, r3, #31
 80177fc:	d506      	bpl.n	801780c <__swbuf_r+0x6c>
 80177fe:	2e0a      	cmp	r6, #10
 8017800:	d104      	bne.n	801780c <__swbuf_r+0x6c>
 8017802:	4621      	mov	r1, r4
 8017804:	4628      	mov	r0, r5
 8017806:	f000 f93b 	bl	8017a80 <_fflush_r>
 801780a:	b988      	cbnz	r0, 8017830 <__swbuf_r+0x90>
 801780c:	4638      	mov	r0, r7
 801780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017810:	4b0a      	ldr	r3, [pc, #40]	; (801783c <__swbuf_r+0x9c>)
 8017812:	429c      	cmp	r4, r3
 8017814:	d101      	bne.n	801781a <__swbuf_r+0x7a>
 8017816:	68ac      	ldr	r4, [r5, #8]
 8017818:	e7cf      	b.n	80177ba <__swbuf_r+0x1a>
 801781a:	4b09      	ldr	r3, [pc, #36]	; (8017840 <__swbuf_r+0xa0>)
 801781c:	429c      	cmp	r4, r3
 801781e:	bf08      	it	eq
 8017820:	68ec      	ldreq	r4, [r5, #12]
 8017822:	e7ca      	b.n	80177ba <__swbuf_r+0x1a>
 8017824:	4621      	mov	r1, r4
 8017826:	4628      	mov	r0, r5
 8017828:	f000 f81e 	bl	8017868 <__swsetup_r>
 801782c:	2800      	cmp	r0, #0
 801782e:	d0cb      	beq.n	80177c8 <__swbuf_r+0x28>
 8017830:	f04f 37ff 	mov.w	r7, #4294967295
 8017834:	e7ea      	b.n	801780c <__swbuf_r+0x6c>
 8017836:	bf00      	nop
 8017838:	0801c358 	.word	0x0801c358
 801783c:	0801c378 	.word	0x0801c378
 8017840:	0801c338 	.word	0x0801c338

08017844 <_write_r>:
 8017844:	b538      	push	{r3, r4, r5, lr}
 8017846:	4d07      	ldr	r5, [pc, #28]	; (8017864 <_write_r+0x20>)
 8017848:	4604      	mov	r4, r0
 801784a:	4608      	mov	r0, r1
 801784c:	4611      	mov	r1, r2
 801784e:	2200      	movs	r2, #0
 8017850:	602a      	str	r2, [r5, #0]
 8017852:	461a      	mov	r2, r3
 8017854:	f7ec fb29 	bl	8003eaa <_write>
 8017858:	1c43      	adds	r3, r0, #1
 801785a:	d102      	bne.n	8017862 <_write_r+0x1e>
 801785c:	682b      	ldr	r3, [r5, #0]
 801785e:	b103      	cbz	r3, 8017862 <_write_r+0x1e>
 8017860:	6023      	str	r3, [r4, #0]
 8017862:	bd38      	pop	{r3, r4, r5, pc}
 8017864:	20006b04 	.word	0x20006b04

08017868 <__swsetup_r>:
 8017868:	4b32      	ldr	r3, [pc, #200]	; (8017934 <__swsetup_r+0xcc>)
 801786a:	b570      	push	{r4, r5, r6, lr}
 801786c:	681d      	ldr	r5, [r3, #0]
 801786e:	4606      	mov	r6, r0
 8017870:	460c      	mov	r4, r1
 8017872:	b125      	cbz	r5, 801787e <__swsetup_r+0x16>
 8017874:	69ab      	ldr	r3, [r5, #24]
 8017876:	b913      	cbnz	r3, 801787e <__swsetup_r+0x16>
 8017878:	4628      	mov	r0, r5
 801787a:	f7ff f847 	bl	801690c <__sinit>
 801787e:	4b2e      	ldr	r3, [pc, #184]	; (8017938 <__swsetup_r+0xd0>)
 8017880:	429c      	cmp	r4, r3
 8017882:	d10f      	bne.n	80178a4 <__swsetup_r+0x3c>
 8017884:	686c      	ldr	r4, [r5, #4]
 8017886:	89a3      	ldrh	r3, [r4, #12]
 8017888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801788c:	0719      	lsls	r1, r3, #28
 801788e:	d42c      	bmi.n	80178ea <__swsetup_r+0x82>
 8017890:	06dd      	lsls	r5, r3, #27
 8017892:	d411      	bmi.n	80178b8 <__swsetup_r+0x50>
 8017894:	2309      	movs	r3, #9
 8017896:	6033      	str	r3, [r6, #0]
 8017898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801789c:	81a3      	strh	r3, [r4, #12]
 801789e:	f04f 30ff 	mov.w	r0, #4294967295
 80178a2:	e03e      	b.n	8017922 <__swsetup_r+0xba>
 80178a4:	4b25      	ldr	r3, [pc, #148]	; (801793c <__swsetup_r+0xd4>)
 80178a6:	429c      	cmp	r4, r3
 80178a8:	d101      	bne.n	80178ae <__swsetup_r+0x46>
 80178aa:	68ac      	ldr	r4, [r5, #8]
 80178ac:	e7eb      	b.n	8017886 <__swsetup_r+0x1e>
 80178ae:	4b24      	ldr	r3, [pc, #144]	; (8017940 <__swsetup_r+0xd8>)
 80178b0:	429c      	cmp	r4, r3
 80178b2:	bf08      	it	eq
 80178b4:	68ec      	ldreq	r4, [r5, #12]
 80178b6:	e7e6      	b.n	8017886 <__swsetup_r+0x1e>
 80178b8:	0758      	lsls	r0, r3, #29
 80178ba:	d512      	bpl.n	80178e2 <__swsetup_r+0x7a>
 80178bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178be:	b141      	cbz	r1, 80178d2 <__swsetup_r+0x6a>
 80178c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178c4:	4299      	cmp	r1, r3
 80178c6:	d002      	beq.n	80178ce <__swsetup_r+0x66>
 80178c8:	4630      	mov	r0, r6
 80178ca:	f7fd fac3 	bl	8014e54 <_free_r>
 80178ce:	2300      	movs	r3, #0
 80178d0:	6363      	str	r3, [r4, #52]	; 0x34
 80178d2:	89a3      	ldrh	r3, [r4, #12]
 80178d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80178d8:	81a3      	strh	r3, [r4, #12]
 80178da:	2300      	movs	r3, #0
 80178dc:	6063      	str	r3, [r4, #4]
 80178de:	6923      	ldr	r3, [r4, #16]
 80178e0:	6023      	str	r3, [r4, #0]
 80178e2:	89a3      	ldrh	r3, [r4, #12]
 80178e4:	f043 0308 	orr.w	r3, r3, #8
 80178e8:	81a3      	strh	r3, [r4, #12]
 80178ea:	6923      	ldr	r3, [r4, #16]
 80178ec:	b94b      	cbnz	r3, 8017902 <__swsetup_r+0x9a>
 80178ee:	89a3      	ldrh	r3, [r4, #12]
 80178f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80178f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178f8:	d003      	beq.n	8017902 <__swsetup_r+0x9a>
 80178fa:	4621      	mov	r1, r4
 80178fc:	4630      	mov	r0, r6
 80178fe:	f000 f931 	bl	8017b64 <__smakebuf_r>
 8017902:	89a0      	ldrh	r0, [r4, #12]
 8017904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017908:	f010 0301 	ands.w	r3, r0, #1
 801790c:	d00a      	beq.n	8017924 <__swsetup_r+0xbc>
 801790e:	2300      	movs	r3, #0
 8017910:	60a3      	str	r3, [r4, #8]
 8017912:	6963      	ldr	r3, [r4, #20]
 8017914:	425b      	negs	r3, r3
 8017916:	61a3      	str	r3, [r4, #24]
 8017918:	6923      	ldr	r3, [r4, #16]
 801791a:	b943      	cbnz	r3, 801792e <__swsetup_r+0xc6>
 801791c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017920:	d1ba      	bne.n	8017898 <__swsetup_r+0x30>
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	0781      	lsls	r1, r0, #30
 8017926:	bf58      	it	pl
 8017928:	6963      	ldrpl	r3, [r4, #20]
 801792a:	60a3      	str	r3, [r4, #8]
 801792c:	e7f4      	b.n	8017918 <__swsetup_r+0xb0>
 801792e:	2000      	movs	r0, #0
 8017930:	e7f7      	b.n	8017922 <__swsetup_r+0xba>
 8017932:	bf00      	nop
 8017934:	20000024 	.word	0x20000024
 8017938:	0801c358 	.word	0x0801c358
 801793c:	0801c378 	.word	0x0801c378
 8017940:	0801c338 	.word	0x0801c338

08017944 <abort>:
 8017944:	b508      	push	{r3, lr}
 8017946:	2006      	movs	r0, #6
 8017948:	f000 f9be 	bl	8017cc8 <raise>
 801794c:	2001      	movs	r0, #1
 801794e:	f7ec fa85 	bl	8003e5c <_exit>
	...

08017954 <_close_r>:
 8017954:	b538      	push	{r3, r4, r5, lr}
 8017956:	4d06      	ldr	r5, [pc, #24]	; (8017970 <_close_r+0x1c>)
 8017958:	2300      	movs	r3, #0
 801795a:	4604      	mov	r4, r0
 801795c:	4608      	mov	r0, r1
 801795e:	602b      	str	r3, [r5, #0]
 8017960:	f7ec fabf 	bl	8003ee2 <_close>
 8017964:	1c43      	adds	r3, r0, #1
 8017966:	d102      	bne.n	801796e <_close_r+0x1a>
 8017968:	682b      	ldr	r3, [r5, #0]
 801796a:	b103      	cbz	r3, 801796e <_close_r+0x1a>
 801796c:	6023      	str	r3, [r4, #0]
 801796e:	bd38      	pop	{r3, r4, r5, pc}
 8017970:	20006b04 	.word	0x20006b04

08017974 <__sflush_r>:
 8017974:	898a      	ldrh	r2, [r1, #12]
 8017976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801797a:	4605      	mov	r5, r0
 801797c:	0710      	lsls	r0, r2, #28
 801797e:	460c      	mov	r4, r1
 8017980:	d458      	bmi.n	8017a34 <__sflush_r+0xc0>
 8017982:	684b      	ldr	r3, [r1, #4]
 8017984:	2b00      	cmp	r3, #0
 8017986:	dc05      	bgt.n	8017994 <__sflush_r+0x20>
 8017988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801798a:	2b00      	cmp	r3, #0
 801798c:	dc02      	bgt.n	8017994 <__sflush_r+0x20>
 801798e:	2000      	movs	r0, #0
 8017990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017996:	2e00      	cmp	r6, #0
 8017998:	d0f9      	beq.n	801798e <__sflush_r+0x1a>
 801799a:	2300      	movs	r3, #0
 801799c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80179a0:	682f      	ldr	r7, [r5, #0]
 80179a2:	602b      	str	r3, [r5, #0]
 80179a4:	d032      	beq.n	8017a0c <__sflush_r+0x98>
 80179a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80179a8:	89a3      	ldrh	r3, [r4, #12]
 80179aa:	075a      	lsls	r2, r3, #29
 80179ac:	d505      	bpl.n	80179ba <__sflush_r+0x46>
 80179ae:	6863      	ldr	r3, [r4, #4]
 80179b0:	1ac0      	subs	r0, r0, r3
 80179b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179b4:	b10b      	cbz	r3, 80179ba <__sflush_r+0x46>
 80179b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179b8:	1ac0      	subs	r0, r0, r3
 80179ba:	2300      	movs	r3, #0
 80179bc:	4602      	mov	r2, r0
 80179be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179c0:	6a21      	ldr	r1, [r4, #32]
 80179c2:	4628      	mov	r0, r5
 80179c4:	47b0      	blx	r6
 80179c6:	1c43      	adds	r3, r0, #1
 80179c8:	89a3      	ldrh	r3, [r4, #12]
 80179ca:	d106      	bne.n	80179da <__sflush_r+0x66>
 80179cc:	6829      	ldr	r1, [r5, #0]
 80179ce:	291d      	cmp	r1, #29
 80179d0:	d82c      	bhi.n	8017a2c <__sflush_r+0xb8>
 80179d2:	4a2a      	ldr	r2, [pc, #168]	; (8017a7c <__sflush_r+0x108>)
 80179d4:	40ca      	lsrs	r2, r1
 80179d6:	07d6      	lsls	r6, r2, #31
 80179d8:	d528      	bpl.n	8017a2c <__sflush_r+0xb8>
 80179da:	2200      	movs	r2, #0
 80179dc:	6062      	str	r2, [r4, #4]
 80179de:	04d9      	lsls	r1, r3, #19
 80179e0:	6922      	ldr	r2, [r4, #16]
 80179e2:	6022      	str	r2, [r4, #0]
 80179e4:	d504      	bpl.n	80179f0 <__sflush_r+0x7c>
 80179e6:	1c42      	adds	r2, r0, #1
 80179e8:	d101      	bne.n	80179ee <__sflush_r+0x7a>
 80179ea:	682b      	ldr	r3, [r5, #0]
 80179ec:	b903      	cbnz	r3, 80179f0 <__sflush_r+0x7c>
 80179ee:	6560      	str	r0, [r4, #84]	; 0x54
 80179f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179f2:	602f      	str	r7, [r5, #0]
 80179f4:	2900      	cmp	r1, #0
 80179f6:	d0ca      	beq.n	801798e <__sflush_r+0x1a>
 80179f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179fc:	4299      	cmp	r1, r3
 80179fe:	d002      	beq.n	8017a06 <__sflush_r+0x92>
 8017a00:	4628      	mov	r0, r5
 8017a02:	f7fd fa27 	bl	8014e54 <_free_r>
 8017a06:	2000      	movs	r0, #0
 8017a08:	6360      	str	r0, [r4, #52]	; 0x34
 8017a0a:	e7c1      	b.n	8017990 <__sflush_r+0x1c>
 8017a0c:	6a21      	ldr	r1, [r4, #32]
 8017a0e:	2301      	movs	r3, #1
 8017a10:	4628      	mov	r0, r5
 8017a12:	47b0      	blx	r6
 8017a14:	1c41      	adds	r1, r0, #1
 8017a16:	d1c7      	bne.n	80179a8 <__sflush_r+0x34>
 8017a18:	682b      	ldr	r3, [r5, #0]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d0c4      	beq.n	80179a8 <__sflush_r+0x34>
 8017a1e:	2b1d      	cmp	r3, #29
 8017a20:	d001      	beq.n	8017a26 <__sflush_r+0xb2>
 8017a22:	2b16      	cmp	r3, #22
 8017a24:	d101      	bne.n	8017a2a <__sflush_r+0xb6>
 8017a26:	602f      	str	r7, [r5, #0]
 8017a28:	e7b1      	b.n	801798e <__sflush_r+0x1a>
 8017a2a:	89a3      	ldrh	r3, [r4, #12]
 8017a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a30:	81a3      	strh	r3, [r4, #12]
 8017a32:	e7ad      	b.n	8017990 <__sflush_r+0x1c>
 8017a34:	690f      	ldr	r7, [r1, #16]
 8017a36:	2f00      	cmp	r7, #0
 8017a38:	d0a9      	beq.n	801798e <__sflush_r+0x1a>
 8017a3a:	0793      	lsls	r3, r2, #30
 8017a3c:	680e      	ldr	r6, [r1, #0]
 8017a3e:	bf08      	it	eq
 8017a40:	694b      	ldreq	r3, [r1, #20]
 8017a42:	600f      	str	r7, [r1, #0]
 8017a44:	bf18      	it	ne
 8017a46:	2300      	movne	r3, #0
 8017a48:	eba6 0807 	sub.w	r8, r6, r7
 8017a4c:	608b      	str	r3, [r1, #8]
 8017a4e:	f1b8 0f00 	cmp.w	r8, #0
 8017a52:	dd9c      	ble.n	801798e <__sflush_r+0x1a>
 8017a54:	6a21      	ldr	r1, [r4, #32]
 8017a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a58:	4643      	mov	r3, r8
 8017a5a:	463a      	mov	r2, r7
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	47b0      	blx	r6
 8017a60:	2800      	cmp	r0, #0
 8017a62:	dc06      	bgt.n	8017a72 <__sflush_r+0xfe>
 8017a64:	89a3      	ldrh	r3, [r4, #12]
 8017a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a6a:	81a3      	strh	r3, [r4, #12]
 8017a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a70:	e78e      	b.n	8017990 <__sflush_r+0x1c>
 8017a72:	4407      	add	r7, r0
 8017a74:	eba8 0800 	sub.w	r8, r8, r0
 8017a78:	e7e9      	b.n	8017a4e <__sflush_r+0xda>
 8017a7a:	bf00      	nop
 8017a7c:	20400001 	.word	0x20400001

08017a80 <_fflush_r>:
 8017a80:	b538      	push	{r3, r4, r5, lr}
 8017a82:	690b      	ldr	r3, [r1, #16]
 8017a84:	4605      	mov	r5, r0
 8017a86:	460c      	mov	r4, r1
 8017a88:	b913      	cbnz	r3, 8017a90 <_fflush_r+0x10>
 8017a8a:	2500      	movs	r5, #0
 8017a8c:	4628      	mov	r0, r5
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	b118      	cbz	r0, 8017a9a <_fflush_r+0x1a>
 8017a92:	6983      	ldr	r3, [r0, #24]
 8017a94:	b90b      	cbnz	r3, 8017a9a <_fflush_r+0x1a>
 8017a96:	f7fe ff39 	bl	801690c <__sinit>
 8017a9a:	4b14      	ldr	r3, [pc, #80]	; (8017aec <_fflush_r+0x6c>)
 8017a9c:	429c      	cmp	r4, r3
 8017a9e:	d11b      	bne.n	8017ad8 <_fflush_r+0x58>
 8017aa0:	686c      	ldr	r4, [r5, #4]
 8017aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d0ef      	beq.n	8017a8a <_fflush_r+0xa>
 8017aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017aac:	07d0      	lsls	r0, r2, #31
 8017aae:	d404      	bmi.n	8017aba <_fflush_r+0x3a>
 8017ab0:	0599      	lsls	r1, r3, #22
 8017ab2:	d402      	bmi.n	8017aba <_fflush_r+0x3a>
 8017ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ab6:	f7fe ffde 	bl	8016a76 <__retarget_lock_acquire_recursive>
 8017aba:	4628      	mov	r0, r5
 8017abc:	4621      	mov	r1, r4
 8017abe:	f7ff ff59 	bl	8017974 <__sflush_r>
 8017ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ac4:	07da      	lsls	r2, r3, #31
 8017ac6:	4605      	mov	r5, r0
 8017ac8:	d4e0      	bmi.n	8017a8c <_fflush_r+0xc>
 8017aca:	89a3      	ldrh	r3, [r4, #12]
 8017acc:	059b      	lsls	r3, r3, #22
 8017ace:	d4dd      	bmi.n	8017a8c <_fflush_r+0xc>
 8017ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ad2:	f7fe ffd1 	bl	8016a78 <__retarget_lock_release_recursive>
 8017ad6:	e7d9      	b.n	8017a8c <_fflush_r+0xc>
 8017ad8:	4b05      	ldr	r3, [pc, #20]	; (8017af0 <_fflush_r+0x70>)
 8017ada:	429c      	cmp	r4, r3
 8017adc:	d101      	bne.n	8017ae2 <_fflush_r+0x62>
 8017ade:	68ac      	ldr	r4, [r5, #8]
 8017ae0:	e7df      	b.n	8017aa2 <_fflush_r+0x22>
 8017ae2:	4b04      	ldr	r3, [pc, #16]	; (8017af4 <_fflush_r+0x74>)
 8017ae4:	429c      	cmp	r4, r3
 8017ae6:	bf08      	it	eq
 8017ae8:	68ec      	ldreq	r4, [r5, #12]
 8017aea:	e7da      	b.n	8017aa2 <_fflush_r+0x22>
 8017aec:	0801c358 	.word	0x0801c358
 8017af0:	0801c378 	.word	0x0801c378
 8017af4:	0801c338 	.word	0x0801c338

08017af8 <_lseek_r>:
 8017af8:	b538      	push	{r3, r4, r5, lr}
 8017afa:	4d07      	ldr	r5, [pc, #28]	; (8017b18 <_lseek_r+0x20>)
 8017afc:	4604      	mov	r4, r0
 8017afe:	4608      	mov	r0, r1
 8017b00:	4611      	mov	r1, r2
 8017b02:	2200      	movs	r2, #0
 8017b04:	602a      	str	r2, [r5, #0]
 8017b06:	461a      	mov	r2, r3
 8017b08:	f7ec fa12 	bl	8003f30 <_lseek>
 8017b0c:	1c43      	adds	r3, r0, #1
 8017b0e:	d102      	bne.n	8017b16 <_lseek_r+0x1e>
 8017b10:	682b      	ldr	r3, [r5, #0]
 8017b12:	b103      	cbz	r3, 8017b16 <_lseek_r+0x1e>
 8017b14:	6023      	str	r3, [r4, #0]
 8017b16:	bd38      	pop	{r3, r4, r5, pc}
 8017b18:	20006b04 	.word	0x20006b04

08017b1c <__swhatbuf_r>:
 8017b1c:	b570      	push	{r4, r5, r6, lr}
 8017b1e:	460e      	mov	r6, r1
 8017b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b24:	2900      	cmp	r1, #0
 8017b26:	b096      	sub	sp, #88	; 0x58
 8017b28:	4614      	mov	r4, r2
 8017b2a:	461d      	mov	r5, r3
 8017b2c:	da07      	bge.n	8017b3e <__swhatbuf_r+0x22>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	602b      	str	r3, [r5, #0]
 8017b32:	89b3      	ldrh	r3, [r6, #12]
 8017b34:	061a      	lsls	r2, r3, #24
 8017b36:	d410      	bmi.n	8017b5a <__swhatbuf_r+0x3e>
 8017b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b3c:	e00e      	b.n	8017b5c <__swhatbuf_r+0x40>
 8017b3e:	466a      	mov	r2, sp
 8017b40:	f000 f8ec 	bl	8017d1c <_fstat_r>
 8017b44:	2800      	cmp	r0, #0
 8017b46:	dbf2      	blt.n	8017b2e <__swhatbuf_r+0x12>
 8017b48:	9a01      	ldr	r2, [sp, #4]
 8017b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017b52:	425a      	negs	r2, r3
 8017b54:	415a      	adcs	r2, r3
 8017b56:	602a      	str	r2, [r5, #0]
 8017b58:	e7ee      	b.n	8017b38 <__swhatbuf_r+0x1c>
 8017b5a:	2340      	movs	r3, #64	; 0x40
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	6023      	str	r3, [r4, #0]
 8017b60:	b016      	add	sp, #88	; 0x58
 8017b62:	bd70      	pop	{r4, r5, r6, pc}

08017b64 <__smakebuf_r>:
 8017b64:	898b      	ldrh	r3, [r1, #12]
 8017b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b68:	079d      	lsls	r5, r3, #30
 8017b6a:	4606      	mov	r6, r0
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	d507      	bpl.n	8017b80 <__smakebuf_r+0x1c>
 8017b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017b74:	6023      	str	r3, [r4, #0]
 8017b76:	6123      	str	r3, [r4, #16]
 8017b78:	2301      	movs	r3, #1
 8017b7a:	6163      	str	r3, [r4, #20]
 8017b7c:	b002      	add	sp, #8
 8017b7e:	bd70      	pop	{r4, r5, r6, pc}
 8017b80:	ab01      	add	r3, sp, #4
 8017b82:	466a      	mov	r2, sp
 8017b84:	f7ff ffca 	bl	8017b1c <__swhatbuf_r>
 8017b88:	9900      	ldr	r1, [sp, #0]
 8017b8a:	4605      	mov	r5, r0
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	f7fd f9b1 	bl	8014ef4 <_malloc_r>
 8017b92:	b948      	cbnz	r0, 8017ba8 <__smakebuf_r+0x44>
 8017b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b98:	059a      	lsls	r2, r3, #22
 8017b9a:	d4ef      	bmi.n	8017b7c <__smakebuf_r+0x18>
 8017b9c:	f023 0303 	bic.w	r3, r3, #3
 8017ba0:	f043 0302 	orr.w	r3, r3, #2
 8017ba4:	81a3      	strh	r3, [r4, #12]
 8017ba6:	e7e3      	b.n	8017b70 <__smakebuf_r+0xc>
 8017ba8:	4b0d      	ldr	r3, [pc, #52]	; (8017be0 <__smakebuf_r+0x7c>)
 8017baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8017bac:	89a3      	ldrh	r3, [r4, #12]
 8017bae:	6020      	str	r0, [r4, #0]
 8017bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bb4:	81a3      	strh	r3, [r4, #12]
 8017bb6:	9b00      	ldr	r3, [sp, #0]
 8017bb8:	6163      	str	r3, [r4, #20]
 8017bba:	9b01      	ldr	r3, [sp, #4]
 8017bbc:	6120      	str	r0, [r4, #16]
 8017bbe:	b15b      	cbz	r3, 8017bd8 <__smakebuf_r+0x74>
 8017bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bc4:	4630      	mov	r0, r6
 8017bc6:	f000 f8bb 	bl	8017d40 <_isatty_r>
 8017bca:	b128      	cbz	r0, 8017bd8 <__smakebuf_r+0x74>
 8017bcc:	89a3      	ldrh	r3, [r4, #12]
 8017bce:	f023 0303 	bic.w	r3, r3, #3
 8017bd2:	f043 0301 	orr.w	r3, r3, #1
 8017bd6:	81a3      	strh	r3, [r4, #12]
 8017bd8:	89a0      	ldrh	r0, [r4, #12]
 8017bda:	4305      	orrs	r5, r0
 8017bdc:	81a5      	strh	r5, [r4, #12]
 8017bde:	e7cd      	b.n	8017b7c <__smakebuf_r+0x18>
 8017be0:	080168a5 	.word	0x080168a5

08017be4 <__ascii_mbtowc>:
 8017be4:	b082      	sub	sp, #8
 8017be6:	b901      	cbnz	r1, 8017bea <__ascii_mbtowc+0x6>
 8017be8:	a901      	add	r1, sp, #4
 8017bea:	b142      	cbz	r2, 8017bfe <__ascii_mbtowc+0x1a>
 8017bec:	b14b      	cbz	r3, 8017c02 <__ascii_mbtowc+0x1e>
 8017bee:	7813      	ldrb	r3, [r2, #0]
 8017bf0:	600b      	str	r3, [r1, #0]
 8017bf2:	7812      	ldrb	r2, [r2, #0]
 8017bf4:	1e10      	subs	r0, r2, #0
 8017bf6:	bf18      	it	ne
 8017bf8:	2001      	movne	r0, #1
 8017bfa:	b002      	add	sp, #8
 8017bfc:	4770      	bx	lr
 8017bfe:	4610      	mov	r0, r2
 8017c00:	e7fb      	b.n	8017bfa <__ascii_mbtowc+0x16>
 8017c02:	f06f 0001 	mvn.w	r0, #1
 8017c06:	e7f8      	b.n	8017bfa <__ascii_mbtowc+0x16>

08017c08 <_realloc_r>:
 8017c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0a:	4607      	mov	r7, r0
 8017c0c:	4614      	mov	r4, r2
 8017c0e:	460e      	mov	r6, r1
 8017c10:	b921      	cbnz	r1, 8017c1c <_realloc_r+0x14>
 8017c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c16:	4611      	mov	r1, r2
 8017c18:	f7fd b96c 	b.w	8014ef4 <_malloc_r>
 8017c1c:	b922      	cbnz	r2, 8017c28 <_realloc_r+0x20>
 8017c1e:	f7fd f919 	bl	8014e54 <_free_r>
 8017c22:	4625      	mov	r5, r4
 8017c24:	4628      	mov	r0, r5
 8017c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c28:	f000 f89a 	bl	8017d60 <_malloc_usable_size_r>
 8017c2c:	42a0      	cmp	r0, r4
 8017c2e:	d20f      	bcs.n	8017c50 <_realloc_r+0x48>
 8017c30:	4621      	mov	r1, r4
 8017c32:	4638      	mov	r0, r7
 8017c34:	f7fd f95e 	bl	8014ef4 <_malloc_r>
 8017c38:	4605      	mov	r5, r0
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	d0f2      	beq.n	8017c24 <_realloc_r+0x1c>
 8017c3e:	4631      	mov	r1, r6
 8017c40:	4622      	mov	r2, r4
 8017c42:	f7fd f8d7 	bl	8014df4 <memcpy>
 8017c46:	4631      	mov	r1, r6
 8017c48:	4638      	mov	r0, r7
 8017c4a:	f7fd f903 	bl	8014e54 <_free_r>
 8017c4e:	e7e9      	b.n	8017c24 <_realloc_r+0x1c>
 8017c50:	4635      	mov	r5, r6
 8017c52:	e7e7      	b.n	8017c24 <_realloc_r+0x1c>

08017c54 <_read_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d07      	ldr	r5, [pc, #28]	; (8017c74 <_read_r+0x20>)
 8017c58:	4604      	mov	r4, r0
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	2200      	movs	r2, #0
 8017c60:	602a      	str	r2, [r5, #0]
 8017c62:	461a      	mov	r2, r3
 8017c64:	f7ec f904 	bl	8003e70 <_read>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	d102      	bne.n	8017c72 <_read_r+0x1e>
 8017c6c:	682b      	ldr	r3, [r5, #0]
 8017c6e:	b103      	cbz	r3, 8017c72 <_read_r+0x1e>
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	20006b04 	.word	0x20006b04

08017c78 <_raise_r>:
 8017c78:	291f      	cmp	r1, #31
 8017c7a:	b538      	push	{r3, r4, r5, lr}
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	460d      	mov	r5, r1
 8017c80:	d904      	bls.n	8017c8c <_raise_r+0x14>
 8017c82:	2316      	movs	r3, #22
 8017c84:	6003      	str	r3, [r0, #0]
 8017c86:	f04f 30ff 	mov.w	r0, #4294967295
 8017c8a:	bd38      	pop	{r3, r4, r5, pc}
 8017c8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017c8e:	b112      	cbz	r2, 8017c96 <_raise_r+0x1e>
 8017c90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c94:	b94b      	cbnz	r3, 8017caa <_raise_r+0x32>
 8017c96:	4620      	mov	r0, r4
 8017c98:	f000 f830 	bl	8017cfc <_getpid_r>
 8017c9c:	462a      	mov	r2, r5
 8017c9e:	4601      	mov	r1, r0
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ca6:	f000 b817 	b.w	8017cd8 <_kill_r>
 8017caa:	2b01      	cmp	r3, #1
 8017cac:	d00a      	beq.n	8017cc4 <_raise_r+0x4c>
 8017cae:	1c59      	adds	r1, r3, #1
 8017cb0:	d103      	bne.n	8017cba <_raise_r+0x42>
 8017cb2:	2316      	movs	r3, #22
 8017cb4:	6003      	str	r3, [r0, #0]
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	e7e7      	b.n	8017c8a <_raise_r+0x12>
 8017cba:	2400      	movs	r4, #0
 8017cbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017cc0:	4628      	mov	r0, r5
 8017cc2:	4798      	blx	r3
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e7e0      	b.n	8017c8a <_raise_r+0x12>

08017cc8 <raise>:
 8017cc8:	4b02      	ldr	r3, [pc, #8]	; (8017cd4 <raise+0xc>)
 8017cca:	4601      	mov	r1, r0
 8017ccc:	6818      	ldr	r0, [r3, #0]
 8017cce:	f7ff bfd3 	b.w	8017c78 <_raise_r>
 8017cd2:	bf00      	nop
 8017cd4:	20000024 	.word	0x20000024

08017cd8 <_kill_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4d07      	ldr	r5, [pc, #28]	; (8017cf8 <_kill_r+0x20>)
 8017cdc:	2300      	movs	r3, #0
 8017cde:	4604      	mov	r4, r0
 8017ce0:	4608      	mov	r0, r1
 8017ce2:	4611      	mov	r1, r2
 8017ce4:	602b      	str	r3, [r5, #0]
 8017ce6:	f7ec f8a7 	bl	8003e38 <_kill>
 8017cea:	1c43      	adds	r3, r0, #1
 8017cec:	d102      	bne.n	8017cf4 <_kill_r+0x1c>
 8017cee:	682b      	ldr	r3, [r5, #0]
 8017cf0:	b103      	cbz	r3, 8017cf4 <_kill_r+0x1c>
 8017cf2:	6023      	str	r3, [r4, #0]
 8017cf4:	bd38      	pop	{r3, r4, r5, pc}
 8017cf6:	bf00      	nop
 8017cf8:	20006b04 	.word	0x20006b04

08017cfc <_getpid_r>:
 8017cfc:	f7ec b894 	b.w	8003e28 <_getpid>

08017d00 <__ascii_wctomb>:
 8017d00:	b149      	cbz	r1, 8017d16 <__ascii_wctomb+0x16>
 8017d02:	2aff      	cmp	r2, #255	; 0xff
 8017d04:	bf85      	ittet	hi
 8017d06:	238a      	movhi	r3, #138	; 0x8a
 8017d08:	6003      	strhi	r3, [r0, #0]
 8017d0a:	700a      	strbls	r2, [r1, #0]
 8017d0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017d10:	bf98      	it	ls
 8017d12:	2001      	movls	r0, #1
 8017d14:	4770      	bx	lr
 8017d16:	4608      	mov	r0, r1
 8017d18:	4770      	bx	lr
	...

08017d1c <_fstat_r>:
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	4d07      	ldr	r5, [pc, #28]	; (8017d3c <_fstat_r+0x20>)
 8017d20:	2300      	movs	r3, #0
 8017d22:	4604      	mov	r4, r0
 8017d24:	4608      	mov	r0, r1
 8017d26:	4611      	mov	r1, r2
 8017d28:	602b      	str	r3, [r5, #0]
 8017d2a:	f7ec f8e6 	bl	8003efa <_fstat>
 8017d2e:	1c43      	adds	r3, r0, #1
 8017d30:	d102      	bne.n	8017d38 <_fstat_r+0x1c>
 8017d32:	682b      	ldr	r3, [r5, #0]
 8017d34:	b103      	cbz	r3, 8017d38 <_fstat_r+0x1c>
 8017d36:	6023      	str	r3, [r4, #0]
 8017d38:	bd38      	pop	{r3, r4, r5, pc}
 8017d3a:	bf00      	nop
 8017d3c:	20006b04 	.word	0x20006b04

08017d40 <_isatty_r>:
 8017d40:	b538      	push	{r3, r4, r5, lr}
 8017d42:	4d06      	ldr	r5, [pc, #24]	; (8017d5c <_isatty_r+0x1c>)
 8017d44:	2300      	movs	r3, #0
 8017d46:	4604      	mov	r4, r0
 8017d48:	4608      	mov	r0, r1
 8017d4a:	602b      	str	r3, [r5, #0]
 8017d4c:	f7ec f8e5 	bl	8003f1a <_isatty>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d102      	bne.n	8017d5a <_isatty_r+0x1a>
 8017d54:	682b      	ldr	r3, [r5, #0]
 8017d56:	b103      	cbz	r3, 8017d5a <_isatty_r+0x1a>
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	20006b04 	.word	0x20006b04

08017d60 <_malloc_usable_size_r>:
 8017d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d64:	1f18      	subs	r0, r3, #4
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	bfbc      	itt	lt
 8017d6a:	580b      	ldrlt	r3, [r1, r0]
 8017d6c:	18c0      	addlt	r0, r0, r3
 8017d6e:	4770      	bx	lr

08017d70 <pow>:
 8017d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d74:	ec59 8b10 	vmov	r8, r9, d0
 8017d78:	ec57 6b11 	vmov	r6, r7, d1
 8017d7c:	f000 f8a8 	bl	8017ed0 <__ieee754_pow>
 8017d80:	4b4e      	ldr	r3, [pc, #312]	; (8017ebc <pow+0x14c>)
 8017d82:	f993 3000 	ldrsb.w	r3, [r3]
 8017d86:	3301      	adds	r3, #1
 8017d88:	ec55 4b10 	vmov	r4, r5, d0
 8017d8c:	d015      	beq.n	8017dba <pow+0x4a>
 8017d8e:	4632      	mov	r2, r6
 8017d90:	463b      	mov	r3, r7
 8017d92:	4630      	mov	r0, r6
 8017d94:	4639      	mov	r1, r7
 8017d96:	f7e8 fed9 	bl	8000b4c <__aeabi_dcmpun>
 8017d9a:	b970      	cbnz	r0, 8017dba <pow+0x4a>
 8017d9c:	4642      	mov	r2, r8
 8017d9e:	464b      	mov	r3, r9
 8017da0:	4640      	mov	r0, r8
 8017da2:	4649      	mov	r1, r9
 8017da4:	f7e8 fed2 	bl	8000b4c <__aeabi_dcmpun>
 8017da8:	2200      	movs	r2, #0
 8017daa:	2300      	movs	r3, #0
 8017dac:	b148      	cbz	r0, 8017dc2 <pow+0x52>
 8017dae:	4630      	mov	r0, r6
 8017db0:	4639      	mov	r1, r7
 8017db2:	f7e8 fe99 	bl	8000ae8 <__aeabi_dcmpeq>
 8017db6:	2800      	cmp	r0, #0
 8017db8:	d17d      	bne.n	8017eb6 <pow+0x146>
 8017dba:	ec45 4b10 	vmov	d0, r4, r5
 8017dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dc2:	4640      	mov	r0, r8
 8017dc4:	4649      	mov	r1, r9
 8017dc6:	f7e8 fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8017dca:	b1e0      	cbz	r0, 8017e06 <pow+0x96>
 8017dcc:	2200      	movs	r2, #0
 8017dce:	2300      	movs	r3, #0
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	4639      	mov	r1, r7
 8017dd4:	f7e8 fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	d16c      	bne.n	8017eb6 <pow+0x146>
 8017ddc:	ec47 6b10 	vmov	d0, r6, r7
 8017de0:	f000 fe55 	bl	8018a8e <finite>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	d0e8      	beq.n	8017dba <pow+0x4a>
 8017de8:	2200      	movs	r2, #0
 8017dea:	2300      	movs	r3, #0
 8017dec:	4630      	mov	r0, r6
 8017dee:	4639      	mov	r1, r7
 8017df0:	f7e8 fe84 	bl	8000afc <__aeabi_dcmplt>
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d0e0      	beq.n	8017dba <pow+0x4a>
 8017df8:	f7fe fd2a 	bl	8016850 <__errno>
 8017dfc:	2321      	movs	r3, #33	; 0x21
 8017dfe:	6003      	str	r3, [r0, #0]
 8017e00:	2400      	movs	r4, #0
 8017e02:	4d2f      	ldr	r5, [pc, #188]	; (8017ec0 <pow+0x150>)
 8017e04:	e7d9      	b.n	8017dba <pow+0x4a>
 8017e06:	ec45 4b10 	vmov	d0, r4, r5
 8017e0a:	f000 fe40 	bl	8018a8e <finite>
 8017e0e:	bbb8      	cbnz	r0, 8017e80 <pow+0x110>
 8017e10:	ec49 8b10 	vmov	d0, r8, r9
 8017e14:	f000 fe3b 	bl	8018a8e <finite>
 8017e18:	b390      	cbz	r0, 8017e80 <pow+0x110>
 8017e1a:	ec47 6b10 	vmov	d0, r6, r7
 8017e1e:	f000 fe36 	bl	8018a8e <finite>
 8017e22:	b368      	cbz	r0, 8017e80 <pow+0x110>
 8017e24:	4622      	mov	r2, r4
 8017e26:	462b      	mov	r3, r5
 8017e28:	4620      	mov	r0, r4
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	f7e8 fe8e 	bl	8000b4c <__aeabi_dcmpun>
 8017e30:	b160      	cbz	r0, 8017e4c <pow+0xdc>
 8017e32:	f7fe fd0d 	bl	8016850 <__errno>
 8017e36:	2321      	movs	r3, #33	; 0x21
 8017e38:	6003      	str	r3, [r0, #0]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4610      	mov	r0, r2
 8017e40:	4619      	mov	r1, r3
 8017e42:	f7e8 fd13 	bl	800086c <__aeabi_ddiv>
 8017e46:	4604      	mov	r4, r0
 8017e48:	460d      	mov	r5, r1
 8017e4a:	e7b6      	b.n	8017dba <pow+0x4a>
 8017e4c:	f7fe fd00 	bl	8016850 <__errno>
 8017e50:	2322      	movs	r3, #34	; 0x22
 8017e52:	6003      	str	r3, [r0, #0]
 8017e54:	2200      	movs	r2, #0
 8017e56:	2300      	movs	r3, #0
 8017e58:	4640      	mov	r0, r8
 8017e5a:	4649      	mov	r1, r9
 8017e5c:	f7e8 fe4e 	bl	8000afc <__aeabi_dcmplt>
 8017e60:	2400      	movs	r4, #0
 8017e62:	b158      	cbz	r0, 8017e7c <pow+0x10c>
 8017e64:	ec47 6b10 	vmov	d0, r6, r7
 8017e68:	f000 fe26 	bl	8018ab8 <rint>
 8017e6c:	4632      	mov	r2, r6
 8017e6e:	ec51 0b10 	vmov	r0, r1, d0
 8017e72:	463b      	mov	r3, r7
 8017e74:	f7e8 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0c2      	beq.n	8017e02 <pow+0x92>
 8017e7c:	4d11      	ldr	r5, [pc, #68]	; (8017ec4 <pow+0x154>)
 8017e7e:	e79c      	b.n	8017dba <pow+0x4a>
 8017e80:	2200      	movs	r2, #0
 8017e82:	2300      	movs	r3, #0
 8017e84:	4620      	mov	r0, r4
 8017e86:	4629      	mov	r1, r5
 8017e88:	f7e8 fe2e 	bl	8000ae8 <__aeabi_dcmpeq>
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d094      	beq.n	8017dba <pow+0x4a>
 8017e90:	ec49 8b10 	vmov	d0, r8, r9
 8017e94:	f000 fdfb 	bl	8018a8e <finite>
 8017e98:	2800      	cmp	r0, #0
 8017e9a:	d08e      	beq.n	8017dba <pow+0x4a>
 8017e9c:	ec47 6b10 	vmov	d0, r6, r7
 8017ea0:	f000 fdf5 	bl	8018a8e <finite>
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	d088      	beq.n	8017dba <pow+0x4a>
 8017ea8:	f7fe fcd2 	bl	8016850 <__errno>
 8017eac:	2322      	movs	r3, #34	; 0x22
 8017eae:	6003      	str	r3, [r0, #0]
 8017eb0:	2400      	movs	r4, #0
 8017eb2:	2500      	movs	r5, #0
 8017eb4:	e781      	b.n	8017dba <pow+0x4a>
 8017eb6:	4d04      	ldr	r5, [pc, #16]	; (8017ec8 <pow+0x158>)
 8017eb8:	2400      	movs	r4, #0
 8017eba:	e77e      	b.n	8017dba <pow+0x4a>
 8017ebc:	200001f4 	.word	0x200001f4
 8017ec0:	fff00000 	.word	0xfff00000
 8017ec4:	7ff00000 	.word	0x7ff00000
 8017ec8:	3ff00000 	.word	0x3ff00000
 8017ecc:	00000000 	.word	0x00000000

08017ed0 <__ieee754_pow>:
 8017ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed4:	ed2d 8b06 	vpush	{d8-d10}
 8017ed8:	b08d      	sub	sp, #52	; 0x34
 8017eda:	ed8d 1b02 	vstr	d1, [sp, #8]
 8017ede:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8017ee2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8017ee6:	ea56 0100 	orrs.w	r1, r6, r0
 8017eea:	ec53 2b10 	vmov	r2, r3, d0
 8017eee:	f000 84d1 	beq.w	8018894 <__ieee754_pow+0x9c4>
 8017ef2:	497f      	ldr	r1, [pc, #508]	; (80180f0 <__ieee754_pow+0x220>)
 8017ef4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017ef8:	428c      	cmp	r4, r1
 8017efa:	ee10 8a10 	vmov	r8, s0
 8017efe:	4699      	mov	r9, r3
 8017f00:	dc09      	bgt.n	8017f16 <__ieee754_pow+0x46>
 8017f02:	d103      	bne.n	8017f0c <__ieee754_pow+0x3c>
 8017f04:	b97a      	cbnz	r2, 8017f26 <__ieee754_pow+0x56>
 8017f06:	42a6      	cmp	r6, r4
 8017f08:	dd02      	ble.n	8017f10 <__ieee754_pow+0x40>
 8017f0a:	e00c      	b.n	8017f26 <__ieee754_pow+0x56>
 8017f0c:	428e      	cmp	r6, r1
 8017f0e:	dc02      	bgt.n	8017f16 <__ieee754_pow+0x46>
 8017f10:	428e      	cmp	r6, r1
 8017f12:	d110      	bne.n	8017f36 <__ieee754_pow+0x66>
 8017f14:	b178      	cbz	r0, 8017f36 <__ieee754_pow+0x66>
 8017f16:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017f1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017f1e:	ea54 0308 	orrs.w	r3, r4, r8
 8017f22:	f000 84b7 	beq.w	8018894 <__ieee754_pow+0x9c4>
 8017f26:	4873      	ldr	r0, [pc, #460]	; (80180f4 <__ieee754_pow+0x224>)
 8017f28:	b00d      	add	sp, #52	; 0x34
 8017f2a:	ecbd 8b06 	vpop	{d8-d10}
 8017f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f32:	f000 bdb9 	b.w	8018aa8 <nan>
 8017f36:	f1b9 0f00 	cmp.w	r9, #0
 8017f3a:	da36      	bge.n	8017faa <__ieee754_pow+0xda>
 8017f3c:	496e      	ldr	r1, [pc, #440]	; (80180f8 <__ieee754_pow+0x228>)
 8017f3e:	428e      	cmp	r6, r1
 8017f40:	dc51      	bgt.n	8017fe6 <__ieee754_pow+0x116>
 8017f42:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8017f46:	428e      	cmp	r6, r1
 8017f48:	f340 84af 	ble.w	80188aa <__ieee754_pow+0x9da>
 8017f4c:	1531      	asrs	r1, r6, #20
 8017f4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017f52:	2914      	cmp	r1, #20
 8017f54:	dd0f      	ble.n	8017f76 <__ieee754_pow+0xa6>
 8017f56:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8017f5a:	fa20 fc01 	lsr.w	ip, r0, r1
 8017f5e:	fa0c f101 	lsl.w	r1, ip, r1
 8017f62:	4281      	cmp	r1, r0
 8017f64:	f040 84a1 	bne.w	80188aa <__ieee754_pow+0x9da>
 8017f68:	f00c 0c01 	and.w	ip, ip, #1
 8017f6c:	f1cc 0102 	rsb	r1, ip, #2
 8017f70:	9100      	str	r1, [sp, #0]
 8017f72:	b180      	cbz	r0, 8017f96 <__ieee754_pow+0xc6>
 8017f74:	e059      	b.n	801802a <__ieee754_pow+0x15a>
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d155      	bne.n	8018026 <__ieee754_pow+0x156>
 8017f7a:	f1c1 0114 	rsb	r1, r1, #20
 8017f7e:	fa46 fc01 	asr.w	ip, r6, r1
 8017f82:	fa0c f101 	lsl.w	r1, ip, r1
 8017f86:	42b1      	cmp	r1, r6
 8017f88:	f040 848c 	bne.w	80188a4 <__ieee754_pow+0x9d4>
 8017f8c:	f00c 0c01 	and.w	ip, ip, #1
 8017f90:	f1cc 0102 	rsb	r1, ip, #2
 8017f94:	9100      	str	r1, [sp, #0]
 8017f96:	4959      	ldr	r1, [pc, #356]	; (80180fc <__ieee754_pow+0x22c>)
 8017f98:	428e      	cmp	r6, r1
 8017f9a:	d12d      	bne.n	8017ff8 <__ieee754_pow+0x128>
 8017f9c:	2f00      	cmp	r7, #0
 8017f9e:	da79      	bge.n	8018094 <__ieee754_pow+0x1c4>
 8017fa0:	4956      	ldr	r1, [pc, #344]	; (80180fc <__ieee754_pow+0x22c>)
 8017fa2:	2000      	movs	r0, #0
 8017fa4:	f7e8 fc62 	bl	800086c <__aeabi_ddiv>
 8017fa8:	e016      	b.n	8017fd8 <__ieee754_pow+0x108>
 8017faa:	2100      	movs	r1, #0
 8017fac:	9100      	str	r1, [sp, #0]
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d13b      	bne.n	801802a <__ieee754_pow+0x15a>
 8017fb2:	494f      	ldr	r1, [pc, #316]	; (80180f0 <__ieee754_pow+0x220>)
 8017fb4:	428e      	cmp	r6, r1
 8017fb6:	d1ee      	bne.n	8017f96 <__ieee754_pow+0xc6>
 8017fb8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017fbc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017fc0:	ea53 0308 	orrs.w	r3, r3, r8
 8017fc4:	f000 8466 	beq.w	8018894 <__ieee754_pow+0x9c4>
 8017fc8:	4b4d      	ldr	r3, [pc, #308]	; (8018100 <__ieee754_pow+0x230>)
 8017fca:	429c      	cmp	r4, r3
 8017fcc:	dd0d      	ble.n	8017fea <__ieee754_pow+0x11a>
 8017fce:	2f00      	cmp	r7, #0
 8017fd0:	f280 8464 	bge.w	801889c <__ieee754_pow+0x9cc>
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	2100      	movs	r1, #0
 8017fd8:	ec41 0b10 	vmov	d0, r0, r1
 8017fdc:	b00d      	add	sp, #52	; 0x34
 8017fde:	ecbd 8b06 	vpop	{d8-d10}
 8017fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe6:	2102      	movs	r1, #2
 8017fe8:	e7e0      	b.n	8017fac <__ieee754_pow+0xdc>
 8017fea:	2f00      	cmp	r7, #0
 8017fec:	daf2      	bge.n	8017fd4 <__ieee754_pow+0x104>
 8017fee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8017ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017ff6:	e7ef      	b.n	8017fd8 <__ieee754_pow+0x108>
 8017ff8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8017ffc:	d104      	bne.n	8018008 <__ieee754_pow+0x138>
 8017ffe:	4610      	mov	r0, r2
 8018000:	4619      	mov	r1, r3
 8018002:	f7e8 fb09 	bl	8000618 <__aeabi_dmul>
 8018006:	e7e7      	b.n	8017fd8 <__ieee754_pow+0x108>
 8018008:	493e      	ldr	r1, [pc, #248]	; (8018104 <__ieee754_pow+0x234>)
 801800a:	428f      	cmp	r7, r1
 801800c:	d10d      	bne.n	801802a <__ieee754_pow+0x15a>
 801800e:	f1b9 0f00 	cmp.w	r9, #0
 8018012:	db0a      	blt.n	801802a <__ieee754_pow+0x15a>
 8018014:	ec43 2b10 	vmov	d0, r2, r3
 8018018:	b00d      	add	sp, #52	; 0x34
 801801a:	ecbd 8b06 	vpop	{d8-d10}
 801801e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018022:	f000 bc77 	b.w	8018914 <__ieee754_sqrt>
 8018026:	2100      	movs	r1, #0
 8018028:	9100      	str	r1, [sp, #0]
 801802a:	ec43 2b10 	vmov	d0, r2, r3
 801802e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018032:	f000 fd23 	bl	8018a7c <fabs>
 8018036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801803a:	ec51 0b10 	vmov	r0, r1, d0
 801803e:	f1b8 0f00 	cmp.w	r8, #0
 8018042:	d12a      	bne.n	801809a <__ieee754_pow+0x1ca>
 8018044:	b12c      	cbz	r4, 8018052 <__ieee754_pow+0x182>
 8018046:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80180fc <__ieee754_pow+0x22c>
 801804a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801804e:	45e6      	cmp	lr, ip
 8018050:	d123      	bne.n	801809a <__ieee754_pow+0x1ca>
 8018052:	2f00      	cmp	r7, #0
 8018054:	da05      	bge.n	8018062 <__ieee754_pow+0x192>
 8018056:	4602      	mov	r2, r0
 8018058:	460b      	mov	r3, r1
 801805a:	2000      	movs	r0, #0
 801805c:	4927      	ldr	r1, [pc, #156]	; (80180fc <__ieee754_pow+0x22c>)
 801805e:	f7e8 fc05 	bl	800086c <__aeabi_ddiv>
 8018062:	f1b9 0f00 	cmp.w	r9, #0
 8018066:	dab7      	bge.n	8017fd8 <__ieee754_pow+0x108>
 8018068:	9b00      	ldr	r3, [sp, #0]
 801806a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801806e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018072:	4323      	orrs	r3, r4
 8018074:	d108      	bne.n	8018088 <__ieee754_pow+0x1b8>
 8018076:	4602      	mov	r2, r0
 8018078:	460b      	mov	r3, r1
 801807a:	4610      	mov	r0, r2
 801807c:	4619      	mov	r1, r3
 801807e:	f7e8 f913 	bl	80002a8 <__aeabi_dsub>
 8018082:	4602      	mov	r2, r0
 8018084:	460b      	mov	r3, r1
 8018086:	e78d      	b.n	8017fa4 <__ieee754_pow+0xd4>
 8018088:	9b00      	ldr	r3, [sp, #0]
 801808a:	2b01      	cmp	r3, #1
 801808c:	d1a4      	bne.n	8017fd8 <__ieee754_pow+0x108>
 801808e:	4602      	mov	r2, r0
 8018090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018094:	4610      	mov	r0, r2
 8018096:	4619      	mov	r1, r3
 8018098:	e79e      	b.n	8017fd8 <__ieee754_pow+0x108>
 801809a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801809e:	f10c 35ff 	add.w	r5, ip, #4294967295
 80180a2:	950a      	str	r5, [sp, #40]	; 0x28
 80180a4:	9d00      	ldr	r5, [sp, #0]
 80180a6:	46ac      	mov	ip, r5
 80180a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80180aa:	ea5c 0505 	orrs.w	r5, ip, r5
 80180ae:	d0e4      	beq.n	801807a <__ieee754_pow+0x1aa>
 80180b0:	4b15      	ldr	r3, [pc, #84]	; (8018108 <__ieee754_pow+0x238>)
 80180b2:	429e      	cmp	r6, r3
 80180b4:	f340 80fc 	ble.w	80182b0 <__ieee754_pow+0x3e0>
 80180b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80180bc:	429e      	cmp	r6, r3
 80180be:	4b10      	ldr	r3, [pc, #64]	; (8018100 <__ieee754_pow+0x230>)
 80180c0:	dd07      	ble.n	80180d2 <__ieee754_pow+0x202>
 80180c2:	429c      	cmp	r4, r3
 80180c4:	dc0a      	bgt.n	80180dc <__ieee754_pow+0x20c>
 80180c6:	2f00      	cmp	r7, #0
 80180c8:	da84      	bge.n	8017fd4 <__ieee754_pow+0x104>
 80180ca:	a307      	add	r3, pc, #28	; (adr r3, 80180e8 <__ieee754_pow+0x218>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	e795      	b.n	8017ffe <__ieee754_pow+0x12e>
 80180d2:	429c      	cmp	r4, r3
 80180d4:	dbf7      	blt.n	80180c6 <__ieee754_pow+0x1f6>
 80180d6:	4b09      	ldr	r3, [pc, #36]	; (80180fc <__ieee754_pow+0x22c>)
 80180d8:	429c      	cmp	r4, r3
 80180da:	dd17      	ble.n	801810c <__ieee754_pow+0x23c>
 80180dc:	2f00      	cmp	r7, #0
 80180de:	dcf4      	bgt.n	80180ca <__ieee754_pow+0x1fa>
 80180e0:	e778      	b.n	8017fd4 <__ieee754_pow+0x104>
 80180e2:	bf00      	nop
 80180e4:	f3af 8000 	nop.w
 80180e8:	8800759c 	.word	0x8800759c
 80180ec:	7e37e43c 	.word	0x7e37e43c
 80180f0:	7ff00000 	.word	0x7ff00000
 80180f4:	0801c2b9 	.word	0x0801c2b9
 80180f8:	433fffff 	.word	0x433fffff
 80180fc:	3ff00000 	.word	0x3ff00000
 8018100:	3fefffff 	.word	0x3fefffff
 8018104:	3fe00000 	.word	0x3fe00000
 8018108:	41e00000 	.word	0x41e00000
 801810c:	4b64      	ldr	r3, [pc, #400]	; (80182a0 <__ieee754_pow+0x3d0>)
 801810e:	2200      	movs	r2, #0
 8018110:	f7e8 f8ca 	bl	80002a8 <__aeabi_dsub>
 8018114:	a356      	add	r3, pc, #344	; (adr r3, 8018270 <__ieee754_pow+0x3a0>)
 8018116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801811a:	4604      	mov	r4, r0
 801811c:	460d      	mov	r5, r1
 801811e:	f7e8 fa7b 	bl	8000618 <__aeabi_dmul>
 8018122:	a355      	add	r3, pc, #340	; (adr r3, 8018278 <__ieee754_pow+0x3a8>)
 8018124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018128:	4606      	mov	r6, r0
 801812a:	460f      	mov	r7, r1
 801812c:	4620      	mov	r0, r4
 801812e:	4629      	mov	r1, r5
 8018130:	f7e8 fa72 	bl	8000618 <__aeabi_dmul>
 8018134:	4b5b      	ldr	r3, [pc, #364]	; (80182a4 <__ieee754_pow+0x3d4>)
 8018136:	4682      	mov	sl, r0
 8018138:	468b      	mov	fp, r1
 801813a:	2200      	movs	r2, #0
 801813c:	4620      	mov	r0, r4
 801813e:	4629      	mov	r1, r5
 8018140:	f7e8 fa6a 	bl	8000618 <__aeabi_dmul>
 8018144:	4602      	mov	r2, r0
 8018146:	460b      	mov	r3, r1
 8018148:	a14d      	add	r1, pc, #308	; (adr r1, 8018280 <__ieee754_pow+0x3b0>)
 801814a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801814e:	f7e8 f8ab 	bl	80002a8 <__aeabi_dsub>
 8018152:	4622      	mov	r2, r4
 8018154:	462b      	mov	r3, r5
 8018156:	f7e8 fa5f 	bl	8000618 <__aeabi_dmul>
 801815a:	4602      	mov	r2, r0
 801815c:	460b      	mov	r3, r1
 801815e:	2000      	movs	r0, #0
 8018160:	4951      	ldr	r1, [pc, #324]	; (80182a8 <__ieee754_pow+0x3d8>)
 8018162:	f7e8 f8a1 	bl	80002a8 <__aeabi_dsub>
 8018166:	4622      	mov	r2, r4
 8018168:	4680      	mov	r8, r0
 801816a:	4689      	mov	r9, r1
 801816c:	462b      	mov	r3, r5
 801816e:	4620      	mov	r0, r4
 8018170:	4629      	mov	r1, r5
 8018172:	f7e8 fa51 	bl	8000618 <__aeabi_dmul>
 8018176:	4602      	mov	r2, r0
 8018178:	460b      	mov	r3, r1
 801817a:	4640      	mov	r0, r8
 801817c:	4649      	mov	r1, r9
 801817e:	f7e8 fa4b 	bl	8000618 <__aeabi_dmul>
 8018182:	a341      	add	r3, pc, #260	; (adr r3, 8018288 <__ieee754_pow+0x3b8>)
 8018184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018188:	f7e8 fa46 	bl	8000618 <__aeabi_dmul>
 801818c:	4602      	mov	r2, r0
 801818e:	460b      	mov	r3, r1
 8018190:	4650      	mov	r0, sl
 8018192:	4659      	mov	r1, fp
 8018194:	f7e8 f888 	bl	80002a8 <__aeabi_dsub>
 8018198:	4602      	mov	r2, r0
 801819a:	460b      	mov	r3, r1
 801819c:	4680      	mov	r8, r0
 801819e:	4689      	mov	r9, r1
 80181a0:	4630      	mov	r0, r6
 80181a2:	4639      	mov	r1, r7
 80181a4:	f7e8 f882 	bl	80002ac <__adddf3>
 80181a8:	2400      	movs	r4, #0
 80181aa:	4632      	mov	r2, r6
 80181ac:	463b      	mov	r3, r7
 80181ae:	4620      	mov	r0, r4
 80181b0:	460d      	mov	r5, r1
 80181b2:	f7e8 f879 	bl	80002a8 <__aeabi_dsub>
 80181b6:	4602      	mov	r2, r0
 80181b8:	460b      	mov	r3, r1
 80181ba:	4640      	mov	r0, r8
 80181bc:	4649      	mov	r1, r9
 80181be:	f7e8 f873 	bl	80002a8 <__aeabi_dsub>
 80181c2:	9b00      	ldr	r3, [sp, #0]
 80181c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181c6:	3b01      	subs	r3, #1
 80181c8:	4313      	orrs	r3, r2
 80181ca:	4682      	mov	sl, r0
 80181cc:	468b      	mov	fp, r1
 80181ce:	f040 81f1 	bne.w	80185b4 <__ieee754_pow+0x6e4>
 80181d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018290 <__ieee754_pow+0x3c0>
 80181d6:	eeb0 8a47 	vmov.f32	s16, s14
 80181da:	eef0 8a67 	vmov.f32	s17, s15
 80181de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80181e2:	2600      	movs	r6, #0
 80181e4:	4632      	mov	r2, r6
 80181e6:	463b      	mov	r3, r7
 80181e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181ec:	f7e8 f85c 	bl	80002a8 <__aeabi_dsub>
 80181f0:	4622      	mov	r2, r4
 80181f2:	462b      	mov	r3, r5
 80181f4:	f7e8 fa10 	bl	8000618 <__aeabi_dmul>
 80181f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181fc:	4680      	mov	r8, r0
 80181fe:	4689      	mov	r9, r1
 8018200:	4650      	mov	r0, sl
 8018202:	4659      	mov	r1, fp
 8018204:	f7e8 fa08 	bl	8000618 <__aeabi_dmul>
 8018208:	4602      	mov	r2, r0
 801820a:	460b      	mov	r3, r1
 801820c:	4640      	mov	r0, r8
 801820e:	4649      	mov	r1, r9
 8018210:	f7e8 f84c 	bl	80002ac <__adddf3>
 8018214:	4632      	mov	r2, r6
 8018216:	463b      	mov	r3, r7
 8018218:	4680      	mov	r8, r0
 801821a:	4689      	mov	r9, r1
 801821c:	4620      	mov	r0, r4
 801821e:	4629      	mov	r1, r5
 8018220:	f7e8 f9fa 	bl	8000618 <__aeabi_dmul>
 8018224:	460b      	mov	r3, r1
 8018226:	4604      	mov	r4, r0
 8018228:	460d      	mov	r5, r1
 801822a:	4602      	mov	r2, r0
 801822c:	4649      	mov	r1, r9
 801822e:	4640      	mov	r0, r8
 8018230:	f7e8 f83c 	bl	80002ac <__adddf3>
 8018234:	4b1d      	ldr	r3, [pc, #116]	; (80182ac <__ieee754_pow+0x3dc>)
 8018236:	4299      	cmp	r1, r3
 8018238:	ec45 4b19 	vmov	d9, r4, r5
 801823c:	4606      	mov	r6, r0
 801823e:	460f      	mov	r7, r1
 8018240:	468b      	mov	fp, r1
 8018242:	f340 82fe 	ble.w	8018842 <__ieee754_pow+0x972>
 8018246:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801824a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801824e:	4303      	orrs	r3, r0
 8018250:	f000 81f0 	beq.w	8018634 <__ieee754_pow+0x764>
 8018254:	a310      	add	r3, pc, #64	; (adr r3, 8018298 <__ieee754_pow+0x3c8>)
 8018256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801825a:	ec51 0b18 	vmov	r0, r1, d8
 801825e:	f7e8 f9db 	bl	8000618 <__aeabi_dmul>
 8018262:	a30d      	add	r3, pc, #52	; (adr r3, 8018298 <__ieee754_pow+0x3c8>)
 8018264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018268:	e6cb      	b.n	8018002 <__ieee754_pow+0x132>
 801826a:	bf00      	nop
 801826c:	f3af 8000 	nop.w
 8018270:	60000000 	.word	0x60000000
 8018274:	3ff71547 	.word	0x3ff71547
 8018278:	f85ddf44 	.word	0xf85ddf44
 801827c:	3e54ae0b 	.word	0x3e54ae0b
 8018280:	55555555 	.word	0x55555555
 8018284:	3fd55555 	.word	0x3fd55555
 8018288:	652b82fe 	.word	0x652b82fe
 801828c:	3ff71547 	.word	0x3ff71547
 8018290:	00000000 	.word	0x00000000
 8018294:	bff00000 	.word	0xbff00000
 8018298:	8800759c 	.word	0x8800759c
 801829c:	7e37e43c 	.word	0x7e37e43c
 80182a0:	3ff00000 	.word	0x3ff00000
 80182a4:	3fd00000 	.word	0x3fd00000
 80182a8:	3fe00000 	.word	0x3fe00000
 80182ac:	408fffff 	.word	0x408fffff
 80182b0:	4bd7      	ldr	r3, [pc, #860]	; (8018610 <__ieee754_pow+0x740>)
 80182b2:	ea03 0309 	and.w	r3, r3, r9
 80182b6:	2200      	movs	r2, #0
 80182b8:	b92b      	cbnz	r3, 80182c6 <__ieee754_pow+0x3f6>
 80182ba:	4bd6      	ldr	r3, [pc, #856]	; (8018614 <__ieee754_pow+0x744>)
 80182bc:	f7e8 f9ac 	bl	8000618 <__aeabi_dmul>
 80182c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80182c4:	460c      	mov	r4, r1
 80182c6:	1523      	asrs	r3, r4, #20
 80182c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80182cc:	4413      	add	r3, r2
 80182ce:	9309      	str	r3, [sp, #36]	; 0x24
 80182d0:	4bd1      	ldr	r3, [pc, #836]	; (8018618 <__ieee754_pow+0x748>)
 80182d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80182d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80182da:	429c      	cmp	r4, r3
 80182dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80182e0:	dd08      	ble.n	80182f4 <__ieee754_pow+0x424>
 80182e2:	4bce      	ldr	r3, [pc, #824]	; (801861c <__ieee754_pow+0x74c>)
 80182e4:	429c      	cmp	r4, r3
 80182e6:	f340 8163 	ble.w	80185b0 <__ieee754_pow+0x6e0>
 80182ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ec:	3301      	adds	r3, #1
 80182ee:	9309      	str	r3, [sp, #36]	; 0x24
 80182f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80182f4:	2400      	movs	r4, #0
 80182f6:	00e3      	lsls	r3, r4, #3
 80182f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80182fa:	4bc9      	ldr	r3, [pc, #804]	; (8018620 <__ieee754_pow+0x750>)
 80182fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018300:	ed93 7b00 	vldr	d7, [r3]
 8018304:	4629      	mov	r1, r5
 8018306:	ec53 2b17 	vmov	r2, r3, d7
 801830a:	eeb0 8a47 	vmov.f32	s16, s14
 801830e:	eef0 8a67 	vmov.f32	s17, s15
 8018312:	4682      	mov	sl, r0
 8018314:	f7e7 ffc8 	bl	80002a8 <__aeabi_dsub>
 8018318:	4652      	mov	r2, sl
 801831a:	4606      	mov	r6, r0
 801831c:	460f      	mov	r7, r1
 801831e:	462b      	mov	r3, r5
 8018320:	ec51 0b18 	vmov	r0, r1, d8
 8018324:	f7e7 ffc2 	bl	80002ac <__adddf3>
 8018328:	4602      	mov	r2, r0
 801832a:	460b      	mov	r3, r1
 801832c:	2000      	movs	r0, #0
 801832e:	49bd      	ldr	r1, [pc, #756]	; (8018624 <__ieee754_pow+0x754>)
 8018330:	f7e8 fa9c 	bl	800086c <__aeabi_ddiv>
 8018334:	ec41 0b19 	vmov	d9, r0, r1
 8018338:	4602      	mov	r2, r0
 801833a:	460b      	mov	r3, r1
 801833c:	4630      	mov	r0, r6
 801833e:	4639      	mov	r1, r7
 8018340:	f7e8 f96a 	bl	8000618 <__aeabi_dmul>
 8018344:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801834c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018350:	2300      	movs	r3, #0
 8018352:	9304      	str	r3, [sp, #16]
 8018354:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018358:	46ab      	mov	fp, r5
 801835a:	106d      	asrs	r5, r5, #1
 801835c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018360:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018364:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018368:	2200      	movs	r2, #0
 801836a:	4640      	mov	r0, r8
 801836c:	4649      	mov	r1, r9
 801836e:	4614      	mov	r4, r2
 8018370:	461d      	mov	r5, r3
 8018372:	f7e8 f951 	bl	8000618 <__aeabi_dmul>
 8018376:	4602      	mov	r2, r0
 8018378:	460b      	mov	r3, r1
 801837a:	4630      	mov	r0, r6
 801837c:	4639      	mov	r1, r7
 801837e:	f7e7 ff93 	bl	80002a8 <__aeabi_dsub>
 8018382:	ec53 2b18 	vmov	r2, r3, d8
 8018386:	4606      	mov	r6, r0
 8018388:	460f      	mov	r7, r1
 801838a:	4620      	mov	r0, r4
 801838c:	4629      	mov	r1, r5
 801838e:	f7e7 ff8b 	bl	80002a8 <__aeabi_dsub>
 8018392:	4602      	mov	r2, r0
 8018394:	460b      	mov	r3, r1
 8018396:	4650      	mov	r0, sl
 8018398:	4659      	mov	r1, fp
 801839a:	f7e7 ff85 	bl	80002a8 <__aeabi_dsub>
 801839e:	4642      	mov	r2, r8
 80183a0:	464b      	mov	r3, r9
 80183a2:	f7e8 f939 	bl	8000618 <__aeabi_dmul>
 80183a6:	4602      	mov	r2, r0
 80183a8:	460b      	mov	r3, r1
 80183aa:	4630      	mov	r0, r6
 80183ac:	4639      	mov	r1, r7
 80183ae:	f7e7 ff7b 	bl	80002a8 <__aeabi_dsub>
 80183b2:	ec53 2b19 	vmov	r2, r3, d9
 80183b6:	f7e8 f92f 	bl	8000618 <__aeabi_dmul>
 80183ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80183be:	ec41 0b18 	vmov	d8, r0, r1
 80183c2:	4610      	mov	r0, r2
 80183c4:	4619      	mov	r1, r3
 80183c6:	f7e8 f927 	bl	8000618 <__aeabi_dmul>
 80183ca:	a37d      	add	r3, pc, #500	; (adr r3, 80185c0 <__ieee754_pow+0x6f0>)
 80183cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d0:	4604      	mov	r4, r0
 80183d2:	460d      	mov	r5, r1
 80183d4:	f7e8 f920 	bl	8000618 <__aeabi_dmul>
 80183d8:	a37b      	add	r3, pc, #492	; (adr r3, 80185c8 <__ieee754_pow+0x6f8>)
 80183da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183de:	f7e7 ff65 	bl	80002ac <__adddf3>
 80183e2:	4622      	mov	r2, r4
 80183e4:	462b      	mov	r3, r5
 80183e6:	f7e8 f917 	bl	8000618 <__aeabi_dmul>
 80183ea:	a379      	add	r3, pc, #484	; (adr r3, 80185d0 <__ieee754_pow+0x700>)
 80183ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f0:	f7e7 ff5c 	bl	80002ac <__adddf3>
 80183f4:	4622      	mov	r2, r4
 80183f6:	462b      	mov	r3, r5
 80183f8:	f7e8 f90e 	bl	8000618 <__aeabi_dmul>
 80183fc:	a376      	add	r3, pc, #472	; (adr r3, 80185d8 <__ieee754_pow+0x708>)
 80183fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018402:	f7e7 ff53 	bl	80002ac <__adddf3>
 8018406:	4622      	mov	r2, r4
 8018408:	462b      	mov	r3, r5
 801840a:	f7e8 f905 	bl	8000618 <__aeabi_dmul>
 801840e:	a374      	add	r3, pc, #464	; (adr r3, 80185e0 <__ieee754_pow+0x710>)
 8018410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018414:	f7e7 ff4a 	bl	80002ac <__adddf3>
 8018418:	4622      	mov	r2, r4
 801841a:	462b      	mov	r3, r5
 801841c:	f7e8 f8fc 	bl	8000618 <__aeabi_dmul>
 8018420:	a371      	add	r3, pc, #452	; (adr r3, 80185e8 <__ieee754_pow+0x718>)
 8018422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018426:	f7e7 ff41 	bl	80002ac <__adddf3>
 801842a:	4622      	mov	r2, r4
 801842c:	4606      	mov	r6, r0
 801842e:	460f      	mov	r7, r1
 8018430:	462b      	mov	r3, r5
 8018432:	4620      	mov	r0, r4
 8018434:	4629      	mov	r1, r5
 8018436:	f7e8 f8ef 	bl	8000618 <__aeabi_dmul>
 801843a:	4602      	mov	r2, r0
 801843c:	460b      	mov	r3, r1
 801843e:	4630      	mov	r0, r6
 8018440:	4639      	mov	r1, r7
 8018442:	f7e8 f8e9 	bl	8000618 <__aeabi_dmul>
 8018446:	4642      	mov	r2, r8
 8018448:	4604      	mov	r4, r0
 801844a:	460d      	mov	r5, r1
 801844c:	464b      	mov	r3, r9
 801844e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018452:	f7e7 ff2b 	bl	80002ac <__adddf3>
 8018456:	ec53 2b18 	vmov	r2, r3, d8
 801845a:	f7e8 f8dd 	bl	8000618 <__aeabi_dmul>
 801845e:	4622      	mov	r2, r4
 8018460:	462b      	mov	r3, r5
 8018462:	f7e7 ff23 	bl	80002ac <__adddf3>
 8018466:	4642      	mov	r2, r8
 8018468:	4682      	mov	sl, r0
 801846a:	468b      	mov	fp, r1
 801846c:	464b      	mov	r3, r9
 801846e:	4640      	mov	r0, r8
 8018470:	4649      	mov	r1, r9
 8018472:	f7e8 f8d1 	bl	8000618 <__aeabi_dmul>
 8018476:	4b6c      	ldr	r3, [pc, #432]	; (8018628 <__ieee754_pow+0x758>)
 8018478:	2200      	movs	r2, #0
 801847a:	4606      	mov	r6, r0
 801847c:	460f      	mov	r7, r1
 801847e:	f7e7 ff15 	bl	80002ac <__adddf3>
 8018482:	4652      	mov	r2, sl
 8018484:	465b      	mov	r3, fp
 8018486:	f7e7 ff11 	bl	80002ac <__adddf3>
 801848a:	9c04      	ldr	r4, [sp, #16]
 801848c:	460d      	mov	r5, r1
 801848e:	4622      	mov	r2, r4
 8018490:	460b      	mov	r3, r1
 8018492:	4640      	mov	r0, r8
 8018494:	4649      	mov	r1, r9
 8018496:	f7e8 f8bf 	bl	8000618 <__aeabi_dmul>
 801849a:	4b63      	ldr	r3, [pc, #396]	; (8018628 <__ieee754_pow+0x758>)
 801849c:	4680      	mov	r8, r0
 801849e:	4689      	mov	r9, r1
 80184a0:	2200      	movs	r2, #0
 80184a2:	4620      	mov	r0, r4
 80184a4:	4629      	mov	r1, r5
 80184a6:	f7e7 feff 	bl	80002a8 <__aeabi_dsub>
 80184aa:	4632      	mov	r2, r6
 80184ac:	463b      	mov	r3, r7
 80184ae:	f7e7 fefb 	bl	80002a8 <__aeabi_dsub>
 80184b2:	4602      	mov	r2, r0
 80184b4:	460b      	mov	r3, r1
 80184b6:	4650      	mov	r0, sl
 80184b8:	4659      	mov	r1, fp
 80184ba:	f7e7 fef5 	bl	80002a8 <__aeabi_dsub>
 80184be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80184c2:	f7e8 f8a9 	bl	8000618 <__aeabi_dmul>
 80184c6:	4622      	mov	r2, r4
 80184c8:	4606      	mov	r6, r0
 80184ca:	460f      	mov	r7, r1
 80184cc:	462b      	mov	r3, r5
 80184ce:	ec51 0b18 	vmov	r0, r1, d8
 80184d2:	f7e8 f8a1 	bl	8000618 <__aeabi_dmul>
 80184d6:	4602      	mov	r2, r0
 80184d8:	460b      	mov	r3, r1
 80184da:	4630      	mov	r0, r6
 80184dc:	4639      	mov	r1, r7
 80184de:	f7e7 fee5 	bl	80002ac <__adddf3>
 80184e2:	4606      	mov	r6, r0
 80184e4:	460f      	mov	r7, r1
 80184e6:	4602      	mov	r2, r0
 80184e8:	460b      	mov	r3, r1
 80184ea:	4640      	mov	r0, r8
 80184ec:	4649      	mov	r1, r9
 80184ee:	f7e7 fedd 	bl	80002ac <__adddf3>
 80184f2:	9c04      	ldr	r4, [sp, #16]
 80184f4:	a33e      	add	r3, pc, #248	; (adr r3, 80185f0 <__ieee754_pow+0x720>)
 80184f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fa:	4620      	mov	r0, r4
 80184fc:	460d      	mov	r5, r1
 80184fe:	f7e8 f88b 	bl	8000618 <__aeabi_dmul>
 8018502:	4642      	mov	r2, r8
 8018504:	ec41 0b18 	vmov	d8, r0, r1
 8018508:	464b      	mov	r3, r9
 801850a:	4620      	mov	r0, r4
 801850c:	4629      	mov	r1, r5
 801850e:	f7e7 fecb 	bl	80002a8 <__aeabi_dsub>
 8018512:	4602      	mov	r2, r0
 8018514:	460b      	mov	r3, r1
 8018516:	4630      	mov	r0, r6
 8018518:	4639      	mov	r1, r7
 801851a:	f7e7 fec5 	bl	80002a8 <__aeabi_dsub>
 801851e:	a336      	add	r3, pc, #216	; (adr r3, 80185f8 <__ieee754_pow+0x728>)
 8018520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018524:	f7e8 f878 	bl	8000618 <__aeabi_dmul>
 8018528:	a335      	add	r3, pc, #212	; (adr r3, 8018600 <__ieee754_pow+0x730>)
 801852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801852e:	4606      	mov	r6, r0
 8018530:	460f      	mov	r7, r1
 8018532:	4620      	mov	r0, r4
 8018534:	4629      	mov	r1, r5
 8018536:	f7e8 f86f 	bl	8000618 <__aeabi_dmul>
 801853a:	4602      	mov	r2, r0
 801853c:	460b      	mov	r3, r1
 801853e:	4630      	mov	r0, r6
 8018540:	4639      	mov	r1, r7
 8018542:	f7e7 feb3 	bl	80002ac <__adddf3>
 8018546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018548:	4b38      	ldr	r3, [pc, #224]	; (801862c <__ieee754_pow+0x75c>)
 801854a:	4413      	add	r3, r2
 801854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018550:	f7e7 feac 	bl	80002ac <__adddf3>
 8018554:	4682      	mov	sl, r0
 8018556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018558:	468b      	mov	fp, r1
 801855a:	f7e7 fff3 	bl	8000544 <__aeabi_i2d>
 801855e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018560:	4b33      	ldr	r3, [pc, #204]	; (8018630 <__ieee754_pow+0x760>)
 8018562:	4413      	add	r3, r2
 8018564:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018568:	4606      	mov	r6, r0
 801856a:	460f      	mov	r7, r1
 801856c:	4652      	mov	r2, sl
 801856e:	465b      	mov	r3, fp
 8018570:	ec51 0b18 	vmov	r0, r1, d8
 8018574:	f7e7 fe9a 	bl	80002ac <__adddf3>
 8018578:	4642      	mov	r2, r8
 801857a:	464b      	mov	r3, r9
 801857c:	f7e7 fe96 	bl	80002ac <__adddf3>
 8018580:	4632      	mov	r2, r6
 8018582:	463b      	mov	r3, r7
 8018584:	f7e7 fe92 	bl	80002ac <__adddf3>
 8018588:	9c04      	ldr	r4, [sp, #16]
 801858a:	4632      	mov	r2, r6
 801858c:	463b      	mov	r3, r7
 801858e:	4620      	mov	r0, r4
 8018590:	460d      	mov	r5, r1
 8018592:	f7e7 fe89 	bl	80002a8 <__aeabi_dsub>
 8018596:	4642      	mov	r2, r8
 8018598:	464b      	mov	r3, r9
 801859a:	f7e7 fe85 	bl	80002a8 <__aeabi_dsub>
 801859e:	ec53 2b18 	vmov	r2, r3, d8
 80185a2:	f7e7 fe81 	bl	80002a8 <__aeabi_dsub>
 80185a6:	4602      	mov	r2, r0
 80185a8:	460b      	mov	r3, r1
 80185aa:	4650      	mov	r0, sl
 80185ac:	4659      	mov	r1, fp
 80185ae:	e606      	b.n	80181be <__ieee754_pow+0x2ee>
 80185b0:	2401      	movs	r4, #1
 80185b2:	e6a0      	b.n	80182f6 <__ieee754_pow+0x426>
 80185b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018608 <__ieee754_pow+0x738>
 80185b8:	e60d      	b.n	80181d6 <__ieee754_pow+0x306>
 80185ba:	bf00      	nop
 80185bc:	f3af 8000 	nop.w
 80185c0:	4a454eef 	.word	0x4a454eef
 80185c4:	3fca7e28 	.word	0x3fca7e28
 80185c8:	93c9db65 	.word	0x93c9db65
 80185cc:	3fcd864a 	.word	0x3fcd864a
 80185d0:	a91d4101 	.word	0xa91d4101
 80185d4:	3fd17460 	.word	0x3fd17460
 80185d8:	518f264d 	.word	0x518f264d
 80185dc:	3fd55555 	.word	0x3fd55555
 80185e0:	db6fabff 	.word	0xdb6fabff
 80185e4:	3fdb6db6 	.word	0x3fdb6db6
 80185e8:	33333303 	.word	0x33333303
 80185ec:	3fe33333 	.word	0x3fe33333
 80185f0:	e0000000 	.word	0xe0000000
 80185f4:	3feec709 	.word	0x3feec709
 80185f8:	dc3a03fd 	.word	0xdc3a03fd
 80185fc:	3feec709 	.word	0x3feec709
 8018600:	145b01f5 	.word	0x145b01f5
 8018604:	be3e2fe0 	.word	0xbe3e2fe0
 8018608:	00000000 	.word	0x00000000
 801860c:	3ff00000 	.word	0x3ff00000
 8018610:	7ff00000 	.word	0x7ff00000
 8018614:	43400000 	.word	0x43400000
 8018618:	0003988e 	.word	0x0003988e
 801861c:	000bb679 	.word	0x000bb679
 8018620:	0801c510 	.word	0x0801c510
 8018624:	3ff00000 	.word	0x3ff00000
 8018628:	40080000 	.word	0x40080000
 801862c:	0801c530 	.word	0x0801c530
 8018630:	0801c520 	.word	0x0801c520
 8018634:	a3b5      	add	r3, pc, #724	; (adr r3, 801890c <__ieee754_pow+0xa3c>)
 8018636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801863a:	4640      	mov	r0, r8
 801863c:	4649      	mov	r1, r9
 801863e:	f7e7 fe35 	bl	80002ac <__adddf3>
 8018642:	4622      	mov	r2, r4
 8018644:	ec41 0b1a 	vmov	d10, r0, r1
 8018648:	462b      	mov	r3, r5
 801864a:	4630      	mov	r0, r6
 801864c:	4639      	mov	r1, r7
 801864e:	f7e7 fe2b 	bl	80002a8 <__aeabi_dsub>
 8018652:	4602      	mov	r2, r0
 8018654:	460b      	mov	r3, r1
 8018656:	ec51 0b1a 	vmov	r0, r1, d10
 801865a:	f7e8 fa6d 	bl	8000b38 <__aeabi_dcmpgt>
 801865e:	2800      	cmp	r0, #0
 8018660:	f47f adf8 	bne.w	8018254 <__ieee754_pow+0x384>
 8018664:	4aa4      	ldr	r2, [pc, #656]	; (80188f8 <__ieee754_pow+0xa28>)
 8018666:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801866a:	4293      	cmp	r3, r2
 801866c:	f340 810b 	ble.w	8018886 <__ieee754_pow+0x9b6>
 8018670:	151b      	asrs	r3, r3, #20
 8018672:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018676:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801867a:	fa4a f303 	asr.w	r3, sl, r3
 801867e:	445b      	add	r3, fp
 8018680:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018684:	4e9d      	ldr	r6, [pc, #628]	; (80188fc <__ieee754_pow+0xa2c>)
 8018686:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801868a:	4116      	asrs	r6, r2
 801868c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018690:	2000      	movs	r0, #0
 8018692:	ea23 0106 	bic.w	r1, r3, r6
 8018696:	f1c2 0214 	rsb	r2, r2, #20
 801869a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801869e:	fa4a fa02 	asr.w	sl, sl, r2
 80186a2:	f1bb 0f00 	cmp.w	fp, #0
 80186a6:	4602      	mov	r2, r0
 80186a8:	460b      	mov	r3, r1
 80186aa:	4620      	mov	r0, r4
 80186ac:	4629      	mov	r1, r5
 80186ae:	bfb8      	it	lt
 80186b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80186b4:	f7e7 fdf8 	bl	80002a8 <__aeabi_dsub>
 80186b8:	ec41 0b19 	vmov	d9, r0, r1
 80186bc:	4642      	mov	r2, r8
 80186be:	464b      	mov	r3, r9
 80186c0:	ec51 0b19 	vmov	r0, r1, d9
 80186c4:	f7e7 fdf2 	bl	80002ac <__adddf3>
 80186c8:	2400      	movs	r4, #0
 80186ca:	a379      	add	r3, pc, #484	; (adr r3, 80188b0 <__ieee754_pow+0x9e0>)
 80186cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d0:	4620      	mov	r0, r4
 80186d2:	460d      	mov	r5, r1
 80186d4:	f7e7 ffa0 	bl	8000618 <__aeabi_dmul>
 80186d8:	ec53 2b19 	vmov	r2, r3, d9
 80186dc:	4606      	mov	r6, r0
 80186de:	460f      	mov	r7, r1
 80186e0:	4620      	mov	r0, r4
 80186e2:	4629      	mov	r1, r5
 80186e4:	f7e7 fde0 	bl	80002a8 <__aeabi_dsub>
 80186e8:	4602      	mov	r2, r0
 80186ea:	460b      	mov	r3, r1
 80186ec:	4640      	mov	r0, r8
 80186ee:	4649      	mov	r1, r9
 80186f0:	f7e7 fdda 	bl	80002a8 <__aeabi_dsub>
 80186f4:	a370      	add	r3, pc, #448	; (adr r3, 80188b8 <__ieee754_pow+0x9e8>)
 80186f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fa:	f7e7 ff8d 	bl	8000618 <__aeabi_dmul>
 80186fe:	a370      	add	r3, pc, #448	; (adr r3, 80188c0 <__ieee754_pow+0x9f0>)
 8018700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018704:	4680      	mov	r8, r0
 8018706:	4689      	mov	r9, r1
 8018708:	4620      	mov	r0, r4
 801870a:	4629      	mov	r1, r5
 801870c:	f7e7 ff84 	bl	8000618 <__aeabi_dmul>
 8018710:	4602      	mov	r2, r0
 8018712:	460b      	mov	r3, r1
 8018714:	4640      	mov	r0, r8
 8018716:	4649      	mov	r1, r9
 8018718:	f7e7 fdc8 	bl	80002ac <__adddf3>
 801871c:	4604      	mov	r4, r0
 801871e:	460d      	mov	r5, r1
 8018720:	4602      	mov	r2, r0
 8018722:	460b      	mov	r3, r1
 8018724:	4630      	mov	r0, r6
 8018726:	4639      	mov	r1, r7
 8018728:	f7e7 fdc0 	bl	80002ac <__adddf3>
 801872c:	4632      	mov	r2, r6
 801872e:	463b      	mov	r3, r7
 8018730:	4680      	mov	r8, r0
 8018732:	4689      	mov	r9, r1
 8018734:	f7e7 fdb8 	bl	80002a8 <__aeabi_dsub>
 8018738:	4602      	mov	r2, r0
 801873a:	460b      	mov	r3, r1
 801873c:	4620      	mov	r0, r4
 801873e:	4629      	mov	r1, r5
 8018740:	f7e7 fdb2 	bl	80002a8 <__aeabi_dsub>
 8018744:	4642      	mov	r2, r8
 8018746:	4606      	mov	r6, r0
 8018748:	460f      	mov	r7, r1
 801874a:	464b      	mov	r3, r9
 801874c:	4640      	mov	r0, r8
 801874e:	4649      	mov	r1, r9
 8018750:	f7e7 ff62 	bl	8000618 <__aeabi_dmul>
 8018754:	a35c      	add	r3, pc, #368	; (adr r3, 80188c8 <__ieee754_pow+0x9f8>)
 8018756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875a:	4604      	mov	r4, r0
 801875c:	460d      	mov	r5, r1
 801875e:	f7e7 ff5b 	bl	8000618 <__aeabi_dmul>
 8018762:	a35b      	add	r3, pc, #364	; (adr r3, 80188d0 <__ieee754_pow+0xa00>)
 8018764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018768:	f7e7 fd9e 	bl	80002a8 <__aeabi_dsub>
 801876c:	4622      	mov	r2, r4
 801876e:	462b      	mov	r3, r5
 8018770:	f7e7 ff52 	bl	8000618 <__aeabi_dmul>
 8018774:	a358      	add	r3, pc, #352	; (adr r3, 80188d8 <__ieee754_pow+0xa08>)
 8018776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877a:	f7e7 fd97 	bl	80002ac <__adddf3>
 801877e:	4622      	mov	r2, r4
 8018780:	462b      	mov	r3, r5
 8018782:	f7e7 ff49 	bl	8000618 <__aeabi_dmul>
 8018786:	a356      	add	r3, pc, #344	; (adr r3, 80188e0 <__ieee754_pow+0xa10>)
 8018788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801878c:	f7e7 fd8c 	bl	80002a8 <__aeabi_dsub>
 8018790:	4622      	mov	r2, r4
 8018792:	462b      	mov	r3, r5
 8018794:	f7e7 ff40 	bl	8000618 <__aeabi_dmul>
 8018798:	a353      	add	r3, pc, #332	; (adr r3, 80188e8 <__ieee754_pow+0xa18>)
 801879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879e:	f7e7 fd85 	bl	80002ac <__adddf3>
 80187a2:	4622      	mov	r2, r4
 80187a4:	462b      	mov	r3, r5
 80187a6:	f7e7 ff37 	bl	8000618 <__aeabi_dmul>
 80187aa:	4602      	mov	r2, r0
 80187ac:	460b      	mov	r3, r1
 80187ae:	4640      	mov	r0, r8
 80187b0:	4649      	mov	r1, r9
 80187b2:	f7e7 fd79 	bl	80002a8 <__aeabi_dsub>
 80187b6:	4604      	mov	r4, r0
 80187b8:	460d      	mov	r5, r1
 80187ba:	4602      	mov	r2, r0
 80187bc:	460b      	mov	r3, r1
 80187be:	4640      	mov	r0, r8
 80187c0:	4649      	mov	r1, r9
 80187c2:	f7e7 ff29 	bl	8000618 <__aeabi_dmul>
 80187c6:	2200      	movs	r2, #0
 80187c8:	ec41 0b19 	vmov	d9, r0, r1
 80187cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80187d0:	4620      	mov	r0, r4
 80187d2:	4629      	mov	r1, r5
 80187d4:	f7e7 fd68 	bl	80002a8 <__aeabi_dsub>
 80187d8:	4602      	mov	r2, r0
 80187da:	460b      	mov	r3, r1
 80187dc:	ec51 0b19 	vmov	r0, r1, d9
 80187e0:	f7e8 f844 	bl	800086c <__aeabi_ddiv>
 80187e4:	4632      	mov	r2, r6
 80187e6:	4604      	mov	r4, r0
 80187e8:	460d      	mov	r5, r1
 80187ea:	463b      	mov	r3, r7
 80187ec:	4640      	mov	r0, r8
 80187ee:	4649      	mov	r1, r9
 80187f0:	f7e7 ff12 	bl	8000618 <__aeabi_dmul>
 80187f4:	4632      	mov	r2, r6
 80187f6:	463b      	mov	r3, r7
 80187f8:	f7e7 fd58 	bl	80002ac <__adddf3>
 80187fc:	4602      	mov	r2, r0
 80187fe:	460b      	mov	r3, r1
 8018800:	4620      	mov	r0, r4
 8018802:	4629      	mov	r1, r5
 8018804:	f7e7 fd50 	bl	80002a8 <__aeabi_dsub>
 8018808:	4642      	mov	r2, r8
 801880a:	464b      	mov	r3, r9
 801880c:	f7e7 fd4c 	bl	80002a8 <__aeabi_dsub>
 8018810:	460b      	mov	r3, r1
 8018812:	4602      	mov	r2, r0
 8018814:	493a      	ldr	r1, [pc, #232]	; (8018900 <__ieee754_pow+0xa30>)
 8018816:	2000      	movs	r0, #0
 8018818:	f7e7 fd46 	bl	80002a8 <__aeabi_dsub>
 801881c:	e9cd 0100 	strd	r0, r1, [sp]
 8018820:	9b01      	ldr	r3, [sp, #4]
 8018822:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801882a:	da2f      	bge.n	801888c <__ieee754_pow+0x9bc>
 801882c:	4650      	mov	r0, sl
 801882e:	ed9d 0b00 	vldr	d0, [sp]
 8018832:	f000 f9cd 	bl	8018bd0 <scalbn>
 8018836:	ec51 0b10 	vmov	r0, r1, d0
 801883a:	ec53 2b18 	vmov	r2, r3, d8
 801883e:	f7ff bbe0 	b.w	8018002 <__ieee754_pow+0x132>
 8018842:	4b30      	ldr	r3, [pc, #192]	; (8018904 <__ieee754_pow+0xa34>)
 8018844:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018848:	429e      	cmp	r6, r3
 801884a:	f77f af0b 	ble.w	8018664 <__ieee754_pow+0x794>
 801884e:	4b2e      	ldr	r3, [pc, #184]	; (8018908 <__ieee754_pow+0xa38>)
 8018850:	440b      	add	r3, r1
 8018852:	4303      	orrs	r3, r0
 8018854:	d00b      	beq.n	801886e <__ieee754_pow+0x99e>
 8018856:	a326      	add	r3, pc, #152	; (adr r3, 80188f0 <__ieee754_pow+0xa20>)
 8018858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801885c:	ec51 0b18 	vmov	r0, r1, d8
 8018860:	f7e7 feda 	bl	8000618 <__aeabi_dmul>
 8018864:	a322      	add	r3, pc, #136	; (adr r3, 80188f0 <__ieee754_pow+0xa20>)
 8018866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886a:	f7ff bbca 	b.w	8018002 <__ieee754_pow+0x132>
 801886e:	4622      	mov	r2, r4
 8018870:	462b      	mov	r3, r5
 8018872:	f7e7 fd19 	bl	80002a8 <__aeabi_dsub>
 8018876:	4642      	mov	r2, r8
 8018878:	464b      	mov	r3, r9
 801887a:	f7e8 f953 	bl	8000b24 <__aeabi_dcmpge>
 801887e:	2800      	cmp	r0, #0
 8018880:	f43f aef0 	beq.w	8018664 <__ieee754_pow+0x794>
 8018884:	e7e7      	b.n	8018856 <__ieee754_pow+0x986>
 8018886:	f04f 0a00 	mov.w	sl, #0
 801888a:	e717      	b.n	80186bc <__ieee754_pow+0x7ec>
 801888c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018890:	4619      	mov	r1, r3
 8018892:	e7d2      	b.n	801883a <__ieee754_pow+0x96a>
 8018894:	491a      	ldr	r1, [pc, #104]	; (8018900 <__ieee754_pow+0xa30>)
 8018896:	2000      	movs	r0, #0
 8018898:	f7ff bb9e 	b.w	8017fd8 <__ieee754_pow+0x108>
 801889c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80188a0:	f7ff bb9a 	b.w	8017fd8 <__ieee754_pow+0x108>
 80188a4:	9000      	str	r0, [sp, #0]
 80188a6:	f7ff bb76 	b.w	8017f96 <__ieee754_pow+0xc6>
 80188aa:	2100      	movs	r1, #0
 80188ac:	f7ff bb60 	b.w	8017f70 <__ieee754_pow+0xa0>
 80188b0:	00000000 	.word	0x00000000
 80188b4:	3fe62e43 	.word	0x3fe62e43
 80188b8:	fefa39ef 	.word	0xfefa39ef
 80188bc:	3fe62e42 	.word	0x3fe62e42
 80188c0:	0ca86c39 	.word	0x0ca86c39
 80188c4:	be205c61 	.word	0xbe205c61
 80188c8:	72bea4d0 	.word	0x72bea4d0
 80188cc:	3e663769 	.word	0x3e663769
 80188d0:	c5d26bf1 	.word	0xc5d26bf1
 80188d4:	3ebbbd41 	.word	0x3ebbbd41
 80188d8:	af25de2c 	.word	0xaf25de2c
 80188dc:	3f11566a 	.word	0x3f11566a
 80188e0:	16bebd93 	.word	0x16bebd93
 80188e4:	3f66c16c 	.word	0x3f66c16c
 80188e8:	5555553e 	.word	0x5555553e
 80188ec:	3fc55555 	.word	0x3fc55555
 80188f0:	c2f8f359 	.word	0xc2f8f359
 80188f4:	01a56e1f 	.word	0x01a56e1f
 80188f8:	3fe00000 	.word	0x3fe00000
 80188fc:	000fffff 	.word	0x000fffff
 8018900:	3ff00000 	.word	0x3ff00000
 8018904:	4090cbff 	.word	0x4090cbff
 8018908:	3f6f3400 	.word	0x3f6f3400
 801890c:	652b82fe 	.word	0x652b82fe
 8018910:	3c971547 	.word	0x3c971547

08018914 <__ieee754_sqrt>:
 8018914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018918:	ec55 4b10 	vmov	r4, r5, d0
 801891c:	4e56      	ldr	r6, [pc, #344]	; (8018a78 <__ieee754_sqrt+0x164>)
 801891e:	43ae      	bics	r6, r5
 8018920:	ee10 0a10 	vmov	r0, s0
 8018924:	ee10 3a10 	vmov	r3, s0
 8018928:	4629      	mov	r1, r5
 801892a:	462a      	mov	r2, r5
 801892c:	d110      	bne.n	8018950 <__ieee754_sqrt+0x3c>
 801892e:	ee10 2a10 	vmov	r2, s0
 8018932:	462b      	mov	r3, r5
 8018934:	f7e7 fe70 	bl	8000618 <__aeabi_dmul>
 8018938:	4602      	mov	r2, r0
 801893a:	460b      	mov	r3, r1
 801893c:	4620      	mov	r0, r4
 801893e:	4629      	mov	r1, r5
 8018940:	f7e7 fcb4 	bl	80002ac <__adddf3>
 8018944:	4604      	mov	r4, r0
 8018946:	460d      	mov	r5, r1
 8018948:	ec45 4b10 	vmov	d0, r4, r5
 801894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018950:	2d00      	cmp	r5, #0
 8018952:	dc10      	bgt.n	8018976 <__ieee754_sqrt+0x62>
 8018954:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018958:	4330      	orrs	r0, r6
 801895a:	d0f5      	beq.n	8018948 <__ieee754_sqrt+0x34>
 801895c:	b15d      	cbz	r5, 8018976 <__ieee754_sqrt+0x62>
 801895e:	ee10 2a10 	vmov	r2, s0
 8018962:	462b      	mov	r3, r5
 8018964:	ee10 0a10 	vmov	r0, s0
 8018968:	f7e7 fc9e 	bl	80002a8 <__aeabi_dsub>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	f7e7 ff7c 	bl	800086c <__aeabi_ddiv>
 8018974:	e7e6      	b.n	8018944 <__ieee754_sqrt+0x30>
 8018976:	1509      	asrs	r1, r1, #20
 8018978:	d076      	beq.n	8018a68 <__ieee754_sqrt+0x154>
 801897a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801897e:	07ce      	lsls	r6, r1, #31
 8018980:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8018984:	bf5e      	ittt	pl
 8018986:	0fda      	lsrpl	r2, r3, #31
 8018988:	005b      	lslpl	r3, r3, #1
 801898a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801898e:	0fda      	lsrs	r2, r3, #31
 8018990:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8018994:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018998:	2000      	movs	r0, #0
 801899a:	106d      	asrs	r5, r5, #1
 801899c:	005b      	lsls	r3, r3, #1
 801899e:	f04f 0e16 	mov.w	lr, #22
 80189a2:	4684      	mov	ip, r0
 80189a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80189a8:	eb0c 0401 	add.w	r4, ip, r1
 80189ac:	4294      	cmp	r4, r2
 80189ae:	bfde      	ittt	le
 80189b0:	1b12      	suble	r2, r2, r4
 80189b2:	eb04 0c01 	addle.w	ip, r4, r1
 80189b6:	1840      	addle	r0, r0, r1
 80189b8:	0052      	lsls	r2, r2, #1
 80189ba:	f1be 0e01 	subs.w	lr, lr, #1
 80189be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80189c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80189c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80189ca:	d1ed      	bne.n	80189a8 <__ieee754_sqrt+0x94>
 80189cc:	4671      	mov	r1, lr
 80189ce:	2720      	movs	r7, #32
 80189d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80189d4:	4562      	cmp	r2, ip
 80189d6:	eb04 060e 	add.w	r6, r4, lr
 80189da:	dc02      	bgt.n	80189e2 <__ieee754_sqrt+0xce>
 80189dc:	d113      	bne.n	8018a06 <__ieee754_sqrt+0xf2>
 80189de:	429e      	cmp	r6, r3
 80189e0:	d811      	bhi.n	8018a06 <__ieee754_sqrt+0xf2>
 80189e2:	2e00      	cmp	r6, #0
 80189e4:	eb06 0e04 	add.w	lr, r6, r4
 80189e8:	da43      	bge.n	8018a72 <__ieee754_sqrt+0x15e>
 80189ea:	f1be 0f00 	cmp.w	lr, #0
 80189ee:	db40      	blt.n	8018a72 <__ieee754_sqrt+0x15e>
 80189f0:	f10c 0801 	add.w	r8, ip, #1
 80189f4:	eba2 020c 	sub.w	r2, r2, ip
 80189f8:	429e      	cmp	r6, r3
 80189fa:	bf88      	it	hi
 80189fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018a00:	1b9b      	subs	r3, r3, r6
 8018a02:	4421      	add	r1, r4
 8018a04:	46c4      	mov	ip, r8
 8018a06:	0052      	lsls	r2, r2, #1
 8018a08:	3f01      	subs	r7, #1
 8018a0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018a0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018a12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018a16:	d1dd      	bne.n	80189d4 <__ieee754_sqrt+0xc0>
 8018a18:	4313      	orrs	r3, r2
 8018a1a:	d006      	beq.n	8018a2a <__ieee754_sqrt+0x116>
 8018a1c:	1c4c      	adds	r4, r1, #1
 8018a1e:	bf13      	iteet	ne
 8018a20:	3101      	addne	r1, #1
 8018a22:	3001      	addeq	r0, #1
 8018a24:	4639      	moveq	r1, r7
 8018a26:	f021 0101 	bicne.w	r1, r1, #1
 8018a2a:	1043      	asrs	r3, r0, #1
 8018a2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018a30:	0849      	lsrs	r1, r1, #1
 8018a32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018a36:	07c2      	lsls	r2, r0, #31
 8018a38:	bf48      	it	mi
 8018a3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018a3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8018a42:	460c      	mov	r4, r1
 8018a44:	463d      	mov	r5, r7
 8018a46:	e77f      	b.n	8018948 <__ieee754_sqrt+0x34>
 8018a48:	0ada      	lsrs	r2, r3, #11
 8018a4a:	3815      	subs	r0, #21
 8018a4c:	055b      	lsls	r3, r3, #21
 8018a4e:	2a00      	cmp	r2, #0
 8018a50:	d0fa      	beq.n	8018a48 <__ieee754_sqrt+0x134>
 8018a52:	02d7      	lsls	r7, r2, #11
 8018a54:	d50a      	bpl.n	8018a6c <__ieee754_sqrt+0x158>
 8018a56:	f1c1 0420 	rsb	r4, r1, #32
 8018a5a:	fa23 f404 	lsr.w	r4, r3, r4
 8018a5e:	1e4d      	subs	r5, r1, #1
 8018a60:	408b      	lsls	r3, r1
 8018a62:	4322      	orrs	r2, r4
 8018a64:	1b41      	subs	r1, r0, r5
 8018a66:	e788      	b.n	801897a <__ieee754_sqrt+0x66>
 8018a68:	4608      	mov	r0, r1
 8018a6a:	e7f0      	b.n	8018a4e <__ieee754_sqrt+0x13a>
 8018a6c:	0052      	lsls	r2, r2, #1
 8018a6e:	3101      	adds	r1, #1
 8018a70:	e7ef      	b.n	8018a52 <__ieee754_sqrt+0x13e>
 8018a72:	46e0      	mov	r8, ip
 8018a74:	e7be      	b.n	80189f4 <__ieee754_sqrt+0xe0>
 8018a76:	bf00      	nop
 8018a78:	7ff00000 	.word	0x7ff00000

08018a7c <fabs>:
 8018a7c:	ec51 0b10 	vmov	r0, r1, d0
 8018a80:	ee10 2a10 	vmov	r2, s0
 8018a84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018a88:	ec43 2b10 	vmov	d0, r2, r3
 8018a8c:	4770      	bx	lr

08018a8e <finite>:
 8018a8e:	b082      	sub	sp, #8
 8018a90:	ed8d 0b00 	vstr	d0, [sp]
 8018a94:	9801      	ldr	r0, [sp, #4]
 8018a96:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018a9a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018a9e:	0fc0      	lsrs	r0, r0, #31
 8018aa0:	b002      	add	sp, #8
 8018aa2:	4770      	bx	lr
 8018aa4:	0000      	movs	r0, r0
	...

08018aa8 <nan>:
 8018aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018ab0 <nan+0x8>
 8018aac:	4770      	bx	lr
 8018aae:	bf00      	nop
 8018ab0:	00000000 	.word	0x00000000
 8018ab4:	7ff80000 	.word	0x7ff80000

08018ab8 <rint>:
 8018ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018aba:	ec51 0b10 	vmov	r0, r1, d0
 8018abe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018ac2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8018ac6:	2e13      	cmp	r6, #19
 8018ac8:	ee10 4a10 	vmov	r4, s0
 8018acc:	460b      	mov	r3, r1
 8018ace:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8018ad2:	dc58      	bgt.n	8018b86 <rint+0xce>
 8018ad4:	2e00      	cmp	r6, #0
 8018ad6:	da2b      	bge.n	8018b30 <rint+0x78>
 8018ad8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018adc:	4302      	orrs	r2, r0
 8018ade:	d023      	beq.n	8018b28 <rint+0x70>
 8018ae0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8018ae4:	4302      	orrs	r2, r0
 8018ae6:	4254      	negs	r4, r2
 8018ae8:	4314      	orrs	r4, r2
 8018aea:	0c4b      	lsrs	r3, r1, #17
 8018aec:	0b24      	lsrs	r4, r4, #12
 8018aee:	045b      	lsls	r3, r3, #17
 8018af0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8018af4:	ea44 0103 	orr.w	r1, r4, r3
 8018af8:	4b32      	ldr	r3, [pc, #200]	; (8018bc4 <rint+0x10c>)
 8018afa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018afe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8018b02:	4602      	mov	r2, r0
 8018b04:	460b      	mov	r3, r1
 8018b06:	4630      	mov	r0, r6
 8018b08:	4639      	mov	r1, r7
 8018b0a:	f7e7 fbcf 	bl	80002ac <__adddf3>
 8018b0e:	e9cd 0100 	strd	r0, r1, [sp]
 8018b12:	463b      	mov	r3, r7
 8018b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018b18:	4632      	mov	r2, r6
 8018b1a:	f7e7 fbc5 	bl	80002a8 <__aeabi_dsub>
 8018b1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018b22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8018b26:	4639      	mov	r1, r7
 8018b28:	ec41 0b10 	vmov	d0, r0, r1
 8018b2c:	b003      	add	sp, #12
 8018b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b30:	4a25      	ldr	r2, [pc, #148]	; (8018bc8 <rint+0x110>)
 8018b32:	4132      	asrs	r2, r6
 8018b34:	ea01 0702 	and.w	r7, r1, r2
 8018b38:	4307      	orrs	r7, r0
 8018b3a:	d0f5      	beq.n	8018b28 <rint+0x70>
 8018b3c:	0851      	lsrs	r1, r2, #1
 8018b3e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8018b42:	4314      	orrs	r4, r2
 8018b44:	d00c      	beq.n	8018b60 <rint+0xa8>
 8018b46:	ea23 0201 	bic.w	r2, r3, r1
 8018b4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8018b4e:	2e13      	cmp	r6, #19
 8018b50:	fa43 f606 	asr.w	r6, r3, r6
 8018b54:	bf0c      	ite	eq
 8018b56:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8018b5a:	2400      	movne	r4, #0
 8018b5c:	ea42 0306 	orr.w	r3, r2, r6
 8018b60:	4918      	ldr	r1, [pc, #96]	; (8018bc4 <rint+0x10c>)
 8018b62:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8018b66:	4622      	mov	r2, r4
 8018b68:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	4629      	mov	r1, r5
 8018b70:	f7e7 fb9c 	bl	80002ac <__adddf3>
 8018b74:	e9cd 0100 	strd	r0, r1, [sp]
 8018b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018b7c:	4622      	mov	r2, r4
 8018b7e:	462b      	mov	r3, r5
 8018b80:	f7e7 fb92 	bl	80002a8 <__aeabi_dsub>
 8018b84:	e7d0      	b.n	8018b28 <rint+0x70>
 8018b86:	2e33      	cmp	r6, #51	; 0x33
 8018b88:	dd07      	ble.n	8018b9a <rint+0xe2>
 8018b8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018b8e:	d1cb      	bne.n	8018b28 <rint+0x70>
 8018b90:	ee10 2a10 	vmov	r2, s0
 8018b94:	f7e7 fb8a 	bl	80002ac <__adddf3>
 8018b98:	e7c6      	b.n	8018b28 <rint+0x70>
 8018b9a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8018b9e:	f04f 36ff 	mov.w	r6, #4294967295
 8018ba2:	40d6      	lsrs	r6, r2
 8018ba4:	4230      	tst	r0, r6
 8018ba6:	d0bf      	beq.n	8018b28 <rint+0x70>
 8018ba8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8018bac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8018bb0:	bf1f      	itttt	ne
 8018bb2:	ea24 0101 	bicne.w	r1, r4, r1
 8018bb6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8018bba:	fa44 f202 	asrne.w	r2, r4, r2
 8018bbe:	ea41 0402 	orrne.w	r4, r1, r2
 8018bc2:	e7cd      	b.n	8018b60 <rint+0xa8>
 8018bc4:	0801c540 	.word	0x0801c540
 8018bc8:	000fffff 	.word	0x000fffff
 8018bcc:	00000000 	.word	0x00000000

08018bd0 <scalbn>:
 8018bd0:	b570      	push	{r4, r5, r6, lr}
 8018bd2:	ec55 4b10 	vmov	r4, r5, d0
 8018bd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018bda:	4606      	mov	r6, r0
 8018bdc:	462b      	mov	r3, r5
 8018bde:	b99a      	cbnz	r2, 8018c08 <scalbn+0x38>
 8018be0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018be4:	4323      	orrs	r3, r4
 8018be6:	d036      	beq.n	8018c56 <scalbn+0x86>
 8018be8:	4b39      	ldr	r3, [pc, #228]	; (8018cd0 <scalbn+0x100>)
 8018bea:	4629      	mov	r1, r5
 8018bec:	ee10 0a10 	vmov	r0, s0
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	f7e7 fd11 	bl	8000618 <__aeabi_dmul>
 8018bf6:	4b37      	ldr	r3, [pc, #220]	; (8018cd4 <scalbn+0x104>)
 8018bf8:	429e      	cmp	r6, r3
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	460d      	mov	r5, r1
 8018bfe:	da10      	bge.n	8018c22 <scalbn+0x52>
 8018c00:	a32b      	add	r3, pc, #172	; (adr r3, 8018cb0 <scalbn+0xe0>)
 8018c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c06:	e03a      	b.n	8018c7e <scalbn+0xae>
 8018c08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018c0c:	428a      	cmp	r2, r1
 8018c0e:	d10c      	bne.n	8018c2a <scalbn+0x5a>
 8018c10:	ee10 2a10 	vmov	r2, s0
 8018c14:	4620      	mov	r0, r4
 8018c16:	4629      	mov	r1, r5
 8018c18:	f7e7 fb48 	bl	80002ac <__adddf3>
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	460d      	mov	r5, r1
 8018c20:	e019      	b.n	8018c56 <scalbn+0x86>
 8018c22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018c26:	460b      	mov	r3, r1
 8018c28:	3a36      	subs	r2, #54	; 0x36
 8018c2a:	4432      	add	r2, r6
 8018c2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018c30:	428a      	cmp	r2, r1
 8018c32:	dd08      	ble.n	8018c46 <scalbn+0x76>
 8018c34:	2d00      	cmp	r5, #0
 8018c36:	a120      	add	r1, pc, #128	; (adr r1, 8018cb8 <scalbn+0xe8>)
 8018c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c3c:	da1c      	bge.n	8018c78 <scalbn+0xa8>
 8018c3e:	a120      	add	r1, pc, #128	; (adr r1, 8018cc0 <scalbn+0xf0>)
 8018c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c44:	e018      	b.n	8018c78 <scalbn+0xa8>
 8018c46:	2a00      	cmp	r2, #0
 8018c48:	dd08      	ble.n	8018c5c <scalbn+0x8c>
 8018c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018c4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018c52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018c56:	ec45 4b10 	vmov	d0, r4, r5
 8018c5a:	bd70      	pop	{r4, r5, r6, pc}
 8018c5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018c60:	da19      	bge.n	8018c96 <scalbn+0xc6>
 8018c62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018c66:	429e      	cmp	r6, r3
 8018c68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018c6c:	dd0a      	ble.n	8018c84 <scalbn+0xb4>
 8018c6e:	a112      	add	r1, pc, #72	; (adr r1, 8018cb8 <scalbn+0xe8>)
 8018c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d1e2      	bne.n	8018c3e <scalbn+0x6e>
 8018c78:	a30f      	add	r3, pc, #60	; (adr r3, 8018cb8 <scalbn+0xe8>)
 8018c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c7e:	f7e7 fccb 	bl	8000618 <__aeabi_dmul>
 8018c82:	e7cb      	b.n	8018c1c <scalbn+0x4c>
 8018c84:	a10a      	add	r1, pc, #40	; (adr r1, 8018cb0 <scalbn+0xe0>)
 8018c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d0b8      	beq.n	8018c00 <scalbn+0x30>
 8018c8e:	a10e      	add	r1, pc, #56	; (adr r1, 8018cc8 <scalbn+0xf8>)
 8018c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c94:	e7b4      	b.n	8018c00 <scalbn+0x30>
 8018c96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018c9a:	3236      	adds	r2, #54	; 0x36
 8018c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018ca0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	4b0c      	ldr	r3, [pc, #48]	; (8018cd8 <scalbn+0x108>)
 8018ca8:	2200      	movs	r2, #0
 8018caa:	e7e8      	b.n	8018c7e <scalbn+0xae>
 8018cac:	f3af 8000 	nop.w
 8018cb0:	c2f8f359 	.word	0xc2f8f359
 8018cb4:	01a56e1f 	.word	0x01a56e1f
 8018cb8:	8800759c 	.word	0x8800759c
 8018cbc:	7e37e43c 	.word	0x7e37e43c
 8018cc0:	8800759c 	.word	0x8800759c
 8018cc4:	fe37e43c 	.word	0xfe37e43c
 8018cc8:	c2f8f359 	.word	0xc2f8f359
 8018ccc:	81a56e1f 	.word	0x81a56e1f
 8018cd0:	43500000 	.word	0x43500000
 8018cd4:	ffff3cb0 	.word	0xffff3cb0
 8018cd8:	3c900000 	.word	0x3c900000

08018cdc <_init>:
 8018cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cde:	bf00      	nop
 8018ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ce2:	bc08      	pop	{r3}
 8018ce4:	469e      	mov	lr, r3
 8018ce6:	4770      	bx	lr

08018ce8 <_fini>:
 8018ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cea:	bf00      	nop
 8018cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cee:	bc08      	pop	{r3}
 8018cf0:	469e      	mov	lr, r3
 8018cf2:	4770      	bx	lr
