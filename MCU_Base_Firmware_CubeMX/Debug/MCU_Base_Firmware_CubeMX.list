
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004568  08020790  08020790  00030790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024cf8  08024cf8  00040258  2**0
                  CONTENTS
  4 .ARM          00000008  08024cf8  08024cf8  00034cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024d00  08024d00  00040258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024d00  08024d00  00034d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024d04  08024d04  00034d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08024d08  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080b4  20000258  08024f60  00040258  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000830c  08024f60  0004830c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007f310  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009f1b  00000000  00000000  000bf598  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026c0  00000000  00000000  000c94b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002528  00000000  00000000  000cbb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a956  00000000  00000000  000ce0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003dc57  00000000  00000000  001089f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4dd7  00000000  00000000  0014664d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023b424  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0c4  00000000  00000000  0023b4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020778 	.word	0x08020778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08020778 	.word	0x08020778

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e05d      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	if (!s2)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <cJSON_strcasecmp+0x42>
		return 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e058      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <cJSON_strcasecmp+0x36>
			return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e052      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	f01a fac0 	bl	801b574 <__locale_ctype_ptr>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d103      	bne.n	800100e <cJSON_strcasecmp+0x66>
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f103 0420 	add.w	r4, r3, #32
 800100c:	e000      	b.n	8001010 <cJSON_strcasecmp+0x68>
 800100e:	7bfc      	ldrb	r4, [r7, #15]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	f01a faad 	bl	801b574 <__locale_ctype_ptr>
 800101a:	4602      	mov	r2, r0
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	3301      	adds	r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d102      	bne.n	8001032 <cJSON_strcasecmp+0x8a>
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	3320      	adds	r3, #32
 8001030:	e000      	b.n	8001034 <cJSON_strcasecmp+0x8c>
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	429c      	cmp	r4, r3
 8001036:	d0cc      	beq.n	8000fd2 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	f01a fa99 	bl	801b574 <__locale_ctype_ptr>
 8001042:	4602      	mov	r2, r0
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	3301      	adds	r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d103      	bne.n	800105c <cJSON_strcasecmp+0xb4>
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	f103 0420 	add.w	r4, r3, #32
 800105a:	e000      	b.n	800105e <cJSON_strcasecmp+0xb6>
 800105c:	7b7c      	ldrb	r4, [r7, #13]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	733b      	strb	r3, [r7, #12]
 8001064:	f01a fa86 	bl	801b574 <__locale_ctype_ptr>
 8001068:	4602      	mov	r2, r0
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <cJSON_strcasecmp+0xd8>
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	3320      	adds	r3, #32
 800107e:	e000      	b.n	8001082 <cJSON_strcasecmp+0xda>
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	1ae3      	subs	r3, r4, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <cJSON_New_Item+0x2c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	4798      	blx	r3
 800109a:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <cJSON_New_Item+0x20>
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f01a fac7 	bl	801b63a <memset>
	return node;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80010c4:	e037      	b.n	8001136 <cJSON_Delete+0x7a>
	{
		next=c->next;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <cJSON_Delete+0x2e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <cJSON_Delete+0x2e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffe9 	bl	80010bc <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <cJSON_Delete+0x4e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <cJSON_Delete+0x4e>
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <cJSON_Delete+0x88>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6912      	ldr	r2, [r2, #16]
 8001106:	4610      	mov	r0, r2
 8001108:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <cJSON_Delete+0x6e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <cJSON_Delete+0x6e>
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <cJSON_Delete+0x88>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6a12      	ldr	r2, [r2, #32]
 8001126:	4610      	mov	r0, r2
 8001128:	4798      	blx	r3
		cJSON_free(c);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <cJSON_Delete+0x88>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
		c=next;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	607b      	str	r3, [r7, #4]
	while (c)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1c4      	bne.n	80010c6 <cJSON_Delete+0xa>
	}
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000004 	.word	0x20000004

08001148 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	f04f 0400 	mov.w	r4, #0
 800115a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	4c83      	ldr	r4, [pc, #524]	; (8001370 <parse_number+0x228>)
 8001164:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	f04f 0400 	mov.w	r4, #0
 8001170:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b2d      	cmp	r3, #45	; 0x2d
 8001182:	d107      	bne.n	8001194 <parse_number+0x4c>
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	4c7a      	ldr	r4, [pc, #488]	; (8001374 <parse_number+0x22c>)
 800118a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b30      	cmp	r3, #48	; 0x30
 800119a:	d102      	bne.n	80011a2 <parse_number+0x5a>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b30      	cmp	r3, #48	; 0x30
 80011a8:	d928      	bls.n	80011fc <parse_number+0xb4>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b39      	cmp	r3, #57	; 0x39
 80011b0:	d824      	bhi.n	80011fc <parse_number+0xb4>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <parse_number+0x230>)
 80011b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	4625      	mov	r5, r4
 80011c6:	461c      	mov	r4, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	603a      	str	r2, [r7, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3b30      	subs	r3, #48	; 0x30
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b6 	bl	8000544 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f864 	bl	80002ac <__adddf3>
 80011e4:	4603      	mov	r3, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b2f      	cmp	r3, #47	; 0x2f
 80011f2:	d903      	bls.n	80011fc <parse_number+0xb4>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b39      	cmp	r3, #57	; 0x39
 80011fa:	d9da      	bls.n	80011b2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b2e      	cmp	r3, #46	; 0x2e
 8001202:	d13c      	bne.n	800127e <parse_number+0x136>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d937      	bls.n	800127e <parse_number+0x136>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b39      	cmp	r3, #57	; 0x39
 8001216:	d832      	bhi.n	800127e <parse_number+0x136>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b55      	ldr	r3, [pc, #340]	; (8001378 <parse_number+0x230>)
 8001224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001228:	f7ff f9f6 	bl	8000618 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4625      	mov	r5, r4
 8001232:	461c      	mov	r4, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	603a      	str	r2, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b30      	subs	r3, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f980 	bl	8000544 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f82e 	bl	80002ac <__adddf3>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <parse_number+0x228>)
 800125e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001262:	f7ff f821 	bl	80002a8 <__aeabi_dsub>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d903      	bls.n	800127e <parse_number+0x136>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b39      	cmp	r3, #57	; 0x39
 800127c:	d9cf      	bls.n	800121e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b65      	cmp	r3, #101	; 0x65
 8001284:	d003      	beq.n	800128e <parse_number+0x146>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b45      	cmp	r3, #69	; 0x45
 800128c:	d12a      	bne.n	80012e4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b2b      	cmp	r3, #43	; 0x2b
 800129a:	d103      	bne.n	80012a4 <parse_number+0x15c>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	e017      	b.n	80012d4 <parse_number+0x18c>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b2d      	cmp	r3, #45	; 0x2d
 80012aa:	d113      	bne.n	80012d4 <parse_number+0x18c>
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80012b8:	e00c      	b.n	80012d4 <parse_number+0x18c>
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3b30      	subs	r3, #48	; 0x30
 80012d0:	440b      	add	r3, r1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2f      	cmp	r3, #47	; 0x2f
 80012da:	d903      	bls.n	80012e4 <parse_number+0x19c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b39      	cmp	r3, #57	; 0x39
 80012e2:	d9ea      	bls.n	80012ba <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 80012e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ec:	f7ff f994 	bl	8000618 <__aeabi_dmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	4625      	mov	r5, r4
 80012f6:	461c      	mov	r4, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f91f 	bl	8000544 <__aeabi_i2d>
 8001306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130a:	f7fe ffcf 	bl	80002ac <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b17 	vmov	d7, r2, r3
 8001316:	eeb0 1a47 	vmov.f32	s2, s14
 800131a:	eef0 1a67 	vmov.f32	s3, s15
 800131e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001368 <parse_number+0x220>
 8001322:	f01e f9cd 	bl	801f6c0 <pow>
 8001326:	ec53 2b10 	vmov	r2, r3, d0
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f973 	bl	8000618 <__aeabi_dmul>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	e9c7 3408 	strd	r3, r4, [r7, #32]
	
	item->valuedouble=n;
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001340:	e9c2 3406 	strd	r3, r4, [r2, #24]
	item->valueint=(int)n;
 8001344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001348:	f7ff fc16 	bl	8000b78 <__aeabi_d2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	60da      	str	r2, [r3, #12]
	return num;
 8001358:	683b      	ldr	r3, [r7, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40240000 	.word	0x40240000
 8001370:	3ff00000 	.word	0x3ff00000
 8001374:	bff00000 	.word	0xbff00000
 8001378:	40240000 	.word	0x40240000

0800137c <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2f      	cmp	r3, #47	; 0x2f
 800138e:	d90b      	bls.n	80013a8 <parse_hex4+0x2c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b39      	cmp	r3, #57	; 0x39
 8001396:	d807      	bhi.n	80013a8 <parse_hex4+0x2c>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	3b30      	subs	r3, #48	; 0x30
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e021      	b.n	80013ec <parse_hex4+0x70>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d90b      	bls.n	80013c8 <parse_hex4+0x4c>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b46      	cmp	r3, #70	; 0x46
 80013b6:	d807      	bhi.n	80013c8 <parse_hex4+0x4c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	3b37      	subs	r3, #55	; 0x37
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e011      	b.n	80013ec <parse_hex4+0x70>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b60      	cmp	r3, #96	; 0x60
 80013ce:	d90b      	bls.n	80013e8 <parse_hex4+0x6c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b66      	cmp	r3, #102	; 0x66
 80013d6:	d807      	bhi.n	80013e8 <parse_hex4+0x6c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b57      	subs	r3, #87	; 0x57
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e001      	b.n	80013ec <parse_hex4+0x70>
 80013e8:	2300      	movs	r3, #0
 80013ea:	e0a8      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b2f      	cmp	r3, #47	; 0x2f
 80013fe:	d90b      	bls.n	8001418 <parse_hex4+0x9c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b39      	cmp	r3, #57	; 0x39
 8001406:	d807      	bhi.n	8001418 <parse_hex4+0x9c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	3b30      	subs	r3, #48	; 0x30
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e021      	b.n	800145c <parse_hex4+0xe0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	d90b      	bls.n	8001438 <parse_hex4+0xbc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b46      	cmp	r3, #70	; 0x46
 8001426:	d807      	bhi.n	8001438 <parse_hex4+0xbc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	3b37      	subs	r3, #55	; 0x37
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e011      	b.n	800145c <parse_hex4+0xe0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d90b      	bls.n	8001458 <parse_hex4+0xdc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b66      	cmp	r3, #102	; 0x66
 8001446:	d807      	bhi.n	8001458 <parse_hex4+0xdc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b57      	subs	r3, #87	; 0x57
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e001      	b.n	800145c <parse_hex4+0xe0>
 8001458:	2300      	movs	r3, #0
 800145a:	e070      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b2f      	cmp	r3, #47	; 0x2f
 800146e:	d90b      	bls.n	8001488 <parse_hex4+0x10c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b39      	cmp	r3, #57	; 0x39
 8001476:	d807      	bhi.n	8001488 <parse_hex4+0x10c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	3b30      	subs	r3, #48	; 0x30
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e021      	b.n	80014cc <parse_hex4+0x150>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d90b      	bls.n	80014a8 <parse_hex4+0x12c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b46      	cmp	r3, #70	; 0x46
 8001496:	d807      	bhi.n	80014a8 <parse_hex4+0x12c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	3b37      	subs	r3, #55	; 0x37
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e011      	b.n	80014cc <parse_hex4+0x150>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b60      	cmp	r3, #96	; 0x60
 80014ae:	d90b      	bls.n	80014c8 <parse_hex4+0x14c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b66      	cmp	r3, #102	; 0x66
 80014b6:	d807      	bhi.n	80014c8 <parse_hex4+0x14c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3b57      	subs	r3, #87	; 0x57
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e001      	b.n	80014cc <parse_hex4+0x150>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e038      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b2f      	cmp	r3, #47	; 0x2f
 80014de:	d90b      	bls.n	80014f8 <parse_hex4+0x17c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b39      	cmp	r3, #57	; 0x39
 80014e6:	d807      	bhi.n	80014f8 <parse_hex4+0x17c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	3b30      	subs	r3, #48	; 0x30
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e021      	b.n	800153c <parse_hex4+0x1c0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d90b      	bls.n	8001518 <parse_hex4+0x19c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b46      	cmp	r3, #70	; 0x46
 8001506:	d807      	bhi.n	8001518 <parse_hex4+0x19c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	3b37      	subs	r3, #55	; 0x37
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e011      	b.n	800153c <parse_hex4+0x1c0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b60      	cmp	r3, #96	; 0x60
 800151e:	d90b      	bls.n	8001538 <parse_hex4+0x1bc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b66      	cmp	r3, #102	; 0x66
 8001526:	d807      	bhi.n	8001538 <parse_hex4+0x1bc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	3b57      	subs	r3, #87	; 0x57
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e001      	b.n	800153c <parse_hex4+0x1c0>
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <parse_hex4+0x1c2>
	return h;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b22      	cmp	r3, #34	; 0x22
 8001566:	d00d      	beq.n	8001584 <parse_string+0x38>
 8001568:	4aa3      	ldr	r2, [pc, #652]	; (80017f8 <parse_string+0x2ac>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e168      	b.n	8001844 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	61fa      	str	r2, [r7, #28]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b5c      	cmp	r3, #92	; 0x5c
 800157c:	d102      	bne.n	8001584 <parse_string+0x38>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b22      	cmp	r3, #34	; 0x22
 800158a:	d009      	beq.n	80015a0 <parse_string+0x54>
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <parse_string+0x54>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <parse_string+0x2b0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	3201      	adds	r2, #1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4798      	blx	r3
 80015ac:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <parse_string+0x6c>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e145      	b.n	8001844 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80015c2:	e125      	b.n	8001810 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b5c      	cmp	r3, #92	; 0x5c
 80015ca:	d008      	beq.n	80015de <parse_string+0x92>
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	1c53      	adds	r3, r2, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	61b9      	str	r1, [r7, #24]
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e118      	b.n	8001810 <parse_string+0x2c4>
		else
		{
			ptr++;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3b62      	subs	r3, #98	; 0x62
 80015ea:	2b13      	cmp	r3, #19
 80015ec:	f200 80fc 	bhi.w	80017e8 <parse_string+0x29c>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <parse_string+0xac>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001649 	.word	0x08001649
 80015fc:	080017e9 	.word	0x080017e9
 8001600:	080017e9 	.word	0x080017e9
 8001604:	080017e9 	.word	0x080017e9
 8001608:	08001655 	.word	0x08001655
 800160c:	080017e9 	.word	0x080017e9
 8001610:	080017e9 	.word	0x080017e9
 8001614:	080017e9 	.word	0x080017e9
 8001618:	080017e9 	.word	0x080017e9
 800161c:	080017e9 	.word	0x080017e9
 8001620:	080017e9 	.word	0x080017e9
 8001624:	080017e9 	.word	0x080017e9
 8001628:	08001661 	.word	0x08001661
 800162c:	080017e9 	.word	0x080017e9
 8001630:	080017e9 	.word	0x080017e9
 8001634:	080017e9 	.word	0x080017e9
 8001638:	0800166d 	.word	0x0800166d
 800163c:	080017e9 	.word	0x080017e9
 8001640:	08001679 	.word	0x08001679
 8001644:	08001685 	.word	0x08001685
			{
				case 'b': *ptr2++='\b';	break;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	61ba      	str	r2, [r7, #24]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e0da      	b.n	800180a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	61ba      	str	r2, [r7, #24]
 800165a:	220c      	movs	r2, #12
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e0d4      	b.n	800180a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	61ba      	str	r2, [r7, #24]
 8001666:	220a      	movs	r2, #10
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e0ce      	b.n	800180a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	61ba      	str	r2, [r7, #24]
 8001672:	220d      	movs	r2, #13
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e0c8      	b.n	800180a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	61ba      	str	r2, [r7, #24]
 800167e:	2209      	movs	r2, #9
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e0c2      	b.n	800180a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3301      	adds	r3, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe77 	bl	800137c <parse_hex4>
 800168e:	6138      	str	r0, [r7, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3304      	adds	r3, #4
 8001694:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800169c:	d304      	bcc.n	80016a8 <parse_string+0x15c>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016a4:	f0c0 80b0 	bcc.w	8001808 <parse_string+0x2bc>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80ac 	beq.w	8001808 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016b6:	d32d      	bcc.n	8001714 <parse_string+0x1c8>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016be:	d229      	bcs.n	8001714 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b5c      	cmp	r3, #92	; 0x5c
 80016c8:	f040 809e 	bne.w	8001808 <parse_string+0x2bc>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b75      	cmp	r3, #117	; 0x75
 80016d4:	f040 8098 	bne.w	8001808 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3303      	adds	r3, #3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe4d 	bl	800137c <parse_hex4>
 80016e2:	60b8      	str	r0, [r7, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3306      	adds	r3, #6
 80016e8:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016f0:	f0c0 808a 	bcc.w	8001808 <parse_string+0x2bc>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016fa:	f080 8085 	bcs.w	8001808 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	029a      	lsls	r2, r3, #10
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <parse_string+0x2b4>)
 8001704:	4013      	ands	r3, r2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800170c:	4313      	orrs	r3, r2
 800170e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001712:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001714:	2304      	movs	r3, #4
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b7f      	cmp	r3, #127	; 0x7f
 800171c:	d802      	bhi.n	8001724 <parse_string+0x1d8>
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00c      	b.n	800173e <parse_string+0x1f2>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172a:	d202      	bcs.n	8001732 <parse_string+0x1e6>
 800172c:	2302      	movs	r3, #2
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e005      	b.n	800173e <parse_string+0x1f2>
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d201      	bcs.n	800173e <parse_string+0x1f2>
 800173a:	2303      	movs	r3, #3
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
					
					switch (len) {
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3b01      	subs	r3, #1
 800174a:	2b03      	cmp	r3, #3
 800174c:	d847      	bhi.n	80017de <parse_string+0x292>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <parse_string+0x208>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017c5 	.word	0x080017c5
 8001758:	080017a5 	.word	0x080017a5
 800175c:	08001785 	.word	0x08001785
 8001760:	08001765 	.word	0x08001765
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	b2db      	uxtb	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	3a01      	subs	r2, #1
 8001772:	61ba      	str	r2, [r7, #24]
 8001774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001778:	b2da      	uxtb	r2, r3
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800178c:	b2db      	uxtb	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	3a01      	subs	r2, #1
 8001792:	61ba      	str	r2, [r7, #24]
 8001794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001798:	b2da      	uxtb	r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	61ba      	str	r2, [r7, #24]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <parse_string+0x2b8>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	3901      	subs	r1, #1
 80017d4:	61b9      	str	r1, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4413      	add	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
					break;
 80017e6:	e010      	b.n	800180a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	61ba      	str	r2, [r7, #24]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e009      	b.n	800180a <parse_string+0x2be>
 80017f6:	bf00      	nop
 80017f8:	20000274 	.word	0x20000274
 80017fc:	20000000 	.word	0x20000000
 8001800:	000ffc00 	.word	0x000ffc00
 8001804:	08024328 	.word	0x08024328
			}
			ptr++;
 8001808:	bf00      	nop
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b22      	cmp	r3, #34	; 0x22
 8001816:	d004      	beq.n	8001822 <parse_string+0x2d6>
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aed1 	bne.w	80015c4 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b22      	cmp	r3, #34	; 0x22
 800182e:	d102      	bne.n	8001836 <parse_string+0x2ea>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	60da      	str	r2, [r3, #12]
	return ptr;
 8001842:	69fb      	ldr	r3, [r7, #28]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	e002      	b.n	800185c <skip+0x10>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <skip+0x26>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <skip+0x26>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d9f1      	bls.n	8001856 <skip+0xa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	const char *end=0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001890:	f7ff fbfc 	bl	800108c <cJSON_New_Item>
 8001894:	6138      	str	r0, [r7, #16]
	ep=0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <cJSON_ParseWithOpts+0x26>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02a      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff ffd0 	bl	800184c <skip>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	6938      	ldr	r0, [r7, #16]
 80018b2:	f000 f837 	bl	8001924 <parse_value>
 80018b6:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <cJSON_ParseWithOpts+0x48>
 80018be:	6938      	ldr	r0, [r7, #16]
 80018c0:	f7ff fbfc 	bl	80010bc <cJSON_Delete>
 80018c4:	2300      	movs	r3, #0
 80018c6:	e019      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00f      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ffbc 	bl	800184c <skip>
 80018d4:	6178      	str	r0, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018de:	6938      	ldr	r0, [r7, #16]
 80018e0:	f7ff fbec 	bl	80010bc <cJSON_Delete>
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <cJSON_ParseWithOpts+0x7a>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
	return c;
 80018fa:	693b      	ldr	r3, [r7, #16]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000274 	.word	0x20000274

08001908 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffb3 	bl	8001880 <cJSON_ParseWithOpts>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <parse_value+0x14>
 8001934:	2300      	movs	r3, #0
 8001936:	e060      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001938:	2204      	movs	r2, #4
 800193a:	4932      	ldr	r1, [pc, #200]	; (8001a04 <parse_value+0xe0>)
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f01a fc39 	bl	801c1b4 <strncmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <parse_value+0x30>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	e052      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001954:	2205      	movs	r2, #5
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <parse_value+0xe4>)
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f01a fc2b 	bl	801c1b4 <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <parse_value+0x4c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3305      	adds	r3, #5
 800196e:	e044      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001970:	2204      	movs	r2, #4
 8001972:	4926      	ldr	r1, [pc, #152]	; (8001a0c <parse_value+0xe8>)
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f01a fc1d 	bl	801c1b4 <strncmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <parse_value+0x6e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	e033      	b.n	80019fa <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b22      	cmp	r3, #34	; 0x22
 8001998:	d105      	bne.n	80019a6 <parse_value+0x82>
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fdd5 	bl	800154c <parse_string>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e029      	b.n	80019fa <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b2d      	cmp	r3, #45	; 0x2d
 80019ac:	d007      	beq.n	80019be <parse_value+0x9a>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b2f      	cmp	r3, #47	; 0x2f
 80019b4:	d909      	bls.n	80019ca <parse_value+0xa6>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b39      	cmp	r3, #57	; 0x39
 80019bc:	d805      	bhi.n	80019ca <parse_value+0xa6>
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fbc1 	bl	8001148 <parse_number>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e017      	b.n	80019fa <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b5b      	cmp	r3, #91	; 0x5b
 80019d0:	d105      	bne.n	80019de <parse_value+0xba>
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f81d 	bl	8001a14 <parse_array>
 80019da:	4603      	mov	r3, r0
 80019dc:	e00d      	b.n	80019fa <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b7b      	cmp	r3, #123	; 0x7b
 80019e4:	d105      	bne.n	80019f2 <parse_value+0xce>
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f889 	bl	8001b00 <parse_object>
 80019ee:	4603      	mov	r3, r0
 80019f0:	e003      	b.n	80019fa <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <parse_value+0xec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	080207bc 	.word	0x080207bc
 8001a08:	080207c4 	.word	0x080207c4
 8001a0c:	080207cc 	.word	0x080207cc
 8001a10:	20000274 	.word	0x20000274

08001a14 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b5b      	cmp	r3, #91	; 0x5b
 8001a24:	d004      	beq.n	8001a30 <parse_array+0x1c>
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <parse_array+0xe8>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e060      	b.n	8001af2 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2205      	movs	r2, #5
 8001a34:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff06 	bl	800184c <skip>
 8001a40:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b5d      	cmp	r3, #93	; 0x5d
 8001a48:	d102      	bne.n	8001a50 <parse_array+0x3c>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e050      	b.n	8001af2 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001a50:	f7ff fb1c 	bl	800108c <cJSON_New_Item>
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <parse_array+0x54>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e044      	b.n	8001af2 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f7ff feef 	bl	800184c <skip>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ff56 	bl	8001924 <parse_value>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fee6 	bl	800184c <skip>
 8001a80:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d125      	bne.n	8001ad4 <parse_array+0xc0>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e032      	b.n	8001af2 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001a8c:	f7ff fafe 	bl	800108c <cJSON_New_Item>
 8001a90:	60b8      	str	r0, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <parse_array+0x88>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e02a      	b.n	8001af2 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fecb 	bl	800184c <skip>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ff32 	bl	8001924 <parse_value>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fec2 	bl	800184c <skip>
 8001ac8:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <parse_array+0xc0>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e00e      	b.n	8001af2 <parse_array+0xde>
	while (*value==',')
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ada:	d0d7      	beq.n	8001a8c <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b5d      	cmp	r3, #93	; 0x5d
 8001ae2:	d102      	bne.n	8001aea <parse_array+0xd6>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	e003      	b.n	8001af2 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <parse_array+0xe8>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000274 	.word	0x20000274

08001b00 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b10:	d004      	beq.n	8001b1c <parse_object+0x1c>
 8001b12:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <parse_object+0x178>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e0a8      	b.n	8001c6e <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2206      	movs	r2, #6
 8001b20:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe90 	bl	800184c <skip>
 8001b2c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b7d      	cmp	r3, #125	; 0x7d
 8001b34:	d102      	bne.n	8001b3c <parse_object+0x3c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e098      	b.n	8001c6e <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b3c:	f7ff faa6 	bl	800108c <cJSON_New_Item>
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <parse_object+0x54>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e08c      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff fe79 	bl	800184c <skip>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fcf4 	bl	800154c <parse_string>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe70 	bl	800184c <skip>
 8001b6c:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <parse_object+0x78>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e07a      	b.n	8001c6e <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	621a      	str	r2, [r3, #32]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b3a      	cmp	r3, #58	; 0x3a
 8001b8c:	d004      	beq.n	8001b98 <parse_object+0x98>
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <parse_object+0x178>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	e06a      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe55 	bl	800184c <skip>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff febc 	bl	8001924 <parse_value>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe4c 	bl	800184c <skip>
 8001bb4:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d149      	bne.n	8001c50 <parse_object+0x150>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e056      	b.n	8001c6e <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001bc0:	f7ff fa64 	bl	800108c <cJSON_New_Item>
 8001bc4:	60b8      	str	r0, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <parse_object+0xd0>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e04e      	b.n	8001c6e <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe31 	bl	800184c <skip>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fcac 	bl	800154c <parse_string>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe28 	bl	800184c <skip>
 8001bfc:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <parse_object+0x108>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e032      	b.n	8001c6e <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	621a      	str	r2, [r3, #32]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c1c:	d004      	beq.n	8001c28 <parse_object+0x128>
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <parse_object+0x178>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	e022      	b.n	8001c6e <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe0d 	bl	800184c <skip>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe74 	bl	8001924 <parse_value>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe04 	bl	800184c <skip>
 8001c44:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <parse_object+0x150>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e00e      	b.n	8001c6e <parse_object+0x16e>
	while (*value==',')
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b2c      	cmp	r3, #44	; 0x2c
 8001c56:	d0b3      	beq.n	8001bc0 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c5e:	d102      	bne.n	8001c66 <parse_object+0x166>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	e003      	b.n	8001c6e <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <parse_object+0x178>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000274 	.word	0x20000274

08001c7c <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e002      	b.n	8001c94 <cJSON_GetObjectItem+0x18>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <cJSON_GetObjectItem+0x30>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f981 	bl	8000fa8 <cJSON_strcasecmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <cJSON_GetObjectItem+0x12>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e013      	b.n	8001cf2 <parseValue+0x3a>
	{
		if(i % 2)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <parseValue+0x58>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
			j++;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fa76 	bl	80001e4 <strlen>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8e4      	bhi.n	8001cca <parseValue+0x12>
		}
	}
	tmp = paramValue;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <parseValue+0x58>)
 8001d02:	60fb      	str	r3, [r7, #12]

	return tmp;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200013a0 	.word	0x200013a0

08001d14 <json_input>:
//Функция разбора полученной строки JSON
void json_input(char *text)
{
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	ed2d 8b04 	vpush	{d8-d9}
 8001d1a:	b0a7      	sub	sp, #156	; 0x9c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fdf1 	bl	8001908 <cJSON_Parse>
 8001d26:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8001d2a:	497f      	ldr	r1, [pc, #508]	; (8001f28 <json_input+0x214>)
 8001d2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d30:	f7ff ffa4 	bl	8001c7c <cJSON_GetObjectItem>
 8001d34:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	TIME = stime->valuestring;
 8001d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	; (8001f2c <json_input+0x218>)
 8001d40:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8001d42:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <json_input+0x218>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f019 fbe7 	bl	801b51a <atoi>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b78      	ldr	r3, [pc, #480]	; (8001f30 <json_input+0x21c>)
 8001d50:	601a      	str	r2, [r3, #0]
	if(Time_Server > Time_Client)
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <json_input+0x21c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <json_input+0x220>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	f340 86ea 	ble.w	8002b34 <json_input+0xe20>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 8001d60:	4975      	ldr	r1, [pc, #468]	; (8001f38 <json_input+0x224>)
 8001d62:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d66:	f7ff ff89 	bl	8001c7c <cJSON_GetObjectItem>
 8001d6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		INSTRUCTION = sInstruction->valuestring;
 8001d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a71      	ldr	r2, [pc, #452]	; (8001f3c <json_input+0x228>)
 8001d76:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <json_input+0x228>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4970      	ldr	r1, [pc, #448]	; (8001f40 <json_input+0x22c>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa26 	bl	80001d0 <strcmp>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 84d5 	bne.w	8002736 <json_input+0xa22>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8001d8c:	496d      	ldr	r1, [pc, #436]	; (8001f44 <json_input+0x230>)
 8001d8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d92:	f7ff ff73 	bl	8001c7c <cJSON_GetObjectItem>
 8001d96:	4603      	mov	r3, r0
 8001d98:	496b      	ldr	r1, [pc, #428]	; (8001f48 <json_input+0x234>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff6e 	bl	8001c7c <cJSON_GetObjectItem>
 8001da0:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8001da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a69      	ldr	r2, [pc, #420]	; (8001f4c <json_input+0x238>)
 8001da8:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8001daa:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <json_input+0x238>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4968      	ldr	r1, [pc, #416]	; (8001f50 <json_input+0x23c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fa0d 	bl	80001d0 <strcmp>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 80df 	bne.w	8001f7c <json_input+0x268>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001dbe:	4961      	ldr	r1, [pc, #388]	; (8001f44 <json_input+0x230>)
 8001dc0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dc4:	f7ff ff5a 	bl	8001c7c <cJSON_GetObjectItem>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4962      	ldr	r1, [pc, #392]	; (8001f54 <json_input+0x240>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff55 	bl	8001c7c <cJSON_GetObjectItem>
 8001dd2:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001dd4:	495b      	ldr	r1, [pc, #364]	; (8001f44 <json_input+0x230>)
 8001dd6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dda:	f7ff ff4f 	bl	8001c7c <cJSON_GetObjectItem>
 8001dde:	4603      	mov	r3, r0
 8001de0:	495d      	ldr	r1, [pc, #372]	; (8001f58 <json_input+0x244>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff4a 	bl	8001c7c <cJSON_GetObjectItem>
 8001de8:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001dea:	4956      	ldr	r1, [pc, #344]	; (8001f44 <json_input+0x230>)
 8001dec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001df0:	f7ff ff44 	bl	8001c7c <cJSON_GetObjectItem>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4959      	ldr	r1, [pc, #356]	; (8001f5c <json_input+0x248>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff3f 	bl	8001c7c <cJSON_GetObjectItem>
 8001dfe:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001e00:	4950      	ldr	r1, [pc, #320]	; (8001f44 <json_input+0x230>)
 8001e02:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e06:	f7ff ff39 	bl	8001c7c <cJSON_GetObjectItem>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4954      	ldr	r1, [pc, #336]	; (8001f60 <json_input+0x24c>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff34 	bl	8001c7c <cJSON_GetObjectItem>
 8001e14:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <json_input+0x250>)
 8001e1c:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <json_input+0x254>)
 8001e24:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <json_input+0x258>)
 8001e2c:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <json_input+0x25c>)
 8001e34:	6013      	str	r3, [r2, #0]

				save_dido(D_IN, text);
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <json_input+0x250>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 fad9 	bl	80073f4 <save_dido>

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <json_input+0x250>)
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <json_input+0x254>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f019 fb65 	bl	801b51a <atoi>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b2dd      	uxtb	r5, r3
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <json_input+0x258>)
 8001e56:	681e      	ldr	r6, [r3, #0]
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <json_input+0x25c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f019 fb5c 	bl	801b51a <atoi>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f006 fe58 	bl	8008b20 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8001e70:	4840      	ldr	r0, [pc, #256]	; (8001f74 <json_input+0x260>)
 8001e72:	f000 ffd5 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 8001e76:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <json_input+0x238>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 ffd0 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8001e80:	483c      	ldr	r0, [pc, #240]	; (8001f74 <json_input+0x260>)
 8001e82:	f000 ffcd 	bl	8002e20 <SEND_str>
				SEND_str(D_IN);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <json_input+0x250>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 ffc8 	bl	8002e20 <SEND_str>
				SEND_str(": ");
 8001e90:	4839      	ldr	r0, [pc, #228]	; (8001f78 <json_input+0x264>)
 8001e92:	f000 ffc5 	bl	8002e20 <SEND_str>
				USART_Tx(D_IN[4]);
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <json_input+0x250>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 ffa6 	bl	8002df0 <USART_Tx>
				SEND_str("\n");
 8001ea4:	4833      	ldr	r0, [pc, #204]	; (8001f74 <json_input+0x260>)
 8001ea6:	f000 ffbb 	bl	8002e20 <SEND_str>
				SEND_str(VAR_IN);
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <json_input+0x254>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ffb6 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8001eb4:	482f      	ldr	r0, [pc, #188]	; (8001f74 <json_input+0x260>)
 8001eb6:	f000 ffb3 	bl	8002e20 <SEND_str>
				SEND_str(D_OUT);
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <json_input+0x258>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 ffae 	bl	8002e20 <SEND_str>
				SEND_str(": ");
 8001ec4:	482c      	ldr	r0, [pc, #176]	; (8001f78 <json_input+0x264>)
 8001ec6:	f000 ffab 	bl	8002e20 <SEND_str>
				USART_Tx(D_OUT[5]);
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <json_input+0x258>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3305      	adds	r3, #5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 ff8c 	bl	8002df0 <USART_Tx>
				SEND_str("\n");
 8001ed8:	4826      	ldr	r0, [pc, #152]	; (8001f74 <json_input+0x260>)
 8001eda:	f000 ffa1 	bl	8002e20 <SEND_str>
				SEND_str(VAR_OUT);
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <json_input+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ff9c 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8001ee8:	4822      	ldr	r0, [pc, #136]	; (8001f74 <json_input+0x260>)
 8001eea:	f000 ff99 	bl	8002e20 <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 8001eee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ef2:	f7ff f8e3 	bl	80010bc <cJSON_Delete>
				free(stime);
 8001ef6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001efa:	f019 fb51 	bl	801b5a0 <free>
				free(sInstruction);
 8001efe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f02:	f019 fb4d 	bl	801b5a0 <free>
				free(sType);
 8001f06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f08:	f019 fb4a 	bl	801b5a0 <free>
				free(s1);
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f019 fb47 	bl	801b5a0 <free>
				free(s2);
 8001f12:	6938      	ldr	r0, [r7, #16]
 8001f14:	f019 fb44 	bl	801b5a0 <free>
				free(s3);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f019 fb41 	bl	801b5a0 <free>
				free(s4);
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f019 fb3e 	bl	801b5a0 <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8001f24:	f000 be0e 	b.w	8002b44 <json_input+0xe30>
 8001f28:	080207d8 	.word	0x080207d8
 8001f2c:	20001378 	.word	0x20001378
 8001f30:	20000278 	.word	0x20000278
 8001f34:	2000027c 	.word	0x2000027c
 8001f38:	080207e0 	.word	0x080207e0
 8001f3c:	200013c4 	.word	0x200013c4
 8001f40:	080207ec 	.word	0x080207ec
 8001f44:	080207fc 	.word	0x080207fc
 8001f48:	08020804 	.word	0x08020804
 8001f4c:	2000136c 	.word	0x2000136c
 8001f50:	0802080c 	.word	0x0802080c
 8001f54:	08020818 	.word	0x08020818
 8001f58:	08020820 	.word	0x08020820
 8001f5c:	08020828 	.word	0x08020828
 8001f60:	08020830 	.word	0x08020830
 8001f64:	200013bc 	.word	0x200013bc
 8001f68:	2000137c 	.word	0x2000137c
 8001f6c:	200013ac 	.word	0x200013ac
 8001f70:	20001388 	.word	0x20001388
 8001f74:	08020838 	.word	0x08020838
 8001f78:	0802083c 	.word	0x0802083c
			else if((strcmp(TYPE, "SET_VAIDO") == 0) || strcmp(TYPE, "SET_CAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход(измерение напряжения || измерение тока) в интервале значений
 8001f7c:	4b79      	ldr	r3, [pc, #484]	; (8002164 <json_input+0x450>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4979      	ldr	r1, [pc, #484]	; (8002168 <json_input+0x454>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f924 	bl	80001d0 <strcmp>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <json_input+0x28e>
 8001f8e:	4b75      	ldr	r3, [pc, #468]	; (8002164 <json_input+0x450>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4976      	ldr	r1, [pc, #472]	; (800216c <json_input+0x458>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f91b 	bl	80001d0 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 8197 	bne.w	80022d0 <json_input+0x5bc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8001fa2:	4973      	ldr	r1, [pc, #460]	; (8002170 <json_input+0x45c>)
 8001fa4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fa8:	f7ff fe68 	bl	8001c7c <cJSON_GetObjectItem>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4971      	ldr	r1, [pc, #452]	; (8002174 <json_input+0x460>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe63 	bl	8001c7c <cJSON_GetObjectItem>
 8001fb6:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8001fb8:	496d      	ldr	r1, [pc, #436]	; (8002170 <json_input+0x45c>)
 8001fba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fbe:	f7ff fe5d 	bl	8001c7c <cJSON_GetObjectItem>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	496c      	ldr	r1, [pc, #432]	; (8002178 <json_input+0x464>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fe58 	bl	8001c7c <cJSON_GetObjectItem>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8001fce:	4968      	ldr	r1, [pc, #416]	; (8002170 <json_input+0x45c>)
 8001fd0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fd4:	f7ff fe52 	bl	8001c7c <cJSON_GetObjectItem>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4968      	ldr	r1, [pc, #416]	; (800217c <json_input+0x468>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fe4d 	bl	8001c7c <cJSON_GetObjectItem>
 8001fe2:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001fe4:	4962      	ldr	r1, [pc, #392]	; (8002170 <json_input+0x45c>)
 8001fe6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fea:	f7ff fe47 	bl	8001c7c <cJSON_GetObjectItem>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4963      	ldr	r1, [pc, #396]	; (8002180 <json_input+0x46c>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe42 	bl	8001c7c <cJSON_GetObjectItem>
 8001ff8:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001ffa:	495d      	ldr	r1, [pc, #372]	; (8002170 <json_input+0x45c>)
 8001ffc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002000:	f7ff fe3c 	bl	8001c7c <cJSON_GetObjectItem>
 8002004:	4603      	mov	r3, r0
 8002006:	495f      	ldr	r1, [pc, #380]	; (8002184 <json_input+0x470>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe37 	bl	8001c7c <cJSON_GetObjectItem>
 800200e:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <json_input+0x474>)
 8002016:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a5b      	ldr	r2, [pc, #364]	; (800218c <json_input+0x478>)
 800201e:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <json_input+0x47c>)
 8002026:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <json_input+0x480>)
 800202e:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <json_input+0x484>)
 8002036:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <json_input+0x474>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4957      	ldr	r1, [pc, #348]	; (800219c <json_input+0x488>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f8c6 	bl	80001d0 <strcmp>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d11e      	bne.n	8002088 <json_input+0x374>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <json_input+0x450>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4946      	ldr	r1, [pc, #280]	; (8002168 <json_input+0x454>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f8bd 	bl	80001d0 <strcmp>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <json_input+0x35e>
						AiDo[0].inputFlag = true;
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <json_input+0x48c>)
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206a:	484e      	ldr	r0, [pc, #312]	; (80021a4 <json_input+0x490>)
 800206c:	f00a f968 	bl	800c340 <HAL_GPIO_WritePin>
 8002070:	e0aa      	b.n	80021c8 <json_input+0x4b4>
						AiDo[0].inputFlag = false;
 8002072:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <json_input+0x48c>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002080:	4848      	ldr	r0, [pc, #288]	; (80021a4 <json_input+0x490>)
 8002082:	f00a f95d 	bl	800c340 <HAL_GPIO_WritePin>
 8002086:	e09f      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD2") == 0)
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <json_input+0x474>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4946      	ldr	r1, [pc, #280]	; (80021a8 <json_input+0x494>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f89e 	bl	80001d0 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11e      	bne.n	80020d8 <json_input+0x3c4>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <json_input+0x450>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4932      	ldr	r1, [pc, #200]	; (8002168 <json_input+0x454>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f895 	bl	80001d0 <strcmp>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <json_input+0x3ae>
						AiDo[1].inputFlag = true;
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <json_input+0x48c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ba:	483a      	ldr	r0, [pc, #232]	; (80021a4 <json_input+0x490>)
 80020bc:	f00a f940 	bl	800c340 <HAL_GPIO_WritePin>
 80020c0:	e082      	b.n	80021c8 <json_input+0x4b4>
						AiDo[1].inputFlag = false;
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <json_input+0x48c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d0:	4834      	ldr	r0, [pc, #208]	; (80021a4 <json_input+0x490>)
 80020d2:	f00a f935 	bl	800c340 <HAL_GPIO_WritePin>
 80020d6:	e077      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD3") == 0)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <json_input+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4933      	ldr	r1, [pc, #204]	; (80021ac <json_input+0x498>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f876 	bl	80001d0 <strcmp>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11e      	bne.n	8002128 <json_input+0x414>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <json_input+0x450>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	491e      	ldr	r1, [pc, #120]	; (8002168 <json_input+0x454>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f86d 	bl	80001d0 <strcmp>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <json_input+0x3fe>
						AiDo[2].inputFlag = true;
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <json_input+0x48c>)
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	4826      	ldr	r0, [pc, #152]	; (80021a4 <json_input+0x490>)
 800210c:	f00a f918 	bl	800c340 <HAL_GPIO_WritePin>
 8002110:	e05a      	b.n	80021c8 <json_input+0x4b4>
						AiDo[2].inputFlag = false;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <json_input+0x48c>)
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <json_input+0x490>)
 8002122:	f00a f90d 	bl	800c340 <HAL_GPIO_WritePin>
 8002126:	e04f      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <json_input+0x474>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4920      	ldr	r1, [pc, #128]	; (80021b0 <json_input+0x49c>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f84e 	bl	80001d0 <strcmp>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d146      	bne.n	80021c8 <json_input+0x4b4>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <json_input+0x450>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	490a      	ldr	r1, [pc, #40]	; (8002168 <json_input+0x454>)
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f845 	bl	80001d0 <strcmp>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d133      	bne.n	80021b4 <json_input+0x4a0>
						AiDo[3].inputFlag = true;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <json_input+0x48c>)
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(SET);
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <json_input+0x490>)
 800215c:	f00a f8f0 	bl	800c340 <HAL_GPIO_WritePin>
 8002160:	e032      	b.n	80021c8 <json_input+0x4b4>
 8002162:	bf00      	nop
 8002164:	2000136c 	.word	0x2000136c
 8002168:	08020840 	.word	0x08020840
 800216c:	0802084c 	.word	0x0802084c
 8002170:	080207fc 	.word	0x080207fc
 8002174:	08020858 	.word	0x08020858
 8002178:	08020860 	.word	0x08020860
 800217c:	0802086c 	.word	0x0802086c
 8002180:	08020828 	.word	0x08020828
 8002184:	08020830 	.word	0x08020830
 8002188:	200013c0 	.word	0x200013c0
 800218c:	2000138c 	.word	0x2000138c
 8002190:	200013b0 	.word	0x200013b0
 8002194:	200013ac 	.word	0x200013ac
 8002198:	20001388 	.word	0x20001388
 800219c:	08020878 	.word	0x08020878
 80021a0:	20001218 	.word	0x20001218
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08020880 	.word	0x08020880
 80021ac:	08020888 	.word	0x08020888
 80021b0:	08020890 	.word	0x08020890
						AiDo[3].inputFlag = false;
 80021b4:	4b7b      	ldr	r3, [pc, #492]	; (80023a4 <json_input+0x690>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c2:	4879      	ldr	r0, [pc, #484]	; (80023a8 <json_input+0x694>)
 80021c4:	f00a f8bc 	bl	800c340 <HAL_GPIO_WritePin>
				save_aido(A_IN, text);
 80021c8:	4b78      	ldr	r3, [pc, #480]	; (80023ac <json_input+0x698>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 f932 	bl	8007438 <save_aido>
				set_aido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <json_input+0x698>)
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <json_input+0x69c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f019 f999 	bl	801b514 <atof>
 80021e2:	eeb0 8a40 	vmov.f32	s16, s0
 80021e6:	eef0 8a60 	vmov.f32	s17, s1
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <json_input+0x6a0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f019 f990 	bl	801b514 <atof>
 80021f4:	eeb0 9a40 	vmov.f32	s18, s0
 80021f8:	eef0 9a60 	vmov.f32	s19, s1
 80021fc:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <json_input+0x6a4>)
 80021fe:	681d      	ldr	r5, [r3, #0]
 8002200:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <json_input+0x6a8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f019 f988 	bl	801b51a <atoi>
 800220a:	4603      	mov	r3, r0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	4629      	mov	r1, r5
 8002212:	eeb0 1a49 	vmov.f32	s2, s18
 8002216:	eef0 1a69 	vmov.f32	s3, s19
 800221a:	eeb0 0a48 	vmov.f32	s0, s16
 800221e:	eef0 0a68 	vmov.f32	s1, s17
 8002222:	4620      	mov	r0, r4
 8002224:	f006 fe42 	bl	8008eac <set_aido>
				SEND_str("\n");
 8002228:	4865      	ldr	r0, [pc, #404]	; (80023c0 <json_input+0x6ac>)
 800222a:	f000 fdf9 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <json_input+0x6b0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fdf4 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002238:	4861      	ldr	r0, [pc, #388]	; (80023c0 <json_input+0x6ac>)
 800223a:	f000 fdf1 	bl	8002e20 <SEND_str>
				SEND_str(A_IN);
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <json_input+0x698>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fdec 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002248:	485d      	ldr	r0, [pc, #372]	; (80023c0 <json_input+0x6ac>)
 800224a:	f000 fde9 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_LOW);
 800224e:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <json_input+0x69c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fde4 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002258:	4859      	ldr	r0, [pc, #356]	; (80023c0 <json_input+0x6ac>)
 800225a:	f000 fde1 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_HIGH);
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <json_input+0x6a0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fddc 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002268:	4855      	ldr	r0, [pc, #340]	; (80023c0 <json_input+0x6ac>)
 800226a:	f000 fdd9 	bl	8002e20 <SEND_str>
				SEND_str(D_OUT);
 800226e:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <json_input+0x6a4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fdd4 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002278:	4851      	ldr	r0, [pc, #324]	; (80023c0 <json_input+0x6ac>)
 800227a:	f000 fdd1 	bl	8002e20 <SEND_str>
				SEND_str(VAR_OUT);
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <json_input+0x6a8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fdcc 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002288:	484d      	ldr	r0, [pc, #308]	; (80023c0 <json_input+0x6ac>)
 800228a:	f000 fdc9 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 800228e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002292:	f7fe ff13 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002296:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800229a:	f019 f981 	bl	801b5a0 <free>
				free(sInstruction);
 800229e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80022a2:	f019 f97d 	bl	801b5a0 <free>
				free(sType);
 80022a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022a8:	f019 f97a 	bl	801b5a0 <free>
				free(s1);
 80022ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ae:	f019 f977 	bl	801b5a0 <free>
				free(s2);
 80022b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022b4:	f019 f974 	bl	801b5a0 <free>
				free(s3);
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f019 f971 	bl	801b5a0 <free>
				free(s4);
 80022be:	69f8      	ldr	r0, [r7, #28]
 80022c0:	f019 f96e 	bl	801b5a0 <free>
				free(s5);
 80022c4:	69b8      	ldr	r0, [r7, #24]
 80022c6:	f019 f96b 	bl	801b5a0 <free>
			{
 80022ca:	bf00      	nop
}
 80022cc:	f000 bc3a 	b.w	8002b44 <json_input+0xe30>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <json_input+0x6b0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	493c      	ldr	r1, [pc, #240]	; (80023c8 <json_input+0x6b4>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd ff7a 	bl	80001d0 <strcmp>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17e      	bne.n	80023e0 <json_input+0x6cc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 80022e2:	493a      	ldr	r1, [pc, #232]	; (80023cc <json_input+0x6b8>)
 80022e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022e8:	f7ff fcc8 	bl	8001c7c <cJSON_GetObjectItem>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4938      	ldr	r1, [pc, #224]	; (80023d0 <json_input+0x6bc>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fcc3 	bl	8001c7c <cJSON_GetObjectItem>
 80022f6:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 80022f8:	4934      	ldr	r1, [pc, #208]	; (80023cc <json_input+0x6b8>)
 80022fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022fe:	f7ff fcbd 	bl	8001c7c <cJSON_GetObjectItem>
 8002302:	4603      	mov	r3, r0
 8002304:	4933      	ldr	r1, [pc, #204]	; (80023d4 <json_input+0x6c0>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fcb8 	bl	8001c7c <cJSON_GetObjectItem>
 800230c:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <json_input+0x6c4>)
 8002314:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <json_input+0x6c8>)
 800231c:	6013      	str	r3, [r2, #0]
				save_pwm(PWM_OUT, text);
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <json_input+0x6c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	f005 f8a9 	bl	800747c <save_pwm>
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <json_input+0x6c4>)
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <json_input+0x6c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f019 f8f1 	bl	801b51a <atoi>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	4620      	mov	r0, r4
 800233e:	f006 ff05 	bl	800914c <set_pwm>
				SEND_str("\n");
 8002342:	481f      	ldr	r0, [pc, #124]	; (80023c0 <json_input+0x6ac>)
 8002344:	f000 fd6c 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <json_input+0x6b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd67 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002352:	481b      	ldr	r0, [pc, #108]	; (80023c0 <json_input+0x6ac>)
 8002354:	f000 fd64 	bl	8002e20 <SEND_str>
				SEND_str(PWM_OUT);
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <json_input+0x6c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd5f 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <json_input+0x6ac>)
 8002364:	f000 fd5c 	bl	8002e20 <SEND_str>
				SEND_str(D_CYCLE);
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <json_input+0x6c8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fd57 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002372:	4813      	ldr	r0, [pc, #76]	; (80023c0 <json_input+0x6ac>)
 8002374:	f000 fd54 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 8002378:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800237c:	f7fe fe9e 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002380:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002384:	f019 f90c 	bl	801b5a0 <free>
				free(sInstruction);
 8002388:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800238c:	f019 f908 	bl	801b5a0 <free>
				free(sType);
 8002390:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002392:	f019 f905 	bl	801b5a0 <free>
				free(s1);
 8002396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002398:	f019 f902 	bl	801b5a0 <free>
				free(s2);
 800239c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800239e:	f019 f8ff 	bl	801b5a0 <free>
}
 80023a2:	e3cf      	b.n	8002b44 <json_input+0xe30>
 80023a4:	20001218 	.word	0x20001218
 80023a8:	40021000 	.word	0x40021000
 80023ac:	200013c0 	.word	0x200013c0
 80023b0:	2000138c 	.word	0x2000138c
 80023b4:	200013b0 	.word	0x200013b0
 80023b8:	200013ac 	.word	0x200013ac
 80023bc:	20001388 	.word	0x20001388
 80023c0:	08020838 	.word	0x08020838
 80023c4:	2000136c 	.word	0x2000136c
 80023c8:	08020898 	.word	0x08020898
 80023cc:	080207fc 	.word	0x080207fc
 80023d0:	080208a0 	.word	0x080208a0
 80023d4:	080208a8 	.word	0x080208a8
 80023d8:	20001374 	.word	0x20001374
 80023dc:	200013b4 	.word	0x200013b4
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 80023e0:	4b6b      	ldr	r3, [pc, #428]	; (8002590 <json_input+0x87c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	496b      	ldr	r1, [pc, #428]	; (8002594 <json_input+0x880>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd fef2 	bl	80001d0 <strcmp>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80ea 	bne.w	80025c8 <json_input+0x8b4>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 80023f4:	4968      	ldr	r1, [pc, #416]	; (8002598 <json_input+0x884>)
 80023f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80023fa:	f7ff fc3f 	bl	8001c7c <cJSON_GetObjectItem>
 80023fe:	4603      	mov	r3, r0
 8002400:	4966      	ldr	r1, [pc, #408]	; (800259c <json_input+0x888>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fc3a 	bl	8001c7c <cJSON_GetObjectItem>
 8002408:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 800240a:	4963      	ldr	r1, [pc, #396]	; (8002598 <json_input+0x884>)
 800240c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002410:	f7ff fc34 	bl	8001c7c <cJSON_GetObjectItem>
 8002414:	4603      	mov	r3, r0
 8002416:	4962      	ldr	r1, [pc, #392]	; (80025a0 <json_input+0x88c>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc2f 	bl	8001c7c <cJSON_GetObjectItem>
 800241e:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 8002420:	495d      	ldr	r1, [pc, #372]	; (8002598 <json_input+0x884>)
 8002422:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002426:	f7ff fc29 	bl	8001c7c <cJSON_GetObjectItem>
 800242a:	4603      	mov	r3, r0
 800242c:	495d      	ldr	r1, [pc, #372]	; (80025a4 <json_input+0x890>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc24 	bl	8001c7c <cJSON_GetObjectItem>
 8002434:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002436:	4958      	ldr	r1, [pc, #352]	; (8002598 <json_input+0x884>)
 8002438:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800243c:	f7ff fc1e 	bl	8001c7c <cJSON_GetObjectItem>
 8002440:	4603      	mov	r3, r0
 8002442:	4959      	ldr	r1, [pc, #356]	; (80025a8 <json_input+0x894>)
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc19 	bl	8001c7c <cJSON_GetObjectItem>
 800244a:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800244c:	4952      	ldr	r1, [pc, #328]	; (8002598 <json_input+0x884>)
 800244e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002452:	f7ff fc13 	bl	8001c7c <cJSON_GetObjectItem>
 8002456:	4603      	mov	r3, r0
 8002458:	4954      	ldr	r1, [pc, #336]	; (80025ac <json_input+0x898>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc0e 	bl	8001c7c <cJSON_GetObjectItem>
 8002460:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <json_input+0x89c>)
 8002468:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <json_input+0x8a0>)
 8002470:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <json_input+0x8a4>)
 8002478:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <json_input+0x8a8>)
 8002480:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <json_input+0x8ac>)
 8002488:	6013      	str	r3, [r2, #0]
				save_tsido(ROM_RAW, text);
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <json_input+0x89c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	f005 f813 	bl	80074bc <save_tsido>
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <json_input+0x89c>)
 8002498:	681c      	ldr	r4, [r3, #0]
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <json_input+0x8a0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f019 f838 	bl	801b514 <atof>
 80024a4:	eeb0 8a40 	vmov.f32	s16, s0
 80024a8:	eef0 8a60 	vmov.f32	s17, s1
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <json_input+0x8a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f019 f82f 	bl	801b514 <atof>
 80024b6:	eeb0 9a40 	vmov.f32	s18, s0
 80024ba:	eef0 9a60 	vmov.f32	s19, s1
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <json_input+0x8a8>)
 80024c0:	681d      	ldr	r5, [r3, #0]
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <json_input+0x8ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f019 f827 	bl	801b51a <atoi>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4629      	mov	r1, r5
 80024d4:	eeb0 1a49 	vmov.f32	s2, s18
 80024d8:	eef0 1a69 	vmov.f32	s3, s19
 80024dc:	eeb0 0a48 	vmov.f32	s0, s16
 80024e0:	eef0 0a68 	vmov.f32	s1, s17
 80024e4:	4620      	mov	r0, r4
 80024e6:	f006 fedf 	bl	80092a8 <set_temperature>
				SEND_str("\n");
 80024ea:	4836      	ldr	r0, [pc, #216]	; (80025c4 <json_input+0x8b0>)
 80024ec:	f000 fc98 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <json_input+0x87c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fc93 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80024fa:	4832      	ldr	r0, [pc, #200]	; (80025c4 <json_input+0x8b0>)
 80024fc:	f000 fc90 	bl	8002e20 <SEND_str>
				SEND_str(ROM_RAW);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <json_input+0x89c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fc8b 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 800250a:	482e      	ldr	r0, [pc, #184]	; (80025c4 <json_input+0x8b0>)
 800250c:	f000 fc88 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <json_input+0x8a0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fc83 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <json_input+0x8b0>)
 800251c:	f000 fc80 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <json_input+0x8a4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fc7b 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 800252a:	4826      	ldr	r0, [pc, #152]	; (80025c4 <json_input+0x8b0>)
 800252c:	f000 fc78 	bl	8002e20 <SEND_str>
				SEND_str(D_OUT);
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <json_input+0x8a8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fc73 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 800253a:	4822      	ldr	r0, [pc, #136]	; (80025c4 <json_input+0x8b0>)
 800253c:	f000 fc70 	bl	8002e20 <SEND_str>
				SEND_str(VAR_OUT);
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <json_input+0x8ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fc6b 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 800254a:	481e      	ldr	r0, [pc, #120]	; (80025c4 <json_input+0x8b0>)
 800254c:	f000 fc68 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 8002550:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002554:	f7fe fdb2 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002558:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800255c:	f019 f820 	bl	801b5a0 <free>
				free(sInstruction);
 8002560:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002564:	f019 f81c 	bl	801b5a0 <free>
				free(sType);
 8002568:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800256a:	f019 f819 	bl	801b5a0 <free>
				free(s1);
 800256e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002570:	f019 f816 	bl	801b5a0 <free>
				free(s2);
 8002574:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002576:	f019 f813 	bl	801b5a0 <free>
				free(s3);
 800257a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800257c:	f019 f810 	bl	801b5a0 <free>
				free(s4);
 8002580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002582:	f019 f80d 	bl	801b5a0 <free>
				free(s5);
 8002586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002588:	f019 f80a 	bl	801b5a0 <free>
}
 800258c:	e2da      	b.n	8002b44 <json_input+0xe30>
 800258e:	bf00      	nop
 8002590:	2000136c 	.word	0x2000136c
 8002594:	080208b0 	.word	0x080208b0
 8002598:	080207fc 	.word	0x080207fc
 800259c:	080208c4 	.word	0x080208c4
 80025a0:	080208cc 	.word	0x080208cc
 80025a4:	080208dc 	.word	0x080208dc
 80025a8:	08020828 	.word	0x08020828
 80025ac:	08020830 	.word	0x08020830
 80025b0:	200013cc 	.word	0x200013cc
 80025b4:	20001368 	.word	0x20001368
 80025b8:	200013c8 	.word	0x200013c8
 80025bc:	200013ac 	.word	0x200013ac
 80025c0:	20001388 	.word	0x20001388
 80025c4:	08020838 	.word	0x08020838
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 80025c8:	4bae      	ldr	r3, [pc, #696]	; (8002884 <json_input+0xb70>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	49ae      	ldr	r1, [pc, #696]	; (8002888 <json_input+0xb74>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd fdfe 	bl	80001d0 <strcmp>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 809d 	bne.w	8002716 <json_input+0xa02>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80025dc:	49ab      	ldr	r1, [pc, #684]	; (800288c <json_input+0xb78>)
 80025de:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80025e2:	f7ff fb4b 	bl	8001c7c <cJSON_GetObjectItem>
 80025e6:	4603      	mov	r3, r0
 80025e8:	49a9      	ldr	r1, [pc, #676]	; (8002890 <json_input+0xb7c>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb46 	bl	8001c7c <cJSON_GetObjectItem>
 80025f0:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80025f2:	49a6      	ldr	r1, [pc, #664]	; (800288c <json_input+0xb78>)
 80025f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80025f8:	f7ff fb40 	bl	8001c7c <cJSON_GetObjectItem>
 80025fc:	4603      	mov	r3, r0
 80025fe:	49a5      	ldr	r1, [pc, #660]	; (8002894 <json_input+0xb80>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb3b 	bl	8001c7c <cJSON_GetObjectItem>
 8002606:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002608:	49a0      	ldr	r1, [pc, #640]	; (800288c <json_input+0xb78>)
 800260a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800260e:	f7ff fb35 	bl	8001c7c <cJSON_GetObjectItem>
 8002612:	4603      	mov	r3, r0
 8002614:	49a0      	ldr	r1, [pc, #640]	; (8002898 <json_input+0xb84>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb30 	bl	8001c7c <cJSON_GetObjectItem>
 800261c:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 800261e:	499b      	ldr	r1, [pc, #620]	; (800288c <json_input+0xb78>)
 8002620:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002624:	f7ff fb2a 	bl	8001c7c <cJSON_GetObjectItem>
 8002628:	4603      	mov	r3, r0
 800262a:	499c      	ldr	r1, [pc, #624]	; (800289c <json_input+0xb88>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fb25 	bl	8001c7c <cJSON_GetObjectItem>
 8002632:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002634:	4995      	ldr	r1, [pc, #596]	; (800288c <json_input+0xb78>)
 8002636:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800263a:	f7ff fb1f 	bl	8001c7c <cJSON_GetObjectItem>
 800263e:	4603      	mov	r3, r0
 8002640:	4997      	ldr	r1, [pc, #604]	; (80028a0 <json_input+0xb8c>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fb1a 	bl	8001c7c <cJSON_GetObjectItem>
 8002648:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 800264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4a95      	ldr	r2, [pc, #596]	; (80028a4 <json_input+0xb90>)
 8002650:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4a94      	ldr	r2, [pc, #592]	; (80028a8 <json_input+0xb94>)
 8002658:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 800265a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4a93      	ldr	r2, [pc, #588]	; (80028ac <json_input+0xb98>)
 8002660:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a92      	ldr	r2, [pc, #584]	; (80028b0 <json_input+0xb9c>)
 8002668:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a91      	ldr	r2, [pc, #580]	; (80028b4 <json_input+0xba0>)
 8002670:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002672:	4891      	ldr	r0, [pc, #580]	; (80028b8 <json_input+0xba4>)
 8002674:	f000 fbd4 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 8002678:	4b82      	ldr	r3, [pc, #520]	; (8002884 <json_input+0xb70>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fbcf 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002682:	488d      	ldr	r0, [pc, #564]	; (80028b8 <json_input+0xba4>)
 8002684:	f000 fbcc 	bl	8002e20 <SEND_str>
				SEND_str(A_IN);
 8002688:	4b86      	ldr	r3, [pc, #536]	; (80028a4 <json_input+0xb90>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fbc7 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002692:	4889      	ldr	r0, [pc, #548]	; (80028b8 <json_input+0xba4>)
 8002694:	f000 fbc4 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_LOW);
 8002698:	4b83      	ldr	r3, [pc, #524]	; (80028a8 <json_input+0xb94>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fbbf 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80026a2:	4885      	ldr	r0, [pc, #532]	; (80028b8 <json_input+0xba4>)
 80026a4:	f000 fbbc 	bl	8002e20 <SEND_str>
				SEND_str(RANGE_HIGH);
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <json_input+0xb98>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fbb7 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80026b2:	4881      	ldr	r0, [pc, #516]	; (80028b8 <json_input+0xba4>)
 80026b4:	f000 fbb4 	bl	8002e20 <SEND_str>
				SEND_str(A_OUT);
 80026b8:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <json_input+0xb9c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fbaf 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80026c2:	487d      	ldr	r0, [pc, #500]	; (80028b8 <json_input+0xba4>)
 80026c4:	f000 fbac 	bl	8002e20 <SEND_str>
				SEND_str(VAR_OUT);
 80026c8:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <json_input+0xba0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fba7 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80026d2:	4879      	ldr	r0, [pc, #484]	; (80028b8 <json_input+0xba4>)
 80026d4:	f000 fba4 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 80026d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026dc:	f7fe fcee 	bl	80010bc <cJSON_Delete>
				free(stime);
 80026e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026e4:	f018 ff5c 	bl	801b5a0 <free>
				free(sInstruction);
 80026e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026ec:	f018 ff58 	bl	801b5a0 <free>
				free(sType);
 80026f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026f2:	f018 ff55 	bl	801b5a0 <free>
				free(s1);
 80026f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026f8:	f018 ff52 	bl	801b5a0 <free>
				free(s2);
 80026fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026fe:	f018 ff4f 	bl	801b5a0 <free>
				free(s3);
 8002702:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002704:	f018 ff4c 	bl	801b5a0 <free>
				free(s4);
 8002708:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800270a:	f018 ff49 	bl	801b5a0 <free>
				free(s5);
 800270e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002710:	f018 ff46 	bl	801b5a0 <free>
}
 8002714:	e216      	b.n	8002b44 <json_input+0xe30>
				cJSON_Delete(json);
 8002716:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800271a:	f7fe fccf 	bl	80010bc <cJSON_Delete>
				free(stime);
 800271e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002722:	f018 ff3d 	bl	801b5a0 <free>
				free(sInstruction);
 8002726:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800272a:	f018 ff39 	bl	801b5a0 <free>
				free(sType);
 800272e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002730:	f018 ff36 	bl	801b5a0 <free>
}
 8002734:	e206      	b.n	8002b44 <json_input+0xe30>
		else if(strcmp(INSTRUCTION, "UPDATE_FIRMWARE") == 0)
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <json_input+0xba8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4961      	ldr	r1, [pc, #388]	; (80028c0 <json_input+0xbac>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fd47 	bl	80001d0 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 80d1 	bne.w	80028ec <json_input+0xbd8>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 800274a:	4950      	ldr	r1, [pc, #320]	; (800288c <json_input+0xb78>)
 800274c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002750:	f7ff fa94 	bl	8001c7c <cJSON_GetObjectItem>
 8002754:	4603      	mov	r3, r0
 8002756:	495b      	ldr	r1, [pc, #364]	; (80028c4 <json_input+0xbb0>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fa8f 	bl	8001c7c <cJSON_GetObjectItem>
 800275e:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a47      	ldr	r2, [pc, #284]	; (8002884 <json_input+0xb70>)
 8002766:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "FILE_DOWNLOAD") == 0)
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <json_input+0xb70>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4956      	ldr	r1, [pc, #344]	; (80028c8 <json_input+0xbb4>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd2e 	bl	80001d0 <strcmp>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d158      	bne.n	800282c <json_input+0xb18>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "NAME");
 800277a:	4944      	ldr	r1, [pc, #272]	; (800288c <json_input+0xb78>)
 800277c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002780:	f7ff fa7c 	bl	8001c7c <cJSON_GetObjectItem>
 8002784:	4603      	mov	r3, r0
 8002786:	4951      	ldr	r1, [pc, #324]	; (80028cc <json_input+0xbb8>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fa77 	bl	8001c7c <cJSON_GetObjectItem>
 800278e:	66b8      	str	r0, [r7, #104]	; 0x68
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VERSION");
 8002790:	493e      	ldr	r1, [pc, #248]	; (800288c <json_input+0xb78>)
 8002792:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002796:	f7ff fa71 	bl	8001c7c <cJSON_GetObjectItem>
 800279a:	4603      	mov	r3, r0
 800279c:	494c      	ldr	r1, [pc, #304]	; (80028d0 <json_input+0xbbc>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fa6c 	bl	8001c7c <cJSON_GetObjectItem>
 80027a4:	6678      	str	r0, [r7, #100]	; 0x64
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SIZE");
 80027a6:	4939      	ldr	r1, [pc, #228]	; (800288c <json_input+0xb78>)
 80027a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027ac:	f7ff fa66 	bl	8001c7c <cJSON_GetObjectItem>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4948      	ldr	r1, [pc, #288]	; (80028d4 <json_input+0xbc0>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fa61 	bl	8001c7c <cJSON_GetObjectItem>
 80027ba:	6638      	str	r0, [r7, #96]	; 0x60
				NAME_FW = s1->valuestring;
 80027bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <json_input+0xbc4>)
 80027c2:	6013      	str	r3, [r2, #0]
				VERSION_FW = s2->valuestring;
 80027c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4a44      	ldr	r2, [pc, #272]	; (80028dc <json_input+0xbc8>)
 80027ca:	6013      	str	r3, [r2, #0]
				SIZE_FW = s3->valuestring;
 80027cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <json_input+0xbcc>)
 80027d2:	6013      	str	r3, [r2, #0]
				firmware.NAME = NAME_FW;
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <json_input+0xbc4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <json_input+0xbd0>)
 80027da:	6013      	str	r3, [r2, #0]
				firmware.VERSION = VERSION_FW;
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <json_input+0xbc8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <json_input+0xbd0>)
 80027e2:	6053      	str	r3, [r2, #4]
				firmware.SIZE = atoi(SIZE_FW);
 80027e4:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <json_input+0xbcc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f018 fe96 	bl	801b51a <atoi>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <json_input+0xbd0>)
 80027f2:	609a      	str	r2, [r3, #8]
				firmware.check_UPD = true;
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <json_input+0xbd0>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	731a      	strb	r2, [r3, #12]
				cJSON_Delete(json);
 80027fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027fe:	f7fe fc5d 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002802:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002806:	f018 fecb 	bl	801b5a0 <free>
				free(sInstruction);
 800280a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800280e:	f018 fec7 	bl	801b5a0 <free>
				free(sType);
 8002812:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002814:	f018 fec4 	bl	801b5a0 <free>
				free(s1);
 8002818:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800281a:	f018 fec1 	bl	801b5a0 <free>
				free(s2);
 800281e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002820:	f018 febe 	bl	801b5a0 <free>
				free(s3);
 8002824:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002826:	f018 febb 	bl	801b5a0 <free>
}
 800282a:	e18b      	b.n	8002b44 <json_input+0xe30>
			else if(strcmp(TYPE, "RESET_MCU") == 0)
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <json_input+0xb70>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	492d      	ldr	r1, [pc, #180]	; (80028e8 <json_input+0xbd4>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fccc 	bl	80001d0 <strcmp>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d111      	bne.n	8002862 <json_input+0xb4e>
				cJSON_Delete(json);
 800283e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002842:	f7fe fc3b 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002846:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800284a:	f018 fea9 	bl	801b5a0 <free>
				free(sInstruction);
 800284e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002852:	f018 fea5 	bl	801b5a0 <free>
				free(sType);
 8002856:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002858:	f018 fea2 	bl	801b5a0 <free>
				HAL_NVIC_SystemReset();		//Перезапускаем контроллер
 800285c:	f007 ff39 	bl	800a6d2 <HAL_NVIC_SystemReset>
}
 8002860:	e170      	b.n	8002b44 <json_input+0xe30>
				cJSON_Delete(json);
 8002862:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002866:	f7fe fc29 	bl	80010bc <cJSON_Delete>
				free(stime);
 800286a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800286e:	f018 fe97 	bl	801b5a0 <free>
				free(sInstruction);
 8002872:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002876:	f018 fe93 	bl	801b5a0 <free>
				free(sType);
 800287a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800287c:	f018 fe90 	bl	801b5a0 <free>
}
 8002880:	e160      	b.n	8002b44 <json_input+0xe30>
 8002882:	bf00      	nop
 8002884:	2000136c 	.word	0x2000136c
 8002888:	080208ec 	.word	0x080208ec
 800288c:	080207fc 	.word	0x080207fc
 8002890:	08020858 	.word	0x08020858
 8002894:	08020860 	.word	0x08020860
 8002898:	0802086c 	.word	0x0802086c
 800289c:	080208f8 	.word	0x080208f8
 80028a0:	08020830 	.word	0x08020830
 80028a4:	200013c0 	.word	0x200013c0
 80028a8:	2000138c 	.word	0x2000138c
 80028ac:	200013b0 	.word	0x200013b0
 80028b0:	200013a8 	.word	0x200013a8
 80028b4:	20001388 	.word	0x20001388
 80028b8:	08020838 	.word	0x08020838
 80028bc:	200013c4 	.word	0x200013c4
 80028c0:	08020900 	.word	0x08020900
 80028c4:	08020804 	.word	0x08020804
 80028c8:	08020910 	.word	0x08020910
 80028cc:	08020920 	.word	0x08020920
 80028d0:	08020928 	.word	0x08020928
 80028d4:	08020930 	.word	0x08020930
 80028d8:	200013d4 	.word	0x200013d4
 80028dc:	2000139c 	.word	0x2000139c
 80028e0:	200013d8 	.word	0x200013d8
 80028e4:	200012b8 	.word	0x200012b8
 80028e8:	08020938 	.word	0x08020938
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 80028ec:	4b98      	ldr	r3, [pc, #608]	; (8002b50 <json_input+0xe3c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4998      	ldr	r1, [pc, #608]	; (8002b54 <json_input+0xe40>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fc6c 	bl	80001d0 <strcmp>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8111 	bne.w	8002b22 <json_input+0xe0e>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002900:	4995      	ldr	r1, [pc, #596]	; (8002b58 <json_input+0xe44>)
 8002902:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002906:	f7ff f9b9 	bl	8001c7c <cJSON_GetObjectItem>
 800290a:	4603      	mov	r3, r0
 800290c:	4993      	ldr	r1, [pc, #588]	; (8002b5c <json_input+0xe48>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f9b4 	bl	8001c7c <cJSON_GetObjectItem>
 8002914:	67f8      	str	r0, [r7, #124]	; 0x7c
			TYPE = sType->valuestring;
 8002916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	4a91      	ldr	r2, [pc, #580]	; (8002b60 <json_input+0xe4c>)
 800291c:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 800291e:	4b90      	ldr	r3, [pc, #576]	; (8002b60 <json_input+0xe4c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4990      	ldr	r1, [pc, #576]	; (8002b64 <json_input+0xe50>)
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc53 	bl	80001d0 <strcmp>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d14f      	bne.n	80029d0 <json_input+0xcbc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002930:	4989      	ldr	r1, [pc, #548]	; (8002b58 <json_input+0xe44>)
 8002932:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002936:	f7ff f9a1 	bl	8001c7c <cJSON_GetObjectItem>
 800293a:	4603      	mov	r3, r0
 800293c:	498a      	ldr	r1, [pc, #552]	; (8002b68 <json_input+0xe54>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f99c 	bl	8001c7c <cJSON_GetObjectItem>
 8002944:	6738      	str	r0, [r7, #112]	; 0x70
				DigitalParamMass = s1->valuestring;
 8002946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a88      	ldr	r2, [pc, #544]	; (8002b6c <json_input+0xe58>)
 800294c:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(DigitalParamMass);
 800294e:	4b87      	ldr	r3, [pc, #540]	; (8002b6c <json_input+0xe58>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f9b0 	bl	8001cb8 <parseValue>
 8002958:	4602      	mov	r2, r0
 800295a:	4b85      	ldr	r3, [pc, #532]	; (8002b70 <json_input+0xe5c>)
 800295c:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002964:	e012      	b.n	800298c <json_input+0xc78>
					Status_DIN[i] = (MyFile[i] - 0x30);
 8002966:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <json_input+0xe5c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3b30      	subs	r3, #48	; 0x30
 8002974:	b2d9      	uxtb	r1, r3
 8002976:	4a7f      	ldr	r2, [pc, #508]	; (8002b74 <json_input+0xe60>)
 8002978:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800297c:	4413      	add	r3, r2
 800297e:	460a      	mov	r2, r1
 8002980:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002986:	3301      	adds	r3, #1
 8002988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800298c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002990:	2b07      	cmp	r3, #7
 8002992:	dde8      	ble.n	8002966 <json_input+0xc52>
				SEND_str("\n");
 8002994:	4878      	ldr	r0, [pc, #480]	; (8002b78 <json_input+0xe64>)
 8002996:	f000 fa43 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 800299a:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <json_input+0xe4c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fa3e 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 80029a4:	4874      	ldr	r0, [pc, #464]	; (8002b78 <json_input+0xe64>)
 80029a6:	f000 fa3b 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 80029aa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029ae:	f7fe fb85 	bl	80010bc <cJSON_Delete>
				free(stime);
 80029b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80029b6:	f018 fdf3 	bl	801b5a0 <free>
				free(sInstruction);
 80029ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80029be:	f018 fdef 	bl	801b5a0 <free>
				free(sType);
 80029c2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80029c4:	f018 fdec 	bl	801b5a0 <free>
				free(s1);
 80029c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80029ca:	f018 fde9 	bl	801b5a0 <free>
}
 80029ce:	e0b9      	b.n	8002b44 <json_input+0xe30>
			else if(strcmp(TYPE, "ANALOG") == 0)
 80029d0:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <json_input+0xe4c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4969      	ldr	r1, [pc, #420]	; (8002b7c <json_input+0xe68>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fbfa 	bl	80001d0 <strcmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d14f      	bne.n	8002a82 <json_input+0xd6e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80029e2:	495d      	ldr	r1, [pc, #372]	; (8002b58 <json_input+0xe44>)
 80029e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029e8:	f7ff f948 	bl	8001c7c <cJSON_GetObjectItem>
 80029ec:	4603      	mov	r3, r0
 80029ee:	495e      	ldr	r1, [pc, #376]	; (8002b68 <json_input+0xe54>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f943 	bl	8001c7c <cJSON_GetObjectItem>
 80029f6:	6778      	str	r0, [r7, #116]	; 0x74
				AnalogParamMass = s1->valuestring;
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a60      	ldr	r2, [pc, #384]	; (8002b80 <json_input+0xe6c>)
 80029fe:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(AnalogParamMass);
 8002a00:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <json_input+0xe6c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f957 	bl	8001cb8 <parseValue>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <json_input+0xe5c>)
 8002a0e:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a16:	e012      	b.n	8002a3e <json_input+0xd2a>
					Status_AIN[i] = (MyFile[i] - 0x30);
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <json_input+0xe5c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a20:	4413      	add	r3, r2
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3b30      	subs	r3, #48	; 0x30
 8002a26:	b2d9      	uxtb	r1, r3
 8002a28:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <json_input+0xe70>)
 8002a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a2e:	4413      	add	r3, r2
 8002a30:	460a      	mov	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a42:	2b07      	cmp	r3, #7
 8002a44:	dde8      	ble.n	8002a18 <json_input+0xd04>
				SEND_str("\n");
 8002a46:	484c      	ldr	r0, [pc, #304]	; (8002b78 <json_input+0xe64>)
 8002a48:	f000 f9ea 	bl	8002e20 <SEND_str>
				SEND_str(TYPE);
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <json_input+0xe4c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f9e5 	bl	8002e20 <SEND_str>
				SEND_str("\n");
 8002a56:	4848      	ldr	r0, [pc, #288]	; (8002b78 <json_input+0xe64>)
 8002a58:	f000 f9e2 	bl	8002e20 <SEND_str>
				cJSON_Delete(json);
 8002a5c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a60:	f7fe fb2c 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002a64:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a68:	f018 fd9a 	bl	801b5a0 <free>
				free(sInstruction);
 8002a6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a70:	f018 fd96 	bl	801b5a0 <free>
				free(sType);
 8002a74:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002a76:	f018 fd93 	bl	801b5a0 <free>
				free(s1);
 8002a7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a7c:	f018 fd90 	bl	801b5a0 <free>
}
 8002a80:	e060      	b.n	8002b44 <json_input+0xe30>
			else if(strcmp(TYPE, "OCD") == 0)
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <json_input+0xe4c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4940      	ldr	r1, [pc, #256]	; (8002b88 <json_input+0xe74>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fba1 	bl	80001d0 <strcmp>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d157      	bne.n	8002b44 <json_input+0xe30>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002a94:	4930      	ldr	r1, [pc, #192]	; (8002b58 <json_input+0xe44>)
 8002a96:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a9a:	f7ff f8ef 	bl	8001c7c <cJSON_GetObjectItem>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4931      	ldr	r1, [pc, #196]	; (8002b68 <json_input+0xe54>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f8ea 	bl	8001c7c <cJSON_GetObjectItem>
 8002aa8:	67b8      	str	r0, [r7, #120]	; 0x78
				OpenCollectorDrainParamMass = s1->valuestring;
 8002aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	4a37      	ldr	r2, [pc, #220]	; (8002b8c <json_input+0xe78>)
 8002ab0:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(OpenCollectorDrainParamMass);
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <json_input+0xe78>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f8fe 	bl	8001cb8 <parseValue>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <json_input+0xe5c>)
 8002ac0:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ac8:	e012      	b.n	8002af0 <json_input+0xddc>
					Status_OCD[i] = (MyFile[i] - 0x30);
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <json_input+0xe5c>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3b30      	subs	r3, #48	; 0x30
 8002ad8:	b2d9      	uxtb	r1, r3
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <json_input+0xe7c>)
 8002adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af4:	2b07      	cmp	r3, #7
 8002af6:	dde8      	ble.n	8002aca <json_input+0xdb6>
				ReWriteOCD();
 8002af8:	f005 fcca 	bl	8008490 <ReWriteOCD>
				cJSON_Delete(json);
 8002afc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002b00:	f7fe fadc 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002b04:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b08:	f018 fd4a 	bl	801b5a0 <free>
				free(sInstruction);
 8002b0c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b10:	f018 fd46 	bl	801b5a0 <free>
				free(sType);
 8002b14:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b16:	f018 fd43 	bl	801b5a0 <free>
				free(s1);
 8002b1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b1c:	f018 fd40 	bl	801b5a0 <free>
}
 8002b20:	e010      	b.n	8002b44 <json_input+0xe30>
			free(stime);
 8002b22:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b26:	f018 fd3b 	bl	801b5a0 <free>
			free(sInstruction);
 8002b2a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b2e:	f018 fd37 	bl	801b5a0 <free>
}
 8002b32:	e007      	b.n	8002b44 <json_input+0xe30>
		cJSON_Delete(json);
 8002b34:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002b38:	f7fe fac0 	bl	80010bc <cJSON_Delete>
		free(stime);
 8002b3c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b40:	f018 fd2e 	bl	801b5a0 <free>
}
 8002b44:	bf00      	nop
 8002b46:	379c      	adds	r7, #156	; 0x9c
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	ecbd 8b04 	vpop	{d8-d9}
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	200013c4 	.word	0x200013c4
 8002b54:	08020944 	.word	0x08020944
 8002b58:	080207fc 	.word	0x080207fc
 8002b5c:	08020804 	.word	0x08020804
 8002b60:	2000136c 	.word	0x2000136c
 8002b64:	08020954 	.word	0x08020954
 8002b68:	0802095c 	.word	0x0802095c
 8002b6c:	20001370 	.word	0x20001370
 8002b70:	200016c4 	.word	0x200016c4
 8002b74:	20000ff0 	.word	0x20000ff0
 8002b78:	08020838 	.word	0x08020838
 8002b7c:	08020960 	.word	0x08020960
 8002b80:	20001398 	.word	0x20001398
 8002b84:	20000fe8 	.word	0x20000fe8
 8002b88:	08020968 	.word	0x08020968
 8002b8c:	200013d0 	.word	0x200013d0
 8002b90:	20000ff8 	.word	0x20000ff8

08002b94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002ba8:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <MX_ADC1_Init+0xf4>)
 8002baa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bb4:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002bba:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bd8:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002be6:	2204      	movs	r2, #4
 8002be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bf8:	4822      	ldr	r0, [pc, #136]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002bfa:	f007 f889 	bl	8009d10 <HAL_ADC_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002c04:	f000 fda2 	bl	800374c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c14:	463b      	mov	r3, r7
 8002c16:	4619      	mov	r1, r3
 8002c18:	481a      	ldr	r0, [pc, #104]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002c1a:	f007 f9c3 	bl	8009fa4 <HAL_ADC_ConfigChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002c24:	f000 fd92 	bl	800374c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c28:	2304      	movs	r3, #4
 8002c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c30:	463b      	mov	r3, r7
 8002c32:	4619      	mov	r1, r3
 8002c34:	4813      	ldr	r0, [pc, #76]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002c36:	f007 f9b5 	bl	8009fa4 <HAL_ADC_ConfigChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002c40:	f000 fd84 	bl	800374c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c44:	2305      	movs	r3, #5
 8002c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002c52:	f007 f9a7 	bl	8009fa4 <HAL_ADC_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002c5c:	f000 fd76 	bl	800374c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c60:	2306      	movs	r3, #6
 8002c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002c64:	2304      	movs	r3, #4
 8002c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_ADC1_Init+0xf0>)
 8002c6e:	f007 f999 	bl	8009fa4 <HAL_ADC_ConfigChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002c78:	f000 fd68 	bl	800374c <Error_Handler>
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200013dc 	.word	0x200013dc
 8002c88:	40012000 	.word	0x40012000

08002c8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <HAL_ADC_MspInit+0xdc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d157      	bne.n	8002d5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_ADC_MspInit+0xe0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8002ce6:	2378      	movs	r3, #120	; 0x78
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cea:	2303      	movs	r3, #3
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	481d      	ldr	r0, [pc, #116]	; (8002d70 <HAL_ADC_MspInit+0xe4>)
 8002cfa:	f009 f96f 	bl	800bfdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_ADC_MspInit+0xec>)
 8002d02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d42:	480c      	ldr	r0, [pc, #48]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d44:	f007 fd18 	bl	800a778 <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d4e:	f000 fcfd 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_ADC_MspInit+0xe8>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40012000 	.word	0x40012000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	20001424 	.word	0x20001424
 8002d78:	40026410 	.word	0x40026410

08002d7c <UPD_firmware>:

//Функция обновления прошивки
//Принимает "pack" - указатель на строку даннных
//Возвращает указатель на строку статуса процесса обновления прошивки
char *UPD_firmware(char *pack)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b08b      	sub	sp, #44	; 0x2c
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
	//Запись посылки но 1024 байт, прикрепляем к концу посылки еще 4 байта контрольной суммы, итого 1028 байт в посылки каждый раз.
	//Буфер можно попробовать увеличить
	//Следующую посылку посылать с сервера только после получения обратного сообщения что контрольная сумма сошлась
	//Если посылка последнего пакета байт получается не кратная 4 то ее необходимо дополнить системными единицами памяти(FFh), до 1024 байт + 4 байта CRC = 1028 байт
	char tmp_crc32[9];
	sprintf(tmp_crc32, "%02X%02X%02X%02X", pack[1024], pack[1025], pack[1026] ,pack[1027]);	//Вытаскиваем последние 4 байта(CRC16)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f203 4301 	addw	r3, r3, #1025	; 0x401
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461c      	mov	r4, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f107 0010 	add.w	r0, r7, #16
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	9200      	str	r2, [sp, #0]
 8002db2:	4623      	mov	r3, r4
 8002db4:	460a      	mov	r2, r1
 8002db6:	490c      	ldr	r1, [pc, #48]	; (8002de8 <UPD_firmware+0x6c>)
 8002db8:	f019 f9dc 	bl	801c174 <siprintf>
	char *pEnd;
	uint32_t crc32 = (uint32_t)(strtol(tmp_crc32, &pEnd, 16));
 8002dbc:	f107 010c 	add.w	r1, r7, #12
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f01a f8c2 	bl	801cf50 <strtol>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	61fb      	str	r3, [r7, #28]
	return (my_write_file_firmware(firmware.NAME, pack, crc32));		//atoi(tmp_crc16)
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <UPD_firmware+0x70>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fa59 	bl	8007290 <my_write_file_firmware>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3724      	adds	r7, #36	; 0x24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	0802096c 	.word	0x0802096c
 8002dec:	200012b8 	.word	0x200012b8

08002df0 <USART_Tx>:
//extern uint32_t size_of_data;

//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8002dfa:	bf00      	nop
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <USART_Tx+0x2c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f9      	beq.n	8002dfc <USART_Tx+0xc>
	USART3->DR = Data;
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <USART_Tx+0x2c>)
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	6053      	str	r3, [r2, #4]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40004800 	.word	0x40004800

08002e20 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002e2c:	e009      	b.n	8002e42 <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ffda 	bl	8002df0 <USART_Tx>
		i++;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <SEND_str+0xe>
	}
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
	if(dbg_available())
 8002e5e:	f001 fc75 	bl	800474c <dbg_available>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8102 	beq.w	800306e <DEBUG_main+0x216>
	{
		uint16_t i = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8002e72:	f240 4206 	movw	r2, #1030	; 0x406
 8002e76:	2100      	movs	r1, #0
 8002e78:	487f      	ldr	r0, [pc, #508]	; (8003078 <DEBUG_main+0x220>)
 8002e7a:	f018 fbde 	bl	801b63a <memset>
		HAL_Delay(50);
 8002e7e:	2032      	movs	r0, #50	; 0x32
 8002e80:	f006 ff24 	bl	8009ccc <HAL_Delay>

		while(dbg_available())
 8002e84:	e012      	b.n	8002eac <DEBUG_main+0x54>
		{
			DBG_buf[i++] = dbg_read();
 8002e86:	f001 fc85 	bl	8004794 <dbg_read>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	80fa      	strh	r2, [r7, #6]
 8002e94:	461a      	mov	r2, r3
 8002e96:	b2c9      	uxtb	r1, r1
 8002e98:	4b77      	ldr	r3, [pc, #476]	; (8003078 <DEBUG_main+0x220>)
 8002e9a:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	f240 4205 	movw	r2, #1029	; 0x405
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d808      	bhi.n	8002eb8 <DEBUG_main+0x60>
				break;
			HAL_Delay(1);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f006 ff10 	bl	8009ccc <HAL_Delay>
		while(dbg_available())
 8002eac:	f001 fc4e 	bl	800474c <dbg_available>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e7      	bne.n	8002e86 <DEBUG_main+0x2e>
 8002eb6:	e000      	b.n	8002eba <DEBUG_main+0x62>
				break;
 8002eb8:	bf00      	nop
		}
		clear_string(DBG_buf);
 8002eba:	486f      	ldr	r0, [pc, #444]	; (8003078 <DEBUG_main+0x220>)
 8002ebc:	f005 faa8 	bl	8008410 <clear_string>
		//-------------------------------------------UPD Firmware to USB----------------------------------------
		if(firmware.check_UPD)
 8002ec0:	4b6e      	ldr	r3, [pc, #440]	; (800307c <DEBUG_main+0x224>)
 8002ec2:	7b1b      	ldrb	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <DEBUG_main+0x80>
			SEND_str(UPD_firmware(DBG_buf));
 8002ec8:	486b      	ldr	r0, [pc, #428]	; (8003078 <DEBUG_main+0x220>)
 8002eca:	f7ff ff57 	bl	8002d7c <UPD_firmware>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ffa5 	bl	8002e20 <SEND_str>
 8002ed6:	e002      	b.n	8002ede <DEBUG_main+0x86>
		else
			json_input(DBG_buf);		//здесь принимаем посылку и отправляем парситься
 8002ed8:	4867      	ldr	r0, [pc, #412]	; (8003078 <DEBUG_main+0x220>)
 8002eda:	f7fe ff1b 	bl	8001d14 <json_input>
		//-----------------------------------------END UPD Firmware to USB--------------------------------------
		//---------------------------------------------Old function---------------------------------------------
		if(strstr(DBG_buf, "test") != NULL)
 8002ede:	4968      	ldr	r1, [pc, #416]	; (8003080 <DEBUG_main+0x228>)
 8002ee0:	4865      	ldr	r0, [pc, #404]	; (8003078 <DEBUG_main+0x220>)
 8002ee2:	f019 f979 	bl	801c1d8 <strstr>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <DEBUG_main+0x9c>
		{
			SEND_str("respone\n");
 8002eec:	4865      	ldr	r0, [pc, #404]	; (8003084 <DEBUG_main+0x22c>)
 8002eee:	f7ff ff97 	bl	8002e20 <SEND_str>
 8002ef2:	e0b2      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "AIN") != NULL)
 8002ef4:	4964      	ldr	r1, [pc, #400]	; (8003088 <DEBUG_main+0x230>)
 8002ef6:	4860      	ldr	r0, [pc, #384]	; (8003078 <DEBUG_main+0x220>)
 8002ef8:	f019 f96e 	bl	801c1d8 <strstr>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <DEBUG_main+0xb2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8002f02:	4862      	ldr	r0, [pc, #392]	; (800308c <DEBUG_main+0x234>)
 8002f04:	f7fe ff06 	bl	8001d14 <json_input>
 8002f08:	e0a7      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8002f0a:	4961      	ldr	r1, [pc, #388]	; (8003090 <DEBUG_main+0x238>)
 8002f0c:	485a      	ldr	r0, [pc, #360]	; (8003078 <DEBUG_main+0x220>)
 8002f0e:	f019 f963 	bl	801c1d8 <strstr>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <DEBUG_main+0xc8>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8002f18:	485e      	ldr	r0, [pc, #376]	; (8003094 <DEBUG_main+0x23c>)
 8002f1a:	f7fe fefb 	bl	8001d14 <json_input>
 8002f1e:	e09c      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8002f20:	495d      	ldr	r1, [pc, #372]	; (8003098 <DEBUG_main+0x240>)
 8002f22:	4855      	ldr	r0, [pc, #340]	; (8003078 <DEBUG_main+0x220>)
 8002f24:	f019 f958 	bl	801c1d8 <strstr>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <DEBUG_main+0xde>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8002f2e:	485b      	ldr	r0, [pc, #364]	; (800309c <DEBUG_main+0x244>)
 8002f30:	f7fe fef0 	bl	8001d14 <json_input>
 8002f34:	e091      	b.n	800305a <DEBUG_main+0x202>
		}
		//-------------------------------------------End Old function-------------------------------------------
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002f36:	495a      	ldr	r1, [pc, #360]	; (80030a0 <DEBUG_main+0x248>)
 8002f38:	484f      	ldr	r0, [pc, #316]	; (8003078 <DEBUG_main+0x220>)
 8002f3a:	f019 f94d 	bl	801c1d8 <strstr>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <DEBUG_main+0xf4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD2\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f44:	4857      	ldr	r0, [pc, #348]	; (80030a4 <DEBUG_main+0x24c>)
 8002f46:	f7fe fee5 	bl	8001d14 <json_input>
 8002f4a:	e086      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002f4c:	4956      	ldr	r1, [pc, #344]	; (80030a8 <DEBUG_main+0x250>)
 8002f4e:	484a      	ldr	r0, [pc, #296]	; (8003078 <DEBUG_main+0x220>)
 8002f50:	f019 f942 	bl	801c1d8 <strstr>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <DEBUG_main+0x10a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD2\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f5a:	4854      	ldr	r0, [pc, #336]	; (80030ac <DEBUG_main+0x254>)
 8002f5c:	f7fe feda 	bl	8001d14 <json_input>
 8002f60:	e07b      	b.n	800305a <DEBUG_main+0x202>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 8002f62:	4953      	ldr	r1, [pc, #332]	; (80030b0 <DEBUG_main+0x258>)
 8002f64:	4844      	ldr	r0, [pc, #272]	; (8003078 <DEBUG_main+0x220>)
 8002f66:	f019 f937 	bl	801c1d8 <strstr>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <DEBUG_main+0x120>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f70:	4850      	ldr	r0, [pc, #320]	; (80030b4 <DEBUG_main+0x25c>)
 8002f72:	f7fe fecf 	bl	8001d14 <json_input>
 8002f76:	e070      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SPVol") != NULL)		//Voltage
 8002f78:	494f      	ldr	r1, [pc, #316]	; (80030b8 <DEBUG_main+0x260>)
 8002f7a:	483f      	ldr	r0, [pc, #252]	; (8003078 <DEBUG_main+0x220>)
 8002f7c:	f019 f92c 	bl	801c1d8 <strstr>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <DEBUG_main+0x136>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"1.5\",\"RANGE_HIGH\":\"2\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f86:	484d      	ldr	r0, [pc, #308]	; (80030bc <DEBUG_main+0x264>)
 8002f88:	f7fe fec4 	bl	8001d14 <json_input>
 8002f8c:	e065      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SPCur") != NULL)	//Current
 8002f8e:	494c      	ldr	r1, [pc, #304]	; (80030c0 <DEBUG_main+0x268>)
 8002f90:	4839      	ldr	r0, [pc, #228]	; (8003078 <DEBUG_main+0x220>)
 8002f92:	f019 f921 	bl	801c1d8 <strstr>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <DEBUG_main+0x14c>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_CAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0.006\",\"RANGE_HIGH\":\"0.008\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f9c:	4849      	ldr	r0, [pc, #292]	; (80030c4 <DEBUG_main+0x26c>)
 8002f9e:	f7fe feb9 	bl	8001d14 <json_input>
 8002fa2:	e05a      	b.n	800305a <DEBUG_main+0x202>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 8002fa4:	4948      	ldr	r1, [pc, #288]	; (80030c8 <DEBUG_main+0x270>)
 8002fa6:	4834      	ldr	r0, [pc, #208]	; (8003078 <DEBUG_main+0x220>)
 8002fa8:	f019 f916 	bl	801c1d8 <strstr>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <DEBUG_main+0x162>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002fb2:	4846      	ldr	r0, [pc, #280]	; (80030cc <DEBUG_main+0x274>)
 8002fb4:	f7fe feae 	bl	8001d14 <json_input>
 8002fb8:	e04f      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002fba:	4945      	ldr	r1, [pc, #276]	; (80030d0 <DEBUG_main+0x278>)
 8002fbc:	482e      	ldr	r0, [pc, #184]	; (8003078 <DEBUG_main+0x220>)
 8002fbe:	f019 f90b 	bl	801c1d8 <strstr>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <DEBUG_main+0x178>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 8002fc8:	4842      	ldr	r0, [pc, #264]	; (80030d4 <DEBUG_main+0x27c>)
 8002fca:	f7fe fea3 	bl	8001d14 <json_input>
 8002fce:	e044      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002fd0:	4941      	ldr	r1, [pc, #260]	; (80030d8 <DEBUG_main+0x280>)
 8002fd2:	4829      	ldr	r0, [pc, #164]	; (8003078 <DEBUG_main+0x220>)
 8002fd4:	f019 f900 	bl	801c1d8 <strstr>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <DEBUG_main+0x18e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002fde:	483f      	ldr	r0, [pc, #252]	; (80030dc <DEBUG_main+0x284>)
 8002fe0:	f7fe fe98 	bl	8001d14 <json_input>
 8002fe4:	e039      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 8002fe6:	493e      	ldr	r1, [pc, #248]	; (80030e0 <DEBUG_main+0x288>)
 8002fe8:	4823      	ldr	r0, [pc, #140]	; (8003078 <DEBUG_main+0x220>)
 8002fea:	f019 f8f5 	bl	801c1d8 <strstr>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <DEBUG_main+0x1a4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 8002ff4:	483b      	ldr	r0, [pc, #236]	; (80030e4 <DEBUG_main+0x28c>)
 8002ff6:	f7fe fe8d 	bl	8001d14 <json_input>
 8002ffa:	e02e      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 8002ffc:	493a      	ldr	r1, [pc, #232]	; (80030e8 <DEBUG_main+0x290>)
 8002ffe:	481e      	ldr	r0, [pc, #120]	; (8003078 <DEBUG_main+0x220>)
 8003000:	f019 f8ea 	bl	801c1d8 <strstr>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <DEBUG_main+0x1ba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 800300a:	4838      	ldr	r0, [pc, #224]	; (80030ec <DEBUG_main+0x294>)
 800300c:	f7fe fe82 	bl	8001d14 <json_input>
 8003010:	e023      	b.n	800305a <DEBUG_main+0x202>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 8003012:	4937      	ldr	r1, [pc, #220]	; (80030f0 <DEBUG_main+0x298>)
 8003014:	4818      	ldr	r0, [pc, #96]	; (8003078 <DEBUG_main+0x220>)
 8003016:	f019 f8df 	bl	801c1d8 <strstr>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <DEBUG_main+0x1d0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"-128\",\"RANGE_TEMP_HIGH\":\"-126\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8003020:	4834      	ldr	r0, [pc, #208]	; (80030f4 <DEBUG_main+0x29c>)
 8003022:	f7fe fe77 	bl	8001d14 <json_input>
 8003026:	e018      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 8003028:	4933      	ldr	r1, [pc, #204]	; (80030f8 <DEBUG_main+0x2a0>)
 800302a:	4813      	ldr	r0, [pc, #76]	; (8003078 <DEBUG_main+0x220>)
 800302c:	f019 f8d4 	bl	801c1d8 <strstr>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <DEBUG_main+0x1e6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8003036:	4831      	ldr	r0, [pc, #196]	; (80030fc <DEBUG_main+0x2a4>)
 8003038:	f7fe fe6c 	bl	8001d14 <json_input>
 800303c:	e00d      	b.n	800305a <DEBUG_main+0x202>
		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 800303e:	4930      	ldr	r1, [pc, #192]	; (8003100 <DEBUG_main+0x2a8>)
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <DEBUG_main+0x220>)
 8003042:	f019 f8c9 	bl	801c1d8 <strstr>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <DEBUG_main+0x1fa>
		{
			my_read_file();
 800304c:	f004 f82c 	bl	80070a8 <my_read_file>
 8003050:	e003      	b.n	800305a <DEBUG_main+0x202>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8003052:	492c      	ldr	r1, [pc, #176]	; (8003104 <DEBUG_main+0x2ac>)
 8003054:	4808      	ldr	r0, [pc, #32]	; (8003078 <DEBUG_main+0x220>)
 8003056:	f019 f8bf 	bl	801c1d8 <strstr>
//		{
//			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
//			SEND_str(DBG_str);
//			json_input(DBG_str);
//		}
		if(fdbg)
 800305a:	797b      	ldrb	r3, [r7, #5]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <DEBUG_main+0x216>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <DEBUG_main+0x220>)
 8003062:	4a29      	ldr	r2, [pc, #164]	; (8003108 <DEBUG_main+0x2b0>)
 8003064:	f240 4106 	movw	r1, #1030	; 0x406
 8003068:	4828      	ldr	r0, [pc, #160]	; (800310c <DEBUG_main+0x2b4>)
 800306a:	f019 f84f 	bl	801c10c <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000280 	.word	0x20000280
 800307c:	200012b8 	.word	0x200012b8
 8003080:	08020980 	.word	0x08020980
 8003084:	08020988 	.word	0x08020988
 8003088:	08020994 	.word	0x08020994
 800308c:	08020998 	.word	0x08020998
 8003090:	08020a04 	.word	0x08020a04
 8003094:	08020a08 	.word	0x08020a08
 8003098:	08020a78 	.word	0x08020a78
 800309c:	08020a7c 	.word	0x08020a7c
 80030a0:	08020ae8 	.word	0x08020ae8
 80030a4:	08020aec 	.word	0x08020aec
 80030a8:	08020b78 	.word	0x08020b78
 80030ac:	08020b7c 	.word	0x08020b7c
 80030b0:	08020c08 	.word	0x08020c08
 80030b4:	08020c0c 	.word	0x08020c0c
 80030b8:	08020cb4 	.word	0x08020cb4
 80030bc:	08020cbc 	.word	0x08020cbc
 80030c0:	08020d60 	.word	0x08020d60
 80030c4:	08020d68 	.word	0x08020d68
 80030c8:	08020e14 	.word	0x08020e14
 80030cc:	08020e18 	.word	0x08020e18
 80030d0:	08020e88 	.word	0x08020e88
 80030d4:	08020e8c 	.word	0x08020e8c
 80030d8:	08020efc 	.word	0x08020efc
 80030dc:	08020f00 	.word	0x08020f00
 80030e0:	08020f70 	.word	0x08020f70
 80030e4:	08020f74 	.word	0x08020f74
 80030e8:	08020fe4 	.word	0x08020fe4
 80030ec:	08020fe8 	.word	0x08020fe8
 80030f0:	08021058 	.word	0x08021058
 80030f4:	0802105c 	.word	0x0802105c
 80030f8:	08021124 	.word	0x08021124
 80030fc:	08021128 	.word	0x08021128
 8003100:	080211ec 	.word	0x080211ec
 8003104:	080211f4 	.word	0x080211f4
 8003108:	08021200 	.word	0x08021200
 800310c:	20000688 	.word	0x20000688

08003110 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <MX_CRC_Init+0x20>)
 8003116:	4a07      	ldr	r2, [pc, #28]	; (8003134 <MX_CRC_Init+0x24>)
 8003118:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_CRC_Init+0x20>)
 800311c:	f007 fadd 	bl	800a6da <HAL_CRC_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003126:	f000 fb11 	bl	800374c <Error_Handler>
  }

}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20001484 	.word	0x20001484
 8003134:	40023000 	.word	0x40023000

08003138 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <HAL_CRC_MspInit+0x3c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10d      	bne.n	8003166 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_CRC_MspInit+0x40>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_CRC_MspInit+0x40>)
 8003154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_CRC_MspInit+0x40>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023000 	.word	0x40023000
 8003178:	40023800 	.word	0x40023800

0800317c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <MX_DMA_Init+0x98>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a22      	ldr	r2, [pc, #136]	; (8003214 <MX_DMA_Init+0x98>)
 800318c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <MX_DMA_Init+0x98>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <MX_DMA_Init+0x98>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <MX_DMA_Init+0x98>)
 80031a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <MX_DMA_Init+0x98>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	200d      	movs	r0, #13
 80031c0:	f007 fa5d 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031c4:	200d      	movs	r0, #13
 80031c6:	f007 fa76 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	200f      	movs	r0, #15
 80031d0:	f007 fa55 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031d4:	200f      	movs	r0, #15
 80031d6:	f007 fa6e 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	2010      	movs	r0, #16
 80031e0:	f007 fa4d 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031e4:	2010      	movs	r0, #16
 80031e6:	f007 fa66 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	202f      	movs	r0, #47	; 0x2f
 80031f0:	f007 fa45 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031f4:	202f      	movs	r0, #47	; 0x2f
 80031f6:	f007 fa5e 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2038      	movs	r0, #56	; 0x38
 8003200:	f007 fa3d 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003204:	2038      	movs	r0, #56	; 0x38
 8003206:	f007 fa56 	bl	800a6b6 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <MX_GPIO_Init+0x248>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a8a      	ldr	r2, [pc, #552]	; (8003460 <MX_GPIO_Init+0x248>)
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <MX_GPIO_Init+0x248>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	4b84      	ldr	r3, [pc, #528]	; (8003460 <MX_GPIO_Init+0x248>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a83      	ldr	r2, [pc, #524]	; (8003460 <MX_GPIO_Init+0x248>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b81      	ldr	r3, [pc, #516]	; (8003460 <MX_GPIO_Init+0x248>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <MX_GPIO_Init+0x248>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a7c      	ldr	r2, [pc, #496]	; (8003460 <MX_GPIO_Init+0x248>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b7a      	ldr	r3, [pc, #488]	; (8003460 <MX_GPIO_Init+0x248>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <MX_GPIO_Init+0x248>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a75      	ldr	r2, [pc, #468]	; (8003460 <MX_GPIO_Init+0x248>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <MX_GPIO_Init+0x248>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <MX_GPIO_Init+0x248>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <MX_GPIO_Init+0x248>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b6c      	ldr	r3, [pc, #432]	; (8003460 <MX_GPIO_Init+0x248>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b68      	ldr	r3, [pc, #416]	; (8003460 <MX_GPIO_Init+0x248>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a67      	ldr	r2, [pc, #412]	; (8003460 <MX_GPIO_Init+0x248>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <MX_GPIO_Init+0x248>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FLAG_MCU_Pin|CS2__Pin, GPIO_PIN_SET);
 80032d6:	2201      	movs	r2, #1
 80032d8:	2142      	movs	r1, #66	; 0x42
 80032da:	4862      	ldr	r0, [pc, #392]	; (8003464 <MX_GPIO_Init+0x24c>)
 80032dc:	f009 f830 	bl	800c340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e6:	4860      	ldr	r0, [pc, #384]	; (8003468 <MX_GPIO_Init+0x250>)
 80032e8:	f009 f82a 	bl	800c340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2101      	movs	r1, #1
 80032f0:	485e      	ldr	r0, [pc, #376]	; (800346c <MX_GPIO_Init+0x254>)
 80032f2:	f009 f825 	bl	800c340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2143      	movs	r1, #67	; 0x43
 80032fa:	485d      	ldr	r0, [pc, #372]	; (8003470 <MX_GPIO_Init+0x258>)
 80032fc:	f009 f820 	bl	800c340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 8003300:	2200      	movs	r2, #0
 8003302:	f64f 7181 	movw	r1, #65409	; 0xff81
 8003306:	4857      	ldr	r0, [pc, #348]	; (8003464 <MX_GPIO_Init+0x24c>)
 8003308:	f009 f81a 	bl	800c340 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 800330c:	2201      	movs	r2, #1
 800330e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003312:	4856      	ldr	r0, [pc, #344]	; (800346c <MX_GPIO_Init+0x254>)
 8003314:	f009 f814 	bl	800c340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 8003318:	2200      	movs	r2, #0
 800331a:	219b      	movs	r1, #155	; 0x9b
 800331c:	4855      	ldr	r0, [pc, #340]	; (8003474 <MX_GPIO_Init+0x25c>)
 800331e:	f009 f80f 	bl	800c340 <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8003322:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 8003326:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	4619      	mov	r1, r3
 800333a:	484a      	ldr	r0, [pc, #296]	; (8003464 <MX_GPIO_Init+0x24c>)
 800333c:	f008 fe4e 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8003340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2301      	movs	r3, #1
 8003348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4843      	ldr	r0, [pc, #268]	; (8003468 <MX_GPIO_Init+0x250>)
 800335a:	f008 fe3f 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	483d      	ldr	r0, [pc, #244]	; (8003468 <MX_GPIO_Init+0x250>)
 8003372:	f008 fe33 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 8003376:	f640 0301 	movw	r3, #2049	; 0x801
 800337a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337c:	2301      	movs	r3, #1
 800337e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	4837      	ldr	r0, [pc, #220]	; (800346c <MX_GPIO_Init+0x254>)
 8003390:	f008 fe24 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8003394:	2343      	movs	r3, #67	; 0x43
 8003396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	2301      	movs	r3, #1
 800339a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	4619      	mov	r1, r3
 80033aa:	4831      	ldr	r0, [pc, #196]	; (8003470 <MX_GPIO_Init+0x258>)
 80033ac:	f008 fe16 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 80033b0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80033b4:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <MX_GPIO_Init+0x260>)
 80033b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	482b      	ldr	r0, [pc, #172]	; (8003474 <MX_GPIO_Init+0x25c>)
 80033c6:	f008 fe09 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80033ce:	2311      	movs	r3, #17
 80033d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033d6:	2302      	movs	r3, #2
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4619      	mov	r1, r3
 80033e0:	4824      	ldr	r0, [pc, #144]	; (8003474 <MX_GPIO_Init+0x25c>)
 80033e2:	f008 fdfb 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 80033e6:	239a      	movs	r3, #154	; 0x9a
 80033e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f2:	2303      	movs	r3, #3
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f6:	f107 031c 	add.w	r3, r7, #28
 80033fa:	4619      	mov	r1, r3
 80033fc:	481d      	ldr	r0, [pc, #116]	; (8003474 <MX_GPIO_Init+0x25c>)
 80033fe:	f008 fded 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	4816      	ldr	r0, [pc, #88]	; (8003470 <MX_GPIO_Init+0x258>)
 8003416:	f008 fde1 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS2__Pin;
 800341a:	2302      	movs	r3, #2
 800341c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS2__GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <MX_GPIO_Init+0x24c>)
 8003432:	f008 fdd3 	bl	800bfdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2017      	movs	r0, #23
 800343c:	f007 f91f 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003440:	2017      	movs	r0, #23
 8003442:	f007 f938 	bl	800a6b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	2028      	movs	r0, #40	; 0x28
 800344c:	f007 f917 	bl	800a67e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003450:	2028      	movs	r0, #40	; 0x28
 8003452:	f007 f930 	bl	800a6b6 <HAL_NVIC_EnableIRQ>

}
 8003456:	bf00      	nop
 8003458:	3730      	adds	r7, #48	; 0x30
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	40021000 	.word	0x40021000
 8003468:	40020800 	.word	0x40020800
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40020c00 	.word	0x40020c00
 8003478:	10310000 	.word	0x10310000

0800347c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003480:	f006 fbe2 	bl	8009c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003484:	f000 f848 	bl	8003518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003488:	f7ff fec6 	bl	8003218 <MX_GPIO_Init>
  MX_DMA_Init();
 800348c:	f7ff fe76 	bl	800317c <MX_DMA_Init>
  MX_ADC1_Init();
 8003490:	f7ff fb80 	bl	8002b94 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003494:	f000 f9d2 	bl	800383c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003498:	f000 fa06 	bl	80038a8 <MX_SPI2_Init>
  MX_TIM3_Init();
 800349c:	f000 fd7e 	bl	8003f9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80034a0:	f001 f808 	bl	80044b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80034a4:	f001 f830 	bl	8004508 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80034a8:	f001 f858 	bl	800455c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80034ac:	f00b ffbc 	bl	800f428 <MX_LWIP_Init>
  MX_TIM4_Init();
 80034b0:	f000 fdf0 	bl	8004094 <MX_TIM4_Init>
  MX_RTC_Init();
 80034b4:	f000 f952 	bl	800375c <MX_RTC_Init>
  MX_TIM6_Init();
 80034b8:	f000 fe42 	bl	8004140 <MX_TIM6_Init>
  MX_CRC_Init();
 80034bc:	f7ff fe28 	bl	8003110 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);	//Ждем загрузки данных на дисплее (примерная задержка)
 80034c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c4:	f006 fc02 	bl	8009ccc <HAL_Delay>
	DWT_Init();		//Инициализация микросекундных задержек
 80034c8:	f001 f9ea 	bl	80048a0 <DWT_Init>
	HAL_CRC_MspInit(&hcrc);		//Включаем тактирование аппаратного CRC
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <main+0x88>)
 80034ce:	f7ff fe33 	bl	8003138 <HAL_CRC_MspInit>

	EN_Interrupt();		//Для дебага по USART3
 80034d2:	f001 f995 	bl	8004800 <EN_Interrupt>

												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 80034d6:	2204      	movs	r2, #4
 80034d8:	490b      	ldr	r1, [pc, #44]	; (8003508 <main+0x8c>)
 80034da:	480c      	ldr	r0, [pc, #48]	; (800350c <main+0x90>)
 80034dc:	f006 fc5c 	bl	8009d98 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80034e0:	210c      	movs	r1, #12
 80034e2:	480b      	ldr	r0, [pc, #44]	; (8003510 <main+0x94>)
 80034e4:	f00a fb86 	bl	800dbf4 <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 80034e8:	f006 fb0a 	bl	8009b00 <UpdateTempSens>
//	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК

	//----------------PWM_test------------------
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 80034ec:	f003 fdd5 	bl	800709a <my_init_card>
	SEND_str("Init sd card -> success\n");
 80034f0:	4808      	ldr	r0, [pc, #32]	; (8003514 <main+0x98>)
 80034f2:	f7ff fc95 	bl	8002e20 <SEND_str>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 80034f6:	f7ff fcaf 	bl	8002e58 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteAiDo();
 80034fa:	f005 f8bd 	bl	8008678 <CheckReWriteAiDo>
		//----------------------------------------
		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 80034fe:	f005 f96d 	bl	80087dc <CheckReWriteTSiDo>
		DEBUG_main();
 8003502:	e7f8      	b.n	80034f6 <main+0x7a>
 8003504:	20001484 	.word	0x20001484
 8003508:	20000a90 	.word	0x20000a90
 800350c:	200013dc 	.word	0x200013dc
 8003510:	200019fc 	.word	0x200019fc
 8003514:	08021204 	.word	0x08021204

08003518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b098      	sub	sp, #96	; 0x60
 800351c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800351e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003522:	2230      	movs	r2, #48	; 0x30
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f018 f887 	bl	801b63a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <SystemClock_Config+0xfc>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a30      	ldr	r2, [pc, #192]	; (8003614 <SystemClock_Config+0xfc>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <SystemClock_Config+0xfc>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <SystemClock_Config+0x100>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <SystemClock_Config+0x100>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <SystemClock_Config+0x100>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003582:	2305      	movs	r3, #5
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800358c:	2301      	movs	r3, #1
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003590:	2302      	movs	r3, #2
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800359a:	2304      	movs	r3, #4
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800359e:	23a8      	movs	r3, #168	; 0xa8
 80035a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a2:	2302      	movs	r3, #2
 80035a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035a6:	2304      	movs	r3, #4
 80035a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035ae:	4618      	mov	r0, r3
 80035b0:	f008 fef8 	bl	800c3a4 <HAL_RCC_OscConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80035ba:	f000 f8c7 	bl	800374c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035be:	230f      	movs	r3, #15
 80035c0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c2:	2302      	movs	r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035d6:	f107 031c 	add.w	r3, r7, #28
 80035da:	2105      	movs	r1, #5
 80035dc:	4618      	mov	r0, r3
 80035de:	f009 f951 	bl	800c884 <HAL_RCC_ClockConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80035e8:	f000 f8b0 	bl	800374c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035ec:	2302      	movs	r3, #2
 80035ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	4618      	mov	r0, r3
 80035fc:	f009 fb66 	bl	800cccc <HAL_RCCEx_PeriphCLKConfig>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003606:	f000 f8a1 	bl	800374c <Error_Handler>
  }
}
 800360a:	bf00      	nop
 800360c:	3760      	adds	r7, #96	; 0x60
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 8003626:	f004 ff69 	bl	80084fc <CheckReWriteDiDo>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_ADC_ConvCpltCallback>:
	    	flag_iput_spi2 = 1;
	    }
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d137      	bne.n	80036b6 <HAL_ADC_ConvCpltCallback+0x82>
    {
    	adcValue[0] = Conversion_ADC1((uint16_t)adc[0], 0);
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f005 fa0a 	bl	8008a68 <Conversion_ADC1>
 8003654:	eeb0 7a40 	vmov.f32	s14, s0
 8003658:	eef0 7a60 	vmov.f32	s15, s1
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_ADC_ConvCpltCallback+0x94>)
 800365e:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1], 1);
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003664:	885b      	ldrh	r3, [r3, #2]
 8003666:	b29b      	uxth	r3, r3
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f005 f9fc 	bl	8008a68 <Conversion_ADC1>
 8003670:	eeb0 7a40 	vmov.f32	s14, s0
 8003674:	eef0 7a60 	vmov.f32	s15, s1
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_ADC_ConvCpltCallback+0x94>)
 800367a:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2], 2);
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003680:	889b      	ldrh	r3, [r3, #4]
 8003682:	b29b      	uxth	r3, r3
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f005 f9ee 	bl	8008a68 <Conversion_ADC1>
 800368c:	eeb0 7a40 	vmov.f32	s14, s0
 8003690:	eef0 7a60 	vmov.f32	s15, s1
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <HAL_ADC_ConvCpltCallback+0x94>)
 8003696:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3], 3);
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_ADC_ConvCpltCallback+0x90>)
 800369c:	88db      	ldrh	r3, [r3, #6]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2103      	movs	r1, #3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 f9e0 	bl	8008a68 <Conversion_ADC1>
 80036a8:	eeb0 7a40 	vmov.f32	s14, s0
 80036ac:	eef0 7a60 	vmov.f32	s15, s1
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_ADC_ConvCpltCallback+0x94>)
 80036b2:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40012000 	.word	0x40012000
 80036c4:	20000a90 	.word	0x20000a90
 80036c8:	20000a98 	.word	0x20000a98

080036cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a16      	ldr	r2, [pc, #88]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11f      	bne.n	800371e <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036e8:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80036f4:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)		//Запрос данных каждую ~0.8 сек (old 16: 83 to 49999)
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d102      	bne.n	8003704 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую ~1.6 сек (old 32: 83 to 49999))
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b20      	cmp	r3, #32
 800370a:	d108      	bne.n	800371e <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 8003728:	f006 fab0 	bl	8009c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40001000 	.word	0x40001000
 8003738:	20000abd 	.word	0x20000abd
 800373c:	20000abe 	.word	0x20000abe
 8003740:	20000abf 	.word	0x20000abf
 8003744:	20000ac0 	.word	0x20000ac0
 8003748:	40010000 	.word	0x40010000

0800374c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003770:	2300      	movs	r3, #0
 8003772:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <MX_RTC_Init+0xac>)
 8003776:	4a25      	ldr	r2, [pc, #148]	; (800380c <MX_RTC_Init+0xb0>)
 8003778:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <MX_RTC_Init+0xac>)
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <MX_RTC_Init+0xac>)
 8003782:	227f      	movs	r2, #127	; 0x7f
 8003784:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <MX_RTC_Init+0xac>)
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <MX_RTC_Init+0xac>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <MX_RTC_Init+0xac>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <MX_RTC_Init+0xac>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800379e:	481a      	ldr	r0, [pc, #104]	; (8003808 <MX_RTC_Init+0xac>)
 80037a0:	f009 fb76 	bl	800ce90 <HAL_RTC_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80037aa:	f7ff ffcf 	bl	800374c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80037ae:	230a      	movs	r3, #10
 80037b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 80037b2:	2322      	movs	r3, #34	; 0x22
 80037b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	2200      	movs	r2, #0
 80037c6:	4619      	mov	r1, r3
 80037c8:	480f      	ldr	r0, [pc, #60]	; (8003808 <MX_RTC_Init+0xac>)
 80037ca:	f009 fbf2 	bl	800cfb2 <HAL_RTC_SetTime>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80037d4:	f7ff ffba 	bl	800374c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80037d8:	2302      	movs	r3, #2
 80037da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80037dc:	2304      	movs	r3, #4
 80037de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 80037e0:	2314      	movs	r3, #20
 80037e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 80037e4:	2315      	movs	r3, #21
 80037e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	2200      	movs	r2, #0
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <MX_RTC_Init+0xac>)
 80037f0:	f009 fc9c 	bl	800d12c <HAL_RTC_SetDate>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80037fa:	f7ff ffa7 	bl	800374c <Error_Handler>
  }

}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200018ec 	.word	0x200018ec
 800380c:	40002800 	.word	0x40002800

08003810 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_RTC_MspInit+0x24>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d102      	bne.n	8003828 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RTC_MspInit+0x28>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40002800 	.word	0x40002800
 8003838:	42470e3c 	.word	0x42470e3c

0800383c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <MX_SPI1_Init+0x68>)
 8003844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800384c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <MX_SPI1_Init+0x64>)
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003862:	2200      	movs	r2, #0
 8003864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003870:	2210      	movs	r2, #16
 8003872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <MX_SPI1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003888:	220a      	movs	r2, #10
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800388c:	4804      	ldr	r0, [pc, #16]	; (80038a0 <MX_SPI1_Init+0x64>)
 800388e:	f009 fd66 	bl	800d35e <HAL_SPI_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003898:	f7ff ff58 	bl	800374c <Error_Handler>
  }

}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20001964 	.word	0x20001964
 80038a4:	40013000 	.word	0x40013000

080038a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038ae:	4a16      	ldr	r2, [pc, #88]	; (8003908 <MX_SPI2_Init+0x60>)
 80038b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038ec:	220a      	movs	r2, #10
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <MX_SPI2_Init+0x5c>)
 80038f2:	f009 fd34 	bl	800d35e <HAL_SPI_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80038fc:	f7ff ff26 	bl	800374c <Error_Handler>
  }

}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	2000190c 	.word	0x2000190c
 8003908:	40003800 	.word	0x40003800

0800390c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 031c 	add.w	r3, r7, #28
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <HAL_SPI_MspInit+0x134>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12c      	bne.n	8003988 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003966:	2338      	movs	r3, #56	; 0x38
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	2302      	movs	r3, #2
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003976:	2305      	movs	r3, #5
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4831      	ldr	r0, [pc, #196]	; (8003a48 <HAL_SPI_MspInit+0x13c>)
 8003982:	f008 fb2b 	bl	800bfdc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003986:	e057      	b.n	8003a38 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_SPI_MspInit+0x140>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d152      	bne.n	8003a38 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 800399c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_SPI_MspInit+0x138>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 80039e6:	230c      	movs	r3, #12
 80039e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ea:	2302      	movs	r3, #2
 80039ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f2:	2303      	movs	r3, #3
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039f6:	2305      	movs	r3, #5
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	4619      	mov	r1, r3
 8003a00:	4813      	ldr	r0, [pc, #76]	; (8003a50 <HAL_SPI_MspInit+0x144>)
 8003a02:	f008 faeb 	bl	800bfdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin;
 8003a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a18:	2305      	movs	r3, #5
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_M_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	f107 031c 	add.w	r3, r7, #28
 8003a20:	4619      	mov	r1, r3
 8003a22:	4809      	ldr	r0, [pc, #36]	; (8003a48 <HAL_SPI_MspInit+0x13c>)
 8003a24:	f008 fada 	bl	800bfdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2024      	movs	r0, #36	; 0x24
 8003a2e:	f006 fe26 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a32:	2024      	movs	r0, #36	; 0x24
 8003a34:	f006 fe3f 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
}
 8003a38:	bf00      	nop
 8003a3a:	3730      	adds	r7, #48	; 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40013000 	.word	0x40013000
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40003800 	.word	0x40003800
 8003a50:	40020800 	.word	0x40020800

08003a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_MspInit+0x4c>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	; 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	2019      	movs	r0, #25
 8003aba:	f006 fde0 	bl	800a67e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003abe:	2019      	movs	r0, #25
 8003ac0:	f006 fdf9 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <HAL_InitTick+0xa4>)
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_InitTick+0xa4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <HAL_InitTick+0xa4>)
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ae0:	f107 0210 	add.w	r2, r7, #16
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f009 f8bc 	bl	800cc68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003af0:	f009 f8a6 	bl	800cc40 <HAL_RCC_GetPCLK2Freq>
 8003af4:	4603      	mov	r3, r0
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_InitTick+0xa8>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	3b01      	subs	r3, #1
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_InitTick+0xac>)
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_InitTick+0xb0>)
 8003b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_InitTick+0xac>)
 8003b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b16:	4a0e      	ldr	r2, [pc, #56]	; (8003b50 <HAL_InitTick+0xac>)
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_InitTick+0xac>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_InitTick+0xac>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <HAL_InitTick+0xac>)
 8003b2a:	f009 ffe9 	bl	800db00 <HAL_TIM_Base_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b34:	4806      	ldr	r0, [pc, #24]	; (8003b50 <HAL_InitTick+0xac>)
 8003b36:	f00a f80e 	bl	800db56 <HAL_TIM_Base_Start_IT>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	e000      	b.n	8003b40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3730      	adds	r7, #48	; 0x30
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	200019bc 	.word	0x200019bc
 8003b54:	40010000 	.word	0x40010000

08003b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <HardFault_Handler+0x4>

08003b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <MemManage_Handler+0x4>

08003b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <BusFault_Handler+0x4>

08003b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <UsageFault_Handler+0x4>

08003b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <DMA1_Stream2_IRQHandler+0x10>)
 8003bbe:	f006 ff03 	bl	800a9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20001bdc 	.word	0x20001bdc

08003bcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <DMA1_Stream4_IRQHandler+0x10>)
 8003bd2:	f006 fef9 	bl	800a9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20001adc 	.word	0x20001adc

08003be0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <DMA1_Stream5_IRQHandler+0x10>)
 8003be6:	f006 feef 	bl	800a9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20001b3c 	.word	0x20001b3c

08003bf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003bf8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bfc:	f008 fbba 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c04:	f008 fbb6 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c12:	f00a f96b 	bl	800deec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200019bc 	.word	0x200019bc

08003c20 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <SPI2_IRQHandler+0x10>)
 8003c26:	f009 fda1 	bl	800d76c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000190c 	.word	0x2000190c

08003c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <USART1_IRQHandler+0x68>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d023      	beq.n	8003c90 <USART1_IRQHandler+0x5c>
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <USART1_IRQHandler+0x68>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01c      	beq.n	8003c90 <USART1_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <USART1_IRQHandler+0x68>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <USART1_IRQHandler+0x6c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6c:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <USART1_IRQHandler+0x70>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	79ba      	ldrb	r2, [r7, #6]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d00a      	beq.n	8003c90 <USART1_IRQHandler+0x5c>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <USART1_IRQHandler+0x6c>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <USART1_IRQHandler+0x74>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8003c88:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <USART1_IRQHandler+0x6c>)
 8003c8a:	79bb      	ldrb	r3, [r7, #6]
 8003c8c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20001c7c 	.word	0x20001c7c
 8003ca0:	20000ac8 	.word	0x20000ac8
 8003ca4:	20000ac9 	.word	0x20000ac9
 8003ca8:	20000acc 	.word	0x20000acc

08003cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003cb2:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <USART2_IRQHandler+0x68>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d023      	beq.n	8003d08 <USART2_IRQHandler+0x5c>
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <USART2_IRQHandler+0x68>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01c      	beq.n	8003d08 <USART2_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <USART2_IRQHandler+0x68>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <USART2_IRQHandler+0x6c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce4:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <USART2_IRQHandler+0x70>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	79ba      	ldrb	r2, [r7, #6]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d00a      	beq.n	8003d08 <USART2_IRQHandler+0x5c>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <USART2_IRQHandler+0x6c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <USART2_IRQHandler+0x74>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003d00:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <USART2_IRQHandler+0x6c>)
 8003d02:	79bb      	ldrb	r3, [r7, #6]
 8003d04:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20001cbc 	.word	0x20001cbc
 8003d18:	20000f16 	.word	0x20000f16
 8003d1c:	20000f17 	.word	0x20000f17
 8003d20:	20000f18 	.word	0x20000f18

08003d24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <USART3_IRQHandler+0x78>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02a      	beq.n	8003d8e <USART3_IRQHandler+0x6a>
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <USART3_IRQHandler+0x78>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d023      	beq.n	8003d8e <USART3_IRQHandler+0x6a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <USART3_IRQHandler+0x78>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <USART3_IRQHandler+0x7c>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <USART3_IRQHandler+0x80>)
 8003d5a:	fba2 1203 	umull	r1, r2, r2, r3
 8003d5e:	0a52      	lsrs	r2, r2, #9
 8003d60:	f240 4106 	movw	r1, #1030	; 0x406
 8003d64:	fb01 f202 	mul.w	r2, r1, r2
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <USART3_IRQHandler+0x84>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	88ba      	ldrh	r2, [r7, #4]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d00a      	beq.n	8003d8e <USART3_IRQHandler+0x6a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <USART3_IRQHandler+0x7c>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <USART3_IRQHandler+0x88>)
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8003d86:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <USART3_IRQHandler+0x7c>)
 8003d88:	88bb      	ldrh	r3, [r7, #4]
 8003d8a:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20001c3c 	.word	0x20001c3c
 8003da0:	20000b0c 	.word	0x20000b0c
 8003da4:	7f411e53 	.word	0x7f411e53
 8003da8:	20000b0e 	.word	0x20000b0e
 8003dac:	20000b10 	.word	0x20000b10

08003db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003db4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003db8:	f008 fadc 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003dbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dc0:	f008 fad8 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003dc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003dc8:	f008 fad4 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003dcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dd0:	f008 fad0 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003dd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dd8:	f008 facc 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003ddc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003de0:	f008 fac8 	bl	800c374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <DMA1_Stream7_IRQHandler+0x10>)
 8003dee:	f006 fdeb 	bl	800a9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20001a3c 	.word	0x20001a3c

08003dfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <TIM6_DAC_IRQHandler+0x10>)
 8003e02:	f00a f873 	bl	800deec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20001b9c 	.word	0x20001b9c

08003e10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <DMA2_Stream0_IRQHandler+0x10>)
 8003e16:	f006 fdd7 	bl	800a9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20001424 	.word	0x20001424

08003e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e00a      	b.n	8003e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e36:	f3af 8000 	nop.w
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	60ba      	str	r2, [r7, #8]
 8003e42:	b2ca      	uxtb	r2, r1
 8003e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	dbf0      	blt.n	8003e36 <_read+0x12>
	}

return len;
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e009      	b.n	8003e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	60ba      	str	r2, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	3301      	adds	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	dbf1      	blt.n	8003e70 <_write+0x12>
	}
	return len;
 8003e8c:	687b      	ldr	r3, [r7, #4]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_close>:

int _close(int file)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <_isatty>:

int _isatty(int file)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
	return 0;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <_sbrk+0x5c>)
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <_sbrk+0x60>)
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <_sbrk+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <_sbrk+0x64>)
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <_sbrk+0x68>)
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <_sbrk+0x64>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d205      	bcs.n	8003f3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <_sbrk+0x6c>)
 8003f32:	220c      	movs	r2, #12
 8003f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	e009      	b.n	8003f50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <_sbrk+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <_sbrk+0x64>)
 8003f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	20020000 	.word	0x20020000
 8003f60:	00004000 	.word	0x00004000
 8003f64:	20000ac4 	.word	0x20000ac4
 8003f68:	20008310 	.word	0x20008310
 8003f6c:	20008308 	.word	0x20008308

08003f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <SystemInit+0x28>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <SystemInit+0x28>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <SystemInit+0x28>)
 8003f86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f8a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa2:	f107 0320 	add.w	r3, r7, #32
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fc0:	4a33      	ldr	r2, [pc, #204]	; (8004090 <MX_TIM3_Init+0xf4>)
 8003fc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003fc4:	4b31      	ldr	r3, [pc, #196]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b30      	ldr	r3, [pc, #192]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fe4:	4829      	ldr	r0, [pc, #164]	; (800408c <MX_TIM3_Init+0xf0>)
 8003fe6:	f009 fe43 	bl	800dc70 <HAL_TIM_PWM_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003ff0:	f7ff fbac 	bl	800374c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ffc:	f107 0320 	add.w	r3, r7, #32
 8004000:	4619      	mov	r1, r3
 8004002:	4822      	ldr	r0, [pc, #136]	; (800408c <MX_TIM3_Init+0xf0>)
 8004004:	f00a fcd4 	bl	800e9b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800400e:	f7ff fb9d 	bl	800374c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004012:	2360      	movs	r3, #96	; 0x60
 8004014:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800401a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004020:	2304      	movs	r3, #4
 8004022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	2200      	movs	r2, #0
 8004028:	4619      	mov	r1, r3
 800402a:	4818      	ldr	r0, [pc, #96]	; (800408c <MX_TIM3_Init+0xf0>)
 800402c:	f00a f8c6 	bl	800e1bc <HAL_TIM_PWM_ConfigChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004036:	f7ff fb89 	bl	800374c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2204      	movs	r2, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4812      	ldr	r0, [pc, #72]	; (800408c <MX_TIM3_Init+0xf0>)
 8004042:	f00a f8bb 	bl	800e1bc <HAL_TIM_PWM_ConfigChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800404c:	f7ff fb7e 	bl	800374c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2208      	movs	r2, #8
 8004054:	4619      	mov	r1, r3
 8004056:	480d      	ldr	r0, [pc, #52]	; (800408c <MX_TIM3_Init+0xf0>)
 8004058:	f00a f8b0 	bl	800e1bc <HAL_TIM_PWM_ConfigChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004062:	f7ff fb73 	bl	800374c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	220c      	movs	r2, #12
 800406a:	4619      	mov	r1, r3
 800406c:	4807      	ldr	r0, [pc, #28]	; (800408c <MX_TIM3_Init+0xf0>)
 800406e:	f00a f8a5 	bl	800e1bc <HAL_TIM_PWM_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004078:	f7ff fb68 	bl	800374c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800407c:	4803      	ldr	r0, [pc, #12]	; (800408c <MX_TIM3_Init+0xf0>)
 800407e:	f000 f9df 	bl	8004440 <HAL_TIM_MspPostInit>

}
 8004082:	bf00      	nop
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20001a9c 	.word	0x20001a9c
 8004090:	40000400 	.word	0x40000400

08004094 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409a:	f107 0320 	add.w	r3, r7, #32
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	615a      	str	r2, [r3, #20]
 80040b4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <MX_TIM4_Init+0xa8>)
 80040ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040ca:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80040ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80040dc:	4816      	ldr	r0, [pc, #88]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040de:	f009 fd5e 	bl	800db9e <HAL_TIM_OC_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80040e8:	f7ff fb30 	bl	800374c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ec:	2300      	movs	r3, #0
 80040ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040f4:	f107 0320 	add.w	r3, r7, #32
 80040f8:	4619      	mov	r1, r3
 80040fa:	480f      	ldr	r0, [pc, #60]	; (8004138 <MX_TIM4_Init+0xa4>)
 80040fc:	f00a fc58 	bl	800e9b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004106:	f7ff fb21 	bl	800374c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	220c      	movs	r2, #12
 800411e:	4619      	mov	r1, r3
 8004120:	4805      	ldr	r0, [pc, #20]	; (8004138 <MX_TIM4_Init+0xa4>)
 8004122:	f009 ffeb 	bl	800e0fc <HAL_TIM_OC_ConfigChannel>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800412c:	f7ff fb0e 	bl	800374c <Error_Handler>
  }

}
 8004130:	bf00      	nop
 8004132:	3728      	adds	r7, #40	; 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	200019fc 	.word	0x200019fc
 800413c:	40000800 	.word	0x40000800

08004140 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004146:	463b      	mov	r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <MX_TIM6_Init+0x64>)
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <MX_TIM6_Init+0x68>)
 8004152:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <MX_TIM6_Init+0x64>)
 8004156:	2253      	movs	r2, #83	; 0x53
 8004158:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <MX_TIM6_Init+0x64>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <MX_TIM6_Init+0x64>)
 8004162:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004166:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <MX_TIM6_Init+0x64>)
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800416e:	480d      	ldr	r0, [pc, #52]	; (80041a4 <MX_TIM6_Init+0x64>)
 8004170:	f009 fcc6 	bl	800db00 <HAL_TIM_Base_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800417a:	f7ff fae7 	bl	800374c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004186:	463b      	mov	r3, r7
 8004188:	4619      	mov	r1, r3
 800418a:	4806      	ldr	r0, [pc, #24]	; (80041a4 <MX_TIM6_Init+0x64>)
 800418c:	f00a fc10 	bl	800e9b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004196:	f7ff fad9 	bl	800374c <Error_Handler>
  }

}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20001b9c 	.word	0x20001b9c
 80041a8:	40001000 	.word	0x40001000

080041ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a72      	ldr	r2, [pc, #456]	; (8004384 <HAL_TIM_PWM_MspInit+0x1d8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	f040 80de 	bne.w	800437c <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4a6f      	ldr	r2, [pc, #444]	; (8004388 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
 80041d0:	4b6d      	ldr	r3, [pc, #436]	; (8004388 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80041dc:	4b6b      	ldr	r3, [pc, #428]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041de:	4a6c      	ldr	r2, [pc, #432]	; (8004390 <HAL_TIM_PWM_MspInit+0x1e4>)
 80041e0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80041e2:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041e4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80041e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041ea:	4b68      	ldr	r3, [pc, #416]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041ec:	2240      	movs	r2, #64	; 0x40
 80041ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041fc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004204:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004206:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800420c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800420e:	4b5f      	ldr	r3, [pc, #380]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004214:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8004216:	4b5d      	ldr	r3, [pc, #372]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800421c:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8004222:	485a      	ldr	r0, [pc, #360]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004224:	f006 faa8 	bl	800a778 <HAL_DMA_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800422e:	f7ff fa8d 	bl	800374c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a55      	ldr	r2, [pc, #340]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
 8004238:	4a54      	ldr	r2, [pc, #336]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
 8004244:	4a51      	ldr	r2, [pc, #324]	; (800438c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 800424c:	4a52      	ldr	r2, [pc, #328]	; (8004398 <HAL_TIM_PWM_MspInit+0x1ec>)
 800424e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004252:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004256:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004258:	4b4e      	ldr	r3, [pc, #312]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800425e:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004260:	2200      	movs	r2, #0
 8004262:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800426a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800426c:	4b49      	ldr	r3, [pc, #292]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 800426e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004272:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004274:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800427a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 800427e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004282:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004286:	2200      	movs	r2, #0
 8004288:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800428a:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8004290:	4840      	ldr	r0, [pc, #256]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004292:	f006 fa71 	bl	800a778 <HAL_DMA_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 800429c:	f7ff fa56 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <HAL_TIM_PWM_MspInit+0x1e8>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042ae:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <HAL_TIM_PWM_MspInit+0x1f4>)
 80042b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80042b2:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80042b8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042bc:	2240      	movs	r2, #64	; 0x40
 80042be:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c0:	4b36      	ldr	r3, [pc, #216]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80042c6:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042cc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042ce:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80042f2:	482a      	ldr	r0, [pc, #168]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042f4:	f006 fa40 	bl	800a778 <HAL_DMA_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 80042fe:	f7ff fa25 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a25      	ldr	r2, [pc, #148]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_TIM_PWM_MspInit+0x1f0>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8004312:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004316:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800431a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004324:	2200      	movs	r2, #0
 8004326:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 800432a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800432e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004330:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004336:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 800433a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800433e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004346:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 800434a:	2200      	movs	r2, #0
 800434c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004350:	2200      	movs	r2, #0
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004356:	f006 fa0f 	bl	800a778 <HAL_DMA_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8004360:	f7ff f9f4 	bl	800374c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004374:	621a      	str	r2, [r3, #32]
 8004376:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40000400 	.word	0x40000400
 8004388:	40023800 	.word	0x40023800
 800438c:	20001adc 	.word	0x20001adc
 8004390:	40026070 	.word	0x40026070
 8004394:	20001b3c 	.word	0x20001b3c
 8004398:	40026088 	.word	0x40026088
 800439c:	20001a3c 	.word	0x20001a3c
 80043a0:	400260b8 	.word	0x400260b8
 80043a4:	20001bdc 	.word	0x20001bdc
 80043a8:	40026040 	.word	0x40026040

080043ac <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <HAL_TIM_OC_MspInit+0x3c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10d      	bne.n	80043da <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_TIM_OC_MspInit+0x40>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_TIM_OC_MspInit+0x40>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_TIM_OC_MspInit+0x40>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40023800 	.word	0x40023800

080043f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_TIM_Base_MspInit+0x48>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d115      	bne.n	800442e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <HAL_TIM_Base_MspInit+0x4c>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <HAL_TIM_Base_MspInit+0x4c>)
 800440c:	f043 0310 	orr.w	r3, r3, #16
 8004410:	6413      	str	r3, [r2, #64]	; 0x40
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_TIM_Base_MspInit+0x4c>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2036      	movs	r0, #54	; 0x36
 8004424:	f006 f92b 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004428:	2036      	movs	r0, #54	; 0x36
 800442a:	f006 f944 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40001000 	.word	0x40001000
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <HAL_TIM_MspPostInit+0x68>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d11e      	bne.n	80044a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_TIM_MspPostInit+0x6c>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_TIM_MspPostInit+0x6c>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_TIM_MspPostInit+0x6c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800447e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448c:	2303      	movs	r3, #3
 800448e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004490:	2302      	movs	r3, #2
 8004492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4619      	mov	r1, r3
 800449a:	4805      	ldr	r0, [pc, #20]	; (80044b0 <HAL_TIM_MspPostInit+0x70>)
 800449c:	f007 fd9e 	bl	800bfdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80044a0:	bf00      	nop
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40020800 	.word	0x40020800

080044b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <MX_USART1_UART_Init+0x50>)
 80044bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044c0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044da:	220c      	movs	r2, #12
 80044dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044ea:	4805      	ldr	r0, [pc, #20]	; (8004500 <MX_USART1_UART_Init+0x4c>)
 80044ec:	f00a faf0 	bl	800ead0 <HAL_UART_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044f6:	f7ff f929 	bl	800374c <Error_Handler>
  }

}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20001c7c 	.word	0x20001c7c
 8004504:	40011000 	.word	0x40011000

08004508 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <MX_USART2_UART_Init+0x50>)
 8004510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 8004514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 800452e:	220c      	movs	r2, #12
 8004530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 800453a:	2200      	movs	r2, #0
 800453c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800453e:	4805      	ldr	r0, [pc, #20]	; (8004554 <MX_USART2_UART_Init+0x4c>)
 8004540:	f00a fac6 	bl	800ead0 <HAL_UART_Init>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800454a:	f7ff f8ff 	bl	800374c <Error_Handler>
  }

}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20001cbc 	.word	0x20001cbc
 8004558:	40004400 	.word	0x40004400

0800455c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004562:	4a12      	ldr	r2, [pc, #72]	; (80045ac <MX_USART3_UART_Init+0x50>)
 8004564:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004568:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800456c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004582:	220c      	movs	r2, #12
 8004584:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004588:	2200      	movs	r2, #0
 800458a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 800458e:	2200      	movs	r2, #0
 8004590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004592:	4805      	ldr	r0, [pc, #20]	; (80045a8 <MX_USART3_UART_Init+0x4c>)
 8004594:	f00a fa9c 	bl	800ead0 <HAL_UART_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800459e:	f7ff f8d5 	bl	800374c <Error_Handler>
  }

}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20001c3c 	.word	0x20001c3c
 80045ac:	40004800 	.word	0x40004800

080045b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08e      	sub	sp, #56	; 0x38
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_UART_MspInit+0x180>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d135      	bne.n	800463e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	4b57      	ldr	r3, [pc, #348]	; (8004734 <HAL_UART_MspInit+0x184>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4a56      	ldr	r2, [pc, #344]	; (8004734 <HAL_UART_MspInit+0x184>)
 80045dc:	f043 0310 	orr.w	r3, r3, #16
 80045e0:	6453      	str	r3, [r2, #68]	; 0x44
 80045e2:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_UART_MspInit+0x184>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_UART_MspInit+0x184>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a4f      	ldr	r2, [pc, #316]	; (8004734 <HAL_UART_MspInit+0x184>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_UART_MspInit+0x184>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 800460a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004610:	2302      	movs	r3, #2
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004618:	2303      	movs	r3, #3
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800461c:	2307      	movs	r3, #7
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004624:	4619      	mov	r1, r3
 8004626:	4844      	ldr	r0, [pc, #272]	; (8004738 <HAL_UART_MspInit+0x188>)
 8004628:	f007 fcd8 	bl	800bfdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800462c:	2200      	movs	r2, #0
 800462e:	2100      	movs	r1, #0
 8004630:	2025      	movs	r0, #37	; 0x25
 8004632:	f006 f824 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004636:	2025      	movs	r0, #37	; 0x25
 8004638:	f006 f83d 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800463c:	e073      	b.n	8004726 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a3e      	ldr	r2, [pc, #248]	; (800473c <HAL_UART_MspInit+0x18c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d134      	bne.n	80046b2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_UART_MspInit+0x184>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_UART_MspInit+0x184>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004656:	6413      	str	r3, [r2, #64]	; 0x40
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_UART_MspInit+0x184>)
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_UART_MspInit+0x184>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	4a31      	ldr	r2, [pc, #196]	; (8004734 <HAL_UART_MspInit+0x184>)
 800466e:	f043 0308 	orr.w	r3, r3, #8
 8004672:	6313      	str	r3, [r2, #48]	; 0x30
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_UART_MspInit+0x184>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004680:	2360      	movs	r3, #96	; 0x60
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004684:	2302      	movs	r3, #2
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468c:	2303      	movs	r3, #3
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004690:	2307      	movs	r3, #7
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004698:	4619      	mov	r1, r3
 800469a:	4829      	ldr	r0, [pc, #164]	; (8004740 <HAL_UART_MspInit+0x190>)
 800469c:	f007 fc9e 	bl	800bfdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	2026      	movs	r0, #38	; 0x26
 80046a6:	f005 ffea 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046aa:	2026      	movs	r0, #38	; 0x26
 80046ac:	f006 f803 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
}
 80046b0:	e039      	b.n	8004726 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_UART_MspInit+0x194>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d134      	bne.n	8004726 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ca:	6413      	str	r3, [r2, #64]	; 0x40
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046e2:	f043 0304 	orr.w	r3, r3, #4
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_UART_MspInit+0x184>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80046f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fa:	2302      	movs	r3, #2
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004702:	2303      	movs	r3, #3
 8004704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004706:	2307      	movs	r3, #7
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800470e:	4619      	mov	r1, r3
 8004710:	480d      	ldr	r0, [pc, #52]	; (8004748 <HAL_UART_MspInit+0x198>)
 8004712:	f007 fc63 	bl	800bfdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2027      	movs	r0, #39	; 0x27
 800471c:	f005 ffaf 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004720:	2027      	movs	r0, #39	; 0x27
 8004722:	f005 ffc8 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
}
 8004726:	bf00      	nop
 8004728:	3738      	adds	r7, #56	; 0x38
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40011000 	.word	0x40011000
 8004734:	40023800 	.word	0x40023800
 8004738:	40020000 	.word	0x40020000
 800473c:	40004400 	.word	0x40004400
 8004740:	40020c00 	.word	0x40020c00
 8004744:	40004800 	.word	0x40004800
 8004748:	40020800 	.word	0x40020800

0800474c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <dbg_available+0x3c>)
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29a      	uxth	r2, r3
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <dbg_available+0x40>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004764:	b29b      	uxth	r3, r3
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <dbg_available+0x44>)
 8004768:	fba2 1203 	umull	r1, r2, r2, r3
 800476c:	0a52      	lsrs	r2, r2, #9
 800476e:	f240 4106 	movw	r1, #1030	; 0x406
 8004772:	fb01 f202 	mul.w	r2, r1, r2
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	b29b      	uxth	r3, r3
 800477a:	b21b      	sxth	r3, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000b0c 	.word	0x20000b0c
 800478c:	20000b0e 	.word	0x20000b0e
 8004790:	7f411e53 	.word	0x7f411e53

08004794 <dbg_read>:

int16_t dbg_read(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <dbg_read+0x5c>)
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <dbg_read+0x60>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d102      	bne.n	80047b0 <dbg_read+0x1c>
	{
		return -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e019      	b.n	80047e4 <dbg_read+0x50>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <dbg_read+0x60>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <dbg_read+0x64>)
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <dbg_read+0x60>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <dbg_read+0x68>)
 80047ca:	fba2 1203 	umull	r1, r2, r2, r3
 80047ce:	0a52      	lsrs	r2, r2, #9
 80047d0:	f240 4106 	movw	r1, #1030	; 0x406
 80047d4:	fb01 f202 	mul.w	r2, r1, r2
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <dbg_read+0x60>)
 80047de:	801a      	strh	r2, [r3, #0]
		return c;
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	b21b      	sxth	r3, r3
	}
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000b0c 	.word	0x20000b0c
 80047f4:	20000b0e 	.word	0x20000b0e
 80047f8:	20000b10 	.word	0x20000b10
 80047fc:	7f411e53 	.word	0x7f411e53

08004800 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <EN_Interrupt+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <EN_Interrupt+0x40>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0220 	orr.w	r2, r2, #32
 8004812:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <EN_Interrupt+0x44>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <EN_Interrupt+0x44>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0220 	orr.w	r2, r2, #32
 8004822:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <EN_Interrupt+0x48>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <EN_Interrupt+0x48>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0220 	orr.w	r2, r2, #32
 8004832:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20001c7c 	.word	0x20001c7c
 8004844:	20001c3c 	.word	0x20001c3c
 8004848:	20001cbc 	.word	0x20001cbc

0800484c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800484c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004852:	e003      	b.n	800485c <LoopCopyDataInit>

08004854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800485a:	3104      	adds	r1, #4

0800485c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800485c:	480b      	ldr	r0, [pc, #44]	; (800488c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004864:	d3f6      	bcc.n	8004854 <CopyDataInit>
  ldr  r2, =_sbss
 8004866:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004868:	e002      	b.n	8004870 <LoopFillZerobss>

0800486a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800486a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800486c:	f842 3b04 	str.w	r3, [r2], #4

08004870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004874:	d3f9      	bcc.n	800486a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004876:	f7ff fb7b 	bl	8003f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800487a:	f016 fe53 	bl	801b524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800487e:	f7fe fdfd 	bl	800347c <main>
  bx  lr    
 8004882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004888:	08024d08 	.word	0x08024d08
  ldr  r0, =_sdata
 800488c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004890:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8004894:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8004898:	2000830c 	.word	0x2000830c

0800489c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800489c:	e7fe      	b.n	800489c <ADC_IRQHandler>
	...

080048a0 <DWT_Init>:
 */
#include "main.h"

//Функция инициализации DWT таймера
void DWT_Init(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//Разрешаем использовать счётчик
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <DWT_Init+0x28>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <DWT_Init+0x28>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;		//Запускаем счётчик
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <DWT_Init+0x2c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a05      	ldr	r2, [pc, #20]	; (80048cc <DWT_Init+0x2c>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6013      	str	r3, [r2, #0]
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	e000edfc 	.word	0xe000edfc
 80048cc:	e0001000 	.word	0xe0001000

080048d0 <delay_micros>:
//Функция временной задержки в мкс
//Принимает "us" - значение в микросекундах
void delay_micros(uint32_t us)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);	//Получаем кол-во тактов за 1 мкс и умножаем на наше значение
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <delay_micros+0x3c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <delay_micros+0x40>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9a      	lsrs	r2, r3, #18
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; 											//Обнуляем счётчик
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <delay_micros+0x44>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80048f2:	bf00      	nop
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <delay_micros+0x44>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d8fa      	bhi.n	80048f4 <delay_micros+0x24>
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000008 	.word	0x20000008
 8004910:	431bde83 	.word	0x431bde83
 8004914:	e0001000 	.word	0xe0001000

08004918 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	d802      	bhi.n	8004930 <ff_convert+0x18>
		c = src;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	81fb      	strh	r3, [r7, #14]
 800492e:	e025      	b.n	800497c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2bff      	cmp	r3, #255	; 0xff
 800493a:	d805      	bhi.n	8004948 <ff_convert+0x30>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	3b80      	subs	r3, #128	; 0x80
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <ff_convert+0x74>)
 8004942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004946:	e000      	b.n	800494a <ff_convert+0x32>
 8004948:	2300      	movs	r3, #0
 800494a:	81fb      	strh	r3, [r7, #14]
 800494c:	e016      	b.n	800497c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800494e:	2300      	movs	r3, #0
 8004950:	81fb      	strh	r3, [r7, #14]
 8004952:	e009      	b.n	8004968 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 8004954:	89fb      	ldrh	r3, [r7, #14]
 8004956:	4a0d      	ldr	r2, [pc, #52]	; (800498c <ff_convert+0x74>)
 8004958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	429a      	cmp	r2, r3
 8004960:	d006      	beq.n	8004970 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	3301      	adds	r3, #1
 8004966:	81fb      	strh	r3, [r7, #14]
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	2b7f      	cmp	r3, #127	; 0x7f
 800496c:	d9f2      	bls.n	8004954 <ff_convert+0x3c>
 800496e:	e000      	b.n	8004972 <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 8004970:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	3380      	adds	r3, #128	; 0x80
 8004976:	b29b      	uxth	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800497c:	89fb      	ldrh	r3, [r7, #14]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	08024348 	.word	0x08024348

08004990 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	e002      	b.n	80049a6 <ff_wtoupper+0x16>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <ff_wtoupper+0x54>)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <ff_wtoupper+0x30>
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <ff_wtoupper+0x54>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1ef      	bne.n	80049a0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <ff_wtoupper+0x54>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <ff_wtoupper+0x46>
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <ff_wtoupper+0x58>)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d4:	e000      	b.n	80049d8 <ff_wtoupper+0x48>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	08024448 	.word	0x08024448
 80049e8:	08024628 	.word	0x08024628

080049ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 8004a00:	e00c      	b.n	8004a1c <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3304      	adds	r3, #4
 8004a14:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3b04      	subs	r3, #4
 8004a1a:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d8ef      	bhi.n	8004a02 <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 8004a22:	e007      	b.n	8004a34 <mem_cpy+0x48>
		*d++ = *s++;
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	1c53      	adds	r3, r2, #1
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	6179      	str	r1, [r7, #20]
 8004a30:	7812      	ldrb	r2, [r2, #0]
 8004a32:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f2      	bne.n	8004a24 <mem_cpy+0x38>
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004a5a:	e005      	b.n	8004a68 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	617a      	str	r2, [r7, #20]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f4      	bne.n	8004a5c <mem_set+0x12>
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004a7e:	b480      	push	{r7}
 8004a80:	b089      	sub	sp, #36	; 0x24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004a96:	bf00      	nop
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1e5a      	subs	r2, r3, #1
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <mem_cmp+0x40>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	61fa      	str	r2, [r7, #28]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	61ba      	str	r2, [r7, #24]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	1acb      	subs	r3, r1, r3
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ec      	beq.n	8004a98 <mem_cmp+0x1a>
	return r;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3724      	adds	r7, #36	; 0x24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ad6:	e002      	b.n	8004ade <chk_chr+0x12>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3301      	adds	r3, #1
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <chk_chr+0x26>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d1f2      	bne.n	8004ad8 <chk_chr+0xc>
	return *str;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	791b      	ldrb	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d038      	beq.n	8004b84 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7858      	ldrb	r0, [r3, #1]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b22:	2301      	movs	r3, #1
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f003 f9db 	bl	8007ee0 <disk_write>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <sync_window+0x32>
			return FR_DISK_ERR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e028      	b.n	8004b86 <sync_window+0x84>
		fs->wflag = 0;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d31f      	bcc.n	8004b84 <sync_window+0x82>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d217      	bcs.n	8004b84 <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	78db      	ldrb	r3, [r3, #3]
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	e010      	b.n	8004b7e <sync_window+0x7c>
				wsect += fs->fsize;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7858      	ldrb	r0, [r3, #1]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b70:	2301      	movs	r3, #1
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f003 f9b4 	bl	8007ee0 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d8eb      	bhi.n	8004b5c <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d018      	beq.n	8004bd4 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ffad 	bl	8004b02 <sync_window>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <move_window+0x24>
			return FR_DISK_ERR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e011      	b.n	8004bd6 <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7858      	ldrb	r0, [r3, #1]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	f003 f926 	bl	8007e10 <disk_read>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <move_window+0x40>
			return FR_DISK_ERR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e003      	b.n	8004bd6 <move_window+0x48>
		fs->winsect = sector;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ff8a 	bl	8004b02 <sync_window>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d14a      	bne.n	8004c8e <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d13a      	bne.n	8004c76 <sync_fs+0x96>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	795b      	ldrb	r3, [r3, #5]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d036      	beq.n	8004c76 <sync_fs+0x96>
			fs->winsect = 0;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3338      	adds	r3, #56	; 0x38
 8004c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff16 	bl	8004a4a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3338      	adds	r3, #56	; 0x38
 8004c22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c26:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004c2a:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3338      	adds	r3, #56	; 0x38
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <sync_fs+0xb8>)
 8004c32:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3338      	adds	r3, #56	; 0x38
 8004c38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c3c:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <sync_fs+0xbc>)
 8004c3e:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3338      	adds	r3, #56	; 0x38
 8004c44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6912      	ldr	r2, [r2, #16]
 8004c4c:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3338      	adds	r3, #56	; 0x38
 8004c52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	7858      	ldrb	r0, [r3, #1]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f003 f938 	bl	8007ee0 <disk_write>
			fs->fsi_flag = 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f003 f9ae 	bl	8007fe0 <disk_ioctl>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <sync_fs+0xae>
			res = FR_DISK_ERR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	41615252 	.word	0x41615252
 8004c9c:	61417272 	.word	0x61417272

08004ca0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	3b02      	subs	r3, #2
 8004cae:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	3b02      	subs	r3, #2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d301      	bcc.n	8004cc0 <clust2sect+0x20>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e008      	b.n	8004cd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	789b      	ldrb	r3, [r3, #2]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	fb03 f202 	mul.w	r2, r3, r2
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	4413      	add	r3, r2
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d904      	bls.n	8004cf8 <get_fat+0x1a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d301      	bcc.n	8004cfc <get_fat+0x1e>
		return 1;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e082      	b.n	8004e02 <get_fat+0x124>

	switch (fs->fs_type) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d045      	beq.n	8004d90 <get_fat+0xb2>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d05a      	beq.n	8004dbe <get_fat+0xe0>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d178      	bne.n	8004dfe <get_fat+0x120>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	4413      	add	r3, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff31 	bl	8004b8e <move_window>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d15e      	bne.n	8004df0 <get_fat+0x112>
		wc = fs->win[bc % SS(fs)]; bc++;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3301      	adds	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	0a5b      	lsrs	r3, r3, #9
 8004d50:	4413      	add	r3, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff1a 	bl	8004b8e <move_window>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d149      	bne.n	8004df4 <get_fat+0x116>
		wc |= fs->win[bc % SS(fs)] << 8;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	461a      	mov	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <get_fat+0xaa>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	e03c      	b.n	8004e02 <get_fat+0x124>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	e038      	b.n	8004e02 <get_fat+0x124>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	4413      	add	r3, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fef6 	bl	8004b8e <move_window>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d127      	bne.n	8004df8 <get_fat+0x11a>
		p = &fs->win[clst * 2 % SS(fs)];
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004db0:	3338      	adds	r3, #56	; 0x38
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	e021      	b.n	8004e02 <get_fat+0x124>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fedf 	bl	8004b8e <move_window>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d112      	bne.n	8004dfc <get_fat+0x11e>
		p = &fs->win[clst * 4 % SS(fs)];
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004dde:	3338      	adds	r3, #56	; 0x38
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dee:	e008      	b.n	8004e02 <get_fat+0x124>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004df0:	bf00      	nop
 8004df2:	e004      	b.n	8004dfe <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004dfc:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b088      	sub	sp, #32
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d904      	bls.n	8004e26 <put_fat+0x1c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <put_fat+0x22>
		res = FR_INT_ERR;
 8004e26:	2302      	movs	r3, #2
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e0bc      	b.n	8004fa6 <put_fat+0x19c>

	} else {
		switch (fs->fs_type) {
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d06f      	beq.n	8004f14 <put_fat+0x10a>
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	f000 8088 	beq.w	8004f4a <put_fat+0x140>
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	f040 80a6 	bne.w	8004f8c <put_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	0a5b      	lsrs	r3, r3, #9
 8004e56:	4413      	add	r3, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fe97 	bl	8004b8e <move_window>
 8004e60:	4603      	mov	r3, r0
 8004e62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e64:	7ffb      	ldrb	r3, [r7, #31]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 8093 	bne.w	8004f92 <put_fat+0x188>
			p = &fs->win[bc % SS(fs)];
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	3338      	adds	r3, #56	; 0x38
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <put_fat+0x96>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	b25a      	sxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e001      	b.n	8004ea4 <put_fat+0x9a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	7013      	strb	r3, [r2, #0]
			bc++;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff fe64 	bl	8004b8e <move_window>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d162      	bne.n	8004f96 <put_fat+0x18c>
			p = &fs->win[bc % SS(fs)];
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed6:	3338      	adds	r3, #56	; 0x38
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <put_fat+0xe6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e00e      	b.n	8004f0e <put_fat+0x104>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	f023 030f 	bic.w	r3, r3, #15
 8004efa:	b25a      	sxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	7013      	strb	r3, [r2, #0]
			break;
 8004f12:	e045      	b.n	8004fa0 <put_fat+0x196>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fe34 	bl	8004b8e <move_window>
 8004f26:	4603      	mov	r3, r0
 8004f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d134      	bne.n	8004f9a <put_fat+0x190>
			p = &fs->win[clst * 2 % SS(fs)];
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004f38:	3338      	adds	r3, #56	; 0x38
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	801a      	strh	r2, [r3, #0]
			break;
 8004f48:	e02a      	b.n	8004fa0 <put_fat+0x196>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	09db      	lsrs	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fe19 	bl	8004b8e <move_window>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11b      	bne.n	8004f9e <put_fat+0x194>
			p = &fs->win[clst * 4 % SS(fs)];
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f6e:	3338      	adds	r3, #56	; 0x38
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
			break;
 8004f8a:	e009      	b.n	8004fa0 <put_fat+0x196>

		default :
			res = FR_INT_ERR;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e006      	b.n	8004fa0 <put_fat+0x196>
			if (res != FR_OK) break;
 8004f92:	bf00      	nop
 8004f94:	e004      	b.n	8004fa0 <put_fat+0x196>
			if (res != FR_OK) break;
 8004f96:	bf00      	nop
 8004f98:	e002      	b.n	8004fa0 <put_fat+0x196>
			if (res != FR_OK) break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <put_fat+0x196>
			if (res != FR_OK) break;
 8004f9e:	bf00      	nop
		}
		fs->wflag = 1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d904      	bls.n	8004fca <remove_chain+0x1a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <remove_chain+0x20>
		res = FR_INT_ERR;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e039      	b.n	8005044 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004fd4:	e02d      	b.n	8005032 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fe80 	bl	8004cde <get_fat>
 8004fde:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02b      	beq.n	800503e <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <remove_chain+0x42>
 8004fec:	2302      	movs	r3, #2
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e028      	b.n	8005044 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d102      	bne.n	8005000 <remove_chain+0x50>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	e021      	b.n	8005044 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005000:	2200      	movs	r2, #0
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff00 	bl	8004e0a <put_fat>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d007      	beq.n	800502e <remove_chain+0x7e>
				fs->free_clust++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d3cc      	bcc.n	8004fd6 <remove_chain+0x26>
 800503c:	e002      	b.n	8005044 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <remove_chain+0x94>
			if (res != FR_OK) break;
 8005042:	bf00      	nop
		}
	}

	return res;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <create_chain+0x26>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d315      	bcc.n	80050a0 <create_chain+0x52>
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e012      	b.n	80050a0 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fe2e 	bl	8004cde <get_fat>
 8005082:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d801      	bhi.n	800508e <create_chain+0x40>
 800508a:	2301      	movs	r3, #1
 800508c:	e064      	b.n	8005158 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d201      	bcs.n	800509c <create_chain+0x4e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	e05d      	b.n	8005158 <create_chain+0x10a>
		scl = clst;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d307      	bcc.n	80050c4 <create_chain+0x76>
			ncl = 2;
 80050b4:	2302      	movs	r3, #2
 80050b6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d901      	bls.n	80050c4 <create_chain+0x76>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e049      	b.n	8005158 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fe09 	bl	8004cde <get_fat>
 80050cc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d002      	beq.n	80050e2 <create_chain+0x94>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <create_chain+0x98>
			return cs;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	e038      	b.n	8005158 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d1da      	bne.n	80050a4 <create_chain+0x56>
 80050ee:	2300      	movs	r3, #0
 80050f0:	e032      	b.n	8005158 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 80050f2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80050f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fe85 	bl	8004e0a <put_fat>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <create_chain+0xd0>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fe78 	bl	8004e0a <put_fat>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d110      	bne.n	8005146 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d010      	beq.n	8005156 <create_chain+0x108>
			fs->free_clust--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	715a      	strb	r2, [r3, #5]
 8005144:	e007      	b.n	8005156 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <create_chain+0x104>
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e000      	b.n	8005154 <create_chain+0x106>
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005156:	697b      	ldr	r3, [r7, #20]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d005      	beq.n	800518a <dir_sdi+0x2a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d301      	bcc.n	800518e <dir_sdi+0x2e>
		return FR_INT_ERR;
 800518a:	2302      	movs	r3, #2
 800518c:	e066      	b.n	800525c <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <dir_sdi+0x46>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d103      	bne.n	80051a6 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d114      	bne.n	80051d6 <dir_sdi+0x76>
		dj->clust = clst;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	891b      	ldrh	r3, [r3, #8]
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d301      	bcc.n	80051c2 <dir_sdi+0x62>
			return FR_INT_ERR;
 80051be:	2302      	movs	r3, #2
 80051c0:	e04c      	b.n	800525c <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	0912      	lsrs	r2, r2, #4
 80051cc:	b292      	uxth	r2, r2
 80051ce:	441a      	add	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	611a      	str	r2, [r3, #16]
 80051d4:	e036      	b.n	8005244 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	789b      	ldrb	r3, [r3, #2]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 80051e2:	e01b      	b.n	800521c <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fd77 	bl	8004cde <get_fat>
 80051f0:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d101      	bne.n	80051fe <dir_sdi+0x9e>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e02e      	b.n	800525c <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d905      	bls.n	8005210 <dir_sdi+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	429a      	cmp	r2, r3
 800520e:	d301      	bcc.n	8005214 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8005210:	2302      	movs	r3, #2
 8005212:	e023      	b.n	800525c <dir_sdi+0xfc>
			idx -= ic;
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 800521c:	887a      	ldrh	r2, [r7, #2]
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	429a      	cmp	r2, r3
 8005222:	d2df      	bcs.n	80051e4 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fd35 	bl	8004ca0 <clust2sect>
 8005236:	4602      	mov	r2, r0
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	b29b      	uxth	r3, r3
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800524c:	887b      	ldrh	r3, [r7, #2]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	88db      	ldrh	r3, [r3, #6]
 8005272:	3301      	adds	r3, #1
 8005274:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <dir_next+0x20>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <dir_next+0x24>
		return FR_NO_FILE;
 8005284:	2304      	movs	r3, #4
 8005286:	e0bb      	b.n	8005400 <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 80a6 	bne.w	80053e2 <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	891b      	ldrh	r3, [r3, #8]
 80052ae:	893a      	ldrh	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f0c0 8096 	bcc.w	80053e2 <dir_next+0x17e>
				return FR_NO_FILE;
 80052b6:	2304      	movs	r3, #4
 80052b8:	e0a2      	b.n	8005400 <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80052ba:	893b      	ldrh	r3, [r7, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	789b      	ldrb	r3, [r3, #2]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8088 	bne.w	80053e2 <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7ff fcfe 	bl	8004cde <get_fat>
 80052e2:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d801      	bhi.n	80052ee <dir_next+0x8a>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e088      	b.n	8005400 <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d101      	bne.n	80052fa <dir_next+0x96>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e082      	b.n	8005400 <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	429a      	cmp	r2, r3
 8005304:	d361      	bcc.n	80053ca <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <dir_next+0xac>
 800530c:	2304      	movs	r3, #4
 800530e:	e077      	b.n	8005400 <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7ff fe97 	bl	800504e <create_chain>
 8005320:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <dir_next+0xc8>
 8005328:	2307      	movs	r3, #7
 800532a:	e069      	b.n	8005400 <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <dir_next+0xd2>
 8005332:	2302      	movs	r3, #2
 8005334:	e064      	b.n	8005400 <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d101      	bne.n	8005342 <dir_next+0xde>
 800533e:	2301      	movs	r3, #1
 8005340:	e05e      	b.n	8005400 <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fbdb 	bl	8004b02 <sync_window>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <dir_next+0xf2>
 8005352:	2301      	movs	r3, #1
 8005354:	e054      	b.n	8005400 <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3338      	adds	r3, #56	; 0x38
 800535c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fb71 	bl	8004a4a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681c      	ldr	r4, [r3, #0]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	4610      	mov	r0, r2
 8005374:	f7ff fc94 	bl	8004ca0 <clust2sect>
 8005378:	4603      	mov	r3, r0
 800537a:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800537c:	2300      	movs	r3, #0
 800537e:	72fb      	strb	r3, [r7, #11]
 8005380:	e015      	b.n	80053ae <dir_next+0x14a>
						dj->fs->wflag = 1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fbb7 	bl	8004b02 <sync_window>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <dir_next+0x13a>
 800539a:	2301      	movs	r3, #1
 800539c:	e030      	b.n	8005400 <dir_next+0x19c>
						dj->fs->winsect++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a4:	3201      	adds	r2, #1
 80053a6:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	3301      	adds	r3, #1
 80053ac:	72fb      	strb	r3, [r7, #11]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	789b      	ldrb	r3, [r3, #2]
 80053b4:	7afa      	ldrb	r2, [r7, #11]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3e3      	bcc.n	8005382 <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053c0:	7afa      	ldrb	r2, [r7, #11]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	1a8a      	subs	r2, r1, r2
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fc62 	bl	8004ca0 <clust2sect>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	893a      	ldrh	r2, [r7, #8]
 80053e6:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}

08005408 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8005412:	2100      	movs	r1, #0
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fea3 	bl	8005160 <dir_sdi>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d12d      	bne.n	8005480 <dir_alloc+0x78>
		n = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7ff fbab 	bl	8004b8e <move_window>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2be5      	cmp	r3, #229	; 0xe5
 800544a:	d004      	beq.n	8005456 <dir_alloc+0x4e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d107      	bne.n	8005466 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3301      	adds	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d102      	bne.n	800546a <dir_alloc+0x62>
 8005464:	e00c      	b.n	8005480 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 800546a:	2101      	movs	r1, #1
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fef9 	bl	8005264 <dir_next>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0d5      	beq.n	8005428 <dir_alloc+0x20>
 800547c:	e000      	b.n	8005480 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800547e:	bf00      	nop
	}
	return res;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	331a      	adds	r3, #26
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d106      	bne.n	80054b2 <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

	return cl;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	331a      	adds	r3, #26
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	b292      	uxth	r2, r2
 80054d2:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	0c1a      	lsrs	r2, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3314      	adds	r3, #20
 80054dc:	b292      	uxth	r2, r2
 80054de:	801a      	strh	r2, [r3, #0]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	2301      	movs	r3, #1
 8005512:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <cmp_lfn+0xbc>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 8005526:	89fb      	ldrh	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d019      	beq.n	8005560 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800552c:	89bb      	ldrh	r3, [r7, #12]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fa2e 	bl	8004990 <ff_wtoupper>
 8005534:	4603      	mov	r3, r0
 8005536:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b13      	cmp	r3, #19
 800553c:	d80e      	bhi.n	800555c <cmp_lfn+0x70>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	617a      	str	r2, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fa1f 	bl	8004990 <ff_wtoupper>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	89fb      	ldrh	r3, [r7, #14]
 8005558:	4293      	cmp	r3, r2
 800555a:	d008      	beq.n	800556e <cmp_lfn+0x82>
				return 0;				/* Not matched */
 800555c:	2300      	movs	r3, #0
 800555e:	e01f      	b.n	80055a0 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005560:	89bb      	ldrh	r3, [r7, #12]
 8005562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005566:	4293      	cmp	r3, r2
 8005568:	d001      	beq.n	800556e <cmp_lfn+0x82>
 800556a:	2300      	movs	r3, #0
 800556c:	e018      	b.n	80055a0 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d9cc      	bls.n	8005514 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <cmp_lfn+0xb2>
 8005586:	89fb      	ldrh	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <cmp_lfn+0xb2>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <cmp_lfn+0xb2>
		return 0;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800559e:	2301      	movs	r3, #1
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	08024888 	.word	0x08024888

080055ac <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	460b      	mov	r3, r1
 80055bc:	71fb      	strb	r3, [r7, #7]
 80055be:	4613      	mov	r3, r2
 80055c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	330d      	adds	r3, #13
 80055c6:	79ba      	ldrb	r2, [r7, #6]
 80055c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	330b      	adds	r3, #11
 80055ce:	220f      	movs	r2, #15
 80055d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	330c      	adds	r3, #12
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	331a      	adds	r3, #26
 80055de:	2200      	movs	r2, #0
 80055e0:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	82fb      	strh	r3, [r7, #22]
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80055fa:	8afb      	ldrh	r3, [r7, #22]
 80055fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <fit_lfn+0x68>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <fit_lfn+0xc4>)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	8afa      	ldrh	r2, [r7, #22]
 8005624:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <fit_lfn+0x86>
 800562c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005630:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	3301      	adds	r3, #1
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d9dd      	bls.n	80055fa <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 800563e:	8afb      	ldrh	r3, [r7, #22]
 8005640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005644:	4293      	cmp	r3, r2
 8005646:	d006      	beq.n	8005656 <fit_lfn+0xaa>
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <fit_lfn+0xb2>
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565c:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	79fa      	ldrb	r2, [r7, #7]
 8005662:	701a      	strb	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3724      	adds	r7, #36	; 0x24
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	08024888 	.word	0x08024888

08005674 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 8005682:	220b      	movs	r2, #11
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff f9b0 	bl	80049ec <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	2b05      	cmp	r3, #5
 8005690:	d90f      	bls.n	80056b2 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	b29a      	uxth	r2, r3
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	03db      	lsls	r3, r3, #15
 800569a:	4313      	orrs	r3, r2
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1c99      	adds	r1, r3, #2
 80056a2:	6079      	str	r1, [r7, #4]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	807b      	strh	r3, [r7, #2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ef      	bne.n	8005692 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 80056b2:	2307      	movs	r3, #7
 80056b4:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3330      	adds	r3, #48	; 0x30
 80056c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 80056c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ca:	2b39      	cmp	r3, #57	; 0x39
 80056cc:	d904      	bls.n	80056d8 <gen_numname+0x64>
 80056ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d2:	3307      	adds	r3, #7
 80056d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056e2:	4413      	add	r3, r2
 80056e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056e8:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	807b      	strh	r3, [r7, #2]
	} while (seq);
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1de      	bne.n	80056b6 <gen_numname+0x42>
	ns[i] = '~';
 80056f8:	f107 0214 	add.w	r2, r7, #20
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	4413      	add	r3, r2
 8005700:	227e      	movs	r2, #126	; 0x7e
 8005702:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e002      	b.n	8005710 <gen_numname+0x9c>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d205      	bcs.n	8005724 <gen_numname+0xb0>
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b20      	cmp	r3, #32
 8005722:	d1f2      	bne.n	800570a <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b07      	cmp	r3, #7
 8005728:	d808      	bhi.n	800573c <gen_numname+0xc8>
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	623a      	str	r2, [r7, #32]
 8005730:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005734:	4413      	add	r3, r2
 8005736:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800573a:	e000      	b.n	800573e <gen_numname+0xca>
 800573c:	2120      	movs	r1, #32
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	460a      	mov	r2, r1
 800574a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b07      	cmp	r3, #7
 8005750:	d9e8      	bls.n	8005724 <gen_numname+0xb0>
}
 8005752:	bf00      	nop
 8005754:	3728      	adds	r7, #40	; 0x28
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005766:	230b      	movs	r3, #11
 8005768:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	0852      	lsrs	r2, r2, #1
 8005770:	01db      	lsls	r3, r3, #7
 8005772:	4313      	orrs	r3, r2
 8005774:	b2da      	uxtb	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	6079      	str	r1, [r7, #4]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	4413      	add	r3, r2
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ed      	bne.n	800576a <sum_sfn+0x10>
	return sum;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 80057a4:	2100      	movs	r1, #0
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fcda 	bl	8005160 <dir_sdi>
 80057ac:	4603      	mov	r3, r0
 80057ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <dir_find+0x1e>
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	e098      	b.n	80058ec <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 80057ba:	23ff      	movs	r3, #255	; 0xff
 80057bc:	753b      	strb	r3, [r7, #20]
 80057be:	7d3b      	ldrb	r3, [r7, #20]
 80057c0:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7ff f9de 	bl	8004b8e <move_window>
 80057d2:	4603      	mov	r3, r0
 80057d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 8081 	bne.w	80058e0 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057ea:	7dbb      	ldrb	r3, [r7, #22]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <dir_find+0x5a>
 80057f0:	2304      	movs	r3, #4
 80057f2:	75fb      	strb	r3, [r7, #23]
 80057f4:	e079      	b.n	80058ea <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	330b      	adds	r3, #11
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005800:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005802:	7dbb      	ldrb	r3, [r7, #22]
 8005804:	2be5      	cmp	r3, #229	; 0xe5
 8005806:	d007      	beq.n	8005818 <dir_find+0x7c>
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <dir_find+0x82>
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b0f      	cmp	r3, #15
 8005816:	d002      	beq.n	800581e <dir_find+0x82>
			ord = 0xFF;
 8005818:	23ff      	movs	r3, #255	; 0xff
 800581a:	757b      	strb	r3, [r7, #21]
 800581c:	e055      	b.n	80058ca <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b0f      	cmp	r3, #15
 8005822:	d12f      	bne.n	8005884 <dir_find+0xe8>
				if (dj->lfn) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d04e      	beq.n	80058ca <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 800582c:	7dbb      	ldrb	r3, [r7, #22]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	7b5b      	ldrb	r3, [r3, #13]
 800583a:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005842:	75bb      	strb	r3, [r7, #22]
 8005844:	7dbb      	ldrb	r3, [r7, #22]
 8005846:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	88da      	ldrh	r2, [r3, #6]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8005850:	7dba      	ldrb	r2, [r7, #22]
 8005852:	7d7b      	ldrb	r3, [r7, #21]
 8005854:	429a      	cmp	r2, r3
 8005856:	d112      	bne.n	800587e <dir_find+0xe2>
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	330d      	adds	r3, #13
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	7d3a      	ldrb	r2, [r7, #20]
 8005860:	429a      	cmp	r2, r3
 8005862:	d10c      	bne.n	800587e <dir_find+0xe2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	6939      	ldr	r1, [r7, #16]
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fe3e 	bl	80054ec <cmp_lfn>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <dir_find+0xe2>
 8005876:	7d7b      	ldrb	r3, [r7, #21]
 8005878:	3b01      	subs	r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e000      	b.n	8005880 <dir_find+0xe4>
 800587e:	23ff      	movs	r3, #255	; 0xff
 8005880:	757b      	strb	r3, [r7, #21]
 8005882:	e022      	b.n	80058ca <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005884:	7d7b      	ldrb	r3, [r7, #21]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <dir_find+0xfe>
 800588a:	6938      	ldr	r0, [r7, #16]
 800588c:	f7ff ff65 	bl	800575a <sum_sfn>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	7d3b      	ldrb	r3, [r7, #20]
 8005896:	4293      	cmp	r3, r2
 8005898:	d024      	beq.n	80058e4 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800589a:	23ff      	movs	r3, #255	; 0xff
 800589c:	757b      	strb	r3, [r7, #21]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a4:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	330b      	adds	r3, #11
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <dir_find+0x12e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	220b      	movs	r2, #11
 80058bc:	4619      	mov	r1, r3
 80058be:	6938      	ldr	r0, [r7, #16]
 80058c0:	f7ff f8dd 	bl	8004a7e <mem_cmp>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fcc9 	bl	8005264 <dir_next>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f43f af72 	beq.w	80057c2 <dir_find+0x26>
 80058de:	e004      	b.n	80058ea <dir_find+0x14e>
		if (res != FR_OK) break;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80058e8:	bf00      	nop

	return res;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	220c      	movs	r2, #12
 800590e:	69f9      	ldr	r1, [r7, #28]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff f86b 	bl	80049ec <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <dir_register+0x30>
		return FR_INVALID_NAME;
 8005920:	2306      	movs	r3, #6
 8005922:	e0e3      	b.n	8005aec <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d035      	beq.n	800599a <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	330b      	adds	r3, #11
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 800593c:	2301      	movs	r3, #1
 800593e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005940:	e013      	b.n	800596a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005944:	f107 0108 	add.w	r1, r7, #8
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	69f8      	ldr	r0, [r7, #28]
 800594c:	f7ff fe92 	bl	8005674 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff23 	bl	800579c <dir_find>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 800595c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	84bb      	strh	r3, [r7, #36]	; 0x24
 800596a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596c:	2b63      	cmp	r3, #99	; 0x63
 800596e:	d9e8      	bls.n	8005942 <dir_register+0x4e>
 8005970:	e000      	b.n	8005974 <dir_register+0x80>
			if (res != FR_OK) break;
 8005972:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d101      	bne.n	800597e <dir_register+0x8a>
 800597a:	2307      	movs	r3, #7
 800597c:	e0b6      	b.n	8005aec <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800597e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005982:	2b04      	cmp	r3, #4
 8005984:	d002      	beq.n	800598c <dir_register+0x98>
 8005986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800598a:	e0af      	b.n	8005aec <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	330b      	adds	r3, #11
 8005990:	7cfa      	ldrb	r2, [r7, #19]
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80059a4:	2300      	movs	r3, #0
 80059a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059a8:	e002      	b.n	80059b0 <dir_register+0xbc>
 80059aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f5      	bne.n	80059aa <dir_register+0xb6>
		ne = (n + 25) / 13;
 80059be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c0:	3319      	adds	r3, #25
 80059c2:	4a4c      	ldr	r2, [pc, #304]	; (8005af4 <dir_register+0x200>)
 80059c4:	fb82 1203 	smull	r1, r2, r2, r3
 80059c8:	1092      	asrs	r2, r2, #2
 80059ca:	17db      	asrs	r3, r3, #31
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80059d0:	e001      	b.n	80059d6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 80059d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fd14 	bl	8005408 <dir_alloc>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 80059e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d14b      	bne.n	8005a86 <dir_register+0x192>
 80059ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f0:	3b01      	subs	r3, #1
 80059f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80059f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d045      	beq.n	8005a86 <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	88da      	ldrh	r2, [r3, #6]
 80059fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fbaa 	bl	8005160 <dir_sdi>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8005a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d135      	bne.n	8005a86 <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe9b 	bl	800575a <sum_sfn>
 8005a24:	4603      	mov	r3, r0
 8005a26:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7ff f8ab 	bl	8004b8e <move_window>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 8005a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d11e      	bne.n	8005a84 <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69d8      	ldr	r0, [r3, #28]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	f7ff fdaa 	bl	80055ac <fit_lfn>
				dj->fs->wflag = 1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 8005a60:	2100      	movs	r1, #0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fbfe 	bl	8005264 <dir_next>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 8005a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <dir_register+0x192>
 8005a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1d2      	bne.n	8005a28 <dir_register+0x134>
 8005a82:	e000      	b.n	8005a86 <dir_register+0x192>
				if (res != FR_OK) break;
 8005a84:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d12c      	bne.n	8005ae8 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7ff f878 	bl	8004b8e <move_window>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8005aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11d      	bne.n	8005ae8 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe ffc8 	bl	8004a4a <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6958      	ldr	r0, [r3, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	220b      	movs	r2, #11
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fe ff91 	bl	80049ec <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	330b      	adds	r3, #11
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	f002 0218 	and.w	r2, r2, #24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	4ec4ec4f 	.word	0x4ec4ec4f

08005af8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	e002      	b.n	8005b10 <create_name+0x18>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b2f      	cmp	r3, #47	; 0x2f
 8005b16:	d0f8      	beq.n	8005b0a <create_name+0x12>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b1e:	d0f4      	beq.n	8005b0a <create_name+0x12>
	lfn = dj->lfn;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	61ba      	str	r2, [r7, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3e:	2b1f      	cmp	r3, #31
 8005b40:	d92f      	bls.n	8005ba2 <create_name+0xaa>
 8005b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b44:	2b2f      	cmp	r3, #47	; 0x2f
 8005b46:	d02c      	beq.n	8005ba2 <create_name+0xaa>
 8005b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b4a:	2b5c      	cmp	r3, #92	; 0x5c
 8005b4c:	d029      	beq.n	8005ba2 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b13      	cmp	r3, #19
 8005b52:	d901      	bls.n	8005b58 <create_name+0x60>
			return FR_INVALID_NAME;
 8005b54:	2306      	movs	r3, #6
 8005b56:	e1c7      	b.n	8005ee8 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fed8 	bl	8004918 <ff_convert>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <create_name+0x7e>
 8005b72:	2306      	movs	r3, #6
 8005b74:	e1b8      	b.n	8005ee8 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 8005b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b78:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7a:	d809      	bhi.n	8005b90 <create_name+0x98>
 8005b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7e:	4619      	mov	r1, r3
 8005b80:	48a4      	ldr	r0, [pc, #656]	; (8005e14 <create_name+0x31c>)
 8005b82:	f7fe ffa3 	bl	8004acc <chk_chr>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <create_name+0x98>
			return FR_INVALID_NAME;
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	e1ab      	b.n	8005ee8 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode char */
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	617a      	str	r2, [r7, #20]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005ba0:	e7c5      	b.n	8005b2e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	441a      	add	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bae:	2b1f      	cmp	r3, #31
 8005bb0:	d801      	bhi.n	8005bb6 <create_name+0xbe>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e000      	b.n	8005bb8 <create_name+0xc0>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d109      	bne.n	8005bd6 <create_name+0xde>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd4:	d016      	beq.n	8005c04 <create_name+0x10c>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d14d      	bne.n	8005c78 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	3b01      	subs	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	2b2e      	cmp	r3, #46	; 0x2e
 8005bee:	d143      	bne.n	8005c78 <create_name+0x180>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bf6:	3b02      	subs	r3, #2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b2e      	cmp	r3, #46	; 0x2e
 8005c02:	d139      	bne.n	8005c78 <create_name+0x180>
		lfn[di] = 0;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	e00f      	b.n	8005c36 <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d201      	bcs.n	8005c22 <create_name+0x12a>
 8005c1e:	212e      	movs	r1, #46	; 0x2e
 8005c20:	e000      	b.n	8005c24 <create_name+0x12c>
 8005c22:	2120      	movs	r1, #32
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	460a      	mov	r2, r1
 8005c2e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	3301      	adds	r3, #1
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b0a      	cmp	r3, #10
 8005c3a:	d9ec      	bls.n	8005c16 <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c48:	f042 0220 	orr.w	r2, r2, #32
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e149      	b.n	8005ee8 <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d002      	beq.n	8005c72 <create_name+0x17a>
 8005c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c70:	d106      	bne.n	8005c80 <create_name+0x188>
		di--;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ea      	bne.n	8005c54 <create_name+0x15c>
 8005c7e:	e000      	b.n	8005c82 <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 8005c80:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <create_name+0x194>
 8005c88:	2306      	movs	r3, #6
 8005c8a:	e12d      	b.n	8005ee8 <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	2200      	movs	r2, #0
 8005c96:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	220b      	movs	r2, #11
 8005c9e:	2120      	movs	r1, #32
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fed2 	bl	8004a4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e002      	b.n	8005cb2 <create_name+0x1ba>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d0f5      	beq.n	8005cac <create_name+0x1b4>
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2b2e      	cmp	r3, #46	; 0x2e
 8005ccc:	d0ee      	beq.n	8005cac <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <create_name+0x1f0>
 8005cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cd8:	f043 0303 	orr.w	r3, r3, #3
 8005cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005ce0:	e002      	b.n	8005ce8 <create_name+0x1f0>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <create_name+0x20a>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005d00:	d1ef      	bne.n	8005ce2 <create_name+0x1ea>

	b = i = 0; ni = 8;
 8005d02:	2300      	movs	r3, #0
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	61ba      	str	r2, [r7, #24]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8095 	beq.w	8005e52 <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d006      	beq.n	8005d3c <create_name+0x244>
 8005d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d30:	2b2e      	cmp	r3, #46	; 0x2e
 8005d32:	d10a      	bne.n	8005d4a <create_name+0x252>
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d006      	beq.n	8005d4a <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8005d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d40:	f043 0303 	orr.w	r3, r3, #3
 8005d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d48:	e082      	b.n	8005e50 <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d203      	bcs.n	8005d5a <create_name+0x262>
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d123      	bne.n	8005da2 <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2b0b      	cmp	r3, #11
 8005d5e:	d106      	bne.n	8005d6e <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8005d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d64:	f043 0303 	orr.w	r3, r3, #3
 8005d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d6c:	e074      	b.n	8005e58 <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d005      	beq.n	8005d82 <create_name+0x28a>
 8005d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7a:	f043 0303 	orr.w	r3, r3, #3
 8005d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d865      	bhi.n	8005e56 <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	2308      	movs	r3, #8
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	230b      	movs	r3, #11
 8005d94:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005da0:	e056      	b.n	8005e50 <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8005da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da4:	2b7f      	cmp	r3, #127	; 0x7f
 8005da6:	d914      	bls.n	8005dd2 <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe fdb3 	bl	8004918 <ff_convert>
 8005db2:	4603      	mov	r3, r0
 8005db4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8005db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <create_name+0x2ce>
 8005dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dbe:	3b80      	subs	r3, #128	; 0x80
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <create_name+0x320>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dca:	f043 0302 	orr.w	r3, r3, #2
 8005dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <create_name+0x2f0>
 8005dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dda:	4619      	mov	r1, r3
 8005ddc:	480f      	ldr	r0, [pc, #60]	; (8005e1c <create_name+0x324>)
 8005dde:	f7fe fe75 	bl	8004acc <chk_chr>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005de8:	235f      	movs	r3, #95	; 0x5f
 8005dea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df0:	f043 0303 	orr.w	r3, r3, #3
 8005df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005df8:	e021      	b.n	8005e3e <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d90f      	bls.n	8005e20 <create_name+0x328>
 8005e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e02:	2b5a      	cmp	r3, #90	; 0x5a
 8005e04:	d80c      	bhi.n	8005e20 <create_name+0x328>
					b |= 2;
 8005e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e0a:	f043 0302 	orr.w	r3, r3, #2
 8005e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e12:	e014      	b.n	8005e3e <create_name+0x346>
 8005e14:	08021220 	.word	0x08021220
 8005e18:	08024808 	.word	0x08024808
 8005e1c:	0802122c 	.word	0x0802122c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e22:	2b60      	cmp	r3, #96	; 0x60
 8005e24:	d90b      	bls.n	8005e3e <create_name+0x346>
 8005e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e28:	2b7a      	cmp	r3, #122	; 0x7a
 8005e2a:	d808      	bhi.n	8005e3e <create_name+0x346>
						b |= 1; w -= 0x20;
 8005e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e3a:	3b20      	subs	r3, #32
 8005e3c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	1c59      	adds	r1, r3, #1
 8005e46:	6239      	str	r1, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8005e50:	e75e      	b.n	8005d10 <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <create_name+0x360>
			if (si > di) break;			/* No extension */
 8005e56:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2be5      	cmp	r3, #229	; 0xe5
 8005e60:	d103      	bne.n	8005e6a <create_name+0x372>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2205      	movs	r2, #5
 8005e68:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d104      	bne.n	8005e7a <create_name+0x382>
 8005e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	d005      	beq.n	8005e92 <create_name+0x39a>
 8005e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d105      	bne.n	8005e9e <create_name+0x3a6>
		cf |= NS_LFN;
 8005e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8005e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d117      	bne.n	8005eda <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <create_name+0x3ca>
 8005eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eba:	f043 0310 	orr.w	r3, r3, #16
 8005ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d105      	bne.n	8005eda <create_name+0x3e2>
 8005ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed2:	f043 0308 	orr.w	r3, r3, #8
 8005ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	330b      	adds	r3, #11
 8005ee0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ee4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005ee6:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b2f      	cmp	r3, #47	; 0x2f
 8005f00:	d003      	beq.n	8005f0a <follow_path+0x1a>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b5c      	cmp	r3, #92	; 0x5c
 8005f08:	d106      	bne.n	8005f18 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
 8005f16:	e004      	b.n	8005f22 <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b1f      	cmp	r3, #31
 8005f28:	d809      	bhi.n	8005f3e <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff f917 	bl	8005160 <dir_sdi>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	615a      	str	r2, [r3, #20]
 8005f3c:	e056      	b.n	8005fec <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8005f3e:	463b      	mov	r3, r7
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fdd8 	bl	8005af8 <create_name>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d145      	bne.n	8005fde <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fc22 	bl	800579c <dir_find>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	7adb      	ldrb	r3, [r3, #11]
 8005f62:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01d      	beq.n	8005fa6 <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d138      	bne.n	8005fe2 <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d128      	bne.n	8005fe6 <follow_path+0xf6>
 8005f94:	e022      	b.n	8005fdc <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d122      	bne.n	8005fe6 <follow_path+0xf6>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005fa4:	e01f      	b.n	8005fe6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11c      	bne.n	8005fea <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	330b      	adds	r3, #11
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005fc4:	2305      	movs	r3, #5
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e010      	b.n	8005fec <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fa5a 	bl	800548a <ld_clust>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8005fdc:	e7af      	b.n	8005f3e <follow_path+0x4e>
			if (res != FR_OK) break;
 8005fde:	bf00      	nop
 8005fe0:	e004      	b.n	8005fec <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <follow_path+0xfc>
				break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005fea:	bf00      	nop
		}
	}

	return res;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7858      	ldrb	r0, [r3, #1]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800600c:	2301      	movs	r3, #1
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	f001 fefe 	bl	8007e10 <disk_read>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <check_fs+0x26>
		return 3;
 800601a:	2303      	movs	r3, #3
 800601c:	e01e      	b.n	800605c <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f203 2336 	addw	r3, r3, #566	; 0x236
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800602a:	4293      	cmp	r3, r2
 800602c:	d001      	beq.n	8006032 <check_fs+0x3a>
		return 2;
 800602e:	2302      	movs	r3, #2
 8006030:	e014      	b.n	800605c <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	336e      	adds	r3, #110	; 0x6e
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <check_fs+0x6c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <check_fs+0x4e>
		return 0;
 8006042:	2300      	movs	r3, #0
 8006044:	e00a      	b.n	800605c <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	338a      	adds	r3, #138	; 0x8a
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <check_fs+0x6c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <check_fs+0x62>
		return 0;
 8006056:	2300      	movs	r3, #0
 8006058:	e000      	b.n	800605c <check_fs+0x64>

	return 1;
 800605a:	2301      	movs	r3, #1
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	00544146 	.word	0x00544146

08006068 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b092      	sub	sp, #72	; 0x48
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	3b30      	subs	r3, #48	; 0x30
 8006082:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8006084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006086:	2b09      	cmp	r3, #9
 8006088:	d80b      	bhi.n	80060a2 <chk_mounted+0x3a>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	3301      	adds	r3, #1
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b3a      	cmp	r3, #58	; 0x3a
 8006092:	d106      	bne.n	80060a2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	3302      	adds	r3, #2
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e002      	b.n	80060a8 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 80060a2:	4ba8      	ldr	r3, [pc, #672]	; (8006344 <chk_mounted+0x2dc>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 80060ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 80060b4:	230b      	movs	r3, #11
 80060b6:	e1d4      	b.n	8006462 <chk_mounted+0x3fa>
	fs = FatFs[vol];					/* Get corresponding file system object */
 80060b8:	4aa3      	ldr	r2, [pc, #652]	; (8006348 <chk_mounted+0x2e0>)
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <chk_mounted+0x64>
 80060c8:	230c      	movs	r3, #12
 80060ca:	e1ca      	b.n	8006462 <chk_mounted+0x3fa>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d0:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01a      	beq.n	8006110 <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fe80 	bl	8007de4 <disk_status>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80060ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10c      	bne.n	8006110 <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <chk_mounted+0xa4>
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8006108:	230a      	movs	r3, #10
 800610a:	e1aa      	b.n	8006462 <chk_mounted+0x3fa>
			return FR_OK;				/* The file system object is valid */
 800610c:	2300      	movs	r3, #0
 800610e:	e1a8      	b.n	8006462 <chk_mounted+0x3fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006118:	b2da      	uxtb	r2, r3
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	4618      	mov	r0, r3
 8006124:	f001 fd7e 	bl	8007c24 <disk_initialize>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800612e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800613a:	2303      	movs	r3, #3
 800613c:	e191      	b.n	8006462 <chk_mounted+0x3fa>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <chk_mounted+0xec>
 8006144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8006150:	230a      	movs	r3, #10
 8006152:	e186      	b.n	8006462 <chk_mounted+0x3fa>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800615a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615c:	f7ff ff4c 	bl	8005ff8 <check_fs>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8006166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800616a:	2b01      	cmp	r3, #1
 800616c:	d124      	bne.n	80061b8 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 800616e:	2300      	movs	r3, #0
 8006170:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8006174:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <chk_mounted+0x11e>
 800617c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006180:	3b01      	subs	r3, #1
 8006182:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8006186:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006194:	4413      	add	r3, r2
 8006196:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	3304      	adds	r3, #4
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	3308      	adds	r3, #8
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 80061aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ae:	f7ff ff23 	bl	8005ff8 <check_fs>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 80061b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d101      	bne.n	80061c4 <chk_mounted+0x15c>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e14e      	b.n	8006462 <chk_mounted+0x3fa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80061c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <chk_mounted+0x168>
 80061cc:	230d      	movs	r3, #13
 80061ce:	e148      	b.n	8006462 <chk_mounted+0x3fa>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	3338      	adds	r3, #56	; 0x38
 80061d4:	330b      	adds	r3, #11
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d001      	beq.n	80061e2 <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 80061de:	230d      	movs	r3, #13
 80061e0:	e13f      	b.n	8006462 <chk_mounted+0x3fa>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	3338      	adds	r3, #56	; 0x38
 80061e6:	3316      	adds	r3, #22
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <chk_mounted+0x194>
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	3338      	adds	r3, #56	; 0x38
 80061f6:	3324      	adds	r3, #36	; 0x24
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006200:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	7ffa      	ldrb	r2, [r7, #31]
 800620e:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d004      	beq.n	8006220 <chk_mounted+0x1b8>
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d001      	beq.n	8006220 <chk_mounted+0x1b8>
 800621c:	230d      	movs	r3, #13
 800621e:	e120      	b.n	8006462 <chk_mounted+0x3fa>
	fasize *= b;										/* Number of sectors for FAT area */
 8006220:	7ffa      	ldrb	r2, [r7, #31]
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	fb02 f303 	mul.w	r3, r2, r3
 8006228:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	7ffa      	ldrb	r2, [r7, #31]
 8006236:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006238:	7ffb      	ldrb	r3, [r7, #31]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <chk_mounted+0x1e2>
 800623e:	7ffa      	ldrb	r2, [r7, #31]
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	3b01      	subs	r3, #1
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <chk_mounted+0x1e6>
 800624a:	230d      	movs	r3, #13
 800624c:	e109      	b.n	8006462 <chk_mounted+0x3fa>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	3338      	adds	r3, #56	; 0x38
 8006252:	3311      	adds	r3, #17
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	891b      	ldrh	r3, [r3, #8]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <chk_mounted+0x204>
 8006268:	230d      	movs	r3, #13
 800626a:	e0fa      	b.n	8006462 <chk_mounted+0x3fa>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	3338      	adds	r3, #56	; 0x38
 8006270:	3313      	adds	r3, #19
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <chk_mounted+0x21e>
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	3338      	adds	r3, #56	; 0x38
 8006280:	3320      	adds	r3, #32
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	3338      	adds	r3, #56	; 0x38
 800628a:	330e      	adds	r3, #14
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8006290:	8bbb      	ldrh	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <chk_mounted+0x232>
 8006296:	230d      	movs	r3, #13
 8006298:	e0e3      	b.n	8006462 <chk_mounted+0x3fa>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800629a:	8bba      	ldrh	r2, [r7, #28]
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	4413      	add	r3, r2
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	8912      	ldrh	r2, [r2, #8]
 80062a4:	0912      	lsrs	r2, r2, #4
 80062a6:	b292      	uxth	r2, r2
 80062a8:	4413      	add	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80062ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d201      	bcs.n	80062b8 <chk_mounted+0x250>
 80062b4:	230d      	movs	r3, #13
 80062b6:	e0d4      	b.n	8006462 <chk_mounted+0x3fa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80062b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c0:	7892      	ldrb	r2, [r2, #2]
 80062c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <chk_mounted+0x26a>
 80062ce:	230d      	movs	r3, #13
 80062d0:	e0c7      	b.n	8006462 <chk_mounted+0x3fa>
	fmt = FS_FAT12;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062de:	4293      	cmp	r3, r2
 80062e0:	d902      	bls.n	80062e8 <chk_mounted+0x280>
 80062e2:	2302      	movs	r3, #2
 80062e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d902      	bls.n	80062f8 <chk_mounted+0x290>
 80062f2:	2303      	movs	r3, #3
 80062f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006306:	8bba      	ldrh	r2, [r7, #28]
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	441a      	add	r2, r3
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8006310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	441a      	add	r2, r3
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 800631a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800631e:	2b03      	cmp	r3, #3
 8006320:	d114      	bne.n	800634c <chk_mounted+0x2e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	891b      	ldrh	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <chk_mounted+0x2c6>
 800632a:	230d      	movs	r3, #13
 800632c:	e099      	b.n	8006462 <chk_mounted+0x3fa>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	3338      	adds	r3, #56	; 0x38
 8006332:	332c      	adds	r3, #44	; 0x2c
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	633b      	str	r3, [r7, #48]	; 0x30
 8006342:	e023      	b.n	800638c <chk_mounted+0x324>
 8006344:	20000f5e 	.word	0x20000f5e
 8006348:	20000f58 	.word	0x20000f58
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <chk_mounted+0x2f0>
 8006354:	230d      	movs	r3, #13
 8006356:	e084      	b.n	8006462 <chk_mounted+0x3fa>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	441a      	add	r2, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006368:	2b02      	cmp	r3, #2
 800636a:	d103      	bne.n	8006374 <chk_mounted+0x30c>
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	e00a      	b.n	800638a <chk_mounted+0x322>
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	085a      	lsrs	r2, r3, #1
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006396:	0a5b      	lsrs	r3, r3, #9
 8006398:	429a      	cmp	r2, r3
 800639a:	d201      	bcs.n	80063a0 <chk_mounted+0x338>
		return FR_NO_FILESYSTEM;
 800639c:	230d      	movs	r3, #13
 800639e:	e060      	b.n	8006462 <chk_mounted+0x3fa>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f04f 32ff 	mov.w	r2, #4294967295
 80063a6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	2200      	movs	r2, #0
 80063ac:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80063ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d13d      	bne.n	8006432 <chk_mounted+0x3ca>
	 	fs->fsi_flag = 0;
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2200      	movs	r2, #0
 80063ba:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	3338      	adds	r3, #56	; 0x38
 80063c0:	3330      	adds	r3, #48	; 0x30
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c8:	441a      	add	r2, r3
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	7858      	ldrb	r0, [r3, #1]
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	2301      	movs	r3, #1
 80063de:	f001 fd17 	bl	8007e10 <disk_read>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d124      	bne.n	8006432 <chk_mounted+0x3ca>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	3338      	adds	r3, #56	; 0x38
 80063ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063f0:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80063f2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d11b      	bne.n	8006432 <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	3338      	adds	r3, #56	; 0x38
 80063fe:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8006400:	4a1a      	ldr	r2, [pc, #104]	; (800646c <chk_mounted+0x404>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d115      	bne.n	8006432 <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	3338      	adds	r3, #56	; 0x38
 800640a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800640e:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8006410:	4a17      	ldr	r2, [pc, #92]	; (8006470 <chk_mounted+0x408>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d10d      	bne.n	8006432 <chk_mounted+0x3ca>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	3338      	adds	r3, #56	; 0x38
 800641a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	3338      	adds	r3, #56	; 0x38
 8006428:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006438:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800643a:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <chk_mounted+0x40c>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <chk_mounted+0x40c>)
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <chk_mounted+0x40c>)
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2200      	movs	r2, #0
 8006458:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	2200      	movs	r2, #0
 800645e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3748      	adds	r7, #72	; 0x48
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	41615252 	.word	0x41615252
 8006470:	61417272 	.word	0x61417272
 8006474:	20000f5c 	.word	0x20000f5c

08006478 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <validate+0x32>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <validate+0x32>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <validate+0x32>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	88da      	ldrh	r2, [r3, #6]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d001      	beq.n	80064ae <validate+0x36>
		return FR_INVALID_OBJECT;
 80064aa:	2309      	movs	r3, #9
 80064ac:	e00d      	b.n	80064ca <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fc95 	bl	8007de4 <disk_status>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <validate+0x50>
		return FR_NOT_READY;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e000      	b.n	80064ca <validate+0x52>

	return FR_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	6039      	str	r1, [r7, #0]
 80064de:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80064e6:	230b      	movs	r3, #11
 80064e8:	e016      	b.n	8006518 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <f_mount+0x50>)
 80064ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f2:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	4905      	ldr	r1, [pc, #20]	; (8006524 <f_mount+0x50>)
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	20000f58 	.word	0x20000f58

08006528 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b094      	sub	sp, #80	; 0x50
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <f_open+0x18>
 800653c:	2309      	movs	r3, #9
 800653e:	e0fc      	b.n	800673a <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	f107 011c 	add.w	r1, r7, #28
 800655a:	f107 0308 	add.w	r3, r7, #8
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fd82 	bl	8006068 <chk_mounted>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 800656a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 80e1 	bne.w	8006736 <f_open+0x20e>
		INIT_BUF(dj);
 8006574:	f107 0310 	add.w	r3, r7, #16
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
 800657a:	4b72      	ldr	r3, [pc, #456]	; (8006744 <f_open+0x21c>)
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	f107 031c 	add.w	r3, r7, #28
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fcb2 	bl	8005ef0 <follow_path>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006596:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800659a:	2b00      	cmp	r3, #0
 800659c:	d105      	bne.n	80065aa <f_open+0x82>
			if (!dir)	/* Current dir itself */
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <f_open+0x82>
				res = FR_INVALID_NAME;
 80065a4:	2306      	movs	r3, #6
 80065a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	f003 031c 	and.w	r3, r3, #28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d06d      	beq.n	8006690 <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 80065b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d012      	beq.n	80065e2 <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80065bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d107      	bne.n	80065d4 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80065c4:	f107 031c 	add.w	r3, r7, #28
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff f993 	bl	80058f4 <dir_register>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	f043 0308 	orr.w	r3, r3, #8
 80065da:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	e012      	b.n	8006608 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e4:	330b      	adds	r3, #11
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 0311 	and.w	r3, r3, #17
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <f_open+0xd0>
					res = FR_DENIED;
 80065f0:	2307      	movs	r3, #7
 80065f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80065f6:	e007      	b.n	8006608 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <f_open+0xe0>
						res = FR_EXIST;
 8006602:	2308      	movs	r3, #8
 8006604:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800660c:	2b00      	cmp	r3, #0
 800660e:	d15d      	bne.n	80066cc <f_open+0x1a4>
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d058      	beq.n	80066cc <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 800661a:	f001 feef 	bl	80083fc <get_fattime>
 800661e:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	330e      	adds	r3, #14
 8006624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006626:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 8006628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662a:	330b      	adds	r3, #11
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	331c      	adds	r3, #28
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe ff24 	bl	800548a <ld_clust>
 8006642:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 8006644:	2100      	movs	r1, #0
 8006646:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006648:	f7fe ff3a 	bl	80054c0 <st_clust>
				dj.fs->wflag = 1;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2201      	movs	r2, #1
 8006650:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d039      	beq.n	80066cc <f_open+0x1a4>
					dw = dj.fs->winsect;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fca4 	bl	8004fb0 <remove_chain>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 800666e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006672:	2b00      	cmp	r3, #0
 8006674:	d12a      	bne.n	80066cc <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800667a:	3a01      	subs	r2, #1
 800667c:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fa83 	bl	8004b8e <move_window>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800668e:	e01d      	b.n	80066cc <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 8006690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d119      	bne.n	80066cc <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8006698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669a:	330b      	adds	r3, #11
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <f_open+0x186>
					res = FR_NO_FILE;
 80066a6:	2304      	movs	r3, #4
 80066a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80066ac:	e00e      	b.n	80066cc <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <f_open+0x1a4>
 80066b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ba:	330b      	adds	r3, #11
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <f_open+0x1a4>
						res = FR_DENIED;
 80066c6:	2307      	movs	r3, #7
 80066c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 80066cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <f_open+0x1be>
				mode |= FA__WRITTEN;
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	f043 0320 	orr.w	r3, r3, #32
 80066e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f2:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80066f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11c      	bne.n	8006736 <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	79fa      	ldrb	r2, [r7, #7]
 8006700:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe febf 	bl	800548a <ld_clust>
 800670c:	4602      	mov	r2, r0
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8006712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006714:	331c      	adds	r3, #28
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	88da      	ldrh	r2, [r3, #6]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800673a:	4618      	mov	r0, r3
 800673c:	3750      	adds	r7, #80	; 0x50
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000f60 	.word	0x20000f60

08006748 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fe89 	bl	8006478 <validate>
 8006766:	4603      	mov	r3, r0
 8006768:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800676a:	7ffb      	ldrb	r3, [r7, #31]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <f_read+0x2c>
 8006770:	7ffb      	ldrb	r3, [r7, #31]
 8006772:	e135      	b.n	80069e0 <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	799b      	ldrb	r3, [r3, #6]
 8006778:	b25b      	sxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	da01      	bge.n	8006782 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800677e:	2302      	movs	r3, #2
 8006780:	e12e      	b.n	80069e0 <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	799b      	ldrb	r3, [r3, #6]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800678e:	2307      	movs	r3, #7
 8006790:	e126      	b.n	80069e0 <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	f240 8117 	bls.w	80069d6 <f_read+0x28e>
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80067ac:	e113      	b.n	80069d6 <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 80df 	bne.w	800697a <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	0a5b      	lsrs	r3, r3, #9
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	789b      	ldrb	r3, [r3, #2]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	4013      	ands	r3, r2
 80067d0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d12c      	bne.n	8006832 <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d103      	bne.n	80067e8 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e6:	e008      	b.n	80067fa <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fe fa73 	bl	8004cde <get_fat>
 80067f8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d808      	bhi.n	8006812 <f_read+0xca>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	799b      	ldrb	r3, [r3, #6]
 8006804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	719a      	strb	r2, [r3, #6]
 800680e:	2302      	movs	r3, #2
 8006810:	e0e6      	b.n	80069e0 <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d108      	bne.n	800682c <f_read+0xe4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	799b      	ldrb	r3, [r3, #6]
 800681e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	719a      	strb	r2, [r3, #6]
 8006828:	2301      	movs	r3, #1
 800682a:	e0d9      	b.n	80069e0 <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006830:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f7fe fa2f 	bl	8004ca0 <clust2sect>
 8006842:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <f_read+0x114>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	799b      	ldrb	r3, [r3, #6]
 800684e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006852:	b2da      	uxtb	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	719a      	strb	r2, [r3, #6]
 8006858:	2302      	movs	r3, #2
 800685a:	e0c1      	b.n	80069e0 <f_read+0x298>
			sect += csect;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4413      	add	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	0a5b      	lsrs	r3, r3, #9
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d042      	beq.n	80068f6 <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006870:	7dfa      	ldrb	r2, [r7, #23]
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	4413      	add	r3, r2
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	7892      	ldrb	r2, [r2, #2]
 800687c:	4293      	cmp	r3, r2
 800687e:	d906      	bls.n	800688e <f_read+0x146>
					cc = fp->fs->csize - csect;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	789b      	ldrb	r3, [r3, #2]
 8006886:	461a      	mov	r2, r3
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	7858      	ldrb	r0, [r3, #1]
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	b2db      	uxtb	r3, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	6a39      	ldr	r1, [r7, #32]
 800689c:	f001 fab8 	bl	8007e10 <disk_read>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	799b      	ldrb	r3, [r3, #6]
 80068aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	719a      	strb	r2, [r3, #6]
 80068b4:	2301      	movs	r3, #1
 80068b6:	e093      	b.n	80069e0 <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	799b      	ldrb	r3, [r3, #6]
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d014      	beq.n	80068ee <f_read+0x1a6>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d90d      	bls.n	80068ee <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	025b      	lsls	r3, r3, #9
 80068dc:	6a3a      	ldr	r2, [r7, #32]
 80068de:	18d0      	adds	r0, r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3324      	adds	r3, #36	; 0x24
 80068e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e8:	4619      	mov	r1, r3
 80068ea:	f7fe f87f 	bl	80049ec <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80068f4:	e05b      	b.n	80069ae <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d039      	beq.n	8006974 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	799b      	ldrb	r3, [r3, #6]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01d      	beq.n	8006948 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	7858      	ldrb	r0, [r3, #1]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	2301      	movs	r3, #1
 800691e:	f001 fadf 	bl	8007ee0 <disk_write>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	799b      	ldrb	r3, [r3, #6]
 800692c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	719a      	strb	r2, [r3, #6]
 8006936:	2301      	movs	r3, #1
 8006938:	e052      	b.n	80069e0 <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	799b      	ldrb	r3, [r3, #6]
 800693e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	7858      	ldrb	r0, [r3, #1]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006954:	2301      	movs	r3, #1
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	f001 fa5a 	bl	8007e10 <disk_read>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	799b      	ldrb	r3, [r3, #6]
 8006966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	719a      	strb	r2, [r3, #6]
 8006970:	2301      	movs	r3, #1
 8006972:	e035      	b.n	80069e0 <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d901      	bls.n	8006994 <f_read+0x24c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699c:	3320      	adds	r3, #32
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	3304      	adds	r3, #4
 80069a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a6:	4619      	mov	r1, r3
 80069a8:	6a38      	ldr	r0, [r7, #32]
 80069aa:	f7fe f81f 	bl	80049ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	4413      	add	r3, r2
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	441a      	add	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	609a      	str	r2, [r3, #8]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	441a      	add	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f47f aee8 	bne.w	80067ae <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3730      	adds	r7, #48	; 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff fd39 	bl	8006478 <validate>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <f_write+0x2c>
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	e166      	b.n	8006ce2 <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	799b      	ldrb	r3, [r3, #6]
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da01      	bge.n	8006a22 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e15f      	b.n	8006ce2 <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	799b      	ldrb	r3, [r3, #6]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006a2e:	2307      	movs	r3, #7
 8006a30:	e157      	b.n	8006ce2 <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	f080 8137 	bcs.w	8006cb2 <f_write+0x2ca>
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006a48:	e133      	b.n	8006cb2 <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 80f8 	bne.w	8006c48 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	0a5b      	lsrs	r3, r3, #9
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	789b      	ldrb	r3, [r3, #2]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006a6e:	7dbb      	ldrb	r3, [r7, #22]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d13d      	bne.n	8006af0 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d110      	bne.n	8006a9e <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d113      	bne.n	8006ab0 <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fadd 	bl	800504e <create_chain>
 8006a94:	6278      	str	r0, [r7, #36]	; 0x24
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	611a      	str	r2, [r3, #16]
 8006a9c:	e008      	b.n	8006ab0 <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7fe fad0 	bl	800504e <create_chain>
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 8102 	beq.w	8006cbc <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d108      	bne.n	8006ad0 <f_write+0xe8>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	799b      	ldrb	r3, [r3, #6]
 8006ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	719a      	strb	r2, [r3, #6]
 8006acc:	2302      	movs	r3, #2
 8006ace:	e108      	b.n	8006ce2 <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d108      	bne.n	8006aea <f_write+0x102>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	799b      	ldrb	r3, [r3, #6]
 8006adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	719a      	strb	r2, [r3, #6]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e0fb      	b.n	8006ce2 <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aee:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	799b      	ldrb	r3, [r3, #6]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01d      	beq.n	8006b38 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	7858      	ldrb	r0, [r3, #1]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f001 f9e7 	bl	8007ee0 <disk_write>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	799b      	ldrb	r3, [r3, #6]
 8006b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	719a      	strb	r2, [r3, #6]
 8006b26:	2301      	movs	r3, #1
 8006b28:	e0db      	b.n	8006ce2 <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	799b      	ldrb	r3, [r3, #6]
 8006b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f7fe f8ac 	bl	8004ca0 <clust2sect>
 8006b48:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <f_write+0x17a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	799b      	ldrb	r3, [r3, #6]
 8006b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	719a      	strb	r2, [r3, #6]
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e0bf      	b.n	8006ce2 <f_write+0x2fa>
			sect += csect;
 8006b62:	7dbb      	ldrb	r3, [r7, #22]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0a5b      	lsrs	r3, r3, #9
 8006b6e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d044      	beq.n	8006c00 <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006b76:	7dba      	ldrb	r2, [r7, #22]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	7892      	ldrb	r2, [r2, #2]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d906      	bls.n	8006b94 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	789b      	ldrb	r3, [r3, #2]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	7dbb      	ldrb	r3, [r7, #22]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	7858      	ldrb	r0, [r3, #1]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	f001 f99d 	bl	8007ee0 <disk_write>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	799b      	ldrb	r3, [r3, #6]
 8006bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	719a      	strb	r2, [r3, #6]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e091      	b.n	8006ce2 <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d915      	bls.n	8006bf8 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	025b      	lsls	r3, r3, #9
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4413      	add	r3, r2
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7fd ff01 	bl	80049ec <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	799b      	ldrb	r3, [r3, #6]
 8006bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	025b      	lsls	r3, r3, #9
 8006bfc:	623b      	str	r3, [r7, #32]
				continue;
 8006bfe:	e044      	b.n	8006c8a <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d01b      	beq.n	8006c42 <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d215      	bcs.n	8006c42 <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	7858      	ldrb	r0, [r3, #1]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006c22:	2301      	movs	r3, #1
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	f001 f8f3 	bl	8007e10 <disk_read>
 8006c2a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	799b      	ldrb	r3, [r3, #6]
 8006c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	719a      	strb	r2, [r3, #6]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e04f      	b.n	8006ce2 <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006c54:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d901      	bls.n	8006c62 <f_write+0x27a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	3320      	adds	r3, #32
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	3304      	adds	r3, #4
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fd feb8 	bl	80049ec <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	799b      	ldrb	r3, [r3, #6]
 8006c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	4413      	add	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f47f aec8 	bne.w	8006a4a <f_write+0x62>
 8006cba:	e000      	b.n	8006cbe <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006cbc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <f_write+0x2ea>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	799b      	ldrb	r3, [r3, #6]
 8006cd6:	f043 0320 	orr.w	r3, r3, #32
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3728      	adds	r7, #40	; 0x28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fbc0 	bl	8006478 <validate>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d163      	bne.n	8006dca <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	799b      	ldrb	r3, [r3, #6]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d05d      	beq.n	8006dca <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	799b      	ldrb	r3, [r3, #6]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	7858      	ldrb	r0, [r3, #1]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f001 f8d8 	bl	8007ee0 <disk_write>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006d36:	2301      	movs	r3, #1
 8006d38:	e048      	b.n	8006dcc <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	799b      	ldrb	r3, [r3, #6]
 8006d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fd ff1b 	bl	8004b8e <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d133      	bne.n	8006dca <f_sync+0xe0>
				dir = fp->dir_ptr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	330b      	adds	r3, #11
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	330b      	adds	r3, #11
 8006d72:	f042 0220 	orr.w	r2, r2, #32
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	331c      	adds	r3, #28
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68d2      	ldr	r2, [r2, #12]
 8006d82:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f7fe fb98 	bl	80054c0 <st_clust>
				tm = get_fattime();							/* Update updated time */
 8006d90:	f001 fb34 	bl	80083fc <get_fattime>
 8006d94:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3316      	adds	r3, #22
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3312      	adds	r3, #18
 8006da2:	2200      	movs	r2, #0
 8006da4:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	799b      	ldrb	r3, [r3, #6]
 8006daa:	f023 0320 	bic.w	r3, r3, #32
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2201      	movs	r2, #1
 8006dba:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fd ff0d 	bl	8004be0 <sync_fs>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff84 	bl	8006cea <f_sync>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <f_close+0x1e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
	return res;
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fb36 	bl	8006478 <validate>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <f_lseek+0x1e>
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	e13b      	b.n	8007092 <f_lseek+0x296>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	799b      	ldrb	r3, [r3, #6]
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da01      	bge.n	8006e28 <f_lseek+0x2c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006e24:	2302      	movs	r3, #2
 8006e26:	e134      	b.n	8007092 <f_lseek+0x296>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d908      	bls.n	8006e44 <f_lseek+0x48>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	799b      	ldrb	r3, [r3, #6]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <f_lseek+0x48>
#endif
			) ofs = fp->fsize;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	609a      	str	r2, [r3, #8]
		if (ofs) {
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80c1 	beq.w	8006fde <f_lseek+0x1e2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	789b      	ldrb	r3, [r3, #2]
 8006e62:	025b      	lsls	r3, r3, #9
 8006e64:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <f_lseek+0xa8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1e59      	subs	r1, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d30f      	bcc.n	8006ea4 <f_lseek+0xa8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1e5a      	subs	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	425b      	negs	r3, r3
 8006e8c:	401a      	ands	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	e02b      	b.n	8006efc <f_lseek+0x100>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d122      	bne.n	8006ef6 <f_lseek+0xfa>
					clst = create_chain(fp->fs, 0);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe f8c9 	bl	800504e <create_chain>
 8006ebc:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d108      	bne.n	8006ed6 <f_lseek+0xda>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	799b      	ldrb	r3, [r3, #6]
 8006ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	719a      	strb	r2, [r3, #6]
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e0dd      	b.n	8007092 <f_lseek+0x296>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d108      	bne.n	8006ef0 <f_lseek+0xf4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	799b      	ldrb	r3, [r3, #6]
 8006ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	719a      	strb	r2, [r3, #6]
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0d0      	b.n	8007092 <f_lseek+0x296>
					fp->sclust = clst;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d06d      	beq.n	8006fde <f_lseek+0x1e2>
				while (ofs > bcs) {						/* Cluster following loop */
 8006f02:	e045      	b.n	8006f90 <f_lseek+0x194>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	799b      	ldrb	r3, [r3, #6]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <f_lseek+0x12e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe f899 	bl	800504e <create_chain>
 8006f1c:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <f_lseek+0x13c>
							ofs = bcs; break;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	e036      	b.n	8006f98 <f_lseek+0x19c>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69f9      	ldr	r1, [r7, #28]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fd fed4 	bl	8004cde <get_fat>
 8006f36:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d108      	bne.n	8006f52 <f_lseek+0x156>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	799b      	ldrb	r3, [r3, #6]
 8006f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	719a      	strb	r2, [r3, #6]
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e09f      	b.n	8007092 <f_lseek+0x296>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d905      	bls.n	8006f64 <f_lseek+0x168>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d308      	bcc.n	8006f76 <f_lseek+0x17a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	799b      	ldrb	r3, [r3, #6]
 8006f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	719a      	strb	r2, [r3, #6]
 8006f72:	2302      	movs	r3, #2
 8006f74:	e08d      	b.n	8007092 <f_lseek+0x296>
					fp->clust = clst;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d8b5      	bhi.n	8006f04 <f_lseek+0x108>
				}
				fp->fptr += ofs;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	441a      	add	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d017      	beq.n	8006fde <f_lseek+0x1e2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69f9      	ldr	r1, [r7, #28]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fd fe73 	bl	8004ca0 <clust2sect>
 8006fba:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d108      	bne.n	8006fd4 <f_lseek+0x1d8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	799b      	ldrb	r3, [r3, #6]
 8006fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	719a      	strb	r2, [r3, #6]
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e05e      	b.n	8007092 <f_lseek+0x296>
					nsect += ofs / SS(fp->fs);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	0a5b      	lsrs	r3, r3, #9
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	4413      	add	r3, r2
 8006fdc:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d041      	beq.n	800706e <f_lseek+0x272>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d03c      	beq.n	800706e <f_lseek+0x272>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	799b      	ldrb	r3, [r3, #6]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01d      	beq.n	800703c <f_lseek+0x240>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	7858      	ldrb	r0, [r3, #1]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	2301      	movs	r3, #1
 8007012:	f000 ff65 	bl	8007ee0 <disk_write>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <f_lseek+0x232>
					ABORT(fp->fs, FR_DISK_ERR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	799b      	ldrb	r3, [r3, #6]
 8007020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	719a      	strb	r2, [r3, #6]
 800702a:	2301      	movs	r3, #1
 800702c:	e031      	b.n	8007092 <f_lseek+0x296>
				fp->flag &= ~FA__DIRTY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	799b      	ldrb	r3, [r3, #6]
 8007032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007036:	b2da      	uxtb	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	7858      	ldrb	r0, [r3, #1]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007048:	2301      	movs	r3, #1
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	f000 fee0 	bl	8007e10 <disk_read>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <f_lseek+0x26c>
				ABORT(fp->fs, FR_DISK_ERR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	799b      	ldrb	r3, [r3, #6]
 800705a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800705e:	b2da      	uxtb	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	719a      	strb	r2, [r3, #6]
 8007064:	2301      	movs	r3, #1
 8007066:	e014      	b.n	8007092 <f_lseek+0x296>
#endif
			fp->dsect = nsect;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	429a      	cmp	r2, r3
 8007078:	d90a      	bls.n	8007090 <f_lseek+0x294>
			fp->fsize = fp->fptr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	799b      	ldrb	r3, [r3, #6]
 8007086:	f043 0320 	orr.w	r3, r3, #32
 800708a:	b2da      	uxtb	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 800709e:	f000 fae5 	bl	800766c <sd_ini>
}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b092      	sub	sp, #72	; 0x48
 80070ac:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 80070ae:	4940      	ldr	r1, [pc, #256]	; (80071b0 <my_read_file+0x108>)
 80070b0:	2000      	movs	r0, #0
 80070b2:	f7ff fa0f 	bl	80064d4 <f_mount>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d175      	bne.n	80071a8 <my_read_file+0x100>
	{
		SEND_str("f_mount -> success\n");
 80070bc:	483d      	ldr	r0, [pc, #244]	; (80071b4 <my_read_file+0x10c>)
 80070be:	f7fb feaf 	bl	8002e20 <SEND_str>

		uint8_t path[10]="test.json";
 80070c2:	4a3d      	ldr	r2, [pc, #244]	; (80071b8 <my_read_file+0x110>)
 80070c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80070ca:	c303      	stmia	r3!, {r0, r1}
 80070cc:	801a      	strh	r2, [r3, #0]
		path[9] = '\0';
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		result = f_open(&MyFile, (char*)path, FA_READ);
 80070d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070d8:	2201      	movs	r2, #1
 80070da:	4619      	mov	r1, r3
 80070dc:	4837      	ldr	r0, [pc, #220]	; (80071bc <my_read_file+0x114>)
 80070de:	f7ff fa23 	bl	8006528 <f_open>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <my_read_file+0x118>)
 80070e8:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 80070ea:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <my_read_file+0x118>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d15a      	bne.n	80071a8 <my_read_file+0x100>
		{
			SEND_str("f_open -> success\n");
 80070f2:	4834      	ldr	r0, [pc, #208]	; (80071c4 <my_read_file+0x11c>)
 80070f4:	f7fb fe94 	bl	8002e20 <SEND_str>

			BytesToRead = MyFile.fsize;
 80070f8:	4b30      	ldr	r3, [pc, #192]	; (80071bc <my_read_file+0x114>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a32      	ldr	r2, [pc, #200]	; (80071c8 <my_read_file+0x120>)
 80070fe:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <my_read_file+0x120>)
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	463b      	mov	r3, r7
 8007106:	4931      	ldr	r1, [pc, #196]	; (80071cc <my_read_file+0x124>)
 8007108:	4618      	mov	r0, r3
 800710a:	f015 f833 	bl	801c174 <siprintf>
			SEND_str(str1);
 800710e:	463b      	mov	r3, r7
 8007110:	4618      	mov	r0, r3
 8007112:	f7fb fe85 	bl	8002e20 <SEND_str>

			BytesCounter = 0;
 8007116:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <my_read_file+0x128>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 800711c:	e017      	b.n	800714e <my_read_file+0xa6>
		    {
		       	f_read(&MyFile, readBuffer, 512, &readBytes);
 800711e:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <my_read_file+0x12c>)
 8007120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007124:	492c      	ldr	r1, [pc, #176]	; (80071d8 <my_read_file+0x130>)
 8007126:	4825      	ldr	r0, [pc, #148]	; (80071bc <my_read_file+0x114>)
 8007128:	f7ff fb0e 	bl	8006748 <f_read>
		       	BytesCounter += 512;
 800712c:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <my_read_file+0x128>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007134:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <my_read_file+0x128>)
 8007136:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8007138:	4827      	ldr	r0, [pc, #156]	; (80071d8 <my_read_file+0x130>)
 800713a:	f7f9 f853 	bl	80001e4 <strlen>
 800713e:	4603      	mov	r3, r0
 8007140:	b29a      	uxth	r2, r3
 8007142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007146:	4924      	ldr	r1, [pc, #144]	; (80071d8 <my_read_file+0x130>)
 8007148:	4824      	ldr	r0, [pc, #144]	; (80071dc <my_read_file+0x134>)
 800714a:	f007 fd0e 	bl	800eb6a <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <my_read_file+0x120>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <my_read_file+0x128>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d2df      	bcs.n	800711e <my_read_file+0x76>
		    }
		    if (BytesToRead != BytesCounter)
 800715e:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <my_read_file+0x120>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <my_read_file+0x128>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d01b      	beq.n	80071a2 <my_read_file+0xfa>
		    {
	        	f_read(&MyFile, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <my_read_file+0x120>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <my_read_file+0x128>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <my_read_file+0x12c>)
 8007176:	4918      	ldr	r1, [pc, #96]	; (80071d8 <my_read_file+0x130>)
 8007178:	4810      	ldr	r0, [pc, #64]	; (80071bc <my_read_file+0x114>)
 800717a:	f7ff fae5 	bl	8006748 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <my_read_file+0x120>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	b29a      	uxth	r2, r3
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <my_read_file+0x128>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	b29a      	uxth	r2, r3
 800718e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007192:	4911      	ldr	r1, [pc, #68]	; (80071d8 <my_read_file+0x130>)
 8007194:	4811      	ldr	r0, [pc, #68]	; (80071dc <my_read_file+0x134>)
 8007196:	f007 fce8 	bl	800eb6a <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <my_read_file+0x120>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a0c      	ldr	r2, [pc, #48]	; (80071d0 <my_read_file+0x128>)
 80071a0:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&MyFile);
 80071a2:	4806      	ldr	r0, [pc, #24]	; (80071bc <my_read_file+0x114>)
 80071a4:	f7ff fe16 	bl	8006dd4 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 80071a8:	bf00      	nop
 80071aa:	3748      	adds	r7, #72	; 0x48
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	2000148c 	.word	0x2000148c
 80071b4:	08021268 	.word	0x08021268
 80071b8:	080212a4 	.word	0x080212a4
 80071bc:	200016c4 	.word	0x200016c4
 80071c0:	200018e8 	.word	0x200018e8
 80071c4:	0802127c 	.word	0x0802127c
 80071c8:	20000f8c 	.word	0x20000f8c
 80071cc:	08021290 	.word	0x08021290
 80071d0:	20000f90 	.word	0x20000f90
 80071d4:	20000f94 	.word	0x20000f94
 80071d8:	20001df4 	.word	0x20001df4
 80071dc:	20001c3c 	.word	0x20001c3c

080071e0 <my_write_file_json>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file_json(char *path, char *text)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b092      	sub	sp, #72	; 0x48
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 80071ea:	4921      	ldr	r1, [pc, #132]	; (8007270 <my_write_file_json+0x90>)
 80071ec:	2000      	movs	r0, #0
 80071ee:	f7ff f971 	bl	80064d4 <f_mount>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d136      	bne.n	8007266 <my_write_file_json+0x86>
	{
		SEND_str("f_mount -> success\n");
 80071f8:	481e      	ldr	r0, [pc, #120]	; (8007274 <my_write_file_json+0x94>)
 80071fa:	f7fb fe11 	bl	8002e20 <SEND_str>

		result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 80071fe:	220a      	movs	r2, #10
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	481d      	ldr	r0, [pc, #116]	; (8007278 <my_write_file_json+0x98>)
 8007204:	f7ff f990 	bl	8006528 <f_open>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <my_write_file_json+0x9c>)
 800720e:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <my_write_file_json+0x9c>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d126      	bne.n	8007266 <my_write_file_json+0x86>
		{
			SEND_str("f_open -> success\n");
 8007218:	4819      	ldr	r0, [pc, #100]	; (8007280 <my_write_file_json+0xa0>)
 800721a:	f7fb fe01 	bl	8002e20 <SEND_str>

			result = f_write(&MyFile, text, strlen(text), &WriteBytes);
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f7f8 ffe0 	bl	80001e4 <strlen>
 8007224:	4602      	mov	r2, r0
 8007226:	4b17      	ldr	r3, [pc, #92]	; (8007284 <my_write_file_json+0xa4>)
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	4813      	ldr	r0, [pc, #76]	; (8007278 <my_write_file_json+0x98>)
 800722c:	f7ff fbdc 	bl	80069e8 <f_write>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <my_write_file_json+0x9c>)
 8007236:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <my_write_file_json+0x9c>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10f      	bne.n	8007260 <my_write_file_json+0x80>
			{
				SEND_str("f_write -> success\n");
 8007240:	4811      	ldr	r0, [pc, #68]	; (8007288 <my_write_file_json+0xa8>)
 8007242:	f7fb fded 	bl	8002e20 <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <my_write_file_json+0xa4>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	f107 030c 	add.w	r3, r7, #12
 800724e:	490f      	ldr	r1, [pc, #60]	; (800728c <my_write_file_json+0xac>)
 8007250:	4618      	mov	r0, r3
 8007252:	f014 ff8f 	bl	801c174 <siprintf>
				SEND_str(str1);
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	4618      	mov	r0, r3
 800725c:	f7fb fde0 	bl	8002e20 <SEND_str>
			}
		    f_close(&MyFile);
 8007260:	4805      	ldr	r0, [pc, #20]	; (8007278 <my_write_file_json+0x98>)
 8007262:	f7ff fdb7 	bl	8006dd4 <f_close>
		}
	}
}
 8007266:	bf00      	nop
 8007268:	3748      	adds	r7, #72	; 0x48
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	2000148c 	.word	0x2000148c
 8007274:	08021268 	.word	0x08021268
 8007278:	200016c4 	.word	0x200016c4
 800727c:	200018e8 	.word	0x200018e8
 8007280:	0802127c 	.word	0x0802127c
 8007284:	20000f98 	.word	0x20000f98
 8007288:	080212b0 	.word	0x080212b0
 800728c:	080212c4 	.word	0x080212c4

08007290 <my_write_file_firmware>:
//Принимает "path" - указатель на имя файла
//Принимает "data_bytes" - указатель на буффер данных, которые нужно сохранить
//Принимает "crc32" - контрольную сумму принимаемого пакеда данных
//Возвращает статус контроля целостности данных
char *my_write_file_firmware(char *name, char *data_bytes, uint32_t crc32)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
	if(!check_init)
 800729c:	4b49      	ldr	r3, [pc, #292]	; (80073c4 <my_write_file_firmware+0x134>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f083 0301 	eor.w	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d019      	beq.n	80072de <my_write_file_firmware+0x4e>
	{
		if (f_mount(0, &FATFS_Obj) == FR_OK)
 80072aa:	4947      	ldr	r1, [pc, #284]	; (80073c8 <my_write_file_firmware+0x138>)
 80072ac:	2000      	movs	r0, #0
 80072ae:	f7ff f911 	bl	80064d4 <f_mount>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <my_write_file_firmware+0x4e>
		{
			result = f_open(&MyFile, name + '\0', FA_CREATE_ALWAYS | FA_WRITE);
 80072b8:	220a      	movs	r2, #10
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	4843      	ldr	r0, [pc, #268]	; (80073cc <my_write_file_firmware+0x13c>)
 80072be:	f7ff f933 	bl	8006528 <f_open>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <my_write_file_firmware+0x140>)
 80072c8:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 80072ca:	4b41      	ldr	r3, [pc, #260]	; (80073d0 <my_write_file_firmware+0x140>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <my_write_file_firmware+0x4e>
			{
				check_init = true;
 80072d2:	4b3c      	ldr	r3, [pc, #240]	; (80073c4 <my_write_file_firmware+0x134>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
				firmwareBytesCounter = 0;
 80072d8:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <my_write_file_firmware+0x144>)
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(check_init)
 80072de:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <my_write_file_firmware+0x134>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d068      	beq.n	80073b8 <my_write_file_firmware+0x128>
	{
		result = f_lseek(&MyFile, MyFile.fsize);	//Поиск конца файла
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <my_write_file_firmware+0x13c>)
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	4619      	mov	r1, r3
 80072ec:	4837      	ldr	r0, [pc, #220]	; (80073cc <my_write_file_firmware+0x13c>)
 80072ee:	f7ff fd85 	bl	8006dfc <f_lseek>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <my_write_file_firmware+0x140>)
 80072f8:	701a      	strb	r2, [r3, #0]
		if(result == FR_OK)
 80072fa:	4b35      	ldr	r3, [pc, #212]	; (80073d0 <my_write_file_firmware+0x140>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d15a      	bne.n	80073b8 <my_write_file_firmware+0x128>
		{
			uint32_t crc32_t = HAL_CRC_Calculate(&hcrc, (uint32_t *)(data_bytes), 256);	//3-й параметр - указываем количество полных слов(0xFFFFFF)
 8007302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4833      	ldr	r0, [pc, #204]	; (80073d8 <my_write_file_firmware+0x148>)
 800730a:	f003 fa02 	bl	800a712 <HAL_CRC_Calculate>
 800730e:	6178      	str	r0, [r7, #20]
			if(crc32 == crc32_t)
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	429a      	cmp	r2, r3
 8007316:	d14d      	bne.n	80073b4 <my_write_file_firmware+0x124>
			{
				if((firmware.SIZE - firmwareBytesCounter) >= 1024)	//default: 248
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <my_write_file_firmware+0x14c>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	461a      	mov	r2, r3
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <my_write_file_firmware+0x144>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d31f      	bcc.n	800736a <my_write_file_firmware+0xda>
				{
					result = f_write(&MyFile, data_bytes, 1024, &WriteBytes);
 800732a:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <my_write_file_firmware+0x150>)
 800732c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	4826      	ldr	r0, [pc, #152]	; (80073cc <my_write_file_firmware+0x13c>)
 8007334:	f7ff fb58 	bl	80069e8 <f_write>
 8007338:	4603      	mov	r3, r0
 800733a:	461a      	mov	r2, r3
 800733c:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <my_write_file_firmware+0x140>)
 800733e:	701a      	strb	r2, [r3, #0]
					firmwareBytesCounter += 1024;
 8007340:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <my_write_file_firmware+0x144>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007348:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <my_write_file_firmware+0x144>)
 800734a:	6013      	str	r3, [r2, #0]
					if(firmwareBytesCounter == firmware.SIZE)
 800734c:	4b23      	ldr	r3, [pc, #140]	; (80073dc <my_write_file_firmware+0x14c>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	461a      	mov	r2, r3
 8007352:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <my_write_file_firmware+0x144>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d12a      	bne.n	80073b0 <my_write_file_firmware+0x120>
					{
					    f_close(&MyFile);
 800735a:	481c      	ldr	r0, [pc, #112]	; (80073cc <my_write_file_firmware+0x13c>)
 800735c:	f7ff fd3a 	bl	8006dd4 <f_close>
						firmware.check_UPD = false;
 8007360:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <my_write_file_firmware+0x14c>)
 8007362:	2200      	movs	r2, #0
 8007364:	731a      	strb	r2, [r3, #12]
						return FW_COMPLETE;
 8007366:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <my_write_file_firmware+0x154>)
 8007368:	e027      	b.n	80073ba <my_write_file_firmware+0x12a>
					}
				}
				else if (firmware.SIZE != firmwareBytesCounter)
 800736a:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <my_write_file_firmware+0x14c>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	461a      	mov	r2, r3
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <my_write_file_firmware+0x144>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d01b      	beq.n	80073b0 <my_write_file_firmware+0x120>
				{
					result = f_write(&MyFile, data_bytes, (firmware.SIZE - firmwareBytesCounter) , &WriteBytes);
 8007378:	4b18      	ldr	r3, [pc, #96]	; (80073dc <my_write_file_firmware+0x14c>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	461a      	mov	r2, r3
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <my_write_file_firmware+0x144>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <my_write_file_firmware+0x150>)
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	4810      	ldr	r0, [pc, #64]	; (80073cc <my_write_file_firmware+0x13c>)
 800738a:	f7ff fb2d 	bl	80069e8 <f_write>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <my_write_file_firmware+0x140>)
 8007394:	701a      	strb	r2, [r3, #0]
					firmwareBytesCounter = firmware.SIZE;
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <my_write_file_firmware+0x14c>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	461a      	mov	r2, r3
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <my_write_file_firmware+0x144>)
 800739e:	601a      	str	r2, [r3, #0]
				    f_close(&MyFile);
 80073a0:	480a      	ldr	r0, [pc, #40]	; (80073cc <my_write_file_firmware+0x13c>)
 80073a2:	f7ff fd17 	bl	8006dd4 <f_close>
					firmware.check_UPD = false;
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <my_write_file_firmware+0x14c>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	731a      	strb	r2, [r3, #12]
					return FW_COMPLETE;
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <my_write_file_firmware+0x154>)
 80073ae:	e004      	b.n	80073ba <my_write_file_firmware+0x12a>
				}
				return FW_CRC32_OK;
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <my_write_file_firmware+0x158>)
 80073b2:	e002      	b.n	80073ba <my_write_file_firmware+0x12a>
			}
			return FW_CRC32_ERR;
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <my_write_file_firmware+0x15c>)
 80073b6:	e000      	b.n	80073ba <my_write_file_firmware+0x12a>
		}
	}
	return FW_UPD_ERROR;
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <my_write_file_firmware+0x160>)
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000abc 	.word	0x20000abc
 80073c8:	2000148c 	.word	0x2000148c
 80073cc:	200016c4 	.word	0x200016c4
 80073d0:	200018e8 	.word	0x200018e8
 80073d4:	20000ab8 	.word	0x20000ab8
 80073d8:	20001484 	.word	0x20001484
 80073dc:	200012b8 	.word	0x200012b8
 80073e0:	20000f98 	.word	0x20000f98
 80073e4:	080212dc 	.word	0x080212dc
 80073e8:	080212e8 	.word	0x080212e8
 80073ec:	080212ec 	.word	0x080212ec
 80073f0:	080212f4 	.word	0x080212f4

080073f4 <save_dido>:
}
//Функция сохраниения конфигурационных данных (Включить/выключить цифровой выход(Открытый коллектор) если цифровой вход = значение(уровень))
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "text" - указатель на строку JSON
void save_dido(char *D_IN, char *text)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 80073fe:	6838      	ldr	r0, [r7, #0]
 8007400:	f7fb fd0e 	bl	8002e20 <SEND_str>
	sprintf(name_FIL,"%s%s.json", D_IN, "(DiDo)");
 8007404:	f107 0008 	add.w	r0, r7, #8
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <save_dido+0x3c>)
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4909      	ldr	r1, [pc, #36]	; (8007434 <save_dido+0x40>)
 800740e:	f014 feb1 	bl	801c174 <siprintf>
	SEND_str(name_FIL);
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4618      	mov	r0, r3
 8007418:	f7fb fd02 	bl	8002e20 <SEND_str>
	my_write_file_json(name_FIL, text);
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fedc 	bl	80071e0 <my_write_file_json>
}
 8007428:	bf00      	nop
 800742a:	3728      	adds	r7, #40	; 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	08021308 	.word	0x08021308
 8007434:	08021310 	.word	0x08021310

08007438 <save_aido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если аналоговый вход в интервале значений)
//Принимает "A_IN" - строку с номером аналогового входа
//Принимает "text" - указатель на строку JSON
void save_aido(char *A_IN, char *text)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8007442:	6838      	ldr	r0, [r7, #0]
 8007444:	f7fb fcec 	bl	8002e20 <SEND_str>
	sprintf(name_FIL,"%s%s.json", A_IN, "(AiDo)");
 8007448:	f107 0008 	add.w	r0, r7, #8
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <save_aido+0x3c>)
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4909      	ldr	r1, [pc, #36]	; (8007478 <save_aido+0x40>)
 8007452:	f014 fe8f 	bl	801c174 <siprintf>
	SEND_str(name_FIL);
 8007456:	f107 0308 	add.w	r3, r7, #8
 800745a:	4618      	mov	r0, r3
 800745c:	f7fb fce0 	bl	8002e20 <SEND_str>
	my_write_file_json(name_FIL, text);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff feba 	bl	80071e0 <my_write_file_json>
}
 800746c:	bf00      	nop
 800746e:	3728      	adds	r7, #40	; 0x28
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	0802131c 	.word	0x0802131c
 8007478:	08021310 	.word	0x08021310

0800747c <save_pwm>:
//Функция сохраниения конфигурационных данных (Задать сигнал ШИМ на одном выходе)
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "text" - указатель на строку JSON
void save_pwm(char *PWM_OUT, char *text)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f7fb fcca 	bl	8002e20 <SEND_str>
	sprintf(name_FIL,"%s.json", PWM_OUT);
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4909      	ldr	r1, [pc, #36]	; (80074b8 <save_pwm+0x3c>)
 8007494:	4618      	mov	r0, r3
 8007496:	f014 fe6d 	bl	801c174 <siprintf>
	SEND_str(name_FIL);
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fb fcbe 	bl	8002e20 <SEND_str>
	my_write_file_json(name_FIL, text);
 80074a4:	f107 0308 	add.w	r3, r7, #8
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fe98 	bl	80071e0 <my_write_file_json>
}
 80074b0:	bf00      	nop
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	08021324 	.word	0x08021324

080074bc <save_tsido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если температура датчика в интервале значений)
//Принимает "ROM_RAW" - строку с уникальным идентификатором температурного датчика
//Принимает "text" - указатель на строку JSON
void save_tsido(char *ROM_RAW, char *text)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 80074c6:	6838      	ldr	r0, [r7, #0]
 80074c8:	f7fb fcaa 	bl	8002e20 <SEND_str>
	sprintf(name_FIL,"%s%s.json", ROM_RAW, "(TSiDo)");
 80074cc:	f107 0008 	add.w	r0, r7, #8
 80074d0:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <save_tsido+0x3c>)
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4909      	ldr	r1, [pc, #36]	; (80074fc <save_tsido+0x40>)
 80074d6:	f014 fe4d 	bl	801c174 <siprintf>
	SEND_str(name_FIL);
 80074da:	f107 0308 	add.w	r3, r7, #8
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fb fc9e 	bl	8002e20 <SEND_str>
	my_write_file_json(name_FIL, text);
 80074e4:	f107 0308 	add.w	r3, r7, #8
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fe78 	bl	80071e0 <my_write_file_json>
}
 80074f0:	bf00      	nop
 80074f2:	3728      	adds	r7, #40	; 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	0802132c 	.word	0x0802132c
 80074fc:	08021310 	.word	0x08021310

08007500 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
	LD_ON;
 8007504:	2200      	movs	r2, #0
 8007506:	2101      	movs	r1, #1
 8007508:	4802      	ldr	r0, [pc, #8]	; (8007514 <Error+0x14>)
 800750a:	f004 ff19 	bl	800c340 <HAL_GPIO_WritePin>
}
 800750e:	bf00      	nop
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40020000 	.word	0x40020000

08007518 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8007526:	f107 020f 	add.w	r2, r7, #15
 800752a:	1df9      	adds	r1, r7, #7
 800752c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	2301      	movs	r3, #1
 8007534:	4806      	ldr	r0, [pc, #24]	; (8007550 <SPIx_WriteRead+0x38>)
 8007536:	f005 ff76 	bl	800d426 <HAL_SPI_TransmitReceive>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <SPIx_WriteRead+0x2c>
	{
		Error();
 8007540:	f7ff ffde 	bl	8007500 <Error>
  	}
  	return receivedbyte;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20001964 	.word	0x20001964

08007554 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ffd9 	bl	8007518 <SPIx_WriteRead>
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8007574:	20ff      	movs	r0, #255	; 0xff
 8007576:	f7ff ffcf 	bl	8007518 <SPIx_WriteRead>
 800757a:	4603      	mov	r3, r0
 800757c:	71fb      	strb	r3, [r7, #7]
	return bt;
 800757e:	79fb      	ldrb	r3, [r7, #7]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 800758c:	20ff      	movs	r0, #255	; 0xff
 800758e:	f7ff ffc3 	bl	8007518 <SPIx_WriteRead>
}
 8007592:	bf00      	nop
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 80075a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da0e      	bge.n	80075ca <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b2:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 80075b4:	2100      	movs	r1, #0
 80075b6:	2077      	movs	r0, #119	; 0x77
 80075b8:	f7ff ffee 	bl	8007598 <SD_cmd>
 80075bc:	4603      	mov	r3, r0
 80075be:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d901      	bls.n	80075ca <SD_cmd+0x32>
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	e049      	b.n	800765e <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 80075ca:	2201      	movs	r2, #1
 80075cc:	2140      	movs	r1, #64	; 0x40
 80075ce:	4826      	ldr	r0, [pc, #152]	; (8007668 <SD_cmd+0xd0>)
 80075d0:	f004 feb6 	bl	800c340 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80075d4:	f7ff ffcb 	bl	800756e <SPI_ReceiveByte>
	SS_SD_SELECT();
 80075d8:	2200      	movs	r2, #0
 80075da:	2140      	movs	r1, #64	; 0x40
 80075dc:	4822      	ldr	r0, [pc, #136]	; (8007668 <SD_cmd+0xd0>)
 80075de:	f004 feaf 	bl	800c340 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80075e2:	f7ff ffc4 	bl	800756e <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ffb3 	bl	8007554 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	0e1b      	lsrs	r3, r3, #24
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff ffad 	bl	8007554 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff ffa7 	bl	8007554 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	0a1b      	lsrs	r3, r3, #8
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ffa1 	bl	8007554 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff ff9c 	bl	8007554 <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d101      	bne.n	800762a <SD_cmd+0x92>
 8007626:	2395      	movs	r3, #149	; 0x95
 8007628:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	2b48      	cmp	r3, #72	; 0x48
 800762e:	d101      	bne.n	8007634 <SD_cmd+0x9c>
 8007630:	2387      	movs	r3, #135	; 0x87
 8007632:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff ff8c 	bl	8007554 <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 800763c:	230a      	movs	r3, #10
 800763e:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8007640:	f7ff ff95 	bl	800756e <SPI_ReceiveByte>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8007648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800764c:	2b00      	cmp	r3, #0
 800764e:	da05      	bge.n	800765c <SD_cmd+0xc4>
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	3b01      	subs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f1      	bne.n	8007640 <SD_cmd+0xa8>

	return res;
 800765c:	7bbb      	ldrb	r3, [r7, #14]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40020400 	.word	0x40020400

0800766c <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b087      	sub	sp, #28
 8007670:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8007672:	2201      	movs	r2, #1
 8007674:	2101      	movs	r1, #1
 8007676:	4881      	ldr	r0, [pc, #516]	; (800787c <sd_ini+0x210>)
 8007678:	f004 fe62 	bl	800c340 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 800767c:	4b80      	ldr	r3, [pc, #512]	; (8007880 <sd_ini+0x214>)
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8007682:	4b80      	ldr	r3, [pc, #512]	; (8007884 <sd_ini+0x218>)
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8007688:	4b7e      	ldr	r3, [pc, #504]	; (8007884 <sd_ini+0x218>)
 800768a:	2238      	movs	r2, #56	; 0x38
 800768c:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800768e:	487d      	ldr	r0, [pc, #500]	; (8007884 <sd_ini+0x218>)
 8007690:	f005 fe65 	bl	800d35e <HAL_SPI_Init>
	SS_SD_DESELECT();
 8007694:	2201      	movs	r2, #1
 8007696:	2140      	movs	r1, #64	; 0x40
 8007698:	487b      	ldr	r0, [pc, #492]	; (8007888 <sd_ini+0x21c>)
 800769a:	f004 fe51 	bl	800c340 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
 80076a2:	e004      	b.n	80076ae <sd_ini+0x42>
		SPI_Release();
 80076a4:	f7ff ff70 	bl	8007588 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	3301      	adds	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b09      	cmp	r3, #9
 80076b2:	d9f7      	bls.n	80076a4 <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 80076b4:	4a73      	ldr	r2, [pc, #460]	; (8007884 <sd_ini+0x218>)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 80076ba:	4872      	ldr	r0, [pc, #456]	; (8007884 <sd_ini+0x218>)
 80076bc:	f005 fe4f 	bl	800d35e <HAL_SPI_Init>
	SS_SD_SELECT();
 80076c0:	2200      	movs	r2, #0
 80076c2:	2140      	movs	r1, #64	; 0x40
 80076c4:	4870      	ldr	r0, [pc, #448]	; (8007888 <sd_ini+0x21c>)
 80076c6:	f004 fe3b 	bl	800c340 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80076ca:	2100      	movs	r1, #0
 80076cc:	2040      	movs	r0, #64	; 0x40
 80076ce:	f7ff ff63 	bl	8007598 <SD_cmd>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	f040 80be 	bne.w	8007856 <sd_ini+0x1ea>
	{
		SPI_Release();
 80076da:	f7ff ff55 	bl	8007588 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 80076de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076e2:	2048      	movs	r0, #72	; 0x48
 80076e4:	f7ff ff58 	bl	8007598 <SD_cmd>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d17b      	bne.n	80077e6 <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
 80076f2:	e00c      	b.n	800770e <sd_ini+0xa2>
 80076f4:	7bfc      	ldrb	r4, [r7, #15]
 80076f6:	f7ff ff3a 	bl	800756e <SPI_ReceiveByte>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	f107 0310 	add.w	r3, r7, #16
 8007702:	4423      	add	r3, r4
 8007704:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	3301      	adds	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d9ef      	bls.n	80076f4 <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8007714:	793b      	ldrb	r3, [r7, #4]
 8007716:	4619      	mov	r1, r3
 8007718:	797b      	ldrb	r3, [r7, #5]
 800771a:	4618      	mov	r0, r3
 800771c:	79bb      	ldrb	r3, [r7, #6]
 800771e:	79fa      	ldrb	r2, [r7, #7]
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	460a      	mov	r2, r1
 8007728:	4958      	ldr	r1, [pc, #352]	; (800788c <sd_ini+0x220>)
 800772a:	4859      	ldr	r0, [pc, #356]	; (8007890 <sd_ini+0x224>)
 800772c:	f014 fd22 	bl	801c174 <siprintf>
			SEND_str(str1);
 8007730:	4857      	ldr	r0, [pc, #348]	; (8007890 <sd_ini+0x224>)
 8007732:	f7fb fb75 	bl	8002e20 <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8007736:	79bb      	ldrb	r3, [r7, #6]
 8007738:	2b01      	cmp	r3, #1
 800773a:	f040 808e 	bne.w	800785a <sd_ini+0x1ee>
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2baa      	cmp	r3, #170	; 0xaa
 8007742:	f040 808a 	bne.w	800785a <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8007746:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800774a:	81bb      	strh	r3, [r7, #12]
 800774c:	e005      	b.n	800775a <sd_ini+0xee>
 800774e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29b      	uxth	r3, r3
 8007758:	81bb      	strh	r3, [r7, #12]
 800775a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <sd_ini+0x106>
 8007762:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007766:	20e9      	movs	r0, #233	; 0xe9
 8007768:	f7ff ff16 	bl	8007598 <SD_cmd>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1ed      	bne.n	800774e <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8007772:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d06f      	beq.n	800785a <sd_ini+0x1ee>
 800777a:	2100      	movs	r1, #0
 800777c:	207a      	movs	r0, #122	; 0x7a
 800777e:	f7ff ff0b 	bl	8007598 <SD_cmd>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d168      	bne.n	800785a <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	e00c      	b.n	80077a8 <sd_ini+0x13c>
 800778e:	7bfc      	ldrb	r4, [r7, #15]
 8007790:	f7ff feed 	bl	800756e <SPI_ReceiveByte>
 8007794:	4603      	mov	r3, r0
 8007796:	461a      	mov	r2, r3
 8007798:	f107 0310 	add.w	r3, r7, #16
 800779c:	4423      	add	r3, r4
 800779e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	3301      	adds	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d9ef      	bls.n	800778e <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 80077ae:	793b      	ldrb	r3, [r7, #4]
 80077b0:	4619      	mov	r1, r3
 80077b2:	797b      	ldrb	r3, [r7, #5]
 80077b4:	4618      	mov	r0, r3
 80077b6:	79bb      	ldrb	r3, [r7, #6]
 80077b8:	79fa      	ldrb	r2, [r7, #7]
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4603      	mov	r3, r0
 80077c0:	460a      	mov	r2, r1
 80077c2:	4932      	ldr	r1, [pc, #200]	; (800788c <sd_ini+0x220>)
 80077c4:	4832      	ldr	r0, [pc, #200]	; (8007890 <sd_ini+0x224>)
 80077c6:	f014 fcd5 	bl	801c174 <siprintf>
				SEND_str(str1);
 80077ca:	4831      	ldr	r0, [pc, #196]	; (8007890 <sd_ini+0x224>)
 80077cc:	f7fb fb28 	bl	8002e20 <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80077d0:	793b      	ldrb	r3, [r7, #4]
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <sd_ini+0x172>
 80077da:	220c      	movs	r2, #12
 80077dc:	e000      	b.n	80077e0 <sd_ini+0x174>
 80077de:	2204      	movs	r2, #4
 80077e0:	4b27      	ldr	r3, [pc, #156]	; (8007880 <sd_ini+0x214>)
 80077e2:	701a      	strb	r2, [r3, #0]
 80077e4:	e039      	b.n	800785a <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 80077e6:	2100      	movs	r1, #0
 80077e8:	20e9      	movs	r0, #233	; 0xe9
 80077ea:	f7ff fed5 	bl	8007598 <SD_cmd>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d805      	bhi.n	8007800 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <sd_ini+0x214>)
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	23e9      	movs	r3, #233	; 0xe9
 80077fc:	73bb      	strb	r3, [r7, #14]
 80077fe:	e004      	b.n	800780a <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 8007800:	4b1f      	ldr	r3, [pc, #124]	; (8007880 <sd_ini+0x214>)
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	2341      	movs	r3, #65	; 0x41
 8007808:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 800780a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800780e:	81bb      	strh	r3, [r7, #12]
 8007810:	e005      	b.n	800781e <sd_ini+0x1b2>
 8007812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29b      	uxth	r3, r3
 800781c:	81bb      	strh	r3, [r7, #12]
 800781e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <sd_ini+0x1ca>
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff feb4 	bl	8007598 <SD_cmd>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1ed      	bne.n	8007812 <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 8007836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <sd_ini+0x1e2>
 800783e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007842:	2050      	movs	r0, #80	; 0x50
 8007844:	f7ff fea8 	bl	8007598 <SD_cmd>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <sd_ini+0x1ee>
				sdinfo.type = 0;
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <sd_ini+0x214>)
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e001      	b.n	800785a <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 8007856:	2301      	movs	r3, #1
 8007858:	e00b      	b.n	8007872 <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <sd_ini+0x214>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	490c      	ldr	r1, [pc, #48]	; (8007894 <sd_ini+0x228>)
 8007864:	480a      	ldr	r0, [pc, #40]	; (8007890 <sd_ini+0x224>)
 8007866:	f014 fc85 	bl	801c174 <siprintf>
	SEND_str(str1);
 800786a:	4809      	ldr	r0, [pc, #36]	; (8007890 <sd_ini+0x224>)
 800786c:	f7fb fad8 	bl	8002e20 <SEND_str>
	return 0;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bd90      	pop	{r4, r7, pc}
 800787a:	bf00      	nop
 800787c:	40020000 	.word	0x40020000
 8007880:	20001ff4 	.word	0x20001ff4
 8007884:	20001964 	.word	0x20001964
 8007888:	40020400 	.word	0x40020400
 800788c:	08021334 	.word	0x08021334
 8007890:	20000f9c 	.word	0x20000f9c
 8007894:	08021358 	.word	0x08021358

08007898 <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <FCLK_SLOW+0x28>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80078aa:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80078ac:	4a04      	ldr	r2, [pc, #16]	; (80078c0 <FCLK_SLOW+0x28>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40013000 	.word	0x40013000

080078c4 <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <FCLK_FAST+0x2c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80078d6:	f043 0310 	orr.w	r3, r3, #16
 80078da:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <FCLK_FAST+0x2c>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6013      	str	r3, [r2, #0]
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40013000 	.word	0x40013000

080078f4 <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 80078fe:	bf00      	nop
 8007900:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <xmit_spi+0x40>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0f9      	beq.n	8007900 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 800790c:	4a09      	ldr	r2, [pc, #36]	; (8007934 <xmit_spi+0x40>)
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 8007912:	bf00      	nop
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <xmit_spi+0x40>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f9      	beq.n	8007914 <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <xmit_spi+0x40>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	b2db      	uxtb	r3, r3
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40013000 	.word	0x40013000

08007938 <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 800793c:	20ff      	movs	r0, #255	; 0xff
 800793e:	f7ff ffd9 	bl	80078f4 <xmit_spi>
 8007942:	4603      	mov	r3, r0
}
 8007944:	4618      	mov	r0, r3
 8007946:	bd80      	pop	{r7, pc}

08007948 <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8007950:	4a0a      	ldr	r2, [pc, #40]	; (800797c <wait_ready+0x34>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 8007956:	f7ff ffef 	bl	8007938 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 800795a:	f7ff ffed 	bl	8007938 <rcvr_spi>
 800795e:	4603      	mov	r3, r0
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d101      	bne.n	8007968 <wait_ready+0x20>
 8007964:	2301      	movs	r3, #1
 8007966:	e004      	b.n	8007972 <wait_ready+0x2a>
	while (Timer2);
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <wait_ready+0x34>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f4      	bne.n	800795a <wait_ready+0x12>

	return 0;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000fe0 	.word	0x20000fe0

08007980 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
	CS_HIGH();
 8007984:	2201      	movs	r2, #1
 8007986:	2140      	movs	r1, #64	; 0x40
 8007988:	4803      	ldr	r0, [pc, #12]	; (8007998 <deselect+0x18>)
 800798a:	f004 fcd9 	bl	800c340 <HAL_GPIO_WritePin>
	rcvr_spi();
 800798e:	f7ff ffd3 	bl	8007938 <rcvr_spi>
}
 8007992:	bf00      	nop
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40020400 	.word	0x40020400

0800799c <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
	CS_LOW();
 80079a0:	2200      	movs	r2, #0
 80079a2:	2140      	movs	r1, #64	; 0x40
 80079a4:	4807      	ldr	r0, [pc, #28]	; (80079c4 <selecting+0x28>)
 80079a6:	f004 fccb 	bl	800c340 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 80079aa:	2032      	movs	r0, #50	; 0x32
 80079ac:	f7ff ffcc 	bl	8007948 <wait_ready>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <selecting+0x22>
		deselect();
 80079b6:	f7ff ffe3 	bl	8007980 <deselect>
		return 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <selecting+0x24>
	}
	return 1;
 80079be:	2301      	movs	r3, #1
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40020400 	.word	0x40020400

080079c8 <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80079cc:	4b03      	ldr	r3, [pc, #12]	; (80079dc <power_status+0x14>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000fd8 	.word	0x20000fd8

080079e0 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 80079e6:	2201      	movs	r2, #1
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	480b      	ldr	r0, [pc, #44]	; (8007a18 <power_on+0x38>)
 80079ec:	f004 fca8 	bl	800c340 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	71fb      	strb	r3, [r7, #7]
 80079f4:	e005      	b.n	8007a02 <power_on+0x22>
		xmit_spi(0xFF);
 80079f6:	20ff      	movs	r0, #255	; 0xff
 80079f8:	f7ff ff7c 	bl	80078f4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	3301      	adds	r3, #1
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d9f6      	bls.n	80079f6 <power_on+0x16>

	PowerFlag = 1;
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <power_on+0x3c>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]

}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40020400 	.word	0x40020400
 8007a1c:	20000fd8 	.word	0x20000fd8

08007a20 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <power_off+0x14>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	20000fd8 	.word	0x20000fd8

08007a38 <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8007a42:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <rcvr_datablock+0x90>)
 8007a44:	2214      	movs	r2, #20
 8007a46:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 8007a48:	f7ff ff76 	bl	8007938 <rcvr_spi>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2bff      	cmp	r3, #255	; 0xff
 8007a54:	d103      	bne.n	8007a5e <rcvr_datablock+0x26>
 8007a56:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <rcvr_datablock+0x90>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f4      	bne.n	8007a48 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2bfe      	cmp	r3, #254	; 0xfe
 8007a62:	d001      	beq.n	8007a68 <rcvr_datablock+0x30>
 8007a64:	2300      	movs	r3, #0
 8007a66:	e02a      	b.n	8007abe <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8007a68:	687c      	ldr	r4, [r7, #4]
 8007a6a:	1c63      	adds	r3, r4, #1
 8007a6c:	607b      	str	r3, [r7, #4]
 8007a6e:	20ff      	movs	r0, #255	; 0xff
 8007a70:	f7ff ff40 	bl	80078f4 <xmit_spi>
 8007a74:	4603      	mov	r3, r0
 8007a76:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a78:	687c      	ldr	r4, [r7, #4]
 8007a7a:	1c63      	adds	r3, r4, #1
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	20ff      	movs	r0, #255	; 0xff
 8007a80:	f7ff ff38 	bl	80078f4 <xmit_spi>
 8007a84:	4603      	mov	r3, r0
 8007a86:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a88:	687c      	ldr	r4, [r7, #4]
 8007a8a:	1c63      	adds	r3, r4, #1
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	20ff      	movs	r0, #255	; 0xff
 8007a90:	f7ff ff30 	bl	80078f4 <xmit_spi>
 8007a94:	4603      	mov	r3, r0
 8007a96:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a98:	687c      	ldr	r4, [r7, #4]
 8007a9a:	1c63      	adds	r3, r4, #1
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	20ff      	movs	r0, #255	; 0xff
 8007aa0:	f7ff ff28 	bl	80078f4 <xmit_spi>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1d9      	bne.n	8007a68 <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 8007ab4:	f7ff ff40 	bl	8007938 <rcvr_spi>
	rcvr_spi();
 8007ab8:	f7ff ff3e 	bl	8007938 <rcvr_spi>

	return 1;						/* Return with success */
 8007abc:	2301      	movs	r3, #1
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd90      	pop	{r4, r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000fdc 	.word	0x20000fdc

08007acc <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 8007ad8:	2032      	movs	r0, #50	; 0x32
 8007ada:	f7ff ff35 	bl	8007948 <wait_ready>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <xmit_datablock+0x1c>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e02e      	b.n	8007b46 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ff02 	bl	80078f4 <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	2bfd      	cmp	r3, #253	; 0xfd
 8007af4:	d026      	beq.n	8007b44 <xmit_datablock+0x78>
		wc = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fef6 	bl	80078f4 <xmit_spi>
			xmit_spi(*buff++);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	607a      	str	r2, [r7, #4]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff feef 	bl	80078f4 <xmit_spi>
		} while (--wc);
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1eb      	bne.n	8007afa <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 8007b22:	20ff      	movs	r0, #255	; 0xff
 8007b24:	f7ff fee6 	bl	80078f4 <xmit_spi>
		xmit_spi(0xFF);
 8007b28:	20ff      	movs	r0, #255	; 0xff
 8007b2a:	f7ff fee3 	bl	80078f4 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 8007b2e:	f7ff ff03 	bl	8007938 <rcvr_spi>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2b05      	cmp	r3, #5
 8007b3e:	d001      	beq.n	8007b44 <xmit_datablock+0x78>
			return 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	e000      	b.n	8007b46 <xmit_datablock+0x7a>
	}

	return 1;
 8007b44:	2301      	movs	r3, #1
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	4603      	mov	r3, r0
 8007b56:	6039      	str	r1, [r7, #0]
 8007b58:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 8007b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da0e      	bge.n	8007b80 <send_cmd+0x32>
		cmd &= 0x7F;
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b68:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	2037      	movs	r0, #55	; 0x37
 8007b6e:	f7ff ffee 	bl	8007b4e <send_cmd>
 8007b72:	4603      	mov	r3, r0
 8007b74:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d901      	bls.n	8007b80 <send_cmd+0x32>
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	e04c      	b.n	8007c1a <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8007b80:	f7ff fefe 	bl	8007980 <deselect>
	if (!selecting()) return 0xFF;
 8007b84:	f7ff ff0a 	bl	800799c <selecting>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <send_cmd+0x44>
 8007b8e:	23ff      	movs	r3, #255	; 0xff
 8007b90:	e043      	b.n	8007c1a <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff feaa 	bl	80078f4 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	0e1b      	lsrs	r3, r3, #24
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fea4 	bl	80078f4 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	0c1b      	lsrs	r3, r3, #16
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fe9e 	bl	80078f4 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fe98 	bl	80078f4 <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fe93 	bl	80078f4 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <send_cmd+0x8e>
 8007bd8:	2395      	movs	r3, #149	; 0x95
 8007bda:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d101      	bne.n	8007be6 <send_cmd+0x98>
 8007be2:	2387      	movs	r3, #135	; 0x87
 8007be4:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fe83 	bl	80078f4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b0c      	cmp	r3, #12
 8007bf2:	d101      	bne.n	8007bf8 <send_cmd+0xaa>
 8007bf4:	f7ff fea0 	bl	8007938 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 8007bf8:	230a      	movs	r3, #10
 8007bfa:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8007bfc:	f7ff fe9c 	bl	8007938 <rcvr_spi>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8007c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da05      	bge.n	8007c18 <send_cmd+0xca>
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f1      	bne.n	8007bfc <send_cmd+0xae>

	return res;			/* Return with the response value */
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <disk_initialize+0x14>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0c9      	b.n	8007dcc <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8007c38:	4b66      	ldr	r3, [pc, #408]	; (8007dd4 <disk_initialize+0x1b0>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <disk_initialize+0x2a>
 8007c46:	4b63      	ldr	r3, [pc, #396]	; (8007dd4 <disk_initialize+0x1b0>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e0be      	b.n	8007dcc <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 8007c4e:	2201      	movs	r2, #1
 8007c50:	2140      	movs	r1, #64	; 0x40
 8007c52:	4861      	ldr	r0, [pc, #388]	; (8007dd8 <disk_initialize+0x1b4>)
 8007c54:	f004 fb74 	bl	800c340 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 8007c58:	f7ff fec2 	bl	80079e0 <power_on>
	FCLK_SLOW();
 8007c5c:	f7ff fe1c 	bl	8007898 <FCLK_SLOW>
	CS_LOW();
 8007c60:	2200      	movs	r2, #0
 8007c62:	2140      	movs	r1, #64	; 0x40
 8007c64:	485c      	ldr	r0, [pc, #368]	; (8007dd8 <disk_initialize+0x1b4>)
 8007c66:	f004 fb6b 	bl	800c340 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	73fb      	strb	r3, [r7, #15]
 8007c6e:	e004      	b.n	8007c7a <disk_initialize+0x56>
 8007c70:	f7ff fe62 	bl	8007938 <rcvr_spi>
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f7      	bne.n	8007c70 <disk_initialize+0x4c>

	ty = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8007c84:	2100      	movs	r1, #0
 8007c86:	2000      	movs	r0, #0
 8007c88:	f7ff ff61 	bl	8007b4e <send_cmd>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	f040 8084 	bne.w	8007d9c <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 8007c94:	4b51      	ldr	r3, [pc, #324]	; (8007ddc <disk_initialize+0x1b8>)
 8007c96:	2264      	movs	r2, #100	; 0x64
 8007c98:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007c9a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c9e:	2008      	movs	r0, #8
 8007ca0:	f7ff ff55 	bl	8007b4e <send_cmd>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d14d      	bne.n	8007d46 <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
 8007cae:	e00c      	b.n	8007cca <disk_initialize+0xa6>
 8007cb0:	7bfc      	ldrb	r4, [r7, #15]
 8007cb2:	f7ff fe41 	bl	8007938 <rcvr_spi>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f107 0310 	add.w	r3, r7, #16
 8007cbe:	4423      	add	r3, r4
 8007cc0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d9ef      	bls.n	8007cb0 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8007cd0:	7abb      	ldrb	r3, [r7, #10]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d162      	bne.n	8007d9c <disk_initialize+0x178>
 8007cd6:	7afb      	ldrb	r3, [r7, #11]
 8007cd8:	2baa      	cmp	r3, #170	; 0xaa
 8007cda:	d15f      	bne.n	8007d9c <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8007cdc:	bf00      	nop
 8007cde:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <disk_initialize+0x1b8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <disk_initialize+0xd2>
 8007ce6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cea:	20a9      	movs	r0, #169	; 0xa9
 8007cec:	f7ff ff2f 	bl	8007b4e <send_cmd>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f3      	bne.n	8007cde <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <disk_initialize+0x1b8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04e      	beq.n	8007d9c <disk_initialize+0x178>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	203a      	movs	r0, #58	; 0x3a
 8007d02:	f7ff ff24 	bl	8007b4e <send_cmd>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d147      	bne.n	8007d9c <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
 8007d10:	e00c      	b.n	8007d2c <disk_initialize+0x108>
 8007d12:	7bfc      	ldrb	r4, [r7, #15]
 8007d14:	f7ff fe10 	bl	8007938 <rcvr_spi>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f107 0310 	add.w	r3, r7, #16
 8007d20:	4423      	add	r3, r4
 8007d22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d9ef      	bls.n	8007d12 <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8007d32:	7a3b      	ldrb	r3, [r7, #8]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <disk_initialize+0x11c>
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	e000      	b.n	8007d42 <disk_initialize+0x11e>
 8007d40:	2304      	movs	r3, #4
 8007d42:	737b      	strb	r3, [r7, #13]
 8007d44:	e02a      	b.n	8007d9c <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8007d46:	2100      	movs	r1, #0
 8007d48:	20a9      	movs	r0, #169	; 0xa9
 8007d4a:	f7ff ff00 	bl	8007b4e <send_cmd>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d804      	bhi.n	8007d5e <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8007d54:	2302      	movs	r3, #2
 8007d56:	737b      	strb	r3, [r7, #13]
 8007d58:	23a9      	movs	r3, #169	; 0xa9
 8007d5a:	73bb      	strb	r3, [r7, #14]
 8007d5c:	e003      	b.n	8007d66 <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8007d5e:	2301      	movs	r3, #1
 8007d60:	737b      	strb	r3, [r7, #13]
 8007d62:	2301      	movs	r3, #1
 8007d64:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 8007d66:	bf00      	nop
 8007d68:	4b1c      	ldr	r3, [pc, #112]	; (8007ddc <disk_initialize+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <disk_initialize+0x15c>
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff feea 	bl	8007b4e <send_cmd>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f3      	bne.n	8007d68 <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <disk_initialize+0x1b8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <disk_initialize+0x174>
 8007d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d8c:	2010      	movs	r0, #16
 8007d8e:	f7ff fede 	bl	8007b4e <send_cmd>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <disk_initialize+0x178>
				ty = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 8007d9c:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <disk_initialize+0x1bc>)
 8007d9e:	7b7b      	ldrb	r3, [r7, #13]
 8007da0:	7013      	strb	r3, [r2, #0]
	deselect();
 8007da2:	f7ff fded 	bl	8007980 <deselect>

	if (ty) {						/* Initialization succeded */
 8007da6:	7b7b      	ldrb	r3, [r7, #13]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <disk_initialize+0x1b0>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <disk_initialize+0x1b0>)
 8007dba:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 8007dbc:	f7ff fd82 	bl	80078c4 <FCLK_FAST>
 8007dc0:	e001      	b.n	8007dc6 <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 8007dc2:	f7ff fe2d 	bl	8007a20 <power_off>
	}

	return Stat;
 8007dc6:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <disk_initialize+0x1b0>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}
 8007dd4:	2000000c 	.word	0x2000000c
 8007dd8:	40020400 	.word	0x40020400
 8007ddc:	20000fdc 	.word	0x20000fdc
 8007de0:	20000fe4 	.word	0x20000fe4

08007de4 <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <disk_status+0x14>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e002      	b.n	8007dfe <disk_status+0x1a>
	return Stat;
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <disk_status+0x28>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	4613      	mov	r3, r2
 8007e22:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <disk_read+0x20>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <disk_read+0x24>
 8007e30:	2304      	movs	r3, #4
 8007e32:	e04d      	b.n	8007ed0 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e34:	4b28      	ldr	r3, [pc, #160]	; (8007ed8 <disk_read+0xc8>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <disk_read+0x36>
 8007e42:	2303      	movs	r3, #3
 8007e44:	e044      	b.n	8007ed0 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8007e46:	4b25      	ldr	r3, [pc, #148]	; (8007edc <disk_read+0xcc>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <disk_read+0x48>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	025b      	lsls	r3, r3, #9
 8007e56:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d111      	bne.n	8007e82 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	2011      	movs	r0, #17
 8007e62:	f7ff fe74 	bl	8007b4e <send_cmd>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d129      	bne.n	8007ec0 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8007e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f7ff fde1 	bl	8007a38 <rcvr_datablock>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d021      	beq.n	8007ec0 <disk_read+0xb0>
			count = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]
 8007e80:	e01e      	b.n	8007ec0 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	2012      	movs	r0, #18
 8007e86:	f7ff fe62 	bl	8007b4e <send_cmd>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d117      	bne.n	8007ec0 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e94:	68b8      	ldr	r0, [r7, #8]
 8007e96:	f7ff fdcf 	bl	8007a38 <rcvr_datablock>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <disk_read+0xa6>
				buff += 512;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ea6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	73bb      	strb	r3, [r7, #14]
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1ed      	bne.n	8007e90 <disk_read+0x80>
 8007eb4:	e000      	b.n	8007eb8 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8007eb6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007eb8:	2100      	movs	r1, #0
 8007eba:	200c      	movs	r0, #12
 8007ebc:	f7ff fe47 	bl	8007b4e <send_cmd>
		}
	}
	deselect();
 8007ec0:	f7ff fd5e 	bl	8007980 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	2000000c 	.word	0x2000000c
 8007edc:	20000fe4 	.word	0x20000fe4

08007ee0 <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	461a      	mov	r2, r3
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <disk_write+0x20>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <disk_write+0x24>
 8007f00:	2304      	movs	r3, #4
 8007f02:	e064      	b.n	8007fce <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007f04:	4b34      	ldr	r3, [pc, #208]	; (8007fd8 <disk_write+0xf8>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <disk_write+0x36>
 8007f12:	2303      	movs	r3, #3
 8007f14:	e05b      	b.n	8007fce <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8007f16:	4b30      	ldr	r3, [pc, #192]	; (8007fd8 <disk_write+0xf8>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <disk_write+0x48>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e052      	b.n	8007fce <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8007f28:	4b2c      	ldr	r3, [pc, #176]	; (8007fdc <disk_write+0xfc>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <disk_write+0x5a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d110      	bne.n	8007f62 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	2018      	movs	r0, #24
 8007f44:	f7ff fe03 	bl	8007b4e <send_cmd>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d137      	bne.n	8007fbe <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 8007f4e:	21fe      	movs	r1, #254	; 0xfe
 8007f50:	68b8      	ldr	r0, [r7, #8]
 8007f52:	f7ff fdbb 	bl	8007acc <xmit_datablock>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d030      	beq.n	8007fbe <disk_write+0xde>
			count = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]
 8007f60:	e02d      	b.n	8007fbe <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8007f62:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <disk_write+0xfc>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 0306 	and.w	r3, r3, #6
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <disk_write+0x98>
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	4619      	mov	r1, r3
 8007f72:	2097      	movs	r0, #151	; 0x97
 8007f74:	f7ff fdeb 	bl	8007b4e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	2019      	movs	r0, #25
 8007f7c:	f7ff fde7 	bl	8007b4e <send_cmd>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d11b      	bne.n	8007fbe <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007f86:	21fc      	movs	r1, #252	; 0xfc
 8007f88:	68b8      	ldr	r0, [r7, #8]
 8007f8a:	f7ff fd9f 	bl	8007acc <xmit_datablock>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <disk_write+0xca>
				buff += 512;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007f9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	73bb      	strb	r3, [r7, #14]
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1ee      	bne.n	8007f86 <disk_write+0xa6>
 8007fa8:	e000      	b.n	8007fac <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007faa:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8007fac:	21fd      	movs	r1, #253	; 0xfd
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f7ff fd8c 	bl	8007acc <xmit_datablock>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <disk_write+0xde>
				count = 1;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 8007fbe:	f7ff fcdf 	bl	8007980 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf14      	ite	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	2300      	moveq	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	2000000c 	.word	0x2000000c
 8007fdc:	20000fe4 	.word	0x20000fe4

08007fe0 <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	603a      	str	r2, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
 8007fec:	460b      	mov	r3, r1
 8007fee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <disk_ioctl+0x1e>
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	e1f6      	b.n	80083ec <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007ffe:	4b97      	ldr	r3, [pc, #604]	; (800825c <disk_ioctl+0x27c>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <disk_ioctl+0x30>
 800800c:	2303      	movs	r3, #3
 800800e:	e1ed      	b.n	80083ec <disk_ioctl+0x40c>

	res = RES_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 8008014:	79bb      	ldrb	r3, [r7, #6]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	f200 81cd 	bhi.w	80083b6 <disk_ioctl+0x3d6>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <disk_ioctl+0x44>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008095 	.word	0x08008095
 8008028:	080080ab 	.word	0x080080ab
 800802c:	08008161 	.word	0x08008161
 8008030:	0800816f 	.word	0x0800816f
 8008034:	08008269 	.word	0x08008269
 8008038:	08008061 	.word	0x08008061
 800803c:	080083b7 	.word	0x080083b7
 8008040:	080083b7 	.word	0x080083b7
 8008044:	080083b7 	.word	0x080083b7
 8008048:	080083b7 	.word	0x080083b7
 800804c:	0800830b 	.word	0x0800830b
 8008050:	08008319 	.word	0x08008319
 8008054:	0800833b 	.word	0x0800833b
 8008058:	0800835d 	.word	0x0800835d
 800805c:	08008391 	.word	0x08008391

	case CTRL_POWER :
		switch (ptr[0]) {
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <disk_ioctl+0x8e>
 8008068:	2b01      	cmp	r3, #1
 800806a:	d005      	beq.n	8008078 <disk_ioctl+0x98>
 800806c:	e00e      	b.n	800808c <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 800806e:	f7ff fcd7 	bl	8007a20 <power_off>
			res = RES_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	77fb      	strb	r3, [r7, #31]
			break;
 8008076:	e00c      	b.n	8008092 <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 8008078:	f7ff fca6 	bl	80079c8 <power_status>
 800807c:	4602      	mov	r2, r0
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3301      	adds	r3, #1
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	77fb      	strb	r3, [r7, #31]
			break;
 800808a:	e002      	b.n	8008092 <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 800808c:	2304      	movs	r3, #4
 800808e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8008090:	e1a9      	b.n	80083e6 <disk_ioctl+0x406>
 8008092:	e1a8      	b.n	80083e6 <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 8008094:	f7ff fc82 	bl	800799c <selecting>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 818e 	beq.w	80083bc <disk_ioctl+0x3dc>
			deselect();
 80080a0:	f7ff fc6e 	bl	8007980 <deselect>
			res = RES_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80080a8:	e188      	b.n	80083bc <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80080aa:	2100      	movs	r1, #0
 80080ac:	2009      	movs	r0, #9
 80080ae:	f7ff fd4e 	bl	8007b4e <send_cmd>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 8183 	bne.w	80083c0 <disk_ioctl+0x3e0>
 80080ba:	2110      	movs	r1, #16
 80080bc:	4868      	ldr	r0, [pc, #416]	; (8008260 <disk_ioctl+0x280>)
 80080be:	f7ff fcbb 	bl	8007a38 <rcvr_datablock>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 817b 	beq.w	80083c0 <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80080ca:	4b65      	ldr	r3, [pc, #404]	; (8008260 <disk_ioctl+0x280>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	099b      	lsrs	r3, r3, #6
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d114      	bne.n	8008100 <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 80080d6:	4b62      	ldr	r3, [pc, #392]	; (8008260 <disk_ioctl+0x280>)
 80080d8:	7a5b      	ldrb	r3, [r3, #9]
 80080da:	461a      	mov	r2, r3
 80080dc:	4b60      	ldr	r3, [pc, #384]	; (8008260 <disk_ioctl+0x280>)
 80080de:	7a1b      	ldrb	r3, [r3, #8]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	4413      	add	r3, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b5e      	ldr	r3, [pc, #376]	; (8008260 <disk_ioctl+0x280>)
 80080e8:	79db      	ldrb	r3, [r3, #7]
 80080ea:	041b      	lsls	r3, r3, #16
 80080ec:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80080f0:	4413      	add	r3, r2
 80080f2:	3301      	adds	r3, #1
 80080f4:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	029a      	lsls	r2, r3, #10
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e02c      	b.n	800815a <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008100:	4b57      	ldr	r3, [pc, #348]	; (8008260 <disk_ioctl+0x280>)
 8008102:	795b      	ldrb	r3, [r3, #5]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4b55      	ldr	r3, [pc, #340]	; (8008260 <disk_ioctl+0x280>)
 800810c:	7a9b      	ldrb	r3, [r3, #10]
 800810e:	09db      	lsrs	r3, r3, #7
 8008110:	b2db      	uxtb	r3, r3
 8008112:	4413      	add	r3, r2
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4b52      	ldr	r3, [pc, #328]	; (8008260 <disk_ioctl+0x280>)
 8008118:	7a5b      	ldrb	r3, [r3, #9]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0306 	and.w	r3, r3, #6
 8008122:	b2db      	uxtb	r3, r3
 8008124:	4413      	add	r3, r2
 8008126:	b2db      	uxtb	r3, r3
 8008128:	3302      	adds	r3, #2
 800812a:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 800812c:	4b4c      	ldr	r3, [pc, #304]	; (8008260 <disk_ioctl+0x280>)
 800812e:	7a1b      	ldrb	r3, [r3, #8]
 8008130:	099b      	lsrs	r3, r3, #6
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	4b4a      	ldr	r3, [pc, #296]	; (8008260 <disk_ioctl+0x280>)
 8008138:	79db      	ldrb	r3, [r3, #7]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	4b48      	ldr	r3, [pc, #288]	; (8008260 <disk_ioctl+0x280>)
 8008140:	799b      	ldrb	r3, [r3, #6]
 8008142:	029b      	lsls	r3, r3, #10
 8008144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008148:	4413      	add	r3, r2
 800814a:	3301      	adds	r3, #1
 800814c:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 800814e:	7fbb      	ldrb	r3, [r7, #30]
 8008150:	3b09      	subs	r3, #9
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	409a      	lsls	r2, r3
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800815e:	e12f      	b.n	80083c0 <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008166:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	77fb      	strb	r3, [r7, #31]
		break;
 800816c:	e13b      	b.n	80083e6 <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800816e:	4b3d      	ldr	r3, [pc, #244]	; (8008264 <disk_ioctl+0x284>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d029      	beq.n	80081ce <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800817a:	2100      	movs	r1, #0
 800817c:	208d      	movs	r0, #141	; 0x8d
 800817e:	f7ff fce6 	bl	8007b4e <send_cmd>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 811d 	bne.w	80083c4 <disk_ioctl+0x3e4>
				rcvr_spi();
 800818a:	f7ff fbd5 	bl	8007938 <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800818e:	2110      	movs	r1, #16
 8008190:	4833      	ldr	r0, [pc, #204]	; (8008260 <disk_ioctl+0x280>)
 8008192:	f7ff fc51 	bl	8007a38 <rcvr_datablock>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8113 	beq.w	80083c4 <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 800819e:	2330      	movs	r3, #48	; 0x30
 80081a0:	77bb      	strb	r3, [r7, #30]
 80081a2:	e004      	b.n	80081ae <disk_ioctl+0x1ce>
 80081a4:	f7ff fbc8 	bl	8007938 <rcvr_spi>
 80081a8:	7fbb      	ldrb	r3, [r7, #30]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	77bb      	strb	r3, [r7, #30]
 80081ae:	7fbb      	ldrb	r3, [r7, #30]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f7      	bne.n	80081a4 <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 80081b4:	4b2a      	ldr	r3, [pc, #168]	; (8008260 <disk_ioctl+0x280>)
 80081b6:	7a9b      	ldrb	r3, [r3, #10]
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	2310      	movs	r3, #16
 80081c0:	fa03 f202 	lsl.w	r2, r3, r2
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80081cc:	e0fa      	b.n	80083c4 <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80081ce:	2100      	movs	r1, #0
 80081d0:	2009      	movs	r0, #9
 80081d2:	f7ff fcbc 	bl	8007b4e <send_cmd>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 80f3 	bne.w	80083c4 <disk_ioctl+0x3e4>
 80081de:	2110      	movs	r1, #16
 80081e0:	481f      	ldr	r0, [pc, #124]	; (8008260 <disk_ioctl+0x280>)
 80081e2:	f7ff fc29 	bl	8007a38 <rcvr_datablock>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80eb 	beq.w	80083c4 <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <disk_ioctl+0x284>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80081fa:	4b19      	ldr	r3, [pc, #100]	; (8008260 <disk_ioctl+0x280>)
 80081fc:	7a9b      	ldrb	r3, [r3, #10]
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008204:	4a16      	ldr	r2, [pc, #88]	; (8008260 <disk_ioctl+0x280>)
 8008206:	7ad2      	ldrb	r2, [r2, #11]
 8008208:	09d2      	lsrs	r2, r2, #7
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	4413      	add	r3, r2
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	4b13      	ldr	r3, [pc, #76]	; (8008260 <disk_ioctl+0x280>)
 8008212:	7b5b      	ldrb	r3, [r3, #13]
 8008214:	099b      	lsrs	r3, r3, #6
 8008216:	b2db      	uxtb	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	fa02 f303 	lsl.w	r3, r2, r3
 800821e:	461a      	mov	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e016      	b.n	8008254 <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008226:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <disk_ioctl+0x280>)
 8008228:	7a9b      	ldrb	r3, [r3, #10]
 800822a:	109b      	asrs	r3, r3, #2
 800822c:	b29b      	uxth	r3, r3
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	3301      	adds	r3, #1
 8008234:	4a0a      	ldr	r2, [pc, #40]	; (8008260 <disk_ioctl+0x280>)
 8008236:	7ad2      	ldrb	r2, [r2, #11]
 8008238:	00d2      	lsls	r2, r2, #3
 800823a:	f002 0218 	and.w	r2, r2, #24
 800823e:	4908      	ldr	r1, [pc, #32]	; (8008260 <disk_ioctl+0x280>)
 8008240:	7ac9      	ldrb	r1, [r1, #11]
 8008242:	0949      	lsrs	r1, r1, #5
 8008244:	b2c9      	uxtb	r1, r1
 8008246:	440a      	add	r2, r1
 8008248:	3201      	adds	r2, #1
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	461a      	mov	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	77fb      	strb	r3, [r7, #31]
		break;
 8008258:	e0b4      	b.n	80083c4 <disk_ioctl+0x3e4>
 800825a:	bf00      	nop
 800825c:	2000000c 	.word	0x2000000c
 8008260:	20001ff8 	.word	0x20001ff8
 8008264:	20000fe4 	.word	0x20000fe4

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008268:	4b62      	ldr	r3, [pc, #392]	; (80083f4 <disk_ioctl+0x414>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 0306 	and.w	r3, r3, #6
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80a9 	beq.w	80083c8 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	4a5f      	ldr	r2, [pc, #380]	; (80083f8 <disk_ioctl+0x418>)
 800827a:	210b      	movs	r1, #11
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff feaf 	bl	8007fe0 <disk_ioctl>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f040 80a1 	bne.w	80083cc <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800828a:	4b5b      	ldr	r3, [pc, #364]	; (80083f8 <disk_ioctl+0x418>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	099b      	lsrs	r3, r3, #6
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <disk_ioctl+0x2c4>
 8008296:	4b58      	ldr	r3, [pc, #352]	; (80083f8 <disk_ioctl+0x418>)
 8008298:	7a9b      	ldrb	r3, [r3, #10]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8096 	beq.w	80083d0 <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 80082b4:	4b4f      	ldr	r3, [pc, #316]	; (80083f4 <disk_ioctl+0x414>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d105      	bne.n	80082cc <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	025b      	lsls	r3, r3, #9
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	025b      	lsls	r3, r3, #9
 80082ca:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 80082cc:	6979      	ldr	r1, [r7, #20]
 80082ce:	2020      	movs	r0, #32
 80082d0:	f7ff fc3d 	bl	8007b4e <send_cmd>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d17c      	bne.n	80083d4 <disk_ioctl+0x3f4>
 80082da:	6939      	ldr	r1, [r7, #16]
 80082dc:	2021      	movs	r0, #33	; 0x21
 80082de:	f7ff fc36 	bl	8007b4e <send_cmd>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d175      	bne.n	80083d4 <disk_ioctl+0x3f4>
 80082e8:	2100      	movs	r1, #0
 80082ea:	2026      	movs	r0, #38	; 0x26
 80082ec:	f7ff fc2f 	bl	8007b4e <send_cmd>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d16e      	bne.n	80083d4 <disk_ioctl+0x3f4>
 80082f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082fa:	f7ff fb25 	bl	8007948 <wait_ready>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d067      	beq.n	80083d4 <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008304:	2300      	movs	r3, #0
 8008306:	77fb      	strb	r3, [r7, #31]
		break;
 8008308:	e064      	b.n	80083d4 <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 800830a:	4b3a      	ldr	r3, [pc, #232]	; (80083f4 <disk_ioctl+0x414>)
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	77fb      	strb	r3, [r7, #31]
		break;
 8008316:	e066      	b.n	80083e6 <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8008318:	2100      	movs	r1, #0
 800831a:	2009      	movs	r0, #9
 800831c:	f7ff fc17 	bl	8007b4e <send_cmd>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d158      	bne.n	80083d8 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8008326:	2110      	movs	r1, #16
 8008328:	69b8      	ldr	r0, [r7, #24]
 800832a:	f7ff fb85 	bl	8007a38 <rcvr_datablock>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d051      	beq.n	80083d8 <disk_ioctl+0x3f8>
			res = RES_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	77fb      	strb	r3, [r7, #31]
		break;
 8008338:	e04e      	b.n	80083d8 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 800833a:	2100      	movs	r1, #0
 800833c:	200a      	movs	r0, #10
 800833e:	f7ff fc06 	bl	8007b4e <send_cmd>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d149      	bne.n	80083dc <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8008348:	2110      	movs	r1, #16
 800834a:	69b8      	ldr	r0, [r7, #24]
 800834c:	f7ff fb74 	bl	8007a38 <rcvr_datablock>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d042      	beq.n	80083dc <disk_ioctl+0x3fc>
			res = RES_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	77fb      	strb	r3, [r7, #31]
		break;
 800835a:	e03f      	b.n	80083dc <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 800835c:	2100      	movs	r1, #0
 800835e:	203a      	movs	r0, #58	; 0x3a
 8008360:	f7ff fbf5 	bl	8007b4e <send_cmd>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d13a      	bne.n	80083e0 <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 800836a:	2304      	movs	r3, #4
 800836c:	77bb      	strb	r3, [r7, #30]
 800836e:	e009      	b.n	8008384 <disk_ioctl+0x3a4>
 8008370:	69bc      	ldr	r4, [r7, #24]
 8008372:	1c63      	adds	r3, r4, #1
 8008374:	61bb      	str	r3, [r7, #24]
 8008376:	f7ff fadf 	bl	8007938 <rcvr_spi>
 800837a:	4603      	mov	r3, r0
 800837c:	7023      	strb	r3, [r4, #0]
 800837e:	7fbb      	ldrb	r3, [r7, #30]
 8008380:	3b01      	subs	r3, #1
 8008382:	77bb      	strb	r3, [r7, #30]
 8008384:	7fbb      	ldrb	r3, [r7, #30]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f2      	bne.n	8008370 <disk_ioctl+0x390>
			res = RES_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800838e:	e027      	b.n	80083e0 <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8008390:	2100      	movs	r1, #0
 8008392:	208d      	movs	r0, #141	; 0x8d
 8008394:	f7ff fbdb 	bl	8007b4e <send_cmd>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d122      	bne.n	80083e4 <disk_ioctl+0x404>
			rcvr_spi();
 800839e:	f7ff facb 	bl	8007938 <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 80083a2:	2140      	movs	r1, #64	; 0x40
 80083a4:	69b8      	ldr	r0, [r7, #24]
 80083a6:	f7ff fb47 	bl	8007a38 <rcvr_datablock>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d019      	beq.n	80083e4 <disk_ioctl+0x404>
				res = RES_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80083b4:	e016      	b.n	80083e4 <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 80083b6:	2304      	movs	r3, #4
 80083b8:	77fb      	strb	r3, [r7, #31]
 80083ba:	e014      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083bc:	bf00      	nop
 80083be:	e012      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083c0:	bf00      	nop
 80083c2:	e010      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083c4:	bf00      	nop
 80083c6:	e00e      	b.n	80083e6 <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80083c8:	bf00      	nop
 80083ca:	e00c      	b.n	80083e6 <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80083cc:	bf00      	nop
 80083ce:	e00a      	b.n	80083e6 <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80083d0:	bf00      	nop
 80083d2:	e008      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083d4:	bf00      	nop
 80083d6:	e006      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083d8:	bf00      	nop
 80083da:	e004      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083dc:	bf00      	nop
 80083de:	e002      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083e0:	bf00      	nop
 80083e2:	e000      	b.n	80083e6 <disk_ioctl+0x406>
		break;
 80083e4:	bf00      	nop
	}

	deselect();
 80083e6:	f7ff facb 	bl	8007980 <deselect>

	return res;
 80083ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3724      	adds	r7, #36	; 0x24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd90      	pop	{r4, r7, pc}
 80083f4:	20000fe4 	.word	0x20000fe4
 80083f8:	20001ff8 	.word	0x20001ff8

080083fc <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	3e216000 	.word	0x3e216000

08008410 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d02f      	beq.n	8008482 <clear_string+0x72>
	uint8_t i = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e022      	b.n	8008472 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d80b      	bhi.n	800844a <clear_string+0x3a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b0a      	cmp	r3, #10
 8008438:	d003      	beq.n	8008442 <clear_string+0x32>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b0d      	cmp	r3, #13
 8008440:	d103      	bne.n	800844a <clear_string+0x3a>
		{
			i++;
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	3301      	adds	r3, #1
 8008446:	72fb      	strb	r3, [r7, #11]
			continue;
 8008448:	e010      	b.n	800846c <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b0a      	cmp	r3, #10
 8008450:	d003      	beq.n	800845a <clear_string+0x4a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b0d      	cmp	r3, #13
 8008458:	d102      	bne.n	8008460 <clear_string+0x50>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	60fa      	str	r2, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	7812      	ldrb	r2, [r2, #0]
 800846a:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3301      	adds	r3, #1
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1d8      	bne.n	800842c <clear_string+0x1c>
	}

	*dst = 0;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e000      	b.n	8008484 <clear_string+0x74>
	if(!src) return;
 8008482:	bf00      	nop
}
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	e021      	b.n	80084e0 <ReWriteOCD+0x50>
		(Status_OCD[i]) ? (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], SET)) : (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], RESET));
 800849c:	4a14      	ldr	r2, [pc, #80]	; (80084f0 <ReWriteOCD+0x60>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <ReWriteOCD+0x32>
 80084a8:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <ReWriteOCD+0x64>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80084b0:	4a11      	ldr	r2, [pc, #68]	; (80084f8 <ReWriteOCD+0x68>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b8:	2201      	movs	r2, #1
 80084ba:	4619      	mov	r1, r3
 80084bc:	f003 ff40 	bl	800c340 <HAL_GPIO_WritePin>
 80084c0:	e00b      	b.n	80084da <ReWriteOCD+0x4a>
 80084c2:	4a0c      	ldr	r2, [pc, #48]	; (80084f4 <ReWriteOCD+0x64>)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80084ca:	4a0b      	ldr	r2, [pc, #44]	; (80084f8 <ReWriteOCD+0x68>)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d2:	2200      	movs	r2, #0
 80084d4:	4619      	mov	r1, r3
 80084d6:	f003 ff33 	bl	800c340 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3301      	adds	r3, #1
 80084de:	607b      	str	r3, [r7, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b07      	cmp	r3, #7
 80084e4:	ddda      	ble.n	800849c <ReWriteOCD+0xc>
}
 80084e6:	bf00      	nop
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000ff8 	.word	0x20000ff8
 80084f4:	20000030 	.word	0x20000030
 80084f8:	20000060 	.word	0x20000060

080084fc <CheckReWriteDiDo>:
uint16_t OW_Pin[2] = {WR0_Pin, WR1_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e0aa      	b.n	800865e <CheckReWriteDiDo+0x162>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 8008508:	4959      	ldr	r1, [pc, #356]	; (8008670 <CheckReWriteDiDo+0x174>)
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4955      	ldr	r1, [pc, #340]	; (8008670 <CheckReWriteDiDo+0x174>)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	3306      	adds	r3, #6
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	4619      	mov	r1, r3
 800852c:	f003 fef0 	bl	800c310 <HAL_GPIO_ReadPin>
 8008530:	4603      	mov	r3, r0
 8008532:	4618      	mov	r0, r3
 8008534:	494e      	ldr	r1, [pc, #312]	; (8008670 <CheckReWriteDiDo+0x174>)
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	3304      	adds	r3, #4
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	4298      	cmp	r0, r3
 8008548:	d02d      	beq.n	80085a6 <CheckReWriteDiDo+0xaa>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 800854a:	4949      	ldr	r1, [pc, #292]	; (8008670 <CheckReWriteDiDo+0x174>)
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	330c      	adds	r3, #12
 800855a:	7819      	ldrb	r1, [r3, #0]
 800855c:	4a45      	ldr	r2, [pc, #276]	; (8008674 <CheckReWriteDiDo+0x178>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	460a      	mov	r2, r1
 8008564:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 8008566:	4942      	ldr	r1, [pc, #264]	; (8008670 <CheckReWriteDiDo+0x174>)
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3308      	adds	r3, #8
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	493d      	ldr	r1, [pc, #244]	; (8008670 <CheckReWriteDiDo+0x174>)
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	330e      	adds	r3, #14
 8008588:	881c      	ldrh	r4, [r3, #0]
 800858a:	4939      	ldr	r1, [pc, #228]	; (8008670 <CheckReWriteDiDo+0x174>)
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	330c      	adds	r3, #12
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	4621      	mov	r1, r4
 80085a0:	f003 fece 	bl	800c340 <HAL_GPIO_WritePin>
 80085a4:	e058      	b.n	8008658 <CheckReWriteDiDo+0x15c>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 80085a6:	4932      	ldr	r1, [pc, #200]	; (8008670 <CheckReWriteDiDo+0x174>)
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	492e      	ldr	r1, [pc, #184]	; (8008670 <CheckReWriteDiDo+0x174>)
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	3306      	adds	r3, #6
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f003 fea1 	bl	800c310 <HAL_GPIO_ReadPin>
 80085ce:	4603      	mov	r3, r0
 80085d0:	4618      	mov	r0, r3
 80085d2:	4927      	ldr	r1, [pc, #156]	; (8008670 <CheckReWriteDiDo+0x174>)
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3304      	adds	r3, #4
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4298      	cmp	r0, r3
 80085e6:	d137      	bne.n	8008658 <CheckReWriteDiDo+0x15c>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 80085e8:	4921      	ldr	r1, [pc, #132]	; (8008670 <CheckReWriteDiDo+0x174>)
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	330c      	adds	r3, #12
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf0c      	ite	eq
 80085fe:	2301      	moveq	r3, #1
 8008600:	2300      	movne	r3, #0
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4619      	mov	r1, r3
 8008606:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <CheckReWriteDiDo+0x178>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	460a      	mov	r2, r1
 800860e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 8008610:	4917      	ldr	r1, [pc, #92]	; (8008670 <CheckReWriteDiDo+0x174>)
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	3308      	adds	r3, #8
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	4913      	ldr	r1, [pc, #76]	; (8008670 <CheckReWriteDiDo+0x174>)
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	330e      	adds	r3, #14
 8008632:	881c      	ldrh	r4, [r3, #0]
 8008634:	490e      	ldr	r1, [pc, #56]	; (8008670 <CheckReWriteDiDo+0x174>)
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	330c      	adds	r3, #12
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	4621      	mov	r1, r4
 8008654:	f003 fe74 	bl	800c340 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3301      	adds	r3, #1
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b07      	cmp	r3, #7
 8008662:	f77f af51 	ble.w	8008508 <CheckReWriteDiDo+0xc>
		}
	}
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}
 800866e:	bf00      	nop
 8008670:	200012c8 	.word	0x200012c8
 8008674:	20000ff8 	.word	0x20000ff8

08008678 <CheckReWriteAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteAiDo(void)
{
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	e09b      	b.n	80087bc <CheckReWriteAiDo+0x144>
	{
		for(int j = 0; j < 8; j++)
 8008684:	2300      	movs	r3, #0
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	e091      	b.n	80087ae <CheckReWriteAiDo+0x136>
		{
			if(AiDo[i].OCD_Pin == OCD_Pin[j])
 800868a:	4950      	ldr	r1, [pc, #320]	; (80087cc <CheckReWriteAiDo+0x154>)
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	440b      	add	r3, r1
 8008698:	331e      	adds	r3, #30
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	494c      	ldr	r1, [pc, #304]	; (80087d0 <CheckReWriteAiDo+0x158>)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d17f      	bne.n	80087a8 <CheckReWriteAiDo+0x130>
			{
				if((adcValue[i] >= AiDo[i].RANGE_LOW) && (AiDo[i].RANGE_HIGH >= adcValue[i]))
 80086a8:	4a4a      	ldr	r2, [pc, #296]	; (80087d4 <CheckReWriteAiDo+0x15c>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	4413      	add	r3, r2
 80086b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086b4:	4c45      	ldr	r4, [pc, #276]	; (80087cc <CheckReWriteAiDo+0x154>)
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4423      	add	r3, r4
 80086c2:	3308      	adds	r3, #8
 80086c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086c8:	461a      	mov	r2, r3
 80086ca:	4623      	mov	r3, r4
 80086cc:	f7f8 fa2a 	bl	8000b24 <__aeabi_dcmpge>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d044      	beq.n	8008760 <CheckReWriteAiDo+0xe8>
 80086d6:	493d      	ldr	r1, [pc, #244]	; (80087cc <CheckReWriteAiDo+0x154>)
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	440b      	add	r3, r1
 80086e4:	3310      	adds	r3, #16
 80086e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086ea:	4a3a      	ldr	r2, [pc, #232]	; (80087d4 <CheckReWriteAiDo+0x15c>)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	4413      	add	r3, r2
 80086f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086f6:	461a      	mov	r2, r3
 80086f8:	4623      	mov	r3, r4
 80086fa:	f7f8 fa13 	bl	8000b24 <__aeabi_dcmpge>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d02d      	beq.n	8008760 <CheckReWriteAiDo+0xe8>
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8008704:	4931      	ldr	r1, [pc, #196]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	440b      	add	r3, r1
 8008712:	331c      	adds	r3, #28
 8008714:	7819      	ldrb	r1, [r3, #0]
 8008716:	4a30      	ldr	r2, [pc, #192]	; (80087d8 <CheckReWriteAiDo+0x160>)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4413      	add	r3, r2
 800871c:	460a      	mov	r2, r1
 800871e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, AiDo[i].VAR_OUT);
 8008720:	492a      	ldr	r1, [pc, #168]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	440b      	add	r3, r1
 800872e:	3318      	adds	r3, #24
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	4926      	ldr	r1, [pc, #152]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	440b      	add	r3, r1
 8008740:	331e      	adds	r3, #30
 8008742:	881c      	ldrh	r4, [r3, #0]
 8008744:	4921      	ldr	r1, [pc, #132]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	440b      	add	r3, r1
 8008752:	331c      	adds	r3, #28
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	4621      	mov	r1, r4
 800875a:	f003 fdf1 	bl	800c340 <HAL_GPIO_WritePin>
 800875e:	e023      	b.n	80087a8 <CheckReWriteAiDo+0x130>
				}
				else
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8008760:	491a      	ldr	r1, [pc, #104]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	440b      	add	r3, r1
 800876e:	331c      	adds	r3, #28
 8008770:	7819      	ldrb	r1, [r3, #0]
 8008772:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <CheckReWriteAiDo+0x160>)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	4413      	add	r3, r2
 8008778:	460a      	mov	r2, r1
 800877a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);	//!AiDo[i].VAR_OUT - вариант инверсии выхода по отношении ко входу
 800877c:	4913      	ldr	r1, [pc, #76]	; (80087cc <CheckReWriteAiDo+0x154>)
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	440b      	add	r3, r1
 800878a:	3318      	adds	r3, #24
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	490f      	ldr	r1, [pc, #60]	; (80087cc <CheckReWriteAiDo+0x154>)
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	440b      	add	r3, r1
 800879c:	331e      	adds	r3, #30
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	2200      	movs	r2, #0
 80087a2:	4619      	mov	r1, r3
 80087a4:	f003 fdcc 	bl	800c340 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	3301      	adds	r3, #1
 80087ac:	603b      	str	r3, [r7, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b07      	cmp	r3, #7
 80087b2:	f77f af6a 	ble.w	800868a <CheckReWriteAiDo+0x12>
	for(int i = 0; i < 4; i++)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3301      	adds	r3, #1
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	f77f af60 	ble.w	8008684 <CheckReWriteAiDo+0xc>
				}
			}
		}
	}
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd90      	pop	{r4, r7, pc}
 80087cc:	20001218 	.word	0x20001218
 80087d0:	20000060 	.word	0x20000060
 80087d4:	20000a98 	.word	0x20000a98
 80087d8:	20000ff8 	.word	0x20000ff8

080087dc <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087de:	b085      	sub	sp, #20
 80087e0:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 80087e2:	4b93      	ldr	r3, [pc, #588]	; (8008a30 <CheckReWriteTSiDo+0x254>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d012      	beq.n	8008810 <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 80087ea:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <CheckReWriteTSiDo+0x254>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80087f0:	2301      	movs	r3, #1
 80087f2:	71fb      	strb	r3, [r7, #7]
 80087f4:	e007      	b.n	8008806 <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2001      	movs	r0, #1
 80087fc:	f001 f8cc 	bl	8009998 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	3301      	adds	r3, #1
 8008804:	71fb      	strb	r3, [r7, #7]
 8008806:	4b8b      	ldr	r3, [pc, #556]	; (8008a34 <CheckReWriteTSiDo+0x258>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	79fa      	ldrb	r2, [r7, #7]
 800880c:	429a      	cmp	r2, r3
 800880e:	d9f2      	bls.n	80087f6 <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 8008810:	4b89      	ldr	r3, [pc, #548]	; (8008a38 <CheckReWriteTSiDo+0x25c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8106 	beq.w	8008a26 <CheckReWriteTSiDo+0x24a>
	{
		OneWire_Test_Flag_Read = false;
 800881a:	4b87      	ldr	r3, [pc, #540]	; (8008a38 <CheckReWriteTSiDo+0x25c>)
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8008820:	2301      	movs	r3, #1
 8008822:	71bb      	strb	r3, [r7, #6]
 8008824:	e0f9      	b.n	8008a1a <CheckReWriteTSiDo+0x23e>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 8008826:	2300      	movs	r3, #0
 8008828:	717b      	strb	r3, [r7, #5]
 800882a:	e0ef      	b.n	8008a0c <CheckReWriteTSiDo+0x230>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 800882c:	79bb      	ldrb	r3, [r7, #6]
 800882e:	1e5a      	subs	r2, r3, #1
 8008830:	4982      	ldr	r1, [pc, #520]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 8008832:	4613      	mov	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	440b      	add	r3, r1
 800883c:	332e      	adds	r3, #46	; 0x2e
 800883e:	881a      	ldrh	r2, [r3, #0]
 8008840:	797b      	ldrb	r3, [r7, #5]
 8008842:	497f      	ldr	r1, [pc, #508]	; (8008a40 <CheckReWriteTSiDo+0x264>)
 8008844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008848:	429a      	cmp	r2, r3
 800884a:	f040 80dc 	bne.w	8008a06 <CheckReWriteTSiDo+0x22a>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 800884e:	79bb      	ldrb	r3, [r7, #6]
 8008850:	461a      	mov	r2, r3
 8008852:	497c      	ldr	r1, [pc, #496]	; (8008a44 <CheckReWriteTSiDo+0x268>)
 8008854:	2001      	movs	r0, #1
 8008856:	f001 f8d3 	bl	8009a00 <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 800885a:	4b7a      	ldr	r3, [pc, #488]	; (8008a44 <CheckReWriteTSiDo+0x268>)
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	b21a      	sxth	r2, r3
 8008862:	4b78      	ldr	r3, [pc, #480]	; (8008a44 <CheckReWriteTSiDo+0x268>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b21b      	sxth	r3, r3
 8008868:	4313      	orrs	r3, r2
 800886a:	b21b      	sxth	r3, r3
 800886c:	b29a      	uxth	r2, r3
 800886e:	4b76      	ldr	r3, [pc, #472]	; (8008a48 <CheckReWriteTSiDo+0x26c>)
 8008870:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 8008872:	4b75      	ldr	r3, [pc, #468]	; (8008a48 <CheckReWriteTSiDo+0x26c>)
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f001 f904 	bl	8009a84 <sensors_GetSign>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <CheckReWriteTSiDo+0xae>
    					c='-';
 8008882:	4b72      	ldr	r3, [pc, #456]	; (8008a4c <CheckReWriteTSiDo+0x270>)
 8008884:	222d      	movs	r2, #45	; 0x2d
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e002      	b.n	8008890 <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 800888a:	4b70      	ldr	r3, [pc, #448]	; (8008a4c <CheckReWriteTSiDo+0x270>)
 800888c:	222b      	movs	r2, #43	; 0x2b
 800888e:	701a      	strb	r2, [r3, #0]
    				temper = sensors_Convert(raw_temper);
 8008890:	4b6d      	ldr	r3, [pc, #436]	; (8008a48 <CheckReWriteTSiDo+0x26c>)
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f001 f908 	bl	8009aaa <sensors_Convert>
 800889a:	eef0 7a40 	vmov.f32	s15, s0
 800889e:	4b6c      	ldr	r3, [pc, #432]	; (8008a50 <CheckReWriteTSiDo+0x274>)
 80088a0:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(sign_temper, "%c%.2f", c, temper);
 80088a4:	4b69      	ldr	r3, [pc, #420]	; (8008a4c <CheckReWriteTSiDo+0x270>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461d      	mov	r5, r3
 80088aa:	4b69      	ldr	r3, [pc, #420]	; (8008a50 <CheckReWriteTSiDo+0x274>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f7 fe5a 	bl	8000568 <__aeabi_f2d>
 80088b4:	4603      	mov	r3, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	e9cd 3400 	strd	r3, r4, [sp]
 80088bc:	462a      	mov	r2, r5
 80088be:	4965      	ldr	r1, [pc, #404]	; (8008a54 <CheckReWriteTSiDo+0x278>)
 80088c0:	4865      	ldr	r0, [pc, #404]	; (8008a58 <CheckReWriteTSiDo+0x27c>)
 80088c2:	f013 fc57 	bl	801c174 <siprintf>
    				temper = atof(sign_temper);
 80088c6:	4864      	ldr	r0, [pc, #400]	; (8008a58 <CheckReWriteTSiDo+0x27c>)
 80088c8:	f012 fe24 	bl	801b514 <atof>
 80088cc:	ec54 3b10 	vmov	r3, r4, d0
 80088d0:	4618      	mov	r0, r3
 80088d2:	4621      	mov	r1, r4
 80088d4:	f7f8 f998 	bl	8000c08 <__aeabi_d2f>
 80088d8:	4602      	mov	r2, r0
 80088da:	4b5d      	ldr	r3, [pc, #372]	; (8008a50 <CheckReWriteTSiDo+0x274>)
 80088dc:	601a      	str	r2, [r3, #0]
    				//--------------------from debug--------------------------
    				HAL_UART_Transmit(&huart3, (uint8_t*)sign_temper, strlen(sign_temper), 0x1000);
 80088de:	485e      	ldr	r0, [pc, #376]	; (8008a58 <CheckReWriteTSiDo+0x27c>)
 80088e0:	f7f7 fc80 	bl	80001e4 <strlen>
 80088e4:	4603      	mov	r3, r0
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ec:	495a      	ldr	r1, [pc, #360]	; (8008a58 <CheckReWriteTSiDo+0x27c>)
 80088ee:	485b      	ldr	r0, [pc, #364]	; (8008a5c <CheckReWriteTSiDo+0x280>)
 80088f0:	f006 f93b 	bl	800eb6a <HAL_UART_Transmit>
    				//--------------------------------------------------------
					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 80088f4:	4b56      	ldr	r3, [pc, #344]	; (8008a50 <CheckReWriteTSiDo+0x274>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fe35 	bl	8000568 <__aeabi_f2d>
 80088fe:	4605      	mov	r5, r0
 8008900:	460e      	mov	r6, r1
 8008902:	79bb      	ldrb	r3, [r7, #6]
 8008904:	1e5a      	subs	r2, r3, #1
 8008906:	494d      	ldr	r1, [pc, #308]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 8008908:	4613      	mov	r3, r2
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	440b      	add	r3, r1
 8008912:	3318      	adds	r3, #24
 8008914:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008918:	461a      	mov	r2, r3
 800891a:	4623      	mov	r3, r4
 800891c:	4628      	mov	r0, r5
 800891e:	4631      	mov	r1, r6
 8008920:	f7f8 f900 	bl	8000b24 <__aeabi_dcmpge>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d048      	beq.n	80089bc <CheckReWriteTSiDo+0x1e0>
 800892a:	79bb      	ldrb	r3, [r7, #6]
 800892c:	1e5a      	subs	r2, r3, #1
 800892e:	4943      	ldr	r1, [pc, #268]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 8008930:	4613      	mov	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	440b      	add	r3, r1
 800893a:	3320      	adds	r3, #32
 800893c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008940:	4b43      	ldr	r3, [pc, #268]	; (8008a50 <CheckReWriteTSiDo+0x274>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7f7 fe0f 	bl	8000568 <__aeabi_f2d>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f8 f8e7 	bl	8000b24 <__aeabi_dcmpge>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02f      	beq.n	80089bc <CheckReWriteTSiDo+0x1e0>
					{
						Status_OCD[j] = TSiDo[i-1].VAR_OUT;
 800895c:	79bb      	ldrb	r3, [r7, #6]
 800895e:	1e5a      	subs	r2, r3, #1
 8008960:	7979      	ldrb	r1, [r7, #5]
 8008962:	4836      	ldr	r0, [pc, #216]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	4403      	add	r3, r0
 800896e:	332c      	adds	r3, #44	; 0x2c
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <CheckReWriteTSiDo+0x284>)
 8008974:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, TSiDo[i-1].VAR_OUT);
 8008976:	79bb      	ldrb	r3, [r7, #6]
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	4930      	ldr	r1, [pc, #192]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 800897c:	4613      	mov	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	440b      	add	r3, r1
 8008986:	3328      	adds	r3, #40	; 0x28
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	79bb      	ldrb	r3, [r7, #6]
 800898c:	1e5a      	subs	r2, r3, #1
 800898e:	492b      	ldr	r1, [pc, #172]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 8008990:	4613      	mov	r3, r2
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	440b      	add	r3, r1
 800899a:	332e      	adds	r3, #46	; 0x2e
 800899c:	881c      	ldrh	r4, [r3, #0]
 800899e:	79bb      	ldrb	r3, [r7, #6]
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	4926      	ldr	r1, [pc, #152]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 80089a4:	4613      	mov	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	440b      	add	r3, r1
 80089ae:	332c      	adds	r3, #44	; 0x2c
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	4621      	mov	r1, r4
 80089b6:	f003 fcc3 	bl	800c340 <HAL_GPIO_WritePin>
 80089ba:	e024      	b.n	8008a06 <CheckReWriteTSiDo+0x22a>
					}
					else
					{
						Status_OCD[j] =  TSiDo[i-1].VAR_OUT;
 80089bc:	79bb      	ldrb	r3, [r7, #6]
 80089be:	1e5a      	subs	r2, r3, #1
 80089c0:	7979      	ldrb	r1, [r7, #5]
 80089c2:	481e      	ldr	r0, [pc, #120]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 80089c4:	4613      	mov	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	4403      	add	r3, r0
 80089ce:	332c      	adds	r3, #44	; 0x2c
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	4b23      	ldr	r3, [pc, #140]	; (8008a60 <CheckReWriteTSiDo+0x284>)
 80089d4:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 80089d6:	79bb      	ldrb	r3, [r7, #6]
 80089d8:	1e5a      	subs	r2, r3, #1
 80089da:	4918      	ldr	r1, [pc, #96]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 80089dc:	4613      	mov	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	440b      	add	r3, r1
 80089e6:	3328      	adds	r3, #40	; 0x28
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	79bb      	ldrb	r3, [r7, #6]
 80089ec:	1e5a      	subs	r2, r3, #1
 80089ee:	4913      	ldr	r1, [pc, #76]	; (8008a3c <CheckReWriteTSiDo+0x260>)
 80089f0:	4613      	mov	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	440b      	add	r3, r1
 80089fa:	332e      	adds	r3, #46	; 0x2e
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	4619      	mov	r1, r3
 8008a02:	f003 fc9d 	bl	800c340 <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 8008a06:	797b      	ldrb	r3, [r7, #5]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	717b      	strb	r3, [r7, #5]
 8008a0c:	797b      	ldrb	r3, [r7, #5]
 8008a0e:	2b07      	cmp	r3, #7
 8008a10:	f67f af0c 	bls.w	800882c <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8008a14:	79bb      	ldrb	r3, [r7, #6]
 8008a16:	3301      	adds	r3, #1
 8008a18:	71bb      	strb	r3, [r7, #6]
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <CheckReWriteTSiDo+0x258>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	79ba      	ldrb	r2, [r7, #6]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	f67f af00 	bls.w	8008826 <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000abf 	.word	0x20000abf
 8008a34:	20002044 	.word	0x20002044
 8008a38:	20000ac0 	.word	0x20000ac0
 8008a3c:	20001188 	.word	0x20001188
 8008a40:	20000060 	.word	0x20000060
 8008a44:	20002020 	.word	0x20002020
 8008a48:	20002008 	.word	0x20002008
 8008a4c:	2000201c 	.word	0x2000201c
 8008a50:	20002038 	.word	0x20002038
 8008a54:	0802136c 	.word	0x0802136c
 8008a58:	2000200c 	.word	0x2000200c
 8008a5c:	20001c3c 	.word	0x20001c3c
 8008a60:	20000ff8 	.word	0x20000ff8
 8008a64:	00000000 	.word	0x00000000

08008a68 <Conversion_ADC1>:
//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Принимает "item" - номер аналогового входа АЦП
//Возвращает преобразованное значение в зависимости от конфигурации аналогового входа
double Conversion_ADC1(uint16_t ADC_value, uint8_t item)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	460a      	mov	r2, r1
 8008a72:	80fb      	strh	r3, [r7, #6]
 8008a74:	4613      	mov	r3, r2
 8008a76:	717b      	strb	r3, [r7, #5]
	double Value = 0;
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	f04f 0400 	mov.w	r4, #0
 8008a80:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const double Resolution = 0.0008056640625;
 8008a84:	a424      	add	r4, pc, #144	; (adr r4, 8008b18 <Conversion_ADC1+0xb0>)
 8008a86:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a8a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	Value = (ADC_value * Resolution);
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7f7 fd57 	bl	8000544 <__aeabi_i2d>
 8008a96:	4603      	mov	r3, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aa2:	f7f7 fdb9 	bl	8000618 <__aeabi_dmul>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	(AiDo[item].inputFlag == true) ? (Value = (Value * 3.2323232323232)) : (Value = (Value / 60));
 8008aae:	797a      	ldrb	r2, [r7, #5]
 8008ab0:	4917      	ldr	r1, [pc, #92]	; (8008b10 <Conversion_ADC1+0xa8>)
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	440b      	add	r3, r1
 8008abc:	3320      	adds	r3, #32
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <Conversion_ADC1+0x74>
 8008ac4:	a310      	add	r3, pc, #64	; (adr r3, 8008b08 <Conversion_ADC1+0xa0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ace:	f7f7 fda3 	bl	8000618 <__aeabi_dmul>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008ada:	e00a      	b.n	8008af2 <Conversion_ADC1+0x8a>
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <Conversion_ADC1+0xac>)
 8008ae2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ae6:	f7f7 fec1 	bl	800086c <__aeabi_ddiv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	460c      	mov	r4, r1
 8008aee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return Value;
 8008af2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008af6:	ec44 3b17 	vmov	d7, r3, r4
}
 8008afa:	eeb0 0a47 	vmov.f32	s0, s14
 8008afe:	eef0 0a67 	vmov.f32	s1, s15
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd90      	pop	{r4, r7, pc}
 8008b08:	48676ee8 	.word	0x48676ee8
 8008b0c:	4009dbcc 	.word	0x4009dbcc
 8008b10:	20001218 	.word	0x20001218
 8008b14:	404e0000 	.word	0x404e0000
 8008b18:	66666666 	.word	0x66666666
 8008b1c:	3f4a6666 	.word	0x3f4a6666

08008b20 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b0ae      	sub	sp, #184	; 0xb8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	72fb      	strb	r3, [r7, #11]
 8008b30:	4613      	mov	r3, r2
 8008b32:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 8008b34:	4acd      	ldr	r2, [pc, #820]	; (8008e6c <set_dido+0x34c>)
 8008b36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	2250      	movs	r2, #80	; 0x50
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f012 fd57 	bl	801b5f2 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008b44:	4aca      	ldr	r2, [pc, #808]	; (8008e70 <set_dido+0x350>)
 8008b46:	f107 0310 	add.w	r3, r7, #16
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	2250      	movs	r2, #80	; 0x50
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f012 fd4f 	bl	801b5f2 <memcpy>

	for(int i = 0; i < 8; i++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b5a:	e17e      	b.n	8008e5a <set_dido+0x33a>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 8008b5c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008b60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	440b      	add	r3, r1
 8008b6e:	4619      	mov	r1, r3
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7f7 fb2d 	bl	80001d0 <strcmp>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f040 8169 	bne.w	8008e50 <set_dido+0x330>
		{
			if(DiDo[i].clrFlag != false)
 8008b7e:	49bd      	ldr	r1, [pc, #756]	; (8008e74 <set_dido+0x354>)
 8008b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3310      	adds	r3, #16
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d017      	beq.n	8008bc6 <set_dido+0xa6>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8008b96:	49b7      	ldr	r1, [pc, #732]	; (8008e74 <set_dido+0x354>)
 8008b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	49b2      	ldr	r1, [pc, #712]	; (8008e74 <set_dido+0x354>)
 8008bac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	330e      	adds	r3, #14
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f003 fbbd 	bl	800c340 <HAL_GPIO_WritePin>
			DiDo[i].clrFlag = true;
 8008bc6:	49ab      	ldr	r1, [pc, #684]	; (8008e74 <set_dido+0x354>)
 8008bc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3310      	adds	r3, #16
 8008bd8:	2201      	movs	r2, #1
 8008bda:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 8008bdc:	4aa6      	ldr	r2, [pc, #664]	; (8008e78 <set_dido+0x358>)
 8008bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008be6:	48a3      	ldr	r0, [pc, #652]	; (8008e74 <set_dido+0x354>)
 8008be8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4403      	add	r3, r0
 8008bf6:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 8008bf8:	499e      	ldr	r1, [pc, #632]	; (8008e74 <set_dido+0x354>)
 8008bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3304      	adds	r3, #4
 8008c0a:	7afa      	ldrb	r2, [r7, #11]
 8008c0c:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 8008c0e:	4a9b      	ldr	r2, [pc, #620]	; (8008e7c <set_dido+0x35c>)
 8008c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c14:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008c18:	4996      	ldr	r1, [pc, #600]	; (8008e74 <set_dido+0x354>)
 8008c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3306      	adds	r3, #6
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c34:	e104      	b.n	8008e40 <set_dido+0x320>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008c36:	f107 0110 	add.w	r1, r7, #16
 8008c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	440b      	add	r3, r1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f7 fac0 	bl	80001d0 <strcmp>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f040 80ef 	bne.w	8008e36 <set_dido+0x316>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 8008c58:	4a89      	ldr	r2, [pc, #548]	; (8008e80 <set_dido+0x360>)
 8008c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c62:	4884      	ldr	r0, [pc, #528]	; (8008e74 <set_dido+0x354>)
 8008c64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4403      	add	r3, r0
 8008c72:	3308      	adds	r3, #8
 8008c74:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8008c76:	497f      	ldr	r1, [pc, #508]	; (8008e74 <set_dido+0x354>)
 8008c78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	330c      	adds	r3, #12
 8008c88:	7aba      	ldrb	r2, [r7, #10]
 8008c8a:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8008c8c:	4a7d      	ldr	r2, [pc, #500]	; (8008e84 <set_dido+0x364>)
 8008c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c92:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008c96:	4977      	ldr	r1, [pc, #476]	; (8008e74 <set_dido+0x354>)
 8008c98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	330e      	adds	r3, #14
 8008ca8:	4602      	mov	r2, r0
 8008caa:	801a      	strh	r2, [r3, #0]
					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8008cac:	4971      	ldr	r1, [pc, #452]	; (8008e74 <set_dido+0x354>)
 8008cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	496d      	ldr	r1, [pc, #436]	; (8008e74 <set_dido+0x354>)
 8008cc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	3306      	adds	r3, #6
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f003 fb1c 	bl	800c310 <HAL_GPIO_ReadPin>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d021      	beq.n	8008d26 <set_dido+0x206>
					{
						Status_OCD[j] = VAR_OUT;
 8008ce2:	4a69      	ldr	r2, [pc, #420]	; (8008e88 <set_dido+0x368>)
 8008ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ce8:	4413      	add	r3, r2
 8008cea:	7aba      	ldrb	r2, [r7, #10]
 8008cec:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 8008cee:	4961      	ldr	r1, [pc, #388]	; (8008e74 <set_dido+0x354>)
 8008cf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	3308      	adds	r3, #8
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	495c      	ldr	r1, [pc, #368]	; (8008e74 <set_dido+0x354>)
 8008d04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	330e      	adds	r3, #14
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	7aba      	ldrb	r2, [r7, #10]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f003 fb11 	bl	800c340 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8008d1e:	485b      	ldr	r0, [pc, #364]	; (8008e8c <set_dido+0x36c>)
 8008d20:	f7fa f87e 	bl	8002e20 <SEND_str>
 8008d24:	e047      	b.n	8008db6 <set_dido+0x296>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 8008d26:	4953      	ldr	r1, [pc, #332]	; (8008e74 <set_dido+0x354>)
 8008d28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	494e      	ldr	r1, [pc, #312]	; (8008e74 <set_dido+0x354>)
 8008d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	3306      	adds	r3, #6
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f003 fadf 	bl	800c310 <HAL_GPIO_ReadPin>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d12c      	bne.n	8008db6 <set_dido+0x296>
					{
						Status_OCD[j] = !VAR_OUT;
 8008d5c:	7abb      	ldrb	r3, [r7, #10]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf0c      	ite	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	2300      	movne	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4a47      	ldr	r2, [pc, #284]	; (8008e88 <set_dido+0x368>)
 8008d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d70:	4413      	add	r3, r2
 8008d72:	460a      	mov	r2, r1
 8008d74:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8008d76:	493f      	ldr	r1, [pc, #252]	; (8008e74 <set_dido+0x354>)
 8008d78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	3308      	adds	r3, #8
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	493a      	ldr	r1, [pc, #232]	; (8008e74 <set_dido+0x354>)
 8008d8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	330e      	adds	r3, #14
 8008d9c:	8819      	ldrh	r1, [r3, #0]
 8008d9e:	7abb      	ldrb	r3, [r7, #10]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	bf0c      	ite	eq
 8008da4:	2301      	moveq	r3, #1
 8008da6:	2300      	movne	r3, #0
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	f003 fac8 	bl	800c340 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8008db0:	4837      	ldr	r0, [pc, #220]	; (8008e90 <set_dido+0x370>)
 8008db2:	f7fa f835 	bl	8002e20 <SEND_str>
					}

					//For Debug:
					//------------------------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8008db6:	492f      	ldr	r1, [pc, #188]	; (8008e74 <set_dido+0x354>)
 8008db8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a32      	ldr	r2, [pc, #200]	; (8008e94 <set_dido+0x374>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d102      	bne.n	8008dd4 <set_dido+0x2b4>
						SEND_str("1 - success...\n");
 8008dce:	4832      	ldr	r0, [pc, #200]	; (8008e98 <set_dido+0x378>)
 8008dd0:	f7fa f826 	bl	8002e20 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 8008dd4:	4927      	ldr	r1, [pc, #156]	; (8008e74 <set_dido+0x354>)
 8008dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	3304      	adds	r3, #4
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	7afa      	ldrb	r2, [r7, #11]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d102      	bne.n	8008df4 <set_dido+0x2d4>
						SEND_str("2 - success...\n");
 8008dee:	482b      	ldr	r0, [pc, #172]	; (8008e9c <set_dido+0x37c>)
 8008df0:	f7fa f816 	bl	8002e20 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 8008df4:	491f      	ldr	r1, [pc, #124]	; (8008e74 <set_dido+0x354>)
 8008df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	3308      	adds	r3, #8
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a25      	ldr	r2, [pc, #148]	; (8008ea0 <set_dido+0x380>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d102      	bne.n	8008e14 <set_dido+0x2f4>
						SEND_str("3 - success...\n");
 8008e0e:	4825      	ldr	r0, [pc, #148]	; (8008ea4 <set_dido+0x384>)
 8008e10:	f7fa f806 	bl	8002e20 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 8008e14:	4917      	ldr	r1, [pc, #92]	; (8008e74 <set_dido+0x354>)
 8008e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	330c      	adds	r3, #12
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7aba      	ldrb	r2, [r7, #10]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d10e      	bne.n	8008e4c <set_dido+0x32c>
						SEND_str("4 - success...\n");
 8008e2e:	481e      	ldr	r0, [pc, #120]	; (8008ea8 <set_dido+0x388>)
 8008e30:	f7f9 fff6 	bl	8002e20 <SEND_str>
					//------------------------------------------------

					break;
 8008e34:	e00a      	b.n	8008e4c <set_dido+0x32c>
			for(int j = 0; j < 8; j++)
 8008e36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e44:	2b07      	cmp	r3, #7
 8008e46:	f77f aef6 	ble.w	8008c36 <set_dido+0x116>
				}
			}
			break;
 8008e4a:	e00b      	b.n	8008e64 <set_dido+0x344>
					break;
 8008e4c:	bf00      	nop
			break;
 8008e4e:	e009      	b.n	8008e64 <set_dido+0x344>
	for(int i = 0; i < 8; i++)
 8008e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e54:	3301      	adds	r3, #1
 8008e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e5e:	2b07      	cmp	r3, #7
 8008e60:	f77f ae7c 	ble.w	8008b5c <set_dido+0x3c>
		}
	}
}
 8008e64:	bf00      	nop
 8008e66:	37b8      	adds	r7, #184	; 0xb8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	080213cc 	.word	0x080213cc
 8008e70:	0802141c 	.word	0x0802141c
 8008e74:	200012c8 	.word	0x200012c8
 8008e78:	20000010 	.word	0x20000010
 8008e7c:	20000050 	.word	0x20000050
 8008e80:	20000030 	.word	0x20000030
 8008e84:	20000060 	.word	0x20000060
 8008e88:	20000ff8 	.word	0x20000ff8
 8008e8c:	08021374 	.word	0x08021374
 8008e90:	08021380 	.word	0x08021380
 8008e94:	40020c00 	.word	0x40020c00
 8008e98:	0802138c 	.word	0x0802138c
 8008e9c:	0802139c 	.word	0x0802139c
 8008ea0:	40020400 	.word	0x40020400
 8008ea4:	080213ac 	.word	0x080213ac
 8008ea8:	080213bc 	.word	0x080213bc

08008eac <set_aido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_aido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b0b2      	sub	sp, #200	; 0xc8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	61f8      	str	r0, [r7, #28]
 8008eb4:	ed87 0b04 	vstr	d0, [r7, #16]
 8008eb8:	ed87 1b02 	vstr	d1, [r7, #8]
 8008ebc:	61b9      	str	r1, [r7, #24]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 8008ec2:	4b96      	ldr	r3, [pc, #600]	; (800911c <set_aido+0x270>)
 8008ec4:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8008ec8:	461d      	mov	r5, r3
 8008eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ed6:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008eda:	4a91      	ldr	r2, [pc, #580]	; (8009120 <set_aido+0x274>)
 8008edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2250      	movs	r2, #80	; 0x50
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f012 fb84 	bl	801b5f2 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 8008eea:	4b8e      	ldr	r3, [pc, #568]	; (8009124 <set_aido+0x278>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ef6:	e108      	b.n	800910a <set_aido+0x25e>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 8008ef8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008efc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	440b      	add	r3, r1
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	69f8      	ldr	r0, [r7, #28]
 8008f0e:	f7f7 f95f 	bl	80001d0 <strcmp>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 80f3 	bne.w	8009100 <set_aido+0x254>
		{
			if(AiDo[i].clrFlag != false)
 8008f1a:	4983      	ldr	r1, [pc, #524]	; (8009128 <set_aido+0x27c>)
 8008f1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	440b      	add	r3, r1
 8008f2a:	3321      	adds	r3, #33	; 0x21
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d017      	beq.n	8008f62 <set_aido+0xb6>
				HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);
 8008f32:	497d      	ldr	r1, [pc, #500]	; (8009128 <set_aido+0x27c>)
 8008f34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	440b      	add	r3, r1
 8008f42:	3318      	adds	r3, #24
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	4978      	ldr	r1, [pc, #480]	; (8009128 <set_aido+0x27c>)
 8008f48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	440b      	add	r3, r1
 8008f56:	331e      	adds	r3, #30
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	f003 f9ef 	bl	800c340 <HAL_GPIO_WritePin>

			AiDo[i].clrFlag = true;
 8008f62:	4971      	ldr	r1, [pc, #452]	; (8009128 <set_aido+0x27c>)
 8008f64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	440b      	add	r3, r1
 8008f72:	3321      	adds	r3, #33	; 0x21
 8008f74:	2201      	movs	r2, #1
 8008f76:	701a      	strb	r2, [r3, #0]
			AiDo[i].A_IN = pVHOD[i];
 8008f78:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f80:	4413      	add	r3, r2
 8008f82:	7818      	ldrb	r0, [r3, #0]
 8008f84:	4968      	ldr	r1, [pc, #416]	; (8009128 <set_aido+0x27c>)
 8008f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	440b      	add	r3, r1
 8008f94:	4602      	mov	r2, r0
 8008f96:	701a      	strb	r2, [r3, #0]
			AiDo[i].RANGE_LOW = RANGE_LOW;
 8008f98:	4963      	ldr	r1, [pc, #396]	; (8009128 <set_aido+0x27c>)
 8008f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f103 0208 	add.w	r2, r3, #8
 8008fac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008fb0:	e9c2 3400 	strd	r3, r4, [r2]
			AiDo[i].RANGE_HIGH = RANGE_HIGH;
 8008fb4:	495c      	ldr	r1, [pc, #368]	; (8009128 <set_aido+0x27c>)
 8008fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	440b      	add	r3, r1
 8008fc4:	f103 0210 	add.w	r2, r3, #16
 8008fc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008fcc:	e9c2 3400 	strd	r3, r4, [r2]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fd6:	e08d      	b.n	80090f4 <set_aido+0x248>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008fd8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	440b      	add	r3, r1
 8008fea:	4619      	mov	r1, r3
 8008fec:	69b8      	ldr	r0, [r7, #24]
 8008fee:	f7f7 f8ef 	bl	80001d0 <strcmp>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d178      	bne.n	80090ea <set_aido+0x23e>
				{
					AiDo[i].D_OUT = pVIHOD[j];
 8008ff8:	4a4c      	ldr	r2, [pc, #304]	; (800912c <set_aido+0x280>)
 8008ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ffe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009002:	4849      	ldr	r0, [pc, #292]	; (8009128 <set_aido+0x27c>)
 8009004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	4403      	add	r3, r0
 8009012:	3318      	adds	r3, #24
 8009014:	6019      	str	r1, [r3, #0]
					AiDo[i].VAR_OUT = VAR_OUT;
 8009016:	4944      	ldr	r1, [pc, #272]	; (8009128 <set_aido+0x27c>)
 8009018:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	440b      	add	r3, r1
 8009026:	331c      	adds	r3, #28
 8009028:	79fa      	ldrb	r2, [r7, #7]
 800902a:	701a      	strb	r2, [r3, #0]
					AiDo[i].OCD_Pin = OCD_Pin[j];
 800902c:	4a40      	ldr	r2, [pc, #256]	; (8009130 <set_aido+0x284>)
 800902e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009032:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8009036:	493c      	ldr	r1, [pc, #240]	; (8009128 <set_aido+0x27c>)
 8009038:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	440b      	add	r3, r1
 8009046:	331e      	adds	r3, #30
 8009048:	4602      	mov	r2, r0
 800904a:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 800904c:	4839      	ldr	r0, [pc, #228]	; (8009134 <set_aido+0x288>)
 800904e:	f7f9 fee7 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 8009052:	4a39      	ldr	r2, [pc, #228]	; (8009138 <set_aido+0x28c>)
 8009054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	4413      	add	r3, r2
 800905c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009060:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009064:	461a      	mov	r2, r3
 8009066:	4623      	mov	r3, r4
 8009068:	4934      	ldr	r1, [pc, #208]	; (800913c <set_aido+0x290>)
 800906a:	f013 f883 	bl	801c174 <siprintf>
					SEND_str(Buff);
 800906e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f7f9 fed4 	bl	8002e20 <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 8009078:	4831      	ldr	r0, [pc, #196]	; (8009140 <set_aido+0x294>)
 800907a:	f7f9 fed1 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_LOW);
 800907e:	492a      	ldr	r1, [pc, #168]	; (8009128 <set_aido+0x27c>)
 8009080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	440b      	add	r3, r1
 800908e:	3308      	adds	r3, #8
 8009090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009094:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009098:	461a      	mov	r2, r3
 800909a:	4623      	mov	r3, r4
 800909c:	4927      	ldr	r1, [pc, #156]	; (800913c <set_aido+0x290>)
 800909e:	f013 f869 	bl	801c174 <siprintf>
					SEND_str(Buff);
 80090a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f9 feba 	bl	8002e20 <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 80090ac:	4825      	ldr	r0, [pc, #148]	; (8009144 <set_aido+0x298>)
 80090ae:	f7f9 feb7 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_HIGH);
 80090b2:	491d      	ldr	r1, [pc, #116]	; (8009128 <set_aido+0x27c>)
 80090b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	440b      	add	r3, r1
 80090c2:	3310      	adds	r3, #16
 80090c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090c8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090cc:	461a      	mov	r2, r3
 80090ce:	4623      	mov	r3, r4
 80090d0:	491a      	ldr	r1, [pc, #104]	; (800913c <set_aido+0x290>)
 80090d2:	f013 f84f 	bl	801c174 <siprintf>
					SEND_str(Buff);
 80090d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f9 fea0 	bl	8002e20 <SEND_str>
					SEND_str("\n");
 80090e0:	4819      	ldr	r0, [pc, #100]	; (8009148 <set_aido+0x29c>)
 80090e2:	f7f9 fe9d 	bl	8002e20 <SEND_str>
					//------------------------------------------------

					break;
 80090e6:	bf00      	nop
				}
			}
			break;
 80090e8:	e014      	b.n	8009114 <set_aido+0x268>
			for(int j = 0; j < 8; j++)
 80090ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090ee:	3301      	adds	r3, #1
 80090f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	f77f af6d 	ble.w	8008fd8 <set_aido+0x12c>
			break;
 80090fe:	e009      	b.n	8009114 <set_aido+0x268>
	for(int i = 0; i < 4; i++)
 8009100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009104:	3301      	adds	r3, #1
 8009106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800910a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800910e:	2b03      	cmp	r3, #3
 8009110:	f77f aef2 	ble.w	8008ef8 <set_aido+0x4c>
		}
	}
}
 8009114:	bf00      	nop
 8009116:	37c8      	adds	r7, #200	; 0xc8
 8009118:	46bd      	mov	sp, r7
 800911a:	bdb0      	pop	{r4, r5, r7, pc}
 800911c:	080214a4 	.word	0x080214a4
 8009120:	0802141c 	.word	0x0802141c
 8009124:	080214cc 	.word	0x080214cc
 8009128:	20001218 	.word	0x20001218
 800912c:	20000030 	.word	0x20000030
 8009130:	20000060 	.word	0x20000060
 8009134:	0802146c 	.word	0x0802146c
 8009138:	20000a98 	.word	0x20000a98
 800913c:	08021478 	.word	0x08021478
 8009140:	08021480 	.word	0x08021480
 8009144:	08021490 	.word	0x08021490
 8009148:	080214a0 	.word	0x080214a0

0800914c <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 800914c:	b5b0      	push	{r4, r5, r7, lr}
 800914e:	b094      	sub	sp, #80	; 0x50
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8009156:	4b4b      	ldr	r3, [pc, #300]	; (8009284 <set_pwm+0x138>)
 8009158:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800915c:	461d      	mov	r5, r3
 800915e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8009166:	4b48      	ldr	r3, [pc, #288]	; (8009288 <set_pwm+0x13c>)
 8009168:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800916c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800916e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8009172:	2300      	movs	r3, #0
 8009174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009176:	e07d      	b.n	8009274 <set_pwm+0x128>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8009178:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800917c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	440b      	add	r3, r1
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f7 f821 	bl	80001d0 <strcmp>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d16c      	bne.n	800926e <set_pwm+0x122>
		{
			if(PWM[i].clrFlag != false)
 8009194:	4a3d      	ldr	r2, [pc, #244]	; (800928c <set_pwm+0x140>)
 8009196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	4413      	add	r3, r2
 800919c:	799b      	ldrb	r3, [r3, #6]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 80091a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091aa:	4413      	add	r3, r2
 80091ac:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80091b0:	2301      	movs	r3, #1
 80091b2:	2200      	movs	r2, #0
 80091b4:	4836      	ldr	r0, [pc, #216]	; (8009290 <set_pwm+0x144>)
 80091b6:	f004 fd87 	bl	800dcc8 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 80091ba:	4a34      	ldr	r2, [pc, #208]	; (800928c <set_pwm+0x140>)
 80091bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	4413      	add	r3, r2
 80091c2:	2201      	movs	r2, #1
 80091c4:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 80091c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091ce:	4413      	add	r3, r2
 80091d0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80091d4:	492d      	ldr	r1, [pc, #180]	; (800928c <set_pwm+0x140>)
 80091d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	461a      	mov	r2, r3
 80091e2:	0092      	lsls	r2, r2, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	461a      	mov	r2, r3
 80091e8:	0091      	lsls	r1, r2, #2
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	b299      	uxth	r1, r3
 80091f4:	4a25      	ldr	r2, [pc, #148]	; (800928c <set_pwm+0x140>)
 80091f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	4413      	add	r3, r2
 80091fc:	460a      	mov	r2, r1
 80091fe:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009208:	4413      	add	r3, r2
 800920a:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	4a1e      	ldr	r2, [pc, #120]	; (800928c <set_pwm+0x140>)
 8009214:	4413      	add	r3, r2
 8009216:	1d1a      	adds	r2, r3, #4
 8009218:	2301      	movs	r3, #1
 800921a:	481d      	ldr	r0, [pc, #116]	; (8009290 <set_pwm+0x144>)
 800921c:	f004 fd54 	bl	800dcc8 <HAL_TIM_PWM_Start_DMA>

			//For Debug:
			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8009220:	481c      	ldr	r0, [pc, #112]	; (8009294 <set_pwm+0x148>)
 8009222:	f7f9 fdfd 	bl	8002e20 <SEND_str>
			SEND_str(PVIHOD[i]);
 8009226:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800922a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	440b      	add	r3, r1
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 fdf3 	bl	8002e20 <SEND_str>
			SEND_str("\n");
 800923a:	4817      	ldr	r0, [pc, #92]	; (8009298 <set_pwm+0x14c>)
 800923c:	f7f9 fdf0 	bl	8002e20 <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8009240:	4816      	ldr	r0, [pc, #88]	; (800929c <set_pwm+0x150>)
 8009242:	f7f9 fded 	bl	8002e20 <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4914      	ldr	r1, [pc, #80]	; (80092a0 <set_pwm+0x154>)
 800924e:	4618      	mov	r0, r3
 8009250:	f012 ff90 	bl	801c174 <siprintf>
			SEND_str(Buff);
 8009254:	f107 0308 	add.w	r3, r7, #8
 8009258:	4618      	mov	r0, r3
 800925a:	f7f9 fde1 	bl	8002e20 <SEND_str>
			SEND_str("%");
 800925e:	4811      	ldr	r0, [pc, #68]	; (80092a4 <set_pwm+0x158>)
 8009260:	f7f9 fdde 	bl	8002e20 <SEND_str>
			SEND_str("\n");
 8009264:	480c      	ldr	r0, [pc, #48]	; (8009298 <set_pwm+0x14c>)
 8009266:	f7f9 fddb 	bl	8002e20 <SEND_str>
			//------------------------------------------------

			break;
 800926a:	bf00      	nop
 800926c:	e006      	b.n	800927c <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	3301      	adds	r3, #1
 8009272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009276:	2b03      	cmp	r3, #3
 8009278:	f77f af7e 	ble.w	8009178 <set_pwm+0x2c>
		}
	}
}
 800927c:	bf00      	nop
 800927e:	3750      	adds	r7, #80	; 0x50
 8009280:	46bd      	mov	sp, r7
 8009282:	bdb0      	pop	{r4, r5, r7, pc}
 8009284:	080214f4 	.word	0x080214f4
 8009288:	08021508 	.word	0x08021508
 800928c:	200011f8 	.word	0x200011f8
 8009290:	20001a9c 	.word	0x20001a9c
 8009294:	080214d0 	.word	0x080214d0
 8009298:	080214a0 	.word	0x080214a0
 800929c:	080214dc 	.word	0x080214dc
 80092a0:	080214ec 	.word	0x080214ec
 80092a4:	080214f0 	.word	0x080214f0

080092a8 <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b0a9      	sub	sp, #164	; 0xa4
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	61f8      	str	r0, [r7, #28]
 80092b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80092b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80092b8:	61b9      	str	r1, [r7, #24]
 80092ba:	4613      	mov	r3, r2
 80092bc:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80092be:	4aa5      	ldr	r2, [pc, #660]	; (8009554 <set_temperature+0x2ac>)
 80092c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092c4:	4611      	mov	r1, r2
 80092c6:	2250      	movs	r2, #80	; 0x50
 80092c8:	4618      	mov	r0, r3
 80092ca:	f012 f992 	bl	801b5f2 <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092d4:	e134      	b.n	8009540 <set_temperature+0x298>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 80092d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a9d      	ldr	r2, [pc, #628]	; (8009558 <set_temperature+0x2b0>)
 80092e4:	4413      	add	r3, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	69f8      	ldr	r0, [r7, #28]
 80092ea:	f7f6 ff71 	bl	80001d0 <strcmp>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 8120 	bne.w	8009536 <set_temperature+0x28e>
		{
			if(TSiDo[i].clrFlag != false)
 80092f6:	4999      	ldr	r1, [pc, #612]	; (800955c <set_temperature+0x2b4>)
 80092f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	440b      	add	r3, r1
 8009306:	3330      	adds	r3, #48	; 0x30
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d017      	beq.n	800933e <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 800930e:	4993      	ldr	r1, [pc, #588]	; (800955c <set_temperature+0x2b4>)
 8009310:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009314:	4613      	mov	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	440b      	add	r3, r1
 800931e:	3328      	adds	r3, #40	; 0x28
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	498e      	ldr	r1, [pc, #568]	; (800955c <set_temperature+0x2b4>)
 8009324:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009328:	4613      	mov	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	440b      	add	r3, r1
 8009332:	332e      	adds	r3, #46	; 0x2e
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	4619      	mov	r1, r3
 800933a:	f003 f801 	bl	800c340 <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 800933e:	4987      	ldr	r1, [pc, #540]	; (800955c <set_temperature+0x2b4>)
 8009340:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	440b      	add	r3, r1
 800934e:	3330      	adds	r3, #48	; 0x30
 8009350:	2201      	movs	r2, #1
 8009352:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 8009354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009358:	b2db      	uxtb	r3, r3
 800935a:	3301      	adds	r3, #1
 800935c:	b2d8      	uxtb	r0, r3
 800935e:	497f      	ldr	r1, [pc, #508]	; (800955c <set_temperature+0x2b4>)
 8009360:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	440b      	add	r3, r1
 800936e:	4602      	mov	r2, r0
 8009370:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8009372:	2300      	movs	r3, #0
 8009374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009378:	e01e      	b.n	80093b8 <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 800937a:	4977      	ldr	r1, [pc, #476]	; (8009558 <set_temperature+0x2b0>)
 800937c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	18ca      	adds	r2, r1, r3
 800938a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800938e:	4413      	add	r3, r2
 8009390:	7818      	ldrb	r0, [r3, #0]
 8009392:	4972      	ldr	r1, [pc, #456]	; (800955c <set_temperature+0x2b4>)
 8009394:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	18ca      	adds	r2, r1, r3
 80093a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a6:	4413      	add	r3, r2
 80093a8:	3301      	adds	r3, #1
 80093aa:	4602      	mov	r2, r0
 80093ac:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 80093ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	dddc      	ble.n	800937a <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 80093c0:	4966      	ldr	r1, [pc, #408]	; (800955c <set_temperature+0x2b4>)
 80093c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	440b      	add	r3, r1
 80093d0:	f103 0218 	add.w	r2, r3, #24
 80093d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093d8:	e9c2 3400 	strd	r3, r4, [r2]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 80093dc:	495f      	ldr	r1, [pc, #380]	; (800955c <set_temperature+0x2b4>)
 80093de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	440b      	add	r3, r1
 80093ec:	f103 0220 	add.w	r2, r3, #32
 80093f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80093f4:	e9c2 3400 	strd	r3, r4, [r2]
			for(int j = 0; j < 8; j++)
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093fe:	e094      	b.n	800952a <set_temperature+0x282>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8009400:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8009404:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	440b      	add	r3, r1
 8009412:	4619      	mov	r1, r3
 8009414:	69b8      	ldr	r0, [r7, #24]
 8009416:	f7f6 fedb 	bl	80001d0 <strcmp>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d17f      	bne.n	8009520 <set_temperature+0x278>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8009420:	4a4f      	ldr	r2, [pc, #316]	; (8009560 <set_temperature+0x2b8>)
 8009422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009426:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800942a:	484c      	ldr	r0, [pc, #304]	; (800955c <set_temperature+0x2b4>)
 800942c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009430:	4613      	mov	r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4403      	add	r3, r0
 800943a:	3328      	adds	r3, #40	; 0x28
 800943c:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 800943e:	4947      	ldr	r1, [pc, #284]	; (800955c <set_temperature+0x2b4>)
 8009440:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	440b      	add	r3, r1
 800944e:	332c      	adds	r3, #44	; 0x2c
 8009450:	79fa      	ldrb	r2, [r7, #7]
 8009452:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 8009454:	4a43      	ldr	r2, [pc, #268]	; (8009564 <set_temperature+0x2bc>)
 8009456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800945a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800945e:	493f      	ldr	r1, [pc, #252]	; (800955c <set_temperature+0x2b4>)
 8009460:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009464:	4613      	mov	r3, r2
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	440b      	add	r3, r1
 800946e:	332e      	adds	r3, #46	; 0x2e
 8009470:	4602      	mov	r2, r0
 8009472:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 8009474:	483c      	ldr	r0, [pc, #240]	; (8009568 <set_temperature+0x2c0>)
 8009476:	f7f9 fcd3 	bl	8002e20 <SEND_str>
					SEND_str(ROM_RAW);
 800947a:	69f8      	ldr	r0, [r7, #28]
 800947c:	f7f9 fcd0 	bl	8002e20 <SEND_str>
					SEND_str("\n");
 8009480:	483a      	ldr	r0, [pc, #232]	; (800956c <set_temperature+0x2c4>)
 8009482:	f7f9 fccd 	bl	8002e20 <SEND_str>
					SEND_str("SET VALUE: ");
 8009486:	483a      	ldr	r0, [pc, #232]	; (8009570 <set_temperature+0x2c8>)
 8009488:	f7f9 fcca 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.2f", atof(sign_temper));
 800948c:	4839      	ldr	r0, [pc, #228]	; (8009574 <set_temperature+0x2cc>)
 800948e:	f012 f841 	bl	801b514 <atof>
 8009492:	ec54 3b10 	vmov	r3, r4, d0
 8009496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800949a:	461a      	mov	r2, r3
 800949c:	4623      	mov	r3, r4
 800949e:	4936      	ldr	r1, [pc, #216]	; (8009578 <set_temperature+0x2d0>)
 80094a0:	f012 fe68 	bl	801c174 <siprintf>
					SEND_str(Buff);
 80094a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7f9 fcb9 	bl	8002e20 <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 80094ae:	4833      	ldr	r0, [pc, #204]	; (800957c <set_temperature+0x2d4>)
 80094b0:	f7f9 fcb6 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 80094b4:	4929      	ldr	r1, [pc, #164]	; (800955c <set_temperature+0x2b4>)
 80094b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094ba:	4613      	mov	r3, r2
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	3318      	adds	r3, #24
 80094c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094ce:	461a      	mov	r2, r3
 80094d0:	4623      	mov	r3, r4
 80094d2:	4929      	ldr	r1, [pc, #164]	; (8009578 <set_temperature+0x2d0>)
 80094d4:	f012 fe4e 	bl	801c174 <siprintf>
					SEND_str(Buff);
 80094d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f9 fc9f 	bl	8002e20 <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 80094e2:	4827      	ldr	r0, [pc, #156]	; (8009580 <set_temperature+0x2d8>)
 80094e4:	f7f9 fc9c 	bl	8002e20 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 80094e8:	491c      	ldr	r1, [pc, #112]	; (800955c <set_temperature+0x2b4>)
 80094ea:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094ee:	4613      	mov	r3, r2
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	00db      	lsls	r3, r3, #3
 80094f6:	440b      	add	r3, r1
 80094f8:	3320      	adds	r3, #32
 80094fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009502:	461a      	mov	r2, r3
 8009504:	4623      	mov	r3, r4
 8009506:	491c      	ldr	r1, [pc, #112]	; (8009578 <set_temperature+0x2d0>)
 8009508:	f012 fe34 	bl	801c174 <siprintf>
					SEND_str(Buff);
 800950c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009510:	4618      	mov	r0, r3
 8009512:	f7f9 fc85 	bl	8002e20 <SEND_str>
					SEND_str("\n");
 8009516:	4815      	ldr	r0, [pc, #84]	; (800956c <set_temperature+0x2c4>)
 8009518:	f7f9 fc82 	bl	8002e20 <SEND_str>
					//------------------------------------------------

					break;
 800951c:	bf00      	nop
				}
			}
			break;
 800951e:	e014      	b.n	800954a <set_temperature+0x2a2>
			for(int j = 0; j < 8; j++)
 8009520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009524:	3301      	adds	r3, #1
 8009526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800952a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800952e:	2b07      	cmp	r3, #7
 8009530:	f77f af66 	ble.w	8009400 <set_temperature+0x158>
			break;
 8009534:	e009      	b.n	800954a <set_temperature+0x2a2>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8009536:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953a:	3301      	adds	r3, #1
 800953c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009544:	2b01      	cmp	r3, #1
 8009546:	f77f aec6 	ble.w	80092d6 <set_temperature+0x2e>
		}
	}
}
 800954a:	bf00      	nop
 800954c:	37a4      	adds	r7, #164	; 0xa4
 800954e:	46bd      	mov	sp, r7
 8009550:	bd90      	pop	{r4, r7, pc}
 8009552:	bf00      	nop
 8009554:	0802141c 	.word	0x0802141c
 8009558:	20002048 	.word	0x20002048
 800955c:	20001188 	.word	0x20001188
 8009560:	20000030 	.word	0x20000030
 8009564:	20000060 	.word	0x20000060
 8009568:	08021518 	.word	0x08021518
 800956c:	080214a0 	.word	0x080214a0
 8009570:	0802146c 	.word	0x0802146c
 8009574:	2000200c 	.word	0x2000200c
 8009578:	08021524 	.word	0x08021524
 800957c:	0802152c 	.word	0x0802152c
 8009580:	08021540 	.word	0x08021540

08009584 <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 800958a:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <sensors_Reset+0x54>)
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	4a12      	ldr	r2, [pc, #72]	; (80095d8 <sensors_Reset+0x54>)
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8009596:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800959a:	f7fb f999 	bl	80048d0 <delay_micros>
	SET_HIGH;					//высокий уровень
 800959e:	4b0e      	ldr	r3, [pc, #56]	; (80095d8 <sensors_Reset+0x54>)
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	4a0d      	ldr	r2, [pc, #52]	; (80095d8 <sensors_Reset+0x54>)
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 80095aa:	203c      	movs	r0, #60	; 0x3c
 80095ac:	f7fb f990 	bl	80048d0 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 80095b0:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <sensors_Reset+0x54>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 80095bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80095c0:	f7fb f986 	bl	80048d0 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bf14      	ite	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	2300      	moveq	r3, #0
 80095ce:	b2db      	uxtb	r3, r3
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	40020c00 	.word	0x40020c00

080095dc <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 80095e6:	4b12      	ldr	r3, [pc, #72]	; (8009630 <sensors_ReadBit+0x54>)
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	4a11      	ldr	r2, [pc, #68]	; (8009630 <sensors_ReadBit+0x54>)
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 80095f2:	2001      	movs	r0, #1
 80095f4:	f7fb f96c 	bl	80048d0 <delay_micros>
	SET_HIGH;							//высокий уровень
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <sensors_ReadBit+0x54>)
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	4a0c      	ldr	r2, [pc, #48]	; (8009630 <sensors_ReadBit+0x54>)
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 8009604:	200e      	movs	r0, #14
 8009606:	f7fb f963 	bl	80048d0 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <sensors_ReadBit+0x54>)
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	bf14      	ite	ne
 8009616:	2301      	movne	r3, #1
 8009618:	2300      	moveq	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 800961e:	202d      	movs	r0, #45	; 0x2d
 8009620:	f7fb f956 	bl	80048d0 <delay_micros>

	return bit;
 8009624:	79fb      	ldrb	r3, [r7, #7]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40020c00 	.word	0x40020c00

08009634 <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 800963e:	2300      	movs	r3, #0
 8009640:	71bb      	strb	r3, [r7, #6]
 8009642:	e00d      	b.n	8009660 <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 8009644:	f7ff ffca 	bl	80095dc <sensors_ReadBit>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	79bb      	ldrb	r3, [r7, #6]
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	b2da      	uxtb	r2, r3
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	4413      	add	r3, r2
 8009658:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 800965a:	79bb      	ldrb	r3, [r7, #6]
 800965c:	3301      	adds	r3, #1
 800965e:	71bb      	strb	r3, [r7, #6]
 8009660:	79bb      	ldrb	r3, [r7, #6]
 8009662:	2b07      	cmp	r3, #7
 8009664:	d9ee      	bls.n	8009644 <sensors_ReadByte+0x10>

	return data;
 8009666:	79fb      	ldrb	r3, [r7, #7]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 800967a:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <sensors_WriteBit+0x50>)
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	4a10      	ldr	r2, [pc, #64]	; (80096c0 <sensors_WriteBit+0x50>)
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <sensors_WriteBit+0x20>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <sensors_WriteBit+0x22>
 8009690:	233c      	movs	r3, #60	; 0x3c
 8009692:	4618      	mov	r0, r3
 8009694:	f7fb f91c 	bl	80048d0 <delay_micros>
	SET_HIGH;
 8009698:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <sensors_WriteBit+0x50>)
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	4a08      	ldr	r2, [pc, #32]	; (80096c0 <sensors_WriteBit+0x50>)
 800969e:	f043 0301 	orr.w	r3, r3, #1
 80096a2:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <sensors_WriteBit+0x3e>
 80096aa:	233c      	movs	r3, #60	; 0x3c
 80096ac:	e000      	b.n	80096b0 <sensors_WriteBit+0x40>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fb f90d 	bl	80048d0 <delay_micros>
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	40020c00 	.word	0x40020c00

080096c4 <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
 80096d2:	e010      	b.n	80096f6 <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 80096d4:	79fa      	ldrb	r2, [r7, #7]
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	fa42 f303 	asr.w	r3, r2, r3
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff ffc3 	bl	8009670 <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 80096ea:	2005      	movs	r0, #5
 80096ec:	f7fb f8f0 	bl	80048d0 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	3301      	adds	r3, #1
 80096f4:	73fb      	strb	r3, [r7, #15]
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	2b07      	cmp	r3, #7
 80096fa:	d9eb      	bls.n	80096d4 <sensors_WriteByte+0x10>
	}
}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 800970c:	2301      	movs	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 8009718:	2301      	movs	r3, #1
 800971a:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 8009720:	4b55      	ldr	r3, [pc, #340]	; (8009878 <sensors_SearchRom+0x174>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d104      	bne.n	8009732 <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 8009728:	f7ff ff2c 	bl	8009584 <sensors_Reset>
		sensors_WriteByte(0xF0);
 800972c:	20f0      	movs	r0, #240	; 0xf0
 800972e:	f7ff ffc9 	bl	80096c4 <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 8009732:	f7ff ff53 	bl	80095dc <sensors_ReadBit>
 8009736:	4603      	mov	r3, r0
 8009738:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 800973a:	f7ff ff4f 	bl	80095dc <sensors_ReadBit>
 800973e:	4603      	mov	r3, r0
 8009740:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d102      	bne.n	800974e <sensors_SearchRom+0x4a>
 8009748:	7abb      	ldrb	r3, [r7, #10]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d05c      	beq.n	8009808 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 800974e:	7afa      	ldrb	r2, [r7, #11]
 8009750:	7abb      	ldrb	r3, [r7, #10]
 8009752:	429a      	cmp	r2, r3
 8009754:	d002      	beq.n	800975c <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 8009756:	7afb      	ldrb	r3, [r7, #11]
 8009758:	74bb      	strb	r3, [r7, #18]
 800975a:	e025      	b.n	80097a8 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 800975c:	4b47      	ldr	r3, [pc, #284]	; (800987c <sensors_SearchRom+0x178>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	7dfa      	ldrb	r2, [r7, #23]
 8009762:	429a      	cmp	r2, r3
 8009764:	d20c      	bcs.n	8009780 <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8009766:	7d7b      	ldrb	r3, [r7, #21]
 8009768:	4a45      	ldr	r2, [pc, #276]	; (8009880 <sensors_SearchRom+0x17c>)
 800976a:	5cd2      	ldrb	r2, [r2, r3]
 800976c:	7cfb      	ldrb	r3, [r7, #19]
 800976e:	4013      	ands	r3, r2
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	bf14      	ite	ne
 8009776:	2301      	movne	r3, #1
 8009778:	2300      	moveq	r3, #0
 800977a:	b2db      	uxtb	r3, r3
 800977c:	74bb      	strb	r3, [r7, #18]
 800977e:	e008      	b.n	8009792 <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 8009780:	4b3e      	ldr	r3, [pc, #248]	; (800987c <sensors_SearchRom+0x178>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	7dfa      	ldrb	r2, [r7, #23]
 8009786:	429a      	cmp	r2, r3
 8009788:	bf0c      	ite	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	2300      	movne	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 8009792:	7cbb      	ldrb	r3, [r7, #18]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d107      	bne.n	80097a8 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 800979c:	7dbb      	ldrb	r3, [r7, #22]
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d802      	bhi.n	80097a8 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 80097a2:	4a38      	ldr	r2, [pc, #224]	; (8009884 <sensors_SearchRom+0x180>)
 80097a4:	7dbb      	ldrb	r3, [r7, #22]
 80097a6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 80097a8:	7cbb      	ldrb	r3, [r7, #18]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d109      	bne.n	80097c2 <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 80097ae:	7d7b      	ldrb	r3, [r7, #21]
 80097b0:	4a33      	ldr	r2, [pc, #204]	; (8009880 <sensors_SearchRom+0x17c>)
 80097b2:	5cd1      	ldrb	r1, [r2, r3]
 80097b4:	7d7b      	ldrb	r3, [r7, #21]
 80097b6:	7cfa      	ldrb	r2, [r7, #19]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	b2d1      	uxtb	r1, r2
 80097bc:	4a30      	ldr	r2, [pc, #192]	; (8009880 <sensors_SearchRom+0x17c>)
 80097be:	54d1      	strb	r1, [r2, r3]
 80097c0:	e00d      	b.n	80097de <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80097c2:	7d7b      	ldrb	r3, [r7, #21]
 80097c4:	4a2e      	ldr	r2, [pc, #184]	; (8009880 <sensors_SearchRom+0x17c>)
 80097c6:	5cd3      	ldrb	r3, [r2, r3]
 80097c8:	b25a      	sxtb	r2, r3
 80097ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097ce:	43db      	mvns	r3, r3
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	4013      	ands	r3, r2
 80097d4:	b25a      	sxtb	r2, r3
 80097d6:	7d7b      	ldrb	r3, [r7, #21]
 80097d8:	b2d1      	uxtb	r1, r2
 80097da:	4a29      	ldr	r2, [pc, #164]	; (8009880 <sensors_SearchRom+0x17c>)
 80097dc:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 80097de:	7cbb      	ldrb	r3, [r7, #18]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff ff45 	bl	8009670 <sensors_WriteBit>
			id_bit_number++;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	3301      	adds	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 80097ec:	7cfb      	ldrb	r3, [r7, #19]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 80097f2:	7cfb      	ldrb	r3, [r7, #19]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 80097f8:	7d7b      	ldrb	r3, [r7, #21]
 80097fa:	3301      	adds	r3, #1
 80097fc:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 80097fe:	2301      	movs	r3, #1
 8009800:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 8009802:	7d7b      	ldrb	r3, [r7, #21]
 8009804:	2b07      	cmp	r3, #7
 8009806:	d994      	bls.n	8009732 <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d90b      	bls.n	8009826 <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 800980e:	4a1b      	ldr	r2, [pc, #108]	; (800987c <sensors_SearchRom+0x178>)
 8009810:	7dbb      	ldrb	r3, [r7, #22]
 8009812:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 8009814:	4b19      	ldr	r3, [pc, #100]	; (800987c <sensors_SearchRom+0x178>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 800981c:	4b16      	ldr	r3, [pc, #88]	; (8009878 <sensors_SearchRom+0x174>)
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 8009822:	2301      	movs	r3, #1
 8009824:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 8009826:	7d3b      	ldrb	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <sensors_SearchRom+0x130>
 800982c:	4b14      	ldr	r3, [pc, #80]	; (8009880 <sensors_SearchRom+0x17c>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10b      	bne.n	800984c <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 8009834:	4b11      	ldr	r3, [pc, #68]	; (800987c <sensors_SearchRom+0x178>)
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 800983a:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <sensors_SearchRom+0x174>)
 800983c:	2200      	movs	r2, #0
 800983e:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 8009840:	4b10      	ldr	r3, [pc, #64]	; (8009884 <sensors_SearchRom+0x180>)
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	753b      	strb	r3, [r7, #20]
 800984a:	e010      	b.n	800986e <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e00a      	b.n	8009868 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	4413      	add	r3, r2
 8009858:	4909      	ldr	r1, [pc, #36]	; (8009880 <sensors_SearchRom+0x17c>)
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	440a      	add	r2, r1
 800985e:	7812      	ldrb	r2, [r2, #0]
 8009860:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b07      	cmp	r3, #7
 800986c:	ddf1      	ble.n	8009852 <sensors_SearchRom+0x14e>
	}
	return search_result;
 800986e:	7d3b      	ldrb	r3, [r7, #20]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20002046 	.word	0x20002046
 800987c:	20002047 	.word	0x20002047
 8009880:	2000203c 	.word	0x2000203c
 8009884:	20002045 	.word	0x20002045

08009888 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	2300      	movs	r3, #0
 8009898:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d116      	bne.n	80098ce <sensors_init+0x46>
	{
		if(sensors_Reset())
 80098a0:	f7ff fe70 	bl	8009584 <sensors_Reset>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <sensors_init+0x26>
			return 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e06b      	b.n	8009986 <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 80098ae:	20cc      	movs	r0, #204	; 0xcc
 80098b0:	f7ff ff08 	bl	80096c4 <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 80098b4:	204e      	movs	r0, #78	; 0x4e
 80098b6:	f7ff ff05 	bl	80096c4 <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 80098ba:	2064      	movs	r0, #100	; 0x64
 80098bc:	f7ff ff02 	bl	80096c4 <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 80098c0:	209e      	movs	r0, #158	; 0x9e
 80098c2:	f7ff feff 	bl	80096c4 <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 80098c6:	207f      	movs	r0, #127	; 0x7f
 80098c8:	f7ff fefc 	bl	80096c4 <sensors_WriteByte>
 80098cc:	e05a      	b.n	8009984 <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 80098ce:	2301      	movs	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	e01c      	b.n	800990e <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff ff13 	bl	8009704 <sensors_SearchRom>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d018      	beq.n	8009916 <sensors_init+0x8e>
			{
				Dev_Cnt++;
 80098e4:	4b2a      	ldr	r3, [pc, #168]	; (8009990 <sensors_init+0x108>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	4b28      	ldr	r3, [pc, #160]	; (8009990 <sensors_init+0x108>)
 80098ee:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 80098f0:	4b27      	ldr	r3, [pc, #156]	; (8009990 <sensors_init+0x108>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	4a26      	ldr	r2, [pc, #152]	; (8009994 <sensors_init+0x10c>)
 80098fa:	4413      	add	r3, r2
 80098fc:	461a      	mov	r2, r3
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	cb03      	ldmia	r3!, {r0, r1}
 8009904:	6010      	str	r0, [r2, #0]
 8009906:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b08      	cmp	r3, #8
 8009912:	dddf      	ble.n	80098d4 <sensors_init+0x4c>
 8009914:	e000      	b.n	8009918 <sensors_init+0x90>
			}
			else break;
 8009916:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e02c      	b.n	8009978 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 800991e:	f7ff fe31 	bl	8009584 <sensors_Reset>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <sensors_init+0xa4>
				return 1;
 8009928:	2301      	movs	r3, #1
 800992a:	e02c      	b.n	8009986 <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 800992c:	2055      	movs	r0, #85	; 0x55
 800992e:	f7ff fec9 	bl	80096c4 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e00d      	b.n	8009954 <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a15      	ldr	r2, [pc, #84]	; (8009994 <sensors_init+0x10c>)
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	441a      	add	r2, r3
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4413      	add	r3, r2
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff febb 	bl	80096c4 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b07      	cmp	r3, #7
 8009958:	ddee      	ble.n	8009938 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 800995a:	204e      	movs	r0, #78	; 0x4e
 800995c:	f7ff feb2 	bl	80096c4 <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 8009960:	2064      	movs	r0, #100	; 0x64
 8009962:	f7ff feaf 	bl	80096c4 <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 8009966:	209e      	movs	r0, #158	; 0x9e
 8009968:	f7ff feac 	bl	80096c4 <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 800996c:	207f      	movs	r0, #127	; 0x7f
 800996e:	f7ff fea9 	bl	80096c4 <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	3301      	adds	r3, #1
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <sensors_init+0x108>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4293      	cmp	r3, r2
 8009982:	ddcc      	ble.n	800991e <sensors_init+0x96>
		}
	}
	return 0;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20002044 	.word	0x20002044
 8009994:	20002028 	.word	0x20002028

08009998 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	460a      	mov	r2, r1
 80099a2:	71fb      	strb	r3, [r7, #7]
 80099a4:	4613      	mov	r3, r2
 80099a6:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 80099ac:	f7ff fdea 	bl	8009584 <sensors_Reset>
	if(mode == SKIP_ROM)
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 80099b6:	20cc      	movs	r0, #204	; 0xcc
 80099b8:	f7ff fe84 	bl	80096c4 <sensors_WriteByte>
 80099bc:	e016      	b.n	80099ec <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 80099be:	2055      	movs	r0, #85	; 0x55
 80099c0:	f7ff fe80 	bl	80096c4 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e00d      	b.n	80099e6 <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 80099ca:	79bb      	ldrb	r3, [r7, #6]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	4a0b      	ldr	r2, [pc, #44]	; (80099fc <sensors_MeasureTemperCmd+0x64>)
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	441a      	add	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fe72 	bl	80096c4 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3301      	adds	r3, #1
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b07      	cmp	r3, #7
 80099ea:	ddee      	ble.n	80099ca <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 80099ec:	2044      	movs	r0, #68	; 0x44
 80099ee:	f7ff fe69 	bl	80096c4 <sensors_WriteByte>
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20002028 	.word	0x20002028

08009a00 <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 8009a10:	f7ff fdb8 	bl	8009584 <sensors_Reset>
	if(mode == SKIP_ROM)
 8009a14:	79fb      	ldrb	r3, [r7, #7]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d103      	bne.n	8009a22 <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8009a1a:	20cc      	movs	r0, #204	; 0xcc
 8009a1c:	f7ff fe52 	bl	80096c4 <sensors_WriteByte>
 8009a20:	e016      	b.n	8009a50 <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8009a22:	2055      	movs	r0, #85	; 0x55
 8009a24:	f7ff fe4e 	bl	80096c4 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
 8009a2c:	e00d      	b.n	8009a4a <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8009a2e:	79bb      	ldrb	r3, [r7, #6]
 8009a30:	1e5a      	subs	r2, r3, #1
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4912      	ldr	r1, [pc, #72]	; (8009a80 <sensors_ReadStratcpad+0x80>)
 8009a36:	00d2      	lsls	r2, r2, #3
 8009a38:	440a      	add	r2, r1
 8009a3a:	4413      	add	r3, r2
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fe40 	bl	80096c4 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	3301      	adds	r3, #1
 8009a48:	73fb      	strb	r3, [r7, #15]
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b07      	cmp	r3, #7
 8009a4e:	d9ee      	bls.n	8009a2e <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 8009a50:	20be      	movs	r0, #190	; 0xbe
 8009a52:	f7ff fe37 	bl	80096c4 <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
 8009a5a:	e009      	b.n	8009a70 <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	18d4      	adds	r4, r2, r3
 8009a62:	f7ff fde7 	bl	8009634 <sensors_ReadByte>
 8009a66:	4603      	mov	r3, r0
 8009a68:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	2b07      	cmp	r3, #7
 8009a74:	d9f2      	bls.n	8009a5c <sensors_ReadStratcpad+0x5c>
	}
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd90      	pop	{r4, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20002028 	.word	0x20002028

08009a84 <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <sensors_GetSign+0x18>
		return 1;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <sensors_GetSign+0x1a>
	else
		return 0;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	111b      	asrs	r3, r3, #4
 8009ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abc:	ee07 3a90 	vmov	s15, r3
 8009ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	f003 030f 	and.w	r3, r3, #15
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ad6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8009ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ade:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ae6:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	ee07 3a90 	vmov	s15, r3
}
 8009af0:	eeb0 0a67 	vmov.f32	s0, s15
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
	...

08009b00 <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 8009b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b02:	b08b      	sub	sp, #44	; 0x2c
 8009b04:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 8009b06:	2001      	movs	r0, #1
 8009b08:	f7ff febe 	bl	8009888 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
 8009b10:	e079      	b.n	8009c06 <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 8009b12:	7bfa      	ldrb	r2, [r7, #15]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4a42      	ldr	r2, [pc, #264]	; (8009c28 <UpdateTempSens+0x128>)
 8009b1e:	1898      	adds	r0, r3, r2
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	4a42      	ldr	r2, [pc, #264]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b24:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009b28:	469c      	mov	ip, r3
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	4a3f      	ldr	r2, [pc, #252]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	469e      	mov	lr, r3
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4a3c      	ldr	r2, [pc, #240]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	789b      	ldrb	r3, [r3, #2]
 8009b40:	4619      	mov	r1, r3
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4a39      	ldr	r2, [pc, #228]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	4413      	add	r3, r2
 8009b4a:	78db      	ldrb	r3, [r3, #3]
 8009b4c:	461c      	mov	r4, r3
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	4a36      	ldr	r2, [pc, #216]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	791b      	ldrb	r3, [r3, #4]
 8009b58:	461d      	mov	r5, r3
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4a33      	ldr	r2, [pc, #204]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	4413      	add	r3, r2
 8009b62:	795b      	ldrb	r3, [r3, #5]
 8009b64:	461e      	mov	r6, r3
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	4a30      	ldr	r2, [pc, #192]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	799b      	ldrb	r3, [r3, #6]
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	4a2d      	ldr	r2, [pc, #180]	; (8009c2c <UpdateTempSens+0x12c>)
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4413      	add	r3, r2
 8009b7a:	79db      	ldrb	r3, [r3, #7]
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	9603      	str	r6, [sp, #12]
 8009b84:	9502      	str	r5, [sp, #8]
 8009b86:	9401      	str	r4, [sp, #4]
 8009b88:	9100      	str	r1, [sp, #0]
 8009b8a:	4673      	mov	r3, lr
 8009b8c:	4662      	mov	r2, ip
 8009b8e:	4928      	ldr	r1, [pc, #160]	; (8009c30 <UpdateTempSens+0x130>)
 8009b90:	f012 faf0 	bl	801c174 <siprintf>
		//----------------------from debug---------------------------
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 8009b94:	7bfa      	ldrb	r2, [r7, #15]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4a22      	ldr	r2, [pc, #136]	; (8009c28 <UpdateTempSens+0x128>)
 8009ba0:	4413      	add	r3, r2
 8009ba2:	4924      	ldr	r1, [pc, #144]	; (8009c34 <UpdateTempSens+0x134>)
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7f6 fb13 	bl	80001d0 <strcmp>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10c      	bne.n	8009bca <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009bb0:	7bfa      	ldrb	r2, [r7, #15]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4a1b      	ldr	r2, [pc, #108]	; (8009c28 <UpdateTempSens+0x128>)
 8009bbc:	4413      	add	r3, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f9 f92e 	bl	8002e20 <SEND_str>
			SEND_str(" - YES\n");
 8009bc4:	481c      	ldr	r0, [pc, #112]	; (8009c38 <UpdateTempSens+0x138>)
 8009bc6:	f7f9 f92b 	bl	8002e20 <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 8009bca:	7bfa      	ldrb	r2, [r7, #15]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a14      	ldr	r2, [pc, #80]	; (8009c28 <UpdateTempSens+0x128>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4918      	ldr	r1, [pc, #96]	; (8009c3c <UpdateTempSens+0x13c>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f6 faf8 	bl	80001d0 <strcmp>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10c      	bne.n	8009c00 <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009be6:	7bfa      	ldrb	r2, [r7, #15]
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4a0d      	ldr	r2, [pc, #52]	; (8009c28 <UpdateTempSens+0x128>)
 8009bf2:	4413      	add	r3, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7f9 f913 	bl	8002e20 <SEND_str>
			SEND_str(" - YES\n");
 8009bfa:	480f      	ldr	r0, [pc, #60]	; (8009c38 <UpdateTempSens+0x138>)
 8009bfc:	f7f9 f910 	bl	8002e20 <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	3301      	adds	r3, #1
 8009c04:	73fb      	strb	r3, [r7, #15]
 8009c06:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <UpdateTempSens+0x140>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	7bfa      	ldrb	r2, [r7, #15]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d380      	bcc.n	8009b12 <UpdateTempSens+0x12>
		}
		//-----------------------------------------------------------
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 8009c10:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <UpdateTempSens+0x144>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0201 	mvn.w	r2, #1
 8009c18:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 8009c1a:	480a      	ldr	r0, [pc, #40]	; (8009c44 <UpdateTempSens+0x144>)
 8009c1c:	f003 ff9b 	bl	800db56 <HAL_TIM_Base_Start_IT>
}
 8009c20:	bf00      	nop
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c28:	20002048 	.word	0x20002048
 8009c2c:	20002028 	.word	0x20002028
 8009c30:	08021554 	.word	0x08021554
 8009c34:	08021578 	.word	0x08021578
 8009c38:	0802158c 	.word	0x0802158c
 8009c3c:	08021594 	.word	0x08021594
 8009c40:	20002044 	.word	0x20002044
 8009c44:	20001b9c 	.word	0x20001b9c

08009c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <HAL_Init+0x40>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <HAL_Init+0x40>)
 8009c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <HAL_Init+0x40>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <HAL_Init+0x40>)
 8009c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c64:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <HAL_Init+0x40>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a07      	ldr	r2, [pc, #28]	; (8009c88 <HAL_Init+0x40>)
 8009c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c70:	2003      	movs	r0, #3
 8009c72:	f000 fcf9 	bl	800a668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c76:	2000      	movs	r0, #0
 8009c78:	f7f9 ff14 	bl	8003aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c7c:	f7f9 feea 	bl	8003a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	40023c00 	.word	0x40023c00

08009c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <HAL_IncTick+0x20>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <HAL_IncTick+0x24>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <HAL_IncTick+0x24>)
 8009c9e:	6013      	str	r3, [r2, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000074 	.word	0x20000074
 8009cb0:	20002070 	.word	0x20002070

08009cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8009cb8:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <HAL_GetTick+0x14>)
 8009cba:	681b      	ldr	r3, [r3, #0]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20002070 	.word	0x20002070

08009ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cd4:	f7ff ffee 	bl	8009cb4 <HAL_GetTick>
 8009cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce4:	d005      	beq.n	8009cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <HAL_Delay+0x40>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009cf2:	bf00      	nop
 8009cf4:	f7ff ffde 	bl	8009cb4 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d8f7      	bhi.n	8009cf4 <HAL_Delay+0x28>
  {
  }
}
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20000074 	.word	0x20000074

08009d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e033      	b.n	8009d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d109      	bne.n	8009d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7f8 ffac 	bl	8002c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d118      	bne.n	8009d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d56:	f023 0302 	bic.w	r3, r3, #2
 8009d5a:	f043 0202 	orr.w	r2, r3, #2
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa40 	bl	800a1e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	f043 0201 	orr.w	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8009d7e:	e001      	b.n	8009d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <HAL_ADC_Start_DMA+0x1e>
 8009db2:	2302      	movs	r3, #2
 8009db4:	e0cc      	b.n	8009f50 <HAL_ADC_Start_DMA+0x1b8>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d018      	beq.n	8009dfe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009ddc:	4b5e      	ldr	r3, [pc, #376]	; (8009f58 <HAL_ADC_Start_DMA+0x1c0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a5e      	ldr	r2, [pc, #376]	; (8009f5c <HAL_ADC_Start_DMA+0x1c4>)
 8009de2:	fba2 2303 	umull	r2, r3, r2, r3
 8009de6:	0c9a      	lsrs	r2, r3, #18
 8009de8:	4613      	mov	r3, r2
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	4413      	add	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009df0:	e002      	b.n	8009df8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f9      	bne.n	8009df2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f040 80a0 	bne.w	8009f4e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4c:	d106      	bne.n	8009e5c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	f023 0206 	bic.w	r2, r3, #6
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	645a      	str	r2, [r3, #68]	; 0x44
 8009e5a:	e002      	b.n	8009e62 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e6a:	4b3d      	ldr	r3, [pc, #244]	; (8009f60 <HAL_ADC_Start_DMA+0x1c8>)
 8009e6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	4a3c      	ldr	r2, [pc, #240]	; (8009f64 <HAL_ADC_Start_DMA+0x1cc>)
 8009e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	4a3b      	ldr	r2, [pc, #236]	; (8009f68 <HAL_ADC_Start_DMA+0x1d0>)
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	4a3a      	ldr	r2, [pc, #232]	; (8009f6c <HAL_ADC_Start_DMA+0x1d4>)
 8009e84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009eae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	334c      	adds	r3, #76	; 0x4c
 8009eba:	4619      	mov	r1, r3
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f000 fd08 	bl	800a8d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 031f 	and.w	r3, r3, #31
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d12a      	bne.n	8009f26 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a26      	ldr	r2, [pc, #152]	; (8009f70 <HAL_ADC_Start_DMA+0x1d8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d015      	beq.n	8009f06 <HAL_ADC_Start_DMA+0x16e>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a25      	ldr	r2, [pc, #148]	; (8009f74 <HAL_ADC_Start_DMA+0x1dc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d105      	bne.n	8009ef0 <HAL_ADC_Start_DMA+0x158>
 8009ee4:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <HAL_ADC_Start_DMA+0x1c8>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f003 031f 	and.w	r3, r3, #31
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <HAL_ADC_Start_DMA+0x1e0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d129      	bne.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
 8009efa:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <HAL_ADC_Start_DMA+0x1c8>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f003 031f 	and.w	r3, r3, #31
 8009f02:	2b0f      	cmp	r3, #15
 8009f04:	d823      	bhi.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11c      	bne.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f22:	609a      	str	r2, [r3, #8]
 8009f24:	e013      	b.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a11      	ldr	r2, [pc, #68]	; (8009f70 <HAL_ADC_Start_DMA+0x1d8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d10e      	bne.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f4c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000008 	.word	0x20000008
 8009f5c:	431bde83 	.word	0x431bde83
 8009f60:	40012300 	.word	0x40012300
 8009f64:	0800a3e1 	.word	0x0800a3e1
 8009f68:	0800a49b 	.word	0x0800a49b
 8009f6c:	0800a4b7 	.word	0x0800a4b7
 8009f70:	40012000 	.word	0x40012000
 8009f74:	40012100 	.word	0x40012100
 8009f78:	40012200 	.word	0x40012200

08009f7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_ADC_ConfigChannel+0x1c>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e105      	b.n	800a1cc <HAL_ADC_ConfigChannel+0x228>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b09      	cmp	r3, #9
 8009fce:	d925      	bls.n	800a01c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68d9      	ldr	r1, [r3, #12]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4613      	mov	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3b1e      	subs	r3, #30
 8009fe6:	2207      	movs	r2, #7
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	43da      	mvns	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	400a      	ands	r2, r1
 8009ff4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68d9      	ldr	r1, [r3, #12]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	b29b      	uxth	r3, r3
 800a006:	4618      	mov	r0, r3
 800a008:	4603      	mov	r3, r0
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	4403      	add	r3, r0
 800a00e:	3b1e      	subs	r3, #30
 800a010:	409a      	lsls	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	60da      	str	r2, [r3, #12]
 800a01a:	e022      	b.n	800a062 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6919      	ldr	r1, [r3, #16]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	b29b      	uxth	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	2207      	movs	r2, #7
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43da      	mvns	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	400a      	ands	r2, r1
 800a03e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6919      	ldr	r1, [r3, #16]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4618      	mov	r0, r3
 800a052:	4603      	mov	r3, r0
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4403      	add	r3, r0
 800a058:	409a      	lsls	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2b06      	cmp	r3, #6
 800a068:	d824      	bhi.n	800a0b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	3b05      	subs	r3, #5
 800a07c:	221f      	movs	r2, #31
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	43da      	mvns	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	400a      	ands	r2, r1
 800a08a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	4618      	mov	r0, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3b05      	subs	r3, #5
 800a0a6:	fa00 f203 	lsl.w	r2, r0, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	635a      	str	r2, [r3, #52]	; 0x34
 800a0b2:	e04c      	b.n	800a14e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2b0c      	cmp	r3, #12
 800a0ba:	d824      	bhi.n	800a106 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3b23      	subs	r3, #35	; 0x23
 800a0ce:	221f      	movs	r2, #31
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	43da      	mvns	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	400a      	ands	r2, r1
 800a0dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	3b23      	subs	r3, #35	; 0x23
 800a0f8:	fa00 f203 	lsl.w	r2, r0, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	631a      	str	r2, [r3, #48]	; 0x30
 800a104:	e023      	b.n	800a14e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	3b41      	subs	r3, #65	; 0x41
 800a118:	221f      	movs	r2, #31
 800a11a:	fa02 f303 	lsl.w	r3, r2, r3
 800a11e:	43da      	mvns	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	400a      	ands	r2, r1
 800a126:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	4618      	mov	r0, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	3b41      	subs	r3, #65	; 0x41
 800a142:	fa00 f203 	lsl.w	r2, r0, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a14e:	4b22      	ldr	r3, [pc, #136]	; (800a1d8 <HAL_ADC_ConfigChannel+0x234>)
 800a150:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a21      	ldr	r2, [pc, #132]	; (800a1dc <HAL_ADC_ConfigChannel+0x238>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d109      	bne.n	800a170 <HAL_ADC_ConfigChannel+0x1cc>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b12      	cmp	r3, #18
 800a162:	d105      	bne.n	800a170 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a19      	ldr	r2, [pc, #100]	; (800a1dc <HAL_ADC_ConfigChannel+0x238>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d123      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x21e>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b10      	cmp	r3, #16
 800a180:	d003      	beq.n	800a18a <HAL_ADC_ConfigChannel+0x1e6>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b11      	cmp	r3, #17
 800a188:	d11b      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	d111      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a19e:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <HAL_ADC_ConfigChannel+0x23c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a10      	ldr	r2, [pc, #64]	; (800a1e4 <HAL_ADC_ConfigChannel+0x240>)
 800a1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a8:	0c9a      	lsrs	r2, r3, #18
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1b4:	e002      	b.n	800a1bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f9      	bne.n	800a1b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	40012300 	.word	0x40012300
 800a1dc:	40012000 	.word	0x40012000
 800a1e0:	20000008 	.word	0x20000008
 800a1e4:	431bde83 	.word	0x431bde83

0800a1e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a1f0:	4b79      	ldr	r3, [pc, #484]	; (800a3d8 <ADC_Init+0x1f0>)
 800a1f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	431a      	orrs	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a21c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6859      	ldr	r1, [r3, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	021a      	lsls	r2, r3, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6859      	ldr	r1, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6899      	ldr	r1, [r3, #8]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27a:	4a58      	ldr	r2, [pc, #352]	; (800a3dc <ADC_Init+0x1f4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d022      	beq.n	800a2c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a28e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6899      	ldr	r1, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6899      	ldr	r1, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	609a      	str	r2, [r3, #8]
 800a2c4:	e00f      	b.n	800a2e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 0202 	bic.w	r2, r2, #2
 800a2f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6899      	ldr	r1, [r3, #8]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7e1b      	ldrb	r3, [r3, #24]
 800a300:	005a      	lsls	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d01b      	beq.n	800a34c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a322:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a332:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6859      	ldr	r1, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	3b01      	subs	r3, #1
 800a340:	035a      	lsls	r2, r3, #13
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
 800a34a:	e007      	b.n	800a35c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a35a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	3b01      	subs	r3, #1
 800a378:	051a      	lsls	r2, r3, #20
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6899      	ldr	r1, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a39e:	025a      	lsls	r2, r3, #9
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6899      	ldr	r1, [r3, #8]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	029a      	lsls	r2, r3, #10
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	609a      	str	r2, [r3, #8]
}
 800a3cc:	bf00      	nop
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	40012300 	.word	0x40012300
 800a3dc:	0f000001 	.word	0x0f000001

0800a3e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d13c      	bne.n	800a474 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d12b      	bne.n	800a46c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d127      	bne.n	800a46c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a426:	2b00      	cmp	r3, #0
 800a428:	d006      	beq.n	800a438 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a434:	2b00      	cmp	r3, #0
 800a436:	d119      	bne.n	800a46c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0220 	bic.w	r2, r2, #32
 800a446:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	f043 0201 	orr.w	r2, r3, #1
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7f9 f8e1 	bl	8003634 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a472:	e00e      	b.n	800a492 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fd85 	bl	8009f90 <HAL_ADC_ErrorCallback>
}
 800a486:	e004      	b.n	800a492 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fd67 	bl	8009f7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	f043 0204 	orr.w	r2, r3, #4
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7ff fd5a 	bl	8009f90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4dc:	bf00      	nop
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <__NVIC_SetPriorityGrouping+0x44>)
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a500:	4013      	ands	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a50c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a516:	4a04      	ldr	r2, [pc, #16]	; (800a528 <__NVIC_SetPriorityGrouping+0x44>)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	60d3      	str	r3, [r2, #12]
}
 800a51c:	bf00      	nop
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	e000ed00 	.word	0xe000ed00

0800a52c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <__NVIC_GetPriorityGrouping+0x18>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	f003 0307 	and.w	r3, r3, #7
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	e000ed00 	.word	0xe000ed00

0800a548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a556:	2b00      	cmp	r3, #0
 800a558:	db0b      	blt.n	800a572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	f003 021f 	and.w	r2, r3, #31
 800a560:	4907      	ldr	r1, [pc, #28]	; (800a580 <__NVIC_EnableIRQ+0x38>)
 800a562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	2001      	movs	r0, #1
 800a56a:	fa00 f202 	lsl.w	r2, r0, r2
 800a56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	e000e100 	.word	0xe000e100

0800a584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	6039      	str	r1, [r7, #0]
 800a58e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a594:	2b00      	cmp	r3, #0
 800a596:	db0a      	blt.n	800a5ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	490c      	ldr	r1, [pc, #48]	; (800a5d0 <__NVIC_SetPriority+0x4c>)
 800a59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5a2:	0112      	lsls	r2, r2, #4
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a5ac:	e00a      	b.n	800a5c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	4908      	ldr	r1, [pc, #32]	; (800a5d4 <__NVIC_SetPriority+0x50>)
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	f003 030f 	and.w	r3, r3, #15
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	0112      	lsls	r2, r2, #4
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	761a      	strb	r2, [r3, #24]
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	e000e100 	.word	0xe000e100
 800a5d4:	e000ed00 	.word	0xe000ed00

0800a5d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b089      	sub	sp, #36	; 0x24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f1c3 0307 	rsb	r3, r3, #7
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	bf28      	it	cs
 800a5f6:	2304      	movcs	r3, #4
 800a5f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	2b06      	cmp	r3, #6
 800a600:	d902      	bls.n	800a608 <NVIC_EncodePriority+0x30>
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	3b03      	subs	r3, #3
 800a606:	e000      	b.n	800a60a <NVIC_EncodePriority+0x32>
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a60c:	f04f 32ff 	mov.w	r2, #4294967295
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	fa02 f303 	lsl.w	r3, r2, r3
 800a616:	43da      	mvns	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	401a      	ands	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a620:	f04f 31ff 	mov.w	r1, #4294967295
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	fa01 f303 	lsl.w	r3, r1, r3
 800a62a:	43d9      	mvns	r1, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a630:	4313      	orrs	r3, r2
         );
}
 800a632:	4618      	mov	r0, r3
 800a634:	3724      	adds	r7, #36	; 0x24
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
	...

0800a640 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a644:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <__NVIC_SystemReset+0x20>)
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a650:	4903      	ldr	r1, [pc, #12]	; (800a660 <__NVIC_SystemReset+0x20>)
 800a652:	4b04      	ldr	r3, [pc, #16]	; (800a664 <__NVIC_SystemReset+0x24>)
 800a654:	4313      	orrs	r3, r2
 800a656:	60cb      	str	r3, [r1, #12]
 800a658:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <__NVIC_SystemReset+0x1c>
 800a660:	e000ed00 	.word	0xe000ed00
 800a664:	05fa0004 	.word	0x05fa0004

0800a668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff37 	bl	800a4e4 <__NVIC_SetPriorityGrouping>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a67e:	b580      	push	{r7, lr}
 800a680:	b086      	sub	sp, #24
 800a682:	af00      	add	r7, sp, #0
 800a684:	4603      	mov	r3, r0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a690:	f7ff ff4c 	bl	800a52c <__NVIC_GetPriorityGrouping>
 800a694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f7ff ff9c 	bl	800a5d8 <NVIC_EncodePriority>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff6b 	bl	800a584 <__NVIC_SetPriority>
}
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ff3f 	bl	800a548 <__NVIC_EnableIRQ>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a6d6:	f7ff ffb3 	bl	800a640 <__NVIC_SystemReset>

0800a6da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e00e      	b.n	800a70a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	795b      	ldrb	r3, [r3, #5]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7f8 fd1b 	bl	8003138 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800a712:	b480      	push	{r7}
 800a714:	b087      	sub	sp, #28
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800a71e:	2300      	movs	r3, #0
 800a720:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2202      	movs	r2, #2
 800a726:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e00a      	b.n	800a754 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	441a      	add	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	3301      	adds	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d3f0      	bcc.n	800a73e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2201      	movs	r2, #1
 800a768:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800a76a:	693b      	ldr	r3, [r7, #16]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a784:	f7ff fa96 	bl	8009cb4 <HAL_GetTick>
 800a788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e099      	b.n	800a8c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0201 	bic.w	r2, r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7b4:	e00f      	b.n	800a7d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7b6:	f7ff fa7d 	bl	8009cb4 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	2b05      	cmp	r3, #5
 800a7c2:	d908      	bls.n	800a7d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e078      	b.n	800a8c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e8      	bne.n	800a7b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	4b38      	ldr	r3, [pc, #224]	; (800a8d0 <HAL_DMA_Init+0x158>)
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a80e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a81a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a1b      	ldr	r3, [r3, #32]
 800a820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d107      	bne.n	800a840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	4313      	orrs	r3, r2
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f023 0307 	bic.w	r3, r3, #7
 800a856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b04      	cmp	r3, #4
 800a868:	d117      	bne.n	800a89a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	4313      	orrs	r3, r2
 800a872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00e      	beq.n	800a89a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa91 	bl	800ada4 <DMA_CheckFifoParam>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d008      	beq.n	800a89a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2240      	movs	r2, #64	; 0x40
 800a88c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a896:	2301      	movs	r3, #1
 800a898:	e016      	b.n	800a8c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fa48 	bl	800ad38 <DMA_CalcBaseAndBitshift>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b0:	223f      	movs	r2, #63	; 0x3f
 800a8b2:	409a      	lsls	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	f010803f 	.word	0xf010803f

0800a8d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <HAL_DMA_Start_IT+0x26>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	e040      	b.n	800a97c <HAL_DMA_Start_IT+0xa8>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d12f      	bne.n	800a96e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f9da 	bl	800acdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a92c:	223f      	movs	r2, #63	; 0x3f
 800a92e:	409a      	lsls	r2, r3
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0216 	orr.w	r2, r2, #22
 800a942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0208 	orr.w	r2, r2, #8
 800a95a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e005      	b.n	800a97a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a976:	2302      	movs	r3, #2
 800a978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b02      	cmp	r3, #2
 800a996:	d004      	beq.n	800a9a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2280      	movs	r2, #128	; 0x80
 800a99c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e00c      	b.n	800a9bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2205      	movs	r2, #5
 800a9a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0201 	bic.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a9d4:	4b92      	ldr	r3, [pc, #584]	; (800ac20 <HAL_DMA_IRQHandler+0x258>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a92      	ldr	r2, [pc, #584]	; (800ac24 <HAL_DMA_IRQHandler+0x25c>)
 800a9da:	fba2 2303 	umull	r2, r3, r2, r3
 800a9de:	0a9b      	lsrs	r3, r3, #10
 800a9e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f2:	2208      	movs	r2, #8
 800a9f4:	409a      	lsls	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d01a      	beq.n	800aa34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d013      	beq.n	800aa34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0204 	bic.w	r2, r2, #4
 800aa1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	2208      	movs	r2, #8
 800aa22:	409a      	lsls	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2c:	f043 0201 	orr.w	r2, r3, #1
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa38:	2201      	movs	r2, #1
 800aa3a:	409a      	lsls	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4013      	ands	r3, r2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d012      	beq.n	800aa6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	2201      	movs	r2, #1
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	f043 0202 	orr.w	r2, r3, #2
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6e:	2204      	movs	r2, #4
 800aa70:	409a      	lsls	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4013      	ands	r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d012      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	2204      	movs	r2, #4
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa98:	f043 0204 	orr.w	r2, r3, #4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa4:	2210      	movs	r2, #16
 800aaa6:	409a      	lsls	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d043      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0308 	and.w	r3, r3, #8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d03c      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac2:	2210      	movs	r2, #16
 800aac4:	409a      	lsls	r2, r3
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d018      	beq.n	800ab0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d108      	bne.n	800aaf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d024      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
 800aaf6:	e01f      	b.n	800ab38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01b      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
 800ab08:	e016      	b.n	800ab38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d107      	bne.n	800ab28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0208 	bic.w	r2, r2, #8
 800ab26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	409a      	lsls	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4013      	ands	r3, r2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 808e 	beq.w	800ac66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8086 	beq.w	800ac66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5e:	2220      	movs	r2, #32
 800ab60:	409a      	lsls	r2, r3
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	d136      	bne.n	800abe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f022 0216 	bic.w	r2, r2, #22
 800ab80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	695a      	ldr	r2, [r3, #20]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d103      	bne.n	800aba2 <HAL_DMA_IRQHandler+0x1da>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f022 0208 	bic.w	r2, r2, #8
 800abb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb6:	223f      	movs	r2, #63	; 0x3f
 800abb8:	409a      	lsls	r2, r3
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d07d      	beq.n	800acd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
        }
        return;
 800abde:	e078      	b.n	800acd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d01c      	beq.n	800ac28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d108      	bne.n	800ac0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d030      	beq.n	800ac66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
 800ac0c:	e02b      	b.n	800ac66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d027      	beq.n	800ac66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
 800ac1e:	e022      	b.n	800ac66 <HAL_DMA_IRQHandler+0x29e>
 800ac20:	20000008 	.word	0x20000008
 800ac24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10f      	bne.n	800ac56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0210 	bic.w	r2, r2, #16
 800ac44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d032      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d022      	beq.n	800acc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 0201 	bic.w	r2, r2, #1
 800ac90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	3301      	adds	r3, #1
 800ac96:	60bb      	str	r3, [r7, #8]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d307      	bcc.n	800acae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f2      	bne.n	800ac92 <HAL_DMA_IRQHandler+0x2ca>
 800acac:	e000      	b.n	800acb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800acae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
 800acd0:	e000      	b.n	800acd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800acd2:	bf00      	nop
    }
  }
}
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop

0800acdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b40      	cmp	r3, #64	; 0x40
 800ad08:	d108      	bne.n	800ad1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad1a:	e007      	b.n	800ad2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	60da      	str	r2, [r3, #12]
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	3b10      	subs	r3, #16
 800ad48:	4a14      	ldr	r2, [pc, #80]	; (800ad9c <DMA_CalcBaseAndBitshift+0x64>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	091b      	lsrs	r3, r3, #4
 800ad50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad52:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <DMA_CalcBaseAndBitshift+0x68>)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d909      	bls.n	800ad7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad6e:	f023 0303 	bic.w	r3, r3, #3
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	659a      	str	r2, [r3, #88]	; 0x58
 800ad78:	e007      	b.n	800ad8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	aaaaaaab 	.word	0xaaaaaaab
 800ada0:	08024898 	.word	0x08024898

0800ada4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d11f      	bne.n	800adfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d855      	bhi.n	800ae70 <DMA_CheckFifoParam+0xcc>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <DMA_CheckFifoParam+0x28>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800addd 	.word	0x0800addd
 800add0:	0800adef 	.word	0x0800adef
 800add4:	0800addd 	.word	0x0800addd
 800add8:	0800ae71 	.word	0x0800ae71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d045      	beq.n	800ae74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adec:	e042      	b.n	800ae74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adf6:	d13f      	bne.n	800ae78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adfc:	e03c      	b.n	800ae78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae06:	d121      	bne.n	800ae4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d836      	bhi.n	800ae7c <DMA_CheckFifoParam+0xd8>
 800ae0e:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <DMA_CheckFifoParam+0x70>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae2b 	.word	0x0800ae2b
 800ae1c:	0800ae25 	.word	0x0800ae25
 800ae20:	0800ae3d 	.word	0x0800ae3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
      break;
 800ae28:	e02f      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d024      	beq.n	800ae80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae3a:	e021      	b.n	800ae80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae44:	d11e      	bne.n	800ae84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae4a:	e01b      	b.n	800ae84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d902      	bls.n	800ae58 <DMA_CheckFifoParam+0xb4>
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d003      	beq.n	800ae5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae56:	e018      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5c:	e015      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6e:	e00b      	b.n	800ae88 <DMA_CheckFifoParam+0xe4>
      break;
 800ae70:	bf00      	nop
 800ae72:	e00a      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae74:	bf00      	nop
 800ae76:	e008      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e006      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae7c:	bf00      	nop
 800ae7e:	e004      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae80:	bf00      	nop
 800ae82:	e002      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;   
 800ae84:	bf00      	nop
 800ae86:	e000      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae88:	bf00      	nop
    }
  } 
  
  return status; 
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800aea8:	4baa      	ldr	r3, [pc, #680]	; (800b154 <HAL_ETH_Init+0x2bc>)
 800aeaa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e185      	b.n	800b1ca <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d106      	bne.n	800aed8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f004 faee 	bl	800f4b4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aed8:	2300      	movs	r3, #0
 800aeda:	60bb      	str	r3, [r7, #8]
 800aedc:	4b9e      	ldr	r3, [pc, #632]	; (800b158 <HAL_ETH_Init+0x2c0>)
 800aede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee0:	4a9d      	ldr	r2, [pc, #628]	; (800b158 <HAL_ETH_Init+0x2c0>)
 800aee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aee6:	6453      	str	r3, [r2, #68]	; 0x44
 800aee8:	4b9b      	ldr	r3, [pc, #620]	; (800b158 <HAL_ETH_Init+0x2c0>)
 800aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef0:	60bb      	str	r3, [r7, #8]
 800aef2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800aef4:	4b99      	ldr	r3, [pc, #612]	; (800b15c <HAL_ETH_Init+0x2c4>)
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	4a98      	ldr	r2, [pc, #608]	; (800b15c <HAL_ETH_Init+0x2c4>)
 800aefa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aefe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800af00:	4b96      	ldr	r3, [pc, #600]	; (800b15c <HAL_ETH_Init+0x2c4>)
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	4994      	ldr	r1, [pc, #592]	; (800b15c <HAL_ETH_Init+0x2c4>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f042 0201 	orr.w	r2, r2, #1
 800af20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af24:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800af26:	f7fe fec5 	bl	8009cb4 <HAL_GetTick>
 800af2a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800af2c:	e011      	b.n	800af52 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800af2e:	f7fe fec1 	bl	8009cb4 <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800af3c:	d909      	bls.n	800af52 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2203      	movs	r2, #3
 800af42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e13b      	b.n	800b1ca <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e4      	bne.n	800af2e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	f023 031c 	bic.w	r3, r3, #28
 800af72:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800af74:	f001 fe44 	bl	800cc00 <HAL_RCC_GetHCLKFreq>
 800af78:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	4a78      	ldr	r2, [pc, #480]	; (800b160 <HAL_ETH_Init+0x2c8>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d908      	bls.n	800af94 <HAL_ETH_Init+0xfc>
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	4a77      	ldr	r2, [pc, #476]	; (800b164 <HAL_ETH_Init+0x2cc>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d804      	bhi.n	800af94 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	f043 0308 	orr.w	r3, r3, #8
 800af90:	61fb      	str	r3, [r7, #28]
 800af92:	e027      	b.n	800afe4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	4a73      	ldr	r2, [pc, #460]	; (800b164 <HAL_ETH_Init+0x2cc>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d908      	bls.n	800afae <HAL_ETH_Init+0x116>
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	4a72      	ldr	r2, [pc, #456]	; (800b168 <HAL_ETH_Init+0x2d0>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d804      	bhi.n	800afae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	f043 030c 	orr.w	r3, r3, #12
 800afaa:	61fb      	str	r3, [r7, #28]
 800afac:	e01a      	b.n	800afe4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	4a6d      	ldr	r2, [pc, #436]	; (800b168 <HAL_ETH_Init+0x2d0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d903      	bls.n	800afbe <HAL_ETH_Init+0x126>
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	4a6c      	ldr	r2, [pc, #432]	; (800b16c <HAL_ETH_Init+0x2d4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d911      	bls.n	800afe2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	4a6a      	ldr	r2, [pc, #424]	; (800b16c <HAL_ETH_Init+0x2d4>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d908      	bls.n	800afd8 <HAL_ETH_Init+0x140>
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	4a69      	ldr	r2, [pc, #420]	; (800b170 <HAL_ETH_Init+0x2d8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d804      	bhi.n	800afd8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	f043 0304 	orr.w	r3, r3, #4
 800afd4:	61fb      	str	r3, [r7, #28]
 800afd6:	e005      	b.n	800afe4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	f043 0310 	orr.w	r3, r3, #16
 800afde:	61fb      	str	r3, [r7, #28]
 800afe0:	e000      	b.n	800afe4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800afe2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800afec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aff0:	2100      	movs	r1, #0
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fb16 	bl	800b624 <HAL_ETH_WritePHYRegister>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00b      	beq.n	800b016 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800b002:	6939      	ldr	r1, [r7, #16]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fccb 	bl	800b9a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e0d9      	b.n	800b1ca <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800b016:	20ff      	movs	r0, #255	; 0xff
 800b018:	f7fe fe58 	bl	8009ccc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 80a7 	beq.w	800b174 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b026:	f7fe fe45 	bl	8009cb4 <HAL_GetTick>
 800b02a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b02c:	f107 030c 	add.w	r3, r7, #12
 800b030:	461a      	mov	r2, r3
 800b032:	2101      	movs	r1, #1
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fa8d 	bl	800b554 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b03a:	f7fe fe3b 	bl	8009cb4 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	f241 3288 	movw	r2, #5000	; 0x1388
 800b048:	4293      	cmp	r3, r2
 800b04a:	d90f      	bls.n	800b06c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b050:	6939      	ldr	r1, [r7, #16]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fca4 	bl	800b9a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e0ae      	b.n	800b1ca <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0da      	beq.n	800b02c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800b076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fad1 	bl	800b624 <HAL_ETH_WritePHYRegister>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b08c:	6939      	ldr	r1, [r7, #16]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fc86 	bl	800b9a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b09c:	2301      	movs	r3, #1
 800b09e:	e094      	b.n	800b1ca <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0a0:	f7fe fe08 	bl	8009cb4 <HAL_GetTick>
 800b0a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa50 	bl	800b554 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b0b4:	f7fe fdfe 	bl	8009cb4 <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d90f      	bls.n	800b0e6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b0ca:	6939      	ldr	r1, [r7, #16]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc67 	bl	800b9a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e071      	b.n	800b1ca <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0da      	beq.n	800b0a6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800b0f0:	f107 030c 	add.w	r3, r7, #12
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	211f      	movs	r1, #31
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa2b 	bl	800b554 <HAL_ETH_ReadPHYRegister>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b108:	6939      	ldr	r1, [r7, #16]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fc48 	bl	800b9a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b118:	2301      	movs	r3, #1
 800b11a:	e056      	b.n	800b1ca <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f003 0310 	and.w	r3, r3, #16
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b12c:	60da      	str	r2, [r3, #12]
 800b12e:	e002      	b.n	800b136 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
 800b146:	e037      	b.n	800b1b8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b14e:	609a      	str	r2, [r3, #8]
 800b150:	e032      	b.n	800b1b8 <HAL_ETH_Init+0x320>
 800b152:	bf00      	nop
 800b154:	03938700 	.word	0x03938700
 800b158:	40023800 	.word	0x40023800
 800b15c:	40013800 	.word	0x40013800
 800b160:	01312cff 	.word	0x01312cff
 800b164:	02160ebf 	.word	0x02160ebf
 800b168:	039386ff 	.word	0x039386ff
 800b16c:	05f5e0ff 	.word	0x05f5e0ff
 800b170:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	08db      	lsrs	r3, r3, #3
 800b17a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	085b      	lsrs	r3, r3, #1
 800b182:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b184:	4313      	orrs	r3, r2
 800b186:	b29b      	uxth	r3, r3
 800b188:	461a      	mov	r2, r3
 800b18a:	2100      	movs	r1, #0
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fa49 	bl	800b624 <HAL_ETH_WritePHYRegister>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00b      	beq.n	800b1b0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b19c:	6939      	ldr	r1, [r7, #16]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fbfe 	bl	800b9a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e00c      	b.n	800b1ca <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800b1b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b1b4:	f7fe fd8a 	bl	8009ccc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800b1b8:	6939      	ldr	r1, [r7, #16]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fbf0 	bl	800b9a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop

0800b1d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_ETH_DMATxDescListInit+0x20>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e052      	b.n	800b29a <HAL_ETH_DMATxDescListInit+0xc6>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e030      	b.n	800b272 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	015b      	lsls	r3, r3, #5
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	4413      	add	r3, r2
 800b218:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b220:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b228:	fb02 f303 	mul.w	r3, r2, r3
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	4413      	add	r3, r2
 800b230:	461a      	mov	r2, r3
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d105      	bne.n	800b24a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	429a      	cmp	r2, r3
 800b252:	d208      	bcs.n	800b266 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	3301      	adds	r3, #1
 800b258:	015b      	lsls	r3, r3, #5
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4413      	add	r3, r2
 800b25e:	461a      	mov	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	60da      	str	r2, [r3, #12]
 800b264:	e002      	b.n	800b26c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	3301      	adds	r3, #1
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d3ca      	bcc.n	800b210 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b284:	3310      	adds	r3, #16
 800b286:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b087      	sub	sp, #28
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <HAL_ETH_DMARxDescListInit+0x20>
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e056      	b.n	800b374 <HAL_ETH_DMARxDescListInit+0xce>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e034      	b.n	800b34c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	015b      	lsls	r3, r3, #5
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800b2fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b302:	fb02 f303 	mul.w	r3, r2, r3
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	4413      	add	r3, r2
 800b30a:	461a      	mov	r2, r3
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d105      	bne.n	800b324 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	3b01      	subs	r3, #1
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d208      	bcs.n	800b340 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	3301      	adds	r3, #1
 800b332:	015b      	lsls	r3, r3, #5
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	4413      	add	r3, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	60da      	str	r2, [r3, #12]
 800b33e:	e002      	b.n	800b346 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	3301      	adds	r3, #1
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d3c6      	bcc.n	800b2e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b35e:	330c      	adds	r3, #12
 800b360:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2201      	movs	r2, #1
 800b366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	371c      	adds	r7, #28
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	2300      	movs	r3, #0
 800b394:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_ETH_TransmitFrame+0x24>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e0cd      	b.n	800b540 <HAL_ETH_TransmitFrame+0x1c0>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e0b8      	b.n	800b540 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	da09      	bge.n	800b3ec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2212      	movs	r2, #18
 800b3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e0a9      	b.n	800b540 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d915      	bls.n	800b422 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	4a54      	ldr	r2, [pc, #336]	; (800b54c <HAL_ETH_TransmitFrame+0x1cc>)
 800b3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fe:	0a9b      	lsrs	r3, r3, #10
 800b400:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	4b51      	ldr	r3, [pc, #324]	; (800b54c <HAL_ETH_TransmitFrame+0x1cc>)
 800b406:	fba3 1302 	umull	r1, r3, r3, r2
 800b40a:	0a9b      	lsrs	r3, r3, #10
 800b40c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800b410:	fb01 f303 	mul.w	r3, r1, r3
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	3301      	adds	r3, #1
 800b41e:	617b      	str	r3, [r7, #20]
 800b420:	e001      	b.n	800b426 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800b422:	2301      	movs	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d11c      	bne.n	800b466 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b436:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800b43a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b446:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b456:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	461a      	mov	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	62da      	str	r2, [r3, #44]	; 0x2c
 800b464:	e04b      	b.n	800b4fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800b466:	2300      	movs	r3, #0
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	e044      	b.n	800b4f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b47a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d107      	bne.n	800b492 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b490:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b49a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d116      	bne.n	800b4d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b4b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	4a25      	ldr	r2, [pc, #148]	; (800b550 <HAL_ETH_TransmitFrame+0x1d0>)
 800b4ba:	fb02 f203 	mul.w	r2, r2, r3
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b4c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b4d2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b4e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d3b6      	bcc.n	800b46c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b506:	3314      	adds	r3, #20
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00d      	beq.n	800b52e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51a:	3314      	adds	r3, #20
 800b51c:	2204      	movs	r2, #4
 800b51e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b528:	3304      	adds	r3, #4
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	ac02b00b 	.word	0xac02b00b
 800b550:	fffffa0c 	.word	0xfffffa0c

0800b554 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	460b      	mov	r3, r1
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b82      	cmp	r3, #130	; 0x82
 800b574:	d101      	bne.n	800b57a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800b576:	2302      	movs	r3, #2
 800b578:	e050      	b.n	800b61c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2282      	movs	r2, #130	; 0x82
 800b57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f003 031c 	and.w	r3, r3, #28
 800b590:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8a1b      	ldrh	r3, [r3, #16]
 800b596:	02db      	lsls	r3, r3, #11
 800b598:	b29b      	uxth	r3, r3
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b5a0:	897b      	ldrh	r3, [r7, #10]
 800b5a2:	019b      	lsls	r3, r3, #6
 800b5a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f023 0302 	bic.w	r3, r3, #2
 800b5b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f043 0301 	orr.w	r3, r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b5c6:	f7fe fb75 	bl	8009cb4 <HAL_GetTick>
 800b5ca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b5cc:	e015      	b.n	800b5fa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b5ce:	f7fe fb71 	bl	8009cb4 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5dc:	d309      	bcc.n	800b5f2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e014      	b.n	800b61c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e4      	bne.n	800b5ce <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	460b      	mov	r3, r1
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b42      	cmp	r3, #66	; 0x42
 800b644:	d101      	bne.n	800b64a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800b646:	2302      	movs	r3, #2
 800b648:	e04e      	b.n	800b6e8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2242      	movs	r2, #66	; 0x42
 800b64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f003 031c 	and.w	r3, r3, #28
 800b660:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8a1b      	ldrh	r3, [r3, #16]
 800b666:	02db      	lsls	r3, r3, #11
 800b668:	b29b      	uxth	r3, r3
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b670:	897b      	ldrh	r3, [r7, #10]
 800b672:	019b      	lsls	r3, r3, #6
 800b674:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	f043 0302 	orr.w	r3, r3, #2
 800b684:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f043 0301 	orr.w	r3, r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	b29a      	uxth	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b6a0:	f7fe fb08 	bl	8009cb4 <HAL_GetTick>
 800b6a4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b6a6:	e015      	b.n	800b6d4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b6a8:	f7fe fb04 	bl	8009cb4 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b6:	d309      	bcc.n	800b6cc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e00d      	b.n	800b6e8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e4      	bne.n	800b6a8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <HAL_ETH_Start+0x16>
 800b702:	2302      	movs	r3, #2
 800b704:	e01f      	b.n	800b746 <HAL_ETH_Start+0x56>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2202      	movs	r2, #2
 800b712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fb44 	bl	800bda4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fb7b 	bl	800be18 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 fc12 	bl	800bf4c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fbaf 	bl	800be8c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fbdc 	bl	800beec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d101      	bne.n	800b764 <HAL_ETH_Stop+0x16>
 800b760:	2302      	movs	r3, #2
 800b762:	e01f      	b.n	800b7a4 <HAL_ETH_Stop+0x56>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fba1 	bl	800bebc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fbce 	bl	800bf1c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb66 	bl	800be52 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fbe0 	bl	800bf4c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fb26 	bl	800bdde <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_ETH_ConfigMAC+0x1c>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e0e4      	b.n	800b992 <HAL_ETH_ConfigMAC+0x1e6>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 80b1 	beq.w	800b942 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4b6c      	ldr	r3, [pc, #432]	; (800b99c <HAL_ETH_ConfigMAC+0x1f0>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b7f8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800b7fe:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800b804:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800b80a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800b810:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800b816:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800b81c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800b822:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800b828:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800b82e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800b834:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800b83a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b852:	2001      	movs	r0, #1
 800b854:	f7fe fa3a 	bl	8009ccc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b868:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800b86e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800b874:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800b87a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800b880:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800b886:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800b892:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b894:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b89e:	2001      	movs	r0, #1
 800b8a0:	f7fe fa14 	bl	8009ccc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b8b4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b8be:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8dc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800b8e2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800b8e8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800b8ee:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800b8f4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b90c:	2001      	movs	r0, #1
 800b90e:	f7fe f9dd 	bl	8009ccc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800b932:	2001      	movs	r0, #1
 800b934:	f7fe f9ca 	bl	8009ccc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	61da      	str	r2, [r3, #28]
 800b940:	e01e      	b.n	800b980 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b950:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b972:	2001      	movs	r0, #1
 800b974:	f7fe f9aa 	bl	8009ccc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	ff20810f 	.word	0xff20810f

0800b9a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b0b0      	sub	sp, #192	; 0xc0
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d007      	beq.n	800b9c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b9c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ea:	663b      	str	r3, [r7, #96]	; 0x60
 800b9ec:	e001      	b.n	800b9f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800b9f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800ba00:	2300      	movs	r3, #0
 800ba02:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800ba0c:	2340      	movs	r3, #64	; 0x40
 800ba0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800ba40:	2380      	movs	r3, #128	; 0x80
 800ba42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800ba64:	2300      	movs	r3, #0
 800ba66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800ba74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba78:	4bac      	ldr	r3, [pc, #688]	; (800bd2c <ETH_MACDMAConfig+0x38c>)
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800ba80:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800ba82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800ba84:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800ba86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800ba88:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800ba8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800ba8c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800ba92:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800ba94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800ba96:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800ba98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800ba9a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800baa0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800baa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800baa4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800baa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800baa8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800baaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800baac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800baae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800bab0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800bab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800bab4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800bab6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800baba:	4313      	orrs	r3, r2
 800babc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bac8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bad4:	2001      	movs	r0, #1
 800bad6:	f7fe f8f9 	bl	8009ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bae2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bae4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800bae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bae8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800baea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800baec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800baee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800baf2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800baf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800baf8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800bafa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800bafe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800bb00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800bb04:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800bb08:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800bb10:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bb12:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb1e:	2001      	movs	r0, #1
 800bb20:	f7fe f8d4 	bl	8009ccc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb2c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb36:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bb40:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800bb4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb50:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bb54:	4013      	ands	r3, r2
 800bb56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb5e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800bb60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb64:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800bb66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800bb6a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800bb6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800bb70:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800bb72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800bb76:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800bb78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800bb7c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb82:	4313      	orrs	r3, r2
 800bb84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb90:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	f7fe f895 	bl	8009ccc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bbaa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800bbac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800bbb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f7fe f880 	bl	8009ccc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bbd4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800bbda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbde:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800bbe4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbe8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800bbea:	2300      	movs	r3, #0
 800bbec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800bbfa:	2304      	movs	r3, #4
 800bbfc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800bbfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc02:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800bc04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bc08:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800bc0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc0e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800bc10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc14:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800bc16:	2380      	movs	r3, #128	; 0x80
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2a:	3318      	adds	r3, #24
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bc32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc36:	4b3e      	ldr	r3, [pc, #248]	; (800bd30 <ETH_MACDMAConfig+0x390>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc3e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800bc40:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc42:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800bc44:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800bc46:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800bc48:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800bc4a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800bc4c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800bc4e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800bc50:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800bc52:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800bc54:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800bc56:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800bc5a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800bc5e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc72:	3318      	adds	r3, #24
 800bc74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc78:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc82:	3318      	adds	r3, #24
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	f7fe f81e 	bl	8009ccc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc98:	3318      	adds	r3, #24
 800bc9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc9e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bca4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800bca8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bcac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800bcae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800bcb0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800bcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800bcb6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800bcb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800bcba:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bcc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcc8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcd8:	2001      	movs	r0, #1
 800bcda:	f7fd fff7 	bl	8009ccc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bcea:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d10f      	bne.n	800bd14 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	331c      	adds	r3, #28
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bd08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd10:	331c      	adds	r3, #28
 800bd12:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f809 	bl	800bd34 <ETH_MACAddressConfig>
}
 800bd22:	bf00      	nop
 800bd24:	37c0      	adds	r7, #192	; 0xc0
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	ff20810f 	.word	0xff20810f
 800bd30:	f8de3f23 	.word	0xf8de3f23

0800bd34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3305      	adds	r3, #5
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	3204      	adds	r2, #4
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <ETH_MACAddressConfig+0x68>)
 800bd56:	4413      	add	r3, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3303      	adds	r3, #3
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	061a      	lsls	r2, r3, #24
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3302      	adds	r3, #2
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	041b      	lsls	r3, r3, #16
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3301      	adds	r3, #1
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	7812      	ldrb	r2, [r2, #0]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <ETH_MACAddressConfig+0x6c>)
 800bd86:	4413      	add	r3, r2
 800bd88:	461a      	mov	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	40028040 	.word	0x40028040
 800bda0:	40028044 	.word	0x40028044

0800bda4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f042 0208 	orr.w	r2, r2, #8
 800bdbe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800bdc8:	2001      	movs	r0, #1
 800bdca:	f000 f8e9 	bl	800bfa0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	601a      	str	r2, [r3, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0208 	bic.w	r2, r2, #8
 800bdf8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800be02:	2001      	movs	r0, #1
 800be04:	f000 f8cc 	bl	800bfa0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	601a      	str	r2, [r3, #0]
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0204 	orr.w	r2, r2, #4
 800be32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800be3c:	2001      	movs	r0, #1
 800be3e:	f000 f8af 	bl	800bfa0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	601a      	str	r2, [r3, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f022 0204 	bic.w	r2, r2, #4
 800be6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800be76:	2001      	movs	r0, #1
 800be78:	f000 f892 	bl	800bfa0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9c:	3318      	adds	r3, #24
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beac:	3318      	adds	r3, #24
 800beae:	601a      	str	r2, [r3, #0]
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800becc:	3318      	adds	r3, #24
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bedc:	3318      	adds	r3, #24
 800bede:	601a      	str	r2, [r3, #0]
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800befc:	3318      	adds	r3, #24
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f042 0202 	orr.w	r2, r2, #2
 800bf08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0c:	3318      	adds	r3, #24
 800bf0e:	601a      	str	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf2c:	3318      	adds	r3, #24
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0202 	bic.w	r2, r2, #2
 800bf38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf3c:	3318      	adds	r3, #24
 800bf3e:	601a      	str	r2, [r3, #0]
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf60:	3318      	adds	r3, #24
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf70:	3318      	adds	r3, #24
 800bf72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf7c:	3318      	adds	r3, #24
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800bf82:	2001      	movs	r0, #1
 800bf84:	f000 f80c 	bl	800bfa0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf92:	3318      	adds	r3, #24
 800bf94:	601a      	str	r2, [r3, #0]
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <ETH_Delay+0x34>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a0a      	ldr	r2, [pc, #40]	; (800bfd8 <ETH_Delay+0x38>)
 800bfae:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb2:	0a5b      	lsrs	r3, r3, #9
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	fb02 f303 	mul.w	r3, r2, r3
 800bfba:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800bfbc:	bf00      	nop
  } 
  while (Delay --);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	1e5a      	subs	r2, r3, #1
 800bfc2:	60fa      	str	r2, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f9      	bne.n	800bfbc <ETH_Delay+0x1c>
}
 800bfc8:	bf00      	nop
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	20000008 	.word	0x20000008
 800bfd8:	10624dd3 	.word	0x10624dd3

0800bfdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b089      	sub	sp, #36	; 0x24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	61fb      	str	r3, [r7, #28]
 800bff6:	e16b      	b.n	800c2d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bff8:	2201      	movs	r2, #1
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	fa02 f303 	lsl.w	r3, r2, r3
 800c000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	4013      	ands	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	f040 815a 	bne.w	800c2ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d00b      	beq.n	800c036 <HAL_GPIO_Init+0x5a>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	2b02      	cmp	r3, #2
 800c024:	d007      	beq.n	800c036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c02a:	2b11      	cmp	r3, #17
 800c02c:	d003      	beq.n	800c036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	2b12      	cmp	r3, #18
 800c034:	d130      	bne.n	800c098 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	2203      	movs	r2, #3
 800c042:	fa02 f303 	lsl.w	r3, r2, r3
 800c046:	43db      	mvns	r3, r3
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	4013      	ands	r3, r2
 800c04c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	fa02 f303 	lsl.w	r3, r2, r3
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c06c:	2201      	movs	r2, #1
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	fa02 f303 	lsl.w	r3, r2, r3
 800c074:	43db      	mvns	r3, r3
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	4013      	ands	r3, r2
 800c07a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	091b      	lsrs	r3, r3, #4
 800c082:	f003 0201 	and.w	r2, r3, #1
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	fa02 f303 	lsl.w	r3, r2, r3
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	4313      	orrs	r3, r2
 800c090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a8:	43db      	mvns	r3, r3
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	689a      	ldr	r2, [r3, #8]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d003      	beq.n	800c0d8 <HAL_GPIO_Init+0xfc>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2b12      	cmp	r3, #18
 800c0d6:	d123      	bne.n	800c120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	08da      	lsrs	r2, r3, #3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3208      	adds	r2, #8
 800c0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	f003 0307 	and.w	r3, r3, #7
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	220f      	movs	r2, #15
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	43db      	mvns	r3, r3
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	fa02 f303 	lsl.w	r3, r2, r3
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	4313      	orrs	r3, r2
 800c110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	08da      	lsrs	r2, r3, #3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3208      	adds	r2, #8
 800c11a:	69b9      	ldr	r1, [r7, #24]
 800c11c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	2203      	movs	r2, #3
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	43db      	mvns	r3, r3
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	4013      	ands	r3, r2
 800c136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	f003 0203 	and.w	r2, r3, #3
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	fa02 f303 	lsl.w	r3, r2, r3
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80b4 	beq.w	800c2ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	4b5f      	ldr	r3, [pc, #380]	; (800c2e4 <HAL_GPIO_Init+0x308>)
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	4a5e      	ldr	r2, [pc, #376]	; (800c2e4 <HAL_GPIO_Init+0x308>)
 800c16c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c170:	6453      	str	r3, [r2, #68]	; 0x44
 800c172:	4b5c      	ldr	r3, [pc, #368]	; (800c2e4 <HAL_GPIO_Init+0x308>)
 800c174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c17e:	4a5a      	ldr	r2, [pc, #360]	; (800c2e8 <HAL_GPIO_Init+0x30c>)
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	089b      	lsrs	r3, r3, #2
 800c184:	3302      	adds	r3, #2
 800c186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c18a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f003 0303 	and.w	r3, r3, #3
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	220f      	movs	r2, #15
 800c196:	fa02 f303 	lsl.w	r3, r2, r3
 800c19a:	43db      	mvns	r3, r3
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a51      	ldr	r2, [pc, #324]	; (800c2ec <HAL_GPIO_Init+0x310>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d02b      	beq.n	800c202 <HAL_GPIO_Init+0x226>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a50      	ldr	r2, [pc, #320]	; (800c2f0 <HAL_GPIO_Init+0x314>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d025      	beq.n	800c1fe <HAL_GPIO_Init+0x222>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a4f      	ldr	r2, [pc, #316]	; (800c2f4 <HAL_GPIO_Init+0x318>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d01f      	beq.n	800c1fa <HAL_GPIO_Init+0x21e>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a4e      	ldr	r2, [pc, #312]	; (800c2f8 <HAL_GPIO_Init+0x31c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d019      	beq.n	800c1f6 <HAL_GPIO_Init+0x21a>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a4d      	ldr	r2, [pc, #308]	; (800c2fc <HAL_GPIO_Init+0x320>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d013      	beq.n	800c1f2 <HAL_GPIO_Init+0x216>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a4c      	ldr	r2, [pc, #304]	; (800c300 <HAL_GPIO_Init+0x324>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d00d      	beq.n	800c1ee <HAL_GPIO_Init+0x212>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a4b      	ldr	r2, [pc, #300]	; (800c304 <HAL_GPIO_Init+0x328>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d007      	beq.n	800c1ea <HAL_GPIO_Init+0x20e>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a4a      	ldr	r2, [pc, #296]	; (800c308 <HAL_GPIO_Init+0x32c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d101      	bne.n	800c1e6 <HAL_GPIO_Init+0x20a>
 800c1e2:	2307      	movs	r3, #7
 800c1e4:	e00e      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1e6:	2308      	movs	r3, #8
 800c1e8:	e00c      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1ea:	2306      	movs	r3, #6
 800c1ec:	e00a      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1ee:	2305      	movs	r3, #5
 800c1f0:	e008      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1f2:	2304      	movs	r3, #4
 800c1f4:	e006      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e004      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e002      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e000      	b.n	800c204 <HAL_GPIO_Init+0x228>
 800c202:	2300      	movs	r3, #0
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	f002 0203 	and.w	r2, r2, #3
 800c20a:	0092      	lsls	r2, r2, #2
 800c20c:	4093      	lsls	r3, r2
 800c20e:	69ba      	ldr	r2, [r7, #24]
 800c210:	4313      	orrs	r3, r2
 800c212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c214:	4934      	ldr	r1, [pc, #208]	; (800c2e8 <HAL_GPIO_Init+0x30c>)
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	089b      	lsrs	r3, r3, #2
 800c21a:	3302      	adds	r3, #2
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c222:	4b3a      	ldr	r3, [pc, #232]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	43db      	mvns	r3, r3
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	4013      	ands	r3, r2
 800c230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	4313      	orrs	r3, r2
 800c244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c246:	4a31      	ldr	r2, [pc, #196]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c24c:	4b2f      	ldr	r3, [pc, #188]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	43db      	mvns	r3, r3
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	4013      	ands	r3, r2
 800c25a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c270:	4a26      	ldr	r2, [pc, #152]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c276:	4b25      	ldr	r3, [pc, #148]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	43db      	mvns	r3, r3
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	4013      	ands	r3, r2
 800c284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	4313      	orrs	r3, r2
 800c298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c29a:	4a1c      	ldr	r2, [pc, #112]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c2a0:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2c4:	4a11      	ldr	r2, [pc, #68]	; (800c30c <HAL_GPIO_Init+0x330>)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	2b0f      	cmp	r3, #15
 800c2d4:	f67f ae90 	bls.w	800bff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3724      	adds	r7, #36	; 0x24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	40013800 	.word	0x40013800
 800c2ec:	40020000 	.word	0x40020000
 800c2f0:	40020400 	.word	0x40020400
 800c2f4:	40020800 	.word	0x40020800
 800c2f8:	40020c00 	.word	0x40020c00
 800c2fc:	40021000 	.word	0x40021000
 800c300:	40021400 	.word	0x40021400
 800c304:	40021800 	.word	0x40021800
 800c308:	40021c00 	.word	0x40021c00
 800c30c:	40013c00 	.word	0x40013c00

0800c310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691a      	ldr	r2, [r3, #16]
 800c320:	887b      	ldrh	r3, [r7, #2]
 800c322:	4013      	ands	r3, r2
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c328:	2301      	movs	r3, #1
 800c32a:	73fb      	strb	r3, [r7, #15]
 800c32c:	e001      	b.n	800c332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	807b      	strh	r3, [r7, #2]
 800c34c:	4613      	mov	r3, r2
 800c34e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c350:	787b      	ldrb	r3, [r7, #1]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c356:	887a      	ldrh	r2, [r7, #2]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c35c:	e003      	b.n	800c366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c35e:	887b      	ldrh	r3, [r7, #2]
 800c360:	041a      	lsls	r2, r3, #16
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	619a      	str	r2, [r3, #24]
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
	...

0800c374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c37e:	4b08      	ldr	r3, [pc, #32]	; (800c3a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c380:	695a      	ldr	r2, [r3, #20]
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	4013      	ands	r3, r2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d006      	beq.n	800c398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c38a:	4a05      	ldr	r2, [pc, #20]	; (800c3a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c390:	88fb      	ldrh	r3, [r7, #6]
 800c392:	4618      	mov	r0, r3
 800c394:	f7f7 f942 	bl	800361c <HAL_GPIO_EXTI_Callback>
  }
}
 800c398:	bf00      	nop
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40013c00 	.word	0x40013c00

0800c3a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e25b      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d075      	beq.n	800c4ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3c2:	4ba3      	ldr	r3, [pc, #652]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	f003 030c 	and.w	r3, r3, #12
 800c3ca:	2b04      	cmp	r3, #4
 800c3cc:	d00c      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3ce:	4ba0      	ldr	r3, [pc, #640]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3d6:	2b08      	cmp	r3, #8
 800c3d8:	d112      	bne.n	800c400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3da:	4b9d      	ldr	r3, [pc, #628]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e6:	d10b      	bne.n	800c400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3e8:	4b99      	ldr	r3, [pc, #612]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05b      	beq.n	800c4ac <HAL_RCC_OscConfig+0x108>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d157      	bne.n	800c4ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e236      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c408:	d106      	bne.n	800c418 <HAL_RCC_OscConfig+0x74>
 800c40a:	4b91      	ldr	r3, [pc, #580]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a90      	ldr	r2, [pc, #576]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	e01d      	b.n	800c454 <HAL_RCC_OscConfig+0xb0>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c420:	d10c      	bne.n	800c43c <HAL_RCC_OscConfig+0x98>
 800c422:	4b8b      	ldr	r3, [pc, #556]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a8a      	ldr	r2, [pc, #552]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	4b88      	ldr	r3, [pc, #544]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a87      	ldr	r2, [pc, #540]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	e00b      	b.n	800c454 <HAL_RCC_OscConfig+0xb0>
 800c43c:	4b84      	ldr	r3, [pc, #528]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a83      	ldr	r2, [pc, #524]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	4b81      	ldr	r3, [pc, #516]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a80      	ldr	r2, [pc, #512]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c44e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d013      	beq.n	800c484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c45c:	f7fd fc2a 	bl	8009cb4 <HAL_GetTick>
 800c460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c462:	e008      	b.n	800c476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c464:	f7fd fc26 	bl	8009cb4 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	2b64      	cmp	r3, #100	; 0x64
 800c470:	d901      	bls.n	800c476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e1fb      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c476:	4b76      	ldr	r3, [pc, #472]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0f0      	beq.n	800c464 <HAL_RCC_OscConfig+0xc0>
 800c482:	e014      	b.n	800c4ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c484:	f7fd fc16 	bl	8009cb4 <HAL_GetTick>
 800c488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c48a:	e008      	b.n	800c49e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c48c:	f7fd fc12 	bl	8009cb4 <HAL_GetTick>
 800c490:	4602      	mov	r2, r0
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	2b64      	cmp	r3, #100	; 0x64
 800c498:	d901      	bls.n	800c49e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e1e7      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c49e:	4b6c      	ldr	r3, [pc, #432]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1f0      	bne.n	800c48c <HAL_RCC_OscConfig+0xe8>
 800c4aa:	e000      	b.n	800c4ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0302 	and.w	r3, r3, #2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d063      	beq.n	800c582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4ba:	4b65      	ldr	r3, [pc, #404]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	f003 030c 	and.w	r3, r3, #12
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00b      	beq.n	800c4de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4c6:	4b62      	ldr	r3, [pc, #392]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	d11c      	bne.n	800c50c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4d2:	4b5f      	ldr	r3, [pc, #380]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d116      	bne.n	800c50c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4de:	4b5c      	ldr	r3, [pc, #368]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x152>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d001      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e1bb      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4f6:	4b56      	ldr	r3, [pc, #344]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4952      	ldr	r1, [pc, #328]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c506:	4313      	orrs	r3, r2
 800c508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c50a:	e03a      	b.n	800c582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d020      	beq.n	800c556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c514:	4b4f      	ldr	r3, [pc, #316]	; (800c654 <HAL_RCC_OscConfig+0x2b0>)
 800c516:	2201      	movs	r2, #1
 800c518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c51a:	f7fd fbcb 	bl	8009cb4 <HAL_GetTick>
 800c51e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c520:	e008      	b.n	800c534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c522:	f7fd fbc7 	bl	8009cb4 <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d901      	bls.n	800c534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e19c      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c534:	4b46      	ldr	r3, [pc, #280]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0f0      	beq.n	800c522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c540:	4b43      	ldr	r3, [pc, #268]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4940      	ldr	r1, [pc, #256]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c550:	4313      	orrs	r3, r2
 800c552:	600b      	str	r3, [r1, #0]
 800c554:	e015      	b.n	800c582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c556:	4b3f      	ldr	r3, [pc, #252]	; (800c654 <HAL_RCC_OscConfig+0x2b0>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c55c:	f7fd fbaa 	bl	8009cb4 <HAL_GetTick>
 800c560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c562:	e008      	b.n	800c576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c564:	f7fd fba6 	bl	8009cb4 <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d901      	bls.n	800c576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e17b      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c576:	4b36      	ldr	r3, [pc, #216]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1f0      	bne.n	800c564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d030      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d016      	beq.n	800c5c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c596:	4b30      	ldr	r3, [pc, #192]	; (800c658 <HAL_RCC_OscConfig+0x2b4>)
 800c598:	2201      	movs	r2, #1
 800c59a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c59c:	f7fd fb8a 	bl	8009cb4 <HAL_GetTick>
 800c5a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5a4:	f7fd fb86 	bl	8009cb4 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e15b      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5b6:	4b26      	ldr	r3, [pc, #152]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f0      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x200>
 800c5c2:	e015      	b.n	800c5f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5c4:	4b24      	ldr	r3, [pc, #144]	; (800c658 <HAL_RCC_OscConfig+0x2b4>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5ca:	f7fd fb73 	bl	8009cb4 <HAL_GetTick>
 800c5ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5d0:	e008      	b.n	800c5e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5d2:	f7fd fb6f 	bl	8009cb4 <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d901      	bls.n	800c5e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e144      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5e4:	4b1a      	ldr	r3, [pc, #104]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e8:	f003 0302 	and.w	r3, r3, #2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1f0      	bne.n	800c5d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80a0 	beq.w	800c73e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5fe:	2300      	movs	r3, #0
 800c600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10f      	bne.n	800c62e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c60e:	2300      	movs	r3, #0
 800c610:	60bb      	str	r3, [r7, #8]
 800c612:	4b0f      	ldr	r3, [pc, #60]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	4a0e      	ldr	r2, [pc, #56]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c61c:	6413      	str	r3, [r2, #64]	; 0x40
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <HAL_RCC_OscConfig+0x2ac>)
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c626:	60bb      	str	r3, [r7, #8]
 800c628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c62a:	2301      	movs	r3, #1
 800c62c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c62e:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <HAL_RCC_OscConfig+0x2b8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c636:	2b00      	cmp	r3, #0
 800c638:	d121      	bne.n	800c67e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c63a:	4b08      	ldr	r3, [pc, #32]	; (800c65c <HAL_RCC_OscConfig+0x2b8>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a07      	ldr	r2, [pc, #28]	; (800c65c <HAL_RCC_OscConfig+0x2b8>)
 800c640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c646:	f7fd fb35 	bl	8009cb4 <HAL_GetTick>
 800c64a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c64c:	e011      	b.n	800c672 <HAL_RCC_OscConfig+0x2ce>
 800c64e:	bf00      	nop
 800c650:	40023800 	.word	0x40023800
 800c654:	42470000 	.word	0x42470000
 800c658:	42470e80 	.word	0x42470e80
 800c65c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c660:	f7fd fb28 	bl	8009cb4 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e0fd      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c672:	4b81      	ldr	r3, [pc, #516]	; (800c878 <HAL_RCC_OscConfig+0x4d4>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0f0      	beq.n	800c660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d106      	bne.n	800c694 <HAL_RCC_OscConfig+0x2f0>
 800c686:	4b7d      	ldr	r3, [pc, #500]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68a:	4a7c      	ldr	r2, [pc, #496]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c68c:	f043 0301 	orr.w	r3, r3, #1
 800c690:	6713      	str	r3, [r2, #112]	; 0x70
 800c692:	e01c      	b.n	800c6ce <HAL_RCC_OscConfig+0x32a>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	2b05      	cmp	r3, #5
 800c69a:	d10c      	bne.n	800c6b6 <HAL_RCC_OscConfig+0x312>
 800c69c:	4b77      	ldr	r3, [pc, #476]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a0:	4a76      	ldr	r2, [pc, #472]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6a2:	f043 0304 	orr.w	r3, r3, #4
 800c6a6:	6713      	str	r3, [r2, #112]	; 0x70
 800c6a8:	4b74      	ldr	r3, [pc, #464]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ac:	4a73      	ldr	r2, [pc, #460]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c6b4:	e00b      	b.n	800c6ce <HAL_RCC_OscConfig+0x32a>
 800c6b6:	4b71      	ldr	r3, [pc, #452]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ba:	4a70      	ldr	r2, [pc, #448]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6bc:	f023 0301 	bic.w	r3, r3, #1
 800c6c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c6c2:	4b6e      	ldr	r3, [pc, #440]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c6:	4a6d      	ldr	r2, [pc, #436]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6c8:	f023 0304 	bic.w	r3, r3, #4
 800c6cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d015      	beq.n	800c702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6d6:	f7fd faed 	bl	8009cb4 <HAL_GetTick>
 800c6da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6dc:	e00a      	b.n	800c6f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6de:	f7fd fae9 	bl	8009cb4 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e0bc      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6f4:	4b61      	ldr	r3, [pc, #388]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0ee      	beq.n	800c6de <HAL_RCC_OscConfig+0x33a>
 800c700:	e014      	b.n	800c72c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c702:	f7fd fad7 	bl	8009cb4 <HAL_GetTick>
 800c706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c708:	e00a      	b.n	800c720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c70a:	f7fd fad3 	bl	8009cb4 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	f241 3288 	movw	r2, #5000	; 0x1388
 800c718:	4293      	cmp	r3, r2
 800c71a:	d901      	bls.n	800c720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e0a6      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c720:	4b56      	ldr	r3, [pc, #344]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c724:	f003 0302 	and.w	r3, r3, #2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1ee      	bne.n	800c70a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d105      	bne.n	800c73e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c732:	4b52      	ldr	r3, [pc, #328]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	4a51      	ldr	r2, [pc, #324]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c73c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8092 	beq.w	800c86c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c748:	4b4c      	ldr	r3, [pc, #304]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f003 030c 	and.w	r3, r3, #12
 800c750:	2b08      	cmp	r3, #8
 800c752:	d05c      	beq.n	800c80e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d141      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c75c:	4b48      	ldr	r3, [pc, #288]	; (800c880 <HAL_RCC_OscConfig+0x4dc>)
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c762:	f7fd faa7 	bl	8009cb4 <HAL_GetTick>
 800c766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c768:	e008      	b.n	800c77c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c76a:	f7fd faa3 	bl	8009cb4 <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e078      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c77c:	4b3f      	ldr	r3, [pc, #252]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f0      	bne.n	800c76a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	69da      	ldr	r2, [r3, #28]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	431a      	orrs	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c796:	019b      	lsls	r3, r3, #6
 800c798:	431a      	orrs	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79e:	085b      	lsrs	r3, r3, #1
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	041b      	lsls	r3, r3, #16
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7aa:	061b      	lsls	r3, r3, #24
 800c7ac:	4933      	ldr	r1, [pc, #204]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7b2:	4b33      	ldr	r3, [pc, #204]	; (800c880 <HAL_RCC_OscConfig+0x4dc>)
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7b8:	f7fd fa7c 	bl	8009cb4 <HAL_GetTick>
 800c7bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7be:	e008      	b.n	800c7d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7c0:	f7fd fa78 	bl	8009cb4 <HAL_GetTick>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d901      	bls.n	800c7d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e04d      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7d2:	4b2a      	ldr	r3, [pc, #168]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0f0      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x41c>
 800c7de:	e045      	b.n	800c86c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7e0:	4b27      	ldr	r3, [pc, #156]	; (800c880 <HAL_RCC_OscConfig+0x4dc>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7e6:	f7fd fa65 	bl	8009cb4 <HAL_GetTick>
 800c7ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7ec:	e008      	b.n	800c800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7ee:	f7fd fa61 	bl	8009cb4 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d901      	bls.n	800c800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e036      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c800:	4b1e      	ldr	r3, [pc, #120]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1f0      	bne.n	800c7ee <HAL_RCC_OscConfig+0x44a>
 800c80c:	e02e      	b.n	800c86c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d101      	bne.n	800c81a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e029      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c81a:	4b18      	ldr	r3, [pc, #96]	; (800c87c <HAL_RCC_OscConfig+0x4d8>)
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d11c      	bne.n	800c868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c838:	429a      	cmp	r2, r3
 800c83a:	d115      	bne.n	800c868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c842:	4013      	ands	r3, r2
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c848:	4293      	cmp	r3, r2
 800c84a:	d10d      	bne.n	800c868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c856:	429a      	cmp	r2, r3
 800c858:	d106      	bne.n	800c868 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	40007000 	.word	0x40007000
 800c87c:	40023800 	.word	0x40023800
 800c880:	42470060 	.word	0x42470060

0800c884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e0cc      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c898:	4b68      	ldr	r3, [pc, #416]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 030f 	and.w	r3, r3, #15
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d90c      	bls.n	800c8c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8a6:	4b65      	ldr	r3, [pc, #404]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8ae:	4b63      	ldr	r3, [pc, #396]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d001      	beq.n	800c8c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0b8      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d020      	beq.n	800c90e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8d8:	4b59      	ldr	r3, [pc, #356]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	4a58      	ldr	r2, [pc, #352]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c8de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c8e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0308 	and.w	r3, r3, #8
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c8f0:	4b53      	ldr	r3, [pc, #332]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	4a52      	ldr	r2, [pc, #328]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c8f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c8fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8fc:	4b50      	ldr	r3, [pc, #320]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	494d      	ldr	r1, [pc, #308]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 0301 	and.w	r3, r3, #1
 800c916:	2b00      	cmp	r3, #0
 800c918:	d044      	beq.n	800c9a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d107      	bne.n	800c932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c922:	4b47      	ldr	r3, [pc, #284]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d119      	bne.n	800c962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e07f      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d003      	beq.n	800c942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d107      	bne.n	800c952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c942:	4b3f      	ldr	r3, [pc, #252]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d109      	bne.n	800c962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e06f      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c952:	4b3b      	ldr	r3, [pc, #236]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 0302 	and.w	r3, r3, #2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e067      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c962:	4b37      	ldr	r3, [pc, #220]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	f023 0203 	bic.w	r2, r3, #3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	4934      	ldr	r1, [pc, #208]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c970:	4313      	orrs	r3, r2
 800c972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c974:	f7fd f99e 	bl	8009cb4 <HAL_GetTick>
 800c978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c97a:	e00a      	b.n	800c992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c97c:	f7fd f99a 	bl	8009cb4 <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	f241 3288 	movw	r2, #5000	; 0x1388
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d901      	bls.n	800c992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e04f      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c992:	4b2b      	ldr	r3, [pc, #172]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f003 020c 	and.w	r2, r3, #12
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d1eb      	bne.n	800c97c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c9a4:	4b25      	ldr	r3, [pc, #148]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 030f 	and.w	r3, r3, #15
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d20c      	bcs.n	800c9cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9b2:	4b22      	ldr	r3, [pc, #136]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	b2d2      	uxtb	r2, r2
 800c9b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9ba:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <HAL_RCC_ClockConfig+0x1b8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d001      	beq.n	800c9cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e032      	b.n	800ca32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0304 	and.w	r3, r3, #4
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d008      	beq.n	800c9ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9d8:	4b19      	ldr	r3, [pc, #100]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	4916      	ldr	r1, [pc, #88]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 0308 	and.w	r3, r3, #8
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c9f6:	4b12      	ldr	r3, [pc, #72]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	490e      	ldr	r1, [pc, #56]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800ca06:	4313      	orrs	r3, r2
 800ca08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ca0a:	f000 f821 	bl	800ca50 <HAL_RCC_GetSysClockFreq>
 800ca0e:	4601      	mov	r1, r0
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <HAL_RCC_ClockConfig+0x1bc>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	091b      	lsrs	r3, r3, #4
 800ca16:	f003 030f 	and.w	r3, r3, #15
 800ca1a:	4a0a      	ldr	r2, [pc, #40]	; (800ca44 <HAL_RCC_ClockConfig+0x1c0>)
 800ca1c:	5cd3      	ldrb	r3, [r2, r3]
 800ca1e:	fa21 f303 	lsr.w	r3, r1, r3
 800ca22:	4a09      	ldr	r2, [pc, #36]	; (800ca48 <HAL_RCC_ClockConfig+0x1c4>)
 800ca24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ca26:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <HAL_RCC_ClockConfig+0x1c8>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f7 f83a 	bl	8003aa4 <HAL_InitTick>

  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	40023c00 	.word	0x40023c00
 800ca40:	40023800 	.word	0x40023800
 800ca44:	08024330 	.word	0x08024330
 800ca48:	20000008 	.word	0x20000008
 800ca4c:	20000070 	.word	0x20000070

0800ca50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	607b      	str	r3, [r7, #4]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca66:	4b63      	ldr	r3, [pc, #396]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 030c 	and.w	r3, r3, #12
 800ca6e:	2b04      	cmp	r3, #4
 800ca70:	d007      	beq.n	800ca82 <HAL_RCC_GetSysClockFreq+0x32>
 800ca72:	2b08      	cmp	r3, #8
 800ca74:	d008      	beq.n	800ca88 <HAL_RCC_GetSysClockFreq+0x38>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f040 80b4 	bne.w	800cbe4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ca7c:	4b5e      	ldr	r3, [pc, #376]	; (800cbf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ca7e:	60bb      	str	r3, [r7, #8]
       break;
 800ca80:	e0b3      	b.n	800cbea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ca82:	4b5e      	ldr	r3, [pc, #376]	; (800cbfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ca84:	60bb      	str	r3, [r7, #8]
      break;
 800ca86:	e0b0      	b.n	800cbea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca88:	4b5a      	ldr	r3, [pc, #360]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ca92:	4b58      	ldr	r3, [pc, #352]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d04a      	beq.n	800cb34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca9e:	4b55      	ldr	r3, [pc, #340]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	099b      	lsrs	r3, r3, #6
 800caa4:	f04f 0400 	mov.w	r4, #0
 800caa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800caac:	f04f 0200 	mov.w	r2, #0
 800cab0:	ea03 0501 	and.w	r5, r3, r1
 800cab4:	ea04 0602 	and.w	r6, r4, r2
 800cab8:	4629      	mov	r1, r5
 800caba:	4632      	mov	r2, r6
 800cabc:	f04f 0300 	mov.w	r3, #0
 800cac0:	f04f 0400 	mov.w	r4, #0
 800cac4:	0154      	lsls	r4, r2, #5
 800cac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800caca:	014b      	lsls	r3, r1, #5
 800cacc:	4619      	mov	r1, r3
 800cace:	4622      	mov	r2, r4
 800cad0:	1b49      	subs	r1, r1, r5
 800cad2:	eb62 0206 	sbc.w	r2, r2, r6
 800cad6:	f04f 0300 	mov.w	r3, #0
 800cada:	f04f 0400 	mov.w	r4, #0
 800cade:	0194      	lsls	r4, r2, #6
 800cae0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cae4:	018b      	lsls	r3, r1, #6
 800cae6:	1a5b      	subs	r3, r3, r1
 800cae8:	eb64 0402 	sbc.w	r4, r4, r2
 800caec:	f04f 0100 	mov.w	r1, #0
 800caf0:	f04f 0200 	mov.w	r2, #0
 800caf4:	00e2      	lsls	r2, r4, #3
 800caf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cafa:	00d9      	lsls	r1, r3, #3
 800cafc:	460b      	mov	r3, r1
 800cafe:	4614      	mov	r4, r2
 800cb00:	195b      	adds	r3, r3, r5
 800cb02:	eb44 0406 	adc.w	r4, r4, r6
 800cb06:	f04f 0100 	mov.w	r1, #0
 800cb0a:	f04f 0200 	mov.w	r2, #0
 800cb0e:	0262      	lsls	r2, r4, #9
 800cb10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800cb14:	0259      	lsls	r1, r3, #9
 800cb16:	460b      	mov	r3, r1
 800cb18:	4614      	mov	r4, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f04f 0400 	mov.w	r4, #0
 800cb24:	461a      	mov	r2, r3
 800cb26:	4623      	mov	r3, r4
 800cb28:	f7f4 f8be 	bl	8000ca8 <__aeabi_uldivmod>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	460c      	mov	r4, r1
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	e049      	b.n	800cbc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb34:	4b2f      	ldr	r3, [pc, #188]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	099b      	lsrs	r3, r3, #6
 800cb3a:	f04f 0400 	mov.w	r4, #0
 800cb3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb42:	f04f 0200 	mov.w	r2, #0
 800cb46:	ea03 0501 	and.w	r5, r3, r1
 800cb4a:	ea04 0602 	and.w	r6, r4, r2
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4632      	mov	r2, r6
 800cb52:	f04f 0300 	mov.w	r3, #0
 800cb56:	f04f 0400 	mov.w	r4, #0
 800cb5a:	0154      	lsls	r4, r2, #5
 800cb5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cb60:	014b      	lsls	r3, r1, #5
 800cb62:	4619      	mov	r1, r3
 800cb64:	4622      	mov	r2, r4
 800cb66:	1b49      	subs	r1, r1, r5
 800cb68:	eb62 0206 	sbc.w	r2, r2, r6
 800cb6c:	f04f 0300 	mov.w	r3, #0
 800cb70:	f04f 0400 	mov.w	r4, #0
 800cb74:	0194      	lsls	r4, r2, #6
 800cb76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cb7a:	018b      	lsls	r3, r1, #6
 800cb7c:	1a5b      	subs	r3, r3, r1
 800cb7e:	eb64 0402 	sbc.w	r4, r4, r2
 800cb82:	f04f 0100 	mov.w	r1, #0
 800cb86:	f04f 0200 	mov.w	r2, #0
 800cb8a:	00e2      	lsls	r2, r4, #3
 800cb8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cb90:	00d9      	lsls	r1, r3, #3
 800cb92:	460b      	mov	r3, r1
 800cb94:	4614      	mov	r4, r2
 800cb96:	195b      	adds	r3, r3, r5
 800cb98:	eb44 0406 	adc.w	r4, r4, r6
 800cb9c:	f04f 0100 	mov.w	r1, #0
 800cba0:	f04f 0200 	mov.w	r2, #0
 800cba4:	02a2      	lsls	r2, r4, #10
 800cba6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cbaa:	0299      	lsls	r1, r3, #10
 800cbac:	460b      	mov	r3, r1
 800cbae:	4614      	mov	r4, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f04f 0400 	mov.w	r4, #0
 800cbba:	461a      	mov	r2, r3
 800cbbc:	4623      	mov	r3, r4
 800cbbe:	f7f4 f873 	bl	8000ca8 <__aeabi_uldivmod>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	0c1b      	lsrs	r3, r3, #16
 800cbce:	f003 0303 	and.w	r3, r3, #3
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe0:	60bb      	str	r3, [r7, #8]
      break;
 800cbe2:	e002      	b.n	800cbea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cbe6:	60bb      	str	r3, [r7, #8]
      break;
 800cbe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cbea:	68bb      	ldr	r3, [r7, #8]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf4:	40023800 	.word	0x40023800
 800cbf8:	00f42400 	.word	0x00f42400
 800cbfc:	007a1200 	.word	0x007a1200

0800cc00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc04:	4b03      	ldr	r3, [pc, #12]	; (800cc14 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc06:	681b      	ldr	r3, [r3, #0]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	20000008 	.word	0x20000008

0800cc18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cc1c:	f7ff fff0 	bl	800cc00 <HAL_RCC_GetHCLKFreq>
 800cc20:	4601      	mov	r1, r0
 800cc22:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	0a9b      	lsrs	r3, r3, #10
 800cc28:	f003 0307 	and.w	r3, r3, #7
 800cc2c:	4a03      	ldr	r2, [pc, #12]	; (800cc3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc2e:	5cd3      	ldrb	r3, [r2, r3]
 800cc30:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	40023800 	.word	0x40023800
 800cc3c:	08024340 	.word	0x08024340

0800cc40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cc44:	f7ff ffdc 	bl	800cc00 <HAL_RCC_GetHCLKFreq>
 800cc48:	4601      	mov	r1, r0
 800cc4a:	4b05      	ldr	r3, [pc, #20]	; (800cc60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	0b5b      	lsrs	r3, r3, #13
 800cc50:	f003 0307 	and.w	r3, r3, #7
 800cc54:	4a03      	ldr	r2, [pc, #12]	; (800cc64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc56:	5cd3      	ldrb	r3, [r2, r3]
 800cc58:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	40023800 	.word	0x40023800
 800cc64:	08024340 	.word	0x08024340

0800cc68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	220f      	movs	r2, #15
 800cc76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cc78:	4b12      	ldr	r3, [pc, #72]	; (800ccc4 <HAL_RCC_GetClockConfig+0x5c>)
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f003 0203 	and.w	r2, r3, #3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cc84:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <HAL_RCC_GetClockConfig+0x5c>)
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cc90:	4b0c      	ldr	r3, [pc, #48]	; (800ccc4 <HAL_RCC_GetClockConfig+0x5c>)
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cc9c:	4b09      	ldr	r3, [pc, #36]	; (800ccc4 <HAL_RCC_GetClockConfig+0x5c>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	08db      	lsrs	r3, r3, #3
 800cca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <HAL_RCC_GetClockConfig+0x60>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 020f 	and.w	r2, r3, #15
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	601a      	str	r2, [r3, #0]
}
 800ccb6:	bf00      	nop
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	40023800 	.word	0x40023800
 800ccc8:	40023c00 	.word	0x40023c00

0800cccc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d105      	bne.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d035      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ccf4:	4b62      	ldr	r3, [pc, #392]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ccfa:	f7fc ffdb 	bl	8009cb4 <HAL_GetTick>
 800ccfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cd00:	e008      	b.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cd02:	f7fc ffd7 	bl	8009cb4 <HAL_GetTick>
 800cd06:	4602      	mov	r2, r0
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d901      	bls.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e0b0      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cd14:	4b5b      	ldr	r3, [pc, #364]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f0      	bne.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	019a      	lsls	r2, r3, #6
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	071b      	lsls	r3, r3, #28
 800cd2c:	4955      	ldr	r1, [pc, #340]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cd34:	4b52      	ldr	r3, [pc, #328]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cd36:	2201      	movs	r2, #1
 800cd38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cd3a:	f7fc ffbb 	bl	8009cb4 <HAL_GetTick>
 800cd3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd40:	e008      	b.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cd42:	f7fc ffb7 	bl	8009cb4 <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d901      	bls.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e090      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd54:	4b4b      	ldr	r3, [pc, #300]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0f0      	beq.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 0302 	and.w	r3, r3, #2
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8083 	beq.w	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	4b44      	ldr	r3, [pc, #272]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd76:	4a43      	ldr	r2, [pc, #268]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd7c:	6413      	str	r3, [r2, #64]	; 0x40
 800cd7e:	4b41      	ldr	r3, [pc, #260]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cd8a:	4b3f      	ldr	r3, [pc, #252]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a3e      	ldr	r2, [pc, #248]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cd90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd96:	f7fc ff8d 	bl	8009cb4 <HAL_GetTick>
 800cd9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cd9c:	e008      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cd9e:	f7fc ff89 	bl	8009cb4 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e062      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cdb0:	4b35      	ldr	r3, [pc, #212]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0f0      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cdbc:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cdbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d02f      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d028      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cdda:	4b2a      	ldr	r3, [pc, #168]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cde2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cde4:	4b29      	ldr	r3, [pc, #164]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cde6:	2201      	movs	r2, #1
 800cde8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cdea:	4b28      	ldr	r3, [pc, #160]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cdf0:	4a24      	ldr	r2, [pc, #144]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cdf6:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d114      	bne.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ce02:	f7fc ff57 	bl	8009cb4 <HAL_GetTick>
 800ce06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce08:	e00a      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce0a:	f7fc ff53 	bl	8009cb4 <HAL_GetTick>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d901      	bls.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e02a      	b.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce20:	4b18      	ldr	r3, [pc, #96]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce24:	f003 0302 	and.w	r3, r3, #2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d0ee      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce38:	d10d      	bne.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce4e:	490d      	ldr	r1, [pc, #52]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce50:	4313      	orrs	r3, r2
 800ce52:	608b      	str	r3, [r1, #8]
 800ce54:	e005      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	4a0a      	ldr	r2, [pc, #40]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ce60:	6093      	str	r3, [r2, #8]
 800ce62:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce6e:	4905      	ldr	r1, [pc, #20]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	42470068 	.word	0x42470068
 800ce84:	40023800 	.word	0x40023800
 800ce88:	40007000 	.word	0x40007000
 800ce8c:	42470e40 	.word	0x42470e40

0800ce90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e083      	b.n	800cfaa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7f5b      	ldrb	r3, [r3, #29]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d105      	bne.n	800ceb8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7f6 fcac 	bl	8003810 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2202      	movs	r2, #2
 800cebc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	22ca      	movs	r2, #202	; 0xca
 800cec4:	625a      	str	r2, [r3, #36]	; 0x24
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2253      	movs	r2, #83	; 0x53
 800cecc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f9fb 	bl	800d2ca <RTC_EnterInitMode>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d008      	beq.n	800ceec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	22ff      	movs	r2, #255	; 0xff
 800cee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2204      	movs	r2, #4
 800cee6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e05e      	b.n	800cfaa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	6812      	ldr	r2, [r2, #0]
 800cef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cefe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6899      	ldr	r1, [r3, #8]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	431a      	orrs	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	68d2      	ldr	r2, [r2, #12]
 800cf26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6919      	ldr	r1, [r3, #16]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	041a      	lsls	r2, r3, #16
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	430a      	orrs	r2, r1
 800cf3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0320 	and.w	r3, r3, #32
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10e      	bne.n	800cf78 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f98d 	bl	800d27a <HAL_RTC_WaitForSynchro>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d008      	beq.n	800cf78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	22ff      	movs	r2, #255	; 0xff
 800cf6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2204      	movs	r2, #4
 800cf72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e018      	b.n	800cfaa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cf86:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	430a      	orrs	r2, r1
 800cf98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	22ff      	movs	r2, #255	; 0xff
 800cfa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cfa8:	2300      	movs	r3, #0
  }
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cfb2:	b590      	push	{r4, r7, lr}
 800cfb4:	b087      	sub	sp, #28
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	7f1b      	ldrb	r3, [r3, #28]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d101      	bne.n	800cfce <HAL_RTC_SetTime+0x1c>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	e0aa      	b.n	800d124 <HAL_RTC_SetTime+0x172>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d126      	bne.n	800d02e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d102      	bne.n	800cff4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2200      	movs	r2, #0
 800cff2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f992 	bl	800d322 <RTC_ByteToBcd2>
 800cffe:	4603      	mov	r3, r0
 800d000:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 f98b 	bl	800d322 <RTC_ByteToBcd2>
 800d00c:	4603      	mov	r3, r0
 800d00e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d010:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	789b      	ldrb	r3, [r3, #2]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f983 	bl	800d322 <RTC_ByteToBcd2>
 800d01c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d01e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	78db      	ldrb	r3, [r3, #3]
 800d026:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d028:	4313      	orrs	r3, r2
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e018      	b.n	800d060 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2200      	movs	r2, #0
 800d040:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	785b      	ldrb	r3, [r3, #1]
 800d04c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d04e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d054:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	78db      	ldrb	r3, [r3, #3]
 800d05a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d05c:	4313      	orrs	r3, r2
 800d05e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	22ca      	movs	r2, #202	; 0xca
 800d066:	625a      	str	r2, [r3, #36]	; 0x24
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2253      	movs	r2, #83	; 0x53
 800d06e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f000 f92a 	bl	800d2ca <RTC_EnterInitMode>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00b      	beq.n	800d094 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	22ff      	movs	r2, #255	; 0xff
 800d082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2204      	movs	r2, #4
 800d088:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e047      	b.n	800d124 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d09e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d0a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d0b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6899      	ldr	r1, [r3, #8]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	68da      	ldr	r2, [r3, #12]
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f003 0320 	and.w	r3, r3, #32
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d111      	bne.n	800d10e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f000 f8c5 	bl	800d27a <HAL_RTC_WaitForSynchro>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	22ff      	movs	r2, #255	; 0xff
 800d0fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2204      	movs	r2, #4
 800d102:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e00a      	b.n	800d124 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	22ff      	movs	r2, #255	; 0xff
 800d114:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d122:	2300      	movs	r3, #0
  }
}
 800d124:	4618      	mov	r0, r3
 800d126:	371c      	adds	r7, #28
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd90      	pop	{r4, r7, pc}

0800d12c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d12c:	b590      	push	{r4, r7, lr}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d138:	2300      	movs	r3, #0
 800d13a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	7f1b      	ldrb	r3, [r3, #28]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <HAL_RTC_SetDate+0x1c>
 800d144:	2302      	movs	r3, #2
 800d146:	e094      	b.n	800d272 <HAL_RTC_SetDate+0x146>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2201      	movs	r2, #1
 800d14c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2202      	movs	r2, #2
 800d152:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10e      	bne.n	800d178 <HAL_RTC_SetDate+0x4c>
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	f003 0310 	and.w	r3, r3, #16
 800d162:	2b00      	cmp	r3, #0
 800d164:	d008      	beq.n	800d178 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	785b      	ldrb	r3, [r3, #1]
 800d16a:	f023 0310 	bic.w	r3, r3, #16
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	330a      	adds	r3, #10
 800d172:	b2da      	uxtb	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d11c      	bne.n	800d1b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	78db      	ldrb	r3, [r3, #3]
 800d182:	4618      	mov	r0, r3
 800d184:	f000 f8cd 	bl	800d322 <RTC_ByteToBcd2>
 800d188:	4603      	mov	r3, r0
 800d18a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	785b      	ldrb	r3, [r3, #1]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 f8c6 	bl	800d322 <RTC_ByteToBcd2>
 800d196:	4603      	mov	r3, r0
 800d198:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d19a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	789b      	ldrb	r3, [r3, #2]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f8be 	bl	800d322 <RTC_ByteToBcd2>
 800d1a6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d1a8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e00e      	b.n	800d1d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	78db      	ldrb	r3, [r3, #3]
 800d1bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	785b      	ldrb	r3, [r3, #1]
 800d1c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d1ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	22ca      	movs	r2, #202	; 0xca
 800d1dc:	625a      	str	r2, [r3, #36]	; 0x24
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2253      	movs	r2, #83	; 0x53
 800d1e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 f86f 	bl	800d2ca <RTC_EnterInitMode>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	22ff      	movs	r2, #255	; 0xff
 800d1f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2204      	movs	r2, #4
 800d1fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e033      	b.n	800d272 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d214:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d218:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68da      	ldr	r2, [r3, #12]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d228:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b00      	cmp	r3, #0
 800d236:	d111      	bne.n	800d25c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 f81e 	bl	800d27a <HAL_RTC_WaitForSynchro>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00b      	beq.n	800d25c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	22ff      	movs	r2, #255	; 0xff
 800d24a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2204      	movs	r2, #4
 800d250:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e00a      	b.n	800d272 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	22ff      	movs	r2, #255	; 0xff
 800d262:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2201      	movs	r2, #1
 800d268:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d270:	2300      	movs	r3, #0
  }
}
 800d272:	4618      	mov	r0, r3
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	bd90      	pop	{r4, r7, pc}

0800d27a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d282:	2300      	movs	r3, #0
 800d284:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d294:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d296:	f7fc fd0d 	bl	8009cb4 <HAL_GetTick>
 800d29a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d29c:	e009      	b.n	800d2b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d29e:	f7fc fd09 	bl	8009cb4 <HAL_GetTick>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ac:	d901      	bls.n	800d2b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e007      	b.n	800d2c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	f003 0320 	and.w	r3, r3, #32
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0ee      	beq.n	800d29e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d119      	bne.n	800d318 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d2ee:	f7fc fce1 	bl	8009cb4 <HAL_GetTick>
 800d2f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2f4:	e009      	b.n	800d30a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d2f6:	f7fc fcdd 	bl	8009cb4 <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d304:	d901      	bls.n	800d30a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	e007      	b.n	800d31a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0ee      	beq.n	800d2f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d322:	b480      	push	{r7}
 800d324:	b085      	sub	sp, #20
 800d326:	af00      	add	r7, sp, #0
 800d328:	4603      	mov	r3, r0
 800d32a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d330:	e005      	b.n	800d33e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3301      	adds	r3, #1
 800d336:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d338:	79fb      	ldrb	r3, [r7, #7]
 800d33a:	3b0a      	subs	r3, #10
 800d33c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b09      	cmp	r3, #9
 800d342:	d8f6      	bhi.n	800d332 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	4313      	orrs	r3, r2
 800d350:	b2db      	uxtb	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e056      	b.n	800d41e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d106      	bne.n	800d390 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7f6 fabe 	bl	800390c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2202      	movs	r2, #2
 800d394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	431a      	orrs	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	695b      	ldr	r3, [r3, #20]
 800d3c2:	431a      	orrs	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3cc:	431a      	orrs	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	ea42 0103 	orr.w	r1, r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	430a      	orrs	r2, r1
 800d3e6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	0c1b      	lsrs	r3, r3, #16
 800d3ee:	f003 0104 	and.w	r1, r3, #4
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69da      	ldr	r2, [r3, #28]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d40c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b08c      	sub	sp, #48	; 0x30
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d434:	2301      	movs	r3, #1
 800d436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d444:	2b01      	cmp	r3, #1
 800d446:	d101      	bne.n	800d44c <HAL_SPI_TransmitReceive+0x26>
 800d448:	2302      	movs	r3, #2
 800d44a:	e18a      	b.n	800d762 <HAL_SPI_TransmitReceive+0x33c>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d454:	f7fc fc2e 	bl	8009cb4 <HAL_GetTick>
 800d458:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d472:	2b01      	cmp	r3, #1
 800d474:	d00f      	beq.n	800d496 <HAL_SPI_TransmitReceive+0x70>
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d47c:	d107      	bne.n	800d48e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <HAL_SPI_TransmitReceive+0x68>
 800d486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d48a:	2b04      	cmp	r3, #4
 800d48c:	d003      	beq.n	800d496 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d48e:	2302      	movs	r3, #2
 800d490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d494:	e15b      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d005      	beq.n	800d4a8 <HAL_SPI_TransmitReceive+0x82>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <HAL_SPI_TransmitReceive+0x82>
 800d4a2:	887b      	ldrh	r3, [r7, #2]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d4ae:	e14e      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b04      	cmp	r3, #4
 800d4ba:	d003      	beq.n	800d4c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2205      	movs	r2, #5
 800d4c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	887a      	ldrh	r2, [r7, #2]
 800d4d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	887a      	ldrh	r2, [r7, #2]
 800d4da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	887a      	ldrh	r2, [r7, #2]
 800d4e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	887a      	ldrh	r2, [r7, #2]
 800d4ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d504:	2b40      	cmp	r3, #64	; 0x40
 800d506:	d007      	beq.n	800d518 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d520:	d178      	bne.n	800d614 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <HAL_SPI_TransmitReceive+0x10a>
 800d52a:	8b7b      	ldrh	r3, [r7, #26]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d166      	bne.n	800d5fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d534:	881a      	ldrh	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d540:	1c9a      	adds	r2, r3, #2
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b29a      	uxth	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d554:	e053      	b.n	800d5fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f003 0302 	and.w	r3, r3, #2
 800d560:	2b02      	cmp	r3, #2
 800d562:	d11b      	bne.n	800d59c <HAL_SPI_TransmitReceive+0x176>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d568:	b29b      	uxth	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d016      	beq.n	800d59c <HAL_SPI_TransmitReceive+0x176>
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	2b01      	cmp	r3, #1
 800d572:	d113      	bne.n	800d59c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d578:	881a      	ldrh	r2, [r3, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d584:	1c9a      	adds	r2, r3, #2
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d58e:	b29b      	uxth	r3, r3
 800d590:	3b01      	subs	r3, #1
 800d592:	b29a      	uxth	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d598:	2300      	movs	r3, #0
 800d59a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d119      	bne.n	800d5de <HAL_SPI_TransmitReceive+0x1b8>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d014      	beq.n	800d5de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5be:	b292      	uxth	r2, r2
 800d5c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c6:	1c9a      	adds	r2, r3, #2
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d5de:	f7fc fb69 	bl	8009cb4 <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d807      	bhi.n	800d5fe <HAL_SPI_TransmitReceive+0x1d8>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f4:	d003      	beq.n	800d5fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d5fc:	e0a7      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d602:	b29b      	uxth	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1a6      	bne.n	800d556 <HAL_SPI_TransmitReceive+0x130>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1a1      	bne.n	800d556 <HAL_SPI_TransmitReceive+0x130>
 800d612:	e07c      	b.n	800d70e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <HAL_SPI_TransmitReceive+0x1fc>
 800d61c:	8b7b      	ldrh	r3, [r7, #26]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d16b      	bne.n	800d6fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	330c      	adds	r3, #12
 800d62c:	7812      	ldrb	r2, [r2, #0]
 800d62e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d63e:	b29b      	uxth	r3, r3
 800d640:	3b01      	subs	r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d648:	e057      	b.n	800d6fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b02      	cmp	r3, #2
 800d656:	d11c      	bne.n	800d692 <HAL_SPI_TransmitReceive+0x26c>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d017      	beq.n	800d692 <HAL_SPI_TransmitReceive+0x26c>
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	2b01      	cmp	r3, #1
 800d666:	d114      	bne.n	800d692 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	330c      	adds	r3, #12
 800d672:	7812      	ldrb	r2, [r2, #0]
 800d674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d684:	b29b      	uxth	r3, r3
 800d686:	3b01      	subs	r3, #1
 800d688:	b29a      	uxth	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d68e:	2300      	movs	r3, #0
 800d690:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d119      	bne.n	800d6d4 <HAL_SPI_TransmitReceive+0x2ae>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d014      	beq.n	800d6d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	b2d2      	uxtb	r2, r2
 800d6b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d6d4:	f7fc faee 	bl	8009cb4 <HAL_GetTick>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d803      	bhi.n	800d6ec <HAL_SPI_TransmitReceive+0x2c6>
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d102      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x2cc>
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d6f8:	e029      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1a2      	bne.n	800d64a <HAL_SPI_TransmitReceive+0x224>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d708:	b29b      	uxth	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d19d      	bne.n	800d64a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f000 f9b2 	bl	800da7c <SPI_EndRxTxTransaction>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d006      	beq.n	800d72c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2220      	movs	r2, #32
 800d728:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d72a:	e010      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d734:	2300      	movs	r3, #0
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	617b      	str	r3, [r7, #20]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	e000      	b.n	800d74e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d74c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2201      	movs	r2, #1
 800d752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d75e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d762:	4618      	mov	r0, r3
 800d764:	3730      	adds	r7, #48	; 0x30
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
	...

0800d76c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	099b      	lsrs	r3, r3, #6
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10f      	bne.n	800d7b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	099b      	lsrs	r3, r3, #6
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d004      	beq.n	800d7b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	4798      	blx	r3
    return;
 800d7ae:	e0d8      	b.n	800d962 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	085b      	lsrs	r3, r3, #1
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00a      	beq.n	800d7d2 <HAL_SPI_IRQHandler+0x66>
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	09db      	lsrs	r3, r3, #7
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	4798      	blx	r3
    return;
 800d7d0:	e0c7      	b.n	800d962 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	095b      	lsrs	r3, r3, #5
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10c      	bne.n	800d7f8 <HAL_SPI_IRQHandler+0x8c>
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	099b      	lsrs	r3, r3, #6
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	0a1b      	lsrs	r3, r3, #8
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 80b5 	beq.w	800d962 <HAL_SPI_IRQHandler+0x1f6>
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	095b      	lsrs	r3, r3, #5
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 80ae 	beq.w	800d962 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	099b      	lsrs	r3, r3, #6
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d023      	beq.n	800d85a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d011      	beq.n	800d842 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d822:	f043 0204 	orr.w	r2, r3, #4
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d82a:	2300      	movs	r3, #0
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	617b      	str	r3, [r7, #20]
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	e00b      	b.n	800d85a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	613b      	str	r3, [r7, #16]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	693b      	ldr	r3, [r7, #16]
        return;
 800d858:	e083      	b.n	800d962 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	095b      	lsrs	r3, r3, #5
 800d85e:	f003 0301 	and.w	r3, r3, #1
 800d862:	2b00      	cmp	r3, #0
 800d864:	d014      	beq.n	800d890 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86a:	f043 0201 	orr.w	r2, r3, #1
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d872:	2300      	movs	r3, #0
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	0a1b      	lsrs	r3, r3, #8
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00c      	beq.n	800d8b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a0:	f043 0208 	orr.w	r2, r3, #8
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60bb      	str	r3, [r7, #8]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	60bb      	str	r3, [r7, #8]
 800d8b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d050      	beq.n	800d960 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d8cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <HAL_SPI_IRQHandler+0x17e>
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d034      	beq.n	800d954 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 0203 	bic.w	r2, r2, #3
 800d8f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d011      	beq.n	800d926 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d906:	4a18      	ldr	r2, [pc, #96]	; (800d968 <HAL_SPI_IRQHandler+0x1fc>)
 800d908:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fd f838 	bl	800a984 <HAL_DMA_Abort_IT>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d005      	beq.n	800d926 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d91e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d016      	beq.n	800d95c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d932:	4a0d      	ldr	r2, [pc, #52]	; (800d968 <HAL_SPI_IRQHandler+0x1fc>)
 800d934:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fd f822 	bl	800a984 <HAL_DMA_Abort_IT>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d94a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d952:	e003      	b.n	800d95c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f809 	bl	800d96c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d95a:	e000      	b.n	800d95e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d95c:	bf00      	nop
    return;
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
  }
}
 800d962:	3720      	adds	r7, #32
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	0800d981 	.word	0x0800d981

0800d96c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f7ff ffe6 	bl	800d96c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d9b8:	e04c      	b.n	800da54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d048      	beq.n	800da54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d9c2:	f7fc f977 	bl	8009cb4 <HAL_GetTick>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d902      	bls.n	800d9d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d13d      	bne.n	800da54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d9e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9f0:	d111      	bne.n	800da16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9fa:	d004      	beq.n	800da06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da04:	d107      	bne.n	800da16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da1e:	d10f      	bne.n	800da40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e00f      	b.n	800da74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	4013      	ands	r3, r2
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	429a      	cmp	r2, r3
 800da62:	bf0c      	ite	eq
 800da64:	2301      	moveq	r3, #1
 800da66:	2300      	movne	r3, #0
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	461a      	mov	r2, r3
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d1a3      	bne.n	800d9ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da88:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <SPI_EndRxTxTransaction+0x7c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a1b      	ldr	r2, [pc, #108]	; (800dafc <SPI_EndRxTxTransaction+0x80>)
 800da8e:	fba2 2303 	umull	r2, r3, r2, r3
 800da92:	0d5b      	lsrs	r3, r3, #21
 800da94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da98:	fb02 f303 	mul.w	r3, r2, r3
 800da9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800daa6:	d112      	bne.n	800dace <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2200      	movs	r2, #0
 800dab0:	2180      	movs	r1, #128	; 0x80
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f7ff ff78 	bl	800d9a8 <SPI_WaitFlagStateUntilTimeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d016      	beq.n	800daec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac2:	f043 0220 	orr.w	r2, r3, #32
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800daca:	2303      	movs	r3, #3
 800dacc:	e00f      	b.n	800daee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00a      	beq.n	800daea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae4:	2b80      	cmp	r3, #128	; 0x80
 800dae6:	d0f2      	beq.n	800dace <SPI_EndRxTxTransaction+0x52>
 800dae8:	e000      	b.n	800daec <SPI_EndRxTxTransaction+0x70>
        break;
 800daea:	bf00      	nop
  }

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000008 	.word	0x20000008
 800dafc:	165e9f81 	.word	0x165e9f81

0800db00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d101      	bne.n	800db12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	e01d      	b.n	800db4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7f6 fc62 	bl	80043f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4619      	mov	r1, r3
 800db3e:	4610      	mov	r0, r2
 800db40:	f000 fcc0 	bl	800e4c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db56:	b480      	push	{r7}
 800db58:	b085      	sub	sp, #20
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68da      	ldr	r2, [r3, #12]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f042 0201 	orr.w	r2, r2, #1
 800db6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f003 0307 	and.w	r3, r3, #7
 800db78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b06      	cmp	r3, #6
 800db7e:	d007      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f042 0201 	orr.w	r2, r2, #1
 800db8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b082      	sub	sp, #8
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e01d      	b.n	800dbec <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d106      	bne.n	800dbca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7f6 fbf1 	bl	80043ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2202      	movs	r2, #2
 800dbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f000 fc71 	bl	800e4c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2201      	movs	r2, #1
 800dc04:	6839      	ldr	r1, [r7, #0]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 feac 	bl	800e964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a15      	ldr	r2, [pc, #84]	; (800dc68 <HAL_TIM_OC_Start+0x74>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d004      	beq.n	800dc20 <HAL_TIM_OC_Start+0x2c>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a14      	ldr	r2, [pc, #80]	; (800dc6c <HAL_TIM_OC_Start+0x78>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d101      	bne.n	800dc24 <HAL_TIM_OC_Start+0x30>
 800dc20:	2301      	movs	r3, #1
 800dc22:	e000      	b.n	800dc26 <HAL_TIM_OC_Start+0x32>
 800dc24:	2300      	movs	r3, #0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d007      	beq.n	800dc3a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f003 0307 	and.w	r3, r3, #7
 800dc44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b06      	cmp	r3, #6
 800dc4a:	d007      	beq.n	800dc5c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f042 0201 	orr.w	r2, r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	40010000 	.word	0x40010000
 800dc6c:	40010400 	.word	0x40010400

0800dc70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e01d      	b.n	800dcbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7f6 fa88 	bl	80041ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f000 fc08 	bl	800e4c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d101      	bne.n	800dce6 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800dce2:	2302      	movs	r3, #2
 800dce4:	e0f3      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d10b      	bne.n	800dd0a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d104      	bne.n	800dd02 <HAL_TIM_PWM_Start_DMA+0x3a>
 800dcf8:	887b      	ldrh	r3, [r7, #2]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e0e5      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2202      	movs	r2, #2
 800dd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b0c      	cmp	r3, #12
 800dd0e:	f200 80ad 	bhi.w	800de6c <HAL_TIM_PWM_Start_DMA+0x1a4>
 800dd12:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <HAL_TIM_PWM_Start_DMA+0x50>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd4d 	.word	0x0800dd4d
 800dd1c:	0800de6d 	.word	0x0800de6d
 800dd20:	0800de6d 	.word	0x0800de6d
 800dd24:	0800de6d 	.word	0x0800de6d
 800dd28:	0800dd95 	.word	0x0800dd95
 800dd2c:	0800de6d 	.word	0x0800de6d
 800dd30:	0800de6d 	.word	0x0800de6d
 800dd34:	0800de6d 	.word	0x0800de6d
 800dd38:	0800dddd 	.word	0x0800dddd
 800dd3c:	0800de6d 	.word	0x0800de6d
 800dd40:	0800de6d 	.word	0x0800de6d
 800dd44:	0800de6d 	.word	0x0800de6d
 800dd48:	0800de25 	.word	0x0800de25
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd50:	4a61      	ldr	r2, [pc, #388]	; (800ded8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800dd52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	4a60      	ldr	r2, [pc, #384]	; (800dedc <HAL_TIM_PWM_Start_DMA+0x214>)
 800dd5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	4a5f      	ldr	r2, [pc, #380]	; (800dee0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800dd62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd68:	6879      	ldr	r1, [r7, #4]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3334      	adds	r3, #52	; 0x34
 800dd70:	461a      	mov	r2, r3
 800dd72:	887b      	ldrh	r3, [r7, #2]
 800dd74:	f7fc fdae 	bl	800a8d4 <HAL_DMA_Start_IT>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e0a5      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd90:	60da      	str	r2, [r3, #12]
      break;
 800dd92:	e06c      	b.n	800de6e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd98:	4a4f      	ldr	r2, [pc, #316]	; (800ded8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800dd9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda0:	4a4e      	ldr	r2, [pc, #312]	; (800dedc <HAL_TIM_PWM_Start_DMA+0x214>)
 800dda2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda8:	4a4d      	ldr	r2, [pc, #308]	; (800dee0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800ddaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3338      	adds	r3, #56	; 0x38
 800ddb8:	461a      	mov	r2, r3
 800ddba:	887b      	ldrh	r3, [r7, #2]
 800ddbc:	f7fc fd8a 	bl	800a8d4 <HAL_DMA_Start_IT>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e081      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68da      	ldr	r2, [r3, #12]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddd8:	60da      	str	r2, [r3, #12]
      break;
 800ddda:	e048      	b.n	800de6e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	4a3d      	ldr	r2, [pc, #244]	; (800ded8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800dde2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde8:	4a3c      	ldr	r2, [pc, #240]	; (800dedc <HAL_TIM_PWM_Start_DMA+0x214>)
 800ddea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf0:	4a3b      	ldr	r2, [pc, #236]	; (800dee0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800ddf2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ddf8:	6879      	ldr	r1, [r7, #4]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	333c      	adds	r3, #60	; 0x3c
 800de00:	461a      	mov	r2, r3
 800de02:	887b      	ldrh	r3, [r7, #2]
 800de04:	f7fc fd66 	bl	800a8d4 <HAL_DMA_Start_IT>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800de0e:	2301      	movs	r3, #1
 800de10:	e05d      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de20:	60da      	str	r2, [r3, #12]
      break;
 800de22:	e024      	b.n	800de6e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de28:	4a2b      	ldr	r2, [pc, #172]	; (800ded8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800de2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de30:	4a2a      	ldr	r2, [pc, #168]	; (800dedc <HAL_TIM_PWM_Start_DMA+0x214>)
 800de32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de38:	4a29      	ldr	r2, [pc, #164]	; (800dee0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800de3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	3340      	adds	r3, #64	; 0x40
 800de48:	461a      	mov	r2, r3
 800de4a:	887b      	ldrh	r3, [r7, #2]
 800de4c:	f7fc fd42 	bl	800a8d4 <HAL_DMA_Start_IT>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e039      	b.n	800dece <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68da      	ldr	r2, [r3, #12]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de68:	60da      	str	r2, [r3, #12]
      break;
 800de6a:	e000      	b.n	800de6e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800de6c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2201      	movs	r2, #1
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	4618      	mov	r0, r3
 800de78:	f000 fd74 	bl	800e964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a18      	ldr	r2, [pc, #96]	; (800dee4 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d004      	beq.n	800de90 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <HAL_TIM_PWM_Start_DMA+0x220>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d101      	bne.n	800de94 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800de90:	2301      	movs	r3, #1
 800de92:	e000      	b.n	800de96 <HAL_TIM_PWM_Start_DMA+0x1ce>
 800de94:	2300      	movs	r3, #0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d007      	beq.n	800decc <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f042 0201 	orr.w	r2, r2, #1
 800deca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	0800e3e5 	.word	0x0800e3e5
 800dedc:	0800e455 	.word	0x0800e455
 800dee0:	0800e3c1 	.word	0x0800e3c1
 800dee4:	40010000 	.word	0x40010000
 800dee8:	40010400 	.word	0x40010400

0800deec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	f003 0302 	and.w	r3, r3, #2
 800defe:	2b02      	cmp	r3, #2
 800df00:	d122      	bne.n	800df48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	f003 0302 	and.w	r3, r3, #2
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d11b      	bne.n	800df48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f06f 0202 	mvn.w	r2, #2
 800df18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	699b      	ldr	r3, [r3, #24]
 800df26:	f003 0303 	and.w	r3, r3, #3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fa14 	bl	800e35c <HAL_TIM_IC_CaptureCallback>
 800df34:	e005      	b.n	800df42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fa06 	bl	800e348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fa17 	bl	800e370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	f003 0304 	and.w	r3, r3, #4
 800df52:	2b04      	cmp	r3, #4
 800df54:	d122      	bne.n	800df9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	f003 0304 	and.w	r3, r3, #4
 800df60:	2b04      	cmp	r3, #4
 800df62:	d11b      	bne.n	800df9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f06f 0204 	mvn.w	r2, #4
 800df6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2202      	movs	r2, #2
 800df72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9ea 	bl	800e35c <HAL_TIM_IC_CaptureCallback>
 800df88:	e005      	b.n	800df96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f9dc 	bl	800e348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f9ed 	bl	800e370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	f003 0308 	and.w	r3, r3, #8
 800dfa6:	2b08      	cmp	r3, #8
 800dfa8:	d122      	bne.n	800dff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	f003 0308 	and.w	r3, r3, #8
 800dfb4:	2b08      	cmp	r3, #8
 800dfb6:	d11b      	bne.n	800dff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f06f 0208 	mvn.w	r2, #8
 800dfc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2204      	movs	r2, #4
 800dfc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	f003 0303 	and.w	r3, r3, #3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f9c0 	bl	800e35c <HAL_TIM_IC_CaptureCallback>
 800dfdc:	e005      	b.n	800dfea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f9b2 	bl	800e348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f9c3 	bl	800e370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	f003 0310 	and.w	r3, r3, #16
 800dffa:	2b10      	cmp	r3, #16
 800dffc:	d122      	bne.n	800e044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f003 0310 	and.w	r3, r3, #16
 800e008:	2b10      	cmp	r3, #16
 800e00a:	d11b      	bne.n	800e044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f06f 0210 	mvn.w	r2, #16
 800e014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2208      	movs	r2, #8
 800e01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f996 	bl	800e35c <HAL_TIM_IC_CaptureCallback>
 800e030:	e005      	b.n	800e03e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f988 	bl	800e348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f999 	bl	800e370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d10e      	bne.n	800e070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d107      	bne.n	800e070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f06f 0201 	mvn.w	r2, #1
 800e068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7f5 fb2e 	bl	80036cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e07a:	2b80      	cmp	r3, #128	; 0x80
 800e07c:	d10e      	bne.n	800e09c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e088:	2b80      	cmp	r3, #128	; 0x80
 800e08a:	d107      	bne.n	800e09c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fd10 	bl	800eabc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a6:	2b40      	cmp	r3, #64	; 0x40
 800e0a8:	d10e      	bne.n	800e0c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0b4:	2b40      	cmp	r3, #64	; 0x40
 800e0b6:	d107      	bne.n	800e0c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f968 	bl	800e398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	f003 0320 	and.w	r3, r3, #32
 800e0d2:	2b20      	cmp	r3, #32
 800e0d4:	d10e      	bne.n	800e0f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	f003 0320 	and.w	r3, r3, #32
 800e0e0:	2b20      	cmp	r3, #32
 800e0e2:	d107      	bne.n	800e0f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f06f 0220 	mvn.w	r2, #32
 800e0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fcda 	bl	800eaa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d101      	bne.n	800e116 <HAL_TIM_OC_ConfigChannel+0x1a>
 800e112:	2302      	movs	r3, #2
 800e114:	e04e      	b.n	800e1b4 <HAL_TIM_OC_ConfigChannel+0xb8>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2202      	movs	r2, #2
 800e122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b0c      	cmp	r3, #12
 800e12a:	d839      	bhi.n	800e1a0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800e12c:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <HAL_TIM_OC_ConfigChannel+0x38>)
 800e12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e132:	bf00      	nop
 800e134:	0800e169 	.word	0x0800e169
 800e138:	0800e1a1 	.word	0x0800e1a1
 800e13c:	0800e1a1 	.word	0x0800e1a1
 800e140:	0800e1a1 	.word	0x0800e1a1
 800e144:	0800e177 	.word	0x0800e177
 800e148:	0800e1a1 	.word	0x0800e1a1
 800e14c:	0800e1a1 	.word	0x0800e1a1
 800e150:	0800e1a1 	.word	0x0800e1a1
 800e154:	0800e185 	.word	0x0800e185
 800e158:	0800e1a1 	.word	0x0800e1a1
 800e15c:	0800e1a1 	.word	0x0800e1a1
 800e160:	0800e1a1 	.word	0x0800e1a1
 800e164:	0800e193 	.word	0x0800e193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68b9      	ldr	r1, [r7, #8]
 800e16e:	4618      	mov	r0, r3
 800e170:	f000 fa48 	bl	800e604 <TIM_OC1_SetConfig>
      break;
 800e174:	e015      	b.n	800e1a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 fab1 	bl	800e6e4 <TIM_OC2_SetConfig>
      break;
 800e182:	e00e      	b.n	800e1a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 fb20 	bl	800e7d0 <TIM_OC3_SetConfig>
      break;
 800e190:	e007      	b.n	800e1a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68b9      	ldr	r1, [r7, #8]
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 fb8d 	bl	800e8b8 <TIM_OC4_SetConfig>
      break;
 800e19e:	e000      	b.n	800e1a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800e1a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d101      	bne.n	800e1d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	e0b4      	b.n	800e340 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b0c      	cmp	r3, #12
 800e1ea:	f200 809f 	bhi.w	800e32c <HAL_TIM_PWM_ConfigChannel+0x170>
 800e1ee:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f4:	0800e229 	.word	0x0800e229
 800e1f8:	0800e32d 	.word	0x0800e32d
 800e1fc:	0800e32d 	.word	0x0800e32d
 800e200:	0800e32d 	.word	0x0800e32d
 800e204:	0800e269 	.word	0x0800e269
 800e208:	0800e32d 	.word	0x0800e32d
 800e20c:	0800e32d 	.word	0x0800e32d
 800e210:	0800e32d 	.word	0x0800e32d
 800e214:	0800e2ab 	.word	0x0800e2ab
 800e218:	0800e32d 	.word	0x0800e32d
 800e21c:	0800e32d 	.word	0x0800e32d
 800e220:	0800e32d 	.word	0x0800e32d
 800e224:	0800e2eb 	.word	0x0800e2eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68b9      	ldr	r1, [r7, #8]
 800e22e:	4618      	mov	r0, r3
 800e230:	f000 f9e8 	bl	800e604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	699a      	ldr	r2, [r3, #24]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f042 0208 	orr.w	r2, r2, #8
 800e242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	699a      	ldr	r2, [r3, #24]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f022 0204 	bic.w	r2, r2, #4
 800e252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6999      	ldr	r1, [r3, #24]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	691a      	ldr	r2, [r3, #16]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	430a      	orrs	r2, r1
 800e264:	619a      	str	r2, [r3, #24]
      break;
 800e266:	e062      	b.n	800e32e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68b9      	ldr	r1, [r7, #8]
 800e26e:	4618      	mov	r0, r3
 800e270:	f000 fa38 	bl	800e6e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	699a      	ldr	r2, [r3, #24]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699a      	ldr	r2, [r3, #24]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6999      	ldr	r1, [r3, #24]
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	021a      	lsls	r2, r3, #8
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	430a      	orrs	r2, r1
 800e2a6:	619a      	str	r2, [r3, #24]
      break;
 800e2a8:	e041      	b.n	800e32e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	68b9      	ldr	r1, [r7, #8]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fa8d 	bl	800e7d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	69da      	ldr	r2, [r3, #28]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f042 0208 	orr.w	r2, r2, #8
 800e2c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	69da      	ldr	r2, [r3, #28]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f022 0204 	bic.w	r2, r2, #4
 800e2d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	69d9      	ldr	r1, [r3, #28]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	691a      	ldr	r2, [r3, #16]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	61da      	str	r2, [r3, #28]
      break;
 800e2e8:	e021      	b.n	800e32e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 fae1 	bl	800e8b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	69da      	ldr	r2, [r3, #28]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	69da      	ldr	r2, [r3, #28]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69d9      	ldr	r1, [r3, #28]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	021a      	lsls	r2, r3, #8
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	430a      	orrs	r2, r1
 800e328:	61da      	str	r2, [r3, #28]
      break;
 800e32a:	e000      	b.n	800e32e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e32c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3cc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff ffe8 	bl	800e3ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	429a      	cmp	r2, r3
 800e402:	d103      	bne.n	800e40c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2201      	movs	r2, #1
 800e408:	771a      	strb	r2, [r3, #28]
 800e40a:	e019      	b.n	800e440 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	429a      	cmp	r2, r3
 800e414:	d103      	bne.n	800e41e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2202      	movs	r2, #2
 800e41a:	771a      	strb	r2, [r3, #28]
 800e41c:	e010      	b.n	800e440 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d103      	bne.n	800e430 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2204      	movs	r2, #4
 800e42c:	771a      	strb	r2, [r3, #28]
 800e42e:	e007      	b.n	800e440 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	429a      	cmp	r2, r3
 800e438:	d102      	bne.n	800e440 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2208      	movs	r2, #8
 800e43e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f7ff ff95 	bl	800e370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	771a      	strb	r2, [r3, #28]
}
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e460:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d103      	bne.n	800e47c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2201      	movs	r2, #1
 800e478:	771a      	strb	r2, [r3, #28]
 800e47a:	e019      	b.n	800e4b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d103      	bne.n	800e48e <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2202      	movs	r2, #2
 800e48a:	771a      	strb	r2, [r3, #28]
 800e48c:	e010      	b.n	800e4b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d103      	bne.n	800e4a0 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2204      	movs	r2, #4
 800e49c:	771a      	strb	r2, [r3, #28]
 800e49e:	e007      	b.n	800e4b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d102      	bne.n	800e4b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2208      	movs	r2, #8
 800e4ae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f7ff ff67 	bl	800e384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	771a      	strb	r2, [r3, #28]
}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a40      	ldr	r2, [pc, #256]	; (800e5d8 <TIM_Base_SetConfig+0x114>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d013      	beq.n	800e504 <TIM_Base_SetConfig+0x40>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4e2:	d00f      	beq.n	800e504 <TIM_Base_SetConfig+0x40>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a3d      	ldr	r2, [pc, #244]	; (800e5dc <TIM_Base_SetConfig+0x118>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d00b      	beq.n	800e504 <TIM_Base_SetConfig+0x40>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a3c      	ldr	r2, [pc, #240]	; (800e5e0 <TIM_Base_SetConfig+0x11c>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d007      	beq.n	800e504 <TIM_Base_SetConfig+0x40>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a3b      	ldr	r2, [pc, #236]	; (800e5e4 <TIM_Base_SetConfig+0x120>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d003      	beq.n	800e504 <TIM_Base_SetConfig+0x40>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a3a      	ldr	r2, [pc, #232]	; (800e5e8 <TIM_Base_SetConfig+0x124>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d108      	bne.n	800e516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	4313      	orrs	r3, r2
 800e514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a2f      	ldr	r2, [pc, #188]	; (800e5d8 <TIM_Base_SetConfig+0x114>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d02b      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e524:	d027      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a2c      	ldr	r2, [pc, #176]	; (800e5dc <TIM_Base_SetConfig+0x118>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d023      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a2b      	ldr	r2, [pc, #172]	; (800e5e0 <TIM_Base_SetConfig+0x11c>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d01f      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a2a      	ldr	r2, [pc, #168]	; (800e5e4 <TIM_Base_SetConfig+0x120>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d01b      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a29      	ldr	r2, [pc, #164]	; (800e5e8 <TIM_Base_SetConfig+0x124>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d017      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a28      	ldr	r2, [pc, #160]	; (800e5ec <TIM_Base_SetConfig+0x128>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d013      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a27      	ldr	r2, [pc, #156]	; (800e5f0 <TIM_Base_SetConfig+0x12c>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d00f      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a26      	ldr	r2, [pc, #152]	; (800e5f4 <TIM_Base_SetConfig+0x130>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d00b      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a25      	ldr	r2, [pc, #148]	; (800e5f8 <TIM_Base_SetConfig+0x134>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d007      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a24      	ldr	r2, [pc, #144]	; (800e5fc <TIM_Base_SetConfig+0x138>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d003      	beq.n	800e576 <TIM_Base_SetConfig+0xb2>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a23      	ldr	r2, [pc, #140]	; (800e600 <TIM_Base_SetConfig+0x13c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d108      	bne.n	800e588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e57c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	4313      	orrs	r3, r2
 800e586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	4313      	orrs	r3, r2
 800e594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4a0a      	ldr	r2, [pc, #40]	; (800e5d8 <TIM_Base_SetConfig+0x114>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d003      	beq.n	800e5bc <TIM_Base_SetConfig+0xf8>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a0c      	ldr	r2, [pc, #48]	; (800e5e8 <TIM_Base_SetConfig+0x124>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d103      	bne.n	800e5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	691a      	ldr	r2, [r3, #16]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	615a      	str	r2, [r3, #20]
}
 800e5ca:	bf00      	nop
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	40010000 	.word	0x40010000
 800e5dc:	40000400 	.word	0x40000400
 800e5e0:	40000800 	.word	0x40000800
 800e5e4:	40000c00 	.word	0x40000c00
 800e5e8:	40010400 	.word	0x40010400
 800e5ec:	40014000 	.word	0x40014000
 800e5f0:	40014400 	.word	0x40014400
 800e5f4:	40014800 	.word	0x40014800
 800e5f8:	40001800 	.word	0x40001800
 800e5fc:	40001c00 	.word	0x40001c00
 800e600:	40002000 	.word	0x40002000

0800e604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e604:	b480      	push	{r7}
 800e606:	b087      	sub	sp, #28
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	f023 0201 	bic.w	r2, r3, #1
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f023 0303 	bic.w	r3, r3, #3
 800e63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	4313      	orrs	r3, r2
 800e644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f023 0302 	bic.w	r3, r3, #2
 800e64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	4313      	orrs	r3, r2
 800e656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a20      	ldr	r2, [pc, #128]	; (800e6dc <TIM_OC1_SetConfig+0xd8>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC1_SetConfig+0x64>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a1f      	ldr	r2, [pc, #124]	; (800e6e0 <TIM_OC1_SetConfig+0xdc>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d10c      	bne.n	800e682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f023 0308 	bic.w	r3, r3, #8
 800e66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	697a      	ldr	r2, [r7, #20]
 800e676:	4313      	orrs	r3, r2
 800e678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	f023 0304 	bic.w	r3, r3, #4
 800e680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4a15      	ldr	r2, [pc, #84]	; (800e6dc <TIM_OC1_SetConfig+0xd8>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d003      	beq.n	800e692 <TIM_OC1_SetConfig+0x8e>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a14      	ldr	r2, [pc, #80]	; (800e6e0 <TIM_OC1_SetConfig+0xdc>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d111      	bne.n	800e6b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	693a      	ldr	r2, [r7, #16]
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	699b      	ldr	r3, [r3, #24]
 800e6b0:	693a      	ldr	r2, [r7, #16]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	621a      	str	r2, [r3, #32]
}
 800e6d0:	bf00      	nop
 800e6d2:	371c      	adds	r7, #28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	40010000 	.word	0x40010000
 800e6e0:	40010400 	.word	0x40010400

0800e6e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b087      	sub	sp, #28
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	f023 0210 	bic.w	r2, r3, #16
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	021b      	lsls	r3, r3, #8
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	4313      	orrs	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	f023 0320 	bic.w	r3, r3, #32
 800e72e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	697a      	ldr	r2, [r7, #20]
 800e738:	4313      	orrs	r3, r2
 800e73a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a22      	ldr	r2, [pc, #136]	; (800e7c8 <TIM_OC2_SetConfig+0xe4>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d003      	beq.n	800e74c <TIM_OC2_SetConfig+0x68>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4a21      	ldr	r2, [pc, #132]	; (800e7cc <TIM_OC2_SetConfig+0xe8>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d10d      	bne.n	800e768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a17      	ldr	r2, [pc, #92]	; (800e7c8 <TIM_OC2_SetConfig+0xe4>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d003      	beq.n	800e778 <TIM_OC2_SetConfig+0x94>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a16      	ldr	r2, [pc, #88]	; (800e7cc <TIM_OC2_SetConfig+0xe8>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d113      	bne.n	800e7a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e77e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	695b      	ldr	r3, [r3, #20]
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	4313      	orrs	r3, r2
 800e792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	693a      	ldr	r2, [r7, #16]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	621a      	str	r2, [r3, #32]
}
 800e7ba:	bf00      	nop
 800e7bc:	371c      	adds	r7, #28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	40010000 	.word	0x40010000
 800e7cc:	40010400 	.word	0x40010400

0800e7d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b087      	sub	sp, #28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	69db      	ldr	r3, [r3, #28]
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f023 0303 	bic.w	r3, r3, #3
 800e806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	4313      	orrs	r3, r2
 800e810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	021b      	lsls	r3, r3, #8
 800e820:	697a      	ldr	r2, [r7, #20]
 800e822:	4313      	orrs	r3, r2
 800e824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a21      	ldr	r2, [pc, #132]	; (800e8b0 <TIM_OC3_SetConfig+0xe0>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d003      	beq.n	800e836 <TIM_OC3_SetConfig+0x66>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a20      	ldr	r2, [pc, #128]	; (800e8b4 <TIM_OC3_SetConfig+0xe4>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d10d      	bne.n	800e852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e83c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	021b      	lsls	r3, r3, #8
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	4313      	orrs	r3, r2
 800e848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a16      	ldr	r2, [pc, #88]	; (800e8b0 <TIM_OC3_SetConfig+0xe0>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d003      	beq.n	800e862 <TIM_OC3_SetConfig+0x92>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a15      	ldr	r2, [pc, #84]	; (800e8b4 <TIM_OC3_SetConfig+0xe4>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d113      	bne.n	800e88a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	4313      	orrs	r3, r2
 800e888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	621a      	str	r2, [r3, #32]
}
 800e8a4:	bf00      	nop
 800e8a6:	371c      	adds	r7, #28
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	40010000 	.word	0x40010000
 800e8b4:	40010400 	.word	0x40010400

0800e8b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69db      	ldr	r3, [r3, #28]
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	021b      	lsls	r3, r3, #8
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	031b      	lsls	r3, r3, #12
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a12      	ldr	r2, [pc, #72]	; (800e95c <TIM_OC4_SetConfig+0xa4>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d003      	beq.n	800e920 <TIM_OC4_SetConfig+0x68>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a11      	ldr	r2, [pc, #68]	; (800e960 <TIM_OC4_SetConfig+0xa8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d109      	bne.n	800e934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	019b      	lsls	r3, r3, #6
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	4313      	orrs	r3, r2
 800e932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	693a      	ldr	r2, [r7, #16]
 800e94c:	621a      	str	r2, [r3, #32]
}
 800e94e:	bf00      	nop
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	40010000 	.word	0x40010000
 800e960:	40010400 	.word	0x40010400

0800e964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	f003 031f 	and.w	r3, r3, #31
 800e976:	2201      	movs	r2, #1
 800e978:	fa02 f303 	lsl.w	r3, r2, r3
 800e97c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6a1a      	ldr	r2, [r3, #32]
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	43db      	mvns	r3, r3
 800e986:	401a      	ands	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6a1a      	ldr	r2, [r3, #32]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	f003 031f 	and.w	r3, r3, #31
 800e996:	6879      	ldr	r1, [r7, #4]
 800e998:	fa01 f303 	lsl.w	r3, r1, r3
 800e99c:	431a      	orrs	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	621a      	str	r2, [r3, #32]
}
 800e9a2:	bf00      	nop
 800e9a4:	371c      	adds	r7, #28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
	...

0800e9b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d101      	bne.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	e05a      	b.n	800ea7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a21      	ldr	r2, [pc, #132]	; (800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d022      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea14:	d01d      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a1d      	ldr	r2, [pc, #116]	; (800ea90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d018      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a1b      	ldr	r2, [pc, #108]	; (800ea94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d013      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a1a      	ldr	r2, [pc, #104]	; (800ea98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d00e      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a18      	ldr	r2, [pc, #96]	; (800ea9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d009      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a17      	ldr	r2, [pc, #92]	; (800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d004      	beq.n	800ea52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4a15      	ldr	r2, [pc, #84]	; (800eaa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d10c      	bne.n	800ea6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40000400 	.word	0x40000400
 800ea94:	40000800 	.word	0x40000800
 800ea98:	40000c00 	.word	0x40000c00
 800ea9c:	40010400 	.word	0x40010400
 800eaa0:	40014000 	.word	0x40014000
 800eaa4:	40001800 	.word	0x40001800

0800eaa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eab0:	bf00      	nop
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e03f      	b.n	800eb62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d106      	bne.n	800eafc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7f5 fd5a 	bl	80045b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2224      	movs	r2, #36	; 0x24
 800eb00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68da      	ldr	r2, [r3, #12]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f90b 	bl	800ed30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	691a      	ldr	r2, [r3, #16]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	695a      	ldr	r2, [r3, #20]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68da      	ldr	r2, [r3, #12]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2220      	movs	r2, #32
 800eb54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2220      	movs	r2, #32
 800eb5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b088      	sub	sp, #32
 800eb6e:	af02      	add	r7, sp, #8
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	603b      	str	r3, [r7, #0]
 800eb76:	4613      	mov	r3, r2
 800eb78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b20      	cmp	r3, #32
 800eb88:	f040 8083 	bne.w	800ec92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <HAL_UART_Transmit+0x2e>
 800eb92:	88fb      	ldrh	r3, [r7, #6]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e07b      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d101      	bne.n	800ebaa <HAL_UART_Transmit+0x40>
 800eba6:	2302      	movs	r3, #2
 800eba8:	e074      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2221      	movs	r2, #33	; 0x21
 800ebbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ebc0:	f7fb f878 	bl	8009cb4 <HAL_GetTick>
 800ebc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	88fa      	ldrh	r2, [r7, #6]
 800ebd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ebda:	e042      	b.n	800ec62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebf2:	d122      	bne.n	800ec3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2180      	movs	r1, #128	; 0x80
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 f84c 	bl	800ec9c <UART_WaitOnFlagUntilTimeout>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d001      	beq.n	800ec0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	e042      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d103      	bne.n	800ec32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	60bb      	str	r3, [r7, #8]
 800ec30:	e017      	b.n	800ec62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	3301      	adds	r3, #1
 800ec36:	60bb      	str	r3, [r7, #8]
 800ec38:	e013      	b.n	800ec62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2200      	movs	r2, #0
 800ec42:	2180      	movs	r1, #128	; 0x80
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 f829 	bl	800ec9c <UART_WaitOnFlagUntilTimeout>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ec50:	2303      	movs	r3, #3
 800ec52:	e01f      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	60ba      	str	r2, [r7, #8]
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1b7      	bne.n	800ebdc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2200      	movs	r2, #0
 800ec74:	2140      	movs	r1, #64	; 0x40
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f000 f810 	bl	800ec9c <UART_WaitOnFlagUntilTimeout>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	e006      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e000      	b.n	800ec94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ec92:	2302      	movs	r3, #2
  }
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecac:	e02c      	b.n	800ed08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb4:	d028      	beq.n	800ed08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d007      	beq.n	800eccc <UART_WaitOnFlagUntilTimeout+0x30>
 800ecbc:	f7fa fffa 	bl	8009cb4 <HAL_GetTick>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	69ba      	ldr	r2, [r7, #24]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d21d      	bcs.n	800ed08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ecda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	695a      	ldr	r2, [r3, #20]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f022 0201 	bic.w	r2, r2, #1
 800ecea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2220      	movs	r2, #32
 800ecf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2220      	movs	r2, #32
 800ecf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ed04:	2303      	movs	r3, #3
 800ed06:	e00f      	b.n	800ed28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	4013      	ands	r3, r2
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	bf0c      	ite	eq
 800ed18:	2301      	moveq	r3, #1
 800ed1a:	2300      	movne	r3, #0
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	461a      	mov	r2, r3
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d0c3      	beq.n	800ecae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed34:	b085      	sub	sp, #20
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68da      	ldr	r2, [r3, #12]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	430a      	orrs	r2, r1
 800ed4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689a      	ldr	r2, [r3, #8]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	431a      	orrs	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	431a      	orrs	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ed72:	f023 030c 	bic.w	r3, r3, #12
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	6812      	ldr	r2, [r2, #0]
 800ed7a:	68f9      	ldr	r1, [r7, #12]
 800ed7c:	430b      	orrs	r3, r1
 800ed7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	695b      	ldr	r3, [r3, #20]
 800ed86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	699a      	ldr	r2, [r3, #24]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	430a      	orrs	r2, r1
 800ed94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	69db      	ldr	r3, [r3, #28]
 800ed9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed9e:	f040 818b 	bne.w	800f0b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4ac1      	ldr	r2, [pc, #772]	; (800f0ac <UART_SetConfig+0x37c>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d005      	beq.n	800edb8 <UART_SetConfig+0x88>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4abf      	ldr	r2, [pc, #764]	; (800f0b0 <UART_SetConfig+0x380>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	f040 80bd 	bne.w	800ef32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800edb8:	f7fd ff42 	bl	800cc40 <HAL_RCC_GetPCLK2Freq>
 800edbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	461d      	mov	r5, r3
 800edc2:	f04f 0600 	mov.w	r6, #0
 800edc6:	46a8      	mov	r8, r5
 800edc8:	46b1      	mov	r9, r6
 800edca:	eb18 0308 	adds.w	r3, r8, r8
 800edce:	eb49 0409 	adc.w	r4, r9, r9
 800edd2:	4698      	mov	r8, r3
 800edd4:	46a1      	mov	r9, r4
 800edd6:	eb18 0805 	adds.w	r8, r8, r5
 800edda:	eb49 0906 	adc.w	r9, r9, r6
 800edde:	f04f 0100 	mov.w	r1, #0
 800ede2:	f04f 0200 	mov.w	r2, #0
 800ede6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800edea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800edee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800edf2:	4688      	mov	r8, r1
 800edf4:	4691      	mov	r9, r2
 800edf6:	eb18 0005 	adds.w	r0, r8, r5
 800edfa:	eb49 0106 	adc.w	r1, r9, r6
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	461d      	mov	r5, r3
 800ee04:	f04f 0600 	mov.w	r6, #0
 800ee08:	196b      	adds	r3, r5, r5
 800ee0a:	eb46 0406 	adc.w	r4, r6, r6
 800ee0e:	461a      	mov	r2, r3
 800ee10:	4623      	mov	r3, r4
 800ee12:	f7f1 ff49 	bl	8000ca8 <__aeabi_uldivmod>
 800ee16:	4603      	mov	r3, r0
 800ee18:	460c      	mov	r4, r1
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4ba5      	ldr	r3, [pc, #660]	; (800f0b4 <UART_SetConfig+0x384>)
 800ee1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ee22:	095b      	lsrs	r3, r3, #5
 800ee24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	461d      	mov	r5, r3
 800ee2c:	f04f 0600 	mov.w	r6, #0
 800ee30:	46a9      	mov	r9, r5
 800ee32:	46b2      	mov	sl, r6
 800ee34:	eb19 0309 	adds.w	r3, r9, r9
 800ee38:	eb4a 040a 	adc.w	r4, sl, sl
 800ee3c:	4699      	mov	r9, r3
 800ee3e:	46a2      	mov	sl, r4
 800ee40:	eb19 0905 	adds.w	r9, r9, r5
 800ee44:	eb4a 0a06 	adc.w	sl, sl, r6
 800ee48:	f04f 0100 	mov.w	r1, #0
 800ee4c:	f04f 0200 	mov.w	r2, #0
 800ee50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee5c:	4689      	mov	r9, r1
 800ee5e:	4692      	mov	sl, r2
 800ee60:	eb19 0005 	adds.w	r0, r9, r5
 800ee64:	eb4a 0106 	adc.w	r1, sl, r6
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	461d      	mov	r5, r3
 800ee6e:	f04f 0600 	mov.w	r6, #0
 800ee72:	196b      	adds	r3, r5, r5
 800ee74:	eb46 0406 	adc.w	r4, r6, r6
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4623      	mov	r3, r4
 800ee7c:	f7f1 ff14 	bl	8000ca8 <__aeabi_uldivmod>
 800ee80:	4603      	mov	r3, r0
 800ee82:	460c      	mov	r4, r1
 800ee84:	461a      	mov	r2, r3
 800ee86:	4b8b      	ldr	r3, [pc, #556]	; (800f0b4 <UART_SetConfig+0x384>)
 800ee88:	fba3 1302 	umull	r1, r3, r3, r2
 800ee8c:	095b      	lsrs	r3, r3, #5
 800ee8e:	2164      	movs	r1, #100	; 0x64
 800ee90:	fb01 f303 	mul.w	r3, r1, r3
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	00db      	lsls	r3, r3, #3
 800ee98:	3332      	adds	r3, #50	; 0x32
 800ee9a:	4a86      	ldr	r2, [pc, #536]	; (800f0b4 <UART_SetConfig+0x384>)
 800ee9c:	fba2 2303 	umull	r2, r3, r2, r3
 800eea0:	095b      	lsrs	r3, r3, #5
 800eea2:	005b      	lsls	r3, r3, #1
 800eea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eea8:	4498      	add	r8, r3
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	461d      	mov	r5, r3
 800eeae:	f04f 0600 	mov.w	r6, #0
 800eeb2:	46a9      	mov	r9, r5
 800eeb4:	46b2      	mov	sl, r6
 800eeb6:	eb19 0309 	adds.w	r3, r9, r9
 800eeba:	eb4a 040a 	adc.w	r4, sl, sl
 800eebe:	4699      	mov	r9, r3
 800eec0:	46a2      	mov	sl, r4
 800eec2:	eb19 0905 	adds.w	r9, r9, r5
 800eec6:	eb4a 0a06 	adc.w	sl, sl, r6
 800eeca:	f04f 0100 	mov.w	r1, #0
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eed6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eeda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eede:	4689      	mov	r9, r1
 800eee0:	4692      	mov	sl, r2
 800eee2:	eb19 0005 	adds.w	r0, r9, r5
 800eee6:	eb4a 0106 	adc.w	r1, sl, r6
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	461d      	mov	r5, r3
 800eef0:	f04f 0600 	mov.w	r6, #0
 800eef4:	196b      	adds	r3, r5, r5
 800eef6:	eb46 0406 	adc.w	r4, r6, r6
 800eefa:	461a      	mov	r2, r3
 800eefc:	4623      	mov	r3, r4
 800eefe:	f7f1 fed3 	bl	8000ca8 <__aeabi_uldivmod>
 800ef02:	4603      	mov	r3, r0
 800ef04:	460c      	mov	r4, r1
 800ef06:	461a      	mov	r2, r3
 800ef08:	4b6a      	ldr	r3, [pc, #424]	; (800f0b4 <UART_SetConfig+0x384>)
 800ef0a:	fba3 1302 	umull	r1, r3, r3, r2
 800ef0e:	095b      	lsrs	r3, r3, #5
 800ef10:	2164      	movs	r1, #100	; 0x64
 800ef12:	fb01 f303 	mul.w	r3, r1, r3
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	00db      	lsls	r3, r3, #3
 800ef1a:	3332      	adds	r3, #50	; 0x32
 800ef1c:	4a65      	ldr	r2, [pc, #404]	; (800f0b4 <UART_SetConfig+0x384>)
 800ef1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef22:	095b      	lsrs	r3, r3, #5
 800ef24:	f003 0207 	and.w	r2, r3, #7
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4442      	add	r2, r8
 800ef2e:	609a      	str	r2, [r3, #8]
 800ef30:	e26f      	b.n	800f412 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ef32:	f7fd fe71 	bl	800cc18 <HAL_RCC_GetPCLK1Freq>
 800ef36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	461d      	mov	r5, r3
 800ef3c:	f04f 0600 	mov.w	r6, #0
 800ef40:	46a8      	mov	r8, r5
 800ef42:	46b1      	mov	r9, r6
 800ef44:	eb18 0308 	adds.w	r3, r8, r8
 800ef48:	eb49 0409 	adc.w	r4, r9, r9
 800ef4c:	4698      	mov	r8, r3
 800ef4e:	46a1      	mov	r9, r4
 800ef50:	eb18 0805 	adds.w	r8, r8, r5
 800ef54:	eb49 0906 	adc.w	r9, r9, r6
 800ef58:	f04f 0100 	mov.w	r1, #0
 800ef5c:	f04f 0200 	mov.w	r2, #0
 800ef60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef6c:	4688      	mov	r8, r1
 800ef6e:	4691      	mov	r9, r2
 800ef70:	eb18 0005 	adds.w	r0, r8, r5
 800ef74:	eb49 0106 	adc.w	r1, r9, r6
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	461d      	mov	r5, r3
 800ef7e:	f04f 0600 	mov.w	r6, #0
 800ef82:	196b      	adds	r3, r5, r5
 800ef84:	eb46 0406 	adc.w	r4, r6, r6
 800ef88:	461a      	mov	r2, r3
 800ef8a:	4623      	mov	r3, r4
 800ef8c:	f7f1 fe8c 	bl	8000ca8 <__aeabi_uldivmod>
 800ef90:	4603      	mov	r3, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	461a      	mov	r2, r3
 800ef96:	4b47      	ldr	r3, [pc, #284]	; (800f0b4 <UART_SetConfig+0x384>)
 800ef98:	fba3 2302 	umull	r2, r3, r3, r2
 800ef9c:	095b      	lsrs	r3, r3, #5
 800ef9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	461d      	mov	r5, r3
 800efa6:	f04f 0600 	mov.w	r6, #0
 800efaa:	46a9      	mov	r9, r5
 800efac:	46b2      	mov	sl, r6
 800efae:	eb19 0309 	adds.w	r3, r9, r9
 800efb2:	eb4a 040a 	adc.w	r4, sl, sl
 800efb6:	4699      	mov	r9, r3
 800efb8:	46a2      	mov	sl, r4
 800efba:	eb19 0905 	adds.w	r9, r9, r5
 800efbe:	eb4a 0a06 	adc.w	sl, sl, r6
 800efc2:	f04f 0100 	mov.w	r1, #0
 800efc6:	f04f 0200 	mov.w	r2, #0
 800efca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efd6:	4689      	mov	r9, r1
 800efd8:	4692      	mov	sl, r2
 800efda:	eb19 0005 	adds.w	r0, r9, r5
 800efde:	eb4a 0106 	adc.w	r1, sl, r6
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	461d      	mov	r5, r3
 800efe8:	f04f 0600 	mov.w	r6, #0
 800efec:	196b      	adds	r3, r5, r5
 800efee:	eb46 0406 	adc.w	r4, r6, r6
 800eff2:	461a      	mov	r2, r3
 800eff4:	4623      	mov	r3, r4
 800eff6:	f7f1 fe57 	bl	8000ca8 <__aeabi_uldivmod>
 800effa:	4603      	mov	r3, r0
 800effc:	460c      	mov	r4, r1
 800effe:	461a      	mov	r2, r3
 800f000:	4b2c      	ldr	r3, [pc, #176]	; (800f0b4 <UART_SetConfig+0x384>)
 800f002:	fba3 1302 	umull	r1, r3, r3, r2
 800f006:	095b      	lsrs	r3, r3, #5
 800f008:	2164      	movs	r1, #100	; 0x64
 800f00a:	fb01 f303 	mul.w	r3, r1, r3
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	3332      	adds	r3, #50	; 0x32
 800f014:	4a27      	ldr	r2, [pc, #156]	; (800f0b4 <UART_SetConfig+0x384>)
 800f016:	fba2 2303 	umull	r2, r3, r2, r3
 800f01a:	095b      	lsrs	r3, r3, #5
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f022:	4498      	add	r8, r3
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	461d      	mov	r5, r3
 800f028:	f04f 0600 	mov.w	r6, #0
 800f02c:	46a9      	mov	r9, r5
 800f02e:	46b2      	mov	sl, r6
 800f030:	eb19 0309 	adds.w	r3, r9, r9
 800f034:	eb4a 040a 	adc.w	r4, sl, sl
 800f038:	4699      	mov	r9, r3
 800f03a:	46a2      	mov	sl, r4
 800f03c:	eb19 0905 	adds.w	r9, r9, r5
 800f040:	eb4a 0a06 	adc.w	sl, sl, r6
 800f044:	f04f 0100 	mov.w	r1, #0
 800f048:	f04f 0200 	mov.w	r2, #0
 800f04c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f058:	4689      	mov	r9, r1
 800f05a:	4692      	mov	sl, r2
 800f05c:	eb19 0005 	adds.w	r0, r9, r5
 800f060:	eb4a 0106 	adc.w	r1, sl, r6
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	461d      	mov	r5, r3
 800f06a:	f04f 0600 	mov.w	r6, #0
 800f06e:	196b      	adds	r3, r5, r5
 800f070:	eb46 0406 	adc.w	r4, r6, r6
 800f074:	461a      	mov	r2, r3
 800f076:	4623      	mov	r3, r4
 800f078:	f7f1 fe16 	bl	8000ca8 <__aeabi_uldivmod>
 800f07c:	4603      	mov	r3, r0
 800f07e:	460c      	mov	r4, r1
 800f080:	461a      	mov	r2, r3
 800f082:	4b0c      	ldr	r3, [pc, #48]	; (800f0b4 <UART_SetConfig+0x384>)
 800f084:	fba3 1302 	umull	r1, r3, r3, r2
 800f088:	095b      	lsrs	r3, r3, #5
 800f08a:	2164      	movs	r1, #100	; 0x64
 800f08c:	fb01 f303 	mul.w	r3, r1, r3
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	3332      	adds	r3, #50	; 0x32
 800f096:	4a07      	ldr	r2, [pc, #28]	; (800f0b4 <UART_SetConfig+0x384>)
 800f098:	fba2 2303 	umull	r2, r3, r2, r3
 800f09c:	095b      	lsrs	r3, r3, #5
 800f09e:	f003 0207 	and.w	r2, r3, #7
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4442      	add	r2, r8
 800f0a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f0aa:	e1b2      	b.n	800f412 <UART_SetConfig+0x6e2>
 800f0ac:	40011000 	.word	0x40011000
 800f0b0:	40011400 	.word	0x40011400
 800f0b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4ad7      	ldr	r2, [pc, #860]	; (800f41c <UART_SetConfig+0x6ec>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d005      	beq.n	800f0ce <UART_SetConfig+0x39e>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4ad6      	ldr	r2, [pc, #856]	; (800f420 <UART_SetConfig+0x6f0>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	f040 80d1 	bne.w	800f270 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f0ce:	f7fd fdb7 	bl	800cc40 <HAL_RCC_GetPCLK2Freq>
 800f0d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	469a      	mov	sl, r3
 800f0d8:	f04f 0b00 	mov.w	fp, #0
 800f0dc:	46d0      	mov	r8, sl
 800f0de:	46d9      	mov	r9, fp
 800f0e0:	eb18 0308 	adds.w	r3, r8, r8
 800f0e4:	eb49 0409 	adc.w	r4, r9, r9
 800f0e8:	4698      	mov	r8, r3
 800f0ea:	46a1      	mov	r9, r4
 800f0ec:	eb18 080a 	adds.w	r8, r8, sl
 800f0f0:	eb49 090b 	adc.w	r9, r9, fp
 800f0f4:	f04f 0100 	mov.w	r1, #0
 800f0f8:	f04f 0200 	mov.w	r2, #0
 800f0fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f100:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f104:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f108:	4688      	mov	r8, r1
 800f10a:	4691      	mov	r9, r2
 800f10c:	eb1a 0508 	adds.w	r5, sl, r8
 800f110:	eb4b 0609 	adc.w	r6, fp, r9
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	4619      	mov	r1, r3
 800f11a:	f04f 0200 	mov.w	r2, #0
 800f11e:	f04f 0300 	mov.w	r3, #0
 800f122:	f04f 0400 	mov.w	r4, #0
 800f126:	0094      	lsls	r4, r2, #2
 800f128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f12c:	008b      	lsls	r3, r1, #2
 800f12e:	461a      	mov	r2, r3
 800f130:	4623      	mov	r3, r4
 800f132:	4628      	mov	r0, r5
 800f134:	4631      	mov	r1, r6
 800f136:	f7f1 fdb7 	bl	8000ca8 <__aeabi_uldivmod>
 800f13a:	4603      	mov	r3, r0
 800f13c:	460c      	mov	r4, r1
 800f13e:	461a      	mov	r2, r3
 800f140:	4bb8      	ldr	r3, [pc, #736]	; (800f424 <UART_SetConfig+0x6f4>)
 800f142:	fba3 2302 	umull	r2, r3, r3, r2
 800f146:	095b      	lsrs	r3, r3, #5
 800f148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	469b      	mov	fp, r3
 800f150:	f04f 0c00 	mov.w	ip, #0
 800f154:	46d9      	mov	r9, fp
 800f156:	46e2      	mov	sl, ip
 800f158:	eb19 0309 	adds.w	r3, r9, r9
 800f15c:	eb4a 040a 	adc.w	r4, sl, sl
 800f160:	4699      	mov	r9, r3
 800f162:	46a2      	mov	sl, r4
 800f164:	eb19 090b 	adds.w	r9, r9, fp
 800f168:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f16c:	f04f 0100 	mov.w	r1, #0
 800f170:	f04f 0200 	mov.w	r2, #0
 800f174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f17c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f180:	4689      	mov	r9, r1
 800f182:	4692      	mov	sl, r2
 800f184:	eb1b 0509 	adds.w	r5, fp, r9
 800f188:	eb4c 060a 	adc.w	r6, ip, sl
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	4619      	mov	r1, r3
 800f192:	f04f 0200 	mov.w	r2, #0
 800f196:	f04f 0300 	mov.w	r3, #0
 800f19a:	f04f 0400 	mov.w	r4, #0
 800f19e:	0094      	lsls	r4, r2, #2
 800f1a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1a4:	008b      	lsls	r3, r1, #2
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	4623      	mov	r3, r4
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	f7f1 fd7b 	bl	8000ca8 <__aeabi_uldivmod>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	4b9a      	ldr	r3, [pc, #616]	; (800f424 <UART_SetConfig+0x6f4>)
 800f1ba:	fba3 1302 	umull	r1, r3, r3, r2
 800f1be:	095b      	lsrs	r3, r3, #5
 800f1c0:	2164      	movs	r1, #100	; 0x64
 800f1c2:	fb01 f303 	mul.w	r3, r1, r3
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	011b      	lsls	r3, r3, #4
 800f1ca:	3332      	adds	r3, #50	; 0x32
 800f1cc:	4a95      	ldr	r2, [pc, #596]	; (800f424 <UART_SetConfig+0x6f4>)
 800f1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d2:	095b      	lsrs	r3, r3, #5
 800f1d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1d8:	4498      	add	r8, r3
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	469b      	mov	fp, r3
 800f1de:	f04f 0c00 	mov.w	ip, #0
 800f1e2:	46d9      	mov	r9, fp
 800f1e4:	46e2      	mov	sl, ip
 800f1e6:	eb19 0309 	adds.w	r3, r9, r9
 800f1ea:	eb4a 040a 	adc.w	r4, sl, sl
 800f1ee:	4699      	mov	r9, r3
 800f1f0:	46a2      	mov	sl, r4
 800f1f2:	eb19 090b 	adds.w	r9, r9, fp
 800f1f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1fa:	f04f 0100 	mov.w	r1, #0
 800f1fe:	f04f 0200 	mov.w	r2, #0
 800f202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f20a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f20e:	4689      	mov	r9, r1
 800f210:	4692      	mov	sl, r2
 800f212:	eb1b 0509 	adds.w	r5, fp, r9
 800f216:	eb4c 060a 	adc.w	r6, ip, sl
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	4619      	mov	r1, r3
 800f220:	f04f 0200 	mov.w	r2, #0
 800f224:	f04f 0300 	mov.w	r3, #0
 800f228:	f04f 0400 	mov.w	r4, #0
 800f22c:	0094      	lsls	r4, r2, #2
 800f22e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f232:	008b      	lsls	r3, r1, #2
 800f234:	461a      	mov	r2, r3
 800f236:	4623      	mov	r3, r4
 800f238:	4628      	mov	r0, r5
 800f23a:	4631      	mov	r1, r6
 800f23c:	f7f1 fd34 	bl	8000ca8 <__aeabi_uldivmod>
 800f240:	4603      	mov	r3, r0
 800f242:	460c      	mov	r4, r1
 800f244:	461a      	mov	r2, r3
 800f246:	4b77      	ldr	r3, [pc, #476]	; (800f424 <UART_SetConfig+0x6f4>)
 800f248:	fba3 1302 	umull	r1, r3, r3, r2
 800f24c:	095b      	lsrs	r3, r3, #5
 800f24e:	2164      	movs	r1, #100	; 0x64
 800f250:	fb01 f303 	mul.w	r3, r1, r3
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	011b      	lsls	r3, r3, #4
 800f258:	3332      	adds	r3, #50	; 0x32
 800f25a:	4a72      	ldr	r2, [pc, #456]	; (800f424 <UART_SetConfig+0x6f4>)
 800f25c:	fba2 2303 	umull	r2, r3, r2, r3
 800f260:	095b      	lsrs	r3, r3, #5
 800f262:	f003 020f 	and.w	r2, r3, #15
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4442      	add	r2, r8
 800f26c:	609a      	str	r2, [r3, #8]
 800f26e:	e0d0      	b.n	800f412 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f270:	f7fd fcd2 	bl	800cc18 <HAL_RCC_GetPCLK1Freq>
 800f274:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	469a      	mov	sl, r3
 800f27a:	f04f 0b00 	mov.w	fp, #0
 800f27e:	46d0      	mov	r8, sl
 800f280:	46d9      	mov	r9, fp
 800f282:	eb18 0308 	adds.w	r3, r8, r8
 800f286:	eb49 0409 	adc.w	r4, r9, r9
 800f28a:	4698      	mov	r8, r3
 800f28c:	46a1      	mov	r9, r4
 800f28e:	eb18 080a 	adds.w	r8, r8, sl
 800f292:	eb49 090b 	adc.w	r9, r9, fp
 800f296:	f04f 0100 	mov.w	r1, #0
 800f29a:	f04f 0200 	mov.w	r2, #0
 800f29e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f2a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f2a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f2aa:	4688      	mov	r8, r1
 800f2ac:	4691      	mov	r9, r2
 800f2ae:	eb1a 0508 	adds.w	r5, sl, r8
 800f2b2:	eb4b 0609 	adc.w	r6, fp, r9
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	f04f 0200 	mov.w	r2, #0
 800f2c0:	f04f 0300 	mov.w	r3, #0
 800f2c4:	f04f 0400 	mov.w	r4, #0
 800f2c8:	0094      	lsls	r4, r2, #2
 800f2ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2ce:	008b      	lsls	r3, r1, #2
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	4623      	mov	r3, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	4631      	mov	r1, r6
 800f2d8:	f7f1 fce6 	bl	8000ca8 <__aeabi_uldivmod>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4b50      	ldr	r3, [pc, #320]	; (800f424 <UART_SetConfig+0x6f4>)
 800f2e4:	fba3 2302 	umull	r2, r3, r3, r2
 800f2e8:	095b      	lsrs	r3, r3, #5
 800f2ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	469b      	mov	fp, r3
 800f2f2:	f04f 0c00 	mov.w	ip, #0
 800f2f6:	46d9      	mov	r9, fp
 800f2f8:	46e2      	mov	sl, ip
 800f2fa:	eb19 0309 	adds.w	r3, r9, r9
 800f2fe:	eb4a 040a 	adc.w	r4, sl, sl
 800f302:	4699      	mov	r9, r3
 800f304:	46a2      	mov	sl, r4
 800f306:	eb19 090b 	adds.w	r9, r9, fp
 800f30a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f30e:	f04f 0100 	mov.w	r1, #0
 800f312:	f04f 0200 	mov.w	r2, #0
 800f316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f31a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f31e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f322:	4689      	mov	r9, r1
 800f324:	4692      	mov	sl, r2
 800f326:	eb1b 0509 	adds.w	r5, fp, r9
 800f32a:	eb4c 060a 	adc.w	r6, ip, sl
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	4619      	mov	r1, r3
 800f334:	f04f 0200 	mov.w	r2, #0
 800f338:	f04f 0300 	mov.w	r3, #0
 800f33c:	f04f 0400 	mov.w	r4, #0
 800f340:	0094      	lsls	r4, r2, #2
 800f342:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f346:	008b      	lsls	r3, r1, #2
 800f348:	461a      	mov	r2, r3
 800f34a:	4623      	mov	r3, r4
 800f34c:	4628      	mov	r0, r5
 800f34e:	4631      	mov	r1, r6
 800f350:	f7f1 fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 800f354:	4603      	mov	r3, r0
 800f356:	460c      	mov	r4, r1
 800f358:	461a      	mov	r2, r3
 800f35a:	4b32      	ldr	r3, [pc, #200]	; (800f424 <UART_SetConfig+0x6f4>)
 800f35c:	fba3 1302 	umull	r1, r3, r3, r2
 800f360:	095b      	lsrs	r3, r3, #5
 800f362:	2164      	movs	r1, #100	; 0x64
 800f364:	fb01 f303 	mul.w	r3, r1, r3
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	011b      	lsls	r3, r3, #4
 800f36c:	3332      	adds	r3, #50	; 0x32
 800f36e:	4a2d      	ldr	r2, [pc, #180]	; (800f424 <UART_SetConfig+0x6f4>)
 800f370:	fba2 2303 	umull	r2, r3, r2, r3
 800f374:	095b      	lsrs	r3, r3, #5
 800f376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f37a:	4498      	add	r8, r3
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	469b      	mov	fp, r3
 800f380:	f04f 0c00 	mov.w	ip, #0
 800f384:	46d9      	mov	r9, fp
 800f386:	46e2      	mov	sl, ip
 800f388:	eb19 0309 	adds.w	r3, r9, r9
 800f38c:	eb4a 040a 	adc.w	r4, sl, sl
 800f390:	4699      	mov	r9, r3
 800f392:	46a2      	mov	sl, r4
 800f394:	eb19 090b 	adds.w	r9, r9, fp
 800f398:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f39c:	f04f 0100 	mov.w	r1, #0
 800f3a0:	f04f 0200 	mov.w	r2, #0
 800f3a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f3ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f3b0:	4689      	mov	r9, r1
 800f3b2:	4692      	mov	sl, r2
 800f3b4:	eb1b 0509 	adds.w	r5, fp, r9
 800f3b8:	eb4c 060a 	adc.w	r6, ip, sl
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	f04f 0200 	mov.w	r2, #0
 800f3c6:	f04f 0300 	mov.w	r3, #0
 800f3ca:	f04f 0400 	mov.w	r4, #0
 800f3ce:	0094      	lsls	r4, r2, #2
 800f3d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3d4:	008b      	lsls	r3, r1, #2
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	4623      	mov	r3, r4
 800f3da:	4628      	mov	r0, r5
 800f3dc:	4631      	mov	r1, r6
 800f3de:	f7f1 fc63 	bl	8000ca8 <__aeabi_uldivmod>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	4b0e      	ldr	r3, [pc, #56]	; (800f424 <UART_SetConfig+0x6f4>)
 800f3ea:	fba3 1302 	umull	r1, r3, r3, r2
 800f3ee:	095b      	lsrs	r3, r3, #5
 800f3f0:	2164      	movs	r1, #100	; 0x64
 800f3f2:	fb01 f303 	mul.w	r3, r1, r3
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	011b      	lsls	r3, r3, #4
 800f3fa:	3332      	adds	r3, #50	; 0x32
 800f3fc:	4a09      	ldr	r2, [pc, #36]	; (800f424 <UART_SetConfig+0x6f4>)
 800f3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f402:	095b      	lsrs	r3, r3, #5
 800f404:	f003 020f 	and.w	r2, r3, #15
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4442      	add	r2, r8
 800f40e:	609a      	str	r2, [r3, #8]
}
 800f410:	e7ff      	b.n	800f412 <UART_SetConfig+0x6e2>
 800f412:	bf00      	nop
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41c:	40011000 	.word	0x40011000
 800f420:	40011400 	.word	0x40011400
 800f424:	51eb851f 	.word	0x51eb851f

0800f428 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f42e:	f000 fb1f 	bl	800fa70 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800f432:	4b19      	ldr	r3, [pc, #100]	; (800f498 <MX_LWIP_Init+0x70>)
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800f438:	4b18      	ldr	r3, [pc, #96]	; (800f49c <MX_LWIP_Init+0x74>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800f43e:	4b18      	ldr	r3, [pc, #96]	; (800f4a0 <MX_LWIP_Init+0x78>)
 800f440:	2200      	movs	r2, #0
 800f442:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f444:	4b17      	ldr	r3, [pc, #92]	; (800f4a4 <MX_LWIP_Init+0x7c>)
 800f446:	9302      	str	r3, [sp, #8]
 800f448:	4b17      	ldr	r3, [pc, #92]	; (800f4a8 <MX_LWIP_Init+0x80>)
 800f44a:	9301      	str	r3, [sp, #4]
 800f44c:	2300      	movs	r3, #0
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	4b13      	ldr	r3, [pc, #76]	; (800f4a0 <MX_LWIP_Init+0x78>)
 800f452:	4a12      	ldr	r2, [pc, #72]	; (800f49c <MX_LWIP_Init+0x74>)
 800f454:	4910      	ldr	r1, [pc, #64]	; (800f498 <MX_LWIP_Init+0x70>)
 800f456:	4815      	ldr	r0, [pc, #84]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f458:	f000 ffb0 	bl	80103bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f45c:	4813      	ldr	r0, [pc, #76]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f45e:	f001 f967 	bl	8010730 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f462:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f464:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f468:	089b      	lsrs	r3, r3, #2
 800f46a:	f003 0301 	and.w	r3, r3, #1
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d003      	beq.n	800f47c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f474:	480d      	ldr	r0, [pc, #52]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f476:	f001 f96b 	bl	8010750 <netif_set_up>
 800f47a:	e002      	b.n	800f482 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f47c:	480b      	ldr	r0, [pc, #44]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f47e:	f001 f9d3 	bl	8010828 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800f482:	490b      	ldr	r1, [pc, #44]	; (800f4b0 <MX_LWIP_Init+0x88>)
 800f484:	4809      	ldr	r0, [pc, #36]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f486:	f001 fa01 	bl	801088c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800f48a:	4808      	ldr	r0, [pc, #32]	; (800f4ac <MX_LWIP_Init+0x84>)
 800f48c:	f008 fa8e 	bl	80179ac <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f490:	bf00      	nop
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	200020ac 	.word	0x200020ac
 800f49c:	200020b0 	.word	0x200020b0
 800f4a0:	200020b4 	.word	0x200020b4
 800f4a4:	0801b369 	.word	0x0801b369
 800f4a8:	0800f89d 	.word	0x0800f89d
 800f4ac:	20002074 	.word	0x20002074
 800f4b0:	0800f909 	.word	0x0800f909

0800f4b4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b08e      	sub	sp, #56	; 0x38
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	601a      	str	r2, [r3, #0]
 800f4c4:	605a      	str	r2, [r3, #4]
 800f4c6:	609a      	str	r2, [r3, #8]
 800f4c8:	60da      	str	r2, [r3, #12]
 800f4ca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a46      	ldr	r2, [pc, #280]	; (800f5ec <HAL_ETH_MspInit+0x138>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	f040 8085 	bne.w	800f5e2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800f4d8:	2300      	movs	r3, #0
 800f4da:	623b      	str	r3, [r7, #32]
 800f4dc:	4b44      	ldr	r3, [pc, #272]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e0:	4a43      	ldr	r2, [pc, #268]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f4e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f4e6:	6313      	str	r3, [r2, #48]	; 0x30
 800f4e8:	4b41      	ldr	r3, [pc, #260]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4f0:	623b      	str	r3, [r7, #32]
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	61fb      	str	r3, [r7, #28]
 800f4f8:	4b3d      	ldr	r3, [pc, #244]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fc:	4a3c      	ldr	r2, [pc, #240]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f4fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f502:	6313      	str	r3, [r2, #48]	; 0x30
 800f504:	4b3a      	ldr	r3, [pc, #232]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	2300      	movs	r3, #0
 800f512:	61bb      	str	r3, [r7, #24]
 800f514:	4b36      	ldr	r3, [pc, #216]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f518:	4a35      	ldr	r2, [pc, #212]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f51a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f51e:	6313      	str	r3, [r2, #48]	; 0x30
 800f520:	4b33      	ldr	r3, [pc, #204]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f528:	61bb      	str	r3, [r7, #24]
 800f52a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	4b2f      	ldr	r3, [pc, #188]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f534:	4a2e      	ldr	r2, [pc, #184]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f536:	f043 0304 	orr.w	r3, r3, #4
 800f53a:	6313      	str	r3, [r2, #48]	; 0x30
 800f53c:	4b2c      	ldr	r3, [pc, #176]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f540:	f003 0304 	and.w	r3, r3, #4
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
 800f54c:	4b28      	ldr	r3, [pc, #160]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f550:	4a27      	ldr	r2, [pc, #156]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f552:	f043 0301 	orr.w	r3, r3, #1
 800f556:	6313      	str	r3, [r2, #48]	; 0x30
 800f558:	4b25      	ldr	r3, [pc, #148]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f564:	2300      	movs	r3, #0
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	4b21      	ldr	r3, [pc, #132]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f56c:	4a20      	ldr	r2, [pc, #128]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f56e:	f043 0302 	orr.w	r3, r3, #2
 800f572:	6313      	str	r3, [r2, #48]	; 0x30
 800f574:	4b1e      	ldr	r3, [pc, #120]	; (800f5f0 <HAL_ETH_MspInit+0x13c>)
 800f576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f580:	2332      	movs	r3, #50	; 0x32
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f584:	2302      	movs	r3, #2
 800f586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f588:	2300      	movs	r3, #0
 800f58a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f58c:	2303      	movs	r3, #3
 800f58e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f590:	230b      	movs	r3, #11
 800f592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f598:	4619      	mov	r1, r3
 800f59a:	4816      	ldr	r0, [pc, #88]	; (800f5f4 <HAL_ETH_MspInit+0x140>)
 800f59c:	f7fc fd1e 	bl	800bfdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f5a0:	2386      	movs	r3, #134	; 0x86
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5a4:	2302      	movs	r3, #2
 800f5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5b0:	230b      	movs	r3, #11
 800f5b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	480f      	ldr	r0, [pc, #60]	; (800f5f8 <HAL_ETH_MspInit+0x144>)
 800f5bc:	f7fc fd0e 	bl	800bfdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800f5c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f5c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5d2:	230b      	movs	r3, #11
 800f5d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4807      	ldr	r0, [pc, #28]	; (800f5fc <HAL_ETH_MspInit+0x148>)
 800f5de:	f7fc fcfd 	bl	800bfdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f5e2:	bf00      	nop
 800f5e4:	3738      	adds	r7, #56	; 0x38
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	40028000 	.word	0x40028000
 800f5f0:	40023800 	.word	0x40023800
 800f5f4:	40020800 	.word	0x40020800
 800f5f8:	40020000 	.word	0x40020000
 800f5fc:	40020400 	.word	0x40020400

0800f600 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f60c:	4b4e      	ldr	r3, [pc, #312]	; (800f748 <low_level_init+0x148>)
 800f60e:	4a4f      	ldr	r2, [pc, #316]	; (800f74c <low_level_init+0x14c>)
 800f610:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f612:	4b4d      	ldr	r3, [pc, #308]	; (800f748 <low_level_init+0x148>)
 800f614:	2201      	movs	r2, #1
 800f616:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800f618:	4b4b      	ldr	r3, [pc, #300]	; (800f748 <low_level_init+0x148>)
 800f61a:	2201      	movs	r2, #1
 800f61c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800f61e:	2302      	movs	r3, #2
 800f620:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800f622:	2300      	movs	r3, #0
 800f624:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800f626:	2300      	movs	r3, #0
 800f628:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f62a:	2300      	movs	r3, #0
 800f62c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f62e:	2300      	movs	r3, #0
 800f630:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f632:	2300      	movs	r3, #0
 800f634:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f636:	4a44      	ldr	r2, [pc, #272]	; (800f748 <low_level_init+0x148>)
 800f638:	f107 0308 	add.w	r3, r7, #8
 800f63c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800f63e:	4b42      	ldr	r3, [pc, #264]	; (800f748 <low_level_init+0x148>)
 800f640:	2200      	movs	r2, #0
 800f642:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800f644:	4b40      	ldr	r3, [pc, #256]	; (800f748 <low_level_init+0x148>)
 800f646:	2200      	movs	r2, #0
 800f648:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f64a:	4b3f      	ldr	r3, [pc, #252]	; (800f748 <low_level_init+0x148>)
 800f64c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f650:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f652:	483d      	ldr	r0, [pc, #244]	; (800f748 <low_level_init+0x148>)
 800f654:	f7fb fc20 	bl	800ae98 <HAL_ETH_Init>
 800f658:	4603      	mov	r3, r0
 800f65a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d108      	bne.n	800f674 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f668:	f043 0304 	orr.w	r3, r3, #4
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f674:	2304      	movs	r3, #4
 800f676:	4a36      	ldr	r2, [pc, #216]	; (800f750 <low_level_init+0x150>)
 800f678:	4936      	ldr	r1, [pc, #216]	; (800f754 <low_level_init+0x154>)
 800f67a:	4833      	ldr	r0, [pc, #204]	; (800f748 <low_level_init+0x148>)
 800f67c:	f7fb fdaa 	bl	800b1d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800f680:	2304      	movs	r3, #4
 800f682:	4a35      	ldr	r2, [pc, #212]	; (800f758 <low_level_init+0x158>)
 800f684:	4935      	ldr	r1, [pc, #212]	; (800f75c <low_level_init+0x15c>)
 800f686:	4830      	ldr	r0, [pc, #192]	; (800f748 <low_level_init+0x148>)
 800f688:	f7fb fe0d 	bl	800b2a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2206      	movs	r2, #6
 800f690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f694:	4b2c      	ldr	r3, [pc, #176]	; (800f748 <low_level_init+0x148>)
 800f696:	695b      	ldr	r3, [r3, #20]
 800f698:	781a      	ldrb	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f6a0:	4b29      	ldr	r3, [pc, #164]	; (800f748 <low_level_init+0x148>)
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	785a      	ldrb	r2, [r3, #1]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f6ac:	4b26      	ldr	r3, [pc, #152]	; (800f748 <low_level_init+0x148>)
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	789a      	ldrb	r2, [r3, #2]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f6b8:	4b23      	ldr	r3, [pc, #140]	; (800f748 <low_level_init+0x148>)
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	78da      	ldrb	r2, [r3, #3]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f6c4:	4b20      	ldr	r3, [pc, #128]	; (800f748 <low_level_init+0x148>)
 800f6c6:	695b      	ldr	r3, [r3, #20]
 800f6c8:	791a      	ldrb	r2, [r3, #4]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f6d0:	4b1d      	ldr	r3, [pc, #116]	; (800f748 <low_level_init+0x148>)
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	795a      	ldrb	r2, [r3, #5]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f6e2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f6ea:	f043 030a 	orr.w	r3, r3, #10
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800f6f6:	4814      	ldr	r0, [pc, #80]	; (800f748 <low_level_init+0x148>)
 800f6f8:	f7fb fffa 	bl	800b6f0 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800f6fc:	f107 0310 	add.w	r3, r7, #16
 800f700:	461a      	mov	r2, r3
 800f702:	2111      	movs	r1, #17
 800f704:	4810      	ldr	r0, [pc, #64]	; (800f748 <low_level_init+0x148>)
 800f706:	f7fb ff25 	bl	800b554 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	f043 0303 	orr.w	r3, r3, #3
 800f710:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	461a      	mov	r2, r3
 800f716:	2111      	movs	r1, #17
 800f718:	480b      	ldr	r0, [pc, #44]	; (800f748 <low_level_init+0x148>)
 800f71a:	f7fb ff83 	bl	800b624 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800f71e:	f107 0310 	add.w	r3, r7, #16
 800f722:	461a      	mov	r2, r3
 800f724:	2112      	movs	r1, #18
 800f726:	4808      	ldr	r0, [pc, #32]	; (800f748 <low_level_init+0x148>)
 800f728:	f7fb ff14 	bl	800b554 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	f043 0320 	orr.w	r3, r3, #32
 800f732:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	461a      	mov	r2, r3
 800f738:	2112      	movs	r1, #18
 800f73a:	4803      	ldr	r0, [pc, #12]	; (800f748 <low_level_init+0x148>)
 800f73c:	f7fb ff72 	bl	800b624 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f740:	bf00      	nop
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	20003988 	.word	0x20003988
 800f74c:	40028000 	.word	0x40028000
 800f750:	200039d0 	.word	0x200039d0
 800f754:	200020b8 	.word	0x200020b8
 800f758:	20002138 	.word	0x20002138
 800f75c:	20003908 	.word	0x20003908

0800f760 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	; 0x28
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f76a:	4b4b      	ldr	r3, [pc, #300]	; (800f898 <low_level_output+0x138>)
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800f782:	4b45      	ldr	r3, [pc, #276]	; (800f898 <low_level_output+0x138>)
 800f784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f786:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	623b      	str	r3, [r7, #32]
 800f790:	e05a      	b.n	800f848 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	da03      	bge.n	800f7a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800f79a:	23f8      	movs	r3, #248	; 0xf8
 800f79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800f7a0:	e05c      	b.n	800f85c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	895b      	ldrh	r3, [r3, #10]
 800f7a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f7ac:	e02f      	b.n	800f80e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f7ae:	69fa      	ldr	r2, [r7, #28]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	18d0      	adds	r0, r2, r3
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	685a      	ldr	r2, [r3, #4]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	18d1      	adds	r1, r2, r3
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	f00b ff14 	bl	801b5f2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	da03      	bge.n	800f7e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800f7d8:	23f8      	movs	r3, #248	; 0xf8
 800f7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800f7de:	e03d      	b.n	800f85c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f7f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f7f2:	68ba      	ldr	r2, [r7, #8]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f7fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f808:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800f80a:	2300      	movs	r3, #0
 800f80c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	4413      	add	r3, r2
 800f814:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f818:	4293      	cmp	r3, r2
 800f81a:	d8c8      	bhi.n	800f7ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f81c:	69fa      	ldr	r2, [r7, #28]
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	18d0      	adds	r0, r2, r3
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	685a      	ldr	r2, [r3, #4]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	4413      	add	r3, r2
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	4619      	mov	r1, r3
 800f82e:	f00b fee0 	bl	801b5f2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	4413      	add	r3, r2
 800f838:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	4413      	add	r3, r2
 800f840:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	623b      	str	r3, [r7, #32]
 800f848:	6a3b      	ldr	r3, [r7, #32]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1a1      	bne.n	800f792 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f84e:	6979      	ldr	r1, [r7, #20]
 800f850:	4811      	ldr	r0, [pc, #68]	; (800f898 <low_level_output+0x138>)
 800f852:	f7fb fd95 	bl	800b380 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f85c:	4b0e      	ldr	r3, [pc, #56]	; (800f898 <low_level_output+0x138>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f864:	3314      	adds	r3, #20
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f003 0320 	and.w	r3, r3, #32
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00d      	beq.n	800f88c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f870:	4b09      	ldr	r3, [pc, #36]	; (800f898 <low_level_output+0x138>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f878:	3314      	adds	r3, #20
 800f87a:	2220      	movs	r2, #32
 800f87c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f87e:	4b06      	ldr	r3, [pc, #24]	; (800f898 <low_level_output+0x138>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f886:	3304      	adds	r3, #4
 800f888:	2200      	movs	r2, #0
 800f88a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800f88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f890:	4618      	mov	r0, r3
 800f892:	3728      	adds	r7, #40	; 0x28
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	20003988 	.word	0x20003988

0800f89c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d106      	bne.n	800f8b8 <ethernetif_init+0x1c>
 800f8aa:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <ethernetif_init+0x48>)
 800f8ac:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f8b0:	490d      	ldr	r1, [pc, #52]	; (800f8e8 <ethernetif_init+0x4c>)
 800f8b2:	480e      	ldr	r0, [pc, #56]	; (800f8ec <ethernetif_init+0x50>)
 800f8b4:	f00c fbce 	bl	801c054 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2273      	movs	r2, #115	; 0x73
 800f8bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2274      	movs	r2, #116	; 0x74
 800f8c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a09      	ldr	r2, [pc, #36]	; (800f8f0 <ethernetif_init+0x54>)
 800f8cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a08      	ldr	r2, [pc, #32]	; (800f8f4 <ethernetif_init+0x58>)
 800f8d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff fe93 	bl	800f600 <low_level_init>

  return ERR_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	080215a8 	.word	0x080215a8
 800f8e8:	080215c4 	.word	0x080215c4
 800f8ec:	080215d4 	.word	0x080215d4
 800f8f0:	080197fd 	.word	0x080197fd
 800f8f4:	0800f761 	.word	0x0800f761

0800f8f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f8fc:	f7fa f9da 	bl	8009cb4 <HAL_GetTick>
 800f900:	4603      	mov	r3, r0
}
 800f902:	4618      	mov	r0, r3
 800f904:	bd80      	pop	{r7, pc}
	...

0800f908 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800f910:	2300      	movs	r3, #0
 800f912:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f91e:	089b      	lsrs	r3, r3, #2
 800f920:	f003 0301 	and.w	r3, r3, #1
 800f924:	b2db      	uxtb	r3, r3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d05d      	beq.n	800f9e6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800f92a:	4b34      	ldr	r3, [pc, #208]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d03f      	beq.n	800f9b2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800f932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f936:	2100      	movs	r1, #0
 800f938:	4830      	ldr	r0, [pc, #192]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f93a:	f7fb fe73 	bl	800b624 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800f93e:	f7fa f9b9 	bl	8009cb4 <HAL_GetTick>
 800f942:	4603      	mov	r3, r0
 800f944:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800f946:	f107 0308 	add.w	r3, r7, #8
 800f94a:	461a      	mov	r2, r3
 800f94c:	2101      	movs	r1, #1
 800f94e:	482b      	ldr	r0, [pc, #172]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f950:	f7fb fe00 	bl	800b554 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800f954:	f7fa f9ae 	bl	8009cb4 <HAL_GetTick>
 800f958:	4602      	mov	r2, r0
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f962:	d828      	bhi.n	800f9b6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0eb      	beq.n	800f946 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800f96e:	f107 0308 	add.w	r3, r7, #8
 800f972:	461a      	mov	r2, r3
 800f974:	211f      	movs	r1, #31
 800f976:	4821      	ldr	r0, [pc, #132]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f978:	f7fb fdec 	bl	800b554 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f003 0310 	and.w	r3, r3, #16
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800f986:	4b1d      	ldr	r3, [pc, #116]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f98c:	60da      	str	r2, [r3, #12]
 800f98e:	e002      	b.n	800f996 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800f990:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f992:	2200      	movs	r2, #0
 800f994:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f003 0304 	and.w	r3, r3, #4
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d003      	beq.n	800f9a8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800f9a0:	4b16      	ldr	r3, [pc, #88]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	609a      	str	r2, [r3, #8]
 800f9a6:	e016      	b.n	800f9d6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800f9a8:	4b14      	ldr	r3, [pc, #80]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f9ae:	609a      	str	r2, [r3, #8]
 800f9b0:	e011      	b.n	800f9d6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800f9b2:	bf00      	nop
 800f9b4:	e000      	b.n	800f9b8 <ethernetif_update_config+0xb0>
          goto error;
 800f9b6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f9b8:	4b10      	ldr	r3, [pc, #64]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	08db      	lsrs	r3, r3, #3
 800f9be:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800f9c0:	4b0e      	ldr	r3, [pc, #56]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	085b      	lsrs	r3, r3, #1
 800f9c6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	480a      	ldr	r0, [pc, #40]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9d2:	f7fb fe27 	bl	800b624 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	4808      	ldr	r0, [pc, #32]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9da:	f7fb fee7 	bl	800b7ac <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800f9de:	4807      	ldr	r0, [pc, #28]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9e0:	f7fb fe86 	bl	800b6f0 <HAL_ETH_Start>
 800f9e4:	e002      	b.n	800f9ec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800f9e6:	4805      	ldr	r0, [pc, #20]	; (800f9fc <ethernetif_update_config+0xf4>)
 800f9e8:	f7fb feb1 	bl	800b74e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f807 	bl	800fa00 <ethernetif_notify_conn_changed>
}
 800f9f2:	bf00      	nop
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20003988 	.word	0x20003988

0800fa00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800fa08:	bf00      	nop
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fa1e:	88fb      	ldrh	r3, [r7, #6]
 800fa20:	021b      	lsls	r3, r3, #8
 800fa22:	b21a      	sxth	r2, r3
 800fa24:	88fb      	ldrh	r3, [r7, #6]
 800fa26:	0a1b      	lsrs	r3, r3, #8
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	b21b      	sxth	r3, r3
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	b21b      	sxth	r3, r3
 800fa30:	b29b      	uxth	r3, r3
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b083      	sub	sp, #12
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	061a      	lsls	r2, r3, #24
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa52:	431a      	orrs	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	0a1b      	lsrs	r3, r3, #8
 800fa58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	0e1b      	lsrs	r3, r3, #24
 800fa62:	4313      	orrs	r3, r2
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fa7a:	f000 f8d5 	bl	800fc28 <mem_init>
  memp_init();
 800fa7e:	f000 fbdb 	bl	8010238 <memp_init>
  pbuf_init();
  netif_init();
 800fa82:	f000 fc93 	bl	80103ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa86:	f006 ff59 	bl	801693c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa8a:	f001 fcf9 	bl	8011480 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa8e:	f006 ff0f 	bl	80168b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800faa6:	4b05      	ldr	r3, [pc, #20]	; (800fabc <ptr_to_mem+0x20>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	88fb      	ldrh	r3, [r7, #6]
 800faac:	4413      	add	r3, r2
}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	20001000 	.word	0x20001000

0800fac0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4a05      	ldr	r2, [pc, #20]	; (800fae0 <mem_to_ptr+0x20>)
 800facc:	6812      	ldr	r2, [r2, #0]
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	b29b      	uxth	r3, r3
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	20001000 	.word	0x20001000

0800fae4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fae4:	b590      	push	{r4, r7, lr}
 800fae6:	b085      	sub	sp, #20
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800faec:	4b45      	ldr	r3, [pc, #276]	; (800fc04 <plug_holes+0x120>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d206      	bcs.n	800fb04 <plug_holes+0x20>
 800faf6:	4b44      	ldr	r3, [pc, #272]	; (800fc08 <plug_holes+0x124>)
 800faf8:	f240 12df 	movw	r2, #479	; 0x1df
 800fafc:	4943      	ldr	r1, [pc, #268]	; (800fc0c <plug_holes+0x128>)
 800fafe:	4844      	ldr	r0, [pc, #272]	; (800fc10 <plug_holes+0x12c>)
 800fb00:	f00c faa8 	bl	801c054 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fb04:	4b43      	ldr	r3, [pc, #268]	; (800fc14 <plug_holes+0x130>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d306      	bcc.n	800fb1c <plug_holes+0x38>
 800fb0e:	4b3e      	ldr	r3, [pc, #248]	; (800fc08 <plug_holes+0x124>)
 800fb10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fb14:	4940      	ldr	r1, [pc, #256]	; (800fc18 <plug_holes+0x134>)
 800fb16:	483e      	ldr	r0, [pc, #248]	; (800fc10 <plug_holes+0x12c>)
 800fb18:	f00c fa9c 	bl	801c054 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	791b      	ldrb	r3, [r3, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d006      	beq.n	800fb32 <plug_holes+0x4e>
 800fb24:	4b38      	ldr	r3, [pc, #224]	; (800fc08 <plug_holes+0x124>)
 800fb26:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb2a:	493c      	ldr	r1, [pc, #240]	; (800fc1c <plug_holes+0x138>)
 800fb2c:	4838      	ldr	r0, [pc, #224]	; (800fc10 <plug_holes+0x12c>)
 800fb2e:	f00c fa91 	bl	801c054 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb3a:	d906      	bls.n	800fb4a <plug_holes+0x66>
 800fb3c:	4b32      	ldr	r3, [pc, #200]	; (800fc08 <plug_holes+0x124>)
 800fb3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fb42:	4937      	ldr	r1, [pc, #220]	; (800fc20 <plug_holes+0x13c>)
 800fb44:	4832      	ldr	r0, [pc, #200]	; (800fc10 <plug_holes+0x12c>)
 800fb46:	f00c fa85 	bl	801c054 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff ffa4 	bl	800fa9c <ptr_to_mem>
 800fb54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d024      	beq.n	800fba8 <plug_holes+0xc4>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	791b      	ldrb	r3, [r3, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d120      	bne.n	800fba8 <plug_holes+0xc4>
 800fb66:	4b2b      	ldr	r3, [pc, #172]	; (800fc14 <plug_holes+0x130>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d01b      	beq.n	800fba8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb70:	4b2c      	ldr	r3, [pc, #176]	; (800fc24 <plug_holes+0x140>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d102      	bne.n	800fb80 <plug_holes+0x9c>
      lfree = mem;
 800fb7a:	4a2a      	ldr	r2, [pc, #168]	; (800fc24 <plug_holes+0x140>)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	881a      	ldrh	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb90:	d00a      	beq.n	800fba8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7ff ff80 	bl	800fa9c <ptr_to_mem>
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7ff ff8e 	bl	800fac0 <mem_to_ptr>
 800fba4:	4603      	mov	r3, r0
 800fba6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	885b      	ldrh	r3, [r3, #2]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7ff ff75 	bl	800fa9c <ptr_to_mem>
 800fbb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d01f      	beq.n	800fbfc <plug_holes+0x118>
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	791b      	ldrb	r3, [r3, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d11b      	bne.n	800fbfc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fbc4:	4b17      	ldr	r3, [pc, #92]	; (800fc24 <plug_holes+0x140>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d102      	bne.n	800fbd4 <plug_holes+0xf0>
      lfree = pmem;
 800fbce:	4a15      	ldr	r2, [pc, #84]	; (800fc24 <plug_holes+0x140>)
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	881a      	ldrh	r2, [r3, #0]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	881b      	ldrh	r3, [r3, #0]
 800fbe0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbe4:	d00a      	beq.n	800fbfc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff ff56 	bl	800fa9c <ptr_to_mem>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	68b8      	ldr	r0, [r7, #8]
 800fbf4:	f7ff ff64 	bl	800fac0 <mem_to_ptr>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbfc:	bf00      	nop
 800fbfe:	3714      	adds	r7, #20
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd90      	pop	{r4, r7, pc}
 800fc04:	20001000 	.word	0x20001000
 800fc08:	080215fc 	.word	0x080215fc
 800fc0c:	0802162c 	.word	0x0802162c
 800fc10:	08021644 	.word	0x08021644
 800fc14:	20001004 	.word	0x20001004
 800fc18:	0802166c 	.word	0x0802166c
 800fc1c:	08021688 	.word	0x08021688
 800fc20:	080216a4 	.word	0x080216a4
 800fc24:	20001008 	.word	0x20001008

0800fc28 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc2e:	4b18      	ldr	r3, [pc, #96]	; (800fc90 <mem_init+0x68>)
 800fc30:	3303      	adds	r3, #3
 800fc32:	f023 0303 	bic.w	r3, r3, #3
 800fc36:	461a      	mov	r2, r3
 800fc38:	4b16      	ldr	r3, [pc, #88]	; (800fc94 <mem_init+0x6c>)
 800fc3a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc3c:	4b15      	ldr	r3, [pc, #84]	; (800fc94 <mem_init+0x6c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc48:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc56:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fc5a:	f7ff ff1f 	bl	800fa9c <ptr_to_mem>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <mem_init+0x70>)
 800fc62:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800fc64:	4b0c      	ldr	r3, [pc, #48]	; (800fc98 <mem_init+0x70>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc6c:	4b0a      	ldr	r3, [pc, #40]	; (800fc98 <mem_init+0x70>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc74:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc76:	4b08      	ldr	r3, [pc, #32]	; (800fc98 <mem_init+0x70>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc7e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc80:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <mem_init+0x6c>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a05      	ldr	r2, [pc, #20]	; (800fc9c <mem_init+0x74>)
 800fc86:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	200051b8 	.word	0x200051b8
 800fc94:	20001000 	.word	0x20001000
 800fc98:	20001004 	.word	0x20001004
 800fc9c:	20001008 	.word	0x20001008

0800fca0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ff09 	bl	800fac0 <mem_to_ptr>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff fef0 	bl	800fa9c <ptr_to_mem>
 800fcbc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	885b      	ldrh	r3, [r3, #2]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff feea 	bl	800fa9c <ptr_to_mem>
 800fcc8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcd2:	d818      	bhi.n	800fd06 <mem_link_valid+0x66>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	885b      	ldrh	r3, [r3, #2]
 800fcd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcdc:	d813      	bhi.n	800fd06 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fce2:	8afa      	ldrh	r2, [r7, #22]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d004      	beq.n	800fcf2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	8afa      	ldrh	r2, [r7, #22]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d109      	bne.n	800fd06 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcf2:	4b08      	ldr	r3, [pc, #32]	; (800fd14 <mem_link_valid+0x74>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcf6:	693a      	ldr	r2, [r7, #16]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d006      	beq.n	800fd0a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	885b      	ldrh	r3, [r3, #2]
 800fd00:	8afa      	ldrh	r2, [r7, #22]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d001      	beq.n	800fd0a <mem_link_valid+0x6a>
    return 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	e000      	b.n	800fd0c <mem_link_valid+0x6c>
  }
  return 1;
 800fd0a:	2301      	movs	r3, #1
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3718      	adds	r7, #24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	20001004 	.word	0x20001004

0800fd18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d04c      	beq.n	800fdc0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f003 0303 	and.w	r3, r3, #3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd30:	4b25      	ldr	r3, [pc, #148]	; (800fdc8 <mem_free+0xb0>)
 800fd32:	f240 2273 	movw	r2, #627	; 0x273
 800fd36:	4925      	ldr	r1, [pc, #148]	; (800fdcc <mem_free+0xb4>)
 800fd38:	4825      	ldr	r0, [pc, #148]	; (800fdd0 <mem_free+0xb8>)
 800fd3a:	f00c f98b 	bl	801c054 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd3e:	e040      	b.n	800fdc2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	3b08      	subs	r3, #8
 800fd44:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd46:	4b23      	ldr	r3, [pc, #140]	; (800fdd4 <mem_free+0xbc>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d306      	bcc.n	800fd5e <mem_free+0x46>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f103 020c 	add.w	r2, r3, #12
 800fd56:	4b20      	ldr	r3, [pc, #128]	; (800fdd8 <mem_free+0xc0>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d907      	bls.n	800fd6e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd5e:	4b1a      	ldr	r3, [pc, #104]	; (800fdc8 <mem_free+0xb0>)
 800fd60:	f240 227f 	movw	r2, #639	; 0x27f
 800fd64:	491d      	ldr	r1, [pc, #116]	; (800fddc <mem_free+0xc4>)
 800fd66:	481a      	ldr	r0, [pc, #104]	; (800fdd0 <mem_free+0xb8>)
 800fd68:	f00c f974 	bl	801c054 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd6c:	e029      	b.n	800fdc2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	791b      	ldrb	r3, [r3, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d107      	bne.n	800fd86 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fd76:	4b14      	ldr	r3, [pc, #80]	; (800fdc8 <mem_free+0xb0>)
 800fd78:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fd7c:	4918      	ldr	r1, [pc, #96]	; (800fde0 <mem_free+0xc8>)
 800fd7e:	4814      	ldr	r0, [pc, #80]	; (800fdd0 <mem_free+0xb8>)
 800fd80:	f00c f968 	bl	801c054 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd84:	e01d      	b.n	800fdc2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff ff8a 	bl	800fca0 <mem_link_valid>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d107      	bne.n	800fda2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fd92:	4b0d      	ldr	r3, [pc, #52]	; (800fdc8 <mem_free+0xb0>)
 800fd94:	f240 2295 	movw	r2, #661	; 0x295
 800fd98:	4912      	ldr	r1, [pc, #72]	; (800fde4 <mem_free+0xcc>)
 800fd9a:	480d      	ldr	r0, [pc, #52]	; (800fdd0 <mem_free+0xb8>)
 800fd9c:	f00c f95a 	bl	801c054 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fda0:	e00f      	b.n	800fdc2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fda8:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <mem_free+0xd0>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d202      	bcs.n	800fdb8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fdb2:	4a0d      	ldr	r2, [pc, #52]	; (800fde8 <mem_free+0xd0>)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f7ff fe93 	bl	800fae4 <plug_holes>
 800fdbe:	e000      	b.n	800fdc2 <mem_free+0xaa>
    return;
 800fdc0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	080215fc 	.word	0x080215fc
 800fdcc:	080216d0 	.word	0x080216d0
 800fdd0:	08021644 	.word	0x08021644
 800fdd4:	20001000 	.word	0x20001000
 800fdd8:	20001004 	.word	0x20001004
 800fddc:	080216f4 	.word	0x080216f4
 800fde0:	08021710 	.word	0x08021710
 800fde4:	08021738 	.word	0x08021738
 800fde8:	20001008 	.word	0x20001008

0800fdec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b088      	sub	sp, #32
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fdf8:	887b      	ldrh	r3, [r7, #2]
 800fdfa:	3303      	adds	r3, #3
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe04:	8bfb      	ldrh	r3, [r7, #30]
 800fe06:	2b0b      	cmp	r3, #11
 800fe08:	d801      	bhi.n	800fe0e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe0a:	230c      	movs	r3, #12
 800fe0c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe0e:	8bfb      	ldrh	r3, [r7, #30]
 800fe10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe14:	d803      	bhi.n	800fe1e <mem_trim+0x32>
 800fe16:	8bfa      	ldrh	r2, [r7, #30]
 800fe18:	887b      	ldrh	r3, [r7, #2]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d201      	bcs.n	800fe22 <mem_trim+0x36>
    return NULL;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	e0cc      	b.n	800ffbc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe22:	4b68      	ldr	r3, [pc, #416]	; (800ffc4 <mem_trim+0x1d8>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d304      	bcc.n	800fe36 <mem_trim+0x4a>
 800fe2c:	4b66      	ldr	r3, [pc, #408]	; (800ffc8 <mem_trim+0x1dc>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d306      	bcc.n	800fe44 <mem_trim+0x58>
 800fe36:	4b65      	ldr	r3, [pc, #404]	; (800ffcc <mem_trim+0x1e0>)
 800fe38:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fe3c:	4964      	ldr	r1, [pc, #400]	; (800ffd0 <mem_trim+0x1e4>)
 800fe3e:	4865      	ldr	r0, [pc, #404]	; (800ffd4 <mem_trim+0x1e8>)
 800fe40:	f00c f908 	bl	801c054 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe44:	4b5f      	ldr	r3, [pc, #380]	; (800ffc4 <mem_trim+0x1d8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d304      	bcc.n	800fe58 <mem_trim+0x6c>
 800fe4e:	4b5e      	ldr	r3, [pc, #376]	; (800ffc8 <mem_trim+0x1dc>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d301      	bcc.n	800fe5c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	e0af      	b.n	800ffbc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	3b08      	subs	r3, #8
 800fe60:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fe62:	69b8      	ldr	r0, [r7, #24]
 800fe64:	f7ff fe2c 	bl	800fac0 <mem_to_ptr>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	881a      	ldrh	r2, [r3, #0]
 800fe70:	8afb      	ldrh	r3, [r7, #22]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	3b08      	subs	r3, #8
 800fe78:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fe7a:	8bfa      	ldrh	r2, [r7, #30]
 800fe7c:	8abb      	ldrh	r3, [r7, #20]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d906      	bls.n	800fe90 <mem_trim+0xa4>
 800fe82:	4b52      	ldr	r3, [pc, #328]	; (800ffcc <mem_trim+0x1e0>)
 800fe84:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fe88:	4953      	ldr	r1, [pc, #332]	; (800ffd8 <mem_trim+0x1ec>)
 800fe8a:	4852      	ldr	r0, [pc, #328]	; (800ffd4 <mem_trim+0x1e8>)
 800fe8c:	f00c f8e2 	bl	801c054 <iprintf>
  if (newsize > size) {
 800fe90:	8bfa      	ldrh	r2, [r7, #30]
 800fe92:	8abb      	ldrh	r3, [r7, #20]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d901      	bls.n	800fe9c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e08f      	b.n	800ffbc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800fe9c:	8bfa      	ldrh	r2, [r7, #30]
 800fe9e:	8abb      	ldrh	r3, [r7, #20]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d101      	bne.n	800fea8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	e089      	b.n	800ffbc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fdf5 	bl	800fa9c <ptr_to_mem>
 800feb2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	791b      	ldrb	r3, [r3, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d13f      	bne.n	800ff3c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fec4:	d106      	bne.n	800fed4 <mem_trim+0xe8>
 800fec6:	4b41      	ldr	r3, [pc, #260]	; (800ffcc <mem_trim+0x1e0>)
 800fec8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fecc:	4943      	ldr	r1, [pc, #268]	; (800ffdc <mem_trim+0x1f0>)
 800fece:	4841      	ldr	r0, [pc, #260]	; (800ffd4 <mem_trim+0x1e8>)
 800fed0:	f00c f8c0 	bl	801c054 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800feda:	8afa      	ldrh	r2, [r7, #22]
 800fedc:	8bfb      	ldrh	r3, [r7, #30]
 800fede:	4413      	add	r3, r2
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	3308      	adds	r3, #8
 800fee4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fee6:	4b3e      	ldr	r3, [pc, #248]	; (800ffe0 <mem_trim+0x1f4>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	693a      	ldr	r2, [r7, #16]
 800feec:	429a      	cmp	r2, r3
 800feee:	d106      	bne.n	800fefe <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800fef0:	89fb      	ldrh	r3, [r7, #14]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff fdd2 	bl	800fa9c <ptr_to_mem>
 800fef8:	4602      	mov	r2, r0
 800fefa:	4b39      	ldr	r3, [pc, #228]	; (800ffe0 <mem_trim+0x1f4>)
 800fefc:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fefe:	89fb      	ldrh	r3, [r7, #14]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff fdcb 	bl	800fa9c <ptr_to_mem>
 800ff06:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	89ba      	ldrh	r2, [r7, #12]
 800ff12:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	8afa      	ldrh	r2, [r7, #22]
 800ff18:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	89fa      	ldrh	r2, [r7, #14]
 800ff1e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	881b      	ldrh	r3, [r3, #0]
 800ff24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff28:	d047      	beq.n	800ffba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff fdb4 	bl	800fa9c <ptr_to_mem>
 800ff34:	4602      	mov	r2, r0
 800ff36:	89fb      	ldrh	r3, [r7, #14]
 800ff38:	8053      	strh	r3, [r2, #2]
 800ff3a:	e03e      	b.n	800ffba <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ff3c:	8bfb      	ldrh	r3, [r7, #30]
 800ff3e:	f103 0214 	add.w	r2, r3, #20
 800ff42:	8abb      	ldrh	r3, [r7, #20]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d838      	bhi.n	800ffba <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff48:	8afa      	ldrh	r2, [r7, #22]
 800ff4a:	8bfb      	ldrh	r3, [r7, #30]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	3308      	adds	r3, #8
 800ff52:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	881b      	ldrh	r3, [r3, #0]
 800ff58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff5c:	d106      	bne.n	800ff6c <mem_trim+0x180>
 800ff5e:	4b1b      	ldr	r3, [pc, #108]	; (800ffcc <mem_trim+0x1e0>)
 800ff60:	f240 3216 	movw	r2, #790	; 0x316
 800ff64:	491d      	ldr	r1, [pc, #116]	; (800ffdc <mem_trim+0x1f0>)
 800ff66:	481b      	ldr	r0, [pc, #108]	; (800ffd4 <mem_trim+0x1e8>)
 800ff68:	f00c f874 	bl	801c054 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ff6c:	89fb      	ldrh	r3, [r7, #14]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7ff fd94 	bl	800fa9c <ptr_to_mem>
 800ff74:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ff76:	4b1a      	ldr	r3, [pc, #104]	; (800ffe0 <mem_trim+0x1f4>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	693a      	ldr	r2, [r7, #16]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d202      	bcs.n	800ff86 <mem_trim+0x19a>
      lfree = mem2;
 800ff80:	4a17      	ldr	r2, [pc, #92]	; (800ffe0 <mem_trim+0x1f4>)
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	881a      	ldrh	r2, [r3, #0]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	8afa      	ldrh	r2, [r7, #22]
 800ff98:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	89fa      	ldrh	r2, [r7, #14]
 800ff9e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffa8:	d007      	beq.n	800ffba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fd74 	bl	800fa9c <ptr_to_mem>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	89fb      	ldrh	r3, [r7, #14]
 800ffb8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ffba:	687b      	ldr	r3, [r7, #4]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3720      	adds	r7, #32
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	20001000 	.word	0x20001000
 800ffc8:	20001004 	.word	0x20001004
 800ffcc:	080215fc 	.word	0x080215fc
 800ffd0:	0802176c 	.word	0x0802176c
 800ffd4:	08021644 	.word	0x08021644
 800ffd8:	08021784 	.word	0x08021784
 800ffdc:	080217a4 	.word	0x080217a4
 800ffe0:	20001008 	.word	0x20001008

0800ffe4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	4603      	mov	r3, r0
 800ffec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ffee:	88fb      	ldrh	r3, [r7, #6]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <mem_malloc+0x14>
    return NULL;
 800fff4:	2300      	movs	r3, #0
 800fff6:	e0d9      	b.n	80101ac <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fff8:	88fb      	ldrh	r3, [r7, #6]
 800fffa:	3303      	adds	r3, #3
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f023 0303 	bic.w	r3, r3, #3
 8010002:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010004:	8bbb      	ldrh	r3, [r7, #28]
 8010006:	2b0b      	cmp	r3, #11
 8010008:	d801      	bhi.n	801000e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801000a:	230c      	movs	r3, #12
 801000c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801000e:	8bbb      	ldrh	r3, [r7, #28]
 8010010:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010014:	d803      	bhi.n	801001e <mem_malloc+0x3a>
 8010016:	8bba      	ldrh	r2, [r7, #28]
 8010018:	88fb      	ldrh	r3, [r7, #6]
 801001a:	429a      	cmp	r2, r3
 801001c:	d201      	bcs.n	8010022 <mem_malloc+0x3e>
    return NULL;
 801001e:	2300      	movs	r3, #0
 8010020:	e0c4      	b.n	80101ac <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010022:	4b64      	ldr	r3, [pc, #400]	; (80101b4 <mem_malloc+0x1d0>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff fd4a 	bl	800fac0 <mem_to_ptr>
 801002c:	4603      	mov	r3, r0
 801002e:	83fb      	strh	r3, [r7, #30]
 8010030:	e0b4      	b.n	801019c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010032:	8bfb      	ldrh	r3, [r7, #30]
 8010034:	4618      	mov	r0, r3
 8010036:	f7ff fd31 	bl	800fa9c <ptr_to_mem>
 801003a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	791b      	ldrb	r3, [r3, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	f040 80a4 	bne.w	801018e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	8bfb      	ldrh	r3, [r7, #30]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	f1a3 0208 	sub.w	r2, r3, #8
 8010054:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010056:	429a      	cmp	r2, r3
 8010058:	f0c0 8099 	bcc.w	801018e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	461a      	mov	r2, r3
 8010062:	8bfb      	ldrh	r3, [r7, #30]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	f1a3 0208 	sub.w	r2, r3, #8
 801006a:	8bbb      	ldrh	r3, [r7, #28]
 801006c:	3314      	adds	r3, #20
 801006e:	429a      	cmp	r2, r3
 8010070:	d333      	bcc.n	80100da <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010072:	8bfa      	ldrh	r2, [r7, #30]
 8010074:	8bbb      	ldrh	r3, [r7, #28]
 8010076:	4413      	add	r3, r2
 8010078:	b29b      	uxth	r3, r3
 801007a:	3308      	adds	r3, #8
 801007c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801007e:	8a7b      	ldrh	r3, [r7, #18]
 8010080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010084:	d106      	bne.n	8010094 <mem_malloc+0xb0>
 8010086:	4b4c      	ldr	r3, [pc, #304]	; (80101b8 <mem_malloc+0x1d4>)
 8010088:	f240 3287 	movw	r2, #903	; 0x387
 801008c:	494b      	ldr	r1, [pc, #300]	; (80101bc <mem_malloc+0x1d8>)
 801008e:	484c      	ldr	r0, [pc, #304]	; (80101c0 <mem_malloc+0x1dc>)
 8010090:	f00b ffe0 	bl	801c054 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010094:	8a7b      	ldrh	r3, [r7, #18]
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fd00 	bl	800fa9c <ptr_to_mem>
 801009c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	881a      	ldrh	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	8bfa      	ldrh	r2, [r7, #30]
 80100b0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	8a7a      	ldrh	r2, [r7, #18]
 80100b6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2201      	movs	r2, #1
 80100bc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	881b      	ldrh	r3, [r3, #0]
 80100c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100c6:	d00b      	beq.n	80100e0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fce5 	bl	800fa9c <ptr_to_mem>
 80100d2:	4602      	mov	r2, r0
 80100d4:	8a7b      	ldrh	r3, [r7, #18]
 80100d6:	8053      	strh	r3, [r2, #2]
 80100d8:	e002      	b.n	80100e0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2201      	movs	r2, #1
 80100de:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80100e0:	4b34      	ldr	r3, [pc, #208]	; (80101b4 <mem_malloc+0x1d0>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d127      	bne.n	801013a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80100ea:	4b32      	ldr	r3, [pc, #200]	; (80101b4 <mem_malloc+0x1d0>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80100f0:	e005      	b.n	80100fe <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	881b      	ldrh	r3, [r3, #0]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fcd0 	bl	800fa9c <ptr_to_mem>
 80100fc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	791b      	ldrb	r3, [r3, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d004      	beq.n	8010110 <mem_malloc+0x12c>
 8010106:	4b2f      	ldr	r3, [pc, #188]	; (80101c4 <mem_malloc+0x1e0>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	429a      	cmp	r2, r3
 801010e:	d1f0      	bne.n	80100f2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8010110:	4a28      	ldr	r2, [pc, #160]	; (80101b4 <mem_malloc+0x1d0>)
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010116:	4b27      	ldr	r3, [pc, #156]	; (80101b4 <mem_malloc+0x1d0>)
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	4b2a      	ldr	r3, [pc, #168]	; (80101c4 <mem_malloc+0x1e0>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d00b      	beq.n	801013a <mem_malloc+0x156>
 8010122:	4b24      	ldr	r3, [pc, #144]	; (80101b4 <mem_malloc+0x1d0>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	791b      	ldrb	r3, [r3, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d006      	beq.n	801013a <mem_malloc+0x156>
 801012c:	4b22      	ldr	r3, [pc, #136]	; (80101b8 <mem_malloc+0x1d4>)
 801012e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010132:	4925      	ldr	r1, [pc, #148]	; (80101c8 <mem_malloc+0x1e4>)
 8010134:	4822      	ldr	r0, [pc, #136]	; (80101c0 <mem_malloc+0x1dc>)
 8010136:	f00b ff8d 	bl	801c054 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801013a:	8bba      	ldrh	r2, [r7, #28]
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	4413      	add	r3, r2
 8010140:	3308      	adds	r3, #8
 8010142:	4a20      	ldr	r2, [pc, #128]	; (80101c4 <mem_malloc+0x1e0>)
 8010144:	6812      	ldr	r2, [r2, #0]
 8010146:	4293      	cmp	r3, r2
 8010148:	d906      	bls.n	8010158 <mem_malloc+0x174>
 801014a:	4b1b      	ldr	r3, [pc, #108]	; (80101b8 <mem_malloc+0x1d4>)
 801014c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8010150:	491e      	ldr	r1, [pc, #120]	; (80101cc <mem_malloc+0x1e8>)
 8010152:	481b      	ldr	r0, [pc, #108]	; (80101c0 <mem_malloc+0x1dc>)
 8010154:	f00b ff7e 	bl	801c054 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d006      	beq.n	8010170 <mem_malloc+0x18c>
 8010162:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <mem_malloc+0x1d4>)
 8010164:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8010168:	4919      	ldr	r1, [pc, #100]	; (80101d0 <mem_malloc+0x1ec>)
 801016a:	4815      	ldr	r0, [pc, #84]	; (80101c0 <mem_malloc+0x1dc>)
 801016c:	f00b ff72 	bl	801c054 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f003 0303 	and.w	r3, r3, #3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d006      	beq.n	8010188 <mem_malloc+0x1a4>
 801017a:	4b0f      	ldr	r3, [pc, #60]	; (80101b8 <mem_malloc+0x1d4>)
 801017c:	f240 32be 	movw	r2, #958	; 0x3be
 8010180:	4914      	ldr	r1, [pc, #80]	; (80101d4 <mem_malloc+0x1f0>)
 8010182:	480f      	ldr	r0, [pc, #60]	; (80101c0 <mem_malloc+0x1dc>)
 8010184:	f00b ff66 	bl	801c054 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	3308      	adds	r3, #8
 801018c:	e00e      	b.n	80101ac <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801018e:	8bfb      	ldrh	r3, [r7, #30]
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff fc83 	bl	800fa9c <ptr_to_mem>
 8010196:	4603      	mov	r3, r0
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801019c:	8bfa      	ldrh	r2, [r7, #30]
 801019e:	8bbb      	ldrh	r3, [r7, #28]
 80101a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80101a4:	429a      	cmp	r2, r3
 80101a6:	f4ff af44 	bcc.w	8010032 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3720      	adds	r7, #32
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	20001008 	.word	0x20001008
 80101b8:	080215fc 	.word	0x080215fc
 80101bc:	080217a4 	.word	0x080217a4
 80101c0:	08021644 	.word	0x08021644
 80101c4:	20001004 	.word	0x20001004
 80101c8:	080217b8 	.word	0x080217b8
 80101cc:	080217d4 	.word	0x080217d4
 80101d0:	08021804 	.word	0x08021804
 80101d4:	08021834 	.word	0x08021834

080101d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	3303      	adds	r3, #3
 80101ee:	f023 0303 	bic.w	r3, r3, #3
 80101f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80101f4:	2300      	movs	r3, #0
 80101f6:	60fb      	str	r3, [r7, #12]
 80101f8:	e011      	b.n	801021e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	4413      	add	r3, r2
 8010216:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	3301      	adds	r3, #1
 801021c:	60fb      	str	r3, [r7, #12]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	461a      	mov	r2, r3
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4293      	cmp	r3, r2
 8010228:	dbe7      	blt.n	80101fa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801022a:	bf00      	nop
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr
	...

08010238 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801023e:	2300      	movs	r3, #0
 8010240:	80fb      	strh	r3, [r7, #6]
 8010242:	e009      	b.n	8010258 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010244:	88fb      	ldrh	r3, [r7, #6]
 8010246:	4a08      	ldr	r2, [pc, #32]	; (8010268 <memp_init+0x30>)
 8010248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff ffc3 	bl	80101d8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010252:	88fb      	ldrh	r3, [r7, #6]
 8010254:	3301      	adds	r3, #1
 8010256:	80fb      	strh	r3, [r7, #6]
 8010258:	88fb      	ldrh	r3, [r7, #6]
 801025a:	2b08      	cmp	r3, #8
 801025c:	d9f2      	bls.n	8010244 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801025e:	bf00      	nop
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	0802490c 	.word	0x0802490c

0801026c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d012      	beq.n	80102a8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	6812      	ldr	r2, [r2, #0]
 801028a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f003 0303 	and.w	r3, r3, #3
 8010292:	2b00      	cmp	r3, #0
 8010294:	d006      	beq.n	80102a4 <do_memp_malloc_pool+0x38>
 8010296:	4b07      	ldr	r3, [pc, #28]	; (80102b4 <do_memp_malloc_pool+0x48>)
 8010298:	f240 1219 	movw	r2, #281	; 0x119
 801029c:	4906      	ldr	r1, [pc, #24]	; (80102b8 <do_memp_malloc_pool+0x4c>)
 801029e:	4807      	ldr	r0, [pc, #28]	; (80102bc <do_memp_malloc_pool+0x50>)
 80102a0:	f00b fed8 	bl	801c054 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	e000      	b.n	80102aa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80102a8:	2300      	movs	r3, #0
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	08021858 	.word	0x08021858
 80102b8:	08021888 	.word	0x08021888
 80102bc:	080218ac 	.word	0x080218ac

080102c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	2b08      	cmp	r3, #8
 80102ce:	d908      	bls.n	80102e2 <memp_malloc+0x22>
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <memp_malloc+0x3c>)
 80102d2:	f240 1257 	movw	r2, #343	; 0x157
 80102d6:	490a      	ldr	r1, [pc, #40]	; (8010300 <memp_malloc+0x40>)
 80102d8:	480a      	ldr	r0, [pc, #40]	; (8010304 <memp_malloc+0x44>)
 80102da:	f00b febb 	bl	801c054 <iprintf>
 80102de:	2300      	movs	r3, #0
 80102e0:	e008      	b.n	80102f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	4a08      	ldr	r2, [pc, #32]	; (8010308 <memp_malloc+0x48>)
 80102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff ffbe 	bl	801026c <do_memp_malloc_pool>
 80102f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80102f2:	68fb      	ldr	r3, [r7, #12]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	08021858 	.word	0x08021858
 8010300:	080218e8 	.word	0x080218e8
 8010304:	080218ac 	.word	0x080218ac
 8010308:	0802490c 	.word	0x0802490c

0801030c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	f003 0303 	and.w	r3, r3, #3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d006      	beq.n	801032e <do_memp_free_pool+0x22>
 8010320:	4b0a      	ldr	r3, [pc, #40]	; (801034c <do_memp_free_pool+0x40>)
 8010322:	f240 126d 	movw	r2, #365	; 0x16d
 8010326:	490a      	ldr	r1, [pc, #40]	; (8010350 <do_memp_free_pool+0x44>)
 8010328:	480a      	ldr	r0, [pc, #40]	; (8010354 <do_memp_free_pool+0x48>)
 801032a:	f00b fe93 	bl	801c054 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8010344:	bf00      	nop
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	08021858 	.word	0x08021858
 8010350:	08021908 	.word	0x08021908
 8010354:	080218ac 	.word	0x080218ac

08010358 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	6039      	str	r1, [r7, #0]
 8010362:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	2b08      	cmp	r3, #8
 8010368:	d907      	bls.n	801037a <memp_free+0x22>
 801036a:	4b0c      	ldr	r3, [pc, #48]	; (801039c <memp_free+0x44>)
 801036c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010370:	490b      	ldr	r1, [pc, #44]	; (80103a0 <memp_free+0x48>)
 8010372:	480c      	ldr	r0, [pc, #48]	; (80103a4 <memp_free+0x4c>)
 8010374:	f00b fe6e 	bl	801c054 <iprintf>
 8010378:	e00c      	b.n	8010394 <memp_free+0x3c>

  if (mem == NULL) {
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d008      	beq.n	8010392 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010380:	79fb      	ldrb	r3, [r7, #7]
 8010382:	4a09      	ldr	r2, [pc, #36]	; (80103a8 <memp_free+0x50>)
 8010384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010388:	6839      	ldr	r1, [r7, #0]
 801038a:	4618      	mov	r0, r3
 801038c:	f7ff ffbe 	bl	801030c <do_memp_free_pool>
 8010390:	e000      	b.n	8010394 <memp_free+0x3c>
    return;
 8010392:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010394:	3708      	adds	r7, #8
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	08021858 	.word	0x08021858
 80103a0:	08021928 	.word	0x08021928
 80103a4:	080218ac 	.word	0x080218ac
 80103a8:	0802490c 	.word	0x0802490c

080103ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80103b0:	bf00      	nop
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
	...

080103bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
 80103c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d108      	bne.n	80103e2 <netif_add+0x26>
 80103d0:	4b5b      	ldr	r3, [pc, #364]	; (8010540 <netif_add+0x184>)
 80103d2:	f240 1227 	movw	r2, #295	; 0x127
 80103d6:	495b      	ldr	r1, [pc, #364]	; (8010544 <netif_add+0x188>)
 80103d8:	485b      	ldr	r0, [pc, #364]	; (8010548 <netif_add+0x18c>)
 80103da:	f00b fe3b 	bl	801c054 <iprintf>
 80103de:	2300      	movs	r3, #0
 80103e0:	e0a9      	b.n	8010536 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d108      	bne.n	80103fa <netif_add+0x3e>
 80103e8:	4b55      	ldr	r3, [pc, #340]	; (8010540 <netif_add+0x184>)
 80103ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80103ee:	4957      	ldr	r1, [pc, #348]	; (801054c <netif_add+0x190>)
 80103f0:	4855      	ldr	r0, [pc, #340]	; (8010548 <netif_add+0x18c>)
 80103f2:	f00b fe2f 	bl	801c054 <iprintf>
 80103f6:	2300      	movs	r3, #0
 80103f8:	e09d      	b.n	8010536 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d101      	bne.n	8010404 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010400:	4b53      	ldr	r3, [pc, #332]	; (8010550 <netif_add+0x194>)
 8010402:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801040a:	4b51      	ldr	r3, [pc, #324]	; (8010550 <netif_add+0x194>)
 801040c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010414:	4b4e      	ldr	r3, [pc, #312]	; (8010550 <netif_add+0x194>)
 8010416:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2200      	movs	r2, #0
 801041c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2200      	movs	r2, #0
 8010428:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	4a49      	ldr	r2, [pc, #292]	; (8010554 <netif_add+0x198>)
 801042e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	3324      	adds	r3, #36	; 0x24
 8010442:	2204      	movs	r2, #4
 8010444:	2100      	movs	r1, #0
 8010446:	4618      	mov	r0, r3
 8010448:	f00b f8f7 	bl	801b63a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6a3a      	ldr	r2, [r7, #32]
 8010456:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010458:	4b3f      	ldr	r3, [pc, #252]	; (8010558 <netif_add+0x19c>)
 801045a:	781a      	ldrb	r2, [r3, #0]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010466:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	68b9      	ldr	r1, [r7, #8]
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f000 f914 	bl	801069c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	4798      	blx	r3
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <netif_add+0xc8>
    return NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	e058      	b.n	8010536 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801048a:	2bff      	cmp	r3, #255	; 0xff
 801048c:	d103      	bne.n	8010496 <netif_add+0xda>
        netif->num = 0;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801049a:	4b30      	ldr	r3, [pc, #192]	; (801055c <netif_add+0x1a0>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	617b      	str	r3, [r7, #20]
 80104a0:	e02b      	b.n	80104fa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d106      	bne.n	80104b8 <netif_add+0xfc>
 80104aa:	4b25      	ldr	r3, [pc, #148]	; (8010540 <netif_add+0x184>)
 80104ac:	f240 128b 	movw	r2, #395	; 0x18b
 80104b0:	492b      	ldr	r1, [pc, #172]	; (8010560 <netif_add+0x1a4>)
 80104b2:	4825      	ldr	r0, [pc, #148]	; (8010548 <netif_add+0x18c>)
 80104b4:	f00b fdce 	bl	801c054 <iprintf>
        num_netifs++;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	3301      	adds	r3, #1
 80104bc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	2bff      	cmp	r3, #255	; 0xff
 80104c2:	dd06      	ble.n	80104d2 <netif_add+0x116>
 80104c4:	4b1e      	ldr	r3, [pc, #120]	; (8010540 <netif_add+0x184>)
 80104c6:	f240 128d 	movw	r2, #397	; 0x18d
 80104ca:	4926      	ldr	r1, [pc, #152]	; (8010564 <netif_add+0x1a8>)
 80104cc:	481e      	ldr	r0, [pc, #120]	; (8010548 <netif_add+0x18c>)
 80104ce:	f00b fdc1 	bl	801c054 <iprintf>
        if (netif2->num == netif->num) {
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104de:	429a      	cmp	r2, r3
 80104e0:	d108      	bne.n	80104f4 <netif_add+0x138>
          netif->num++;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104e8:	3301      	adds	r3, #1
 80104ea:	b2da      	uxtb	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80104f2:	e005      	b.n	8010500 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	617b      	str	r3, [r7, #20]
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1d0      	bne.n	80104a2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1be      	bne.n	8010484 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801050c:	2bfe      	cmp	r3, #254	; 0xfe
 801050e:	d103      	bne.n	8010518 <netif_add+0x15c>
    netif_num = 0;
 8010510:	4b11      	ldr	r3, [pc, #68]	; (8010558 <netif_add+0x19c>)
 8010512:	2200      	movs	r2, #0
 8010514:	701a      	strb	r2, [r3, #0]
 8010516:	e006      	b.n	8010526 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801051e:	3301      	adds	r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <netif_add+0x19c>)
 8010524:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010526:	4b0d      	ldr	r3, [pc, #52]	; (801055c <netif_add+0x1a0>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801052e:	4a0b      	ldr	r2, [pc, #44]	; (801055c <netif_add+0x1a0>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010534:	68fb      	ldr	r3, [r7, #12]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	08021944 	.word	0x08021944
 8010544:	080219d8 	.word	0x080219d8
 8010548:	08021994 	.word	0x08021994
 801054c:	080219f4 	.word	0x080219f4
 8010550:	08024980 	.word	0x08024980
 8010554:	080108af 	.word	0x080108af
 8010558:	20001030 	.word	0x20001030
 801055c:	200082b4 	.word	0x200082b4
 8010560:	08021a18 	.word	0x08021a18
 8010564:	08021a2c 	.word	0x08021a2c

08010568 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 fabf 	bl	8012af8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f006 fe69 	bl	8017254 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010582:	bf00      	nop
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d106      	bne.n	80105ac <netif_do_set_ipaddr+0x20>
 801059e:	4b1d      	ldr	r3, [pc, #116]	; (8010614 <netif_do_set_ipaddr+0x88>)
 80105a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80105a4:	491c      	ldr	r1, [pc, #112]	; (8010618 <netif_do_set_ipaddr+0x8c>)
 80105a6:	481d      	ldr	r0, [pc, #116]	; (801061c <netif_do_set_ipaddr+0x90>)
 80105a8:	f00b fd54 	bl	801c054 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <netif_do_set_ipaddr+0x34>
 80105b2:	4b18      	ldr	r3, [pc, #96]	; (8010614 <netif_do_set_ipaddr+0x88>)
 80105b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80105b8:	4917      	ldr	r1, [pc, #92]	; (8010618 <netif_do_set_ipaddr+0x8c>)
 80105ba:	4818      	ldr	r0, [pc, #96]	; (801061c <netif_do_set_ipaddr+0x90>)
 80105bc:	f00b fd4a 	bl	801c054 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	3304      	adds	r3, #4
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d01c      	beq.n	8010608 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3304      	adds	r3, #4
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80105de:	f107 0314 	add.w	r3, r7, #20
 80105e2:	4619      	mov	r1, r3
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff ffbf 	bl	8010568 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <netif_do_set_ipaddr+0x6a>
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	e000      	b.n	80105f8 <netif_do_set_ipaddr+0x6c>
 80105f6:	2300      	movs	r3, #0
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80105fc:	2101      	movs	r1, #1
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 f8d2 	bl	80107a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010604:	2301      	movs	r3, #1
 8010606:	e000      	b.n	801060a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3718      	adds	r7, #24
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	08021944 	.word	0x08021944
 8010618:	08021a5c 	.word	0x08021a5c
 801061c:	08021994 	.word	0x08021994

08010620 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3308      	adds	r3, #8
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	429a      	cmp	r2, r3
 8010638:	d00a      	beq.n	8010650 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <netif_do_set_netmask+0x26>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	e000      	b.n	8010648 <netif_do_set_netmask+0x28>
 8010646:	2300      	movs	r3, #0
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801064c:	2301      	movs	r3, #1
 801064e:	e000      	b.n	8010652 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3714      	adds	r7, #20
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr

0801065e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801065e:	b480      	push	{r7}
 8010660:	b085      	sub	sp, #20
 8010662:	af00      	add	r7, sp, #0
 8010664:	60f8      	str	r0, [r7, #12]
 8010666:	60b9      	str	r1, [r7, #8]
 8010668:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	330c      	adds	r3, #12
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d00a      	beq.n	801068e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <netif_do_set_gw+0x26>
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	e000      	b.n	8010686 <netif_do_set_gw+0x28>
 8010684:	2300      	movs	r3, #0
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801068a:	2301      	movs	r3, #1
 801068c:	e000      	b.n	8010690 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3714      	adds	r7, #20
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b088      	sub	sp, #32
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d101      	bne.n	80106bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80106b8:	4b1c      	ldr	r3, [pc, #112]	; (801072c <netif_set_addr+0x90>)
 80106ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d101      	bne.n	80106c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80106c2:	4b1a      	ldr	r3, [pc, #104]	; (801072c <netif_set_addr+0x90>)
 80106c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d101      	bne.n	80106d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80106cc:	4b17      	ldr	r3, [pc, #92]	; (801072c <netif_set_addr+0x90>)
 80106ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d003      	beq.n	80106de <netif_set_addr+0x42>
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d101      	bne.n	80106e2 <netif_set_addr+0x46>
 80106de:	2301      	movs	r3, #1
 80106e0:	e000      	b.n	80106e4 <netif_set_addr+0x48>
 80106e2:	2300      	movs	r3, #0
 80106e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106ec:	f107 0310 	add.w	r3, r7, #16
 80106f0:	461a      	mov	r2, r3
 80106f2:	68b9      	ldr	r1, [r7, #8]
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f7ff ff49 	bl	801058c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80106fa:	69fa      	ldr	r2, [r7, #28]
 80106fc:	6879      	ldr	r1, [r7, #4]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f7ff ff8e 	bl	8010620 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	6839      	ldr	r1, [r7, #0]
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f7ff ffa8 	bl	801065e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d106      	bne.n	8010722 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010714:	f107 0310 	add.w	r3, r7, #16
 8010718:	461a      	mov	r2, r3
 801071a:	68b9      	ldr	r1, [r7, #8]
 801071c:	68f8      	ldr	r0, [r7, #12]
 801071e:	f7ff ff35 	bl	801058c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010722:	bf00      	nop
 8010724:	3720      	adds	r7, #32
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	08024980 	.word	0x08024980

08010730 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010738:	4a04      	ldr	r2, [pc, #16]	; (801074c <netif_set_default+0x1c>)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801073e:	bf00      	nop
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	200082b8 	.word	0x200082b8

08010750 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d107      	bne.n	801076e <netif_set_up+0x1e>
 801075e:	4b0f      	ldr	r3, [pc, #60]	; (801079c <netif_set_up+0x4c>)
 8010760:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010764:	490e      	ldr	r1, [pc, #56]	; (80107a0 <netif_set_up+0x50>)
 8010766:	480f      	ldr	r0, [pc, #60]	; (80107a4 <netif_set_up+0x54>)
 8010768:	f00b fc74 	bl	801c054 <iprintf>
 801076c:	e013      	b.n	8010796 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10c      	bne.n	8010796 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010782:	f043 0301 	orr.w	r3, r3, #1
 8010786:	b2da      	uxtb	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801078e:	2103      	movs	r1, #3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 f809 	bl	80107a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	08021944 	.word	0x08021944
 80107a0:	08021acc 	.word	0x08021acc
 80107a4:	08021994 	.word	0x08021994

080107a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <netif_issue_reports+0x20>
 80107ba:	4b18      	ldr	r3, [pc, #96]	; (801081c <netif_issue_reports+0x74>)
 80107bc:	f240 326d 	movw	r2, #877	; 0x36d
 80107c0:	4917      	ldr	r1, [pc, #92]	; (8010820 <netif_issue_reports+0x78>)
 80107c2:	4818      	ldr	r0, [pc, #96]	; (8010824 <netif_issue_reports+0x7c>)
 80107c4:	f00b fc46 	bl	801c054 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107ce:	f003 0304 	and.w	r3, r3, #4
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d01e      	beq.n	8010814 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d017      	beq.n	8010814 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107e4:	78fb      	ldrb	r3, [r7, #3]
 80107e6:	f003 0301 	and.w	r3, r3, #1
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d013      	beq.n	8010816 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3304      	adds	r3, #4
 80107f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00e      	beq.n	8010816 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107fe:	f003 0308 	and.w	r3, r3, #8
 8010802:	2b00      	cmp	r3, #0
 8010804:	d007      	beq.n	8010816 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3304      	adds	r3, #4
 801080a:	4619      	mov	r1, r3
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f009 fae3 	bl	8019dd8 <etharp_request>
 8010812:	e000      	b.n	8010816 <netif_issue_reports+0x6e>
    return;
 8010814:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08021944 	.word	0x08021944
 8010820:	08021ae8 	.word	0x08021ae8
 8010824:	08021994 	.word	0x08021994

08010828 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d107      	bne.n	8010846 <netif_set_down+0x1e>
 8010836:	4b12      	ldr	r3, [pc, #72]	; (8010880 <netif_set_down+0x58>)
 8010838:	f240 329b 	movw	r2, #923	; 0x39b
 801083c:	4911      	ldr	r1, [pc, #68]	; (8010884 <netif_set_down+0x5c>)
 801083e:	4812      	ldr	r0, [pc, #72]	; (8010888 <netif_set_down+0x60>)
 8010840:	f00b fc08 	bl	801c054 <iprintf>
 8010844:	e019      	b.n	801087a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	d012      	beq.n	801087a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801085a:	f023 0301 	bic.w	r3, r3, #1
 801085e:	b2da      	uxtb	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801086c:	f003 0308 	and.w	r3, r3, #8
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f008 fe69 	bl	801954c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	08021944 	.word	0x08021944
 8010884:	08021b0c 	.word	0x08021b0c
 8010888:	08021994 	.word	0x08021994

0801088c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	61da      	str	r2, [r3, #28]
  }
}
 80108a2:	bf00      	nop
 80108a4:	370c      	adds	r7, #12
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80108ae:	b480      	push	{r7}
 80108b0:	b085      	sub	sp, #20
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	60f8      	str	r0, [r7, #12]
 80108b6:	60b9      	str	r1, [r7, #8]
 80108b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80108ba:	f06f 030b 	mvn.w	r3, #11
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
	...

080108cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	4603      	mov	r3, r0
 80108d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80108d6:	79fb      	ldrb	r3, [r7, #7]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d013      	beq.n	8010904 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80108dc:	4b0d      	ldr	r3, [pc, #52]	; (8010914 <netif_get_by_index+0x48>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	e00c      	b.n	80108fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108ea:	3301      	adds	r3, #1
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	79fa      	ldrb	r2, [r7, #7]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d101      	bne.n	80108f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	e006      	b.n	8010906 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	60fb      	str	r3, [r7, #12]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1ef      	bne.n	80108e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	200082b4 	.word	0x200082b4

08010918 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010918:	b480      	push	{r7}
 801091a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 801091c:	4b03      	ldr	r3, [pc, #12]	; (801092c <pbuf_pool_is_empty+0x14>)
 801091e:	2201      	movs	r2, #1
 8010920:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010922:	bf00      	nop
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	200082bc 	.word	0x200082bc

08010930 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	4611      	mov	r1, r2
 801093c:	461a      	mov	r2, r3
 801093e:	460b      	mov	r3, r1
 8010940:	80fb      	strh	r3, [r7, #6]
 8010942:	4613      	mov	r3, r2
 8010944:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	88fa      	ldrh	r2, [r7, #6]
 8010956:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	88ba      	ldrh	r2, [r7, #4]
 801095c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801095e:	8b3b      	ldrh	r3, [r7, #24]
 8010960:	b2da      	uxtb	r2, r3
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	7f3a      	ldrb	r2, [r7, #28]
 801096a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2201      	movs	r2, #1
 8010970:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	73da      	strb	r2, [r3, #15]
}
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08c      	sub	sp, #48	; 0x30
 8010988:	af02      	add	r7, sp, #8
 801098a:	4603      	mov	r3, r0
 801098c:	71fb      	strb	r3, [r7, #7]
 801098e:	460b      	mov	r3, r1
 8010990:	80bb      	strh	r3, [r7, #4]
 8010992:	4613      	mov	r3, r2
 8010994:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801099a:	887b      	ldrh	r3, [r7, #2]
 801099c:	2b41      	cmp	r3, #65	; 0x41
 801099e:	d00b      	beq.n	80109b8 <pbuf_alloc+0x34>
 80109a0:	2b41      	cmp	r3, #65	; 0x41
 80109a2:	dc02      	bgt.n	80109aa <pbuf_alloc+0x26>
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d007      	beq.n	80109b8 <pbuf_alloc+0x34>
 80109a8:	e0c2      	b.n	8010b30 <pbuf_alloc+0x1ac>
 80109aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80109ae:	d00b      	beq.n	80109c8 <pbuf_alloc+0x44>
 80109b0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80109b4:	d070      	beq.n	8010a98 <pbuf_alloc+0x114>
 80109b6:	e0bb      	b.n	8010b30 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80109b8:	887a      	ldrh	r2, [r7, #2]
 80109ba:	88bb      	ldrh	r3, [r7, #4]
 80109bc:	4619      	mov	r1, r3
 80109be:	2000      	movs	r0, #0
 80109c0:	f000 f8d2 	bl	8010b68 <pbuf_alloc_reference>
 80109c4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80109c6:	e0bd      	b.n	8010b44 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80109c8:	2300      	movs	r3, #0
 80109ca:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80109cc:	2300      	movs	r3, #0
 80109ce:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80109d0:	88bb      	ldrh	r3, [r7, #4]
 80109d2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80109d4:	2008      	movs	r0, #8
 80109d6:	f7ff fc73 	bl	80102c0 <memp_malloc>
 80109da:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d109      	bne.n	80109f6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80109e2:	f7ff ff99 	bl	8010918 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80109ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109ee:	f000 faa9 	bl	8010f44 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	e0a7      	b.n	8010b46 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80109f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109f8:	3303      	adds	r3, #3
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	f023 0303 	bic.w	r3, r3, #3
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	8b7a      	ldrh	r2, [r7, #26]
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	bf28      	it	cs
 8010a0e:	4613      	movcs	r3, r2
 8010a10:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a14:	3310      	adds	r3, #16
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	4413      	add	r3, r2
 8010a1a:	3303      	adds	r3, #3
 8010a1c:	f023 0303 	bic.w	r3, r3, #3
 8010a20:	4618      	mov	r0, r3
 8010a22:	89f9      	ldrh	r1, [r7, #14]
 8010a24:	8b7a      	ldrh	r2, [r7, #26]
 8010a26:	2300      	movs	r3, #0
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	887b      	ldrh	r3, [r7, #2]
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	460b      	mov	r3, r1
 8010a30:	4601      	mov	r1, r0
 8010a32:	6938      	ldr	r0, [r7, #16]
 8010a34:	f7ff ff7c 	bl	8010930 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	f003 0303 	and.w	r3, r3, #3
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d006      	beq.n	8010a52 <pbuf_alloc+0xce>
 8010a44:	4b42      	ldr	r3, [pc, #264]	; (8010b50 <pbuf_alloc+0x1cc>)
 8010a46:	f240 1201 	movw	r2, #257	; 0x101
 8010a4a:	4942      	ldr	r1, [pc, #264]	; (8010b54 <pbuf_alloc+0x1d0>)
 8010a4c:	4842      	ldr	r0, [pc, #264]	; (8010b58 <pbuf_alloc+0x1d4>)
 8010a4e:	f00b fb01 	bl	801c054 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a54:	3303      	adds	r3, #3
 8010a56:	f023 0303 	bic.w	r3, r3, #3
 8010a5a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010a5e:	d106      	bne.n	8010a6e <pbuf_alloc+0xea>
 8010a60:	4b3b      	ldr	r3, [pc, #236]	; (8010b50 <pbuf_alloc+0x1cc>)
 8010a62:	f240 1203 	movw	r2, #259	; 0x103
 8010a66:	493d      	ldr	r1, [pc, #244]	; (8010b5c <pbuf_alloc+0x1d8>)
 8010a68:	483b      	ldr	r0, [pc, #236]	; (8010b58 <pbuf_alloc+0x1d4>)
 8010a6a:	f00b faf3 	bl	801c054 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d102      	bne.n	8010a7a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	627b      	str	r3, [r7, #36]	; 0x24
 8010a78:	e002      	b.n	8010a80 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	693a      	ldr	r2, [r7, #16]
 8010a7e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010a84:	8b7a      	ldrh	r2, [r7, #26]
 8010a86:	89fb      	ldrh	r3, [r7, #14]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010a90:	8b7b      	ldrh	r3, [r7, #26]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d19e      	bne.n	80109d4 <pbuf_alloc+0x50>
      break;
 8010a96:	e055      	b.n	8010b44 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a9a:	3303      	adds	r3, #3
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	88bb      	ldrh	r3, [r7, #4]
 8010aa6:	3303      	adds	r3, #3
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	f023 0303 	bic.w	r3, r3, #3
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	4413      	add	r3, r2
 8010ab2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010ab4:	8b3b      	ldrh	r3, [r7, #24]
 8010ab6:	3310      	adds	r3, #16
 8010ab8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010aba:	8b3a      	ldrh	r2, [r7, #24]
 8010abc:	88bb      	ldrh	r3, [r7, #4]
 8010abe:	3303      	adds	r3, #3
 8010ac0:	f023 0303 	bic.w	r3, r3, #3
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d306      	bcc.n	8010ad6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010ac8:	8afa      	ldrh	r2, [r7, #22]
 8010aca:	88bb      	ldrh	r3, [r7, #4]
 8010acc:	3303      	adds	r3, #3
 8010ace:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d201      	bcs.n	8010ada <pbuf_alloc+0x156>
        return NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e035      	b.n	8010b46 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010ada:	8afb      	ldrh	r3, [r7, #22]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7ff fa81 	bl	800ffe4 <mem_malloc>
 8010ae2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d101      	bne.n	8010aee <pbuf_alloc+0x16a>
        return NULL;
 8010aea:	2300      	movs	r3, #0
 8010aec:	e02b      	b.n	8010b46 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010af0:	3310      	adds	r3, #16
 8010af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010af4:	4413      	add	r3, r2
 8010af6:	3303      	adds	r3, #3
 8010af8:	f023 0303 	bic.w	r3, r3, #3
 8010afc:	4618      	mov	r0, r3
 8010afe:	88b9      	ldrh	r1, [r7, #4]
 8010b00:	88ba      	ldrh	r2, [r7, #4]
 8010b02:	2300      	movs	r3, #0
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	887b      	ldrh	r3, [r7, #2]
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b10:	f7ff ff0e 	bl	8010930 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	f003 0303 	and.w	r3, r3, #3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d010      	beq.n	8010b42 <pbuf_alloc+0x1be>
 8010b20:	4b0b      	ldr	r3, [pc, #44]	; (8010b50 <pbuf_alloc+0x1cc>)
 8010b22:	f240 1223 	movw	r2, #291	; 0x123
 8010b26:	490e      	ldr	r1, [pc, #56]	; (8010b60 <pbuf_alloc+0x1dc>)
 8010b28:	480b      	ldr	r0, [pc, #44]	; (8010b58 <pbuf_alloc+0x1d4>)
 8010b2a:	f00b fa93 	bl	801c054 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010b2e:	e008      	b.n	8010b42 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010b30:	4b07      	ldr	r3, [pc, #28]	; (8010b50 <pbuf_alloc+0x1cc>)
 8010b32:	f240 1227 	movw	r2, #295	; 0x127
 8010b36:	490b      	ldr	r1, [pc, #44]	; (8010b64 <pbuf_alloc+0x1e0>)
 8010b38:	4807      	ldr	r0, [pc, #28]	; (8010b58 <pbuf_alloc+0x1d4>)
 8010b3a:	f00b fa8b 	bl	801c054 <iprintf>
      return NULL;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e001      	b.n	8010b46 <pbuf_alloc+0x1c2>
      break;
 8010b42:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3728      	adds	r7, #40	; 0x28
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	08021b74 	.word	0x08021b74
 8010b54:	08021ba4 	.word	0x08021ba4
 8010b58:	08021bd4 	.word	0x08021bd4
 8010b5c:	08021bfc 	.word	0x08021bfc
 8010b60:	08021c30 	.word	0x08021c30
 8010b64:	08021c5c 	.word	0x08021c5c

08010b68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af02      	add	r7, sp, #8
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	460b      	mov	r3, r1
 8010b72:	807b      	strh	r3, [r7, #2]
 8010b74:	4613      	mov	r3, r2
 8010b76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010b78:	883b      	ldrh	r3, [r7, #0]
 8010b7a:	2b41      	cmp	r3, #65	; 0x41
 8010b7c:	d009      	beq.n	8010b92 <pbuf_alloc_reference+0x2a>
 8010b7e:	883b      	ldrh	r3, [r7, #0]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d006      	beq.n	8010b92 <pbuf_alloc_reference+0x2a>
 8010b84:	4b0f      	ldr	r3, [pc, #60]	; (8010bc4 <pbuf_alloc_reference+0x5c>)
 8010b86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010b8a:	490f      	ldr	r1, [pc, #60]	; (8010bc8 <pbuf_alloc_reference+0x60>)
 8010b8c:	480f      	ldr	r0, [pc, #60]	; (8010bcc <pbuf_alloc_reference+0x64>)
 8010b8e:	f00b fa61 	bl	801c054 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010b92:	2007      	movs	r0, #7
 8010b94:	f7ff fb94 	bl	80102c0 <memp_malloc>
 8010b98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e00b      	b.n	8010bbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010ba4:	8879      	ldrh	r1, [r7, #2]
 8010ba6:	887a      	ldrh	r2, [r7, #2]
 8010ba8:	2300      	movs	r3, #0
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	883b      	ldrh	r3, [r7, #0]
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7ff febb 	bl	8010930 <pbuf_init_alloced_pbuf>
  return p;
 8010bba:	68fb      	ldr	r3, [r7, #12]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	08021b74 	.word	0x08021b74
 8010bc8:	08021c78 	.word	0x08021c78
 8010bcc:	08021bd4 	.word	0x08021bd4

08010bd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b088      	sub	sp, #32
 8010bd4:	af02      	add	r7, sp, #8
 8010bd6:	607b      	str	r3, [r7, #4]
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73fb      	strb	r3, [r7, #15]
 8010bdc:	460b      	mov	r3, r1
 8010bde:	81bb      	strh	r3, [r7, #12]
 8010be0:	4613      	mov	r3, r2
 8010be2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010be4:	7bfb      	ldrb	r3, [r7, #15]
 8010be6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010be8:	8a7b      	ldrh	r3, [r7, #18]
 8010bea:	3303      	adds	r3, #3
 8010bec:	f023 0203 	bic.w	r2, r3, #3
 8010bf0:	89bb      	ldrh	r3, [r7, #12]
 8010bf2:	441a      	add	r2, r3
 8010bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d901      	bls.n	8010bfe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e018      	b.n	8010c30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d007      	beq.n	8010c14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010c04:	8a7b      	ldrh	r3, [r7, #18]
 8010c06:	3303      	adds	r3, #3
 8010c08:	f023 0303 	bic.w	r3, r3, #3
 8010c0c:	6a3a      	ldr	r2, [r7, #32]
 8010c0e:	4413      	add	r3, r2
 8010c10:	617b      	str	r3, [r7, #20]
 8010c12:	e001      	b.n	8010c18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010c14:	2300      	movs	r3, #0
 8010c16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	89b9      	ldrh	r1, [r7, #12]
 8010c1c:	89ba      	ldrh	r2, [r7, #12]
 8010c1e:	2302      	movs	r3, #2
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	897b      	ldrh	r3, [r7, #10]
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	460b      	mov	r3, r1
 8010c28:	6979      	ldr	r1, [r7, #20]
 8010c2a:	f7ff fe81 	bl	8010930 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010c2e:	687b      	ldr	r3, [r7, #4]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3718      	adds	r7, #24
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <pbuf_realloc+0x20>
 8010c4a:	4b3a      	ldr	r3, [pc, #232]	; (8010d34 <pbuf_realloc+0xfc>)
 8010c4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010c50:	4939      	ldr	r1, [pc, #228]	; (8010d38 <pbuf_realloc+0x100>)
 8010c52:	483a      	ldr	r0, [pc, #232]	; (8010d3c <pbuf_realloc+0x104>)
 8010c54:	f00b f9fe 	bl	801c054 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	891b      	ldrh	r3, [r3, #8]
 8010c5c:	887a      	ldrh	r2, [r7, #2]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d264      	bcs.n	8010d2c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	891a      	ldrh	r2, [r3, #8]
 8010c66:	887b      	ldrh	r3, [r7, #2]
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010c6c:	887b      	ldrh	r3, [r7, #2]
 8010c6e:	817b      	strh	r3, [r7, #10]
  q = p;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010c74:	e018      	b.n	8010ca8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	895b      	ldrh	r3, [r3, #10]
 8010c7a:	897a      	ldrh	r2, [r7, #10]
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	891a      	ldrh	r2, [r3, #8]
 8010c84:	893b      	ldrh	r3, [r7, #8]
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <pbuf_realloc+0x70>
 8010c9a:	4b26      	ldr	r3, [pc, #152]	; (8010d34 <pbuf_realloc+0xfc>)
 8010c9c:	f240 12af 	movw	r2, #431	; 0x1af
 8010ca0:	4927      	ldr	r1, [pc, #156]	; (8010d40 <pbuf_realloc+0x108>)
 8010ca2:	4826      	ldr	r0, [pc, #152]	; (8010d3c <pbuf_realloc+0x104>)
 8010ca4:	f00b f9d6 	bl	801c054 <iprintf>
  while (rem_len > q->len) {
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	895b      	ldrh	r3, [r3, #10]
 8010cac:	897a      	ldrh	r2, [r7, #10]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d8e1      	bhi.n	8010c76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	7b1b      	ldrb	r3, [r3, #12]
 8010cb6:	f003 030f 	and.w	r3, r3, #15
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d122      	bne.n	8010d04 <pbuf_realloc+0xcc>
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	895b      	ldrh	r3, [r3, #10]
 8010cc2:	897a      	ldrh	r2, [r7, #10]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d01d      	beq.n	8010d04 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	7b5b      	ldrb	r3, [r3, #13]
 8010ccc:	f003 0302 	and.w	r3, r3, #2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d117      	bne.n	8010d04 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	897b      	ldrh	r3, [r7, #10]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff f87f 	bl	800fdec <mem_trim>
 8010cee:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d106      	bne.n	8010d04 <pbuf_realloc+0xcc>
 8010cf6:	4b0f      	ldr	r3, [pc, #60]	; (8010d34 <pbuf_realloc+0xfc>)
 8010cf8:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010cfc:	4911      	ldr	r1, [pc, #68]	; (8010d44 <pbuf_realloc+0x10c>)
 8010cfe:	480f      	ldr	r0, [pc, #60]	; (8010d3c <pbuf_realloc+0x104>)
 8010d00:	f00b f9a8 	bl	801c054 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	897a      	ldrh	r2, [r7, #10]
 8010d08:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	895a      	ldrh	r2, [r3, #10]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d004      	beq.n	8010d24 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 f910 	bl	8010f44 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2200      	movs	r2, #0
 8010d28:	601a      	str	r2, [r3, #0]
 8010d2a:	e000      	b.n	8010d2e <pbuf_realloc+0xf6>
    return;
 8010d2c:	bf00      	nop

}
 8010d2e:	3710      	adds	r7, #16
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	08021b74 	.word	0x08021b74
 8010d38:	08021c8c 	.word	0x08021c8c
 8010d3c:	08021bd4 	.word	0x08021bd4
 8010d40:	08021ca4 	.word	0x08021ca4
 8010d44:	08021cbc 	.word	0x08021cbc

08010d48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	4613      	mov	r3, r2
 8010d54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d106      	bne.n	8010d6a <pbuf_add_header_impl+0x22>
 8010d5c:	4b2b      	ldr	r3, [pc, #172]	; (8010e0c <pbuf_add_header_impl+0xc4>)
 8010d5e:	f240 12df 	movw	r2, #479	; 0x1df
 8010d62:	492b      	ldr	r1, [pc, #172]	; (8010e10 <pbuf_add_header_impl+0xc8>)
 8010d64:	482b      	ldr	r0, [pc, #172]	; (8010e14 <pbuf_add_header_impl+0xcc>)
 8010d66:	f00b f975 	bl	801c054 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d003      	beq.n	8010d78 <pbuf_add_header_impl+0x30>
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d76:	d301      	bcc.n	8010d7c <pbuf_add_header_impl+0x34>
    return 1;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e043      	b.n	8010e04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d101      	bne.n	8010d86 <pbuf_add_header_impl+0x3e>
    return 0;
 8010d82:	2300      	movs	r3, #0
 8010d84:	e03e      	b.n	8010e04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	891a      	ldrh	r2, [r3, #8]
 8010d8e:	8a7b      	ldrh	r3, [r7, #18]
 8010d90:	4413      	add	r3, r2
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	8a7a      	ldrh	r2, [r7, #18]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d901      	bls.n	8010d9e <pbuf_add_header_impl+0x56>
    return 1;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e032      	b.n	8010e04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	7b1b      	ldrb	r3, [r3, #12]
 8010da2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010da4:	8a3b      	ldrh	r3, [r7, #16]
 8010da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00c      	beq.n	8010dc8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	685a      	ldr	r2, [r3, #4]
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	425b      	negs	r3, r3
 8010db6:	4413      	add	r3, r2
 8010db8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3310      	adds	r3, #16
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d20d      	bcs.n	8010de0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e01d      	b.n	8010e04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010dc8:	79fb      	ldrb	r3, [r7, #7]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d006      	beq.n	8010ddc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	685a      	ldr	r2, [r3, #4]
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	425b      	negs	r3, r3
 8010dd6:	4413      	add	r3, r2
 8010dd8:	617b      	str	r3, [r7, #20]
 8010dda:	e001      	b.n	8010de0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e011      	b.n	8010e04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	697a      	ldr	r2, [r7, #20]
 8010de4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	895a      	ldrh	r2, [r3, #10]
 8010dea:	8a7b      	ldrh	r3, [r7, #18]
 8010dec:	4413      	add	r3, r2
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	891a      	ldrh	r2, [r3, #8]
 8010df8:	8a7b      	ldrh	r3, [r7, #18]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	b29a      	uxth	r2, r3
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	811a      	strh	r2, [r3, #8]


  return 0;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3718      	adds	r7, #24
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	08021b74 	.word	0x08021b74
 8010e10:	08021cd8 	.word	0x08021cd8
 8010e14:	08021bd4 	.word	0x08021bd4

08010e18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010e22:	2200      	movs	r2, #0
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff ff8e 	bl	8010d48 <pbuf_add_header_impl>
 8010e2c:	4603      	mov	r3, r0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
	...

08010e38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b084      	sub	sp, #16
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d106      	bne.n	8010e56 <pbuf_remove_header+0x1e>
 8010e48:	4b20      	ldr	r3, [pc, #128]	; (8010ecc <pbuf_remove_header+0x94>)
 8010e4a:	f240 224b 	movw	r2, #587	; 0x24b
 8010e4e:	4920      	ldr	r1, [pc, #128]	; (8010ed0 <pbuf_remove_header+0x98>)
 8010e50:	4820      	ldr	r0, [pc, #128]	; (8010ed4 <pbuf_remove_header+0x9c>)
 8010e52:	f00b f8ff 	bl	801c054 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d003      	beq.n	8010e64 <pbuf_remove_header+0x2c>
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e62:	d301      	bcc.n	8010e68 <pbuf_remove_header+0x30>
    return 1;
 8010e64:	2301      	movs	r3, #1
 8010e66:	e02c      	b.n	8010ec2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <pbuf_remove_header+0x3a>
    return 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e027      	b.n	8010ec2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	895b      	ldrh	r3, [r3, #10]
 8010e7a:	89fa      	ldrh	r2, [r7, #14]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d908      	bls.n	8010e92 <pbuf_remove_header+0x5a>
 8010e80:	4b12      	ldr	r3, [pc, #72]	; (8010ecc <pbuf_remove_header+0x94>)
 8010e82:	f240 2255 	movw	r2, #597	; 0x255
 8010e86:	4914      	ldr	r1, [pc, #80]	; (8010ed8 <pbuf_remove_header+0xa0>)
 8010e88:	4812      	ldr	r0, [pc, #72]	; (8010ed4 <pbuf_remove_header+0x9c>)
 8010e8a:	f00b f8e3 	bl	801c054 <iprintf>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e017      	b.n	8010ec2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	685a      	ldr	r2, [r3, #4]
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	441a      	add	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	895a      	ldrh	r2, [r3, #10]
 8010ea8:	89fb      	ldrh	r3, [r7, #14]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	891a      	ldrh	r2, [r3, #8]
 8010eb6:	89fb      	ldrh	r3, [r7, #14]
 8010eb8:	1ad3      	subs	r3, r2, r3
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3710      	adds	r7, #16
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	08021b74 	.word	0x08021b74
 8010ed0:	08021cd8 	.word	0x08021cd8
 8010ed4:	08021bd4 	.word	0x08021bd4
 8010ed8:	08021ce4 	.word	0x08021ce4

08010edc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	807b      	strh	r3, [r7, #2]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010eec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	da08      	bge.n	8010f06 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010ef4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ef8:	425b      	negs	r3, r3
 8010efa:	4619      	mov	r1, r3
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff ff9b 	bl	8010e38 <pbuf_remove_header>
 8010f02:	4603      	mov	r3, r0
 8010f04:	e007      	b.n	8010f16 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010f06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f0a:	787a      	ldrb	r2, [r7, #1]
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7ff ff1a 	bl	8010d48 <pbuf_add_header_impl>
 8010f14:	4603      	mov	r3, r0
  }
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b082      	sub	sp, #8
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	460b      	mov	r3, r1
 8010f28:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010f2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	4619      	mov	r1, r3
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7ff ffd2 	bl	8010edc <pbuf_header_impl>
 8010f38:	4603      	mov	r3, r0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
	...

08010f44 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b086      	sub	sp, #24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d10b      	bne.n	8010f6a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d106      	bne.n	8010f66 <pbuf_free+0x22>
 8010f58:	4b38      	ldr	r3, [pc, #224]	; (801103c <pbuf_free+0xf8>)
 8010f5a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010f5e:	4938      	ldr	r1, [pc, #224]	; (8011040 <pbuf_free+0xfc>)
 8010f60:	4838      	ldr	r0, [pc, #224]	; (8011044 <pbuf_free+0x100>)
 8010f62:	f00b f877 	bl	801c054 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e063      	b.n	8011032 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010f6e:	e05c      	b.n	801102a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	7b9b      	ldrb	r3, [r3, #14]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d106      	bne.n	8010f86 <pbuf_free+0x42>
 8010f78:	4b30      	ldr	r3, [pc, #192]	; (801103c <pbuf_free+0xf8>)
 8010f7a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010f7e:	4932      	ldr	r1, [pc, #200]	; (8011048 <pbuf_free+0x104>)
 8010f80:	4830      	ldr	r0, [pc, #192]	; (8011044 <pbuf_free+0x100>)
 8010f82:	f00b f867 	bl	801c054 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7b9b      	ldrb	r3, [r3, #14]
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	739a      	strb	r2, [r3, #14]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7b9b      	ldrb	r3, [r3, #14]
 8010f96:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010f98:	7dbb      	ldrb	r3, [r7, #22]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d143      	bne.n	8011026 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	7b1b      	ldrb	r3, [r3, #12]
 8010fa8:	f003 030f 	and.w	r3, r3, #15
 8010fac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	7b5b      	ldrb	r3, [r3, #13]
 8010fb2:	f003 0302 	and.w	r3, r3, #2
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d011      	beq.n	8010fde <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d106      	bne.n	8010fd4 <pbuf_free+0x90>
 8010fc6:	4b1d      	ldr	r3, [pc, #116]	; (801103c <pbuf_free+0xf8>)
 8010fc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010fcc:	491f      	ldr	r1, [pc, #124]	; (801104c <pbuf_free+0x108>)
 8010fce:	481d      	ldr	r0, [pc, #116]	; (8011044 <pbuf_free+0x100>)
 8010fd0:	f00b f840 	bl	801c054 <iprintf>
        pc->custom_free_function(p);
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	4798      	blx	r3
 8010fdc:	e01d      	b.n	801101a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010fde:	7bfb      	ldrb	r3, [r7, #15]
 8010fe0:	2b02      	cmp	r3, #2
 8010fe2:	d104      	bne.n	8010fee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	2008      	movs	r0, #8
 8010fe8:	f7ff f9b6 	bl	8010358 <memp_free>
 8010fec:	e015      	b.n	801101a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010fee:	7bfb      	ldrb	r3, [r7, #15]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d104      	bne.n	8010ffe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	2007      	movs	r0, #7
 8010ff8:	f7ff f9ae 	bl	8010358 <memp_free>
 8010ffc:	e00d      	b.n	801101a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d103      	bne.n	801100c <pbuf_free+0xc8>
          mem_free(p);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7fe fe87 	bl	800fd18 <mem_free>
 801100a:	e006      	b.n	801101a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801100c:	4b0b      	ldr	r3, [pc, #44]	; (801103c <pbuf_free+0xf8>)
 801100e:	f240 320f 	movw	r2, #783	; 0x30f
 8011012:	490f      	ldr	r1, [pc, #60]	; (8011050 <pbuf_free+0x10c>)
 8011014:	480b      	ldr	r0, [pc, #44]	; (8011044 <pbuf_free+0x100>)
 8011016:	f00b f81d 	bl	801c054 <iprintf>
        }
      }
      count++;
 801101a:	7dfb      	ldrb	r3, [r7, #23]
 801101c:	3301      	adds	r3, #1
 801101e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	607b      	str	r3, [r7, #4]
 8011024:	e001      	b.n	801102a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d19f      	bne.n	8010f70 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011030:	7dfb      	ldrb	r3, [r7, #23]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3718      	adds	r7, #24
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	08021b74 	.word	0x08021b74
 8011040:	08021cd8 	.word	0x08021cd8
 8011044:	08021bd4 	.word	0x08021bd4
 8011048:	08021d04 	.word	0x08021d04
 801104c:	08021d1c 	.word	0x08021d1c
 8011050:	08021d40 	.word	0x08021d40

08011054 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011060:	e005      	b.n	801106e <pbuf_clen+0x1a>
    ++len;
 8011062:	89fb      	ldrh	r3, [r7, #14]
 8011064:	3301      	adds	r3, #1
 8011066:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1f6      	bne.n	8011062 <pbuf_clen+0xe>
  }
  return len;
 8011074:	89fb      	ldrh	r3, [r7, #14]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
	...

08011084 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d010      	beq.n	80110b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	7b9b      	ldrb	r3, [r3, #14]
 8011096:	3301      	adds	r3, #1
 8011098:	b2da      	uxtb	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7b9b      	ldrb	r3, [r3, #14]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d106      	bne.n	80110b4 <pbuf_ref+0x30>
 80110a6:	4b05      	ldr	r3, [pc, #20]	; (80110bc <pbuf_ref+0x38>)
 80110a8:	f240 3242 	movw	r2, #834	; 0x342
 80110ac:	4904      	ldr	r1, [pc, #16]	; (80110c0 <pbuf_ref+0x3c>)
 80110ae:	4805      	ldr	r0, [pc, #20]	; (80110c4 <pbuf_ref+0x40>)
 80110b0:	f00a ffd0 	bl	801c054 <iprintf>
  }
}
 80110b4:	bf00      	nop
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	08021b74 	.word	0x08021b74
 80110c0:	08021d54 	.word	0x08021d54
 80110c4:	08021bd4 	.word	0x08021bd4

080110c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <pbuf_cat+0x16>
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d107      	bne.n	80110ee <pbuf_cat+0x26>
 80110de:	4b20      	ldr	r3, [pc, #128]	; (8011160 <pbuf_cat+0x98>)
 80110e0:	f240 325a 	movw	r2, #858	; 0x35a
 80110e4:	491f      	ldr	r1, [pc, #124]	; (8011164 <pbuf_cat+0x9c>)
 80110e6:	4820      	ldr	r0, [pc, #128]	; (8011168 <pbuf_cat+0xa0>)
 80110e8:	f00a ffb4 	bl	801c054 <iprintf>
 80110ec:	e034      	b.n	8011158 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	60fb      	str	r3, [r7, #12]
 80110f2:	e00a      	b.n	801110a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	891a      	ldrh	r2, [r3, #8]
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	891b      	ldrh	r3, [r3, #8]
 80110fc:	4413      	add	r3, r2
 80110fe:	b29a      	uxth	r2, r3
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	60fb      	str	r3, [r7, #12]
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d1f0      	bne.n	80110f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	891a      	ldrh	r2, [r3, #8]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	895b      	ldrh	r3, [r3, #10]
 801111a:	429a      	cmp	r2, r3
 801111c:	d006      	beq.n	801112c <pbuf_cat+0x64>
 801111e:	4b10      	ldr	r3, [pc, #64]	; (8011160 <pbuf_cat+0x98>)
 8011120:	f240 3262 	movw	r2, #866	; 0x362
 8011124:	4911      	ldr	r1, [pc, #68]	; (801116c <pbuf_cat+0xa4>)
 8011126:	4810      	ldr	r0, [pc, #64]	; (8011168 <pbuf_cat+0xa0>)
 8011128:	f00a ff94 	bl	801c054 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d006      	beq.n	8011142 <pbuf_cat+0x7a>
 8011134:	4b0a      	ldr	r3, [pc, #40]	; (8011160 <pbuf_cat+0x98>)
 8011136:	f240 3263 	movw	r2, #867	; 0x363
 801113a:	490d      	ldr	r1, [pc, #52]	; (8011170 <pbuf_cat+0xa8>)
 801113c:	480a      	ldr	r0, [pc, #40]	; (8011168 <pbuf_cat+0xa0>)
 801113e:	f00a ff89 	bl	801c054 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	891a      	ldrh	r2, [r3, #8]
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	891b      	ldrh	r3, [r3, #8]
 801114a:	4413      	add	r3, r2
 801114c:	b29a      	uxth	r2, r3
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	683a      	ldr	r2, [r7, #0]
 8011156:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	08021b74 	.word	0x08021b74
 8011164:	08021d68 	.word	0x08021d68
 8011168:	08021bd4 	.word	0x08021bd4
 801116c:	08021da0 	.word	0x08021da0
 8011170:	08021dd0 	.word	0x08021dd0

08011174 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff ffa1 	bl	80110c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011186:	6838      	ldr	r0, [r7, #0]
 8011188:	f7ff ff7c 	bl	8011084 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801118c:	bf00      	nop
 801118e:	3708      	adds	r7, #8
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b086      	sub	sp, #24
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801119e:	2300      	movs	r3, #0
 80111a0:	617b      	str	r3, [r7, #20]
 80111a2:	2300      	movs	r3, #0
 80111a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d008      	beq.n	80111be <pbuf_copy+0x2a>
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d005      	beq.n	80111be <pbuf_copy+0x2a>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	891a      	ldrh	r2, [r3, #8]
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d209      	bcs.n	80111d2 <pbuf_copy+0x3e>
 80111be:	4b57      	ldr	r3, [pc, #348]	; (801131c <pbuf_copy+0x188>)
 80111c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80111c4:	4956      	ldr	r1, [pc, #344]	; (8011320 <pbuf_copy+0x18c>)
 80111c6:	4857      	ldr	r0, [pc, #348]	; (8011324 <pbuf_copy+0x190>)
 80111c8:	f00a ff44 	bl	801c054 <iprintf>
 80111cc:	f06f 030f 	mvn.w	r3, #15
 80111d0:	e09f      	b.n	8011312 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	461a      	mov	r2, r3
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	1ad2      	subs	r2, r2, r3
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	895b      	ldrh	r3, [r3, #10]
 80111e0:	4619      	mov	r1, r3
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	1acb      	subs	r3, r1, r3
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d306      	bcc.n	80111f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	895b      	ldrh	r3, [r3, #10]
 80111ee:	461a      	mov	r2, r3
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	60fb      	str	r3, [r7, #12]
 80111f6:	e005      	b.n	8011204 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	895b      	ldrh	r3, [r3, #10]
 80111fc:	461a      	mov	r2, r3
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	685a      	ldr	r2, [r3, #4]
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	18d0      	adds	r0, r2, r3
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	685a      	ldr	r2, [r3, #4]
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	4413      	add	r3, r2
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	4619      	mov	r1, r3
 8011218:	f00a f9eb 	bl	801b5f2 <memcpy>
    offset_to += len;
 801121c:	697a      	ldr	r2, [r7, #20]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	4413      	add	r3, r2
 8011222:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011224:	693a      	ldr	r2, [r7, #16]
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	4413      	add	r3, r2
 801122a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	895b      	ldrh	r3, [r3, #10]
 8011230:	461a      	mov	r2, r3
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	4293      	cmp	r3, r2
 8011236:	d906      	bls.n	8011246 <pbuf_copy+0xb2>
 8011238:	4b38      	ldr	r3, [pc, #224]	; (801131c <pbuf_copy+0x188>)
 801123a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801123e:	493a      	ldr	r1, [pc, #232]	; (8011328 <pbuf_copy+0x194>)
 8011240:	4838      	ldr	r0, [pc, #224]	; (8011324 <pbuf_copy+0x190>)
 8011242:	f00a ff07 	bl	801c054 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	895b      	ldrh	r3, [r3, #10]
 801124a:	461a      	mov	r2, r3
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	4293      	cmp	r3, r2
 8011250:	d906      	bls.n	8011260 <pbuf_copy+0xcc>
 8011252:	4b32      	ldr	r3, [pc, #200]	; (801131c <pbuf_copy+0x188>)
 8011254:	f240 32da 	movw	r2, #986	; 0x3da
 8011258:	4934      	ldr	r1, [pc, #208]	; (801132c <pbuf_copy+0x198>)
 801125a:	4832      	ldr	r0, [pc, #200]	; (8011324 <pbuf_copy+0x190>)
 801125c:	f00a fefa 	bl	801c054 <iprintf>
    if (offset_from >= p_from->len) {
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	895b      	ldrh	r3, [r3, #10]
 8011264:	461a      	mov	r2, r3
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	4293      	cmp	r3, r2
 801126a:	d304      	bcc.n	8011276 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801126c:	2300      	movs	r3, #0
 801126e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	895b      	ldrh	r3, [r3, #10]
 801127a:	461a      	mov	r2, r3
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	4293      	cmp	r3, r2
 8011280:	d114      	bne.n	80112ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10c      	bne.n	80112ac <pbuf_copy+0x118>
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d009      	beq.n	80112ac <pbuf_copy+0x118>
 8011298:	4b20      	ldr	r3, [pc, #128]	; (801131c <pbuf_copy+0x188>)
 801129a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801129e:	4924      	ldr	r1, [pc, #144]	; (8011330 <pbuf_copy+0x19c>)
 80112a0:	4820      	ldr	r0, [pc, #128]	; (8011324 <pbuf_copy+0x190>)
 80112a2:	f00a fed7 	bl	801c054 <iprintf>
 80112a6:	f06f 030f 	mvn.w	r3, #15
 80112aa:	e032      	b.n	8011312 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d013      	beq.n	80112da <pbuf_copy+0x146>
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	895a      	ldrh	r2, [r3, #10]
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	891b      	ldrh	r3, [r3, #8]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d10d      	bne.n	80112da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d009      	beq.n	80112da <pbuf_copy+0x146>
 80112c6:	4b15      	ldr	r3, [pc, #84]	; (801131c <pbuf_copy+0x188>)
 80112c8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80112cc:	4919      	ldr	r1, [pc, #100]	; (8011334 <pbuf_copy+0x1a0>)
 80112ce:	4815      	ldr	r0, [pc, #84]	; (8011324 <pbuf_copy+0x190>)
 80112d0:	f00a fec0 	bl	801c054 <iprintf>
 80112d4:	f06f 0305 	mvn.w	r3, #5
 80112d8:	e01b      	b.n	8011312 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d013      	beq.n	8011308 <pbuf_copy+0x174>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	895a      	ldrh	r2, [r3, #10]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	891b      	ldrh	r3, [r3, #8]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d10d      	bne.n	8011308 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d009      	beq.n	8011308 <pbuf_copy+0x174>
 80112f4:	4b09      	ldr	r3, [pc, #36]	; (801131c <pbuf_copy+0x188>)
 80112f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80112fa:	490e      	ldr	r1, [pc, #56]	; (8011334 <pbuf_copy+0x1a0>)
 80112fc:	4809      	ldr	r0, [pc, #36]	; (8011324 <pbuf_copy+0x190>)
 80112fe:	f00a fea9 	bl	801c054 <iprintf>
 8011302:	f06f 0305 	mvn.w	r3, #5
 8011306:	e004      	b.n	8011312 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	f47f af61 	bne.w	80111d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3718      	adds	r7, #24
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	08021b74 	.word	0x08021b74
 8011320:	08021e1c 	.word	0x08021e1c
 8011324:	08021bd4 	.word	0x08021bd4
 8011328:	08021e4c 	.word	0x08021e4c
 801132c:	08021e64 	.word	0x08021e64
 8011330:	08021e80 	.word	0x08021e80
 8011334:	08021e90 	.word	0x08021e90

08011338 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b088      	sub	sp, #32
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	4611      	mov	r1, r2
 8011344:	461a      	mov	r2, r3
 8011346:	460b      	mov	r3, r1
 8011348:	80fb      	strh	r3, [r7, #6]
 801134a:	4613      	mov	r3, r2
 801134c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801134e:	2300      	movs	r3, #0
 8011350:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011352:	2300      	movs	r3, #0
 8011354:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d108      	bne.n	801136e <pbuf_copy_partial+0x36>
 801135c:	4b2b      	ldr	r3, [pc, #172]	; (801140c <pbuf_copy_partial+0xd4>)
 801135e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011362:	492b      	ldr	r1, [pc, #172]	; (8011410 <pbuf_copy_partial+0xd8>)
 8011364:	482b      	ldr	r0, [pc, #172]	; (8011414 <pbuf_copy_partial+0xdc>)
 8011366:	f00a fe75 	bl	801c054 <iprintf>
 801136a:	2300      	movs	r3, #0
 801136c:	e04a      	b.n	8011404 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d108      	bne.n	8011386 <pbuf_copy_partial+0x4e>
 8011374:	4b25      	ldr	r3, [pc, #148]	; (801140c <pbuf_copy_partial+0xd4>)
 8011376:	f240 420b 	movw	r2, #1035	; 0x40b
 801137a:	4927      	ldr	r1, [pc, #156]	; (8011418 <pbuf_copy_partial+0xe0>)
 801137c:	4825      	ldr	r0, [pc, #148]	; (8011414 <pbuf_copy_partial+0xdc>)
 801137e:	f00a fe69 	bl	801c054 <iprintf>
 8011382:	2300      	movs	r3, #0
 8011384:	e03e      	b.n	8011404 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	61fb      	str	r3, [r7, #28]
 801138a:	e034      	b.n	80113f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801138c:	88bb      	ldrh	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00a      	beq.n	80113a8 <pbuf_copy_partial+0x70>
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	895b      	ldrh	r3, [r3, #10]
 8011396:	88ba      	ldrh	r2, [r7, #4]
 8011398:	429a      	cmp	r2, r3
 801139a:	d305      	bcc.n	80113a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	895b      	ldrh	r3, [r3, #10]
 80113a0:	88ba      	ldrh	r2, [r7, #4]
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	80bb      	strh	r3, [r7, #4]
 80113a6:	e023      	b.n	80113f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	895a      	ldrh	r2, [r3, #10]
 80113ac:	88bb      	ldrh	r3, [r7, #4]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80113b2:	8b3a      	ldrh	r2, [r7, #24]
 80113b4:	88fb      	ldrh	r3, [r7, #6]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d901      	bls.n	80113be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80113ba:	88fb      	ldrh	r3, [r7, #6]
 80113bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80113be:	8b7b      	ldrh	r3, [r7, #26]
 80113c0:	68ba      	ldr	r2, [r7, #8]
 80113c2:	18d0      	adds	r0, r2, r3
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	685a      	ldr	r2, [r3, #4]
 80113c8:	88bb      	ldrh	r3, [r7, #4]
 80113ca:	4413      	add	r3, r2
 80113cc:	8b3a      	ldrh	r2, [r7, #24]
 80113ce:	4619      	mov	r1, r3
 80113d0:	f00a f90f 	bl	801b5f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80113d4:	8afa      	ldrh	r2, [r7, #22]
 80113d6:	8b3b      	ldrh	r3, [r7, #24]
 80113d8:	4413      	add	r3, r2
 80113da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80113dc:	8b7a      	ldrh	r2, [r7, #26]
 80113de:	8b3b      	ldrh	r3, [r7, #24]
 80113e0:	4413      	add	r3, r2
 80113e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80113e4:	88fa      	ldrh	r2, [r7, #6]
 80113e6:	8b3b      	ldrh	r3, [r7, #24]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80113ec:	2300      	movs	r3, #0
 80113ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	61fb      	str	r3, [r7, #28]
 80113f6:	88fb      	ldrh	r3, [r7, #6]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <pbuf_copy_partial+0xca>
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1c4      	bne.n	801138c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011402:	8afb      	ldrh	r3, [r7, #22]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3720      	adds	r7, #32
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	08021b74 	.word	0x08021b74
 8011410:	08021ebc 	.word	0x08021ebc
 8011414:	08021bd4 	.word	0x08021bd4
 8011418:	08021edc 	.word	0x08021edc

0801141c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	603a      	str	r2, [r7, #0]
 8011426:	71fb      	strb	r3, [r7, #7]
 8011428:	460b      	mov	r3, r1
 801142a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	8919      	ldrh	r1, [r3, #8]
 8011430:	88ba      	ldrh	r2, [r7, #4]
 8011432:	79fb      	ldrb	r3, [r7, #7]
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff faa5 	bl	8010984 <pbuf_alloc>
 801143a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <pbuf_clone+0x2a>
    return NULL;
 8011442:	2300      	movs	r3, #0
 8011444:	e011      	b.n	801146a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f7ff fea3 	bl	8011194 <pbuf_copy>
 801144e:	4603      	mov	r3, r0
 8011450:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011452:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d006      	beq.n	8011468 <pbuf_clone+0x4c>
 801145a:	4b06      	ldr	r3, [pc, #24]	; (8011474 <pbuf_clone+0x58>)
 801145c:	f240 5224 	movw	r2, #1316	; 0x524
 8011460:	4905      	ldr	r1, [pc, #20]	; (8011478 <pbuf_clone+0x5c>)
 8011462:	4806      	ldr	r0, [pc, #24]	; (801147c <pbuf_clone+0x60>)
 8011464:	f00a fdf6 	bl	801c054 <iprintf>
  return q;
 8011468:	68fb      	ldr	r3, [r7, #12]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	08021b74 	.word	0x08021b74
 8011478:	08021fe8 	.word	0x08021fe8
 801147c:	08021bd4 	.word	0x08021bd4

08011480 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011484:	f00a fdfe 	bl	801c084 <rand>
 8011488:	4603      	mov	r3, r0
 801148a:	b29b      	uxth	r3, r3
 801148c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011490:	b29b      	uxth	r3, r3
 8011492:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011496:	b29a      	uxth	r2, r3
 8011498:	4b01      	ldr	r3, [pc, #4]	; (80114a0 <tcp_init+0x20>)
 801149a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801149c:	bf00      	nop
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	20000076 	.word	0x20000076

080114a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	7d1b      	ldrb	r3, [r3, #20]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d105      	bne.n	80114c0 <tcp_free+0x1c>
 80114b4:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <tcp_free+0x2c>)
 80114b6:	22d4      	movs	r2, #212	; 0xd4
 80114b8:	4906      	ldr	r1, [pc, #24]	; (80114d4 <tcp_free+0x30>)
 80114ba:	4807      	ldr	r0, [pc, #28]	; (80114d8 <tcp_free+0x34>)
 80114bc:	f00a fdca 	bl	801c054 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80114c0:	6879      	ldr	r1, [r7, #4]
 80114c2:	2001      	movs	r0, #1
 80114c4:	f7fe ff48 	bl	8010358 <memp_free>
}
 80114c8:	bf00      	nop
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	08022074 	.word	0x08022074
 80114d4:	080220a4 	.word	0x080220a4
 80114d8:	080220b8 	.word	0x080220b8

080114dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	7d1b      	ldrb	r3, [r3, #20]
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d105      	bne.n	80114f8 <tcp_free_listen+0x1c>
 80114ec:	4b06      	ldr	r3, [pc, #24]	; (8011508 <tcp_free_listen+0x2c>)
 80114ee:	22df      	movs	r2, #223	; 0xdf
 80114f0:	4906      	ldr	r1, [pc, #24]	; (801150c <tcp_free_listen+0x30>)
 80114f2:	4807      	ldr	r0, [pc, #28]	; (8011510 <tcp_free_listen+0x34>)
 80114f4:	f00a fdae 	bl	801c054 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80114f8:	6879      	ldr	r1, [r7, #4]
 80114fa:	2002      	movs	r0, #2
 80114fc:	f7fe ff2c 	bl	8010358 <memp_free>
}
 8011500:	bf00      	nop
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	08022074 	.word	0x08022074
 801150c:	080220e0 	.word	0x080220e0
 8011510:	080220b8 	.word	0x080220b8

08011514 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011518:	f000 fe98 	bl	801224c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801151c:	4b07      	ldr	r3, [pc, #28]	; (801153c <tcp_tmr+0x28>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	3301      	adds	r3, #1
 8011522:	b2da      	uxtb	r2, r3
 8011524:	4b05      	ldr	r3, [pc, #20]	; (801153c <tcp_tmr+0x28>)
 8011526:	701a      	strb	r2, [r3, #0]
 8011528:	4b04      	ldr	r3, [pc, #16]	; (801153c <tcp_tmr+0x28>)
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	f003 0301 	and.w	r3, r3, #1
 8011530:	2b00      	cmp	r3, #0
 8011532:	d001      	beq.n	8011538 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011534:	f000 fb4c 	bl	8011bd0 <tcp_slowtmr>
  }
}
 8011538:	bf00      	nop
 801153a:	bd80      	pop	{r7, pc}
 801153c:	20001031 	.word	0x20001031

08011540 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d105      	bne.n	801155c <tcp_remove_listener+0x1c>
 8011550:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <tcp_remove_listener+0x48>)
 8011552:	22ff      	movs	r2, #255	; 0xff
 8011554:	490d      	ldr	r1, [pc, #52]	; (801158c <tcp_remove_listener+0x4c>)
 8011556:	480e      	ldr	r0, [pc, #56]	; (8011590 <tcp_remove_listener+0x50>)
 8011558:	f00a fd7c 	bl	801c054 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	e00a      	b.n	8011578 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d102      	bne.n	8011572 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2200      	movs	r2, #0
 8011570:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	60fb      	str	r3, [r7, #12]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1f1      	bne.n	8011562 <tcp_remove_listener+0x22>
    }
  }
}
 801157e:	bf00      	nop
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	08022074 	.word	0x08022074
 801158c:	080220fc 	.word	0x080220fc
 8011590:	080220b8 	.word	0x080220b8

08011594 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d106      	bne.n	80115b0 <tcp_listen_closed+0x1c>
 80115a2:	4b14      	ldr	r3, [pc, #80]	; (80115f4 <tcp_listen_closed+0x60>)
 80115a4:	f240 1211 	movw	r2, #273	; 0x111
 80115a8:	4913      	ldr	r1, [pc, #76]	; (80115f8 <tcp_listen_closed+0x64>)
 80115aa:	4814      	ldr	r0, [pc, #80]	; (80115fc <tcp_listen_closed+0x68>)
 80115ac:	f00a fd52 	bl	801c054 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	7d1b      	ldrb	r3, [r3, #20]
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d006      	beq.n	80115c6 <tcp_listen_closed+0x32>
 80115b8:	4b0e      	ldr	r3, [pc, #56]	; (80115f4 <tcp_listen_closed+0x60>)
 80115ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80115be:	4910      	ldr	r1, [pc, #64]	; (8011600 <tcp_listen_closed+0x6c>)
 80115c0:	480e      	ldr	r0, [pc, #56]	; (80115fc <tcp_listen_closed+0x68>)
 80115c2:	f00a fd47 	bl	801c054 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80115c6:	2301      	movs	r3, #1
 80115c8:	60fb      	str	r3, [r7, #12]
 80115ca:	e00b      	b.n	80115e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80115cc:	4a0d      	ldr	r2, [pc, #52]	; (8011604 <tcp_listen_closed+0x70>)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6879      	ldr	r1, [r7, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	f7ff ffb1 	bl	8011540 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	3301      	adds	r3, #1
 80115e2:	60fb      	str	r3, [r7, #12]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	d9f0      	bls.n	80115cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80115ea:	bf00      	nop
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	08022074 	.word	0x08022074
 80115f8:	08022124 	.word	0x08022124
 80115fc:	080220b8 	.word	0x080220b8
 8011600:	08022130 	.word	0x08022130
 8011604:	08024948 	.word	0x08024948

08011608 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011608:	b5b0      	push	{r4, r5, r7, lr}
 801160a:	b088      	sub	sp, #32
 801160c:	af04      	add	r7, sp, #16
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <tcp_close_shutdown+0x20>
 801161a:	4b61      	ldr	r3, [pc, #388]	; (80117a0 <tcp_close_shutdown+0x198>)
 801161c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011620:	4960      	ldr	r1, [pc, #384]	; (80117a4 <tcp_close_shutdown+0x19c>)
 8011622:	4861      	ldr	r0, [pc, #388]	; (80117a8 <tcp_close_shutdown+0x1a0>)
 8011624:	f00a fd16 	bl	801c054 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011628:	78fb      	ldrb	r3, [r7, #3]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d066      	beq.n	80116fc <tcp_close_shutdown+0xf4>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	7d1b      	ldrb	r3, [r3, #20]
 8011632:	2b04      	cmp	r3, #4
 8011634:	d003      	beq.n	801163e <tcp_close_shutdown+0x36>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	7d1b      	ldrb	r3, [r3, #20]
 801163a:	2b07      	cmp	r3, #7
 801163c:	d15e      	bne.n	80116fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011642:	2b00      	cmp	r3, #0
 8011644:	d104      	bne.n	8011650 <tcp_close_shutdown+0x48>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801164a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801164e:	d055      	beq.n	80116fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8b5b      	ldrh	r3, [r3, #26]
 8011654:	f003 0310 	and.w	r3, r3, #16
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <tcp_close_shutdown+0x62>
 801165c:	4b50      	ldr	r3, [pc, #320]	; (80117a0 <tcp_close_shutdown+0x198>)
 801165e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011662:	4952      	ldr	r1, [pc, #328]	; (80117ac <tcp_close_shutdown+0x1a4>)
 8011664:	4850      	ldr	r0, [pc, #320]	; (80117a8 <tcp_close_shutdown+0x1a0>)
 8011666:	f00a fcf5 	bl	801c054 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011672:	687d      	ldr	r5, [r7, #4]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3304      	adds	r3, #4
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	8ad2      	ldrh	r2, [r2, #22]
 801167c:	6879      	ldr	r1, [r7, #4]
 801167e:	8b09      	ldrh	r1, [r1, #24]
 8011680:	9102      	str	r1, [sp, #8]
 8011682:	9201      	str	r2, [sp, #4]
 8011684:	9300      	str	r3, [sp, #0]
 8011686:	462b      	mov	r3, r5
 8011688:	4622      	mov	r2, r4
 801168a:	4601      	mov	r1, r0
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f004 fe8f 	bl	80163b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f001 f8ba 	bl	801280c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011698:	4b45      	ldr	r3, [pc, #276]	; (80117b0 <tcp_close_shutdown+0x1a8>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d105      	bne.n	80116ae <tcp_close_shutdown+0xa6>
 80116a2:	4b43      	ldr	r3, [pc, #268]	; (80117b0 <tcp_close_shutdown+0x1a8>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	4a41      	ldr	r2, [pc, #260]	; (80117b0 <tcp_close_shutdown+0x1a8>)
 80116aa:	6013      	str	r3, [r2, #0]
 80116ac:	e013      	b.n	80116d6 <tcp_close_shutdown+0xce>
 80116ae:	4b40      	ldr	r3, [pc, #256]	; (80117b0 <tcp_close_shutdown+0x1a8>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	e00c      	b.n	80116d0 <tcp_close_shutdown+0xc8>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d104      	bne.n	80116ca <tcp_close_shutdown+0xc2>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	68da      	ldr	r2, [r3, #12]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	60da      	str	r2, [r3, #12]
 80116c8:	e005      	b.n	80116d6 <tcp_close_shutdown+0xce>
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d1ef      	bne.n	80116b6 <tcp_close_shutdown+0xae>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	60da      	str	r2, [r3, #12]
 80116dc:	4b35      	ldr	r3, [pc, #212]	; (80117b4 <tcp_close_shutdown+0x1ac>)
 80116de:	2201      	movs	r2, #1
 80116e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80116e2:	4b35      	ldr	r3, [pc, #212]	; (80117b8 <tcp_close_shutdown+0x1b0>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d102      	bne.n	80116f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80116ec:	f003 fd4c 	bl	8015188 <tcp_trigger_input_pcb_close>
 80116f0:	e002      	b.n	80116f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff fed6 	bl	80114a4 <tcp_free>
      }
      return ERR_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	e04d      	b.n	8011798 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	7d1b      	ldrb	r3, [r3, #20]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d02d      	beq.n	8011760 <tcp_close_shutdown+0x158>
 8011704:	2b02      	cmp	r3, #2
 8011706:	d036      	beq.n	8011776 <tcp_close_shutdown+0x16e>
 8011708:	2b00      	cmp	r3, #0
 801170a:	d13f      	bne.n	801178c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8adb      	ldrh	r3, [r3, #22]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d021      	beq.n	8011758 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011714:	4b29      	ldr	r3, [pc, #164]	; (80117bc <tcp_close_shutdown+0x1b4>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	429a      	cmp	r2, r3
 801171c:	d105      	bne.n	801172a <tcp_close_shutdown+0x122>
 801171e:	4b27      	ldr	r3, [pc, #156]	; (80117bc <tcp_close_shutdown+0x1b4>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	4a25      	ldr	r2, [pc, #148]	; (80117bc <tcp_close_shutdown+0x1b4>)
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	e013      	b.n	8011752 <tcp_close_shutdown+0x14a>
 801172a:	4b24      	ldr	r3, [pc, #144]	; (80117bc <tcp_close_shutdown+0x1b4>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	60bb      	str	r3, [r7, #8]
 8011730:	e00c      	b.n	801174c <tcp_close_shutdown+0x144>
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	429a      	cmp	r2, r3
 801173a:	d104      	bne.n	8011746 <tcp_close_shutdown+0x13e>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	68da      	ldr	r2, [r3, #12]
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	60da      	str	r2, [r3, #12]
 8011744:	e005      	b.n	8011752 <tcp_close_shutdown+0x14a>
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	60bb      	str	r3, [r7, #8]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1ef      	bne.n	8011732 <tcp_close_shutdown+0x12a>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2200      	movs	r2, #0
 8011756:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7ff fea3 	bl	80114a4 <tcp_free>
      break;
 801175e:	e01a      	b.n	8011796 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff ff17 	bl	8011594 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011766:	6879      	ldr	r1, [r7, #4]
 8011768:	4815      	ldr	r0, [pc, #84]	; (80117c0 <tcp_close_shutdown+0x1b8>)
 801176a:	f001 f89f 	bl	80128ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f7ff feb4 	bl	80114dc <tcp_free_listen>
      break;
 8011774:	e00f      	b.n	8011796 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011776:	6879      	ldr	r1, [r7, #4]
 8011778:	480d      	ldr	r0, [pc, #52]	; (80117b0 <tcp_close_shutdown+0x1a8>)
 801177a:	f001 f897 	bl	80128ac <tcp_pcb_remove>
 801177e:	4b0d      	ldr	r3, [pc, #52]	; (80117b4 <tcp_close_shutdown+0x1ac>)
 8011780:	2201      	movs	r2, #1
 8011782:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7ff fe8d 	bl	80114a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801178a:	e004      	b.n	8011796 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f000 f819 	bl	80117c4 <tcp_close_shutdown_fin>
 8011792:	4603      	mov	r3, r0
 8011794:	e000      	b.n	8011798 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8011796:	2300      	movs	r3, #0
}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bdb0      	pop	{r4, r5, r7, pc}
 80117a0:	08022074 	.word	0x08022074
 80117a4:	08022148 	.word	0x08022148
 80117a8:	080220b8 	.word	0x080220b8
 80117ac:	08022168 	.word	0x08022168
 80117b0:	200082c4 	.word	0x200082c4
 80117b4:	200082c0 	.word	0x200082c0
 80117b8:	200082d8 	.word	0x200082d8
 80117bc:	200082d0 	.word	0x200082d0
 80117c0:	200082cc 	.word	0x200082cc

080117c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d106      	bne.n	80117e0 <tcp_close_shutdown_fin+0x1c>
 80117d2:	4b2c      	ldr	r3, [pc, #176]	; (8011884 <tcp_close_shutdown_fin+0xc0>)
 80117d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80117d8:	492b      	ldr	r1, [pc, #172]	; (8011888 <tcp_close_shutdown_fin+0xc4>)
 80117da:	482c      	ldr	r0, [pc, #176]	; (801188c <tcp_close_shutdown_fin+0xc8>)
 80117dc:	f00a fc3a 	bl	801c054 <iprintf>

  switch (pcb->state) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b04      	cmp	r3, #4
 80117e6:	d010      	beq.n	801180a <tcp_close_shutdown_fin+0x46>
 80117e8:	2b07      	cmp	r3, #7
 80117ea:	d01b      	beq.n	8011824 <tcp_close_shutdown_fin+0x60>
 80117ec:	2b03      	cmp	r3, #3
 80117ee:	d126      	bne.n	801183e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f003 fedb 	bl	80155ac <tcp_send_fin>
 80117f6:	4603      	mov	r3, r0
 80117f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80117fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d11f      	bne.n	8011842 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2205      	movs	r2, #5
 8011806:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011808:	e01b      	b.n	8011842 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f003 fece 	bl	80155ac <tcp_send_fin>
 8011810:	4603      	mov	r3, r0
 8011812:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d114      	bne.n	8011846 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2205      	movs	r2, #5
 8011820:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011822:	e010      	b.n	8011846 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f003 fec1 	bl	80155ac <tcp_send_fin>
 801182a:	4603      	mov	r3, r0
 801182c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2209      	movs	r2, #9
 801183a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801183c:	e005      	b.n	801184a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801183e:	2300      	movs	r3, #0
 8011840:	e01c      	b.n	801187c <tcp_close_shutdown_fin+0xb8>
      break;
 8011842:	bf00      	nop
 8011844:	e002      	b.n	801184c <tcp_close_shutdown_fin+0x88>
      break;
 8011846:	bf00      	nop
 8011848:	e000      	b.n	801184c <tcp_close_shutdown_fin+0x88>
      break;
 801184a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801184c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d103      	bne.n	801185c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f003 ffe7 	bl	8015828 <tcp_output>
 801185a:	e00d      	b.n	8011878 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011864:	d108      	bne.n	8011878 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	8b5b      	ldrh	r3, [r3, #26]
 801186a:	f043 0308 	orr.w	r3, r3, #8
 801186e:	b29a      	uxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011874:	2300      	movs	r3, #0
 8011876:	e001      	b.n	801187c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3710      	adds	r7, #16
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	08022074 	.word	0x08022074
 8011888:	08022124 	.word	0x08022124
 801188c:	080220b8 	.word	0x080220b8

08011890 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <tcp_close+0x22>
 801189e:	4b0f      	ldr	r3, [pc, #60]	; (80118dc <tcp_close+0x4c>)
 80118a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80118a4:	490e      	ldr	r1, [pc, #56]	; (80118e0 <tcp_close+0x50>)
 80118a6:	480f      	ldr	r0, [pc, #60]	; (80118e4 <tcp_close+0x54>)
 80118a8:	f00a fbd4 	bl	801c054 <iprintf>
 80118ac:	f06f 030f 	mvn.w	r3, #15
 80118b0:	e00f      	b.n	80118d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7d1b      	ldrb	r3, [r3, #20]
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d006      	beq.n	80118c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8b5b      	ldrh	r3, [r3, #26]
 80118be:	f043 0310 	orr.w	r3, r3, #16
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80118c8:	2101      	movs	r1, #1
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7ff fe9c 	bl	8011608 <tcp_close_shutdown>
 80118d0:	4603      	mov	r3, r0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3708      	adds	r7, #8
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	08022074 	.word	0x08022074
 80118e0:	08022184 	.word	0x08022184
 80118e4:	080220b8 	.word	0x080220b8

080118e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b08e      	sub	sp, #56	; 0x38
 80118ec:	af04      	add	r7, sp, #16
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d107      	bne.n	8011908 <tcp_abandon+0x20>
 80118f8:	4b52      	ldr	r3, [pc, #328]	; (8011a44 <tcp_abandon+0x15c>)
 80118fa:	f240 223d 	movw	r2, #573	; 0x23d
 80118fe:	4952      	ldr	r1, [pc, #328]	; (8011a48 <tcp_abandon+0x160>)
 8011900:	4852      	ldr	r0, [pc, #328]	; (8011a4c <tcp_abandon+0x164>)
 8011902:	f00a fba7 	bl	801c054 <iprintf>
 8011906:	e099      	b.n	8011a3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7d1b      	ldrb	r3, [r3, #20]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d106      	bne.n	801191e <tcp_abandon+0x36>
 8011910:	4b4c      	ldr	r3, [pc, #304]	; (8011a44 <tcp_abandon+0x15c>)
 8011912:	f240 2241 	movw	r2, #577	; 0x241
 8011916:	494e      	ldr	r1, [pc, #312]	; (8011a50 <tcp_abandon+0x168>)
 8011918:	484c      	ldr	r0, [pc, #304]	; (8011a4c <tcp_abandon+0x164>)
 801191a:	f00a fb9b 	bl	801c054 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	7d1b      	ldrb	r3, [r3, #20]
 8011922:	2b0a      	cmp	r3, #10
 8011924:	d107      	bne.n	8011936 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011926:	6879      	ldr	r1, [r7, #4]
 8011928:	484a      	ldr	r0, [pc, #296]	; (8011a54 <tcp_abandon+0x16c>)
 801192a:	f000 ffbf 	bl	80128ac <tcp_pcb_remove>
    tcp_free(pcb);
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fdb8 	bl	80114a4 <tcp_free>
 8011934:	e082      	b.n	8011a3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801193a:	2300      	movs	r3, #0
 801193c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011942:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011948:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011950:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	7d1b      	ldrb	r3, [r3, #20]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d126      	bne.n	80119ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	8adb      	ldrh	r3, [r3, #22]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d02e      	beq.n	80119c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011968:	4b3b      	ldr	r3, [pc, #236]	; (8011a58 <tcp_abandon+0x170>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	429a      	cmp	r2, r3
 8011970:	d105      	bne.n	801197e <tcp_abandon+0x96>
 8011972:	4b39      	ldr	r3, [pc, #228]	; (8011a58 <tcp_abandon+0x170>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	4a37      	ldr	r2, [pc, #220]	; (8011a58 <tcp_abandon+0x170>)
 801197a:	6013      	str	r3, [r2, #0]
 801197c:	e013      	b.n	80119a6 <tcp_abandon+0xbe>
 801197e:	4b36      	ldr	r3, [pc, #216]	; (8011a58 <tcp_abandon+0x170>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	61fb      	str	r3, [r7, #28]
 8011984:	e00c      	b.n	80119a0 <tcp_abandon+0xb8>
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	429a      	cmp	r2, r3
 801198e:	d104      	bne.n	801199a <tcp_abandon+0xb2>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	68da      	ldr	r2, [r3, #12]
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	60da      	str	r2, [r3, #12]
 8011998:	e005      	b.n	80119a6 <tcp_abandon+0xbe>
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	61fb      	str	r3, [r7, #28]
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1ef      	bne.n	8011986 <tcp_abandon+0x9e>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	60da      	str	r2, [r3, #12]
 80119ac:	e00b      	b.n	80119c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	8adb      	ldrh	r3, [r3, #22]
 80119b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80119b8:	6879      	ldr	r1, [r7, #4]
 80119ba:	4828      	ldr	r0, [pc, #160]	; (8011a5c <tcp_abandon+0x174>)
 80119bc:	f000 ff76 	bl	80128ac <tcp_pcb_remove>
 80119c0:	4b27      	ldr	r3, [pc, #156]	; (8011a60 <tcp_abandon+0x178>)
 80119c2:	2201      	movs	r2, #1
 80119c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d2:	4618      	mov	r0, r3
 80119d4:	f000 fd1a 	bl	801240c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d004      	beq.n	80119ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 fd11 	bl	801240c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d004      	beq.n	80119fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119f6:	4618      	mov	r0, r3
 80119f8:	f000 fd08 	bl	801240c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80119fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00e      	beq.n	8011a20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011a02:	6879      	ldr	r1, [r7, #4]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	3304      	adds	r3, #4
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	8b12      	ldrh	r2, [r2, #24]
 8011a0c:	9202      	str	r2, [sp, #8]
 8011a0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011a10:	9201      	str	r2, [sp, #4]
 8011a12:	9300      	str	r3, [sp, #0]
 8011a14:	460b      	mov	r3, r1
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	69b9      	ldr	r1, [r7, #24]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f004 fcc8 	bl	80163b0 <tcp_rst>
    }
    last_state = pcb->state;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fd3c 	bl	80114a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d004      	beq.n	8011a3c <tcp_abandon+0x154>
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	f06f 010c 	mvn.w	r1, #12
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	4798      	blx	r3
  }
}
 8011a3c:	3728      	adds	r7, #40	; 0x28
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	08022074 	.word	0x08022074
 8011a48:	080221b8 	.word	0x080221b8
 8011a4c:	080220b8 	.word	0x080220b8
 8011a50:	080221d4 	.word	0x080221d4
 8011a54:	200082d4 	.word	0x200082d4
 8011a58:	200082d0 	.word	0x200082d0
 8011a5c:	200082c4 	.word	0x200082c4
 8011a60:	200082c0 	.word	0x200082c0

08011a64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011a6c:	2101      	movs	r1, #1
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7ff ff3a 	bl	80118e8 <tcp_abandon>
}
 8011a74:	bf00      	nop
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d106      	bne.n	8011a98 <tcp_update_rcv_ann_wnd+0x1c>
 8011a8a:	4b25      	ldr	r3, [pc, #148]	; (8011b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8011a8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011a90:	4924      	ldr	r1, [pc, #144]	; (8011b24 <tcp_update_rcv_ann_wnd+0xa8>)
 8011a92:	4825      	ldr	r0, [pc, #148]	; (8011b28 <tcp_update_rcv_ann_wnd+0xac>)
 8011a94:	f00a fade 	bl	801c054 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011aa0:	4413      	add	r3, r2
 8011aa2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011aac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8011ab0:	bf28      	it	cs
 8011ab2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8011ab6:	b292      	uxth	r2, r2
 8011ab8:	4413      	add	r3, r2
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	1ad3      	subs	r3, r2, r3
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	db08      	blt.n	8011ad4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	e020      	b.n	8011b16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	dd03      	ble.n	8011aea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ae8:	e014      	b.n	8011b14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af2:	1ad3      	subs	r3, r2, r3
 8011af4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011afc:	d306      	bcc.n	8011b0c <tcp_update_rcv_ann_wnd+0x90>
 8011afe:	4b08      	ldr	r3, [pc, #32]	; (8011b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8011b00:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011b04:	4909      	ldr	r1, [pc, #36]	; (8011b2c <tcp_update_rcv_ann_wnd+0xb0>)
 8011b06:	4808      	ldr	r0, [pc, #32]	; (8011b28 <tcp_update_rcv_ann_wnd+0xac>)
 8011b08:	f00a faa4 	bl	801c054 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011b14:	2300      	movs	r3, #0
  }
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3710      	adds	r7, #16
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	08022074 	.word	0x08022074
 8011b24:	080222d0 	.word	0x080222d0
 8011b28:	080220b8 	.word	0x080220b8
 8011b2c:	080222f4 	.word	0x080222f4

08011b30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	460b      	mov	r3, r1
 8011b3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d107      	bne.n	8011b52 <tcp_recved+0x22>
 8011b42:	4b1f      	ldr	r3, [pc, #124]	; (8011bc0 <tcp_recved+0x90>)
 8011b44:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011b48:	491e      	ldr	r1, [pc, #120]	; (8011bc4 <tcp_recved+0x94>)
 8011b4a:	481f      	ldr	r0, [pc, #124]	; (8011bc8 <tcp_recved+0x98>)
 8011b4c:	f00a fa82 	bl	801c054 <iprintf>
 8011b50:	e032      	b.n	8011bb8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	7d1b      	ldrb	r3, [r3, #20]
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d106      	bne.n	8011b68 <tcp_recved+0x38>
 8011b5a:	4b19      	ldr	r3, [pc, #100]	; (8011bc0 <tcp_recved+0x90>)
 8011b5c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8011b60:	491a      	ldr	r1, [pc, #104]	; (8011bcc <tcp_recved+0x9c>)
 8011b62:	4819      	ldr	r0, [pc, #100]	; (8011bc8 <tcp_recved+0x98>)
 8011b64:	f00a fa76 	bl	801c054 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b6c:	887b      	ldrh	r3, [r7, #2]
 8011b6e:	4413      	add	r3, r2
 8011b70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011b72:	89fb      	ldrh	r3, [r7, #14]
 8011b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b78:	d804      	bhi.n	8011b84 <tcp_recved+0x54>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b7e:	89fa      	ldrh	r2, [r7, #14]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d204      	bcs.n	8011b8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8011b8c:	e002      	b.n	8011b94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	89fa      	ldrh	r2, [r7, #14]
 8011b92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff ff71 	bl	8011a7c <tcp_update_rcv_ann_wnd>
 8011b9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ba2:	d309      	bcc.n	8011bb8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	8b5b      	ldrh	r3, [r3, #26]
 8011ba8:	f043 0302 	orr.w	r3, r3, #2
 8011bac:	b29a      	uxth	r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f003 fe38 	bl	8015828 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	08022074 	.word	0x08022074
 8011bc4:	08022310 	.word	0x08022310
 8011bc8:	080220b8 	.word	0x080220b8
 8011bcc:	08022328 	.word	0x08022328

08011bd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011bd0:	b5b0      	push	{r4, r5, r7, lr}
 8011bd2:	b090      	sub	sp, #64	; 0x40
 8011bd4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011bdc:	4b94      	ldr	r3, [pc, #592]	; (8011e30 <tcp_slowtmr+0x260>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	3301      	adds	r3, #1
 8011be2:	4a93      	ldr	r2, [pc, #588]	; (8011e30 <tcp_slowtmr+0x260>)
 8011be4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011be6:	4b93      	ldr	r3, [pc, #588]	; (8011e34 <tcp_slowtmr+0x264>)
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	3301      	adds	r3, #1
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	4b91      	ldr	r3, [pc, #580]	; (8011e34 <tcp_slowtmr+0x264>)
 8011bf0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011bf6:	4b90      	ldr	r3, [pc, #576]	; (8011e38 <tcp_slowtmr+0x268>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011bfc:	e29f      	b.n	801213e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c00:	7d1b      	ldrb	r3, [r3, #20]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_slowtmr+0x44>
 8011c06:	4b8d      	ldr	r3, [pc, #564]	; (8011e3c <tcp_slowtmr+0x26c>)
 8011c08:	f240 42be 	movw	r2, #1214	; 0x4be
 8011c0c:	498c      	ldr	r1, [pc, #560]	; (8011e40 <tcp_slowtmr+0x270>)
 8011c0e:	488d      	ldr	r0, [pc, #564]	; (8011e44 <tcp_slowtmr+0x274>)
 8011c10:	f00a fa20 	bl	801c054 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c16:	7d1b      	ldrb	r3, [r3, #20]
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d106      	bne.n	8011c2a <tcp_slowtmr+0x5a>
 8011c1c:	4b87      	ldr	r3, [pc, #540]	; (8011e3c <tcp_slowtmr+0x26c>)
 8011c1e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011c22:	4989      	ldr	r1, [pc, #548]	; (8011e48 <tcp_slowtmr+0x278>)
 8011c24:	4887      	ldr	r0, [pc, #540]	; (8011e44 <tcp_slowtmr+0x274>)
 8011c26:	f00a fa15 	bl	801c054 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	7d1b      	ldrb	r3, [r3, #20]
 8011c2e:	2b0a      	cmp	r3, #10
 8011c30:	d106      	bne.n	8011c40 <tcp_slowtmr+0x70>
 8011c32:	4b82      	ldr	r3, [pc, #520]	; (8011e3c <tcp_slowtmr+0x26c>)
 8011c34:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011c38:	4984      	ldr	r1, [pc, #528]	; (8011e4c <tcp_slowtmr+0x27c>)
 8011c3a:	4882      	ldr	r0, [pc, #520]	; (8011e44 <tcp_slowtmr+0x274>)
 8011c3c:	f00a fa0a 	bl	801c054 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	7f9a      	ldrb	r2, [r3, #30]
 8011c44:	4b7b      	ldr	r3, [pc, #492]	; (8011e34 <tcp_slowtmr+0x264>)
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d105      	bne.n	8011c58 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011c56:	e272      	b.n	801213e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011c58:	4b76      	ldr	r3, [pc, #472]	; (8011e34 <tcp_slowtmr+0x264>)
 8011c5a:	781a      	ldrb	r2, [r3, #0]
 8011c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011c60:	2300      	movs	r3, #0
 8011c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6e:	7d1b      	ldrb	r3, [r3, #20]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d10a      	bne.n	8011c8a <tcp_slowtmr+0xba>
 8011c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c7a:	2b05      	cmp	r3, #5
 8011c7c:	d905      	bls.n	8011c8a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c82:	3301      	adds	r3, #1
 8011c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c88:	e11e      	b.n	8011ec8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c90:	2b0b      	cmp	r3, #11
 8011c92:	d905      	bls.n	8011ca0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c98:	3301      	adds	r3, #1
 8011c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c9e:	e113      	b.n	8011ec8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d075      	beq.n	8011d96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <tcp_slowtmr+0xf0>
 8011cb2:	4b62      	ldr	r3, [pc, #392]	; (8011e3c <tcp_slowtmr+0x26c>)
 8011cb4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011cb8:	4965      	ldr	r1, [pc, #404]	; (8011e50 <tcp_slowtmr+0x280>)
 8011cba:	4862      	ldr	r0, [pc, #392]	; (8011e44 <tcp_slowtmr+0x274>)
 8011cbc:	f00a f9ca 	bl	801c054 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d106      	bne.n	8011cd6 <tcp_slowtmr+0x106>
 8011cc8:	4b5c      	ldr	r3, [pc, #368]	; (8011e3c <tcp_slowtmr+0x26c>)
 8011cca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011cce:	4961      	ldr	r1, [pc, #388]	; (8011e54 <tcp_slowtmr+0x284>)
 8011cd0:	485c      	ldr	r0, [pc, #368]	; (8011e44 <tcp_slowtmr+0x274>)
 8011cd2:	f00a f9bf 	bl	801c054 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011cdc:	2b0b      	cmp	r3, #11
 8011cde:	d905      	bls.n	8011cec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cea:	e0ed      	b.n	8011ec8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	4a58      	ldr	r2, [pc, #352]	; (8011e58 <tcp_slowtmr+0x288>)
 8011cf6:	5cd3      	ldrb	r3, [r2, r3]
 8011cf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d00:	7c7a      	ldrb	r2, [r7, #17]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d907      	bls.n	8011d16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d1c:	7c7a      	ldrb	r2, [r7, #17]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	f200 80d2 	bhi.w	8011ec8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011d24:	2301      	movs	r3, #1
 8011d26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d108      	bne.n	8011d44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d34:	f004 fc2e 	bl	8016594 <tcp_zero_window_probe>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d014      	beq.n	8011d68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011d3e:	2300      	movs	r3, #0
 8011d40:	623b      	str	r3, [r7, #32]
 8011d42:	e011      	b.n	8011d68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d4e:	f003 fae5 	bl	801531c <tcp_split_unsent_seg>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d107      	bne.n	8011d68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d5a:	f003 fd65 	bl	8015828 <tcp_output>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d101      	bne.n	8011d68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f000 80ac 	beq.w	8011ec8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d7e:	2b06      	cmp	r3, #6
 8011d80:	f200 80a2 	bhi.w	8011ec8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011d94:	e098      	b.n	8011ec8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	db0f      	blt.n	8011dc0 <tcp_slowtmr+0x1f0>
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011da6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d008      	beq.n	8011dc0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	3301      	adds	r3, #1
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	b21a      	sxth	r2, r3
 8011dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	db7b      	blt.n	8011ec8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dd2:	f004 f821 	bl	8015e18 <tcp_rexmit_rto_prepare>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d007      	beq.n	8011dec <tcp_slowtmr+0x21c>
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d171      	bne.n	8011ec8 <tcp_slowtmr+0x2f8>
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d06d      	beq.n	8011ec8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dee:	7d1b      	ldrb	r3, [r3, #20]
 8011df0:	2b02      	cmp	r3, #2
 8011df2:	d03a      	beq.n	8011e6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dfa:	2b0c      	cmp	r3, #12
 8011dfc:	bf28      	it	cs
 8011dfe:	230c      	movcs	r3, #12
 8011e00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e08:	10db      	asrs	r3, r3, #3
 8011e0a:	b21b      	sxth	r3, r3
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e14:	4413      	add	r3, r2
 8011e16:	7efa      	ldrb	r2, [r7, #27]
 8011e18:	4910      	ldr	r1, [pc, #64]	; (8011e5c <tcp_slowtmr+0x28c>)
 8011e1a:	5c8a      	ldrb	r2, [r1, r2]
 8011e1c:	4093      	lsls	r3, r2
 8011e1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011e26:	4293      	cmp	r3, r2
 8011e28:	dc1a      	bgt.n	8011e60 <tcp_slowtmr+0x290>
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	b21a      	sxth	r2, r3
 8011e2e:	e019      	b.n	8011e64 <tcp_slowtmr+0x294>
 8011e30:	200082c8 	.word	0x200082c8
 8011e34:	20001032 	.word	0x20001032
 8011e38:	200082c4 	.word	0x200082c4
 8011e3c:	08022074 	.word	0x08022074
 8011e40:	080223b8 	.word	0x080223b8
 8011e44:	080220b8 	.word	0x080220b8
 8011e48:	080223e4 	.word	0x080223e4
 8011e4c:	08022410 	.word	0x08022410
 8011e50:	08022440 	.word	0x08022440
 8011e54:	08022474 	.word	0x08022474
 8011e58:	08024940 	.word	0x08024940
 8011e5c:	08024930 	.word	0x08024930
 8011e60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	bf28      	it	cs
 8011e80:	4613      	movcs	r3, r2
 8011e82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011e84:	8a7b      	ldrh	r3, [r7, #18]
 8011e86:	085b      	lsrs	r3, r3, #1
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e9a:	005b      	lsls	r3, r3, #1
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d206      	bcs.n	8011eb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ea6:	005b      	lsls	r3, r3, #1
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ec4:	f004 f818 	bl	8015ef8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eca:	7d1b      	ldrb	r3, [r3, #20]
 8011ecc:	2b06      	cmp	r3, #6
 8011ece:	d111      	bne.n	8011ef4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed2:	8b5b      	ldrh	r3, [r3, #26]
 8011ed4:	f003 0310 	and.w	r3, r3, #16
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00b      	beq.n	8011ef4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011edc:	4b9d      	ldr	r3, [pc, #628]	; (8012154 <tcp_slowtmr+0x584>)
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee2:	6a1b      	ldr	r3, [r3, #32]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	2b28      	cmp	r3, #40	; 0x28
 8011ee8:	d904      	bls.n	8011ef4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eee:	3301      	adds	r3, #1
 8011ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	7a5b      	ldrb	r3, [r3, #9]
 8011ef8:	f003 0308 	and.w	r3, r3, #8
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d04c      	beq.n	8011f9a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011f04:	2b04      	cmp	r3, #4
 8011f06:	d003      	beq.n	8011f10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011f0c:	2b07      	cmp	r3, #7
 8011f0e:	d144      	bne.n	8011f9a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f10:	4b90      	ldr	r3, [pc, #576]	; (8012154 <tcp_slowtmr+0x584>)
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	6a1b      	ldr	r3, [r3, #32]
 8011f18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f20:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011f24:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011f28:	498b      	ldr	r1, [pc, #556]	; (8012158 <tcp_slowtmr+0x588>)
 8011f2a:	fba1 1303 	umull	r1, r3, r1, r3
 8011f2e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d90a      	bls.n	8011f4a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f38:	3301      	adds	r3, #1
 8011f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f42:	3301      	adds	r3, #1
 8011f44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f48:	e027      	b.n	8011f9a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f4a:	4b82      	ldr	r3, [pc, #520]	; (8012154 <tcp_slowtmr+0x584>)
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f50:	6a1b      	ldr	r3, [r3, #32]
 8011f52:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f56:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f60:	4618      	mov	r0, r3
 8011f62:	4b7e      	ldr	r3, [pc, #504]	; (801215c <tcp_slowtmr+0x58c>)
 8011f64:	fb03 f300 	mul.w	r3, r3, r0
 8011f68:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011f6a:	497b      	ldr	r1, [pc, #492]	; (8012158 <tcp_slowtmr+0x588>)
 8011f6c:	fba1 1303 	umull	r1, r3, r1, r3
 8011f70:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d911      	bls.n	8011f9a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f78:	f004 facc 	bl	8016514 <tcp_keepalive>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011f82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d107      	bne.n	8011f9a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f90:	3301      	adds	r3, #1
 8011f92:	b2da      	uxtb	r2, r3
 8011f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f96:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d011      	beq.n	8011fc6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011fa2:	4b6c      	ldr	r3, [pc, #432]	; (8012154 <tcp_slowtmr+0x584>)
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	1ad2      	subs	r2, r2, r3
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	440b      	add	r3, r1
 8011fba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d302      	bcc.n	8011fc6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fc2:	f000 fdd7 	bl	8012b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	7d1b      	ldrb	r3, [r3, #20]
 8011fca:	2b03      	cmp	r3, #3
 8011fcc:	d10b      	bne.n	8011fe6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011fce:	4b61      	ldr	r3, [pc, #388]	; (8012154 <tcp_slowtmr+0x584>)
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	2b28      	cmp	r3, #40	; 0x28
 8011fda:	d904      	bls.n	8011fe6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	7d1b      	ldrb	r3, [r3, #20]
 8011fea:	2b09      	cmp	r3, #9
 8011fec:	d10b      	bne.n	8012006 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011fee:	4b59      	ldr	r3, [pc, #356]	; (8012154 <tcp_slowtmr+0x584>)
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff4:	6a1b      	ldr	r3, [r3, #32]
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	2bf0      	cmp	r3, #240	; 0xf0
 8011ffa:	d904      	bls.n	8012006 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012000:	3301      	adds	r3, #1
 8012002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801200a:	2b00      	cmp	r3, #0
 801200c:	d060      	beq.n	80120d0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012014:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012018:	f000 fbf8 	bl	801280c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	2b00      	cmp	r3, #0
 8012020:	d010      	beq.n	8012044 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012022:	4b4f      	ldr	r3, [pc, #316]	; (8012160 <tcp_slowtmr+0x590>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012028:	429a      	cmp	r2, r3
 801202a:	d106      	bne.n	801203a <tcp_slowtmr+0x46a>
 801202c:	4b4d      	ldr	r3, [pc, #308]	; (8012164 <tcp_slowtmr+0x594>)
 801202e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012032:	494d      	ldr	r1, [pc, #308]	; (8012168 <tcp_slowtmr+0x598>)
 8012034:	484d      	ldr	r0, [pc, #308]	; (801216c <tcp_slowtmr+0x59c>)
 8012036:	f00a f80d 	bl	801c054 <iprintf>
        prev->next = pcb->next;
 801203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203c:	68da      	ldr	r2, [r3, #12]
 801203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012040:	60da      	str	r2, [r3, #12]
 8012042:	e00f      	b.n	8012064 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012044:	4b46      	ldr	r3, [pc, #280]	; (8012160 <tcp_slowtmr+0x590>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801204a:	429a      	cmp	r2, r3
 801204c:	d006      	beq.n	801205c <tcp_slowtmr+0x48c>
 801204e:	4b45      	ldr	r3, [pc, #276]	; (8012164 <tcp_slowtmr+0x594>)
 8012050:	f240 5271 	movw	r2, #1393	; 0x571
 8012054:	4946      	ldr	r1, [pc, #280]	; (8012170 <tcp_slowtmr+0x5a0>)
 8012056:	4845      	ldr	r0, [pc, #276]	; (801216c <tcp_slowtmr+0x59c>)
 8012058:	f009 fffc 	bl	801c054 <iprintf>
        tcp_active_pcbs = pcb->next;
 801205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	4a3f      	ldr	r2, [pc, #252]	; (8012160 <tcp_slowtmr+0x590>)
 8012062:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012068:	2b00      	cmp	r3, #0
 801206a:	d013      	beq.n	8012094 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012072:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012074:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012078:	3304      	adds	r3, #4
 801207a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801207c:	8ad2      	ldrh	r2, [r2, #22]
 801207e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012080:	8b09      	ldrh	r1, [r1, #24]
 8012082:	9102      	str	r1, [sp, #8]
 8012084:	9201      	str	r2, [sp, #4]
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	462b      	mov	r3, r5
 801208a:	4622      	mov	r2, r4
 801208c:	4601      	mov	r1, r0
 801208e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012090:	f004 f98e 	bl	80163b0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209c:	7d1b      	ldrb	r3, [r3, #20]
 801209e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80120a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80120a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80120aa:	6838      	ldr	r0, [r7, #0]
 80120ac:	f7ff f9fa 	bl	80114a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80120b0:	4b30      	ldr	r3, [pc, #192]	; (8012174 <tcp_slowtmr+0x5a4>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d004      	beq.n	80120c6 <tcp_slowtmr+0x4f6>
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f06f 010c 	mvn.w	r1, #12
 80120c2:	68b8      	ldr	r0, [r7, #8]
 80120c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80120c6:	4b2b      	ldr	r3, [pc, #172]	; (8012174 <tcp_slowtmr+0x5a4>)
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d037      	beq.n	801213e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80120ce:	e590      	b.n	8011bf2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	7f1b      	ldrb	r3, [r3, #28]
 80120de:	3301      	adds	r3, #1
 80120e0:	b2da      	uxtb	r2, r3
 80120e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80120e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e8:	7f1a      	ldrb	r2, [r3, #28]
 80120ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ec:	7f5b      	ldrb	r3, [r3, #29]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d325      	bcc.n	801213e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	2200      	movs	r2, #0
 80120f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80120f8:	4b1e      	ldr	r3, [pc, #120]	; (8012174 <tcp_slowtmr+0x5a4>)
 80120fa:	2200      	movs	r2, #0
 80120fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80120fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00b      	beq.n	8012120 <tcp_slowtmr+0x550>
 8012108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801210e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012110:	6912      	ldr	r2, [r2, #16]
 8012112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012114:	4610      	mov	r0, r2
 8012116:	4798      	blx	r3
 8012118:	4603      	mov	r3, r0
 801211a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801211e:	e002      	b.n	8012126 <tcp_slowtmr+0x556>
 8012120:	2300      	movs	r3, #0
 8012122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012126:	4b13      	ldr	r3, [pc, #76]	; (8012174 <tcp_slowtmr+0x5a4>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d000      	beq.n	8012130 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801212e:	e560      	b.n	8011bf2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012130:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213a:	f003 fb75 	bl	8015828 <tcp_output>
  while (pcb != NULL) {
 801213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012140:	2b00      	cmp	r3, #0
 8012142:	f47f ad5c 	bne.w	8011bfe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012146:	2300      	movs	r3, #0
 8012148:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801214a:	4b0b      	ldr	r3, [pc, #44]	; (8012178 <tcp_slowtmr+0x5a8>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012150:	e067      	b.n	8012222 <tcp_slowtmr+0x652>
 8012152:	bf00      	nop
 8012154:	200082c8 	.word	0x200082c8
 8012158:	10624dd3 	.word	0x10624dd3
 801215c:	000124f8 	.word	0x000124f8
 8012160:	200082c4 	.word	0x200082c4
 8012164:	08022074 	.word	0x08022074
 8012168:	080224ac 	.word	0x080224ac
 801216c:	080220b8 	.word	0x080220b8
 8012170:	080224d8 	.word	0x080224d8
 8012174:	200082c0 	.word	0x200082c0
 8012178:	200082d4 	.word	0x200082d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	7d1b      	ldrb	r3, [r3, #20]
 8012180:	2b0a      	cmp	r3, #10
 8012182:	d006      	beq.n	8012192 <tcp_slowtmr+0x5c2>
 8012184:	4b2a      	ldr	r3, [pc, #168]	; (8012230 <tcp_slowtmr+0x660>)
 8012186:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801218a:	492a      	ldr	r1, [pc, #168]	; (8012234 <tcp_slowtmr+0x664>)
 801218c:	482a      	ldr	r0, [pc, #168]	; (8012238 <tcp_slowtmr+0x668>)
 801218e:	f009 ff61 	bl	801c054 <iprintf>
    pcb_remove = 0;
 8012192:	2300      	movs	r3, #0
 8012194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012198:	4b28      	ldr	r3, [pc, #160]	; (801223c <tcp_slowtmr+0x66c>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219e:	6a1b      	ldr	r3, [r3, #32]
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	2bf0      	cmp	r3, #240	; 0xf0
 80121a4:	d904      	bls.n	80121b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80121a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121aa:	3301      	adds	r3, #1
 80121ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80121b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d02f      	beq.n	8012218 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80121b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ba:	f000 fb27 	bl	801280c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80121be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d010      	beq.n	80121e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80121c4:	4b1e      	ldr	r3, [pc, #120]	; (8012240 <tcp_slowtmr+0x670>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d106      	bne.n	80121dc <tcp_slowtmr+0x60c>
 80121ce:	4b18      	ldr	r3, [pc, #96]	; (8012230 <tcp_slowtmr+0x660>)
 80121d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80121d4:	491b      	ldr	r1, [pc, #108]	; (8012244 <tcp_slowtmr+0x674>)
 80121d6:	4818      	ldr	r0, [pc, #96]	; (8012238 <tcp_slowtmr+0x668>)
 80121d8:	f009 ff3c 	bl	801c054 <iprintf>
        prev->next = pcb->next;
 80121dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121de:	68da      	ldr	r2, [r3, #12]
 80121e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e2:	60da      	str	r2, [r3, #12]
 80121e4:	e00f      	b.n	8012206 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80121e6:	4b16      	ldr	r3, [pc, #88]	; (8012240 <tcp_slowtmr+0x670>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d006      	beq.n	80121fe <tcp_slowtmr+0x62e>
 80121f0:	4b0f      	ldr	r3, [pc, #60]	; (8012230 <tcp_slowtmr+0x660>)
 80121f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80121f6:	4914      	ldr	r1, [pc, #80]	; (8012248 <tcp_slowtmr+0x678>)
 80121f8:	480f      	ldr	r0, [pc, #60]	; (8012238 <tcp_slowtmr+0x668>)
 80121fa:	f009 ff2b 	bl	801c054 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80121fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	4a0f      	ldr	r2, [pc, #60]	; (8012240 <tcp_slowtmr+0x670>)
 8012204:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012208:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220c:	68db      	ldr	r3, [r3, #12]
 801220e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012210:	69f8      	ldr	r0, [r7, #28]
 8012212:	f7ff f947 	bl	80114a4 <tcp_free>
 8012216:	e004      	b.n	8012222 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012224:	2b00      	cmp	r3, #0
 8012226:	d1a9      	bne.n	801217c <tcp_slowtmr+0x5ac>
    }
  }
}
 8012228:	bf00      	nop
 801222a:	3730      	adds	r7, #48	; 0x30
 801222c:	46bd      	mov	sp, r7
 801222e:	bdb0      	pop	{r4, r5, r7, pc}
 8012230:	08022074 	.word	0x08022074
 8012234:	08022504 	.word	0x08022504
 8012238:	080220b8 	.word	0x080220b8
 801223c:	200082c8 	.word	0x200082c8
 8012240:	200082d4 	.word	0x200082d4
 8012244:	08022534 	.word	0x08022534
 8012248:	0802255c 	.word	0x0802255c

0801224c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012252:	4b2d      	ldr	r3, [pc, #180]	; (8012308 <tcp_fasttmr+0xbc>)
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	3301      	adds	r3, #1
 8012258:	b2da      	uxtb	r2, r3
 801225a:	4b2b      	ldr	r3, [pc, #172]	; (8012308 <tcp_fasttmr+0xbc>)
 801225c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801225e:	4b2b      	ldr	r3, [pc, #172]	; (801230c <tcp_fasttmr+0xc0>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012264:	e048      	b.n	80122f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	7f9a      	ldrb	r2, [r3, #30]
 801226a:	4b27      	ldr	r3, [pc, #156]	; (8012308 <tcp_fasttmr+0xbc>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	429a      	cmp	r2, r3
 8012270:	d03f      	beq.n	80122f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012272:	4b25      	ldr	r3, [pc, #148]	; (8012308 <tcp_fasttmr+0xbc>)
 8012274:	781a      	ldrb	r2, [r3, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8b5b      	ldrh	r3, [r3, #26]
 801227e:	f003 0301 	and.w	r3, r3, #1
 8012282:	2b00      	cmp	r3, #0
 8012284:	d010      	beq.n	80122a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	8b5b      	ldrh	r3, [r3, #26]
 801228a:	f043 0302 	orr.w	r3, r3, #2
 801228e:	b29a      	uxth	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f003 fac7 	bl	8015828 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	8b5b      	ldrh	r3, [r3, #26]
 801229e:	f023 0303 	bic.w	r3, r3, #3
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	8b5b      	ldrh	r3, [r3, #26]
 80122ac:	f003 0308 	and.w	r3, r3, #8
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d009      	beq.n	80122c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	8b5b      	ldrh	r3, [r3, #26]
 80122b8:	f023 0308 	bic.w	r3, r3, #8
 80122bc:	b29a      	uxth	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f7ff fa7e 	bl	80117c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00a      	beq.n	80122ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80122d6:	4b0e      	ldr	r3, [pc, #56]	; (8012310 <tcp_fasttmr+0xc4>)
 80122d8:	2200      	movs	r2, #0
 80122da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 f819 	bl	8012314 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80122e2:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <tcp_fasttmr+0xc4>)
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d000      	beq.n	80122ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80122ea:	e7b8      	b.n	801225e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	607b      	str	r3, [r7, #4]
 80122f0:	e002      	b.n	80122f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d1b3      	bne.n	8012266 <tcp_fasttmr+0x1a>
    }
  }
}
 80122fe:	bf00      	nop
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	20001032 	.word	0x20001032
 801230c:	200082c4 	.word	0x200082c4
 8012310:	200082c0 	.word	0x200082c0

08012314 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012314:	b590      	push	{r4, r7, lr}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d109      	bne.n	8012336 <tcp_process_refused_data+0x22>
 8012322:	4b37      	ldr	r3, [pc, #220]	; (8012400 <tcp_process_refused_data+0xec>)
 8012324:	f240 6209 	movw	r2, #1545	; 0x609
 8012328:	4936      	ldr	r1, [pc, #216]	; (8012404 <tcp_process_refused_data+0xf0>)
 801232a:	4837      	ldr	r0, [pc, #220]	; (8012408 <tcp_process_refused_data+0xf4>)
 801232c:	f009 fe92 	bl	801c054 <iprintf>
 8012330:	f06f 030f 	mvn.w	r3, #15
 8012334:	e060      	b.n	80123f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801233a:	7b5b      	ldrb	r3, [r3, #13]
 801233c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012342:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00b      	beq.n	801236c <tcp_process_refused_data+0x58>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6918      	ldr	r0, [r3, #16]
 801235e:	2300      	movs	r3, #0
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	6879      	ldr	r1, [r7, #4]
 8012364:	47a0      	blx	r4
 8012366:	4603      	mov	r3, r0
 8012368:	73fb      	strb	r3, [r7, #15]
 801236a:	e007      	b.n	801237c <tcp_process_refused_data+0x68>
 801236c:	2300      	movs	r3, #0
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	6879      	ldr	r1, [r7, #4]
 8012372:	2000      	movs	r0, #0
 8012374:	f000 f8a2 	bl	80124bc <tcp_recv_null>
 8012378:	4603      	mov	r3, r0
 801237a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801237c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d12a      	bne.n	80123da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012384:	7bbb      	ldrb	r3, [r7, #14]
 8012386:	f003 0320 	and.w	r3, r3, #32
 801238a:	2b00      	cmp	r3, #0
 801238c:	d033      	beq.n	80123f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012396:	d005      	beq.n	80123a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801239c:	3301      	adds	r3, #1
 801239e:	b29a      	uxth	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00b      	beq.n	80123c6 <tcp_process_refused_data+0xb2>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6918      	ldr	r0, [r3, #16]
 80123b8:	2300      	movs	r3, #0
 80123ba:	2200      	movs	r2, #0
 80123bc:	6879      	ldr	r1, [r7, #4]
 80123be:	47a0      	blx	r4
 80123c0:	4603      	mov	r3, r0
 80123c2:	73fb      	strb	r3, [r7, #15]
 80123c4:	e001      	b.n	80123ca <tcp_process_refused_data+0xb6>
 80123c6:	2300      	movs	r3, #0
 80123c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80123ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123ce:	f113 0f0d 	cmn.w	r3, #13
 80123d2:	d110      	bne.n	80123f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80123d4:	f06f 030c 	mvn.w	r3, #12
 80123d8:	e00e      	b.n	80123f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80123da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123de:	f113 0f0d 	cmn.w	r3, #13
 80123e2:	d102      	bne.n	80123ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80123e4:	f06f 030c 	mvn.w	r3, #12
 80123e8:	e006      	b.n	80123f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	68ba      	ldr	r2, [r7, #8]
 80123ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80123f0:	f06f 0304 	mvn.w	r3, #4
 80123f4:	e000      	b.n	80123f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3714      	adds	r7, #20
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd90      	pop	{r4, r7, pc}
 8012400:	08022074 	.word	0x08022074
 8012404:	08022584 	.word	0x08022584
 8012408:	080220b8 	.word	0x080220b8

0801240c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012414:	e007      	b.n	8012426 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f809 	bl	8012434 <tcp_seg_free>
    seg = next;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d1f4      	bne.n	8012416 <tcp_segs_free+0xa>
  }
}
 801242c:	bf00      	nop
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00c      	beq.n	801245c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d004      	beq.n	8012454 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f7fe fd78 	bl	8010f44 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	2003      	movs	r0, #3
 8012458:	f7fd ff7e 	bl	8010358 <memp_free>
  }
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d106      	bne.n	8012480 <tcp_seg_copy+0x1c>
 8012472:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <tcp_seg_copy+0x4c>)
 8012474:	f240 6282 	movw	r2, #1666	; 0x682
 8012478:	490e      	ldr	r1, [pc, #56]	; (80124b4 <tcp_seg_copy+0x50>)
 801247a:	480f      	ldr	r0, [pc, #60]	; (80124b8 <tcp_seg_copy+0x54>)
 801247c:	f009 fdea 	bl	801c054 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012480:	2003      	movs	r0, #3
 8012482:	f7fd ff1d 	bl	80102c0 <memp_malloc>
 8012486:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <tcp_seg_copy+0x2e>
    return NULL;
 801248e:	2300      	movs	r3, #0
 8012490:	e00a      	b.n	80124a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012492:	2210      	movs	r2, #16
 8012494:	6879      	ldr	r1, [r7, #4]
 8012496:	68f8      	ldr	r0, [r7, #12]
 8012498:	f009 f8ab 	bl	801b5f2 <memcpy>
  pbuf_ref(cseg->p);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fe fdef 	bl	8011084 <pbuf_ref>
  return cseg;
 80124a6:	68fb      	ldr	r3, [r7, #12]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3710      	adds	r7, #16
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	08022074 	.word	0x08022074
 80124b4:	080225c8 	.word	0x080225c8
 80124b8:	080220b8 	.word	0x080220b8

080124bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	607a      	str	r2, [r7, #4]
 80124c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d109      	bne.n	80124e4 <tcp_recv_null+0x28>
 80124d0:	4b12      	ldr	r3, [pc, #72]	; (801251c <tcp_recv_null+0x60>)
 80124d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80124d6:	4912      	ldr	r1, [pc, #72]	; (8012520 <tcp_recv_null+0x64>)
 80124d8:	4812      	ldr	r0, [pc, #72]	; (8012524 <tcp_recv_null+0x68>)
 80124da:	f009 fdbb 	bl	801c054 <iprintf>
 80124de:	f06f 030f 	mvn.w	r3, #15
 80124e2:	e016      	b.n	8012512 <tcp_recv_null+0x56>

  if (p != NULL) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d009      	beq.n	80124fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	891b      	ldrh	r3, [r3, #8]
 80124ee:	4619      	mov	r1, r3
 80124f0:	68b8      	ldr	r0, [r7, #8]
 80124f2:	f7ff fb1d 	bl	8011b30 <tcp_recved>
    pbuf_free(p);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7fe fd24 	bl	8010f44 <pbuf_free>
 80124fc:	e008      	b.n	8012510 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80124fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d104      	bne.n	8012510 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012506:	68b8      	ldr	r0, [r7, #8]
 8012508:	f7ff f9c2 	bl	8011890 <tcp_close>
 801250c:	4603      	mov	r3, r0
 801250e:	e000      	b.n	8012512 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012510:	2300      	movs	r3, #0
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	08022074 	.word	0x08022074
 8012520:	080225e4 	.word	0x080225e4
 8012524:	080220b8 	.word	0x080220b8

08012528 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b086      	sub	sp, #24
 801252c:	af00      	add	r7, sp, #0
 801252e:	4603      	mov	r3, r0
 8012530:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012536:	2b00      	cmp	r3, #0
 8012538:	db01      	blt.n	801253e <tcp_kill_prio+0x16>
 801253a:	79fb      	ldrb	r3, [r7, #7]
 801253c:	e000      	b.n	8012540 <tcp_kill_prio+0x18>
 801253e:	237f      	movs	r3, #127	; 0x7f
 8012540:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012542:	7afb      	ldrb	r3, [r7, #11]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d034      	beq.n	80125b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012548:	7afb      	ldrb	r3, [r7, #11]
 801254a:	3b01      	subs	r3, #1
 801254c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012552:	2300      	movs	r3, #0
 8012554:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012556:	4b19      	ldr	r3, [pc, #100]	; (80125bc <tcp_kill_prio+0x94>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	617b      	str	r3, [r7, #20]
 801255c:	e01f      	b.n	801259e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	7d5b      	ldrb	r3, [r3, #21]
 8012562:	7afa      	ldrb	r2, [r7, #11]
 8012564:	429a      	cmp	r2, r3
 8012566:	d80c      	bhi.n	8012582 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801256c:	7afa      	ldrb	r2, [r7, #11]
 801256e:	429a      	cmp	r2, r3
 8012570:	d112      	bne.n	8012598 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012572:	4b13      	ldr	r3, [pc, #76]	; (80125c0 <tcp_kill_prio+0x98>)
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	6a1b      	ldr	r3, [r3, #32]
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	429a      	cmp	r2, r3
 8012580:	d80a      	bhi.n	8012598 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012582:	4b0f      	ldr	r3, [pc, #60]	; (80125c0 <tcp_kill_prio+0x98>)
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	6a1b      	ldr	r3, [r3, #32]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	7d5b      	ldrb	r3, [r3, #21]
 8012596:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	617b      	str	r3, [r7, #20]
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d1dc      	bne.n	801255e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d004      	beq.n	80125b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80125aa:	6938      	ldr	r0, [r7, #16]
 80125ac:	f7ff fa5a 	bl	8011a64 <tcp_abort>
 80125b0:	e000      	b.n	80125b4 <tcp_kill_prio+0x8c>
    return;
 80125b2:	bf00      	nop
  }
}
 80125b4:	3718      	adds	r7, #24
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	200082c4 	.word	0x200082c4
 80125c0:	200082c8 	.word	0x200082c8

080125c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	4603      	mov	r3, r0
 80125cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80125ce:	79fb      	ldrb	r3, [r7, #7]
 80125d0:	2b08      	cmp	r3, #8
 80125d2:	d009      	beq.n	80125e8 <tcp_kill_state+0x24>
 80125d4:	79fb      	ldrb	r3, [r7, #7]
 80125d6:	2b09      	cmp	r3, #9
 80125d8:	d006      	beq.n	80125e8 <tcp_kill_state+0x24>
 80125da:	4b1a      	ldr	r3, [pc, #104]	; (8012644 <tcp_kill_state+0x80>)
 80125dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80125e0:	4919      	ldr	r1, [pc, #100]	; (8012648 <tcp_kill_state+0x84>)
 80125e2:	481a      	ldr	r0, [pc, #104]	; (801264c <tcp_kill_state+0x88>)
 80125e4:	f009 fd36 	bl	801c054 <iprintf>

  inactivity = 0;
 80125e8:	2300      	movs	r3, #0
 80125ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80125ec:	2300      	movs	r3, #0
 80125ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125f0:	4b17      	ldr	r3, [pc, #92]	; (8012650 <tcp_kill_state+0x8c>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	617b      	str	r3, [r7, #20]
 80125f6:	e017      	b.n	8012628 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	7d1b      	ldrb	r3, [r3, #20]
 80125fc:	79fa      	ldrb	r2, [r7, #7]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d10f      	bne.n	8012622 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012602:	4b14      	ldr	r3, [pc, #80]	; (8012654 <tcp_kill_state+0x90>)
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	6a1b      	ldr	r3, [r3, #32]
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	429a      	cmp	r2, r3
 8012610:	d807      	bhi.n	8012622 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012612:	4b10      	ldr	r3, [pc, #64]	; (8012654 <tcp_kill_state+0x90>)
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	6a1b      	ldr	r3, [r3, #32]
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	617b      	str	r3, [r7, #20]
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1e4      	bne.n	80125f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d003      	beq.n	801263c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012634:	2100      	movs	r1, #0
 8012636:	6938      	ldr	r0, [r7, #16]
 8012638:	f7ff f956 	bl	80118e8 <tcp_abandon>
  }
}
 801263c:	bf00      	nop
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	08022074 	.word	0x08022074
 8012648:	08022600 	.word	0x08022600
 801264c:	080220b8 	.word	0x080220b8
 8012650:	200082c4 	.word	0x200082c4
 8012654:	200082c8 	.word	0x200082c8

08012658 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801265e:	2300      	movs	r3, #0
 8012660:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012662:	2300      	movs	r3, #0
 8012664:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012666:	4b12      	ldr	r3, [pc, #72]	; (80126b0 <tcp_kill_timewait+0x58>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	60fb      	str	r3, [r7, #12]
 801266c:	e012      	b.n	8012694 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801266e:	4b11      	ldr	r3, [pc, #68]	; (80126b4 <tcp_kill_timewait+0x5c>)
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6a1b      	ldr	r3, [r3, #32]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	429a      	cmp	r2, r3
 801267c:	d807      	bhi.n	801268e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801267e:	4b0d      	ldr	r3, [pc, #52]	; (80126b4 <tcp_kill_timewait+0x5c>)
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6a1b      	ldr	r3, [r3, #32]
 8012686:	1ad3      	subs	r3, r2, r3
 8012688:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1e9      	bne.n	801266e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80126a0:	68b8      	ldr	r0, [r7, #8]
 80126a2:	f7ff f9df 	bl	8011a64 <tcp_abort>
  }
}
 80126a6:	bf00      	nop
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	200082d4 	.word	0x200082d4
 80126b4:	200082c8 	.word	0x200082c8

080126b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80126be:	4b10      	ldr	r3, [pc, #64]	; (8012700 <tcp_handle_closepend+0x48>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80126c4:	e014      	b.n	80126f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	8b5b      	ldrh	r3, [r3, #26]
 80126d0:	f003 0308 	and.w	r3, r3, #8
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d009      	beq.n	80126ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	8b5b      	ldrh	r3, [r3, #26]
 80126dc:	f023 0308 	bic.w	r3, r3, #8
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7ff f86c 	bl	80117c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d1e7      	bne.n	80126c6 <tcp_handle_closepend+0xe>
  }
}
 80126f6:	bf00      	nop
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	200082c4 	.word	0x200082c4

08012704 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801270e:	2001      	movs	r0, #1
 8012710:	f7fd fdd6 	bl	80102c0 <memp_malloc>
 8012714:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d126      	bne.n	801276a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801271c:	f7ff ffcc 	bl	80126b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012720:	f7ff ff9a 	bl	8012658 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012724:	2001      	movs	r0, #1
 8012726:	f7fd fdcb 	bl	80102c0 <memp_malloc>
 801272a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d11b      	bne.n	801276a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012732:	2009      	movs	r0, #9
 8012734:	f7ff ff46 	bl	80125c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012738:	2001      	movs	r0, #1
 801273a:	f7fd fdc1 	bl	80102c0 <memp_malloc>
 801273e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d111      	bne.n	801276a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012746:	2008      	movs	r0, #8
 8012748:	f7ff ff3c 	bl	80125c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801274c:	2001      	movs	r0, #1
 801274e:	f7fd fdb7 	bl	80102c0 <memp_malloc>
 8012752:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d107      	bne.n	801276a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801275a:	79fb      	ldrb	r3, [r7, #7]
 801275c:	4618      	mov	r0, r3
 801275e:	f7ff fee3 	bl	8012528 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012762:	2001      	movs	r0, #1
 8012764:	f7fd fdac 	bl	80102c0 <memp_malloc>
 8012768:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d03f      	beq.n	80127f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012770:	229c      	movs	r2, #156	; 0x9c
 8012772:	2100      	movs	r1, #0
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f008 ff60 	bl	801b63a <memset>
    pcb->prio = prio;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	79fa      	ldrb	r2, [r7, #7]
 801277e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8012786:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012790:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	22ff      	movs	r2, #255	; 0xff
 801279e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80127a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2206      	movs	r2, #6
 80127ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2206      	movs	r2, #6
 80127b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2201      	movs	r2, #1
 80127c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80127c6:	4b0d      	ldr	r3, [pc, #52]	; (80127fc <tcp_alloc+0xf8>)
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80127ce:	4b0c      	ldr	r3, [pc, #48]	; (8012800 <tcp_alloc+0xfc>)
 80127d0:	781a      	ldrb	r2, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 80127dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	4a08      	ldr	r2, [pc, #32]	; (8012804 <tcp_alloc+0x100>)
 80127e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	4a07      	ldr	r2, [pc, #28]	; (8012808 <tcp_alloc+0x104>)
 80127ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80127f0:	68fb      	ldr	r3, [r7, #12]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	200082c8 	.word	0x200082c8
 8012800:	20001032 	.word	0x20001032
 8012804:	080124bd 	.word	0x080124bd
 8012808:	006ddd00 	.word	0x006ddd00

0801280c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d107      	bne.n	801282a <tcp_pcb_purge+0x1e>
 801281a:	4b21      	ldr	r3, [pc, #132]	; (80128a0 <tcp_pcb_purge+0x94>)
 801281c:	f640 0251 	movw	r2, #2129	; 0x851
 8012820:	4920      	ldr	r1, [pc, #128]	; (80128a4 <tcp_pcb_purge+0x98>)
 8012822:	4821      	ldr	r0, [pc, #132]	; (80128a8 <tcp_pcb_purge+0x9c>)
 8012824:	f009 fc16 	bl	801c054 <iprintf>
 8012828:	e037      	b.n	801289a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	7d1b      	ldrb	r3, [r3, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d033      	beq.n	801289a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012836:	2b0a      	cmp	r3, #10
 8012838:	d02f      	beq.n	801289a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801283e:	2b01      	cmp	r3, #1
 8012840:	d02b      	beq.n	801289a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012846:	2b00      	cmp	r3, #0
 8012848:	d007      	beq.n	801285a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801284e:	4618      	mov	r0, r3
 8012850:	f7fe fb78 	bl	8010f44 <pbuf_free>
      pcb->refused_data = NULL;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2200      	movs	r2, #0
 8012858:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285e:	2b00      	cmp	r3, #0
 8012860:	d002      	beq.n	8012868 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f986 	bl	8012b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801286e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff fdc9 	bl	801240c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff fdc4 	bl	801240c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	66da      	str	r2, [r3, #108]	; 0x6c
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	08022074 	.word	0x08022074
 80128a4:	080226c0 	.word	0x080226c0
 80128a8:	080220b8 	.word	0x080220b8

080128ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d106      	bne.n	80128ca <tcp_pcb_remove+0x1e>
 80128bc:	4b3e      	ldr	r3, [pc, #248]	; (80129b8 <tcp_pcb_remove+0x10c>)
 80128be:	f640 0283 	movw	r2, #2179	; 0x883
 80128c2:	493e      	ldr	r1, [pc, #248]	; (80129bc <tcp_pcb_remove+0x110>)
 80128c4:	483e      	ldr	r0, [pc, #248]	; (80129c0 <tcp_pcb_remove+0x114>)
 80128c6:	f009 fbc5 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d106      	bne.n	80128de <tcp_pcb_remove+0x32>
 80128d0:	4b39      	ldr	r3, [pc, #228]	; (80129b8 <tcp_pcb_remove+0x10c>)
 80128d2:	f640 0284 	movw	r2, #2180	; 0x884
 80128d6:	493b      	ldr	r1, [pc, #236]	; (80129c4 <tcp_pcb_remove+0x118>)
 80128d8:	4839      	ldr	r0, [pc, #228]	; (80129c0 <tcp_pcb_remove+0x114>)
 80128da:	f009 fbbb 	bl	801c054 <iprintf>

  TCP_RMV(pcblist, pcb);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d105      	bne.n	80128f4 <tcp_pcb_remove+0x48>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	68da      	ldr	r2, [r3, #12]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	601a      	str	r2, [r3, #0]
 80128f2:	e013      	b.n	801291c <tcp_pcb_remove+0x70>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	60fb      	str	r3, [r7, #12]
 80128fa:	e00c      	b.n	8012916 <tcp_pcb_remove+0x6a>
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	683a      	ldr	r2, [r7, #0]
 8012902:	429a      	cmp	r2, r3
 8012904:	d104      	bne.n	8012910 <tcp_pcb_remove+0x64>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	68da      	ldr	r2, [r3, #12]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	60da      	str	r2, [r3, #12]
 801290e:	e005      	b.n	801291c <tcp_pcb_remove+0x70>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	60fb      	str	r3, [r7, #12]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d1ef      	bne.n	80128fc <tcp_pcb_remove+0x50>
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	2200      	movs	r2, #0
 8012920:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012922:	6838      	ldr	r0, [r7, #0]
 8012924:	f7ff ff72 	bl	801280c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	7d1b      	ldrb	r3, [r3, #20]
 801292c:	2b0a      	cmp	r3, #10
 801292e:	d013      	beq.n	8012958 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012934:	2b01      	cmp	r3, #1
 8012936:	d00f      	beq.n	8012958 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	8b5b      	ldrh	r3, [r3, #26]
 801293c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012940:	2b00      	cmp	r3, #0
 8012942:	d009      	beq.n	8012958 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	8b5b      	ldrh	r3, [r3, #26]
 8012948:	f043 0302 	orr.w	r3, r3, #2
 801294c:	b29a      	uxth	r2, r3
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012952:	6838      	ldr	r0, [r7, #0]
 8012954:	f002 ff68 	bl	8015828 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	7d1b      	ldrb	r3, [r3, #20]
 801295c:	2b01      	cmp	r3, #1
 801295e:	d020      	beq.n	80129a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012964:	2b00      	cmp	r3, #0
 8012966:	d006      	beq.n	8012976 <tcp_pcb_remove+0xca>
 8012968:	4b13      	ldr	r3, [pc, #76]	; (80129b8 <tcp_pcb_remove+0x10c>)
 801296a:	f640 0293 	movw	r2, #2195	; 0x893
 801296e:	4916      	ldr	r1, [pc, #88]	; (80129c8 <tcp_pcb_remove+0x11c>)
 8012970:	4813      	ldr	r0, [pc, #76]	; (80129c0 <tcp_pcb_remove+0x114>)
 8012972:	f009 fb6f 	bl	801c054 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801297a:	2b00      	cmp	r3, #0
 801297c:	d006      	beq.n	801298c <tcp_pcb_remove+0xe0>
 801297e:	4b0e      	ldr	r3, [pc, #56]	; (80129b8 <tcp_pcb_remove+0x10c>)
 8012980:	f640 0294 	movw	r2, #2196	; 0x894
 8012984:	4911      	ldr	r1, [pc, #68]	; (80129cc <tcp_pcb_remove+0x120>)
 8012986:	480e      	ldr	r0, [pc, #56]	; (80129c0 <tcp_pcb_remove+0x114>)
 8012988:	f009 fb64 	bl	801c054 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012990:	2b00      	cmp	r3, #0
 8012992:	d006      	beq.n	80129a2 <tcp_pcb_remove+0xf6>
 8012994:	4b08      	ldr	r3, [pc, #32]	; (80129b8 <tcp_pcb_remove+0x10c>)
 8012996:	f640 0296 	movw	r2, #2198	; 0x896
 801299a:	490d      	ldr	r1, [pc, #52]	; (80129d0 <tcp_pcb_remove+0x124>)
 801299c:	4808      	ldr	r0, [pc, #32]	; (80129c0 <tcp_pcb_remove+0x114>)
 801299e:	f009 fb59 	bl	801c054 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2200      	movs	r2, #0
 80129a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	2200      	movs	r2, #0
 80129ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80129ae:	bf00      	nop
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	08022074 	.word	0x08022074
 80129bc:	080226dc 	.word	0x080226dc
 80129c0:	080220b8 	.word	0x080220b8
 80129c4:	080226f8 	.word	0x080226f8
 80129c8:	08022718 	.word	0x08022718
 80129cc:	08022730 	.word	0x08022730
 80129d0:	0802274c 	.word	0x0802274c

080129d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d106      	bne.n	80129f0 <tcp_next_iss+0x1c>
 80129e2:	4b0a      	ldr	r3, [pc, #40]	; (8012a0c <tcp_next_iss+0x38>)
 80129e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80129e8:	4909      	ldr	r1, [pc, #36]	; (8012a10 <tcp_next_iss+0x3c>)
 80129ea:	480a      	ldr	r0, [pc, #40]	; (8012a14 <tcp_next_iss+0x40>)
 80129ec:	f009 fb32 	bl	801c054 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80129f0:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <tcp_next_iss+0x44>)
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	4b09      	ldr	r3, [pc, #36]	; (8012a1c <tcp_next_iss+0x48>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4413      	add	r3, r2
 80129fa:	4a07      	ldr	r2, [pc, #28]	; (8012a18 <tcp_next_iss+0x44>)
 80129fc:	6013      	str	r3, [r2, #0]
  return iss;
 80129fe:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <tcp_next_iss+0x44>)
 8012a00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	08022074 	.word	0x08022074
 8012a10:	08022764 	.word	0x08022764
 8012a14:	080220b8 	.word	0x080220b8
 8012a18:	20000078 	.word	0x20000078
 8012a1c:	200082c8 	.word	0x200082c8

08012a20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4603      	mov	r3, r0
 8012a28:	60b9      	str	r1, [r7, #8]
 8012a2a:	607a      	str	r2, [r7, #4]
 8012a2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d106      	bne.n	8012a42 <tcp_eff_send_mss_netif+0x22>
 8012a34:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <tcp_eff_send_mss_netif+0x68>)
 8012a36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012a3a:	4914      	ldr	r1, [pc, #80]	; (8012a8c <tcp_eff_send_mss_netif+0x6c>)
 8012a3c:	4814      	ldr	r0, [pc, #80]	; (8012a90 <tcp_eff_send_mss_netif+0x70>)
 8012a3e:	f009 fb09 	bl	801c054 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d101      	bne.n	8012a4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012a48:	89fb      	ldrh	r3, [r7, #14]
 8012a4a:	e019      	b.n	8012a80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012a52:	8afb      	ldrh	r3, [r7, #22]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d012      	beq.n	8012a7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012a58:	2328      	movs	r3, #40	; 0x28
 8012a5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012a5c:	8afa      	ldrh	r2, [r7, #22]
 8012a5e:	8abb      	ldrh	r3, [r7, #20]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d904      	bls.n	8012a6e <tcp_eff_send_mss_netif+0x4e>
 8012a64:	8afa      	ldrh	r2, [r7, #22]
 8012a66:	8abb      	ldrh	r3, [r7, #20]
 8012a68:	1ad3      	subs	r3, r2, r3
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	e000      	b.n	8012a70 <tcp_eff_send_mss_netif+0x50>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012a72:	8a7a      	ldrh	r2, [r7, #18]
 8012a74:	89fb      	ldrh	r3, [r7, #14]
 8012a76:	4293      	cmp	r3, r2
 8012a78:	bf28      	it	cs
 8012a7a:	4613      	movcs	r3, r2
 8012a7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	08022074 	.word	0x08022074
 8012a8c:	08022780 	.word	0x08022780
 8012a90:	080220b8 	.word	0x080220b8

08012a94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d119      	bne.n	8012adc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012aa8:	4b10      	ldr	r3, [pc, #64]	; (8012aec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012aaa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012aae:	4910      	ldr	r1, [pc, #64]	; (8012af0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012ab0:	4810      	ldr	r0, [pc, #64]	; (8012af4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012ab2:	f009 facf 	bl	801c054 <iprintf>

  while (pcb != NULL) {
 8012ab6:	e011      	b.n	8012adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d108      	bne.n	8012ad6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012aca:	68f8      	ldr	r0, [r7, #12]
 8012acc:	f7fe ffca 	bl	8011a64 <tcp_abort>
      pcb = next;
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	60fb      	str	r3, [r7, #12]
 8012ad4:	e002      	b.n	8012adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1ea      	bne.n	8012ab8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012ae2:	bf00      	nop
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	08022074 	.word	0x08022074
 8012af0:	080227a8 	.word	0x080227a8
 8012af4:	080220b8 	.word	0x080220b8

08012af8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d02a      	beq.n	8012b5e <tcp_netif_ip_addr_changed+0x66>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d026      	beq.n	8012b5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012b10:	4b15      	ldr	r3, [pc, #84]	; (8012b68 <tcp_netif_ip_addr_changed+0x70>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff ffbc 	bl	8012a94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012b1c:	4b13      	ldr	r3, [pc, #76]	; (8012b6c <tcp_netif_ip_addr_changed+0x74>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4619      	mov	r1, r3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7ff ffb6 	bl	8012a94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d017      	beq.n	8012b5e <tcp_netif_ip_addr_changed+0x66>
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d013      	beq.n	8012b5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b36:	4b0e      	ldr	r3, [pc, #56]	; (8012b70 <tcp_netif_ip_addr_changed+0x78>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	60fb      	str	r3, [r7, #12]
 8012b3c:	e00c      	b.n	8012b58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d103      	bne.n	8012b52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	60fb      	str	r3, [r7, #12]
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d1ef      	bne.n	8012b3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012b5e:	bf00      	nop
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	200082c4 	.word	0x200082c4
 8012b6c:	200082d0 	.word	0x200082d0
 8012b70:	200082cc 	.word	0x200082cc

08012b74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d007      	beq.n	8012b94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ff fc3f 	bl	801240c <tcp_segs_free>
    pcb->ooseq = NULL;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012b94:	bf00      	nop
 8012b96:	3708      	adds	r7, #8
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012b9c:	b590      	push	{r4, r7, lr}
 8012b9e:	b08d      	sub	sp, #52	; 0x34
 8012ba0:	af04      	add	r7, sp, #16
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d105      	bne.n	8012bb8 <tcp_input+0x1c>
 8012bac:	4b9b      	ldr	r3, [pc, #620]	; (8012e1c <tcp_input+0x280>)
 8012bae:	2283      	movs	r2, #131	; 0x83
 8012bb0:	499b      	ldr	r1, [pc, #620]	; (8012e20 <tcp_input+0x284>)
 8012bb2:	489c      	ldr	r0, [pc, #624]	; (8012e24 <tcp_input+0x288>)
 8012bb4:	f009 fa4e 	bl	801c054 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	4a9a      	ldr	r2, [pc, #616]	; (8012e28 <tcp_input+0x28c>)
 8012bbe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	895b      	ldrh	r3, [r3, #10]
 8012bc4:	2b13      	cmp	r3, #19
 8012bc6:	f240 83c4 	bls.w	8013352 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012bca:	4b98      	ldr	r3, [pc, #608]	; (8012e2c <tcp_input+0x290>)
 8012bcc:	695a      	ldr	r2, [r3, #20]
 8012bce:	4b97      	ldr	r3, [pc, #604]	; (8012e2c <tcp_input+0x290>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	f007 fd51 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f040 83ba 	bne.w	8013356 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012be2:	4b92      	ldr	r3, [pc, #584]	; (8012e2c <tcp_input+0x290>)
 8012be4:	695b      	ldr	r3, [r3, #20]
 8012be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012bea:	2be0      	cmp	r3, #224	; 0xe0
 8012bec:	f000 83b3 	beq.w	8013356 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012bf0:	4b8d      	ldr	r3, [pc, #564]	; (8012e28 <tcp_input+0x28c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	899b      	ldrh	r3, [r3, #12]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fc ff0b 	bl	800fa14 <lwip_htons>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	0b1b      	lsrs	r3, r3, #12
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012c0a:	7cbb      	ldrb	r3, [r7, #18]
 8012c0c:	2b13      	cmp	r3, #19
 8012c0e:	f240 83a2 	bls.w	8013356 <tcp_input+0x7ba>
 8012c12:	7cbb      	ldrb	r3, [r7, #18]
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	891b      	ldrh	r3, [r3, #8]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	f200 839b 	bhi.w	8013356 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012c20:	7cbb      	ldrb	r3, [r7, #18]
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	3b14      	subs	r3, #20
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	4b81      	ldr	r3, [pc, #516]	; (8012e30 <tcp_input+0x294>)
 8012c2a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012c2c:	4b81      	ldr	r3, [pc, #516]	; (8012e34 <tcp_input+0x298>)
 8012c2e:	2200      	movs	r2, #0
 8012c30:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	895a      	ldrh	r2, [r3, #10]
 8012c36:	7cbb      	ldrb	r3, [r7, #18]
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d309      	bcc.n	8012c52 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012c3e:	4b7c      	ldr	r3, [pc, #496]	; (8012e30 <tcp_input+0x294>)
 8012c40:	881a      	ldrh	r2, [r3, #0]
 8012c42:	4b7d      	ldr	r3, [pc, #500]	; (8012e38 <tcp_input+0x29c>)
 8012c44:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012c46:	7cbb      	ldrb	r3, [r7, #18]
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7fe f8f4 	bl	8010e38 <pbuf_remove_header>
 8012c50:	e04e      	b.n	8012cf0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d105      	bne.n	8012c66 <tcp_input+0xca>
 8012c5a:	4b70      	ldr	r3, [pc, #448]	; (8012e1c <tcp_input+0x280>)
 8012c5c:	22c2      	movs	r2, #194	; 0xc2
 8012c5e:	4977      	ldr	r1, [pc, #476]	; (8012e3c <tcp_input+0x2a0>)
 8012c60:	4870      	ldr	r0, [pc, #448]	; (8012e24 <tcp_input+0x288>)
 8012c62:	f009 f9f7 	bl	801c054 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012c66:	2114      	movs	r1, #20
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7fe f8e5 	bl	8010e38 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	895a      	ldrh	r2, [r3, #10]
 8012c72:	4b71      	ldr	r3, [pc, #452]	; (8012e38 <tcp_input+0x29c>)
 8012c74:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012c76:	4b6e      	ldr	r3, [pc, #440]	; (8012e30 <tcp_input+0x294>)
 8012c78:	881a      	ldrh	r2, [r3, #0]
 8012c7a:	4b6f      	ldr	r3, [pc, #444]	; (8012e38 <tcp_input+0x29c>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012c82:	4b6d      	ldr	r3, [pc, #436]	; (8012e38 <tcp_input+0x29c>)
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	4619      	mov	r1, r3
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7fe f8d5 	bl	8010e38 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	895b      	ldrh	r3, [r3, #10]
 8012c94:	8a3a      	ldrh	r2, [r7, #16]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	f200 835f 	bhi.w	801335a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	4a64      	ldr	r2, [pc, #400]	; (8012e34 <tcp_input+0x298>)
 8012ca4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	8a3a      	ldrh	r2, [r7, #16]
 8012cac:	4611      	mov	r1, r2
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7fe f8c2 	bl	8010e38 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	891a      	ldrh	r2, [r3, #8]
 8012cb8:	8a3b      	ldrh	r3, [r7, #16]
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	895b      	ldrh	r3, [r3, #10]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d005      	beq.n	8012cd6 <tcp_input+0x13a>
 8012cca:	4b54      	ldr	r3, [pc, #336]	; (8012e1c <tcp_input+0x280>)
 8012ccc:	22df      	movs	r2, #223	; 0xdf
 8012cce:	495c      	ldr	r1, [pc, #368]	; (8012e40 <tcp_input+0x2a4>)
 8012cd0:	4854      	ldr	r0, [pc, #336]	; (8012e24 <tcp_input+0x288>)
 8012cd2:	f009 f9bf 	bl	801c054 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	891a      	ldrh	r2, [r3, #8]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	891b      	ldrh	r3, [r3, #8]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d005      	beq.n	8012cf0 <tcp_input+0x154>
 8012ce4:	4b4d      	ldr	r3, [pc, #308]	; (8012e1c <tcp_input+0x280>)
 8012ce6:	22e0      	movs	r2, #224	; 0xe0
 8012ce8:	4956      	ldr	r1, [pc, #344]	; (8012e44 <tcp_input+0x2a8>)
 8012cea:	484e      	ldr	r0, [pc, #312]	; (8012e24 <tcp_input+0x288>)
 8012cec:	f009 f9b2 	bl	801c054 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012cf0:	4b4d      	ldr	r3, [pc, #308]	; (8012e28 <tcp_input+0x28c>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	4b4b      	ldr	r3, [pc, #300]	; (8012e28 <tcp_input+0x28c>)
 8012cfa:	681c      	ldr	r4, [r3, #0]
 8012cfc:	4610      	mov	r0, r2
 8012cfe:	f7fc fe89 	bl	800fa14 <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012d06:	4b48      	ldr	r3, [pc, #288]	; (8012e28 <tcp_input+0x28c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	885b      	ldrh	r3, [r3, #2]
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	4b46      	ldr	r3, [pc, #280]	; (8012e28 <tcp_input+0x28c>)
 8012d10:	681c      	ldr	r4, [r3, #0]
 8012d12:	4610      	mov	r0, r2
 8012d14:	f7fc fe7e 	bl	800fa14 <lwip_htons>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012d1c:	4b42      	ldr	r3, [pc, #264]	; (8012e28 <tcp_input+0x28c>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	685a      	ldr	r2, [r3, #4]
 8012d22:	4b41      	ldr	r3, [pc, #260]	; (8012e28 <tcp_input+0x28c>)
 8012d24:	681c      	ldr	r4, [r3, #0]
 8012d26:	4610      	mov	r0, r2
 8012d28:	f7fc fe89 	bl	800fa3e <lwip_htonl>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	6063      	str	r3, [r4, #4]
 8012d30:	6863      	ldr	r3, [r4, #4]
 8012d32:	4a45      	ldr	r2, [pc, #276]	; (8012e48 <tcp_input+0x2ac>)
 8012d34:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012d36:	4b3c      	ldr	r3, [pc, #240]	; (8012e28 <tcp_input+0x28c>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	689a      	ldr	r2, [r3, #8]
 8012d3c:	4b3a      	ldr	r3, [pc, #232]	; (8012e28 <tcp_input+0x28c>)
 8012d3e:	681c      	ldr	r4, [r3, #0]
 8012d40:	4610      	mov	r0, r2
 8012d42:	f7fc fe7c 	bl	800fa3e <lwip_htonl>
 8012d46:	4603      	mov	r3, r0
 8012d48:	60a3      	str	r3, [r4, #8]
 8012d4a:	68a3      	ldr	r3, [r4, #8]
 8012d4c:	4a3f      	ldr	r2, [pc, #252]	; (8012e4c <tcp_input+0x2b0>)
 8012d4e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012d50:	4b35      	ldr	r3, [pc, #212]	; (8012e28 <tcp_input+0x28c>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	89db      	ldrh	r3, [r3, #14]
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	4b33      	ldr	r3, [pc, #204]	; (8012e28 <tcp_input+0x28c>)
 8012d5a:	681c      	ldr	r4, [r3, #0]
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	f7fc fe59 	bl	800fa14 <lwip_htons>
 8012d62:	4603      	mov	r3, r0
 8012d64:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012d66:	4b30      	ldr	r3, [pc, #192]	; (8012e28 <tcp_input+0x28c>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	899b      	ldrh	r3, [r3, #12]
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fc fe50 	bl	800fa14 <lwip_htons>
 8012d74:	4603      	mov	r3, r0
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d7c:	b2da      	uxtb	r2, r3
 8012d7e:	4b34      	ldr	r3, [pc, #208]	; (8012e50 <tcp_input+0x2b4>)
 8012d80:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	891a      	ldrh	r2, [r3, #8]
 8012d86:	4b33      	ldr	r3, [pc, #204]	; (8012e54 <tcp_input+0x2b8>)
 8012d88:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012d8a:	4b31      	ldr	r3, [pc, #196]	; (8012e50 <tcp_input+0x2b4>)
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	f003 0303 	and.w	r3, r3, #3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00c      	beq.n	8012db0 <tcp_input+0x214>
    tcplen++;
 8012d96:	4b2f      	ldr	r3, [pc, #188]	; (8012e54 <tcp_input+0x2b8>)
 8012d98:	881b      	ldrh	r3, [r3, #0]
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	b29a      	uxth	r2, r3
 8012d9e:	4b2d      	ldr	r3, [pc, #180]	; (8012e54 <tcp_input+0x2b8>)
 8012da0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	891a      	ldrh	r2, [r3, #8]
 8012da6:	4b2b      	ldr	r3, [pc, #172]	; (8012e54 <tcp_input+0x2b8>)
 8012da8:	881b      	ldrh	r3, [r3, #0]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	f200 82d7 	bhi.w	801335e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012db0:	2300      	movs	r3, #0
 8012db2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012db4:	4b28      	ldr	r3, [pc, #160]	; (8012e58 <tcp_input+0x2bc>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	61fb      	str	r3, [r7, #28]
 8012dba:	e09d      	b.n	8012ef8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	7d1b      	ldrb	r3, [r3, #20]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d105      	bne.n	8012dd0 <tcp_input+0x234>
 8012dc4:	4b15      	ldr	r3, [pc, #84]	; (8012e1c <tcp_input+0x280>)
 8012dc6:	22fb      	movs	r2, #251	; 0xfb
 8012dc8:	4924      	ldr	r1, [pc, #144]	; (8012e5c <tcp_input+0x2c0>)
 8012dca:	4816      	ldr	r0, [pc, #88]	; (8012e24 <tcp_input+0x288>)
 8012dcc:	f009 f942 	bl	801c054 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	7d1b      	ldrb	r3, [r3, #20]
 8012dd4:	2b0a      	cmp	r3, #10
 8012dd6:	d105      	bne.n	8012de4 <tcp_input+0x248>
 8012dd8:	4b10      	ldr	r3, [pc, #64]	; (8012e1c <tcp_input+0x280>)
 8012dda:	22fc      	movs	r2, #252	; 0xfc
 8012ddc:	4920      	ldr	r1, [pc, #128]	; (8012e60 <tcp_input+0x2c4>)
 8012dde:	4811      	ldr	r0, [pc, #68]	; (8012e24 <tcp_input+0x288>)
 8012de0:	f009 f938 	bl	801c054 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	7d1b      	ldrb	r3, [r3, #20]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d105      	bne.n	8012df8 <tcp_input+0x25c>
 8012dec:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <tcp_input+0x280>)
 8012dee:	22fd      	movs	r2, #253	; 0xfd
 8012df0:	491c      	ldr	r1, [pc, #112]	; (8012e64 <tcp_input+0x2c8>)
 8012df2:	480c      	ldr	r0, [pc, #48]	; (8012e24 <tcp_input+0x288>)
 8012df4:	f009 f92e 	bl	801c054 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	7a1b      	ldrb	r3, [r3, #8]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d033      	beq.n	8012e68 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	7a1a      	ldrb	r2, [r3, #8]
 8012e04:	4b09      	ldr	r3, [pc, #36]	; (8012e2c <tcp_input+0x290>)
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d029      	beq.n	8012e68 <tcp_input+0x2cc>
      prev = pcb;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	61bb      	str	r3, [r7, #24]
      continue;
 8012e18:	e06b      	b.n	8012ef2 <tcp_input+0x356>
 8012e1a:	bf00      	nop
 8012e1c:	080227dc 	.word	0x080227dc
 8012e20:	08022810 	.word	0x08022810
 8012e24:	08022828 	.word	0x08022828
 8012e28:	20001044 	.word	0x20001044
 8012e2c:	200051a0 	.word	0x200051a0
 8012e30:	20001048 	.word	0x20001048
 8012e34:	2000104c 	.word	0x2000104c
 8012e38:	2000104a 	.word	0x2000104a
 8012e3c:	08022850 	.word	0x08022850
 8012e40:	08022860 	.word	0x08022860
 8012e44:	0802286c 	.word	0x0802286c
 8012e48:	20001054 	.word	0x20001054
 8012e4c:	20001058 	.word	0x20001058
 8012e50:	20001060 	.word	0x20001060
 8012e54:	2000105e 	.word	0x2000105e
 8012e58:	200082c4 	.word	0x200082c4
 8012e5c:	0802288c 	.word	0x0802288c
 8012e60:	080228b4 	.word	0x080228b4
 8012e64:	080228e0 	.word	0x080228e0
    }

    if (pcb->remote_port == tcphdr->src &&
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	8b1a      	ldrh	r2, [r3, #24]
 8012e6c:	4b94      	ldr	r3, [pc, #592]	; (80130c0 <tcp_input+0x524>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	881b      	ldrh	r3, [r3, #0]
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d13a      	bne.n	8012eee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	8ada      	ldrh	r2, [r3, #22]
 8012e7c:	4b90      	ldr	r3, [pc, #576]	; (80130c0 <tcp_input+0x524>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	885b      	ldrh	r3, [r3, #2]
 8012e82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d132      	bne.n	8012eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	4b8d      	ldr	r3, [pc, #564]	; (80130c4 <tcp_input+0x528>)
 8012e8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d12c      	bne.n	8012eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	4b8a      	ldr	r3, [pc, #552]	; (80130c4 <tcp_input+0x528>)
 8012e9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d126      	bne.n	8012eee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	69fa      	ldr	r2, [r7, #28]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d106      	bne.n	8012eb8 <tcp_input+0x31c>
 8012eaa:	4b87      	ldr	r3, [pc, #540]	; (80130c8 <tcp_input+0x52c>)
 8012eac:	f240 120d 	movw	r2, #269	; 0x10d
 8012eb0:	4986      	ldr	r1, [pc, #536]	; (80130cc <tcp_input+0x530>)
 8012eb2:	4887      	ldr	r0, [pc, #540]	; (80130d0 <tcp_input+0x534>)
 8012eb4:	f009 f8ce 	bl	801c054 <iprintf>
      if (prev != NULL) {
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00a      	beq.n	8012ed4 <tcp_input+0x338>
        prev->next = pcb->next;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	68da      	ldr	r2, [r3, #12]
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012ec6:	4b83      	ldr	r3, [pc, #524]	; (80130d4 <tcp_input+0x538>)
 8012ec8:	681a      	ldr	r2, [r3, #0]
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012ece:	4a81      	ldr	r2, [pc, #516]	; (80130d4 <tcp_input+0x538>)
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d111      	bne.n	8012f02 <tcp_input+0x366>
 8012ede:	4b7a      	ldr	r3, [pc, #488]	; (80130c8 <tcp_input+0x52c>)
 8012ee0:	f240 1215 	movw	r2, #277	; 0x115
 8012ee4:	497c      	ldr	r1, [pc, #496]	; (80130d8 <tcp_input+0x53c>)
 8012ee6:	487a      	ldr	r0, [pc, #488]	; (80130d0 <tcp_input+0x534>)
 8012ee8:	f009 f8b4 	bl	801c054 <iprintf>
      break;
 8012eec:	e009      	b.n	8012f02 <tcp_input+0x366>
    }
    prev = pcb;
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	61fb      	str	r3, [r7, #28]
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f47f af5e 	bne.w	8012dbc <tcp_input+0x220>
 8012f00:	e000      	b.n	8012f04 <tcp_input+0x368>
      break;
 8012f02:	bf00      	nop
  }

  if (pcb == NULL) {
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f040 8095 	bne.w	8013036 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f0c:	4b73      	ldr	r3, [pc, #460]	; (80130dc <tcp_input+0x540>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	61fb      	str	r3, [r7, #28]
 8012f12:	e03f      	b.n	8012f94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	7d1b      	ldrb	r3, [r3, #20]
 8012f18:	2b0a      	cmp	r3, #10
 8012f1a:	d006      	beq.n	8012f2a <tcp_input+0x38e>
 8012f1c:	4b6a      	ldr	r3, [pc, #424]	; (80130c8 <tcp_input+0x52c>)
 8012f1e:	f240 121f 	movw	r2, #287	; 0x11f
 8012f22:	496f      	ldr	r1, [pc, #444]	; (80130e0 <tcp_input+0x544>)
 8012f24:	486a      	ldr	r0, [pc, #424]	; (80130d0 <tcp_input+0x534>)
 8012f26:	f009 f895 	bl	801c054 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	7a1b      	ldrb	r3, [r3, #8]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d009      	beq.n	8012f46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	7a1a      	ldrb	r2, [r3, #8]
 8012f36:	4b63      	ldr	r3, [pc, #396]	; (80130c4 <tcp_input+0x528>)
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f3e:	3301      	adds	r3, #1
 8012f40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d122      	bne.n	8012f8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	8b1a      	ldrh	r2, [r3, #24]
 8012f4a:	4b5d      	ldr	r3, [pc, #372]	; (80130c0 <tcp_input+0x524>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d11b      	bne.n	8012f8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	8ada      	ldrh	r2, [r3, #22]
 8012f5a:	4b59      	ldr	r3, [pc, #356]	; (80130c0 <tcp_input+0x524>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	885b      	ldrh	r3, [r3, #2]
 8012f60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d113      	bne.n	8012f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	685a      	ldr	r2, [r3, #4]
 8012f6a:	4b56      	ldr	r3, [pc, #344]	; (80130c4 <tcp_input+0x528>)
 8012f6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d10d      	bne.n	8012f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	4b53      	ldr	r3, [pc, #332]	; (80130c4 <tcp_input+0x528>)
 8012f78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d107      	bne.n	8012f8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012f7e:	69f8      	ldr	r0, [r7, #28]
 8012f80:	f000 fb52 	bl	8013628 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7fd ffdd 	bl	8010f44 <pbuf_free>
        return;
 8012f8a:	e1ee      	b.n	801336a <tcp_input+0x7ce>
        continue;
 8012f8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f8e:	69fb      	ldr	r3, [r7, #28]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	61fb      	str	r3, [r7, #28]
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1bc      	bne.n	8012f14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f9e:	4b51      	ldr	r3, [pc, #324]	; (80130e4 <tcp_input+0x548>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	617b      	str	r3, [r7, #20]
 8012fa4:	e02a      	b.n	8012ffc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	7a1b      	ldrb	r3, [r3, #8]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00c      	beq.n	8012fc8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	7a1a      	ldrb	r2, [r3, #8]
 8012fb2:	4b44      	ldr	r3, [pc, #272]	; (80130c4 <tcp_input+0x528>)
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fba:	3301      	adds	r3, #1
 8012fbc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d002      	beq.n	8012fc8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	61bb      	str	r3, [r7, #24]
        continue;
 8012fc6:	e016      	b.n	8012ff6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	8ada      	ldrh	r2, [r3, #22]
 8012fcc:	4b3c      	ldr	r3, [pc, #240]	; (80130c0 <tcp_input+0x524>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	885b      	ldrh	r3, [r3, #2]
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d10c      	bne.n	8012ff2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	4b39      	ldr	r3, [pc, #228]	; (80130c4 <tcp_input+0x528>)
 8012fde:	695b      	ldr	r3, [r3, #20]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d00f      	beq.n	8013004 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00d      	beq.n	8013006 <tcp_input+0x46a>
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d009      	beq.n	8013006 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	617b      	str	r3, [r7, #20]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1d1      	bne.n	8012fa6 <tcp_input+0x40a>
 8013002:	e000      	b.n	8013006 <tcp_input+0x46a>
            break;
 8013004:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d014      	beq.n	8013036 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00a      	beq.n	8013028 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	68da      	ldr	r2, [r3, #12]
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801301a:	4b32      	ldr	r3, [pc, #200]	; (80130e4 <tcp_input+0x548>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013022:	4a30      	ldr	r2, [pc, #192]	; (80130e4 <tcp_input+0x548>)
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013028:	6978      	ldr	r0, [r7, #20]
 801302a:	f000 f9ff 	bl	801342c <tcp_listen_input>
      }
      pbuf_free(p);
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7fd ff88 	bl	8010f44 <pbuf_free>
      return;
 8013034:	e199      	b.n	801336a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	2b00      	cmp	r3, #0
 801303a:	f000 8160 	beq.w	80132fe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801303e:	4b2a      	ldr	r3, [pc, #168]	; (80130e8 <tcp_input+0x54c>)
 8013040:	2200      	movs	r2, #0
 8013042:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	891a      	ldrh	r2, [r3, #8]
 8013048:	4b27      	ldr	r3, [pc, #156]	; (80130e8 <tcp_input+0x54c>)
 801304a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801304c:	4a26      	ldr	r2, [pc, #152]	; (80130e8 <tcp_input+0x54c>)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013052:	4b1b      	ldr	r3, [pc, #108]	; (80130c0 <tcp_input+0x524>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	4a24      	ldr	r2, [pc, #144]	; (80130e8 <tcp_input+0x54c>)
 8013058:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801305a:	4b24      	ldr	r3, [pc, #144]	; (80130ec <tcp_input+0x550>)
 801305c:	2200      	movs	r2, #0
 801305e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013060:	4b23      	ldr	r3, [pc, #140]	; (80130f0 <tcp_input+0x554>)
 8013062:	2200      	movs	r2, #0
 8013064:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013066:	4b23      	ldr	r3, [pc, #140]	; (80130f4 <tcp_input+0x558>)
 8013068:	2200      	movs	r2, #0
 801306a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801306c:	4b22      	ldr	r3, [pc, #136]	; (80130f8 <tcp_input+0x55c>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 0308 	and.w	r3, r3, #8
 8013074:	2b00      	cmp	r3, #0
 8013076:	d006      	beq.n	8013086 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7b5b      	ldrb	r3, [r3, #13]
 801307c:	f043 0301 	orr.w	r3, r3, #1
 8013080:	b2da      	uxtb	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801308a:	2b00      	cmp	r3, #0
 801308c:	d038      	beq.n	8013100 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801308e:	69f8      	ldr	r0, [r7, #28]
 8013090:	f7ff f940 	bl	8012314 <tcp_process_refused_data>
 8013094:	4603      	mov	r3, r0
 8013096:	f113 0f0d 	cmn.w	r3, #13
 801309a:	d007      	beq.n	80130ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d02d      	beq.n	8013100 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80130a4:	4b15      	ldr	r3, [pc, #84]	; (80130fc <tcp_input+0x560>)
 80130a6:	881b      	ldrh	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d029      	beq.n	8013100 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f040 8104 	bne.w	80132be <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80130b6:	69f8      	ldr	r0, [r7, #28]
 80130b8:	f003 f9ca 	bl	8016450 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80130bc:	e0ff      	b.n	80132be <tcp_input+0x722>
 80130be:	bf00      	nop
 80130c0:	20001044 	.word	0x20001044
 80130c4:	200051a0 	.word	0x200051a0
 80130c8:	080227dc 	.word	0x080227dc
 80130cc:	08022908 	.word	0x08022908
 80130d0:	08022828 	.word	0x08022828
 80130d4:	200082c4 	.word	0x200082c4
 80130d8:	08022934 	.word	0x08022934
 80130dc:	200082d4 	.word	0x200082d4
 80130e0:	08022960 	.word	0x08022960
 80130e4:	200082cc 	.word	0x200082cc
 80130e8:	20001034 	.word	0x20001034
 80130ec:	20001064 	.word	0x20001064
 80130f0:	20001061 	.word	0x20001061
 80130f4:	2000105c 	.word	0x2000105c
 80130f8:	20001060 	.word	0x20001060
 80130fc:	2000105e 	.word	0x2000105e
      }
    }
    tcp_input_pcb = pcb;
 8013100:	4a9b      	ldr	r2, [pc, #620]	; (8013370 <tcp_input+0x7d4>)
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013106:	69f8      	ldr	r0, [r7, #28]
 8013108:	f000 fb0a 	bl	8013720 <tcp_process>
 801310c:	4603      	mov	r3, r0
 801310e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013114:	f113 0f0d 	cmn.w	r3, #13
 8013118:	f000 80d3 	beq.w	80132c2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801311c:	4b95      	ldr	r3, [pc, #596]	; (8013374 <tcp_input+0x7d8>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	f003 0308 	and.w	r3, r3, #8
 8013124:	2b00      	cmp	r3, #0
 8013126:	d015      	beq.n	8013154 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801312e:	2b00      	cmp	r3, #0
 8013130:	d008      	beq.n	8013144 <tcp_input+0x5a8>
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013138:	69fa      	ldr	r2, [r7, #28]
 801313a:	6912      	ldr	r2, [r2, #16]
 801313c:	f06f 010d 	mvn.w	r1, #13
 8013140:	4610      	mov	r0, r2
 8013142:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013144:	69f9      	ldr	r1, [r7, #28]
 8013146:	488c      	ldr	r0, [pc, #560]	; (8013378 <tcp_input+0x7dc>)
 8013148:	f7ff fbb0 	bl	80128ac <tcp_pcb_remove>
        tcp_free(pcb);
 801314c:	69f8      	ldr	r0, [r7, #28]
 801314e:	f7fe f9a9 	bl	80114a4 <tcp_free>
 8013152:	e0c1      	b.n	80132d8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013154:	2300      	movs	r3, #0
 8013156:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013158:	4b88      	ldr	r3, [pc, #544]	; (801337c <tcp_input+0x7e0>)
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d01d      	beq.n	801319c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013160:	4b86      	ldr	r3, [pc, #536]	; (801337c <tcp_input+0x7e0>)
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00a      	beq.n	8013186 <tcp_input+0x5ea>
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013176:	69fa      	ldr	r2, [r7, #28]
 8013178:	6910      	ldr	r0, [r2, #16]
 801317a:	89fa      	ldrh	r2, [r7, #14]
 801317c:	69f9      	ldr	r1, [r7, #28]
 801317e:	4798      	blx	r3
 8013180:	4603      	mov	r3, r0
 8013182:	74fb      	strb	r3, [r7, #19]
 8013184:	e001      	b.n	801318a <tcp_input+0x5ee>
 8013186:	2300      	movs	r3, #0
 8013188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801318a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801318e:	f113 0f0d 	cmn.w	r3, #13
 8013192:	f000 8098 	beq.w	80132c6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013196:	4b79      	ldr	r3, [pc, #484]	; (801337c <tcp_input+0x7e0>)
 8013198:	2200      	movs	r2, #0
 801319a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801319c:	69f8      	ldr	r0, [r7, #28]
 801319e:	f000 f905 	bl	80133ac <tcp_input_delayed_close>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f040 8090 	bne.w	80132ca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80131aa:	4b75      	ldr	r3, [pc, #468]	; (8013380 <tcp_input+0x7e4>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d041      	beq.n	8013236 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d006      	beq.n	80131c8 <tcp_input+0x62c>
 80131ba:	4b72      	ldr	r3, [pc, #456]	; (8013384 <tcp_input+0x7e8>)
 80131bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80131c0:	4971      	ldr	r1, [pc, #452]	; (8013388 <tcp_input+0x7ec>)
 80131c2:	4872      	ldr	r0, [pc, #456]	; (801338c <tcp_input+0x7f0>)
 80131c4:	f008 ff46 	bl	801c054 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	8b5b      	ldrh	r3, [r3, #26]
 80131cc:	f003 0310 	and.w	r3, r3, #16
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d008      	beq.n	80131e6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80131d4:	4b6a      	ldr	r3, [pc, #424]	; (8013380 <tcp_input+0x7e4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fd feb3 	bl	8010f44 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80131de:	69f8      	ldr	r0, [r7, #28]
 80131e0:	f7fe fc40 	bl	8011a64 <tcp_abort>
            goto aborted;
 80131e4:	e078      	b.n	80132d8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00c      	beq.n	801320a <tcp_input+0x66e>
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80131f6:	69fb      	ldr	r3, [r7, #28]
 80131f8:	6918      	ldr	r0, [r3, #16]
 80131fa:	4b61      	ldr	r3, [pc, #388]	; (8013380 <tcp_input+0x7e4>)
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	2300      	movs	r3, #0
 8013200:	69f9      	ldr	r1, [r7, #28]
 8013202:	47a0      	blx	r4
 8013204:	4603      	mov	r3, r0
 8013206:	74fb      	strb	r3, [r7, #19]
 8013208:	e008      	b.n	801321c <tcp_input+0x680>
 801320a:	4b5d      	ldr	r3, [pc, #372]	; (8013380 <tcp_input+0x7e4>)
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	2300      	movs	r3, #0
 8013210:	69f9      	ldr	r1, [r7, #28]
 8013212:	2000      	movs	r0, #0
 8013214:	f7ff f952 	bl	80124bc <tcp_recv_null>
 8013218:	4603      	mov	r3, r0
 801321a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801321c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013220:	f113 0f0d 	cmn.w	r3, #13
 8013224:	d053      	beq.n	80132ce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013226:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d003      	beq.n	8013236 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801322e:	4b54      	ldr	r3, [pc, #336]	; (8013380 <tcp_input+0x7e4>)
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013236:	4b4f      	ldr	r3, [pc, #316]	; (8013374 <tcp_input+0x7d8>)
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	f003 0320 	and.w	r3, r3, #32
 801323e:	2b00      	cmp	r3, #0
 8013240:	d030      	beq.n	80132a4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013246:	2b00      	cmp	r3, #0
 8013248:	d009      	beq.n	801325e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801324a:	69fb      	ldr	r3, [r7, #28]
 801324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801324e:	7b5a      	ldrb	r2, [r3, #13]
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013254:	f042 0220 	orr.w	r2, r2, #32
 8013258:	b2d2      	uxtb	r2, r2
 801325a:	735a      	strb	r2, [r3, #13]
 801325c:	e022      	b.n	80132a4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013266:	d005      	beq.n	8013274 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801326c:	3301      	adds	r3, #1
 801326e:	b29a      	uxth	r2, r3
 8013270:	69fb      	ldr	r3, [r7, #28]
 8013272:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801327a:	2b00      	cmp	r3, #0
 801327c:	d00b      	beq.n	8013296 <tcp_input+0x6fa>
 801327e:	69fb      	ldr	r3, [r7, #28]
 8013280:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	6918      	ldr	r0, [r3, #16]
 8013288:	2300      	movs	r3, #0
 801328a:	2200      	movs	r2, #0
 801328c:	69f9      	ldr	r1, [r7, #28]
 801328e:	47a0      	blx	r4
 8013290:	4603      	mov	r3, r0
 8013292:	74fb      	strb	r3, [r7, #19]
 8013294:	e001      	b.n	801329a <tcp_input+0x6fe>
 8013296:	2300      	movs	r3, #0
 8013298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801329a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801329e:	f113 0f0d 	cmn.w	r3, #13
 80132a2:	d016      	beq.n	80132d2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80132a4:	4b32      	ldr	r3, [pc, #200]	; (8013370 <tcp_input+0x7d4>)
 80132a6:	2200      	movs	r2, #0
 80132a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80132aa:	69f8      	ldr	r0, [r7, #28]
 80132ac:	f000 f87e 	bl	80133ac <tcp_input_delayed_close>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10f      	bne.n	80132d6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80132b6:	69f8      	ldr	r0, [r7, #28]
 80132b8:	f002 fab6 	bl	8015828 <tcp_output>
 80132bc:	e00c      	b.n	80132d8 <tcp_input+0x73c>
        goto aborted;
 80132be:	bf00      	nop
 80132c0:	e00a      	b.n	80132d8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80132c2:	bf00      	nop
 80132c4:	e008      	b.n	80132d8 <tcp_input+0x73c>
              goto aborted;
 80132c6:	bf00      	nop
 80132c8:	e006      	b.n	80132d8 <tcp_input+0x73c>
          goto aborted;
 80132ca:	bf00      	nop
 80132cc:	e004      	b.n	80132d8 <tcp_input+0x73c>
            goto aborted;
 80132ce:	bf00      	nop
 80132d0:	e002      	b.n	80132d8 <tcp_input+0x73c>
              goto aborted;
 80132d2:	bf00      	nop
 80132d4:	e000      	b.n	80132d8 <tcp_input+0x73c>
          goto aborted;
 80132d6:	bf00      	nop
    tcp_input_pcb = NULL;
 80132d8:	4b25      	ldr	r3, [pc, #148]	; (8013370 <tcp_input+0x7d4>)
 80132da:	2200      	movs	r2, #0
 80132dc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80132de:	4b28      	ldr	r3, [pc, #160]	; (8013380 <tcp_input+0x7e4>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80132e4:	4b2a      	ldr	r3, [pc, #168]	; (8013390 <tcp_input+0x7f4>)
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d03d      	beq.n	8013368 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80132ec:	4b28      	ldr	r3, [pc, #160]	; (8013390 <tcp_input+0x7f4>)
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fd fe27 	bl	8010f44 <pbuf_free>
      inseg.p = NULL;
 80132f6:	4b26      	ldr	r3, [pc, #152]	; (8013390 <tcp_input+0x7f4>)
 80132f8:	2200      	movs	r2, #0
 80132fa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80132fc:	e034      	b.n	8013368 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80132fe:	4b25      	ldr	r3, [pc, #148]	; (8013394 <tcp_input+0x7f8>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	899b      	ldrh	r3, [r3, #12]
 8013304:	b29b      	uxth	r3, r3
 8013306:	4618      	mov	r0, r3
 8013308:	f7fc fb84 	bl	800fa14 <lwip_htons>
 801330c:	4603      	mov	r3, r0
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0304 	and.w	r3, r3, #4
 8013314:	2b00      	cmp	r3, #0
 8013316:	d118      	bne.n	801334a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013318:	4b1f      	ldr	r3, [pc, #124]	; (8013398 <tcp_input+0x7fc>)
 801331a:	6819      	ldr	r1, [r3, #0]
 801331c:	4b1f      	ldr	r3, [pc, #124]	; (801339c <tcp_input+0x800>)
 801331e:	881b      	ldrh	r3, [r3, #0]
 8013320:	461a      	mov	r2, r3
 8013322:	4b1f      	ldr	r3, [pc, #124]	; (80133a0 <tcp_input+0x804>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013328:	4b1a      	ldr	r3, [pc, #104]	; (8013394 <tcp_input+0x7f8>)
 801332a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801332c:	885b      	ldrh	r3, [r3, #2]
 801332e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013330:	4a18      	ldr	r2, [pc, #96]	; (8013394 <tcp_input+0x7f8>)
 8013332:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013334:	8812      	ldrh	r2, [r2, #0]
 8013336:	b292      	uxth	r2, r2
 8013338:	9202      	str	r2, [sp, #8]
 801333a:	9301      	str	r3, [sp, #4]
 801333c:	4b19      	ldr	r3, [pc, #100]	; (80133a4 <tcp_input+0x808>)
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	4b19      	ldr	r3, [pc, #100]	; (80133a8 <tcp_input+0x80c>)
 8013342:	4602      	mov	r2, r0
 8013344:	2000      	movs	r0, #0
 8013346:	f003 f833 	bl	80163b0 <tcp_rst>
    pbuf_free(p);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7fd fdfa 	bl	8010f44 <pbuf_free>
  return;
 8013350:	e00a      	b.n	8013368 <tcp_input+0x7cc>
    goto dropped;
 8013352:	bf00      	nop
 8013354:	e004      	b.n	8013360 <tcp_input+0x7c4>
dropped:
 8013356:	bf00      	nop
 8013358:	e002      	b.n	8013360 <tcp_input+0x7c4>
      goto dropped;
 801335a:	bf00      	nop
 801335c:	e000      	b.n	8013360 <tcp_input+0x7c4>
      goto dropped;
 801335e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7fd fdef 	bl	8010f44 <pbuf_free>
 8013366:	e000      	b.n	801336a <tcp_input+0x7ce>
  return;
 8013368:	bf00      	nop
}
 801336a:	3724      	adds	r7, #36	; 0x24
 801336c:	46bd      	mov	sp, r7
 801336e:	bd90      	pop	{r4, r7, pc}
 8013370:	200082d8 	.word	0x200082d8
 8013374:	20001061 	.word	0x20001061
 8013378:	200082c4 	.word	0x200082c4
 801337c:	2000105c 	.word	0x2000105c
 8013380:	20001064 	.word	0x20001064
 8013384:	080227dc 	.word	0x080227dc
 8013388:	08022990 	.word	0x08022990
 801338c:	08022828 	.word	0x08022828
 8013390:	20001034 	.word	0x20001034
 8013394:	20001044 	.word	0x20001044
 8013398:	20001058 	.word	0x20001058
 801339c:	2000105e 	.word	0x2000105e
 80133a0:	20001054 	.word	0x20001054
 80133a4:	200051b0 	.word	0x200051b0
 80133a8:	200051b4 	.word	0x200051b4

080133ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d106      	bne.n	80133c8 <tcp_input_delayed_close+0x1c>
 80133ba:	4b17      	ldr	r3, [pc, #92]	; (8013418 <tcp_input_delayed_close+0x6c>)
 80133bc:	f240 225a 	movw	r2, #602	; 0x25a
 80133c0:	4916      	ldr	r1, [pc, #88]	; (801341c <tcp_input_delayed_close+0x70>)
 80133c2:	4817      	ldr	r0, [pc, #92]	; (8013420 <tcp_input_delayed_close+0x74>)
 80133c4:	f008 fe46 	bl	801c054 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80133c8:	4b16      	ldr	r3, [pc, #88]	; (8013424 <tcp_input_delayed_close+0x78>)
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	f003 0310 	and.w	r3, r3, #16
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d01c      	beq.n	801340e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	8b5b      	ldrh	r3, [r3, #26]
 80133d8:	f003 0310 	and.w	r3, r3, #16
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10d      	bne.n	80133fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d008      	beq.n	80133fc <tcp_input_delayed_close+0x50>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	6912      	ldr	r2, [r2, #16]
 80133f4:	f06f 010e 	mvn.w	r1, #14
 80133f8:	4610      	mov	r0, r2
 80133fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	480a      	ldr	r0, [pc, #40]	; (8013428 <tcp_input_delayed_close+0x7c>)
 8013400:	f7ff fa54 	bl	80128ac <tcp_pcb_remove>
    tcp_free(pcb);
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7fe f84d 	bl	80114a4 <tcp_free>
    return 1;
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801340e:	2300      	movs	r3, #0
}
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	080227dc 	.word	0x080227dc
 801341c:	080229ac 	.word	0x080229ac
 8013420:	08022828 	.word	0x08022828
 8013424:	20001061 	.word	0x20001061
 8013428:	200082c4 	.word	0x200082c4

0801342c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801342c:	b590      	push	{r4, r7, lr}
 801342e:	b08b      	sub	sp, #44	; 0x2c
 8013430:	af04      	add	r7, sp, #16
 8013432:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013434:	4b6f      	ldr	r3, [pc, #444]	; (80135f4 <tcp_listen_input+0x1c8>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f003 0304 	and.w	r3, r3, #4
 801343c:	2b00      	cmp	r3, #0
 801343e:	f040 80d3 	bne.w	80135e8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d106      	bne.n	8013456 <tcp_listen_input+0x2a>
 8013448:	4b6b      	ldr	r3, [pc, #428]	; (80135f8 <tcp_listen_input+0x1cc>)
 801344a:	f240 2281 	movw	r2, #641	; 0x281
 801344e:	496b      	ldr	r1, [pc, #428]	; (80135fc <tcp_listen_input+0x1d0>)
 8013450:	486b      	ldr	r0, [pc, #428]	; (8013600 <tcp_listen_input+0x1d4>)
 8013452:	f008 fdff 	bl	801c054 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013456:	4b67      	ldr	r3, [pc, #412]	; (80135f4 <tcp_listen_input+0x1c8>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	f003 0310 	and.w	r3, r3, #16
 801345e:	2b00      	cmp	r3, #0
 8013460:	d019      	beq.n	8013496 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013462:	4b68      	ldr	r3, [pc, #416]	; (8013604 <tcp_listen_input+0x1d8>)
 8013464:	6819      	ldr	r1, [r3, #0]
 8013466:	4b68      	ldr	r3, [pc, #416]	; (8013608 <tcp_listen_input+0x1dc>)
 8013468:	881b      	ldrh	r3, [r3, #0]
 801346a:	461a      	mov	r2, r3
 801346c:	4b67      	ldr	r3, [pc, #412]	; (801360c <tcp_listen_input+0x1e0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013472:	4b67      	ldr	r3, [pc, #412]	; (8013610 <tcp_listen_input+0x1e4>)
 8013474:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013476:	885b      	ldrh	r3, [r3, #2]
 8013478:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801347a:	4a65      	ldr	r2, [pc, #404]	; (8013610 <tcp_listen_input+0x1e4>)
 801347c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801347e:	8812      	ldrh	r2, [r2, #0]
 8013480:	b292      	uxth	r2, r2
 8013482:	9202      	str	r2, [sp, #8]
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	4b63      	ldr	r3, [pc, #396]	; (8013614 <tcp_listen_input+0x1e8>)
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	4b63      	ldr	r3, [pc, #396]	; (8013618 <tcp_listen_input+0x1ec>)
 801348c:	4602      	mov	r2, r0
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f002 ff8e 	bl	80163b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013494:	e0aa      	b.n	80135ec <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8013496:	4b57      	ldr	r3, [pc, #348]	; (80135f4 <tcp_listen_input+0x1c8>)
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	f003 0302 	and.w	r3, r3, #2
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f000 80a4 	beq.w	80135ec <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7d5b      	ldrb	r3, [r3, #21]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7ff f92b 	bl	8012704 <tcp_alloc>
 80134ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d111      	bne.n	80134da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	699b      	ldr	r3, [r3, #24]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d00a      	beq.n	80134d4 <tcp_listen_input+0xa8>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	6910      	ldr	r0, [r2, #16]
 80134c6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ca:	2100      	movs	r1, #0
 80134cc:	4798      	blx	r3
 80134ce:	4603      	mov	r3, r0
 80134d0:	73bb      	strb	r3, [r7, #14]
      return;
 80134d2:	e08c      	b.n	80135ee <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80134d4:	23f0      	movs	r3, #240	; 0xf0
 80134d6:	73bb      	strb	r3, [r7, #14]
      return;
 80134d8:	e089      	b.n	80135ee <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80134da:	4b50      	ldr	r3, [pc, #320]	; (801361c <tcp_listen_input+0x1f0>)
 80134dc:	695a      	ldr	r2, [r3, #20]
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80134e2:	4b4e      	ldr	r3, [pc, #312]	; (801361c <tcp_listen_input+0x1f0>)
 80134e4:	691a      	ldr	r2, [r3, #16]
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8ada      	ldrh	r2, [r3, #22]
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80134f2:	4b47      	ldr	r3, [pc, #284]	; (8013610 <tcp_listen_input+0x1e4>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	2203      	movs	r2, #3
 8013502:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013504:	4b41      	ldr	r3, [pc, #260]	; (801360c <tcp_listen_input+0x1e0>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	1c5a      	adds	r2, r3, #1
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013516:	6978      	ldr	r0, [r7, #20]
 8013518:	f7ff fa5c 	bl	80129d4 <tcp_next_iss>
 801351c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	693a      	ldr	r2, [r7, #16]
 8013522:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	693a      	ldr	r2, [r7, #16]
 8013528:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	693a      	ldr	r2, [r7, #16]
 8013534:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013536:	4b35      	ldr	r3, [pc, #212]	; (801360c <tcp_listen_input+0x1e0>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	1e5a      	subs	r2, r3, #1
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	691a      	ldr	r2, [r3, #16]
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	7a5b      	ldrb	r3, [r3, #9]
 8013552:	f003 030c 	and.w	r3, r3, #12
 8013556:	b2da      	uxtb	r2, r3
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	7a1a      	ldrb	r2, [r3, #8]
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013564:	4b2e      	ldr	r3, [pc, #184]	; (8013620 <tcp_listen_input+0x1f4>)
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	60da      	str	r2, [r3, #12]
 801356c:	4a2c      	ldr	r2, [pc, #176]	; (8013620 <tcp_listen_input+0x1f4>)
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	6013      	str	r3, [r2, #0]
 8013572:	f003 f8dd 	bl	8016730 <tcp_timer_needed>
 8013576:	4b2b      	ldr	r3, [pc, #172]	; (8013624 <tcp_listen_input+0x1f8>)
 8013578:	2201      	movs	r2, #1
 801357a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801357c:	6978      	ldr	r0, [r7, #20]
 801357e:	f001 fd8f 	bl	80150a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013582:	4b23      	ldr	r3, [pc, #140]	; (8013610 <tcp_listen_input+0x1e4>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	89db      	ldrh	r3, [r3, #14]
 8013588:	b29a      	uxth	r2, r3
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	3304      	adds	r3, #4
 80135a4:	4618      	mov	r0, r3
 80135a6:	f006 fdb7 	bl	801a118 <ip4_route>
 80135aa:	4601      	mov	r1, r0
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	3304      	adds	r3, #4
 80135b0:	461a      	mov	r2, r3
 80135b2:	4620      	mov	r0, r4
 80135b4:	f7ff fa34 	bl	8012a20 <tcp_eff_send_mss_netif>
 80135b8:	4603      	mov	r3, r0
 80135ba:	461a      	mov	r2, r3
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80135c0:	2112      	movs	r1, #18
 80135c2:	6978      	ldr	r0, [r7, #20]
 80135c4:	f002 f842 	bl	801564c <tcp_enqueue_flags>
 80135c8:	4603      	mov	r3, r0
 80135ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80135cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d004      	beq.n	80135de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80135d4:	2100      	movs	r1, #0
 80135d6:	6978      	ldr	r0, [r7, #20]
 80135d8:	f7fe f986 	bl	80118e8 <tcp_abandon>
      return;
 80135dc:	e007      	b.n	80135ee <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80135de:	6978      	ldr	r0, [r7, #20]
 80135e0:	f002 f922 	bl	8015828 <tcp_output>
  return;
 80135e4:	bf00      	nop
 80135e6:	e001      	b.n	80135ec <tcp_listen_input+0x1c0>
    return;
 80135e8:	bf00      	nop
 80135ea:	e000      	b.n	80135ee <tcp_listen_input+0x1c2>
  return;
 80135ec:	bf00      	nop
}
 80135ee:	371c      	adds	r7, #28
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}
 80135f4:	20001060 	.word	0x20001060
 80135f8:	080227dc 	.word	0x080227dc
 80135fc:	080229d4 	.word	0x080229d4
 8013600:	08022828 	.word	0x08022828
 8013604:	20001058 	.word	0x20001058
 8013608:	2000105e 	.word	0x2000105e
 801360c:	20001054 	.word	0x20001054
 8013610:	20001044 	.word	0x20001044
 8013614:	200051b0 	.word	0x200051b0
 8013618:	200051b4 	.word	0x200051b4
 801361c:	200051a0 	.word	0x200051a0
 8013620:	200082c4 	.word	0x200082c4
 8013624:	200082c0 	.word	0x200082c0

08013628 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af04      	add	r7, sp, #16
 801362e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013630:	4b30      	ldr	r3, [pc, #192]	; (80136f4 <tcp_timewait_input+0xcc>)
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	f003 0304 	and.w	r3, r3, #4
 8013638:	2b00      	cmp	r3, #0
 801363a:	d154      	bne.n	80136e6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d106      	bne.n	8013650 <tcp_timewait_input+0x28>
 8013642:	4b2d      	ldr	r3, [pc, #180]	; (80136f8 <tcp_timewait_input+0xd0>)
 8013644:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013648:	492c      	ldr	r1, [pc, #176]	; (80136fc <tcp_timewait_input+0xd4>)
 801364a:	482d      	ldr	r0, [pc, #180]	; (8013700 <tcp_timewait_input+0xd8>)
 801364c:	f008 fd02 	bl	801c054 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013650:	4b28      	ldr	r3, [pc, #160]	; (80136f4 <tcp_timewait_input+0xcc>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 0302 	and.w	r3, r3, #2
 8013658:	2b00      	cmp	r3, #0
 801365a:	d02a      	beq.n	80136b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801365c:	4b29      	ldr	r3, [pc, #164]	; (8013704 <tcp_timewait_input+0xdc>)
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	2b00      	cmp	r3, #0
 8013668:	db2d      	blt.n	80136c6 <tcp_timewait_input+0x9e>
 801366a:	4b26      	ldr	r3, [pc, #152]	; (8013704 <tcp_timewait_input+0xdc>)
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013672:	6879      	ldr	r1, [r7, #4]
 8013674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013676:	440b      	add	r3, r1
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	2b00      	cmp	r3, #0
 801367c:	dc23      	bgt.n	80136c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801367e:	4b22      	ldr	r3, [pc, #136]	; (8013708 <tcp_timewait_input+0xe0>)
 8013680:	6819      	ldr	r1, [r3, #0]
 8013682:	4b22      	ldr	r3, [pc, #136]	; (801370c <tcp_timewait_input+0xe4>)
 8013684:	881b      	ldrh	r3, [r3, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	4b1e      	ldr	r3, [pc, #120]	; (8013704 <tcp_timewait_input+0xdc>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801368e:	4b20      	ldr	r3, [pc, #128]	; (8013710 <tcp_timewait_input+0xe8>)
 8013690:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013692:	885b      	ldrh	r3, [r3, #2]
 8013694:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013696:	4a1e      	ldr	r2, [pc, #120]	; (8013710 <tcp_timewait_input+0xe8>)
 8013698:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801369a:	8812      	ldrh	r2, [r2, #0]
 801369c:	b292      	uxth	r2, r2
 801369e:	9202      	str	r2, [sp, #8]
 80136a0:	9301      	str	r3, [sp, #4]
 80136a2:	4b1c      	ldr	r3, [pc, #112]	; (8013714 <tcp_timewait_input+0xec>)
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	4b1c      	ldr	r3, [pc, #112]	; (8013718 <tcp_timewait_input+0xf0>)
 80136a8:	4602      	mov	r2, r0
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f002 fe80 	bl	80163b0 <tcp_rst>
      return;
 80136b0:	e01c      	b.n	80136ec <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80136b2:	4b10      	ldr	r3, [pc, #64]	; (80136f4 <tcp_timewait_input+0xcc>)
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	f003 0301 	and.w	r3, r3, #1
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d003      	beq.n	80136c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80136be:	4b17      	ldr	r3, [pc, #92]	; (801371c <tcp_timewait_input+0xf4>)
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80136c6:	4b11      	ldr	r3, [pc, #68]	; (801370c <tcp_timewait_input+0xe4>)
 80136c8:	881b      	ldrh	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d00d      	beq.n	80136ea <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	8b5b      	ldrh	r3, [r3, #26]
 80136d2:	f043 0302 	orr.w	r3, r3, #2
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f002 f8a3 	bl	8015828 <tcp_output>
  }
  return;
 80136e2:	bf00      	nop
 80136e4:	e001      	b.n	80136ea <tcp_timewait_input+0xc2>
    return;
 80136e6:	bf00      	nop
 80136e8:	e000      	b.n	80136ec <tcp_timewait_input+0xc4>
  return;
 80136ea:	bf00      	nop
}
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	20001060 	.word	0x20001060
 80136f8:	080227dc 	.word	0x080227dc
 80136fc:	080229f4 	.word	0x080229f4
 8013700:	08022828 	.word	0x08022828
 8013704:	20001054 	.word	0x20001054
 8013708:	20001058 	.word	0x20001058
 801370c:	2000105e 	.word	0x2000105e
 8013710:	20001044 	.word	0x20001044
 8013714:	200051b0 	.word	0x200051b0
 8013718:	200051b4 	.word	0x200051b4
 801371c:	200082c8 	.word	0x200082c8

08013720 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013720:	b590      	push	{r4, r7, lr}
 8013722:	b08d      	sub	sp, #52	; 0x34
 8013724:	af04      	add	r7, sp, #16
 8013726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013728:	2300      	movs	r3, #0
 801372a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801372c:	2300      	movs	r3, #0
 801372e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d106      	bne.n	8013744 <tcp_process+0x24>
 8013736:	4ba5      	ldr	r3, [pc, #660]	; (80139cc <tcp_process+0x2ac>)
 8013738:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801373c:	49a4      	ldr	r1, [pc, #656]	; (80139d0 <tcp_process+0x2b0>)
 801373e:	48a5      	ldr	r0, [pc, #660]	; (80139d4 <tcp_process+0x2b4>)
 8013740:	f008 fc88 	bl	801c054 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013744:	4ba4      	ldr	r3, [pc, #656]	; (80139d8 <tcp_process+0x2b8>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	f003 0304 	and.w	r3, r3, #4
 801374c:	2b00      	cmp	r3, #0
 801374e:	d04e      	beq.n	80137ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	7d1b      	ldrb	r3, [r3, #20]
 8013754:	2b02      	cmp	r3, #2
 8013756:	d108      	bne.n	801376a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801375c:	4b9f      	ldr	r3, [pc, #636]	; (80139dc <tcp_process+0x2bc>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	429a      	cmp	r2, r3
 8013762:	d123      	bne.n	80137ac <tcp_process+0x8c>
        acceptable = 1;
 8013764:	2301      	movs	r3, #1
 8013766:	76fb      	strb	r3, [r7, #27]
 8013768:	e020      	b.n	80137ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801376e:	4b9c      	ldr	r3, [pc, #624]	; (80139e0 <tcp_process+0x2c0>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d102      	bne.n	801377c <tcp_process+0x5c>
        acceptable = 1;
 8013776:	2301      	movs	r3, #1
 8013778:	76fb      	strb	r3, [r7, #27]
 801377a:	e017      	b.n	80137ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801377c:	4b98      	ldr	r3, [pc, #608]	; (80139e0 <tcp_process+0x2c0>)
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	db10      	blt.n	80137ac <tcp_process+0x8c>
 801378a:	4b95      	ldr	r3, [pc, #596]	; (80139e0 <tcp_process+0x2c0>)
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013792:	6879      	ldr	r1, [r7, #4]
 8013794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013796:	440b      	add	r3, r1
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	2b00      	cmp	r3, #0
 801379c:	dc06      	bgt.n	80137ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8b5b      	ldrh	r3, [r3, #26]
 80137a2:	f043 0302 	orr.w	r3, r3, #2
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80137ac:	7efb      	ldrb	r3, [r7, #27]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d01b      	beq.n	80137ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	7d1b      	ldrb	r3, [r3, #20]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d106      	bne.n	80137c8 <tcp_process+0xa8>
 80137ba:	4b84      	ldr	r3, [pc, #528]	; (80139cc <tcp_process+0x2ac>)
 80137bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80137c0:	4988      	ldr	r1, [pc, #544]	; (80139e4 <tcp_process+0x2c4>)
 80137c2:	4884      	ldr	r0, [pc, #528]	; (80139d4 <tcp_process+0x2b4>)
 80137c4:	f008 fc46 	bl	801c054 <iprintf>
      recv_flags |= TF_RESET;
 80137c8:	4b87      	ldr	r3, [pc, #540]	; (80139e8 <tcp_process+0x2c8>)
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	f043 0308 	orr.w	r3, r3, #8
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	4b85      	ldr	r3, [pc, #532]	; (80139e8 <tcp_process+0x2c8>)
 80137d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	8b5b      	ldrh	r3, [r3, #26]
 80137da:	f023 0301 	bic.w	r3, r3, #1
 80137de:	b29a      	uxth	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80137e4:	f06f 030d 	mvn.w	r3, #13
 80137e8:	e37a      	b.n	8013ee0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80137ea:	2300      	movs	r3, #0
 80137ec:	e378      	b.n	8013ee0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80137ee:	4b7a      	ldr	r3, [pc, #488]	; (80139d8 <tcp_process+0x2b8>)
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f003 0302 	and.w	r3, r3, #2
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d010      	beq.n	801381c <tcp_process+0xfc>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	7d1b      	ldrb	r3, [r3, #20]
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d00c      	beq.n	801381c <tcp_process+0xfc>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	7d1b      	ldrb	r3, [r3, #20]
 8013806:	2b03      	cmp	r3, #3
 8013808:	d008      	beq.n	801381c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	8b5b      	ldrh	r3, [r3, #26]
 801380e:	f043 0302 	orr.w	r3, r3, #2
 8013812:	b29a      	uxth	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013818:	2300      	movs	r3, #0
 801381a:	e361      	b.n	8013ee0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	8b5b      	ldrh	r3, [r3, #26]
 8013820:	f003 0310 	and.w	r3, r3, #16
 8013824:	2b00      	cmp	r3, #0
 8013826:	d103      	bne.n	8013830 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013828:	4b70      	ldr	r3, [pc, #448]	; (80139ec <tcp_process+0x2cc>)
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2200      	movs	r2, #0
 8013834:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2200      	movs	r2, #0
 801383c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f001 fc2d 	bl	80150a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	7d1b      	ldrb	r3, [r3, #20]
 801384a:	3b02      	subs	r3, #2
 801384c:	2b07      	cmp	r3, #7
 801384e:	f200 8337 	bhi.w	8013ec0 <tcp_process+0x7a0>
 8013852:	a201      	add	r2, pc, #4	; (adr r2, 8013858 <tcp_process+0x138>)
 8013854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013858:	08013879 	.word	0x08013879
 801385c:	08013aa9 	.word	0x08013aa9
 8013860:	08013c21 	.word	0x08013c21
 8013864:	08013c4b 	.word	0x08013c4b
 8013868:	08013d6f 	.word	0x08013d6f
 801386c:	08013c21 	.word	0x08013c21
 8013870:	08013dfb 	.word	0x08013dfb
 8013874:	08013e8b 	.word	0x08013e8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013878:	4b57      	ldr	r3, [pc, #348]	; (80139d8 <tcp_process+0x2b8>)
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	f003 0310 	and.w	r3, r3, #16
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 80e4 	beq.w	8013a4e <tcp_process+0x32e>
 8013886:	4b54      	ldr	r3, [pc, #336]	; (80139d8 <tcp_process+0x2b8>)
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	f003 0302 	and.w	r3, r3, #2
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 80dd 	beq.w	8013a4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013898:	1c5a      	adds	r2, r3, #1
 801389a:	4b50      	ldr	r3, [pc, #320]	; (80139dc <tcp_process+0x2bc>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	429a      	cmp	r2, r3
 80138a0:	f040 80d5 	bne.w	8013a4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80138a4:	4b4e      	ldr	r3, [pc, #312]	; (80139e0 <tcp_process+0x2c0>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80138b6:	4b49      	ldr	r3, [pc, #292]	; (80139dc <tcp_process+0x2bc>)
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80138be:	4b4c      	ldr	r3, [pc, #304]	; (80139f0 <tcp_process+0x2d0>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	89db      	ldrh	r3, [r3, #14]
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80138d8:	4b41      	ldr	r3, [pc, #260]	; (80139e0 <tcp_process+0x2c0>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	1e5a      	subs	r2, r3, #1
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2204      	movs	r2, #4
 80138e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	3304      	adds	r3, #4
 80138f0:	4618      	mov	r0, r3
 80138f2:	f006 fc11 	bl	801a118 <ip4_route>
 80138f6:	4601      	mov	r1, r0
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	3304      	adds	r3, #4
 80138fc:	461a      	mov	r2, r3
 80138fe:	4620      	mov	r0, r4
 8013900:	f7ff f88e 	bl	8012a20 <tcp_eff_send_mss_netif>
 8013904:	4603      	mov	r3, r0
 8013906:	461a      	mov	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013910:	009a      	lsls	r2, r3, #2
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013916:	005b      	lsls	r3, r3, #1
 8013918:	f241 111c 	movw	r1, #4380	; 0x111c
 801391c:	428b      	cmp	r3, r1
 801391e:	bf38      	it	cc
 8013920:	460b      	movcc	r3, r1
 8013922:	429a      	cmp	r2, r3
 8013924:	d204      	bcs.n	8013930 <tcp_process+0x210>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	b29b      	uxth	r3, r3
 801392e:	e00d      	b.n	801394c <tcp_process+0x22c>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013934:	005b      	lsls	r3, r3, #1
 8013936:	f241 121c 	movw	r2, #4380	; 0x111c
 801393a:	4293      	cmp	r3, r2
 801393c:	d904      	bls.n	8013948 <tcp_process+0x228>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013942:	005b      	lsls	r3, r3, #1
 8013944:	b29b      	uxth	r3, r3
 8013946:	e001      	b.n	801394c <tcp_process+0x22c>
 8013948:	f241 131c 	movw	r3, #4380	; 0x111c
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013958:	2b00      	cmp	r3, #0
 801395a:	d106      	bne.n	801396a <tcp_process+0x24a>
 801395c:	4b1b      	ldr	r3, [pc, #108]	; (80139cc <tcp_process+0x2ac>)
 801395e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013962:	4924      	ldr	r1, [pc, #144]	; (80139f4 <tcp_process+0x2d4>)
 8013964:	481b      	ldr	r0, [pc, #108]	; (80139d4 <tcp_process+0x2b4>)
 8013966:	f008 fb75 	bl	801c054 <iprintf>
        --pcb->snd_queuelen;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013970:	3b01      	subs	r3, #1
 8013972:	b29a      	uxth	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801397e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d111      	bne.n	80139aa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801398a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <tcp_process+0x280>
 8013992:	4b0e      	ldr	r3, [pc, #56]	; (80139cc <tcp_process+0x2ac>)
 8013994:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013998:	4917      	ldr	r1, [pc, #92]	; (80139f8 <tcp_process+0x2d8>)
 801399a:	480e      	ldr	r0, [pc, #56]	; (80139d4 <tcp_process+0x2b4>)
 801399c:	f008 fb5a 	bl	801c054 <iprintf>
          pcb->unsent = rseg->next;
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80139a8:	e003      	b.n	80139b2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80139b2:	69f8      	ldr	r0, [r7, #28]
 80139b4:	f7fe fd3e 	bl	8012434 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d11d      	bne.n	80139fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139c6:	861a      	strh	r2, [r3, #48]	; 0x30
 80139c8:	e01f      	b.n	8013a0a <tcp_process+0x2ea>
 80139ca:	bf00      	nop
 80139cc:	080227dc 	.word	0x080227dc
 80139d0:	08022a14 	.word	0x08022a14
 80139d4:	08022828 	.word	0x08022828
 80139d8:	20001060 	.word	0x20001060
 80139dc:	20001058 	.word	0x20001058
 80139e0:	20001054 	.word	0x20001054
 80139e4:	08022a30 	.word	0x08022a30
 80139e8:	20001061 	.word	0x20001061
 80139ec:	200082c8 	.word	0x200082c8
 80139f0:	20001044 	.word	0x20001044
 80139f4:	08022a50 	.word	0x08022a50
 80139f8:	08022a68 	.word	0x08022a68
        } else {
          pcb->rtime = 0;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2200      	movs	r2, #0
 8013a00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00a      	beq.n	8013a2a <tcp_process+0x30a>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	6910      	ldr	r0, [r2, #16]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	6879      	ldr	r1, [r7, #4]
 8013a22:	4798      	blx	r3
 8013a24:	4603      	mov	r3, r0
 8013a26:	76bb      	strb	r3, [r7, #26]
 8013a28:	e001      	b.n	8013a2e <tcp_process+0x30e>
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013a2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a32:	f113 0f0d 	cmn.w	r3, #13
 8013a36:	d102      	bne.n	8013a3e <tcp_process+0x31e>
          return ERR_ABRT;
 8013a38:	f06f 030c 	mvn.w	r3, #12
 8013a3c:	e250      	b.n	8013ee0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	8b5b      	ldrh	r3, [r3, #26]
 8013a42:	f043 0302 	orr.w	r3, r3, #2
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013a4c:	e23a      	b.n	8013ec4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013a4e:	4b9d      	ldr	r3, [pc, #628]	; (8013cc4 <tcp_process+0x5a4>)
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	f003 0310 	and.w	r3, r3, #16
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f000 8234 	beq.w	8013ec4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a5c:	4b9a      	ldr	r3, [pc, #616]	; (8013cc8 <tcp_process+0x5a8>)
 8013a5e:	6819      	ldr	r1, [r3, #0]
 8013a60:	4b9a      	ldr	r3, [pc, #616]	; (8013ccc <tcp_process+0x5ac>)
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	461a      	mov	r2, r3
 8013a66:	4b9a      	ldr	r3, [pc, #616]	; (8013cd0 <tcp_process+0x5b0>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a6c:	4b99      	ldr	r3, [pc, #612]	; (8013cd4 <tcp_process+0x5b4>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a70:	885b      	ldrh	r3, [r3, #2]
 8013a72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a74:	4a97      	ldr	r2, [pc, #604]	; (8013cd4 <tcp_process+0x5b4>)
 8013a76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a78:	8812      	ldrh	r2, [r2, #0]
 8013a7a:	b292      	uxth	r2, r2
 8013a7c:	9202      	str	r2, [sp, #8]
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	4b95      	ldr	r3, [pc, #596]	; (8013cd8 <tcp_process+0x5b8>)
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	4b95      	ldr	r3, [pc, #596]	; (8013cdc <tcp_process+0x5bc>)
 8013a86:	4602      	mov	r2, r0
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f002 fc91 	bl	80163b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a94:	2b05      	cmp	r3, #5
 8013a96:	f200 8215 	bhi.w	8013ec4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f002 fa51 	bl	8015f48 <tcp_rexmit_rto>
      break;
 8013aa6:	e20d      	b.n	8013ec4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013aa8:	4b86      	ldr	r3, [pc, #536]	; (8013cc4 <tcp_process+0x5a4>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	f003 0310 	and.w	r3, r3, #16
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	f000 80a1 	beq.w	8013bf8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ab6:	4b84      	ldr	r3, [pc, #528]	; (8013cc8 <tcp_process+0x5a8>)
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	db7e      	blt.n	8013bc4 <tcp_process+0x4a4>
 8013ac6:	4b80      	ldr	r3, [pc, #512]	; (8013cc8 <tcp_process+0x5a8>)
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	dc77      	bgt.n	8013bc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2204      	movs	r2, #4
 8013ad8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d102      	bne.n	8013ae8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013ae2:	23fa      	movs	r3, #250	; 0xfa
 8013ae4:	76bb      	strb	r3, [r7, #26]
 8013ae6:	e01d      	b.n	8013b24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aec:	699b      	ldr	r3, [r3, #24]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d106      	bne.n	8013b00 <tcp_process+0x3e0>
 8013af2:	4b7b      	ldr	r3, [pc, #492]	; (8013ce0 <tcp_process+0x5c0>)
 8013af4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013af8:	497a      	ldr	r1, [pc, #488]	; (8013ce4 <tcp_process+0x5c4>)
 8013afa:	487b      	ldr	r0, [pc, #492]	; (8013ce8 <tcp_process+0x5c8>)
 8013afc:	f008 faaa 	bl	801c054 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b04:	699b      	ldr	r3, [r3, #24]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00a      	beq.n	8013b20 <tcp_process+0x400>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b0e:	699b      	ldr	r3, [r3, #24]
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	6910      	ldr	r0, [r2, #16]
 8013b14:	2200      	movs	r2, #0
 8013b16:	6879      	ldr	r1, [r7, #4]
 8013b18:	4798      	blx	r3
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	76bb      	strb	r3, [r7, #26]
 8013b1e:	e001      	b.n	8013b24 <tcp_process+0x404>
 8013b20:	23f0      	movs	r3, #240	; 0xf0
 8013b22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013b24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d00a      	beq.n	8013b42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b30:	f113 0f0d 	cmn.w	r3, #13
 8013b34:	d002      	beq.n	8013b3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7fd ff94 	bl	8011a64 <tcp_abort>
            }
            return ERR_ABRT;
 8013b3c:	f06f 030c 	mvn.w	r3, #12
 8013b40:	e1ce      	b.n	8013ee0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fae0 	bl	8014108 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013b48:	4b68      	ldr	r3, [pc, #416]	; (8013cec <tcp_process+0x5cc>)
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d005      	beq.n	8013b5c <tcp_process+0x43c>
            recv_acked--;
 8013b50:	4b66      	ldr	r3, [pc, #408]	; (8013cec <tcp_process+0x5cc>)
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	3b01      	subs	r3, #1
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	4b64      	ldr	r3, [pc, #400]	; (8013cec <tcp_process+0x5cc>)
 8013b5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b60:	009a      	lsls	r2, r3, #2
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b66:	005b      	lsls	r3, r3, #1
 8013b68:	f241 111c 	movw	r1, #4380	; 0x111c
 8013b6c:	428b      	cmp	r3, r1
 8013b6e:	bf38      	it	cc
 8013b70:	460b      	movcc	r3, r1
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d204      	bcs.n	8013b80 <tcp_process+0x460>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	e00d      	b.n	8013b9c <tcp_process+0x47c>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b84:	005b      	lsls	r3, r3, #1
 8013b86:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d904      	bls.n	8013b98 <tcp_process+0x478>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b92:	005b      	lsls	r3, r3, #1
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	e001      	b.n	8013b9c <tcp_process+0x47c>
 8013b98:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013ba2:	4b53      	ldr	r3, [pc, #332]	; (8013cf0 <tcp_process+0x5d0>)
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	f003 0320 	and.w	r3, r3, #32
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d037      	beq.n	8013c1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	8b5b      	ldrh	r3, [r3, #26]
 8013bb2:	f043 0302 	orr.w	r3, r3, #2
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2207      	movs	r2, #7
 8013bc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013bc2:	e02c      	b.n	8013c1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bc4:	4b40      	ldr	r3, [pc, #256]	; (8013cc8 <tcp_process+0x5a8>)
 8013bc6:	6819      	ldr	r1, [r3, #0]
 8013bc8:	4b40      	ldr	r3, [pc, #256]	; (8013ccc <tcp_process+0x5ac>)
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	461a      	mov	r2, r3
 8013bce:	4b40      	ldr	r3, [pc, #256]	; (8013cd0 <tcp_process+0x5b0>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bd4:	4b3f      	ldr	r3, [pc, #252]	; (8013cd4 <tcp_process+0x5b4>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bd8:	885b      	ldrh	r3, [r3, #2]
 8013bda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bdc:	4a3d      	ldr	r2, [pc, #244]	; (8013cd4 <tcp_process+0x5b4>)
 8013bde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013be0:	8812      	ldrh	r2, [r2, #0]
 8013be2:	b292      	uxth	r2, r2
 8013be4:	9202      	str	r2, [sp, #8]
 8013be6:	9301      	str	r3, [sp, #4]
 8013be8:	4b3b      	ldr	r3, [pc, #236]	; (8013cd8 <tcp_process+0x5b8>)
 8013bea:	9300      	str	r3, [sp, #0]
 8013bec:	4b3b      	ldr	r3, [pc, #236]	; (8013cdc <tcp_process+0x5bc>)
 8013bee:	4602      	mov	r2, r0
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f002 fbdd 	bl	80163b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013bf6:	e167      	b.n	8013ec8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013bf8:	4b32      	ldr	r3, [pc, #200]	; (8013cc4 <tcp_process+0x5a4>)
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	f003 0302 	and.w	r3, r3, #2
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 8161 	beq.w	8013ec8 <tcp_process+0x7a8>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c0a:	1e5a      	subs	r2, r3, #1
 8013c0c:	4b30      	ldr	r3, [pc, #192]	; (8013cd0 <tcp_process+0x5b0>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	f040 8159 	bne.w	8013ec8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f002 f9b8 	bl	8015f8c <tcp_rexmit>
      break;
 8013c1c:	e154      	b.n	8013ec8 <tcp_process+0x7a8>
 8013c1e:	e153      	b.n	8013ec8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f000 fa71 	bl	8014108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013c26:	4b32      	ldr	r3, [pc, #200]	; (8013cf0 <tcp_process+0x5d0>)
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	f003 0320 	and.w	r3, r3, #32
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	f000 814c 	beq.w	8013ecc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	8b5b      	ldrh	r3, [r3, #26]
 8013c38:	f043 0302 	orr.w	r3, r3, #2
 8013c3c:	b29a      	uxth	r2, r3
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2207      	movs	r2, #7
 8013c46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013c48:	e140      	b.n	8013ecc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f000 fa5c 	bl	8014108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013c50:	4b27      	ldr	r3, [pc, #156]	; (8013cf0 <tcp_process+0x5d0>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	f003 0320 	and.w	r3, r3, #32
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d071      	beq.n	8013d40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c5c:	4b19      	ldr	r3, [pc, #100]	; (8013cc4 <tcp_process+0x5a4>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	f003 0310 	and.w	r3, r3, #16
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d060      	beq.n	8013d2a <tcp_process+0x60a>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c6c:	4b16      	ldr	r3, [pc, #88]	; (8013cc8 <tcp_process+0x5a8>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d15a      	bne.n	8013d2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d156      	bne.n	8013d2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	8b5b      	ldrh	r3, [r3, #26]
 8013c80:	f043 0302 	orr.w	r3, r3, #2
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7fe fdbe 	bl	801280c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013c90:	4b18      	ldr	r3, [pc, #96]	; (8013cf4 <tcp_process+0x5d4>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d105      	bne.n	8013ca6 <tcp_process+0x586>
 8013c9a:	4b16      	ldr	r3, [pc, #88]	; (8013cf4 <tcp_process+0x5d4>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	4a14      	ldr	r2, [pc, #80]	; (8013cf4 <tcp_process+0x5d4>)
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	e02e      	b.n	8013d04 <tcp_process+0x5e4>
 8013ca6:	4b13      	ldr	r3, [pc, #76]	; (8013cf4 <tcp_process+0x5d4>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	617b      	str	r3, [r7, #20]
 8013cac:	e027      	b.n	8013cfe <tcp_process+0x5de>
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d11f      	bne.n	8013cf8 <tcp_process+0x5d8>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	60da      	str	r2, [r3, #12]
 8013cc0:	e020      	b.n	8013d04 <tcp_process+0x5e4>
 8013cc2:	bf00      	nop
 8013cc4:	20001060 	.word	0x20001060
 8013cc8:	20001058 	.word	0x20001058
 8013ccc:	2000105e 	.word	0x2000105e
 8013cd0:	20001054 	.word	0x20001054
 8013cd4:	20001044 	.word	0x20001044
 8013cd8:	200051b0 	.word	0x200051b0
 8013cdc:	200051b4 	.word	0x200051b4
 8013ce0:	080227dc 	.word	0x080227dc
 8013ce4:	08022a7c 	.word	0x08022a7c
 8013ce8:	08022828 	.word	0x08022828
 8013cec:	2000105c 	.word	0x2000105c
 8013cf0:	20001061 	.word	0x20001061
 8013cf4:	200082c4 	.word	0x200082c4
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	617b      	str	r3, [r7, #20]
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d1d4      	bne.n	8013cae <tcp_process+0x58e>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2200      	movs	r2, #0
 8013d08:	60da      	str	r2, [r3, #12]
 8013d0a:	4b77      	ldr	r3, [pc, #476]	; (8013ee8 <tcp_process+0x7c8>)
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	220a      	movs	r2, #10
 8013d14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013d16:	4b75      	ldr	r3, [pc, #468]	; (8013eec <tcp_process+0x7cc>)
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	60da      	str	r2, [r3, #12]
 8013d1e:	4a73      	ldr	r2, [pc, #460]	; (8013eec <tcp_process+0x7cc>)
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	f002 fd04 	bl	8016730 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013d28:	e0d2      	b.n	8013ed0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	8b5b      	ldrh	r3, [r3, #26]
 8013d2e:	f043 0302 	orr.w	r3, r3, #2
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2208      	movs	r2, #8
 8013d3c:	751a      	strb	r2, [r3, #20]
      break;
 8013d3e:	e0c7      	b.n	8013ed0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d40:	4b6b      	ldr	r3, [pc, #428]	; (8013ef0 <tcp_process+0x7d0>)
 8013d42:	781b      	ldrb	r3, [r3, #0]
 8013d44:	f003 0310 	and.w	r3, r3, #16
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f000 80c1 	beq.w	8013ed0 <tcp_process+0x7b0>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d52:	4b68      	ldr	r3, [pc, #416]	; (8013ef4 <tcp_process+0x7d4>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	f040 80ba 	bne.w	8013ed0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f040 80b5 	bne.w	8013ed0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2206      	movs	r2, #6
 8013d6a:	751a      	strb	r2, [r3, #20]
      break;
 8013d6c:	e0b0      	b.n	8013ed0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f9ca 	bl	8014108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013d74:	4b60      	ldr	r3, [pc, #384]	; (8013ef8 <tcp_process+0x7d8>)
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	f003 0320 	and.w	r3, r3, #32
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 80a9 	beq.w	8013ed4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8b5b      	ldrh	r3, [r3, #26]
 8013d86:	f043 0302 	orr.w	r3, r3, #2
 8013d8a:	b29a      	uxth	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7fe fd3b 	bl	801280c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013d96:	4b59      	ldr	r3, [pc, #356]	; (8013efc <tcp_process+0x7dc>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d105      	bne.n	8013dac <tcp_process+0x68c>
 8013da0:	4b56      	ldr	r3, [pc, #344]	; (8013efc <tcp_process+0x7dc>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	4a55      	ldr	r2, [pc, #340]	; (8013efc <tcp_process+0x7dc>)
 8013da8:	6013      	str	r3, [r2, #0]
 8013daa:	e013      	b.n	8013dd4 <tcp_process+0x6b4>
 8013dac:	4b53      	ldr	r3, [pc, #332]	; (8013efc <tcp_process+0x7dc>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	613b      	str	r3, [r7, #16]
 8013db2:	e00c      	b.n	8013dce <tcp_process+0x6ae>
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d104      	bne.n	8013dc8 <tcp_process+0x6a8>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	68da      	ldr	r2, [r3, #12]
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	60da      	str	r2, [r3, #12]
 8013dc6:	e005      	b.n	8013dd4 <tcp_process+0x6b4>
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	613b      	str	r3, [r7, #16]
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d1ef      	bne.n	8013db4 <tcp_process+0x694>
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	60da      	str	r2, [r3, #12]
 8013dda:	4b43      	ldr	r3, [pc, #268]	; (8013ee8 <tcp_process+0x7c8>)
 8013ddc:	2201      	movs	r2, #1
 8013dde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	220a      	movs	r2, #10
 8013de4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013de6:	4b41      	ldr	r3, [pc, #260]	; (8013eec <tcp_process+0x7cc>)
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	60da      	str	r2, [r3, #12]
 8013dee:	4a3f      	ldr	r2, [pc, #252]	; (8013eec <tcp_process+0x7cc>)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6013      	str	r3, [r2, #0]
 8013df4:	f002 fc9c 	bl	8016730 <tcp_timer_needed>
      }
      break;
 8013df8:	e06c      	b.n	8013ed4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f000 f984 	bl	8014108 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013e00:	4b3b      	ldr	r3, [pc, #236]	; (8013ef0 <tcp_process+0x7d0>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	f003 0310 	and.w	r3, r3, #16
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d065      	beq.n	8013ed8 <tcp_process+0x7b8>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e10:	4b38      	ldr	r3, [pc, #224]	; (8013ef4 <tcp_process+0x7d4>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d15f      	bne.n	8013ed8 <tcp_process+0x7b8>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d15b      	bne.n	8013ed8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7fe fcf3 	bl	801280c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013e26:	4b35      	ldr	r3, [pc, #212]	; (8013efc <tcp_process+0x7dc>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d105      	bne.n	8013e3c <tcp_process+0x71c>
 8013e30:	4b32      	ldr	r3, [pc, #200]	; (8013efc <tcp_process+0x7dc>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	4a31      	ldr	r2, [pc, #196]	; (8013efc <tcp_process+0x7dc>)
 8013e38:	6013      	str	r3, [r2, #0]
 8013e3a:	e013      	b.n	8013e64 <tcp_process+0x744>
 8013e3c:	4b2f      	ldr	r3, [pc, #188]	; (8013efc <tcp_process+0x7dc>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	60fb      	str	r3, [r7, #12]
 8013e42:	e00c      	b.n	8013e5e <tcp_process+0x73e>
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	687a      	ldr	r2, [r7, #4]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d104      	bne.n	8013e58 <tcp_process+0x738>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	68da      	ldr	r2, [r3, #12]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	60da      	str	r2, [r3, #12]
 8013e56:	e005      	b.n	8013e64 <tcp_process+0x744>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	60fb      	str	r3, [r7, #12]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d1ef      	bne.n	8013e44 <tcp_process+0x724>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	60da      	str	r2, [r3, #12]
 8013e6a:	4b1f      	ldr	r3, [pc, #124]	; (8013ee8 <tcp_process+0x7c8>)
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	220a      	movs	r2, #10
 8013e74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013e76:	4b1d      	ldr	r3, [pc, #116]	; (8013eec <tcp_process+0x7cc>)
 8013e78:	681a      	ldr	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	60da      	str	r2, [r3, #12]
 8013e7e:	4a1b      	ldr	r2, [pc, #108]	; (8013eec <tcp_process+0x7cc>)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6013      	str	r3, [r2, #0]
 8013e84:	f002 fc54 	bl	8016730 <tcp_timer_needed>
      }
      break;
 8013e88:	e026      	b.n	8013ed8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f000 f93c 	bl	8014108 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013e90:	4b17      	ldr	r3, [pc, #92]	; (8013ef0 <tcp_process+0x7d0>)
 8013e92:	781b      	ldrb	r3, [r3, #0]
 8013e94:	f003 0310 	and.w	r3, r3, #16
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d01f      	beq.n	8013edc <tcp_process+0x7bc>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ea0:	4b14      	ldr	r3, [pc, #80]	; (8013ef4 <tcp_process+0x7d4>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d119      	bne.n	8013edc <tcp_process+0x7bc>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d115      	bne.n	8013edc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013eb0:	4b11      	ldr	r3, [pc, #68]	; (8013ef8 <tcp_process+0x7d8>)
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	f043 0310 	orr.w	r3, r3, #16
 8013eb8:	b2da      	uxtb	r2, r3
 8013eba:	4b0f      	ldr	r3, [pc, #60]	; (8013ef8 <tcp_process+0x7d8>)
 8013ebc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013ebe:	e00d      	b.n	8013edc <tcp_process+0x7bc>
    default:
      break;
 8013ec0:	bf00      	nop
 8013ec2:	e00c      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ec4:	bf00      	nop
 8013ec6:	e00a      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ec8:	bf00      	nop
 8013eca:	e008      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ecc:	bf00      	nop
 8013ece:	e006      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ed0:	bf00      	nop
 8013ed2:	e004      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ed4:	bf00      	nop
 8013ed6:	e002      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013ed8:	bf00      	nop
 8013eda:	e000      	b.n	8013ede <tcp_process+0x7be>
      break;
 8013edc:	bf00      	nop
  }
  return ERR_OK;
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3724      	adds	r7, #36	; 0x24
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd90      	pop	{r4, r7, pc}
 8013ee8:	200082c0 	.word	0x200082c0
 8013eec:	200082d4 	.word	0x200082d4
 8013ef0:	20001060 	.word	0x20001060
 8013ef4:	20001058 	.word	0x20001058
 8013ef8:	20001061 	.word	0x20001061
 8013efc:	200082c4 	.word	0x200082c4

08013f00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013f00:	b590      	push	{r4, r7, lr}
 8013f02:	b085      	sub	sp, #20
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <tcp_oos_insert_segment+0x1e>
 8013f10:	4b3b      	ldr	r3, [pc, #236]	; (8014000 <tcp_oos_insert_segment+0x100>)
 8013f12:	f240 421f 	movw	r2, #1055	; 0x41f
 8013f16:	493b      	ldr	r1, [pc, #236]	; (8014004 <tcp_oos_insert_segment+0x104>)
 8013f18:	483b      	ldr	r0, [pc, #236]	; (8014008 <tcp_oos_insert_segment+0x108>)
 8013f1a:	f008 f89b 	bl	801c054 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	899b      	ldrh	r3, [r3, #12]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7fb fd74 	bl	800fa14 <lwip_htons>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	f003 0301 	and.w	r3, r3, #1
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d028      	beq.n	8013f8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013f38:	6838      	ldr	r0, [r7, #0]
 8013f3a:	f7fe fa67 	bl	801240c <tcp_segs_free>
    next = NULL;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	603b      	str	r3, [r7, #0]
 8013f42:	e056      	b.n	8013ff2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	899b      	ldrh	r3, [r3, #12]
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fb fd61 	bl	800fa14 <lwip_htons>
 8013f52:	4603      	mov	r3, r0
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	f003 0301 	and.w	r3, r3, #1
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00d      	beq.n	8013f7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	68db      	ldr	r3, [r3, #12]
 8013f62:	899b      	ldrh	r3, [r3, #12]
 8013f64:	b29c      	uxth	r4, r3
 8013f66:	2001      	movs	r0, #1
 8013f68:	f7fb fd54 	bl	800fa14 <lwip_htons>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	461a      	mov	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	4322      	orrs	r2, r4
 8013f76:	b292      	uxth	r2, r2
 8013f78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013f84:	68f8      	ldr	r0, [r7, #12]
 8013f86:	f7fe fa55 	bl	8012434 <tcp_seg_free>
    while (next &&
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d00e      	beq.n	8013fae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	891b      	ldrh	r3, [r3, #8]
 8013f94:	461a      	mov	r2, r3
 8013f96:	4b1d      	ldr	r3, [pc, #116]	; (801400c <tcp_oos_insert_segment+0x10c>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	441a      	add	r2, r3
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	6839      	ldr	r1, [r7, #0]
 8013fa4:	8909      	ldrh	r1, [r1, #8]
 8013fa6:	440b      	add	r3, r1
 8013fa8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	daca      	bge.n	8013f44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d01e      	beq.n	8013ff2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	891b      	ldrh	r3, [r3, #8]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4b14      	ldr	r3, [pc, #80]	; (801400c <tcp_oos_insert_segment+0x10c>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	441a      	add	r2, r3
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	dd12      	ble.n	8013ff2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	4b0d      	ldr	r3, [pc, #52]	; (801400c <tcp_oos_insert_segment+0x10c>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	685a      	ldr	r2, [r3, #4]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	891b      	ldrh	r3, [r3, #8]
 8013fea:	4619      	mov	r1, r3
 8013fec:	4610      	mov	r0, r2
 8013fee:	f7fc fe23 	bl	8010c38 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	601a      	str	r2, [r3, #0]
}
 8013ff8:	bf00      	nop
 8013ffa:	3714      	adds	r7, #20
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd90      	pop	{r4, r7, pc}
 8014000:	080227dc 	.word	0x080227dc
 8014004:	08022a9c 	.word	0x08022a9c
 8014008:	08022828 	.word	0x08022828
 801400c:	20001054 	.word	0x20001054

08014010 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014010:	b5b0      	push	{r4, r5, r7, lr}
 8014012:	b086      	sub	sp, #24
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	607a      	str	r2, [r7, #4]
 801401c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801401e:	e03e      	b.n	801409e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	4618      	mov	r0, r3
 8014030:	f7fd f810 	bl	8011054 <pbuf_clen>
 8014034:	4603      	mov	r3, r0
 8014036:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801403e:	8a7a      	ldrh	r2, [r7, #18]
 8014040:	429a      	cmp	r2, r3
 8014042:	d906      	bls.n	8014052 <tcp_free_acked_segments+0x42>
 8014044:	4b2a      	ldr	r3, [pc, #168]	; (80140f0 <tcp_free_acked_segments+0xe0>)
 8014046:	f240 4257 	movw	r2, #1111	; 0x457
 801404a:	492a      	ldr	r1, [pc, #168]	; (80140f4 <tcp_free_acked_segments+0xe4>)
 801404c:	482a      	ldr	r0, [pc, #168]	; (80140f8 <tcp_free_acked_segments+0xe8>)
 801404e:	f008 f801 	bl	801c054 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014058:	8a7b      	ldrh	r3, [r7, #18]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	b29a      	uxth	r2, r3
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	891a      	ldrh	r2, [r3, #8]
 8014068:	4b24      	ldr	r3, [pc, #144]	; (80140fc <tcp_free_acked_segments+0xec>)
 801406a:	881b      	ldrh	r3, [r3, #0]
 801406c:	4413      	add	r3, r2
 801406e:	b29a      	uxth	r2, r3
 8014070:	4b22      	ldr	r3, [pc, #136]	; (80140fc <tcp_free_acked_segments+0xec>)
 8014072:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014074:	6978      	ldr	r0, [r7, #20]
 8014076:	f7fe f9dd 	bl	8012434 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00c      	beq.n	801409e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d109      	bne.n	801409e <tcp_free_acked_segments+0x8e>
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d106      	bne.n	801409e <tcp_free_acked_segments+0x8e>
 8014090:	4b17      	ldr	r3, [pc, #92]	; (80140f0 <tcp_free_acked_segments+0xe0>)
 8014092:	f240 4262 	movw	r2, #1122	; 0x462
 8014096:	491a      	ldr	r1, [pc, #104]	; (8014100 <tcp_free_acked_segments+0xf0>)
 8014098:	4817      	ldr	r0, [pc, #92]	; (80140f8 <tcp_free_acked_segments+0xe8>)
 801409a:	f007 ffdb 	bl	801c054 <iprintf>
  while (seg_list != NULL &&
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d020      	beq.n	80140e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fb fcc7 	bl	800fa3e <lwip_htonl>
 80140b0:	4604      	mov	r4, r0
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	891b      	ldrh	r3, [r3, #8]
 80140b6:	461d      	mov	r5, r3
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	899b      	ldrh	r3, [r3, #12]
 80140be:	b29b      	uxth	r3, r3
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fb fca7 	bl	800fa14 <lwip_htons>
 80140c6:	4603      	mov	r3, r0
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	f003 0303 	and.w	r3, r3, #3
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <tcp_free_acked_segments+0xc6>
 80140d2:	2301      	movs	r3, #1
 80140d4:	e000      	b.n	80140d8 <tcp_free_acked_segments+0xc8>
 80140d6:	2300      	movs	r3, #0
 80140d8:	442b      	add	r3, r5
 80140da:	18e2      	adds	r2, r4, r3
 80140dc:	4b09      	ldr	r3, [pc, #36]	; (8014104 <tcp_free_acked_segments+0xf4>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	dd9c      	ble.n	8014020 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80140e6:	68bb      	ldr	r3, [r7, #8]
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3718      	adds	r7, #24
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bdb0      	pop	{r4, r5, r7, pc}
 80140f0:	080227dc 	.word	0x080227dc
 80140f4:	08022ac4 	.word	0x08022ac4
 80140f8:	08022828 	.word	0x08022828
 80140fc:	2000105c 	.word	0x2000105c
 8014100:	08022aec 	.word	0x08022aec
 8014104:	20001058 	.word	0x20001058

08014108 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014108:	b5b0      	push	{r4, r5, r7, lr}
 801410a:	b094      	sub	sp, #80	; 0x50
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014110:	2300      	movs	r3, #0
 8014112:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d106      	bne.n	8014128 <tcp_receive+0x20>
 801411a:	4ba6      	ldr	r3, [pc, #664]	; (80143b4 <tcp_receive+0x2ac>)
 801411c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014120:	49a5      	ldr	r1, [pc, #660]	; (80143b8 <tcp_receive+0x2b0>)
 8014122:	48a6      	ldr	r0, [pc, #664]	; (80143bc <tcp_receive+0x2b4>)
 8014124:	f007 ff96 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	7d1b      	ldrb	r3, [r3, #20]
 801412c:	2b03      	cmp	r3, #3
 801412e:	d806      	bhi.n	801413e <tcp_receive+0x36>
 8014130:	4ba0      	ldr	r3, [pc, #640]	; (80143b4 <tcp_receive+0x2ac>)
 8014132:	f240 427c 	movw	r2, #1148	; 0x47c
 8014136:	49a2      	ldr	r1, [pc, #648]	; (80143c0 <tcp_receive+0x2b8>)
 8014138:	48a0      	ldr	r0, [pc, #640]	; (80143bc <tcp_receive+0x2b4>)
 801413a:	f007 ff8b 	bl	801c054 <iprintf>

  if (flags & TCP_ACK) {
 801413e:	4ba1      	ldr	r3, [pc, #644]	; (80143c4 <tcp_receive+0x2bc>)
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	f003 0310 	and.w	r3, r3, #16
 8014146:	2b00      	cmp	r3, #0
 8014148:	f000 8263 	beq.w	8014612 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014152:	461a      	mov	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014158:	4413      	add	r3, r2
 801415a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014160:	4b99      	ldr	r3, [pc, #612]	; (80143c8 <tcp_receive+0x2c0>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	2b00      	cmp	r3, #0
 8014168:	db1b      	blt.n	80141a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801416e:	4b96      	ldr	r3, [pc, #600]	; (80143c8 <tcp_receive+0x2c0>)
 8014170:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014172:	429a      	cmp	r2, r3
 8014174:	d106      	bne.n	8014184 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801417a:	4b94      	ldr	r3, [pc, #592]	; (80143cc <tcp_receive+0x2c4>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	1ad3      	subs	r3, r2, r3
 8014180:	2b00      	cmp	r3, #0
 8014182:	db0e      	blt.n	80141a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014188:	4b90      	ldr	r3, [pc, #576]	; (80143cc <tcp_receive+0x2c4>)
 801418a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801418c:	429a      	cmp	r2, r3
 801418e:	d125      	bne.n	80141dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014190:	4b8f      	ldr	r3, [pc, #572]	; (80143d0 <tcp_receive+0x2c8>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	89db      	ldrh	r3, [r3, #14]
 8014196:	b29a      	uxth	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801419e:	429a      	cmp	r2, r3
 80141a0:	d91c      	bls.n	80141dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80141a2:	4b8b      	ldr	r3, [pc, #556]	; (80143d0 <tcp_receive+0x2c8>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	89db      	ldrh	r3, [r3, #14]
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141bc:	429a      	cmp	r2, r3
 80141be:	d205      	bcs.n	80141cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80141cc:	4b7e      	ldr	r3, [pc, #504]	; (80143c8 <tcp_receive+0x2c0>)
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80141d4:	4b7d      	ldr	r3, [pc, #500]	; (80143cc <tcp_receive+0x2c4>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80141dc:	4b7b      	ldr	r3, [pc, #492]	; (80143cc <tcp_receive+0x2c4>)
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141e4:	1ad3      	subs	r3, r2, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	dc58      	bgt.n	801429c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80141ea:	4b7a      	ldr	r3, [pc, #488]	; (80143d4 <tcp_receive+0x2cc>)
 80141ec:	881b      	ldrh	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d14b      	bne.n	801428a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80141fc:	4413      	add	r3, r2
 80141fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014200:	429a      	cmp	r2, r3
 8014202:	d142      	bne.n	801428a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801420a:	2b00      	cmp	r3, #0
 801420c:	db3d      	blt.n	801428a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014212:	4b6e      	ldr	r3, [pc, #440]	; (80143cc <tcp_receive+0x2c4>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	429a      	cmp	r2, r3
 8014218:	d137      	bne.n	801428a <tcp_receive+0x182>
              found_dupack = 1;
 801421a:	2301      	movs	r3, #1
 801421c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014224:	2bff      	cmp	r3, #255	; 0xff
 8014226:	d007      	beq.n	8014238 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801422e:	3301      	adds	r3, #1
 8014230:	b2da      	uxtb	r2, r3
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801423e:	2b03      	cmp	r3, #3
 8014240:	d91b      	bls.n	801427a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801424c:	4413      	add	r3, r2
 801424e:	b29a      	uxth	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014256:	429a      	cmp	r2, r3
 8014258:	d30a      	bcc.n	8014270 <tcp_receive+0x168>
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014264:	4413      	add	r3, r2
 8014266:	b29a      	uxth	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801426e:	e004      	b.n	801427a <tcp_receive+0x172>
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014280:	2b02      	cmp	r3, #2
 8014282:	d902      	bls.n	801428a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f001 feed 	bl	8016064 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801428a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801428c:	2b00      	cmp	r3, #0
 801428e:	f040 8160 	bne.w	8014552 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2200      	movs	r2, #0
 8014296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801429a:	e15a      	b.n	8014552 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801429c:	4b4b      	ldr	r3, [pc, #300]	; (80143cc <tcp_receive+0x2c4>)
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	3b01      	subs	r3, #1
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f2c0 814d 	blt.w	8014548 <tcp_receive+0x440>
 80142ae:	4b47      	ldr	r3, [pc, #284]	; (80143cc <tcp_receive+0x2c4>)
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142b6:	1ad3      	subs	r3, r2, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f300 8145 	bgt.w	8014548 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	8b5b      	ldrh	r3, [r3, #26]
 80142c2:	f003 0304 	and.w	r3, r3, #4
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d010      	beq.n	80142ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	8b5b      	ldrh	r3, [r3, #26]
 80142ce:	f023 0304 	bic.w	r3, r3, #4
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2200      	movs	r2, #0
 80142f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142fa:	10db      	asrs	r3, r3, #3
 80142fc:	b21b      	sxth	r3, r3
 80142fe:	b29a      	uxth	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014306:	b29b      	uxth	r3, r3
 8014308:	4413      	add	r3, r2
 801430a:	b29b      	uxth	r3, r3
 801430c:	b21a      	sxth	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014314:	4b2d      	ldr	r3, [pc, #180]	; (80143cc <tcp_receive+0x2c4>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	b29a      	uxth	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801431e:	b29b      	uxth	r3, r3
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801432c:	4b27      	ldr	r3, [pc, #156]	; (80143cc <tcp_receive+0x2c4>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7d1b      	ldrb	r3, [r3, #20]
 8014338:	2b03      	cmp	r3, #3
 801433a:	f240 8096 	bls.w	801446a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801434a:	429a      	cmp	r2, r3
 801434c:	d244      	bcs.n	80143d8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	8b5b      	ldrh	r3, [r3, #26]
 8014352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <tcp_receive+0x256>
 801435a:	2301      	movs	r3, #1
 801435c:	e000      	b.n	8014360 <tcp_receive+0x258>
 801435e:	2302      	movs	r3, #2
 8014360:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014364:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014368:	b29a      	uxth	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801436e:	fb12 f303 	smulbb	r3, r2, r3
 8014372:	b29b      	uxth	r3, r3
 8014374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014376:	4293      	cmp	r3, r2
 8014378:	bf28      	it	cs
 801437a:	4613      	movcs	r3, r2
 801437c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014386:	4413      	add	r3, r2
 8014388:	b29a      	uxth	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014390:	429a      	cmp	r2, r3
 8014392:	d309      	bcc.n	80143a8 <tcp_receive+0x2a0>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801439a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801439c:	4413      	add	r3, r2
 801439e:	b29a      	uxth	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80143a6:	e060      	b.n	801446a <tcp_receive+0x362>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80143b2:	e05a      	b.n	801446a <tcp_receive+0x362>
 80143b4:	080227dc 	.word	0x080227dc
 80143b8:	08022b0c 	.word	0x08022b0c
 80143bc:	08022828 	.word	0x08022828
 80143c0:	08022b28 	.word	0x08022b28
 80143c4:	20001060 	.word	0x20001060
 80143c8:	20001054 	.word	0x20001054
 80143cc:	20001058 	.word	0x20001058
 80143d0:	20001044 	.word	0x20001044
 80143d4:	2000105e 	.word	0x2000105e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143e0:	4413      	add	r3, r2
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d309      	bcc.n	8014402 <tcp_receive+0x2fa>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143f6:	4413      	add	r3, r2
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014400:	e004      	b.n	801440c <tcp_receive+0x304>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014418:	429a      	cmp	r2, r3
 801441a:	d326      	bcc.n	801446a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	b29a      	uxth	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801443c:	4413      	add	r3, r2
 801443e:	b29a      	uxth	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014446:	429a      	cmp	r2, r3
 8014448:	d30a      	bcc.n	8014460 <tcp_receive+0x358>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014454:	4413      	add	r3, r2
 8014456:	b29a      	uxth	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801445e:	e004      	b.n	801446a <tcp_receive+0x362>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014472:	4a98      	ldr	r2, [pc, #608]	; (80146d4 <tcp_receive+0x5cc>)
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7ff fdcb 	bl	8014010 <tcp_free_acked_segments>
 801447a:	4602      	mov	r2, r0
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014488:	4a93      	ldr	r2, [pc, #588]	; (80146d8 <tcp_receive+0x5d0>)
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f7ff fdc0 	bl	8014010 <tcp_free_acked_segments>
 8014490:	4602      	mov	r2, r0
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801449a:	2b00      	cmp	r3, #0
 801449c:	d104      	bne.n	80144a8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80144a6:	e002      	b.n	80144ae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d103      	bne.n	80144c4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2200      	movs	r2, #0
 80144c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80144ca:	4b84      	ldr	r3, [pc, #528]	; (80146dc <tcp_receive+0x5d4>)
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	4413      	add	r3, r2
 80144d0:	b29a      	uxth	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8b5b      	ldrh	r3, [r3, #26]
 80144dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d035      	beq.n	8014550 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d118      	bne.n	801451e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d00c      	beq.n	801450e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	4618      	mov	r0, r3
 8014502:	f7fb fa9c 	bl	800fa3e <lwip_htonl>
 8014506:	4603      	mov	r3, r0
 8014508:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801450a:	2b00      	cmp	r3, #0
 801450c:	dc20      	bgt.n	8014550 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	8b5b      	ldrh	r3, [r3, #26]
 8014512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014516:	b29a      	uxth	r2, r3
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801451c:	e018      	b.n	8014550 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	4618      	mov	r0, r3
 801452c:	f7fb fa87 	bl	800fa3e <lwip_htonl>
 8014530:	4603      	mov	r3, r0
 8014532:	1ae3      	subs	r3, r4, r3
 8014534:	2b00      	cmp	r3, #0
 8014536:	dc0b      	bgt.n	8014550 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	8b5b      	ldrh	r3, [r3, #26]
 801453c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014540:	b29a      	uxth	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014546:	e003      	b.n	8014550 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f001 ff81 	bl	8016450 <tcp_send_empty_ack>
 801454e:	e000      	b.n	8014552 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014550:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014556:	2b00      	cmp	r3, #0
 8014558:	d05b      	beq.n	8014612 <tcp_receive+0x50a>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801455e:	4b60      	ldr	r3, [pc, #384]	; (80146e0 <tcp_receive+0x5d8>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	1ad3      	subs	r3, r2, r3
 8014564:	2b00      	cmp	r3, #0
 8014566:	da54      	bge.n	8014612 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014568:	4b5e      	ldr	r3, [pc, #376]	; (80146e4 <tcp_receive+0x5dc>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	b29a      	uxth	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014572:	b29b      	uxth	r3, r3
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	b29b      	uxth	r3, r3
 8014578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801457c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014586:	10db      	asrs	r3, r3, #3
 8014588:	b21b      	sxth	r3, r3
 801458a:	b29b      	uxth	r3, r3
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	b29b      	uxth	r3, r3
 8014590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801459a:	b29a      	uxth	r2, r3
 801459c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80145a0:	4413      	add	r3, r2
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	b21a      	sxth	r2, r3
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80145aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	da05      	bge.n	80145be <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80145b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80145b6:	425b      	negs	r3, r3
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80145be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145c8:	109b      	asrs	r3, r3, #2
 80145ca:	b21b      	sxth	r3, r3
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145dc:	b29a      	uxth	r2, r3
 80145de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80145e2:	4413      	add	r3, r2
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	b21a      	sxth	r2, r3
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145f2:	10db      	asrs	r3, r3, #3
 80145f4:	b21b      	sxth	r3, r3
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145fe:	b29b      	uxth	r3, r3
 8014600:	4413      	add	r3, r2
 8014602:	b29b      	uxth	r3, r3
 8014604:	b21a      	sxth	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2200      	movs	r2, #0
 8014610:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014612:	4b35      	ldr	r3, [pc, #212]	; (80146e8 <tcp_receive+0x5e0>)
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	f000 84e1 	beq.w	8014fde <tcp_receive+0xed6>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	7d1b      	ldrb	r3, [r3, #20]
 8014620:	2b06      	cmp	r3, #6
 8014622:	f200 84dc 	bhi.w	8014fde <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801462a:	4b30      	ldr	r3, [pc, #192]	; (80146ec <tcp_receive+0x5e4>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	3b01      	subs	r3, #1
 8014632:	2b00      	cmp	r3, #0
 8014634:	f2c0 808e 	blt.w	8014754 <tcp_receive+0x64c>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801463c:	4b2a      	ldr	r3, [pc, #168]	; (80146e8 <tcp_receive+0x5e0>)
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	4619      	mov	r1, r3
 8014642:	4b2a      	ldr	r3, [pc, #168]	; (80146ec <tcp_receive+0x5e4>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	440b      	add	r3, r1
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	3301      	adds	r3, #1
 801464c:	2b00      	cmp	r3, #0
 801464e:	f300 8081 	bgt.w	8014754 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014652:	4b27      	ldr	r3, [pc, #156]	; (80146f0 <tcp_receive+0x5e8>)
 8014654:	685b      	ldr	r3, [r3, #4]
 8014656:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801465c:	4b23      	ldr	r3, [pc, #140]	; (80146ec <tcp_receive+0x5e4>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	1ad3      	subs	r3, r2, r3
 8014662:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014664:	4b22      	ldr	r3, [pc, #136]	; (80146f0 <tcp_receive+0x5e8>)
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d106      	bne.n	801467a <tcp_receive+0x572>
 801466c:	4b21      	ldr	r3, [pc, #132]	; (80146f4 <tcp_receive+0x5ec>)
 801466e:	f240 5294 	movw	r2, #1428	; 0x594
 8014672:	4921      	ldr	r1, [pc, #132]	; (80146f8 <tcp_receive+0x5f0>)
 8014674:	4821      	ldr	r0, [pc, #132]	; (80146fc <tcp_receive+0x5f4>)
 8014676:	f007 fced 	bl	801c054 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014680:	4293      	cmp	r3, r2
 8014682:	d906      	bls.n	8014692 <tcp_receive+0x58a>
 8014684:	4b1b      	ldr	r3, [pc, #108]	; (80146f4 <tcp_receive+0x5ec>)
 8014686:	f240 5295 	movw	r2, #1429	; 0x595
 801468a:	491d      	ldr	r1, [pc, #116]	; (8014700 <tcp_receive+0x5f8>)
 801468c:	481b      	ldr	r0, [pc, #108]	; (80146fc <tcp_receive+0x5f4>)
 801468e:	f007 fce1 	bl	801c054 <iprintf>
      off = (u16_t)off32;
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014694:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014698:	4b15      	ldr	r3, [pc, #84]	; (80146f0 <tcp_receive+0x5e8>)
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	891b      	ldrh	r3, [r3, #8]
 801469e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d906      	bls.n	80146b4 <tcp_receive+0x5ac>
 80146a6:	4b13      	ldr	r3, [pc, #76]	; (80146f4 <tcp_receive+0x5ec>)
 80146a8:	f240 5297 	movw	r2, #1431	; 0x597
 80146ac:	4915      	ldr	r1, [pc, #84]	; (8014704 <tcp_receive+0x5fc>)
 80146ae:	4813      	ldr	r0, [pc, #76]	; (80146fc <tcp_receive+0x5f4>)
 80146b0:	f007 fcd0 	bl	801c054 <iprintf>
      inseg.len -= off;
 80146b4:	4b0e      	ldr	r3, [pc, #56]	; (80146f0 <tcp_receive+0x5e8>)
 80146b6:	891a      	ldrh	r2, [r3, #8]
 80146b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	b29a      	uxth	r2, r3
 80146c0:	4b0b      	ldr	r3, [pc, #44]	; (80146f0 <tcp_receive+0x5e8>)
 80146c2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80146c4:	4b0a      	ldr	r3, [pc, #40]	; (80146f0 <tcp_receive+0x5e8>)
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	891a      	ldrh	r2, [r3, #8]
 80146ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80146d2:	e029      	b.n	8014728 <tcp_receive+0x620>
 80146d4:	08022b44 	.word	0x08022b44
 80146d8:	08022b4c 	.word	0x08022b4c
 80146dc:	2000105c 	.word	0x2000105c
 80146e0:	20001058 	.word	0x20001058
 80146e4:	200082c8 	.word	0x200082c8
 80146e8:	2000105e 	.word	0x2000105e
 80146ec:	20001054 	.word	0x20001054
 80146f0:	20001034 	.word	0x20001034
 80146f4:	080227dc 	.word	0x080227dc
 80146f8:	08022b54 	.word	0x08022b54
 80146fc:	08022828 	.word	0x08022828
 8014700:	08022b64 	.word	0x08022b64
 8014704:	08022b74 	.word	0x08022b74
        off -= p->len;
 8014708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801470a:	895b      	ldrh	r3, [r3, #10]
 801470c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014718:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801471a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801471e:	2200      	movs	r2, #0
 8014720:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801472a:	895b      	ldrh	r3, [r3, #10]
 801472c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014730:	429a      	cmp	r2, r3
 8014732:	d8e9      	bhi.n	8014708 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014738:	4619      	mov	r1, r3
 801473a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801473c:	f7fc fb7c 	bl	8010e38 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014744:	4a91      	ldr	r2, [pc, #580]	; (801498c <tcp_receive+0x884>)
 8014746:	6013      	str	r3, [r2, #0]
 8014748:	4b91      	ldr	r3, [pc, #580]	; (8014990 <tcp_receive+0x888>)
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	4a8f      	ldr	r2, [pc, #572]	; (801498c <tcp_receive+0x884>)
 801474e:	6812      	ldr	r2, [r2, #0]
 8014750:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014752:	e00d      	b.n	8014770 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014754:	4b8d      	ldr	r3, [pc, #564]	; (801498c <tcp_receive+0x884>)
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801475c:	1ad3      	subs	r3, r2, r3
 801475e:	2b00      	cmp	r3, #0
 8014760:	da06      	bge.n	8014770 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	8b5b      	ldrh	r3, [r3, #26]
 8014766:	f043 0302 	orr.w	r3, r3, #2
 801476a:	b29a      	uxth	r2, r3
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014770:	4b86      	ldr	r3, [pc, #536]	; (801498c <tcp_receive+0x884>)
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014778:	1ad3      	subs	r3, r2, r3
 801477a:	2b00      	cmp	r3, #0
 801477c:	f2c0 842a 	blt.w	8014fd4 <tcp_receive+0xecc>
 8014780:	4b82      	ldr	r3, [pc, #520]	; (801498c <tcp_receive+0x884>)
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014788:	6879      	ldr	r1, [r7, #4]
 801478a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801478c:	440b      	add	r3, r1
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	3301      	adds	r3, #1
 8014792:	2b00      	cmp	r3, #0
 8014794:	f300 841e 	bgt.w	8014fd4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801479c:	4b7b      	ldr	r3, [pc, #492]	; (801498c <tcp_receive+0x884>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	f040 829a 	bne.w	8014cda <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80147a6:	4b7a      	ldr	r3, [pc, #488]	; (8014990 <tcp_receive+0x888>)
 80147a8:	891c      	ldrh	r4, [r3, #8]
 80147aa:	4b79      	ldr	r3, [pc, #484]	; (8014990 <tcp_receive+0x888>)
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	899b      	ldrh	r3, [r3, #12]
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fb f92e 	bl	800fa14 <lwip_htons>
 80147b8:	4603      	mov	r3, r0
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	f003 0303 	and.w	r3, r3, #3
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d001      	beq.n	80147c8 <tcp_receive+0x6c0>
 80147c4:	2301      	movs	r3, #1
 80147c6:	e000      	b.n	80147ca <tcp_receive+0x6c2>
 80147c8:	2300      	movs	r3, #0
 80147ca:	4423      	add	r3, r4
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	4b71      	ldr	r3, [pc, #452]	; (8014994 <tcp_receive+0x88c>)
 80147d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147d6:	4b6f      	ldr	r3, [pc, #444]	; (8014994 <tcp_receive+0x88c>)
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d275      	bcs.n	80148ca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147de:	4b6c      	ldr	r3, [pc, #432]	; (8014990 <tcp_receive+0x888>)
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	899b      	ldrh	r3, [r3, #12]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7fb f914 	bl	800fa14 <lwip_htons>
 80147ec:	4603      	mov	r3, r0
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	f003 0301 	and.w	r3, r3, #1
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d01f      	beq.n	8014838 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80147f8:	4b65      	ldr	r3, [pc, #404]	; (8014990 <tcp_receive+0x888>)
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	899b      	ldrh	r3, [r3, #12]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	b21b      	sxth	r3, r3
 8014802:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014806:	b21c      	sxth	r4, r3
 8014808:	4b61      	ldr	r3, [pc, #388]	; (8014990 <tcp_receive+0x888>)
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	899b      	ldrh	r3, [r3, #12]
 801480e:	b29b      	uxth	r3, r3
 8014810:	4618      	mov	r0, r3
 8014812:	f7fb f8ff 	bl	800fa14 <lwip_htons>
 8014816:	4603      	mov	r3, r0
 8014818:	b2db      	uxtb	r3, r3
 801481a:	b29b      	uxth	r3, r3
 801481c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014820:	b29b      	uxth	r3, r3
 8014822:	4618      	mov	r0, r3
 8014824:	f7fb f8f6 	bl	800fa14 <lwip_htons>
 8014828:	4603      	mov	r3, r0
 801482a:	b21b      	sxth	r3, r3
 801482c:	4323      	orrs	r3, r4
 801482e:	b21a      	sxth	r2, r3
 8014830:	4b57      	ldr	r3, [pc, #348]	; (8014990 <tcp_receive+0x888>)
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	b292      	uxth	r2, r2
 8014836:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801483c:	4b54      	ldr	r3, [pc, #336]	; (8014990 <tcp_receive+0x888>)
 801483e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014840:	4b53      	ldr	r3, [pc, #332]	; (8014990 <tcp_receive+0x888>)
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	899b      	ldrh	r3, [r3, #12]
 8014846:	b29b      	uxth	r3, r3
 8014848:	4618      	mov	r0, r3
 801484a:	f7fb f8e3 	bl	800fa14 <lwip_htons>
 801484e:	4603      	mov	r3, r0
 8014850:	b2db      	uxtb	r3, r3
 8014852:	f003 0302 	and.w	r3, r3, #2
 8014856:	2b00      	cmp	r3, #0
 8014858:	d005      	beq.n	8014866 <tcp_receive+0x75e>
            inseg.len -= 1;
 801485a:	4b4d      	ldr	r3, [pc, #308]	; (8014990 <tcp_receive+0x888>)
 801485c:	891b      	ldrh	r3, [r3, #8]
 801485e:	3b01      	subs	r3, #1
 8014860:	b29a      	uxth	r2, r3
 8014862:	4b4b      	ldr	r3, [pc, #300]	; (8014990 <tcp_receive+0x888>)
 8014864:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014866:	4b4a      	ldr	r3, [pc, #296]	; (8014990 <tcp_receive+0x888>)
 8014868:	685a      	ldr	r2, [r3, #4]
 801486a:	4b49      	ldr	r3, [pc, #292]	; (8014990 <tcp_receive+0x888>)
 801486c:	891b      	ldrh	r3, [r3, #8]
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f7fc f9e1 	bl	8010c38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014876:	4b46      	ldr	r3, [pc, #280]	; (8014990 <tcp_receive+0x888>)
 8014878:	891c      	ldrh	r4, [r3, #8]
 801487a:	4b45      	ldr	r3, [pc, #276]	; (8014990 <tcp_receive+0x888>)
 801487c:	68db      	ldr	r3, [r3, #12]
 801487e:	899b      	ldrh	r3, [r3, #12]
 8014880:	b29b      	uxth	r3, r3
 8014882:	4618      	mov	r0, r3
 8014884:	f7fb f8c6 	bl	800fa14 <lwip_htons>
 8014888:	4603      	mov	r3, r0
 801488a:	b2db      	uxtb	r3, r3
 801488c:	f003 0303 	and.w	r3, r3, #3
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <tcp_receive+0x790>
 8014894:	2301      	movs	r3, #1
 8014896:	e000      	b.n	801489a <tcp_receive+0x792>
 8014898:	2300      	movs	r3, #0
 801489a:	4423      	add	r3, r4
 801489c:	b29a      	uxth	r2, r3
 801489e:	4b3d      	ldr	r3, [pc, #244]	; (8014994 <tcp_receive+0x88c>)
 80148a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80148a2:	4b3c      	ldr	r3, [pc, #240]	; (8014994 <tcp_receive+0x88c>)
 80148a4:	881b      	ldrh	r3, [r3, #0]
 80148a6:	461a      	mov	r2, r3
 80148a8:	4b38      	ldr	r3, [pc, #224]	; (801498c <tcp_receive+0x884>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	441a      	add	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b2:	6879      	ldr	r1, [r7, #4]
 80148b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148b6:	440b      	add	r3, r1
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d006      	beq.n	80148ca <tcp_receive+0x7c2>
 80148bc:	4b36      	ldr	r3, [pc, #216]	; (8014998 <tcp_receive+0x890>)
 80148be:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80148c2:	4936      	ldr	r1, [pc, #216]	; (801499c <tcp_receive+0x894>)
 80148c4:	4836      	ldr	r0, [pc, #216]	; (80149a0 <tcp_receive+0x898>)
 80148c6:	f007 fbc5 	bl	801c054 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	f000 80e7 	beq.w	8014aa2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80148d4:	4b2e      	ldr	r3, [pc, #184]	; (8014990 <tcp_receive+0x888>)
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	899b      	ldrh	r3, [r3, #12]
 80148da:	b29b      	uxth	r3, r3
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fb f899 	bl	800fa14 <lwip_htons>
 80148e2:	4603      	mov	r3, r0
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	f003 0301 	and.w	r3, r3, #1
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d010      	beq.n	8014910 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80148ee:	e00a      	b.n	8014906 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	f7fd fd97 	bl	8012434 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801490a:	2b00      	cmp	r3, #0
 801490c:	d1f0      	bne.n	80148f0 <tcp_receive+0x7e8>
 801490e:	e0c8      	b.n	8014aa2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014914:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014916:	e052      	b.n	80149be <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	899b      	ldrh	r3, [r3, #12]
 801491e:	b29b      	uxth	r3, r3
 8014920:	4618      	mov	r0, r3
 8014922:	f7fb f877 	bl	800fa14 <lwip_htons>
 8014926:	4603      	mov	r3, r0
 8014928:	b2db      	uxtb	r3, r3
 801492a:	f003 0301 	and.w	r3, r3, #1
 801492e:	2b00      	cmp	r3, #0
 8014930:	d03d      	beq.n	80149ae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014932:	4b17      	ldr	r3, [pc, #92]	; (8014990 <tcp_receive+0x888>)
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	899b      	ldrh	r3, [r3, #12]
 8014938:	b29b      	uxth	r3, r3
 801493a:	4618      	mov	r0, r3
 801493c:	f7fb f86a 	bl	800fa14 <lwip_htons>
 8014940:	4603      	mov	r3, r0
 8014942:	b2db      	uxtb	r3, r3
 8014944:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014948:	2b00      	cmp	r3, #0
 801494a:	d130      	bne.n	80149ae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801494c:	4b10      	ldr	r3, [pc, #64]	; (8014990 <tcp_receive+0x888>)
 801494e:	68db      	ldr	r3, [r3, #12]
 8014950:	899b      	ldrh	r3, [r3, #12]
 8014952:	b29c      	uxth	r4, r3
 8014954:	2001      	movs	r0, #1
 8014956:	f7fb f85d 	bl	800fa14 <lwip_htons>
 801495a:	4603      	mov	r3, r0
 801495c:	461a      	mov	r2, r3
 801495e:	4b0c      	ldr	r3, [pc, #48]	; (8014990 <tcp_receive+0x888>)
 8014960:	68db      	ldr	r3, [r3, #12]
 8014962:	4322      	orrs	r2, r4
 8014964:	b292      	uxth	r2, r2
 8014966:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014968:	4b09      	ldr	r3, [pc, #36]	; (8014990 <tcp_receive+0x888>)
 801496a:	891c      	ldrh	r4, [r3, #8]
 801496c:	4b08      	ldr	r3, [pc, #32]	; (8014990 <tcp_receive+0x888>)
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	899b      	ldrh	r3, [r3, #12]
 8014972:	b29b      	uxth	r3, r3
 8014974:	4618      	mov	r0, r3
 8014976:	f7fb f84d 	bl	800fa14 <lwip_htons>
 801497a:	4603      	mov	r3, r0
 801497c:	b2db      	uxtb	r3, r3
 801497e:	f003 0303 	and.w	r3, r3, #3
 8014982:	2b00      	cmp	r3, #0
 8014984:	d00e      	beq.n	80149a4 <tcp_receive+0x89c>
 8014986:	2301      	movs	r3, #1
 8014988:	e00d      	b.n	80149a6 <tcp_receive+0x89e>
 801498a:	bf00      	nop
 801498c:	20001054 	.word	0x20001054
 8014990:	20001034 	.word	0x20001034
 8014994:	2000105e 	.word	0x2000105e
 8014998:	080227dc 	.word	0x080227dc
 801499c:	08022b84 	.word	0x08022b84
 80149a0:	08022828 	.word	0x08022828
 80149a4:	2300      	movs	r3, #0
 80149a6:	4423      	add	r3, r4
 80149a8:	b29a      	uxth	r2, r3
 80149aa:	4b98      	ldr	r3, [pc, #608]	; (8014c0c <tcp_receive+0xb04>)
 80149ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80149ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80149b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80149b8:	6938      	ldr	r0, [r7, #16]
 80149ba:	f7fd fd3b 	bl	8012434 <tcp_seg_free>
            while (next &&
 80149be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00e      	beq.n	80149e2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80149c4:	4b91      	ldr	r3, [pc, #580]	; (8014c0c <tcp_receive+0xb04>)
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	461a      	mov	r2, r3
 80149ca:	4b91      	ldr	r3, [pc, #580]	; (8014c10 <tcp_receive+0xb08>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	441a      	add	r2, r3
 80149d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d2:	68db      	ldr	r3, [r3, #12]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80149d8:	8909      	ldrh	r1, [r1, #8]
 80149da:	440b      	add	r3, r1
 80149dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80149de:	2b00      	cmp	r3, #0
 80149e0:	da9a      	bge.n	8014918 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80149e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d059      	beq.n	8014a9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80149e8:	4b88      	ldr	r3, [pc, #544]	; (8014c0c <tcp_receive+0xb04>)
 80149ea:	881b      	ldrh	r3, [r3, #0]
 80149ec:	461a      	mov	r2, r3
 80149ee:	4b88      	ldr	r3, [pc, #544]	; (8014c10 <tcp_receive+0xb08>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	441a      	add	r2, r3
 80149f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	dd4d      	ble.n	8014a9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	b29a      	uxth	r2, r3
 8014a08:	4b81      	ldr	r3, [pc, #516]	; (8014c10 <tcp_receive+0xb08>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	4b80      	ldr	r3, [pc, #512]	; (8014c14 <tcp_receive+0xb0c>)
 8014a14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014a16:	4b7f      	ldr	r3, [pc, #508]	; (8014c14 <tcp_receive+0xb0c>)
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	899b      	ldrh	r3, [r3, #12]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fa fff8 	bl	800fa14 <lwip_htons>
 8014a24:	4603      	mov	r3, r0
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	f003 0302 	and.w	r3, r3, #2
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d005      	beq.n	8014a3c <tcp_receive+0x934>
                inseg.len -= 1;
 8014a30:	4b78      	ldr	r3, [pc, #480]	; (8014c14 <tcp_receive+0xb0c>)
 8014a32:	891b      	ldrh	r3, [r3, #8]
 8014a34:	3b01      	subs	r3, #1
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	4b76      	ldr	r3, [pc, #472]	; (8014c14 <tcp_receive+0xb0c>)
 8014a3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014a3c:	4b75      	ldr	r3, [pc, #468]	; (8014c14 <tcp_receive+0xb0c>)
 8014a3e:	685a      	ldr	r2, [r3, #4]
 8014a40:	4b74      	ldr	r3, [pc, #464]	; (8014c14 <tcp_receive+0xb0c>)
 8014a42:	891b      	ldrh	r3, [r3, #8]
 8014a44:	4619      	mov	r1, r3
 8014a46:	4610      	mov	r0, r2
 8014a48:	f7fc f8f6 	bl	8010c38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014a4c:	4b71      	ldr	r3, [pc, #452]	; (8014c14 <tcp_receive+0xb0c>)
 8014a4e:	891c      	ldrh	r4, [r3, #8]
 8014a50:	4b70      	ldr	r3, [pc, #448]	; (8014c14 <tcp_receive+0xb0c>)
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	899b      	ldrh	r3, [r3, #12]
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7fa ffdb 	bl	800fa14 <lwip_htons>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	f003 0303 	and.w	r3, r3, #3
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <tcp_receive+0x966>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e000      	b.n	8014a70 <tcp_receive+0x968>
 8014a6e:	2300      	movs	r3, #0
 8014a70:	4423      	add	r3, r4
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	4b65      	ldr	r3, [pc, #404]	; (8014c0c <tcp_receive+0xb04>)
 8014a76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014a78:	4b64      	ldr	r3, [pc, #400]	; (8014c0c <tcp_receive+0xb04>)
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	4b64      	ldr	r3, [pc, #400]	; (8014c10 <tcp_receive+0xb08>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	441a      	add	r2, r3
 8014a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d006      	beq.n	8014a9c <tcp_receive+0x994>
 8014a8e:	4b62      	ldr	r3, [pc, #392]	; (8014c18 <tcp_receive+0xb10>)
 8014a90:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8014a94:	4961      	ldr	r1, [pc, #388]	; (8014c1c <tcp_receive+0xb14>)
 8014a96:	4862      	ldr	r0, [pc, #392]	; (8014c20 <tcp_receive+0xb18>)
 8014a98:	f007 fadc 	bl	801c054 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014aa0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014aa2:	4b5a      	ldr	r3, [pc, #360]	; (8014c0c <tcp_receive+0xb04>)
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	4b59      	ldr	r3, [pc, #356]	; (8014c10 <tcp_receive+0xb08>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	441a      	add	r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ab6:	4b55      	ldr	r3, [pc, #340]	; (8014c0c <tcp_receive+0xb04>)
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d206      	bcs.n	8014acc <tcp_receive+0x9c4>
 8014abe:	4b56      	ldr	r3, [pc, #344]	; (8014c18 <tcp_receive+0xb10>)
 8014ac0:	f240 6207 	movw	r2, #1543	; 0x607
 8014ac4:	4957      	ldr	r1, [pc, #348]	; (8014c24 <tcp_receive+0xb1c>)
 8014ac6:	4856      	ldr	r0, [pc, #344]	; (8014c20 <tcp_receive+0xb18>)
 8014ac8:	f007 fac4 	bl	801c054 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ad0:	4b4e      	ldr	r3, [pc, #312]	; (8014c0c <tcp_receive+0xb04>)
 8014ad2:	881b      	ldrh	r3, [r3, #0]
 8014ad4:	1ad3      	subs	r3, r2, r3
 8014ad6:	b29a      	uxth	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f7fc ffcd 	bl	8011a7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014ae2:	4b4c      	ldr	r3, [pc, #304]	; (8014c14 <tcp_receive+0xb0c>)
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	891b      	ldrh	r3, [r3, #8]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d006      	beq.n	8014afa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014aec:	4b49      	ldr	r3, [pc, #292]	; (8014c14 <tcp_receive+0xb0c>)
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	4a4d      	ldr	r2, [pc, #308]	; (8014c28 <tcp_receive+0xb20>)
 8014af2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014af4:	4b47      	ldr	r3, [pc, #284]	; (8014c14 <tcp_receive+0xb0c>)
 8014af6:	2200      	movs	r2, #0
 8014af8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014afa:	4b46      	ldr	r3, [pc, #280]	; (8014c14 <tcp_receive+0xb0c>)
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	899b      	ldrh	r3, [r3, #12]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa ff86 	bl	800fa14 <lwip_htons>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	f003 0301 	and.w	r3, r3, #1
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	f000 80b8 	beq.w	8014c86 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014b16:	4b45      	ldr	r3, [pc, #276]	; (8014c2c <tcp_receive+0xb24>)
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	f043 0320 	orr.w	r3, r3, #32
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	4b42      	ldr	r3, [pc, #264]	; (8014c2c <tcp_receive+0xb24>)
 8014b22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014b24:	e0af      	b.n	8014c86 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	4a36      	ldr	r2, [pc, #216]	; (8014c10 <tcp_receive+0xb08>)
 8014b36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	891b      	ldrh	r3, [r3, #8]
 8014b3c:	461c      	mov	r4, r3
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	899b      	ldrh	r3, [r3, #12]
 8014b44:	b29b      	uxth	r3, r3
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fa ff64 	bl	800fa14 <lwip_htons>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	f003 0303 	and.w	r3, r3, #3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d001      	beq.n	8014b5c <tcp_receive+0xa54>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e000      	b.n	8014b5e <tcp_receive+0xa56>
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	191a      	adds	r2, r3, r4
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b64:	441a      	add	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b6e:	461c      	mov	r4, r3
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	891b      	ldrh	r3, [r3, #8]
 8014b74:	461d      	mov	r5, r3
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	899b      	ldrh	r3, [r3, #12]
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fa ff48 	bl	800fa14 <lwip_htons>
 8014b84:	4603      	mov	r3, r0
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	f003 0303 	and.w	r3, r3, #3
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d001      	beq.n	8014b94 <tcp_receive+0xa8c>
 8014b90:	2301      	movs	r3, #1
 8014b92:	e000      	b.n	8014b96 <tcp_receive+0xa8e>
 8014b94:	2300      	movs	r3, #0
 8014b96:	442b      	add	r3, r5
 8014b98:	429c      	cmp	r4, r3
 8014b9a:	d206      	bcs.n	8014baa <tcp_receive+0xaa2>
 8014b9c:	4b1e      	ldr	r3, [pc, #120]	; (8014c18 <tcp_receive+0xb10>)
 8014b9e:	f240 622c 	movw	r2, #1580	; 0x62c
 8014ba2:	4923      	ldr	r1, [pc, #140]	; (8014c30 <tcp_receive+0xb28>)
 8014ba4:	481e      	ldr	r0, [pc, #120]	; (8014c20 <tcp_receive+0xb18>)
 8014ba6:	f007 fa55 	bl	801c054 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	891b      	ldrh	r3, [r3, #8]
 8014bae:	461c      	mov	r4, r3
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	899b      	ldrh	r3, [r3, #12]
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7fa ff2b 	bl	800fa14 <lwip_htons>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	f003 0303 	and.w	r3, r3, #3
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <tcp_receive+0xac6>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	e000      	b.n	8014bd0 <tcp_receive+0xac8>
 8014bce:	2300      	movs	r3, #0
 8014bd0:	1919      	adds	r1, r3, r4
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014bd6:	b28b      	uxth	r3, r1
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f7fc ff4b 	bl	8011a7c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	891b      	ldrh	r3, [r3, #8]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d028      	beq.n	8014c42 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014bf0:	4b0d      	ldr	r3, [pc, #52]	; (8014c28 <tcp_receive+0xb20>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d01d      	beq.n	8014c34 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014bf8:	4b0b      	ldr	r3, [pc, #44]	; (8014c28 <tcp_receive+0xb20>)
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	4619      	mov	r1, r3
 8014c02:	4610      	mov	r0, r2
 8014c04:	f7fc fa60 	bl	80110c8 <pbuf_cat>
 8014c08:	e018      	b.n	8014c3c <tcp_receive+0xb34>
 8014c0a:	bf00      	nop
 8014c0c:	2000105e 	.word	0x2000105e
 8014c10:	20001054 	.word	0x20001054
 8014c14:	20001034 	.word	0x20001034
 8014c18:	080227dc 	.word	0x080227dc
 8014c1c:	08022bbc 	.word	0x08022bbc
 8014c20:	08022828 	.word	0x08022828
 8014c24:	08022bf8 	.word	0x08022bf8
 8014c28:	20001064 	.word	0x20001064
 8014c2c:	20001061 	.word	0x20001061
 8014c30:	08022c18 	.word	0x08022c18
            } else {
              recv_data = cseg->p;
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	4a70      	ldr	r2, [pc, #448]	; (8014dfc <tcp_receive+0xcf4>)
 8014c3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	899b      	ldrh	r3, [r3, #12]
 8014c48:	b29b      	uxth	r3, r3
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7fa fee2 	bl	800fa14 <lwip_htons>
 8014c50:	4603      	mov	r3, r0
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	f003 0301 	and.w	r3, r3, #1
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00d      	beq.n	8014c78 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014c5c:	4b68      	ldr	r3, [pc, #416]	; (8014e00 <tcp_receive+0xcf8>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	f043 0320 	orr.w	r3, r3, #32
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	4b66      	ldr	r3, [pc, #408]	; (8014e00 <tcp_receive+0xcf8>)
 8014c68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	7d1b      	ldrb	r3, [r3, #20]
 8014c6e:	2b04      	cmp	r3, #4
 8014c70:	d102      	bne.n	8014c78 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2207      	movs	r2, #7
 8014c76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014c80:	68b8      	ldr	r0, [r7, #8]
 8014c82:	f7fd fbd7 	bl	8012434 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d008      	beq.n	8014ca0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	685a      	ldr	r2, [r3, #4]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	f43f af43 	beq.w	8014b26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	8b5b      	ldrh	r3, [r3, #26]
 8014ca4:	f003 0301 	and.w	r3, r3, #1
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00e      	beq.n	8014cca <tcp_receive+0xbc2>
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	8b5b      	ldrh	r3, [r3, #26]
 8014cb0:	f023 0301 	bic.w	r3, r3, #1
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	835a      	strh	r2, [r3, #26]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	8b5b      	ldrh	r3, [r3, #26]
 8014cbe:	f043 0302 	orr.w	r3, r3, #2
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014cc8:	e188      	b.n	8014fdc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	8b5b      	ldrh	r3, [r3, #26]
 8014cce:	f043 0301 	orr.w	r3, r3, #1
 8014cd2:	b29a      	uxth	r2, r3
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014cd8:	e180      	b.n	8014fdc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d106      	bne.n	8014cf0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014ce2:	4848      	ldr	r0, [pc, #288]	; (8014e04 <tcp_receive+0xcfc>)
 8014ce4:	f7fd fbbe 	bl	8012464 <tcp_seg_copy>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	675a      	str	r2, [r3, #116]	; 0x74
 8014cee:	e16d      	b.n	8014fcc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cfa:	e157      	b.n	8014fac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	4b41      	ldr	r3, [pc, #260]	; (8014e08 <tcp_receive+0xd00>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d11d      	bne.n	8014d46 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014d0a:	4b3e      	ldr	r3, [pc, #248]	; (8014e04 <tcp_receive+0xcfc>)
 8014d0c:	891a      	ldrh	r2, [r3, #8]
 8014d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d10:	891b      	ldrh	r3, [r3, #8]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	f240 814f 	bls.w	8014fb6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d18:	483a      	ldr	r0, [pc, #232]	; (8014e04 <tcp_receive+0xcfc>)
 8014d1a:	f7fd fba3 	bl	8012464 <tcp_seg_copy>
 8014d1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	f000 8149 	beq.w	8014fba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d003      	beq.n	8014d36 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d30:	697a      	ldr	r2, [r7, #20]
 8014d32:	601a      	str	r2, [r3, #0]
 8014d34:	e002      	b.n	8014d3c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	697a      	ldr	r2, [r7, #20]
 8014d3a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d3e:	6978      	ldr	r0, [r7, #20]
 8014d40:	f7ff f8de 	bl	8013f00 <tcp_oos_insert_segment>
                }
                break;
 8014d44:	e139      	b.n	8014fba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d117      	bne.n	8014d7c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014d4c:	4b2e      	ldr	r3, [pc, #184]	; (8014e08 <tcp_receive+0xd00>)
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	da57      	bge.n	8014e0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d5c:	4829      	ldr	r0, [pc, #164]	; (8014e04 <tcp_receive+0xcfc>)
 8014d5e:	f7fd fb81 	bl	8012464 <tcp_seg_copy>
 8014d62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f000 8129 	beq.w	8014fbe <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	69ba      	ldr	r2, [r7, #24]
 8014d70:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d74:	69b8      	ldr	r0, [r7, #24]
 8014d76:	f7ff f8c3 	bl	8013f00 <tcp_oos_insert_segment>
                  }
                  break;
 8014d7a:	e120      	b.n	8014fbe <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014d7c:	4b22      	ldr	r3, [pc, #136]	; (8014e08 <tcp_receive+0xd00>)
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	3b01      	subs	r3, #1
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	db3e      	blt.n	8014e0c <tcp_receive+0xd04>
 8014d8e:	4b1e      	ldr	r3, [pc, #120]	; (8014e08 <tcp_receive+0xd00>)
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d94:	68db      	ldr	r3, [r3, #12]
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	dc35      	bgt.n	8014e0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014da0:	4818      	ldr	r0, [pc, #96]	; (8014e04 <tcp_receive+0xcfc>)
 8014da2:	f7fd fb5f 	bl	8012464 <tcp_seg_copy>
 8014da6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	f000 8109 	beq.w	8014fc2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014db8:	8912      	ldrh	r2, [r2, #8]
 8014dba:	441a      	add	r2, r3
 8014dbc:	4b12      	ldr	r3, [pc, #72]	; (8014e08 <tcp_receive+0xd00>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	dd12      	ble.n	8014dec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014dc6:	4b10      	ldr	r3, [pc, #64]	; (8014e08 <tcp_receive+0xd00>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dde:	685a      	ldr	r2, [r3, #4]
 8014de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de2:	891b      	ldrh	r3, [r3, #8]
 8014de4:	4619      	mov	r1, r3
 8014de6:	4610      	mov	r0, r2
 8014de8:	f7fb ff26 	bl	8010c38 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dee:	69fa      	ldr	r2, [r7, #28]
 8014df0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014df4:	69f8      	ldr	r0, [r7, #28]
 8014df6:	f7ff f883 	bl	8013f00 <tcp_oos_insert_segment>
                  }
                  break;
 8014dfa:	e0e2      	b.n	8014fc2 <tcp_receive+0xeba>
 8014dfc:	20001064 	.word	0x20001064
 8014e00:	20001061 	.word	0x20001061
 8014e04:	20001034 	.word	0x20001034
 8014e08:	20001054 	.word	0x20001054
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	f040 80c6 	bne.w	8014fa6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014e1a:	4b80      	ldr	r3, [pc, #512]	; (801501c <tcp_receive+0xf14>)
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	f340 80bd 	ble.w	8014fa6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	899b      	ldrh	r3, [r3, #12]
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7fa fded 	bl	800fa14 <lwip_htons>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	f003 0301 	and.w	r3, r3, #1
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f040 80bf 	bne.w	8014fc6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014e48:	4875      	ldr	r0, [pc, #468]	; (8015020 <tcp_receive+0xf18>)
 8014e4a:	f7fd fb0b 	bl	8012464 <tcp_seg_copy>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e52:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	f000 80b6 	beq.w	8014fca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e66:	8912      	ldrh	r2, [r2, #8]
 8014e68:	441a      	add	r2, r3
 8014e6a:	4b6c      	ldr	r3, [pc, #432]	; (801501c <tcp_receive+0xf14>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	1ad3      	subs	r3, r2, r3
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	dd12      	ble.n	8014e9a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014e74:	4b69      	ldr	r3, [pc, #420]	; (801501c <tcp_receive+0xf14>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	b29a      	uxth	r2, r3
 8014e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7c:	68db      	ldr	r3, [r3, #12]
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	1ad3      	subs	r3, r2, r3
 8014e84:	b29a      	uxth	r2, r3
 8014e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e88:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e8c:	685a      	ldr	r2, [r3, #4]
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e90:	891b      	ldrh	r3, [r3, #8]
 8014e92:	4619      	mov	r1, r3
 8014e94:	4610      	mov	r0, r2
 8014e96:	f7fb fecf 	bl	8010c38 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014e9a:	4b62      	ldr	r3, [pc, #392]	; (8015024 <tcp_receive+0xf1c>)
 8014e9c:	881b      	ldrh	r3, [r3, #0]
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	4b5e      	ldr	r3, [pc, #376]	; (801501c <tcp_receive+0xf14>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	441a      	add	r2, r3
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eaa:	6879      	ldr	r1, [r7, #4]
 8014eac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014eae:	440b      	add	r3, r1
 8014eb0:	1ad3      	subs	r3, r2, r3
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f340 8089 	ble.w	8014fca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	68db      	ldr	r3, [r3, #12]
 8014ebe:	899b      	ldrh	r3, [r3, #12]
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fa fda6 	bl	800fa14 <lwip_htons>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	f003 0301 	and.w	r3, r3, #1
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d022      	beq.n	8014f1a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	899b      	ldrh	r3, [r3, #12]
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	b21b      	sxth	r3, r3
 8014ee0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ee4:	b21c      	sxth	r4, r3
 8014ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	899b      	ldrh	r3, [r3, #12]
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fa fd8f 	bl	800fa14 <lwip_htons>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fa fd86 	bl	800fa14 <lwip_htons>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	b21b      	sxth	r3, r3
 8014f0c:	4323      	orrs	r3, r4
 8014f0e:	b21a      	sxth	r2, r3
 8014f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	b292      	uxth	r2, r2
 8014f18:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f24:	4413      	add	r3, r2
 8014f26:	b299      	uxth	r1, r3
 8014f28:	4b3c      	ldr	r3, [pc, #240]	; (801501c <tcp_receive+0xf14>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	1a8a      	subs	r2, r1, r2
 8014f34:	b292      	uxth	r2, r2
 8014f36:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	685a      	ldr	r2, [r3, #4]
 8014f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	891b      	ldrh	r3, [r3, #8]
 8014f44:	4619      	mov	r1, r3
 8014f46:	4610      	mov	r0, r2
 8014f48:	f7fb fe76 	bl	8010c38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	891c      	ldrh	r4, [r3, #8]
 8014f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	899b      	ldrh	r3, [r3, #12]
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fa fd59 	bl	800fa14 <lwip_htons>
 8014f62:	4603      	mov	r3, r0
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	f003 0303 	and.w	r3, r3, #3
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d001      	beq.n	8014f72 <tcp_receive+0xe6a>
 8014f6e:	2301      	movs	r3, #1
 8014f70:	e000      	b.n	8014f74 <tcp_receive+0xe6c>
 8014f72:	2300      	movs	r3, #0
 8014f74:	4423      	add	r3, r4
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	4b2a      	ldr	r3, [pc, #168]	; (8015024 <tcp_receive+0xf1c>)
 8014f7a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014f7c:	4b29      	ldr	r3, [pc, #164]	; (8015024 <tcp_receive+0xf1c>)
 8014f7e:	881b      	ldrh	r3, [r3, #0]
 8014f80:	461a      	mov	r2, r3
 8014f82:	4b26      	ldr	r3, [pc, #152]	; (801501c <tcp_receive+0xf14>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	441a      	add	r2, r3
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f8c:	6879      	ldr	r1, [r7, #4]
 8014f8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f90:	440b      	add	r3, r1
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d019      	beq.n	8014fca <tcp_receive+0xec2>
 8014f96:	4b24      	ldr	r3, [pc, #144]	; (8015028 <tcp_receive+0xf20>)
 8014f98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014f9c:	4923      	ldr	r1, [pc, #140]	; (801502c <tcp_receive+0xf24>)
 8014f9e:	4824      	ldr	r0, [pc, #144]	; (8015030 <tcp_receive+0xf28>)
 8014fa0:	f007 f858 	bl	801c054 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014fa4:	e011      	b.n	8014fca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8014fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f47f aea4 	bne.w	8014cfc <tcp_receive+0xbf4>
 8014fb4:	e00a      	b.n	8014fcc <tcp_receive+0xec4>
                break;
 8014fb6:	bf00      	nop
 8014fb8:	e008      	b.n	8014fcc <tcp_receive+0xec4>
                break;
 8014fba:	bf00      	nop
 8014fbc:	e006      	b.n	8014fcc <tcp_receive+0xec4>
                  break;
 8014fbe:	bf00      	nop
 8014fc0:	e004      	b.n	8014fcc <tcp_receive+0xec4>
                  break;
 8014fc2:	bf00      	nop
 8014fc4:	e002      	b.n	8014fcc <tcp_receive+0xec4>
                  break;
 8014fc6:	bf00      	nop
 8014fc8:	e000      	b.n	8014fcc <tcp_receive+0xec4>
                break;
 8014fca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f001 fa3f 	bl	8016450 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014fd2:	e003      	b.n	8014fdc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f001 fa3b 	bl	8016450 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014fda:	e01a      	b.n	8015012 <tcp_receive+0xf0a>
 8014fdc:	e019      	b.n	8015012 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014fde:	4b0f      	ldr	r3, [pc, #60]	; (801501c <tcp_receive+0xf14>)
 8014fe0:	681a      	ldr	r2, [r3, #0]
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe6:	1ad3      	subs	r3, r2, r3
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	db0a      	blt.n	8015002 <tcp_receive+0xefa>
 8014fec:	4b0b      	ldr	r3, [pc, #44]	; (801501c <tcp_receive+0xf14>)
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff4:	6879      	ldr	r1, [r7, #4]
 8014ff6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ff8:	440b      	add	r3, r1
 8014ffa:	1ad3      	subs	r3, r2, r3
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	dd07      	ble.n	8015012 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	8b5b      	ldrh	r3, [r3, #26]
 8015006:	f043 0302 	orr.w	r3, r3, #2
 801500a:	b29a      	uxth	r2, r3
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015010:	e7ff      	b.n	8015012 <tcp_receive+0xf0a>
 8015012:	bf00      	nop
 8015014:	3750      	adds	r7, #80	; 0x50
 8015016:	46bd      	mov	sp, r7
 8015018:	bdb0      	pop	{r4, r5, r7, pc}
 801501a:	bf00      	nop
 801501c:	20001054 	.word	0x20001054
 8015020:	20001034 	.word	0x20001034
 8015024:	2000105e 	.word	0x2000105e
 8015028:	080227dc 	.word	0x080227dc
 801502c:	08022b84 	.word	0x08022b84
 8015030:	08022828 	.word	0x08022828

08015034 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801503a:	4b15      	ldr	r3, [pc, #84]	; (8015090 <tcp_get_next_optbyte+0x5c>)
 801503c:	881b      	ldrh	r3, [r3, #0]
 801503e:	1c5a      	adds	r2, r3, #1
 8015040:	b291      	uxth	r1, r2
 8015042:	4a13      	ldr	r2, [pc, #76]	; (8015090 <tcp_get_next_optbyte+0x5c>)
 8015044:	8011      	strh	r1, [r2, #0]
 8015046:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015048:	4b12      	ldr	r3, [pc, #72]	; (8015094 <tcp_get_next_optbyte+0x60>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d004      	beq.n	801505a <tcp_get_next_optbyte+0x26>
 8015050:	4b11      	ldr	r3, [pc, #68]	; (8015098 <tcp_get_next_optbyte+0x64>)
 8015052:	881b      	ldrh	r3, [r3, #0]
 8015054:	88fa      	ldrh	r2, [r7, #6]
 8015056:	429a      	cmp	r2, r3
 8015058:	d208      	bcs.n	801506c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801505a:	4b10      	ldr	r3, [pc, #64]	; (801509c <tcp_get_next_optbyte+0x68>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	3314      	adds	r3, #20
 8015060:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015062:	88fb      	ldrh	r3, [r7, #6]
 8015064:	683a      	ldr	r2, [r7, #0]
 8015066:	4413      	add	r3, r2
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	e00b      	b.n	8015084 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801506c:	88fb      	ldrh	r3, [r7, #6]
 801506e:	b2da      	uxtb	r2, r3
 8015070:	4b09      	ldr	r3, [pc, #36]	; (8015098 <tcp_get_next_optbyte+0x64>)
 8015072:	881b      	ldrh	r3, [r3, #0]
 8015074:	b2db      	uxtb	r3, r3
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801507a:	4b06      	ldr	r3, [pc, #24]	; (8015094 <tcp_get_next_optbyte+0x60>)
 801507c:	681a      	ldr	r2, [r3, #0]
 801507e:	797b      	ldrb	r3, [r7, #5]
 8015080:	4413      	add	r3, r2
 8015082:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr
 8015090:	20001050 	.word	0x20001050
 8015094:	2000104c 	.word	0x2000104c
 8015098:	2000104a 	.word	0x2000104a
 801509c:	20001044 	.word	0x20001044

080150a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d106      	bne.n	80150bc <tcp_parseopt+0x1c>
 80150ae:	4b31      	ldr	r3, [pc, #196]	; (8015174 <tcp_parseopt+0xd4>)
 80150b0:	f240 727d 	movw	r2, #1917	; 0x77d
 80150b4:	4930      	ldr	r1, [pc, #192]	; (8015178 <tcp_parseopt+0xd8>)
 80150b6:	4831      	ldr	r0, [pc, #196]	; (801517c <tcp_parseopt+0xdc>)
 80150b8:	f006 ffcc 	bl	801c054 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80150bc:	4b30      	ldr	r3, [pc, #192]	; (8015180 <tcp_parseopt+0xe0>)
 80150be:	881b      	ldrh	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d053      	beq.n	801516c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80150c4:	4b2f      	ldr	r3, [pc, #188]	; (8015184 <tcp_parseopt+0xe4>)
 80150c6:	2200      	movs	r2, #0
 80150c8:	801a      	strh	r2, [r3, #0]
 80150ca:	e043      	b.n	8015154 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80150cc:	f7ff ffb2 	bl	8015034 <tcp_get_next_optbyte>
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d03c      	beq.n	8015154 <tcp_parseopt+0xb4>
 80150da:	2b02      	cmp	r3, #2
 80150dc:	d002      	beq.n	80150e4 <tcp_parseopt+0x44>
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d03f      	beq.n	8015162 <tcp_parseopt+0xc2>
 80150e2:	e026      	b.n	8015132 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80150e4:	f7ff ffa6 	bl	8015034 <tcp_get_next_optbyte>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b04      	cmp	r3, #4
 80150ec:	d13b      	bne.n	8015166 <tcp_parseopt+0xc6>
 80150ee:	4b25      	ldr	r3, [pc, #148]	; (8015184 <tcp_parseopt+0xe4>)
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	3302      	adds	r3, #2
 80150f4:	4a22      	ldr	r2, [pc, #136]	; (8015180 <tcp_parseopt+0xe0>)
 80150f6:	8812      	ldrh	r2, [r2, #0]
 80150f8:	4293      	cmp	r3, r2
 80150fa:	dc34      	bgt.n	8015166 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80150fc:	f7ff ff9a 	bl	8015034 <tcp_get_next_optbyte>
 8015100:	4603      	mov	r3, r0
 8015102:	b29b      	uxth	r3, r3
 8015104:	021b      	lsls	r3, r3, #8
 8015106:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015108:	f7ff ff94 	bl	8015034 <tcp_get_next_optbyte>
 801510c:	4603      	mov	r3, r0
 801510e:	b29a      	uxth	r2, r3
 8015110:	89bb      	ldrh	r3, [r7, #12]
 8015112:	4313      	orrs	r3, r2
 8015114:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015116:	89bb      	ldrh	r3, [r7, #12]
 8015118:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 801511c:	d804      	bhi.n	8015128 <tcp_parseopt+0x88>
 801511e:	89bb      	ldrh	r3, [r7, #12]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d001      	beq.n	8015128 <tcp_parseopt+0x88>
 8015124:	89ba      	ldrh	r2, [r7, #12]
 8015126:	e001      	b.n	801512c <tcp_parseopt+0x8c>
 8015128:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015130:	e010      	b.n	8015154 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015132:	f7ff ff7f 	bl	8015034 <tcp_get_next_optbyte>
 8015136:	4603      	mov	r3, r0
 8015138:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801513a:	7afb      	ldrb	r3, [r7, #11]
 801513c:	2b01      	cmp	r3, #1
 801513e:	d914      	bls.n	801516a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015140:	7afb      	ldrb	r3, [r7, #11]
 8015142:	b29a      	uxth	r2, r3
 8015144:	4b0f      	ldr	r3, [pc, #60]	; (8015184 <tcp_parseopt+0xe4>)
 8015146:	881b      	ldrh	r3, [r3, #0]
 8015148:	4413      	add	r3, r2
 801514a:	b29b      	uxth	r3, r3
 801514c:	3b02      	subs	r3, #2
 801514e:	b29a      	uxth	r2, r3
 8015150:	4b0c      	ldr	r3, [pc, #48]	; (8015184 <tcp_parseopt+0xe4>)
 8015152:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015154:	4b0b      	ldr	r3, [pc, #44]	; (8015184 <tcp_parseopt+0xe4>)
 8015156:	881a      	ldrh	r2, [r3, #0]
 8015158:	4b09      	ldr	r3, [pc, #36]	; (8015180 <tcp_parseopt+0xe0>)
 801515a:	881b      	ldrh	r3, [r3, #0]
 801515c:	429a      	cmp	r2, r3
 801515e:	d3b5      	bcc.n	80150cc <tcp_parseopt+0x2c>
 8015160:	e004      	b.n	801516c <tcp_parseopt+0xcc>
          return;
 8015162:	bf00      	nop
 8015164:	e002      	b.n	801516c <tcp_parseopt+0xcc>
            return;
 8015166:	bf00      	nop
 8015168:	e000      	b.n	801516c <tcp_parseopt+0xcc>
            return;
 801516a:	bf00      	nop
      }
    }
  }
}
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	080227dc 	.word	0x080227dc
 8015178:	08022c40 	.word	0x08022c40
 801517c:	08022828 	.word	0x08022828
 8015180:	20001048 	.word	0x20001048
 8015184:	20001050 	.word	0x20001050

08015188 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015188:	b480      	push	{r7}
 801518a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801518c:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <tcp_trigger_input_pcb_close+0x1c>)
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	f043 0310 	orr.w	r3, r3, #16
 8015194:	b2da      	uxtb	r2, r3
 8015196:	4b03      	ldr	r3, [pc, #12]	; (80151a4 <tcp_trigger_input_pcb_close+0x1c>)
 8015198:	701a      	strb	r2, [r3, #0]
}
 801519a:	bf00      	nop
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr
 80151a4:	20001061 	.word	0x20001061

080151a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d00a      	beq.n	80151d0 <tcp_route+0x28>
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	7a1b      	ldrb	r3, [r3, #8]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d006      	beq.n	80151d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	7a1b      	ldrb	r3, [r3, #8]
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fb fb80 	bl	80108cc <netif_get_by_index>
 80151cc:	4603      	mov	r3, r0
 80151ce:	e003      	b.n	80151d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f004 ffa1 	bl	801a118 <ip4_route>
 80151d6:	4603      	mov	r3, r0
  }
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80151e0:	b590      	push	{r4, r7, lr}
 80151e2:	b087      	sub	sp, #28
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	603b      	str	r3, [r7, #0]
 80151ec:	4613      	mov	r3, r2
 80151ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d105      	bne.n	8015202 <tcp_create_segment+0x22>
 80151f6:	4b44      	ldr	r3, [pc, #272]	; (8015308 <tcp_create_segment+0x128>)
 80151f8:	22a3      	movs	r2, #163	; 0xa3
 80151fa:	4944      	ldr	r1, [pc, #272]	; (801530c <tcp_create_segment+0x12c>)
 80151fc:	4844      	ldr	r0, [pc, #272]	; (8015310 <tcp_create_segment+0x130>)
 80151fe:	f006 ff29 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d105      	bne.n	8015214 <tcp_create_segment+0x34>
 8015208:	4b3f      	ldr	r3, [pc, #252]	; (8015308 <tcp_create_segment+0x128>)
 801520a:	22a4      	movs	r2, #164	; 0xa4
 801520c:	4941      	ldr	r1, [pc, #260]	; (8015314 <tcp_create_segment+0x134>)
 801520e:	4840      	ldr	r0, [pc, #256]	; (8015310 <tcp_create_segment+0x130>)
 8015210:	f006 ff20 	bl	801c054 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	b2db      	uxtb	r3, r3
 801521c:	f003 0304 	and.w	r3, r3, #4
 8015220:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015222:	2003      	movs	r0, #3
 8015224:	f7fb f84c 	bl	80102c0 <memp_malloc>
 8015228:	6138      	str	r0, [r7, #16]
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d104      	bne.n	801523a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015230:	68b8      	ldr	r0, [r7, #8]
 8015232:	f7fb fe87 	bl	8010f44 <pbuf_free>
    return NULL;
 8015236:	2300      	movs	r3, #0
 8015238:	e061      	b.n	80152fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015240:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	2200      	movs	r2, #0
 8015246:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	891a      	ldrh	r2, [r3, #8]
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	b29b      	uxth	r3, r3
 8015256:	429a      	cmp	r2, r3
 8015258:	d205      	bcs.n	8015266 <tcp_create_segment+0x86>
 801525a:	4b2b      	ldr	r3, [pc, #172]	; (8015308 <tcp_create_segment+0x128>)
 801525c:	22b0      	movs	r2, #176	; 0xb0
 801525e:	492e      	ldr	r1, [pc, #184]	; (8015318 <tcp_create_segment+0x138>)
 8015260:	482b      	ldr	r0, [pc, #172]	; (8015310 <tcp_create_segment+0x130>)
 8015262:	f006 fef7 	bl	801c054 <iprintf>
  seg->len = p->tot_len - optlen;
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	891a      	ldrh	r2, [r3, #8]
 801526a:	7dfb      	ldrb	r3, [r7, #23]
 801526c:	b29b      	uxth	r3, r3
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	b29a      	uxth	r2, r3
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015276:	2114      	movs	r1, #20
 8015278:	68b8      	ldr	r0, [r7, #8]
 801527a:	f7fb fdcd 	bl	8010e18 <pbuf_add_header>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d004      	beq.n	801528e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015284:	6938      	ldr	r0, [r7, #16]
 8015286:	f7fd f8d5 	bl	8012434 <tcp_seg_free>
    return NULL;
 801528a:	2300      	movs	r3, #0
 801528c:	e037      	b.n	80152fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	685a      	ldr	r2, [r3, #4]
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	8ada      	ldrh	r2, [r3, #22]
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	68dc      	ldr	r4, [r3, #12]
 80152a0:	4610      	mov	r0, r2
 80152a2:	f7fa fbb7 	bl	800fa14 <lwip_htons>
 80152a6:	4603      	mov	r3, r0
 80152a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	8b1a      	ldrh	r2, [r3, #24]
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	68dc      	ldr	r4, [r3, #12]
 80152b2:	4610      	mov	r0, r2
 80152b4:	f7fa fbae 	bl	800fa14 <lwip_htons>
 80152b8:	4603      	mov	r3, r0
 80152ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	68dc      	ldr	r4, [r3, #12]
 80152c0:	6838      	ldr	r0, [r7, #0]
 80152c2:	f7fa fbbc 	bl	800fa3e <lwip_htonl>
 80152c6:	4603      	mov	r3, r0
 80152c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80152ca:	7dfb      	ldrb	r3, [r7, #23]
 80152cc:	089b      	lsrs	r3, r3, #2
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	3305      	adds	r3, #5
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	031b      	lsls	r3, r3, #12
 80152d8:	b29a      	uxth	r2, r3
 80152da:	79fb      	ldrb	r3, [r7, #7]
 80152dc:	b29b      	uxth	r3, r3
 80152de:	4313      	orrs	r3, r2
 80152e0:	b29a      	uxth	r2, r3
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	68dc      	ldr	r4, [r3, #12]
 80152e6:	4610      	mov	r0, r2
 80152e8:	f7fa fb94 	bl	800fa14 <lwip_htons>
 80152ec:	4603      	mov	r3, r0
 80152ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	2200      	movs	r2, #0
 80152f6:	749a      	strb	r2, [r3, #18]
 80152f8:	2200      	movs	r2, #0
 80152fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80152fc:	693b      	ldr	r3, [r7, #16]
}
 80152fe:	4618      	mov	r0, r3
 8015300:	371c      	adds	r7, #28
 8015302:	46bd      	mov	sp, r7
 8015304:	bd90      	pop	{r4, r7, pc}
 8015306:	bf00      	nop
 8015308:	08022c5c 	.word	0x08022c5c
 801530c:	08022c90 	.word	0x08022c90
 8015310:	08022cb0 	.word	0x08022cb0
 8015314:	08022cd8 	.word	0x08022cd8
 8015318:	08022cfc 	.word	0x08022cfc

0801531c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801531c:	b590      	push	{r4, r7, lr}
 801531e:	b08b      	sub	sp, #44	; 0x2c
 8015320:	af02      	add	r7, sp, #8
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	460b      	mov	r3, r1
 8015326:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015328:	2300      	movs	r3, #0
 801532a:	61fb      	str	r3, [r7, #28]
 801532c:	2300      	movs	r3, #0
 801532e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015330:	2300      	movs	r3, #0
 8015332:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d106      	bne.n	8015348 <tcp_split_unsent_seg+0x2c>
 801533a:	4b95      	ldr	r3, [pc, #596]	; (8015590 <tcp_split_unsent_seg+0x274>)
 801533c:	f240 324b 	movw	r2, #843	; 0x34b
 8015340:	4994      	ldr	r1, [pc, #592]	; (8015594 <tcp_split_unsent_seg+0x278>)
 8015342:	4895      	ldr	r0, [pc, #596]	; (8015598 <tcp_split_unsent_seg+0x27c>)
 8015344:	f006 fe86 	bl	801c054 <iprintf>

  useg = pcb->unsent;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801534c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d102      	bne.n	801535a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015354:	f04f 33ff 	mov.w	r3, #4294967295
 8015358:	e116      	b.n	8015588 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801535a:	887b      	ldrh	r3, [r7, #2]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d109      	bne.n	8015374 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015360:	4b8b      	ldr	r3, [pc, #556]	; (8015590 <tcp_split_unsent_seg+0x274>)
 8015362:	f240 3253 	movw	r2, #851	; 0x353
 8015366:	498d      	ldr	r1, [pc, #564]	; (801559c <tcp_split_unsent_seg+0x280>)
 8015368:	488b      	ldr	r0, [pc, #556]	; (8015598 <tcp_split_unsent_seg+0x27c>)
 801536a:	f006 fe73 	bl	801c054 <iprintf>
    return ERR_VAL;
 801536e:	f06f 0305 	mvn.w	r3, #5
 8015372:	e109      	b.n	8015588 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	891b      	ldrh	r3, [r3, #8]
 8015378:	887a      	ldrh	r2, [r7, #2]
 801537a:	429a      	cmp	r2, r3
 801537c:	d301      	bcc.n	8015382 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801537e:	2300      	movs	r3, #0
 8015380:	e102      	b.n	8015588 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015386:	887a      	ldrh	r2, [r7, #2]
 8015388:	429a      	cmp	r2, r3
 801538a:	d906      	bls.n	801539a <tcp_split_unsent_seg+0x7e>
 801538c:	4b80      	ldr	r3, [pc, #512]	; (8015590 <tcp_split_unsent_seg+0x274>)
 801538e:	f240 325b 	movw	r2, #859	; 0x35b
 8015392:	4983      	ldr	r1, [pc, #524]	; (80155a0 <tcp_split_unsent_seg+0x284>)
 8015394:	4880      	ldr	r0, [pc, #512]	; (8015598 <tcp_split_unsent_seg+0x27c>)
 8015396:	f006 fe5d 	bl	801c054 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	891b      	ldrh	r3, [r3, #8]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <tcp_split_unsent_seg+0x94>
 80153a2:	4b7b      	ldr	r3, [pc, #492]	; (8015590 <tcp_split_unsent_seg+0x274>)
 80153a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80153a8:	497e      	ldr	r1, [pc, #504]	; (80155a4 <tcp_split_unsent_seg+0x288>)
 80153aa:	487b      	ldr	r0, [pc, #492]	; (8015598 <tcp_split_unsent_seg+0x27c>)
 80153ac:	f006 fe52 	bl	801c054 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	7a9b      	ldrb	r3, [r3, #10]
 80153b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80153b6:	7bfb      	ldrb	r3, [r7, #15]
 80153b8:	009b      	lsls	r3, r3, #2
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	f003 0304 	and.w	r3, r3, #4
 80153c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	891a      	ldrh	r2, [r3, #8]
 80153c6:	887b      	ldrh	r3, [r7, #2]
 80153c8:	1ad3      	subs	r3, r2, r3
 80153ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80153cc:	7bbb      	ldrb	r3, [r7, #14]
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	89bb      	ldrh	r3, [r7, #12]
 80153d2:	4413      	add	r3, r2
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153da:	4619      	mov	r1, r3
 80153dc:	2036      	movs	r0, #54	; 0x36
 80153de:	f7fb fad1 	bl	8010984 <pbuf_alloc>
 80153e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f000 80b7 	beq.w	801555a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	891a      	ldrh	r2, [r3, #8]
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	891b      	ldrh	r3, [r3, #8]
 80153f6:	1ad3      	subs	r3, r2, r3
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	887b      	ldrh	r3, [r7, #2]
 80153fc:	4413      	add	r3, r2
 80153fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	6858      	ldr	r0, [r3, #4]
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	685a      	ldr	r2, [r3, #4]
 8015408:	7bbb      	ldrb	r3, [r7, #14]
 801540a:	18d1      	adds	r1, r2, r3
 801540c:	897b      	ldrh	r3, [r7, #10]
 801540e:	89ba      	ldrh	r2, [r7, #12]
 8015410:	f7fb ff92 	bl	8011338 <pbuf_copy_partial>
 8015414:	4603      	mov	r3, r0
 8015416:	461a      	mov	r2, r3
 8015418:	89bb      	ldrh	r3, [r7, #12]
 801541a:	4293      	cmp	r3, r2
 801541c:	f040 809f 	bne.w	801555e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	68db      	ldr	r3, [r3, #12]
 8015424:	899b      	ldrh	r3, [r3, #12]
 8015426:	b29b      	uxth	r3, r3
 8015428:	4618      	mov	r0, r3
 801542a:	f7fa faf3 	bl	800fa14 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	b2db      	uxtb	r3, r3
 8015432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015436:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015438:	2300      	movs	r3, #0
 801543a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801543c:	7efb      	ldrb	r3, [r7, #27]
 801543e:	f003 0308 	and.w	r3, r3, #8
 8015442:	2b00      	cmp	r3, #0
 8015444:	d007      	beq.n	8015456 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015446:	7efb      	ldrb	r3, [r7, #27]
 8015448:	f023 0308 	bic.w	r3, r3, #8
 801544c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801544e:	7ebb      	ldrb	r3, [r7, #26]
 8015450:	f043 0308 	orr.w	r3, r3, #8
 8015454:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015456:	7efb      	ldrb	r3, [r7, #27]
 8015458:	f003 0301 	and.w	r3, r3, #1
 801545c:	2b00      	cmp	r3, #0
 801545e:	d007      	beq.n	8015470 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015460:	7efb      	ldrb	r3, [r7, #27]
 8015462:	f023 0301 	bic.w	r3, r3, #1
 8015466:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015468:	7ebb      	ldrb	r3, [r7, #26]
 801546a:	f043 0301 	orr.w	r3, r3, #1
 801546e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	4618      	mov	r0, r3
 8015478:	f7fa fae1 	bl	800fa3e <lwip_htonl>
 801547c:	4602      	mov	r2, r0
 801547e:	887b      	ldrh	r3, [r7, #2]
 8015480:	18d1      	adds	r1, r2, r3
 8015482:	7eba      	ldrb	r2, [r7, #26]
 8015484:	7bfb      	ldrb	r3, [r7, #15]
 8015486:	9300      	str	r3, [sp, #0]
 8015488:	460b      	mov	r3, r1
 801548a:	6939      	ldr	r1, [r7, #16]
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7ff fea7 	bl	80151e0 <tcp_create_segment>
 8015492:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d063      	beq.n	8015562 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fb fdd8 	bl	8011054 <pbuf_clen>
 80154a4:	4603      	mov	r3, r0
 80154a6:	461a      	mov	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154ae:	1a9b      	subs	r3, r3, r2
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	6858      	ldr	r0, [r3, #4]
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	891a      	ldrh	r2, [r3, #8]
 80154c2:	89bb      	ldrh	r3, [r7, #12]
 80154c4:	1ad3      	subs	r3, r2, r3
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	4619      	mov	r1, r3
 80154ca:	f7fb fbb5 	bl	8010c38 <pbuf_realloc>
  useg->len -= remainder;
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	891a      	ldrh	r2, [r3, #8]
 80154d2:	89bb      	ldrh	r3, [r7, #12]
 80154d4:	1ad3      	subs	r3, r2, r3
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	899b      	ldrh	r3, [r3, #12]
 80154e2:	b29c      	uxth	r4, r3
 80154e4:	7efb      	ldrb	r3, [r7, #27]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7fa fa93 	bl	800fa14 <lwip_htons>
 80154ee:	4603      	mov	r3, r0
 80154f0:	461a      	mov	r2, r3
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	68db      	ldr	r3, [r3, #12]
 80154f6:	4322      	orrs	r2, r4
 80154f8:	b292      	uxth	r2, r2
 80154fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	4618      	mov	r0, r3
 8015502:	f7fb fda7 	bl	8011054 <pbuf_clen>
 8015506:	4603      	mov	r3, r0
 8015508:	461a      	mov	r2, r3
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015510:	4413      	add	r3, r2
 8015512:	b29a      	uxth	r2, r3
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	4618      	mov	r0, r3
 8015520:	f7fb fd98 	bl	8011054 <pbuf_clen>
 8015524:	4603      	mov	r3, r0
 8015526:	461a      	mov	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801552e:	4413      	add	r3, r2
 8015530:	b29a      	uxth	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	69fa      	ldr	r2, [r7, #28]
 8015544:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d103      	bne.n	8015556 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2200      	movs	r2, #0
 8015552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015556:	2300      	movs	r3, #0
 8015558:	e016      	b.n	8015588 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801555a:	bf00      	nop
 801555c:	e002      	b.n	8015564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801555e:	bf00      	nop
 8015560:	e000      	b.n	8015564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015562:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d006      	beq.n	8015578 <tcp_split_unsent_seg+0x25c>
 801556a:	4b09      	ldr	r3, [pc, #36]	; (8015590 <tcp_split_unsent_seg+0x274>)
 801556c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015570:	490d      	ldr	r1, [pc, #52]	; (80155a8 <tcp_split_unsent_seg+0x28c>)
 8015572:	4809      	ldr	r0, [pc, #36]	; (8015598 <tcp_split_unsent_seg+0x27c>)
 8015574:	f006 fd6e 	bl	801c054 <iprintf>
  if (p != NULL) {
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d002      	beq.n	8015584 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801557e:	6938      	ldr	r0, [r7, #16]
 8015580:	f7fb fce0 	bl	8010f44 <pbuf_free>
  }

  return ERR_MEM;
 8015584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015588:	4618      	mov	r0, r3
 801558a:	3724      	adds	r7, #36	; 0x24
 801558c:	46bd      	mov	sp, r7
 801558e:	bd90      	pop	{r4, r7, pc}
 8015590:	08022c5c 	.word	0x08022c5c
 8015594:	08022ff0 	.word	0x08022ff0
 8015598:	08022cb0 	.word	0x08022cb0
 801559c:	08023014 	.word	0x08023014
 80155a0:	08023038 	.word	0x08023038
 80155a4:	08023048 	.word	0x08023048
 80155a8:	08023058 	.word	0x08023058

080155ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80155ac:	b590      	push	{r4, r7, lr}
 80155ae:	b085      	sub	sp, #20
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d106      	bne.n	80155c8 <tcp_send_fin+0x1c>
 80155ba:	4b21      	ldr	r3, [pc, #132]	; (8015640 <tcp_send_fin+0x94>)
 80155bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80155c0:	4920      	ldr	r1, [pc, #128]	; (8015644 <tcp_send_fin+0x98>)
 80155c2:	4821      	ldr	r0, [pc, #132]	; (8015648 <tcp_send_fin+0x9c>)
 80155c4:	f006 fd46 	bl	801c054 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d02e      	beq.n	801562e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155d4:	60fb      	str	r3, [r7, #12]
 80155d6:	e002      	b.n	80155de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d1f8      	bne.n	80155d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	899b      	ldrh	r3, [r3, #12]
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fa fa10 	bl	800fa14 <lwip_htons>
 80155f4:	4603      	mov	r3, r0
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	f003 0307 	and.w	r3, r3, #7
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d116      	bne.n	801562e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	68db      	ldr	r3, [r3, #12]
 8015604:	899b      	ldrh	r3, [r3, #12]
 8015606:	b29c      	uxth	r4, r3
 8015608:	2001      	movs	r0, #1
 801560a:	f7fa fa03 	bl	800fa14 <lwip_htons>
 801560e:	4603      	mov	r3, r0
 8015610:	461a      	mov	r2, r3
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	4322      	orrs	r2, r4
 8015618:	b292      	uxth	r2, r2
 801561a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	8b5b      	ldrh	r3, [r3, #26]
 8015620:	f043 0320 	orr.w	r3, r3, #32
 8015624:	b29a      	uxth	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801562a:	2300      	movs	r3, #0
 801562c:	e004      	b.n	8015638 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801562e:	2101      	movs	r1, #1
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f000 f80b 	bl	801564c <tcp_enqueue_flags>
 8015636:	4603      	mov	r3, r0
}
 8015638:	4618      	mov	r0, r3
 801563a:	3714      	adds	r7, #20
 801563c:	46bd      	mov	sp, r7
 801563e:	bd90      	pop	{r4, r7, pc}
 8015640:	08022c5c 	.word	0x08022c5c
 8015644:	08023064 	.word	0x08023064
 8015648:	08022cb0 	.word	0x08022cb0

0801564c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b08a      	sub	sp, #40	; 0x28
 8015650:	af02      	add	r7, sp, #8
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015658:	2300      	movs	r3, #0
 801565a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801565c:	2300      	movs	r3, #0
 801565e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015660:	78fb      	ldrb	r3, [r7, #3]
 8015662:	f003 0303 	and.w	r3, r3, #3
 8015666:	2b00      	cmp	r3, #0
 8015668:	d106      	bne.n	8015678 <tcp_enqueue_flags+0x2c>
 801566a:	4b67      	ldr	r3, [pc, #412]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 801566c:	f240 4212 	movw	r2, #1042	; 0x412
 8015670:	4966      	ldr	r1, [pc, #408]	; (801580c <tcp_enqueue_flags+0x1c0>)
 8015672:	4867      	ldr	r0, [pc, #412]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 8015674:	f006 fcee 	bl	801c054 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d106      	bne.n	801568c <tcp_enqueue_flags+0x40>
 801567e:	4b62      	ldr	r3, [pc, #392]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 8015680:	f240 4213 	movw	r2, #1043	; 0x413
 8015684:	4963      	ldr	r1, [pc, #396]	; (8015814 <tcp_enqueue_flags+0x1c8>)
 8015686:	4862      	ldr	r0, [pc, #392]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 8015688:	f006 fce4 	bl	801c054 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801568c:	78fb      	ldrb	r3, [r7, #3]
 801568e:	f003 0302 	and.w	r3, r3, #2
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015696:	2301      	movs	r3, #1
 8015698:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801569a:	7ffb      	ldrb	r3, [r7, #31]
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	f003 0304 	and.w	r3, r3, #4
 80156a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80156a6:	7dfb      	ldrb	r3, [r7, #23]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156ae:	4619      	mov	r1, r3
 80156b0:	2036      	movs	r0, #54	; 0x36
 80156b2:	f7fb f967 	bl	8010984 <pbuf_alloc>
 80156b6:	6138      	str	r0, [r7, #16]
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d109      	bne.n	80156d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	8b5b      	ldrh	r3, [r3, #26]
 80156c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80156cc:	f04f 33ff 	mov.w	r3, #4294967295
 80156d0:	e095      	b.n	80157fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	895a      	ldrh	r2, [r3, #10]
 80156d6:	7dfb      	ldrb	r3, [r7, #23]
 80156d8:	b29b      	uxth	r3, r3
 80156da:	429a      	cmp	r2, r3
 80156dc:	d206      	bcs.n	80156ec <tcp_enqueue_flags+0xa0>
 80156de:	4b4a      	ldr	r3, [pc, #296]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 80156e0:	f240 423a 	movw	r2, #1082	; 0x43a
 80156e4:	494c      	ldr	r1, [pc, #304]	; (8015818 <tcp_enqueue_flags+0x1cc>)
 80156e6:	484a      	ldr	r0, [pc, #296]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 80156e8:	f006 fcb4 	bl	801c054 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80156f0:	78fa      	ldrb	r2, [r7, #3]
 80156f2:	7ffb      	ldrb	r3, [r7, #31]
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	460b      	mov	r3, r1
 80156f8:	6939      	ldr	r1, [r7, #16]
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f7ff fd70 	bl	80151e0 <tcp_create_segment>
 8015700:	60f8      	str	r0, [r7, #12]
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d109      	bne.n	801571c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	8b5b      	ldrh	r3, [r3, #26]
 801570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015710:	b29a      	uxth	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015716:	f04f 33ff 	mov.w	r3, #4294967295
 801571a:	e070      	b.n	80157fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	f003 0303 	and.w	r3, r3, #3
 8015724:	2b00      	cmp	r3, #0
 8015726:	d006      	beq.n	8015736 <tcp_enqueue_flags+0xea>
 8015728:	4b37      	ldr	r3, [pc, #220]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 801572a:	f240 4242 	movw	r2, #1090	; 0x442
 801572e:	493b      	ldr	r1, [pc, #236]	; (801581c <tcp_enqueue_flags+0x1d0>)
 8015730:	4837      	ldr	r0, [pc, #220]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 8015732:	f006 fc8f 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	891b      	ldrh	r3, [r3, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d006      	beq.n	801574c <tcp_enqueue_flags+0x100>
 801573e:	4b32      	ldr	r3, [pc, #200]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 8015740:	f240 4243 	movw	r2, #1091	; 0x443
 8015744:	4936      	ldr	r1, [pc, #216]	; (8015820 <tcp_enqueue_flags+0x1d4>)
 8015746:	4832      	ldr	r0, [pc, #200]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 8015748:	f006 fc84 	bl	801c054 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015750:	2b00      	cmp	r3, #0
 8015752:	d103      	bne.n	801575c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	68fa      	ldr	r2, [r7, #12]
 8015758:	66da      	str	r2, [r3, #108]	; 0x6c
 801575a:	e00d      	b.n	8015778 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015760:	61bb      	str	r3, [r7, #24]
 8015762:	e002      	b.n	801576a <tcp_enqueue_flags+0x11e>
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	61bb      	str	r3, [r7, #24]
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1f8      	bne.n	8015764 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2200      	movs	r2, #0
 801577c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015780:	78fb      	ldrb	r3, [r7, #3]
 8015782:	f003 0302 	and.w	r3, r3, #2
 8015786:	2b00      	cmp	r3, #0
 8015788:	d104      	bne.n	8015794 <tcp_enqueue_flags+0x148>
 801578a:	78fb      	ldrb	r3, [r7, #3]
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	d004      	beq.n	801579e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015798:	1c5a      	adds	r2, r3, #1
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801579e:	78fb      	ldrb	r3, [r7, #3]
 80157a0:	f003 0301 	and.w	r3, r3, #1
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d006      	beq.n	80157b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	8b5b      	ldrh	r3, [r3, #26]
 80157ac:	f043 0320 	orr.w	r3, r3, #32
 80157b0:	b29a      	uxth	r2, r3
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fb fc4a 	bl	8011054 <pbuf_clen>
 80157c0:	4603      	mov	r3, r0
 80157c2:	461a      	mov	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157ca:	4413      	add	r3, r2
 80157cc:	b29a      	uxth	r2, r3
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d00e      	beq.n	80157fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d10a      	bne.n	80157fc <tcp_enqueue_flags+0x1b0>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d106      	bne.n	80157fc <tcp_enqueue_flags+0x1b0>
 80157ee:	4b06      	ldr	r3, [pc, #24]	; (8015808 <tcp_enqueue_flags+0x1bc>)
 80157f0:	f240 4266 	movw	r2, #1126	; 0x466
 80157f4:	490b      	ldr	r1, [pc, #44]	; (8015824 <tcp_enqueue_flags+0x1d8>)
 80157f6:	4806      	ldr	r0, [pc, #24]	; (8015810 <tcp_enqueue_flags+0x1c4>)
 80157f8:	f006 fc2c 	bl	801c054 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80157fc:	2300      	movs	r3, #0
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3720      	adds	r7, #32
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	08022c5c 	.word	0x08022c5c
 801580c:	08023080 	.word	0x08023080
 8015810:	08022cb0 	.word	0x08022cb0
 8015814:	080230d8 	.word	0x080230d8
 8015818:	080230f8 	.word	0x080230f8
 801581c:	08023134 	.word	0x08023134
 8015820:	0802314c 	.word	0x0802314c
 8015824:	08023178 	.word	0x08023178

08015828 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015828:	b5b0      	push	{r4, r5, r7, lr}
 801582a:	b08a      	sub	sp, #40	; 0x28
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d106      	bne.n	8015844 <tcp_output+0x1c>
 8015836:	4ba0      	ldr	r3, [pc, #640]	; (8015ab8 <tcp_output+0x290>)
 8015838:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801583c:	499f      	ldr	r1, [pc, #636]	; (8015abc <tcp_output+0x294>)
 801583e:	48a0      	ldr	r0, [pc, #640]	; (8015ac0 <tcp_output+0x298>)
 8015840:	f006 fc08 	bl	801c054 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	7d1b      	ldrb	r3, [r3, #20]
 8015848:	2b01      	cmp	r3, #1
 801584a:	d106      	bne.n	801585a <tcp_output+0x32>
 801584c:	4b9a      	ldr	r3, [pc, #616]	; (8015ab8 <tcp_output+0x290>)
 801584e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8015852:	499c      	ldr	r1, [pc, #624]	; (8015ac4 <tcp_output+0x29c>)
 8015854:	489a      	ldr	r0, [pc, #616]	; (8015ac0 <tcp_output+0x298>)
 8015856:	f006 fbfd 	bl	801c054 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801585a:	4b9b      	ldr	r3, [pc, #620]	; (8015ac8 <tcp_output+0x2a0>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	429a      	cmp	r2, r3
 8015862:	d101      	bne.n	8015868 <tcp_output+0x40>
    return ERR_OK;
 8015864:	2300      	movs	r3, #0
 8015866:	e1d2      	b.n	8015c0e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015874:	429a      	cmp	r2, r3
 8015876:	d203      	bcs.n	8015880 <tcp_output+0x58>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801587e:	e002      	b.n	8015886 <tcp_output+0x5e>
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015886:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801588c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10b      	bne.n	80158ac <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	8b5b      	ldrh	r3, [r3, #26]
 8015898:	f003 0302 	and.w	r3, r3, #2
 801589c:	2b00      	cmp	r3, #0
 801589e:	f000 81a9 	beq.w	8015bf4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 fdd4 	bl	8016450 <tcp_send_empty_ack>
 80158a8:	4603      	mov	r3, r0
 80158aa:	e1b0      	b.n	8015c0e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80158ac:	6879      	ldr	r1, [r7, #4]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	3304      	adds	r3, #4
 80158b2:	461a      	mov	r2, r3
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff fc77 	bl	80151a8 <tcp_route>
 80158ba:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d102      	bne.n	80158c8 <tcp_output+0xa0>
    return ERR_RTE;
 80158c2:	f06f 0303 	mvn.w	r3, #3
 80158c6:	e1a2      	b.n	8015c0e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d003      	beq.n	80158d6 <tcp_output+0xae>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d111      	bne.n	80158fa <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d002      	beq.n	80158e2 <tcp_output+0xba>
 80158dc:	697b      	ldr	r3, [r7, #20]
 80158de:	3304      	adds	r3, #4
 80158e0:	e000      	b.n	80158e4 <tcp_output+0xbc>
 80158e2:	2300      	movs	r3, #0
 80158e4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d102      	bne.n	80158f2 <tcp_output+0xca>
      return ERR_RTE;
 80158ec:	f06f 0303 	mvn.w	r3, #3
 80158f0:	e18d      	b.n	8015c0e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80158fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	4618      	mov	r0, r3
 8015902:	f7fa f89c 	bl	800fa3e <lwip_htonl>
 8015906:	4602      	mov	r2, r0
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801590c:	1ad3      	subs	r3, r2, r3
 801590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015910:	8912      	ldrh	r2, [r2, #8]
 8015912:	4413      	add	r3, r2
 8015914:	69ba      	ldr	r2, [r7, #24]
 8015916:	429a      	cmp	r2, r3
 8015918:	d227      	bcs.n	801596a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015920:	461a      	mov	r2, r3
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	4293      	cmp	r3, r2
 8015926:	d114      	bne.n	8015952 <tcp_output+0x12a>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801592c:	2b00      	cmp	r3, #0
 801592e:	d110      	bne.n	8015952 <tcp_output+0x12a>
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10b      	bne.n	8015952 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2200      	movs	r2, #0
 801593e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2201      	movs	r2, #1
 8015946:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2200      	movs	r2, #0
 801594e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	8b5b      	ldrh	r3, [r3, #26]
 8015956:	f003 0302 	and.w	r3, r3, #2
 801595a:	2b00      	cmp	r3, #0
 801595c:	f000 814c 	beq.w	8015bf8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f000 fd75 	bl	8016450 <tcp_send_empty_ack>
 8015966:	4603      	mov	r3, r0
 8015968:	e151      	b.n	8015c0e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2200      	movs	r2, #0
 801596e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015976:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015978:	6a3b      	ldr	r3, [r7, #32]
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 811b 	beq.w	8015bb6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8015980:	e002      	b.n	8015988 <tcp_output+0x160>
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	623b      	str	r3, [r7, #32]
 8015988:	6a3b      	ldr	r3, [r7, #32]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1f8      	bne.n	8015982 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015990:	e111      	b.n	8015bb6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	899b      	ldrh	r3, [r3, #12]
 8015998:	b29b      	uxth	r3, r3
 801599a:	4618      	mov	r0, r3
 801599c:	f7fa f83a 	bl	800fa14 <lwip_htons>
 80159a0:	4603      	mov	r3, r0
 80159a2:	b2db      	uxtb	r3, r3
 80159a4:	f003 0304 	and.w	r3, r3, #4
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d006      	beq.n	80159ba <tcp_output+0x192>
 80159ac:	4b42      	ldr	r3, [pc, #264]	; (8015ab8 <tcp_output+0x290>)
 80159ae:	f240 5237 	movw	r2, #1335	; 0x537
 80159b2:	4946      	ldr	r1, [pc, #280]	; (8015acc <tcp_output+0x2a4>)
 80159b4:	4842      	ldr	r0, [pc, #264]	; (8015ac0 <tcp_output+0x298>)
 80159b6:	f006 fb4d 	bl	801c054 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d01f      	beq.n	8015a02 <tcp_output+0x1da>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	8b5b      	ldrh	r3, [r3, #26]
 80159c6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d119      	bne.n	8015a02 <tcp_output+0x1da>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00b      	beq.n	80159ee <tcp_output+0x1c6>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d110      	bne.n	8015a02 <tcp_output+0x1da>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159e4:	891a      	ldrh	r2, [r3, #8]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d209      	bcs.n	8015a02 <tcp_output+0x1da>
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d004      	beq.n	8015a02 <tcp_output+0x1da>
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159fe:	2b0f      	cmp	r3, #15
 8015a00:	d901      	bls.n	8015a06 <tcp_output+0x1de>
 8015a02:	2301      	movs	r3, #1
 8015a04:	e000      	b.n	8015a08 <tcp_output+0x1e0>
 8015a06:	2300      	movs	r3, #0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d106      	bne.n	8015a1a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	8b5b      	ldrh	r3, [r3, #26]
 8015a10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f000 80e3 	beq.w	8015be0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	7d1b      	ldrb	r3, [r3, #20]
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	d00d      	beq.n	8015a3e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	899b      	ldrh	r3, [r3, #12]
 8015a28:	b29c      	uxth	r4, r3
 8015a2a:	2010      	movs	r0, #16
 8015a2c:	f7f9 fff2 	bl	800fa14 <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	461a      	mov	r2, r3
 8015a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	4322      	orrs	r2, r4
 8015a3a:	b292      	uxth	r2, r2
 8015a3c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015a3e:	697a      	ldr	r2, [r7, #20]
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a44:	f000 f908 	bl	8015c58 <tcp_output_segment>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d009      	beq.n	8015a68 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	8b5b      	ldrh	r3, [r3, #26]
 8015a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	835a      	strh	r2, [r3, #26]
      return err;
 8015a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a66:	e0d2      	b.n	8015c0e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	7d1b      	ldrb	r3, [r3, #20]
 8015a74:	2b02      	cmp	r3, #2
 8015a76:	d006      	beq.n	8015a86 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	8b5b      	ldrh	r3, [r3, #26]
 8015a7c:	f023 0303 	bic.w	r3, r3, #3
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f9 ffd6 	bl	800fa3e <lwip_htonl>
 8015a92:	4604      	mov	r4, r0
 8015a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a96:	891b      	ldrh	r3, [r3, #8]
 8015a98:	461d      	mov	r5, r3
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9c:	68db      	ldr	r3, [r3, #12]
 8015a9e:	899b      	ldrh	r3, [r3, #12]
 8015aa0:	b29b      	uxth	r3, r3
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7f9 ffb6 	bl	800fa14 <lwip_htons>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	f003 0303 	and.w	r3, r3, #3
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d00d      	beq.n	8015ad0 <tcp_output+0x2a8>
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e00c      	b.n	8015ad2 <tcp_output+0x2aa>
 8015ab8:	08022c5c 	.word	0x08022c5c
 8015abc:	080231a0 	.word	0x080231a0
 8015ac0:	08022cb0 	.word	0x08022cb0
 8015ac4:	080231b8 	.word	0x080231b8
 8015ac8:	200082d8 	.word	0x200082d8
 8015acc:	080231e0 	.word	0x080231e0
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	442b      	add	r3, r5
 8015ad4:	4423      	add	r3, r4
 8015ad6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	1ad3      	subs	r3, r2, r3
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	da02      	bge.n	8015aea <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	68ba      	ldr	r2, [r7, #8]
 8015ae8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aec:	891b      	ldrh	r3, [r3, #8]
 8015aee:	461c      	mov	r4, r3
 8015af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af2:	68db      	ldr	r3, [r3, #12]
 8015af4:	899b      	ldrh	r3, [r3, #12]
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7f9 ff8b 	bl	800fa14 <lwip_htons>
 8015afe:	4603      	mov	r3, r0
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	f003 0303 	and.w	r3, r3, #3
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d001      	beq.n	8015b0e <tcp_output+0x2e6>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	e000      	b.n	8015b10 <tcp_output+0x2e8>
 8015b0e:	2300      	movs	r3, #0
 8015b10:	4423      	add	r3, r4
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d049      	beq.n	8015baa <tcp_output+0x382>
      seg->next = NULL;
 8015b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b18:	2200      	movs	r2, #0
 8015b1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d105      	bne.n	8015b30 <tcp_output+0x308>
        pcb->unacked = seg;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2c:	623b      	str	r3, [r7, #32]
 8015b2e:	e03f      	b.n	8015bb0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7f9 ff81 	bl	800fa3e <lwip_htonl>
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	6a3b      	ldr	r3, [r7, #32]
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7f9 ff7a 	bl	800fa3e <lwip_htonl>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	1ae3      	subs	r3, r4, r3
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	da24      	bge.n	8015b9c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	3370      	adds	r3, #112	; 0x70
 8015b56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b58:	e002      	b.n	8015b60 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d011      	beq.n	8015b8c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b68:	69fb      	ldr	r3, [r7, #28]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7f9 ff64 	bl	800fa3e <lwip_htonl>
 8015b76:	4604      	mov	r4, r0
 8015b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7f9 ff5d 	bl	800fa3e <lwip_htonl>
 8015b84:	4603      	mov	r3, r0
 8015b86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	dbe6      	blt.n	8015b5a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	681a      	ldr	r2, [r3, #0]
 8015b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b98:	601a      	str	r2, [r3, #0]
 8015b9a:	e009      	b.n	8015bb0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b9c:	6a3b      	ldr	r3, [r7, #32]
 8015b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ba0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015ba2:	6a3b      	ldr	r3, [r7, #32]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	623b      	str	r3, [r7, #32]
 8015ba8:	e002      	b.n	8015bb0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015bac:	f7fc fc42 	bl	8012434 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d012      	beq.n	8015be2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7f9 ff3b 	bl	800fa3e <lwip_htonl>
 8015bc8:	4602      	mov	r2, r0
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bd2:	8912      	ldrh	r2, [r2, #8]
 8015bd4:	4413      	add	r3, r2
  while (seg != NULL &&
 8015bd6:	69ba      	ldr	r2, [r7, #24]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	f4bf aeda 	bcs.w	8015992 <tcp_output+0x16a>
 8015bde:	e000      	b.n	8015be2 <tcp_output+0x3ba>
      break;
 8015be0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d108      	bne.n	8015bfc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2200      	movs	r2, #0
 8015bee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015bf2:	e004      	b.n	8015bfe <tcp_output+0x3d6>
    goto output_done;
 8015bf4:	bf00      	nop
 8015bf6:	e002      	b.n	8015bfe <tcp_output+0x3d6>
    goto output_done;
 8015bf8:	bf00      	nop
 8015bfa:	e000      	b.n	8015bfe <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015bfc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8b5b      	ldrh	r3, [r3, #26]
 8015c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015c0c:	2300      	movs	r3, #0
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	3728      	adds	r7, #40	; 0x28
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bdb0      	pop	{r4, r5, r7, pc}
 8015c16:	bf00      	nop

08015c18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d106      	bne.n	8015c34 <tcp_output_segment_busy+0x1c>
 8015c26:	4b09      	ldr	r3, [pc, #36]	; (8015c4c <tcp_output_segment_busy+0x34>)
 8015c28:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c2c:	4908      	ldr	r1, [pc, #32]	; (8015c50 <tcp_output_segment_busy+0x38>)
 8015c2e:	4809      	ldr	r0, [pc, #36]	; (8015c54 <tcp_output_segment_busy+0x3c>)
 8015c30:	f006 fa10 	bl	801c054 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	7b9b      	ldrb	r3, [r3, #14]
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d001      	beq.n	8015c42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015c3e:	2301      	movs	r3, #1
 8015c40:	e000      	b.n	8015c44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015c42:	2300      	movs	r3, #0
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3708      	adds	r7, #8
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	08022c5c 	.word	0x08022c5c
 8015c50:	080231f8 	.word	0x080231f8
 8015c54:	08022cb0 	.word	0x08022cb0

08015c58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015c58:	b5b0      	push	{r4, r5, r7, lr}
 8015c5a:	b08c      	sub	sp, #48	; 0x30
 8015c5c:	af04      	add	r7, sp, #16
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	60b9      	str	r1, [r7, #8]
 8015c62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d106      	bne.n	8015c78 <tcp_output_segment+0x20>
 8015c6a:	4b64      	ldr	r3, [pc, #400]	; (8015dfc <tcp_output_segment+0x1a4>)
 8015c6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015c70:	4963      	ldr	r1, [pc, #396]	; (8015e00 <tcp_output_segment+0x1a8>)
 8015c72:	4864      	ldr	r0, [pc, #400]	; (8015e04 <tcp_output_segment+0x1ac>)
 8015c74:	f006 f9ee 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d106      	bne.n	8015c8c <tcp_output_segment+0x34>
 8015c7e:	4b5f      	ldr	r3, [pc, #380]	; (8015dfc <tcp_output_segment+0x1a4>)
 8015c80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015c84:	4960      	ldr	r1, [pc, #384]	; (8015e08 <tcp_output_segment+0x1b0>)
 8015c86:	485f      	ldr	r0, [pc, #380]	; (8015e04 <tcp_output_segment+0x1ac>)
 8015c88:	f006 f9e4 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <tcp_output_segment+0x48>
 8015c92:	4b5a      	ldr	r3, [pc, #360]	; (8015dfc <tcp_output_segment+0x1a4>)
 8015c94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015c98:	495c      	ldr	r1, [pc, #368]	; (8015e0c <tcp_output_segment+0x1b4>)
 8015c9a:	485a      	ldr	r0, [pc, #360]	; (8015e04 <tcp_output_segment+0x1ac>)
 8015c9c:	f006 f9da 	bl	801c054 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f7ff ffb9 	bl	8015c18 <tcp_output_segment_busy>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d001      	beq.n	8015cb0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015cac:	2300      	movs	r3, #0
 8015cae:	e0a0      	b.n	8015df2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	68dc      	ldr	r4, [r3, #12]
 8015cb8:	4610      	mov	r0, r2
 8015cba:	f7f9 fec0 	bl	800fa3e <lwip_htonl>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	68dc      	ldr	r4, [r3, #12]
 8015cca:	4610      	mov	r0, r2
 8015ccc:	f7f9 fea2 	bl	800fa14 <lwip_htons>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd8:	68ba      	ldr	r2, [r7, #8]
 8015cda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015cdc:	441a      	add	r2, r3
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	3314      	adds	r3, #20
 8015ce8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	7a9b      	ldrb	r3, [r3, #10]
 8015cee:	f003 0301 	and.w	r3, r3, #1
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d015      	beq.n	8015d22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	6879      	ldr	r1, [r7, #4]
 8015cfe:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8015d02:	f7fc fe8d 	bl	8012a20 <tcp_eff_send_mss_netif>
 8015d06:	4603      	mov	r3, r0
 8015d08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015d0a:	8b7b      	ldrh	r3, [r7, #26]
 8015d0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f9 fe94 	bl	800fa3e <lwip_htonl>
 8015d16:	4602      	mov	r2, r0
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	3304      	adds	r3, #4
 8015d20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	da02      	bge.n	8015d32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d10c      	bne.n	8015d54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015d3a:	4b35      	ldr	r3, [pc, #212]	; (8015e10 <tcp_output_segment+0x1b8>)
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7f9 fe78 	bl	800fa3e <lwip_htonl>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	68db      	ldr	r3, [r3, #12]
 8015d58:	461a      	mov	r2, r3
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	1ad3      	subs	r3, r2, r3
 8015d62:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	8959      	ldrh	r1, [r3, #10]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	8b3a      	ldrh	r2, [r7, #24]
 8015d70:	1a8a      	subs	r2, r1, r2
 8015d72:	b292      	uxth	r2, r2
 8015d74:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	8919      	ldrh	r1, [r3, #8]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	8b3a      	ldrh	r2, [r7, #24]
 8015d82:	1a8a      	subs	r2, r1, r2
 8015d84:	b292      	uxth	r2, r2
 8015d86:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	68fa      	ldr	r2, [r7, #12]
 8015d8e:	68d2      	ldr	r2, [r2, #12]
 8015d90:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	2200      	movs	r2, #0
 8015d98:	741a      	strb	r2, [r3, #16]
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	f103 0214 	add.w	r2, r3, #20
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	7a9b      	ldrb	r3, [r3, #10]
 8015daa:	009b      	lsls	r3, r3, #2
 8015dac:	f003 0304 	and.w	r3, r3, #4
 8015db0:	4413      	add	r3, r2
 8015db2:	69fa      	ldr	r2, [r7, #28]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d006      	beq.n	8015dc6 <tcp_output_segment+0x16e>
 8015db8:	4b10      	ldr	r3, [pc, #64]	; (8015dfc <tcp_output_segment+0x1a4>)
 8015dba:	f240 621c 	movw	r2, #1564	; 0x61c
 8015dbe:	4915      	ldr	r1, [pc, #84]	; (8015e14 <tcp_output_segment+0x1bc>)
 8015dc0:	4810      	ldr	r0, [pc, #64]	; (8015e04 <tcp_output_segment+0x1ac>)
 8015dc2:	f006 f947 	bl	801c054 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	6858      	ldr	r0, [r3, #4]
 8015dca:	68b9      	ldr	r1, [r7, #8]
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	1d1c      	adds	r4, r3, #4
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	7add      	ldrb	r5, [r3, #11]
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	7a9b      	ldrb	r3, [r3, #10]
 8015dd8:	687a      	ldr	r2, [r7, #4]
 8015dda:	9202      	str	r2, [sp, #8]
 8015ddc:	2206      	movs	r2, #6
 8015dde:	9201      	str	r2, [sp, #4]
 8015de0:	9300      	str	r3, [sp, #0]
 8015de2:	462b      	mov	r3, r5
 8015de4:	4622      	mov	r2, r4
 8015de6:	f004 fb71 	bl	801a4cc <ip4_output_if>
 8015dea:	4603      	mov	r3, r0
 8015dec:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3720      	adds	r7, #32
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bdb0      	pop	{r4, r5, r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	08022c5c 	.word	0x08022c5c
 8015e00:	08023220 	.word	0x08023220
 8015e04:	08022cb0 	.word	0x08022cb0
 8015e08:	08023240 	.word	0x08023240
 8015e0c:	08023260 	.word	0x08023260
 8015e10:	200082c8 	.word	0x200082c8
 8015e14:	08023284 	.word	0x08023284

08015e18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015e18:	b5b0      	push	{r4, r5, r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d106      	bne.n	8015e34 <tcp_rexmit_rto_prepare+0x1c>
 8015e26:	4b31      	ldr	r3, [pc, #196]	; (8015eec <tcp_rexmit_rto_prepare+0xd4>)
 8015e28:	f240 6263 	movw	r2, #1635	; 0x663
 8015e2c:	4930      	ldr	r1, [pc, #192]	; (8015ef0 <tcp_rexmit_rto_prepare+0xd8>)
 8015e2e:	4831      	ldr	r0, [pc, #196]	; (8015ef4 <tcp_rexmit_rto_prepare+0xdc>)
 8015e30:	f006 f910 	bl	801c054 <iprintf>

  if (pcb->unacked == NULL) {
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d102      	bne.n	8015e42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015e3c:	f06f 0305 	mvn.w	r3, #5
 8015e40:	e050      	b.n	8015ee4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e46:	60fb      	str	r3, [r7, #12]
 8015e48:	e00b      	b.n	8015e62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7ff fee4 	bl	8015c18 <tcp_output_segment_busy>
 8015e50:	4603      	mov	r3, r0
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d002      	beq.n	8015e5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015e56:	f06f 0305 	mvn.w	r3, #5
 8015e5a:	e043      	b.n	8015ee4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	60fb      	str	r3, [r7, #12]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1ef      	bne.n	8015e4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015e6a:	68f8      	ldr	r0, [r7, #12]
 8015e6c:	f7ff fed4 	bl	8015c18 <tcp_output_segment_busy>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d002      	beq.n	8015e7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015e76:	f06f 0305 	mvn.w	r3, #5
 8015e7a:	e033      	b.n	8015ee4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	8b5b      	ldrh	r3, [r3, #26]
 8015e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7f9 fdc9 	bl	800fa3e <lwip_htonl>
 8015eac:	4604      	mov	r4, r0
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	891b      	ldrh	r3, [r3, #8]
 8015eb2:	461d      	mov	r5, r3
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	899b      	ldrh	r3, [r3, #12]
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7f9 fda9 	bl	800fa14 <lwip_htons>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	f003 0303 	and.w	r3, r3, #3
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d001      	beq.n	8015ed2 <tcp_rexmit_rto_prepare+0xba>
 8015ece:	2301      	movs	r3, #1
 8015ed0:	e000      	b.n	8015ed4 <tcp_rexmit_rto_prepare+0xbc>
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	442b      	add	r3, r5
 8015ed6:	18e2      	adds	r2, r4, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015ee2:	2300      	movs	r3, #0
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3710      	adds	r7, #16
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bdb0      	pop	{r4, r5, r7, pc}
 8015eec:	08022c5c 	.word	0x08022c5c
 8015ef0:	08023298 	.word	0x08023298
 8015ef4:	08022cb0 	.word	0x08022cb0

08015ef8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d106      	bne.n	8015f14 <tcp_rexmit_rto_commit+0x1c>
 8015f06:	4b0d      	ldr	r3, [pc, #52]	; (8015f3c <tcp_rexmit_rto_commit+0x44>)
 8015f08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015f0c:	490c      	ldr	r1, [pc, #48]	; (8015f40 <tcp_rexmit_rto_commit+0x48>)
 8015f0e:	480d      	ldr	r0, [pc, #52]	; (8015f44 <tcp_rexmit_rto_commit+0x4c>)
 8015f10:	f006 f8a0 	bl	801c054 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f1a:	2bff      	cmp	r3, #255	; 0xff
 8015f1c:	d007      	beq.n	8015f2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f24:	3301      	adds	r3, #1
 8015f26:	b2da      	uxtb	r2, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7ff fc7a 	bl	8015828 <tcp_output>
}
 8015f34:	bf00      	nop
 8015f36:	3708      	adds	r7, #8
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	08022c5c 	.word	0x08022c5c
 8015f40:	080232bc 	.word	0x080232bc
 8015f44:	08022cb0 	.word	0x08022cb0

08015f48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d106      	bne.n	8015f64 <tcp_rexmit_rto+0x1c>
 8015f56:	4b0a      	ldr	r3, [pc, #40]	; (8015f80 <tcp_rexmit_rto+0x38>)
 8015f58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015f5c:	4909      	ldr	r1, [pc, #36]	; (8015f84 <tcp_rexmit_rto+0x3c>)
 8015f5e:	480a      	ldr	r0, [pc, #40]	; (8015f88 <tcp_rexmit_rto+0x40>)
 8015f60:	f006 f878 	bl	801c054 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f7ff ff57 	bl	8015e18 <tcp_rexmit_rto_prepare>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d102      	bne.n	8015f76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7ff ffc1 	bl	8015ef8 <tcp_rexmit_rto_commit>
  }
}
 8015f76:	bf00      	nop
 8015f78:	3708      	adds	r7, #8
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	08022c5c 	.word	0x08022c5c
 8015f84:	080232e0 	.word	0x080232e0
 8015f88:	08022cb0 	.word	0x08022cb0

08015f8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015f8c:	b590      	push	{r4, r7, lr}
 8015f8e:	b085      	sub	sp, #20
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d106      	bne.n	8015fa8 <tcp_rexmit+0x1c>
 8015f9a:	4b2f      	ldr	r3, [pc, #188]	; (8016058 <tcp_rexmit+0xcc>)
 8015f9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015fa0:	492e      	ldr	r1, [pc, #184]	; (801605c <tcp_rexmit+0xd0>)
 8015fa2:	482f      	ldr	r0, [pc, #188]	; (8016060 <tcp_rexmit+0xd4>)
 8015fa4:	f006 f856 	bl	801c054 <iprintf>

  if (pcb->unacked == NULL) {
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d102      	bne.n	8015fb6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015fb0:	f06f 0305 	mvn.w	r3, #5
 8015fb4:	e04c      	b.n	8016050 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015fbc:	68b8      	ldr	r0, [r7, #8]
 8015fbe:	f7ff fe2b 	bl	8015c18 <tcp_output_segment_busy>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d002      	beq.n	8015fce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015fc8:	f06f 0305 	mvn.w	r3, #5
 8015fcc:	e040      	b.n	8016050 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	681a      	ldr	r2, [r3, #0]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	336c      	adds	r3, #108	; 0x6c
 8015fda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015fdc:	e002      	b.n	8015fe4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d011      	beq.n	8016010 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7f9 fd22 	bl	800fa3e <lwip_htonl>
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	68db      	ldr	r3, [r3, #12]
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	4618      	mov	r0, r3
 8016004:	f7f9 fd1b 	bl	800fa3e <lwip_htonl>
 8016008:	4603      	mov	r3, r0
 801600a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801600c:	2b00      	cmp	r3, #0
 801600e:	dbe6      	blt.n	8015fde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	68ba      	ldr	r2, [r7, #8]
 801601c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d103      	bne.n	801602e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2200      	movs	r2, #0
 801602a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016034:	2bff      	cmp	r3, #255	; 0xff
 8016036:	d007      	beq.n	8016048 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801603e:	3301      	adds	r3, #1
 8016040:	b2da      	uxtb	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2200      	movs	r2, #0
 801604c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801604e:	2300      	movs	r3, #0
}
 8016050:	4618      	mov	r0, r3
 8016052:	3714      	adds	r7, #20
 8016054:	46bd      	mov	sp, r7
 8016056:	bd90      	pop	{r4, r7, pc}
 8016058:	08022c5c 	.word	0x08022c5c
 801605c:	080232fc 	.word	0x080232fc
 8016060:	08022cb0 	.word	0x08022cb0

08016064 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d106      	bne.n	8016080 <tcp_rexmit_fast+0x1c>
 8016072:	4b2e      	ldr	r3, [pc, #184]	; (801612c <tcp_rexmit_fast+0xc8>)
 8016074:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016078:	492d      	ldr	r1, [pc, #180]	; (8016130 <tcp_rexmit_fast+0xcc>)
 801607a:	482e      	ldr	r0, [pc, #184]	; (8016134 <tcp_rexmit_fast+0xd0>)
 801607c:	f005 ffea 	bl	801c054 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016084:	2b00      	cmp	r3, #0
 8016086:	d04d      	beq.n	8016124 <tcp_rexmit_fast+0xc0>
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	8b5b      	ldrh	r3, [r3, #26]
 801608c:	f003 0304 	and.w	r3, r3, #4
 8016090:	2b00      	cmp	r3, #0
 8016092:	d147      	bne.n	8016124 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7ff ff79 	bl	8015f8c <tcp_rexmit>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d141      	bne.n	8016124 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d207      	bcs.n	80160c0 <tcp_rexmit_fast+0x5c>
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80160b6:	0fda      	lsrs	r2, r3, #31
 80160b8:	4413      	add	r3, r2
 80160ba:	105b      	asrs	r3, r3, #1
 80160bc:	b29b      	uxth	r3, r3
 80160be:	e006      	b.n	80160ce <tcp_rexmit_fast+0x6a>
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160c6:	0fda      	lsrs	r2, r3, #31
 80160c8:	4413      	add	r3, r2
 80160ca:	105b      	asrs	r3, r3, #1
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80160da:	461a      	mov	r2, r3
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d206      	bcs.n	80160f4 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ea:	005b      	lsls	r3, r3, #1
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160fe:	4619      	mov	r1, r3
 8016100:	0049      	lsls	r1, r1, #1
 8016102:	440b      	add	r3, r1
 8016104:	b29b      	uxth	r3, r3
 8016106:	4413      	add	r3, r2
 8016108:	b29a      	uxth	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	8b5b      	ldrh	r3, [r3, #26]
 8016114:	f043 0304 	orr.w	r3, r3, #4
 8016118:	b29a      	uxth	r2, r3
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2200      	movs	r2, #0
 8016122:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016124:	bf00      	nop
 8016126:	3708      	adds	r7, #8
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}
 801612c:	08022c5c 	.word	0x08022c5c
 8016130:	08023314 	.word	0x08023314
 8016134:	08022cb0 	.word	0x08022cb0

08016138 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b086      	sub	sp, #24
 801613c:	af00      	add	r7, sp, #0
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	607b      	str	r3, [r7, #4]
 8016142:	460b      	mov	r3, r1
 8016144:	817b      	strh	r3, [r7, #10]
 8016146:	4613      	mov	r3, r2
 8016148:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801614a:	897a      	ldrh	r2, [r7, #10]
 801614c:	893b      	ldrh	r3, [r7, #8]
 801614e:	4413      	add	r3, r2
 8016150:	b29b      	uxth	r3, r3
 8016152:	3314      	adds	r3, #20
 8016154:	b29b      	uxth	r3, r3
 8016156:	f44f 7220 	mov.w	r2, #640	; 0x280
 801615a:	4619      	mov	r1, r3
 801615c:	2022      	movs	r0, #34	; 0x22
 801615e:	f7fa fc11 	bl	8010984 <pbuf_alloc>
 8016162:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d04e      	beq.n	8016208 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	895b      	ldrh	r3, [r3, #10]
 801616e:	461a      	mov	r2, r3
 8016170:	897b      	ldrh	r3, [r7, #10]
 8016172:	3314      	adds	r3, #20
 8016174:	429a      	cmp	r2, r3
 8016176:	da06      	bge.n	8016186 <tcp_output_alloc_header_common+0x4e>
 8016178:	4b26      	ldr	r3, [pc, #152]	; (8016214 <tcp_output_alloc_header_common+0xdc>)
 801617a:	f240 7224 	movw	r2, #1828	; 0x724
 801617e:	4926      	ldr	r1, [pc, #152]	; (8016218 <tcp_output_alloc_header_common+0xe0>)
 8016180:	4826      	ldr	r0, [pc, #152]	; (801621c <tcp_output_alloc_header_common+0xe4>)
 8016182:	f005 ff67 	bl	801c054 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016186:	697b      	ldr	r3, [r7, #20]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801618c:	8c3b      	ldrh	r3, [r7, #32]
 801618e:	4618      	mov	r0, r3
 8016190:	f7f9 fc40 	bl	800fa14 <lwip_htons>
 8016194:	4603      	mov	r3, r0
 8016196:	461a      	mov	r2, r3
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801619c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801619e:	4618      	mov	r0, r3
 80161a0:	f7f9 fc38 	bl	800fa14 <lwip_htons>
 80161a4:	4603      	mov	r3, r0
 80161a6:	461a      	mov	r2, r3
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	687a      	ldr	r2, [r7, #4]
 80161b0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	f7f9 fc43 	bl	800fa3e <lwip_htonl>
 80161b8:	4602      	mov	r2, r0
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80161be:	897b      	ldrh	r3, [r7, #10]
 80161c0:	089b      	lsrs	r3, r3, #2
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	3305      	adds	r3, #5
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	031b      	lsls	r3, r3, #12
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	4313      	orrs	r3, r2
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7f9 fc1c 	bl	800fa14 <lwip_htons>
 80161dc:	4603      	mov	r3, r0
 80161de:	461a      	mov	r2, r3
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80161e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7f9 fc14 	bl	800fa14 <lwip_htons>
 80161ec:	4603      	mov	r3, r0
 80161ee:	461a      	mov	r2, r3
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	2200      	movs	r2, #0
 80161f8:	741a      	strb	r2, [r3, #16]
 80161fa:	2200      	movs	r2, #0
 80161fc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	2200      	movs	r2, #0
 8016202:	749a      	strb	r2, [r3, #18]
 8016204:	2200      	movs	r2, #0
 8016206:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016208:	697b      	ldr	r3, [r7, #20]
}
 801620a:	4618      	mov	r0, r3
 801620c:	3718      	adds	r7, #24
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	08022c5c 	.word	0x08022c5c
 8016218:	08023334 	.word	0x08023334
 801621c:	08022cb0 	.word	0x08022cb0

08016220 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016220:	b5b0      	push	{r4, r5, r7, lr}
 8016222:	b08a      	sub	sp, #40	; 0x28
 8016224:	af04      	add	r7, sp, #16
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	607b      	str	r3, [r7, #4]
 801622a:	460b      	mov	r3, r1
 801622c:	817b      	strh	r3, [r7, #10]
 801622e:	4613      	mov	r3, r2
 8016230:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d106      	bne.n	8016246 <tcp_output_alloc_header+0x26>
 8016238:	4b15      	ldr	r3, [pc, #84]	; (8016290 <tcp_output_alloc_header+0x70>)
 801623a:	f240 7242 	movw	r2, #1858	; 0x742
 801623e:	4915      	ldr	r1, [pc, #84]	; (8016294 <tcp_output_alloc_header+0x74>)
 8016240:	4815      	ldr	r0, [pc, #84]	; (8016298 <tcp_output_alloc_header+0x78>)
 8016242:	f005 ff07 	bl	801c054 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	8adb      	ldrh	r3, [r3, #22]
 801624e:	68fa      	ldr	r2, [r7, #12]
 8016250:	8b12      	ldrh	r2, [r2, #24]
 8016252:	68f9      	ldr	r1, [r7, #12]
 8016254:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016256:	893d      	ldrh	r5, [r7, #8]
 8016258:	897c      	ldrh	r4, [r7, #10]
 801625a:	9103      	str	r1, [sp, #12]
 801625c:	2110      	movs	r1, #16
 801625e:	9102      	str	r1, [sp, #8]
 8016260:	9201      	str	r2, [sp, #4]
 8016262:	9300      	str	r3, [sp, #0]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	462a      	mov	r2, r5
 8016268:	4621      	mov	r1, r4
 801626a:	f7ff ff65 	bl	8016138 <tcp_output_alloc_header_common>
 801626e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d006      	beq.n	8016284 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801627a:	68fa      	ldr	r2, [r7, #12]
 801627c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801627e:	441a      	add	r2, r3
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016284:	697b      	ldr	r3, [r7, #20]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3718      	adds	r7, #24
 801628a:	46bd      	mov	sp, r7
 801628c:	bdb0      	pop	{r4, r5, r7, pc}
 801628e:	bf00      	nop
 8016290:	08022c5c 	.word	0x08022c5c
 8016294:	08023364 	.word	0x08023364
 8016298:	08022cb0 	.word	0x08022cb0

0801629c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b088      	sub	sp, #32
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	60b9      	str	r1, [r7, #8]
 80162a6:	4611      	mov	r1, r2
 80162a8:	461a      	mov	r2, r3
 80162aa:	460b      	mov	r3, r1
 80162ac:	71fb      	strb	r3, [r7, #7]
 80162ae:	4613      	mov	r3, r2
 80162b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d106      	bne.n	80162ca <tcp_output_fill_options+0x2e>
 80162bc:	4b13      	ldr	r3, [pc, #76]	; (801630c <tcp_output_fill_options+0x70>)
 80162be:	f240 7256 	movw	r2, #1878	; 0x756
 80162c2:	4913      	ldr	r1, [pc, #76]	; (8016310 <tcp_output_fill_options+0x74>)
 80162c4:	4813      	ldr	r0, [pc, #76]	; (8016314 <tcp_output_fill_options+0x78>)
 80162c6:	f005 fec5 	bl	801c054 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	3314      	adds	r3, #20
 80162d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80162d6:	69bb      	ldr	r3, [r7, #24]
 80162d8:	f103 0214 	add.w	r2, r3, #20
 80162dc:	8bfb      	ldrh	r3, [r7, #30]
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	4619      	mov	r1, r3
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	f003 0304 	and.w	r3, r3, #4
 80162ea:	440b      	add	r3, r1
 80162ec:	4413      	add	r3, r2
 80162ee:	697a      	ldr	r2, [r7, #20]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d006      	beq.n	8016302 <tcp_output_fill_options+0x66>
 80162f4:	4b05      	ldr	r3, [pc, #20]	; (801630c <tcp_output_fill_options+0x70>)
 80162f6:	f240 7275 	movw	r2, #1909	; 0x775
 80162fa:	4907      	ldr	r1, [pc, #28]	; (8016318 <tcp_output_fill_options+0x7c>)
 80162fc:	4805      	ldr	r0, [pc, #20]	; (8016314 <tcp_output_fill_options+0x78>)
 80162fe:	f005 fea9 	bl	801c054 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016302:	bf00      	nop
 8016304:	3720      	adds	r7, #32
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop
 801630c:	08022c5c 	.word	0x08022c5c
 8016310:	0802338c 	.word	0x0802338c
 8016314:	08022cb0 	.word	0x08022cb0
 8016318:	08023284 	.word	0x08023284

0801631c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b08a      	sub	sp, #40	; 0x28
 8016320:	af04      	add	r7, sp, #16
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	60b9      	str	r1, [r7, #8]
 8016326:	607a      	str	r2, [r7, #4]
 8016328:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d106      	bne.n	801633e <tcp_output_control_segment+0x22>
 8016330:	4b1c      	ldr	r3, [pc, #112]	; (80163a4 <tcp_output_control_segment+0x88>)
 8016332:	f240 7287 	movw	r2, #1927	; 0x787
 8016336:	491c      	ldr	r1, [pc, #112]	; (80163a8 <tcp_output_control_segment+0x8c>)
 8016338:	481c      	ldr	r0, [pc, #112]	; (80163ac <tcp_output_control_segment+0x90>)
 801633a:	f005 fe8b 	bl	801c054 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801633e:	683a      	ldr	r2, [r7, #0]
 8016340:	6879      	ldr	r1, [r7, #4]
 8016342:	68f8      	ldr	r0, [r7, #12]
 8016344:	f7fe ff30 	bl	80151a8 <tcp_route>
 8016348:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d102      	bne.n	8016356 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016350:	23fc      	movs	r3, #252	; 0xfc
 8016352:	75fb      	strb	r3, [r7, #23]
 8016354:	e01c      	b.n	8016390 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d006      	beq.n	801636a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	7adb      	ldrb	r3, [r3, #11]
 8016360:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	7a9b      	ldrb	r3, [r3, #10]
 8016366:	757b      	strb	r3, [r7, #21]
 8016368:	e003      	b.n	8016372 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801636a:	23ff      	movs	r3, #255	; 0xff
 801636c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801636e:	2300      	movs	r3, #0
 8016370:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016372:	7dba      	ldrb	r2, [r7, #22]
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	9302      	str	r3, [sp, #8]
 8016378:	2306      	movs	r3, #6
 801637a:	9301      	str	r3, [sp, #4]
 801637c:	7d7b      	ldrb	r3, [r7, #21]
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	4613      	mov	r3, r2
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	68b8      	ldr	r0, [r7, #8]
 8016388:	f004 f8a0 	bl	801a4cc <ip4_output_if>
 801638c:	4603      	mov	r3, r0
 801638e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016390:	68b8      	ldr	r0, [r7, #8]
 8016392:	f7fa fdd7 	bl	8010f44 <pbuf_free>
  return err;
 8016396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801639a:	4618      	mov	r0, r3
 801639c:	3718      	adds	r7, #24
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	08022c5c 	.word	0x08022c5c
 80163a8:	080233b4 	.word	0x080233b4
 80163ac:	08022cb0 	.word	0x08022cb0

080163b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80163b0:	b590      	push	{r4, r7, lr}
 80163b2:	b08b      	sub	sp, #44	; 0x2c
 80163b4:	af04      	add	r7, sp, #16
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
 80163bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d106      	bne.n	80163d2 <tcp_rst+0x22>
 80163c4:	4b1e      	ldr	r3, [pc, #120]	; (8016440 <tcp_rst+0x90>)
 80163c6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80163ca:	491e      	ldr	r1, [pc, #120]	; (8016444 <tcp_rst+0x94>)
 80163cc:	481e      	ldr	r0, [pc, #120]	; (8016448 <tcp_rst+0x98>)
 80163ce:	f005 fe41 	bl	801c054 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80163d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d106      	bne.n	80163e6 <tcp_rst+0x36>
 80163d8:	4b19      	ldr	r3, [pc, #100]	; (8016440 <tcp_rst+0x90>)
 80163da:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80163de:	491b      	ldr	r1, [pc, #108]	; (801644c <tcp_rst+0x9c>)
 80163e0:	4819      	ldr	r0, [pc, #100]	; (8016448 <tcp_rst+0x98>)
 80163e2:	f005 fe37 	bl	801c054 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163e6:	2300      	movs	r3, #0
 80163e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80163ea:	2308      	movs	r3, #8
 80163ec:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80163ee:	7dfb      	ldrb	r3, [r7, #23]
 80163f0:	b29c      	uxth	r4, r3
 80163f2:	68b8      	ldr	r0, [r7, #8]
 80163f4:	f7f9 fb23 	bl	800fa3e <lwip_htonl>
 80163f8:	4602      	mov	r2, r0
 80163fa:	8abb      	ldrh	r3, [r7, #20]
 80163fc:	9303      	str	r3, [sp, #12]
 80163fe:	2314      	movs	r3, #20
 8016400:	9302      	str	r3, [sp, #8]
 8016402:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016404:	9301      	str	r3, [sp, #4]
 8016406:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	4613      	mov	r3, r2
 801640c:	2200      	movs	r2, #0
 801640e:	4621      	mov	r1, r4
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f7ff fe91 	bl	8016138 <tcp_output_alloc_header_common>
 8016416:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d00c      	beq.n	8016438 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801641e:	7dfb      	ldrb	r3, [r7, #23]
 8016420:	2200      	movs	r2, #0
 8016422:	6939      	ldr	r1, [r7, #16]
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f7ff ff39 	bl	801629c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801642c:	683a      	ldr	r2, [r7, #0]
 801642e:	6939      	ldr	r1, [r7, #16]
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f7ff ff73 	bl	801631c <tcp_output_control_segment>
 8016436:	e000      	b.n	801643a <tcp_rst+0x8a>
    return;
 8016438:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801643a:	371c      	adds	r7, #28
 801643c:	46bd      	mov	sp, r7
 801643e:	bd90      	pop	{r4, r7, pc}
 8016440:	08022c5c 	.word	0x08022c5c
 8016444:	080233e0 	.word	0x080233e0
 8016448:	08022cb0 	.word	0x08022cb0
 801644c:	080233fc 	.word	0x080233fc

08016450 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016450:	b590      	push	{r4, r7, lr}
 8016452:	b087      	sub	sp, #28
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d106      	bne.n	8016474 <tcp_send_empty_ack+0x24>
 8016466:	4b28      	ldr	r3, [pc, #160]	; (8016508 <tcp_send_empty_ack+0xb8>)
 8016468:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801646c:	4927      	ldr	r1, [pc, #156]	; (801650c <tcp_send_empty_ack+0xbc>)
 801646e:	4828      	ldr	r0, [pc, #160]	; (8016510 <tcp_send_empty_ack+0xc0>)
 8016470:	f005 fdf0 	bl	801c054 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016474:	7dfb      	ldrb	r3, [r7, #23]
 8016476:	009b      	lsls	r3, r3, #2
 8016478:	b2db      	uxtb	r3, r3
 801647a:	f003 0304 	and.w	r3, r3, #4
 801647e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016480:	7d7b      	ldrb	r3, [r7, #21]
 8016482:	b29c      	uxth	r4, r3
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016488:	4618      	mov	r0, r3
 801648a:	f7f9 fad8 	bl	800fa3e <lwip_htonl>
 801648e:	4603      	mov	r3, r0
 8016490:	2200      	movs	r2, #0
 8016492:	4621      	mov	r1, r4
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7ff fec3 	bl	8016220 <tcp_output_alloc_header>
 801649a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d109      	bne.n	80164b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	8b5b      	ldrh	r3, [r3, #26]
 80164a6:	f043 0303 	orr.w	r3, r3, #3
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80164b0:	f06f 0301 	mvn.w	r3, #1
 80164b4:	e023      	b.n	80164fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80164b6:	7dbb      	ldrb	r3, [r7, #22]
 80164b8:	7dfa      	ldrb	r2, [r7, #23]
 80164ba:	6939      	ldr	r1, [r7, #16]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7ff feed 	bl	801629c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164c2:	687a      	ldr	r2, [r7, #4]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	3304      	adds	r3, #4
 80164c8:	6939      	ldr	r1, [r7, #16]
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f7ff ff26 	bl	801631c <tcp_output_control_segment>
 80164d0:	4603      	mov	r3, r0
 80164d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80164d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d007      	beq.n	80164ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8b5b      	ldrh	r3, [r3, #26]
 80164e0:	f043 0303 	orr.w	r3, r3, #3
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	835a      	strh	r2, [r3, #26]
 80164ea:	e006      	b.n	80164fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	8b5b      	ldrh	r3, [r3, #26]
 80164f0:	f023 0303 	bic.w	r3, r3, #3
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80164fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	371c      	adds	r7, #28
 8016502:	46bd      	mov	sp, r7
 8016504:	bd90      	pop	{r4, r7, pc}
 8016506:	bf00      	nop
 8016508:	08022c5c 	.word	0x08022c5c
 801650c:	08023418 	.word	0x08023418
 8016510:	08022cb0 	.word	0x08022cb0

08016514 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016514:	b590      	push	{r4, r7, lr}
 8016516:	b087      	sub	sp, #28
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801651c:	2300      	movs	r3, #0
 801651e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d106      	bne.n	8016534 <tcp_keepalive+0x20>
 8016526:	4b18      	ldr	r3, [pc, #96]	; (8016588 <tcp_keepalive+0x74>)
 8016528:	f640 0224 	movw	r2, #2084	; 0x824
 801652c:	4917      	ldr	r1, [pc, #92]	; (801658c <tcp_keepalive+0x78>)
 801652e:	4818      	ldr	r0, [pc, #96]	; (8016590 <tcp_keepalive+0x7c>)
 8016530:	f005 fd90 	bl	801c054 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016534:	7dfb      	ldrb	r3, [r7, #23]
 8016536:	b29c      	uxth	r4, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801653c:	3b01      	subs	r3, #1
 801653e:	4618      	mov	r0, r3
 8016540:	f7f9 fa7d 	bl	800fa3e <lwip_htonl>
 8016544:	4603      	mov	r3, r0
 8016546:	2200      	movs	r2, #0
 8016548:	4621      	mov	r1, r4
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7ff fe68 	bl	8016220 <tcp_output_alloc_header>
 8016550:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d102      	bne.n	801655e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016558:	f04f 33ff 	mov.w	r3, #4294967295
 801655c:	e010      	b.n	8016580 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801655e:	7dfb      	ldrb	r3, [r7, #23]
 8016560:	2200      	movs	r2, #0
 8016562:	6939      	ldr	r1, [r7, #16]
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7ff fe99 	bl	801629c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	3304      	adds	r3, #4
 8016570:	6939      	ldr	r1, [r7, #16]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7ff fed2 	bl	801631c <tcp_output_control_segment>
 8016578:	4603      	mov	r3, r0
 801657a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801657c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016580:	4618      	mov	r0, r3
 8016582:	371c      	adds	r7, #28
 8016584:	46bd      	mov	sp, r7
 8016586:	bd90      	pop	{r4, r7, pc}
 8016588:	08022c5c 	.word	0x08022c5c
 801658c:	08023438 	.word	0x08023438
 8016590:	08022cb0 	.word	0x08022cb0

08016594 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016594:	b590      	push	{r4, r7, lr}
 8016596:	b08b      	sub	sp, #44	; 0x2c
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801659c:	2300      	movs	r3, #0
 801659e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d106      	bne.n	80165b6 <tcp_zero_window_probe+0x22>
 80165a8:	4b4c      	ldr	r3, [pc, #304]	; (80166dc <tcp_zero_window_probe+0x148>)
 80165aa:	f640 024f 	movw	r2, #2127	; 0x84f
 80165ae:	494c      	ldr	r1, [pc, #304]	; (80166e0 <tcp_zero_window_probe+0x14c>)
 80165b0:	484c      	ldr	r0, [pc, #304]	; (80166e4 <tcp_zero_window_probe+0x150>)
 80165b2:	f005 fd4f 	bl	801c054 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80165bc:	6a3b      	ldr	r3, [r7, #32]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d101      	bne.n	80165c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	e086      	b.n	80166d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80165cc:	2bff      	cmp	r3, #255	; 0xff
 80165ce:	d007      	beq.n	80165e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80165d6:	3301      	adds	r3, #1
 80165d8:	b2da      	uxtb	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80165e0:	6a3b      	ldr	r3, [r7, #32]
 80165e2:	68db      	ldr	r3, [r3, #12]
 80165e4:	899b      	ldrh	r3, [r3, #12]
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7f9 fa13 	bl	800fa14 <lwip_htons>
 80165ee:	4603      	mov	r3, r0
 80165f0:	b2db      	uxtb	r3, r3
 80165f2:	f003 0301 	and.w	r3, r3, #1
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d005      	beq.n	8016606 <tcp_zero_window_probe+0x72>
 80165fa:	6a3b      	ldr	r3, [r7, #32]
 80165fc:	891b      	ldrh	r3, [r3, #8]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d101      	bne.n	8016606 <tcp_zero_window_probe+0x72>
 8016602:	2301      	movs	r3, #1
 8016604:	e000      	b.n	8016608 <tcp_zero_window_probe+0x74>
 8016606:	2300      	movs	r3, #0
 8016608:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801660a:	7ffb      	ldrb	r3, [r7, #31]
 801660c:	2b00      	cmp	r3, #0
 801660e:	bf0c      	ite	eq
 8016610:	2301      	moveq	r3, #1
 8016612:	2300      	movne	r3, #0
 8016614:	b2db      	uxtb	r3, r3
 8016616:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801661c:	b299      	uxth	r1, r3
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	685b      	ldr	r3, [r3, #4]
 8016624:	8bba      	ldrh	r2, [r7, #28]
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7ff fdfa 	bl	8016220 <tcp_output_alloc_header>
 801662c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801662e:	69bb      	ldr	r3, [r7, #24]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d102      	bne.n	801663a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016634:	f04f 33ff 	mov.w	r3, #4294967295
 8016638:	e04c      	b.n	80166d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801663a:	69bb      	ldr	r3, [r7, #24]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016640:	7ffb      	ldrb	r3, [r7, #31]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d011      	beq.n	801666a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	899b      	ldrh	r3, [r3, #12]
 801664a:	b29b      	uxth	r3, r3
 801664c:	b21b      	sxth	r3, r3
 801664e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016652:	b21c      	sxth	r4, r3
 8016654:	2011      	movs	r0, #17
 8016656:	f7f9 f9dd 	bl	800fa14 <lwip_htons>
 801665a:	4603      	mov	r3, r0
 801665c:	b21b      	sxth	r3, r3
 801665e:	4323      	orrs	r3, r4
 8016660:	b21b      	sxth	r3, r3
 8016662:	b29a      	uxth	r2, r3
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	819a      	strh	r2, [r3, #12]
 8016668:	e010      	b.n	801668c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801666a:	69bb      	ldr	r3, [r7, #24]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	3314      	adds	r3, #20
 8016670:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016672:	6a3b      	ldr	r3, [r7, #32]
 8016674:	6858      	ldr	r0, [r3, #4]
 8016676:	6a3b      	ldr	r3, [r7, #32]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	891a      	ldrh	r2, [r3, #8]
 801667c:	6a3b      	ldr	r3, [r7, #32]
 801667e:	891b      	ldrh	r3, [r3, #8]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	b29b      	uxth	r3, r3
 8016684:	2201      	movs	r2, #1
 8016686:	6939      	ldr	r1, [r7, #16]
 8016688:	f7fa fe56 	bl	8011338 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801668c:	6a3b      	ldr	r3, [r7, #32]
 801668e:	68db      	ldr	r3, [r3, #12]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	4618      	mov	r0, r3
 8016694:	f7f9 f9d3 	bl	800fa3e <lwip_htonl>
 8016698:	4603      	mov	r3, r0
 801669a:	3301      	adds	r3, #1
 801669c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	1ad3      	subs	r3, r2, r3
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	da02      	bge.n	80166b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	68fa      	ldr	r2, [r7, #12]
 80166ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80166b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166b4:	2200      	movs	r2, #0
 80166b6:	69b9      	ldr	r1, [r7, #24]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f7ff fdef 	bl	801629c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3304      	adds	r3, #4
 80166c4:	69b9      	ldr	r1, [r7, #24]
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f7ff fe28 	bl	801631c <tcp_output_control_segment>
 80166cc:	4603      	mov	r3, r0
 80166ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80166d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	372c      	adds	r7, #44	; 0x2c
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd90      	pop	{r4, r7, pc}
 80166dc:	08022c5c 	.word	0x08022c5c
 80166e0:	08023454 	.word	0x08023454
 80166e4:	08022cb0 	.word	0x08022cb0

080166e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80166f0:	f7fa ff10 	bl	8011514 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80166f4:	4b0a      	ldr	r3, [pc, #40]	; (8016720 <tcpip_tcp_timer+0x38>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d103      	bne.n	8016704 <tcpip_tcp_timer+0x1c>
 80166fc:	4b09      	ldr	r3, [pc, #36]	; (8016724 <tcpip_tcp_timer+0x3c>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d005      	beq.n	8016710 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016704:	2200      	movs	r2, #0
 8016706:	4908      	ldr	r1, [pc, #32]	; (8016728 <tcpip_tcp_timer+0x40>)
 8016708:	20fa      	movs	r0, #250	; 0xfa
 801670a:	f000 f8f1 	bl	80168f0 <sys_timeout>
 801670e:	e002      	b.n	8016716 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016710:	4b06      	ldr	r3, [pc, #24]	; (801672c <tcpip_tcp_timer+0x44>)
 8016712:	2200      	movs	r2, #0
 8016714:	601a      	str	r2, [r3, #0]
  }
}
 8016716:	bf00      	nop
 8016718:	3708      	adds	r7, #8
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	200082c4 	.word	0x200082c4
 8016724:	200082d4 	.word	0x200082d4
 8016728:	080166e9 	.word	0x080166e9
 801672c:	20001070 	.word	0x20001070

08016730 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016734:	4b0a      	ldr	r3, [pc, #40]	; (8016760 <tcp_timer_needed+0x30>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d10f      	bne.n	801675c <tcp_timer_needed+0x2c>
 801673c:	4b09      	ldr	r3, [pc, #36]	; (8016764 <tcp_timer_needed+0x34>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d103      	bne.n	801674c <tcp_timer_needed+0x1c>
 8016744:	4b08      	ldr	r3, [pc, #32]	; (8016768 <tcp_timer_needed+0x38>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d007      	beq.n	801675c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801674c:	4b04      	ldr	r3, [pc, #16]	; (8016760 <tcp_timer_needed+0x30>)
 801674e:	2201      	movs	r2, #1
 8016750:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016752:	2200      	movs	r2, #0
 8016754:	4905      	ldr	r1, [pc, #20]	; (801676c <tcp_timer_needed+0x3c>)
 8016756:	20fa      	movs	r0, #250	; 0xfa
 8016758:	f000 f8ca 	bl	80168f0 <sys_timeout>
  }
}
 801675c:	bf00      	nop
 801675e:	bd80      	pop	{r7, pc}
 8016760:	20001070 	.word	0x20001070
 8016764:	200082c4 	.word	0x200082c4
 8016768:	200082d4 	.word	0x200082d4
 801676c:	080166e9 	.word	0x080166e9

08016770 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801677c:	2006      	movs	r0, #6
 801677e:	f7f9 fd9f 	bl	80102c0 <memp_malloc>
 8016782:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d109      	bne.n	801679e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d151      	bne.n	8016834 <sys_timeout_abs+0xc4>
 8016790:	4b2a      	ldr	r3, [pc, #168]	; (801683c <sys_timeout_abs+0xcc>)
 8016792:	22be      	movs	r2, #190	; 0xbe
 8016794:	492a      	ldr	r1, [pc, #168]	; (8016840 <sys_timeout_abs+0xd0>)
 8016796:	482b      	ldr	r0, [pc, #172]	; (8016844 <sys_timeout_abs+0xd4>)
 8016798:	f005 fc5c 	bl	801c054 <iprintf>
    return;
 801679c:	e04a      	b.n	8016834 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	2200      	movs	r2, #0
 80167a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	68ba      	ldr	r2, [r7, #8]
 80167a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	68fa      	ldr	r2, [r7, #12]
 80167b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80167b6:	4b24      	ldr	r3, [pc, #144]	; (8016848 <sys_timeout_abs+0xd8>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d103      	bne.n	80167c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80167be:	4a22      	ldr	r2, [pc, #136]	; (8016848 <sys_timeout_abs+0xd8>)
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	6013      	str	r3, [r2, #0]
    return;
 80167c4:	e037      	b.n	8016836 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	685a      	ldr	r2, [r3, #4]
 80167ca:	4b1f      	ldr	r3, [pc, #124]	; (8016848 <sys_timeout_abs+0xd8>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	685b      	ldr	r3, [r3, #4]
 80167d0:	1ad3      	subs	r3, r2, r3
 80167d2:	0fdb      	lsrs	r3, r3, #31
 80167d4:	f003 0301 	and.w	r3, r3, #1
 80167d8:	b2db      	uxtb	r3, r3
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d007      	beq.n	80167ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80167de:	4b1a      	ldr	r3, [pc, #104]	; (8016848 <sys_timeout_abs+0xd8>)
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80167e6:	4a18      	ldr	r2, [pc, #96]	; (8016848 <sys_timeout_abs+0xd8>)
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	6013      	str	r3, [r2, #0]
 80167ec:	e023      	b.n	8016836 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80167ee:	4b16      	ldr	r3, [pc, #88]	; (8016848 <sys_timeout_abs+0xd8>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	617b      	str	r3, [r7, #20]
 80167f4:	e01a      	b.n	801682c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d00b      	beq.n	8016816 <sys_timeout_abs+0xa6>
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	685a      	ldr	r2, [r3, #4]
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	1ad3      	subs	r3, r2, r3
 801680a:	0fdb      	lsrs	r3, r3, #31
 801680c:	f003 0301 	and.w	r3, r3, #1
 8016810:	b2db      	uxtb	r3, r3
 8016812:	2b00      	cmp	r3, #0
 8016814:	d007      	beq.n	8016826 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	693a      	ldr	r2, [r7, #16]
 8016822:	601a      	str	r2, [r3, #0]
        break;
 8016824:	e007      	b.n	8016836 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	617b      	str	r3, [r7, #20]
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d1e1      	bne.n	80167f6 <sys_timeout_abs+0x86>
 8016832:	e000      	b.n	8016836 <sys_timeout_abs+0xc6>
    return;
 8016834:	bf00      	nop
      }
    }
  }
}
 8016836:	3718      	adds	r7, #24
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}
 801683c:	08023478 	.word	0x08023478
 8016840:	080234ac 	.word	0x080234ac
 8016844:	080234ec 	.word	0x080234ec
 8016848:	20001068 	.word	0x20001068

0801684c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b086      	sub	sp, #24
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	4798      	blx	r3

  now = sys_now();
 801685e:	f7f9 f84b 	bl	800f8f8 <sys_now>
 8016862:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	4b0f      	ldr	r3, [pc, #60]	; (80168a8 <lwip_cyclic_timer+0x5c>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	4413      	add	r3, r2
 801686e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016870:	68fa      	ldr	r2, [r7, #12]
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	1ad3      	subs	r3, r2, r3
 8016876:	0fdb      	lsrs	r3, r3, #31
 8016878:	f003 0301 	and.w	r3, r3, #1
 801687c:	b2db      	uxtb	r3, r3
 801687e:	2b00      	cmp	r3, #0
 8016880:	d009      	beq.n	8016896 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	4413      	add	r3, r2
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	4907      	ldr	r1, [pc, #28]	; (80168ac <lwip_cyclic_timer+0x60>)
 801688e:	4618      	mov	r0, r3
 8016890:	f7ff ff6e 	bl	8016770 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016894:	e004      	b.n	80168a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016896:	687a      	ldr	r2, [r7, #4]
 8016898:	4904      	ldr	r1, [pc, #16]	; (80168ac <lwip_cyclic_timer+0x60>)
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f7ff ff68 	bl	8016770 <sys_timeout_abs>
}
 80168a0:	bf00      	nop
 80168a2:	3718      	adds	r7, #24
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	2000106c 	.word	0x2000106c
 80168ac:	0801684d 	.word	0x0801684d

080168b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80168b6:	2301      	movs	r3, #1
 80168b8:	607b      	str	r3, [r7, #4]
 80168ba:	e00e      	b.n	80168da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80168bc:	4a0a      	ldr	r2, [pc, #40]	; (80168e8 <sys_timeouts_init+0x38>)
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	4a07      	ldr	r2, [pc, #28]	; (80168e8 <sys_timeouts_init+0x38>)
 80168ca:	4413      	add	r3, r2
 80168cc:	461a      	mov	r2, r3
 80168ce:	4907      	ldr	r1, [pc, #28]	; (80168ec <sys_timeouts_init+0x3c>)
 80168d0:	f000 f80e 	bl	80168f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3301      	adds	r3, #1
 80168d8:	607b      	str	r3, [r7, #4]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2b04      	cmp	r3, #4
 80168de:	d9ed      	bls.n	80168bc <sys_timeouts_init+0xc>
  }
}
 80168e0:	bf00      	nop
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	08024958 	.word	0x08024958
 80168ec:	0801684d 	.word	0x0801684d

080168f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016902:	d306      	bcc.n	8016912 <sys_timeout+0x22>
 8016904:	4b0a      	ldr	r3, [pc, #40]	; (8016930 <sys_timeout+0x40>)
 8016906:	f240 1229 	movw	r2, #297	; 0x129
 801690a:	490a      	ldr	r1, [pc, #40]	; (8016934 <sys_timeout+0x44>)
 801690c:	480a      	ldr	r0, [pc, #40]	; (8016938 <sys_timeout+0x48>)
 801690e:	f005 fba1 	bl	801c054 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016912:	f7f8 fff1 	bl	800f8f8 <sys_now>
 8016916:	4602      	mov	r2, r0
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	4413      	add	r3, r2
 801691c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	68b9      	ldr	r1, [r7, #8]
 8016922:	6978      	ldr	r0, [r7, #20]
 8016924:	f7ff ff24 	bl	8016770 <sys_timeout_abs>
#endif
}
 8016928:	bf00      	nop
 801692a:	3718      	adds	r7, #24
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	08023478 	.word	0x08023478
 8016934:	08023514 	.word	0x08023514
 8016938:	080234ec 	.word	0x080234ec

0801693c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016940:	f005 fba0 	bl	801c084 <rand>
 8016944:	4603      	mov	r3, r0
 8016946:	b29b      	uxth	r3, r3
 8016948:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801694c:	b29b      	uxth	r3, r3
 801694e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016952:	b29a      	uxth	r2, r3
 8016954:	4b01      	ldr	r3, [pc, #4]	; (801695c <udp_init+0x20>)
 8016956:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016958:	bf00      	nop
 801695a:	bd80      	pop	{r7, pc}
 801695c:	2000007c 	.word	0x2000007c

08016960 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016960:	b480      	push	{r7}
 8016962:	b083      	sub	sp, #12
 8016964:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016966:	2300      	movs	r3, #0
 8016968:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801696a:	4b17      	ldr	r3, [pc, #92]	; (80169c8 <udp_new_port+0x68>)
 801696c:	881b      	ldrh	r3, [r3, #0]
 801696e:	1c5a      	adds	r2, r3, #1
 8016970:	b291      	uxth	r1, r2
 8016972:	4a15      	ldr	r2, [pc, #84]	; (80169c8 <udp_new_port+0x68>)
 8016974:	8011      	strh	r1, [r2, #0]
 8016976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801697a:	4293      	cmp	r3, r2
 801697c:	d103      	bne.n	8016986 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801697e:	4b12      	ldr	r3, [pc, #72]	; (80169c8 <udp_new_port+0x68>)
 8016980:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016984:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016986:	4b11      	ldr	r3, [pc, #68]	; (80169cc <udp_new_port+0x6c>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	603b      	str	r3, [r7, #0]
 801698c:	e011      	b.n	80169b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	8a5a      	ldrh	r2, [r3, #18]
 8016992:	4b0d      	ldr	r3, [pc, #52]	; (80169c8 <udp_new_port+0x68>)
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	429a      	cmp	r2, r3
 8016998:	d108      	bne.n	80169ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801699a:	88fb      	ldrh	r3, [r7, #6]
 801699c:	3301      	adds	r3, #1
 801699e:	80fb      	strh	r3, [r7, #6]
 80169a0:	88fb      	ldrh	r3, [r7, #6]
 80169a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80169a6:	d3e0      	bcc.n	801696a <udp_new_port+0xa>
        return 0;
 80169a8:	2300      	movs	r3, #0
 80169aa:	e007      	b.n	80169bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	603b      	str	r3, [r7, #0]
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d1ea      	bne.n	801698e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80169b8:	4b03      	ldr	r3, [pc, #12]	; (80169c8 <udp_new_port+0x68>)
 80169ba:	881b      	ldrh	r3, [r3, #0]
}
 80169bc:	4618      	mov	r0, r3
 80169be:	370c      	adds	r7, #12
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr
 80169c8:	2000007c 	.word	0x2000007c
 80169cc:	200082dc 	.word	0x200082dc

080169d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	4613      	mov	r3, r2
 80169dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d105      	bne.n	80169f0 <udp_input_local_match+0x20>
 80169e4:	4b27      	ldr	r3, [pc, #156]	; (8016a84 <udp_input_local_match+0xb4>)
 80169e6:	2287      	movs	r2, #135	; 0x87
 80169e8:	4927      	ldr	r1, [pc, #156]	; (8016a88 <udp_input_local_match+0xb8>)
 80169ea:	4828      	ldr	r0, [pc, #160]	; (8016a8c <udp_input_local_match+0xbc>)
 80169ec:	f005 fb32 	bl	801c054 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d105      	bne.n	8016a02 <udp_input_local_match+0x32>
 80169f6:	4b23      	ldr	r3, [pc, #140]	; (8016a84 <udp_input_local_match+0xb4>)
 80169f8:	2288      	movs	r2, #136	; 0x88
 80169fa:	4925      	ldr	r1, [pc, #148]	; (8016a90 <udp_input_local_match+0xc0>)
 80169fc:	4823      	ldr	r0, [pc, #140]	; (8016a8c <udp_input_local_match+0xbc>)
 80169fe:	f005 fb29 	bl	801c054 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	7a1b      	ldrb	r3, [r3, #8]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d00b      	beq.n	8016a22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	7a1a      	ldrb	r2, [r3, #8]
 8016a0e:	4b21      	ldr	r3, [pc, #132]	; (8016a94 <udp_input_local_match+0xc4>)
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016a16:	3301      	adds	r3, #1
 8016a18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d001      	beq.n	8016a22 <udp_input_local_match+0x52>
    return 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	e02b      	b.n	8016a7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016a22:	79fb      	ldrb	r3, [r7, #7]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d018      	beq.n	8016a5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d013      	beq.n	8016a56 <udp_input_local_match+0x86>
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d00f      	beq.n	8016a56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016a36:	4b17      	ldr	r3, [pc, #92]	; (8016a94 <udp_input_local_match+0xc4>)
 8016a38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a3e:	d00a      	beq.n	8016a56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	681a      	ldr	r2, [r3, #0]
 8016a44:	4b13      	ldr	r3, [pc, #76]	; (8016a94 <udp_input_local_match+0xc4>)
 8016a46:	695b      	ldr	r3, [r3, #20]
 8016a48:	405a      	eors	r2, r3
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	3308      	adds	r3, #8
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d110      	bne.n	8016a78 <udp_input_local_match+0xa8>
          return 1;
 8016a56:	2301      	movs	r3, #1
 8016a58:	e00f      	b.n	8016a7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d009      	beq.n	8016a74 <udp_input_local_match+0xa4>
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d005      	beq.n	8016a74 <udp_input_local_match+0xa4>
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	4b09      	ldr	r3, [pc, #36]	; (8016a94 <udp_input_local_match+0xc4>)
 8016a6e:	695b      	ldr	r3, [r3, #20]
 8016a70:	429a      	cmp	r2, r3
 8016a72:	d101      	bne.n	8016a78 <udp_input_local_match+0xa8>
        return 1;
 8016a74:	2301      	movs	r3, #1
 8016a76:	e000      	b.n	8016a7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016a78:	2300      	movs	r3, #0
}
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	3710      	adds	r7, #16
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}
 8016a82:	bf00      	nop
 8016a84:	08023560 	.word	0x08023560
 8016a88:	08023590 	.word	0x08023590
 8016a8c:	080235b4 	.word	0x080235b4
 8016a90:	080235dc 	.word	0x080235dc
 8016a94:	200051a0 	.word	0x200051a0

08016a98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016a98:	b590      	push	{r4, r7, lr}
 8016a9a:	b08d      	sub	sp, #52	; 0x34
 8016a9c:	af02      	add	r7, sp, #8
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d105      	bne.n	8016ab8 <udp_input+0x20>
 8016aac:	4b7c      	ldr	r3, [pc, #496]	; (8016ca0 <udp_input+0x208>)
 8016aae:	22cf      	movs	r2, #207	; 0xcf
 8016ab0:	497c      	ldr	r1, [pc, #496]	; (8016ca4 <udp_input+0x20c>)
 8016ab2:	487d      	ldr	r0, [pc, #500]	; (8016ca8 <udp_input+0x210>)
 8016ab4:	f005 face 	bl	801c054 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d105      	bne.n	8016aca <udp_input+0x32>
 8016abe:	4b78      	ldr	r3, [pc, #480]	; (8016ca0 <udp_input+0x208>)
 8016ac0:	22d0      	movs	r2, #208	; 0xd0
 8016ac2:	497a      	ldr	r1, [pc, #488]	; (8016cac <udp_input+0x214>)
 8016ac4:	4878      	ldr	r0, [pc, #480]	; (8016ca8 <udp_input+0x210>)
 8016ac6:	f005 fac5 	bl	801c054 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	895b      	ldrh	r3, [r3, #10]
 8016ace:	2b07      	cmp	r3, #7
 8016ad0:	d803      	bhi.n	8016ada <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f7fa fa36 	bl	8010f44 <pbuf_free>
    goto end;
 8016ad8:	e0de      	b.n	8016c98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016ae0:	4b73      	ldr	r3, [pc, #460]	; (8016cb0 <udp_input+0x218>)
 8016ae2:	695a      	ldr	r2, [r3, #20]
 8016ae4:	4b72      	ldr	r3, [pc, #456]	; (8016cb0 <udp_input+0x218>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4619      	mov	r1, r3
 8016aea:	4610      	mov	r0, r2
 8016aec:	f003 fdc6 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8016af0:	4603      	mov	r3, r0
 8016af2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7f8 ff8a 	bl	800fa14 <lwip_htons>
 8016b00:	4603      	mov	r3, r0
 8016b02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	885b      	ldrh	r3, [r3, #2]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f8 ff82 	bl	800fa14 <lwip_htons>
 8016b10:	4603      	mov	r3, r0
 8016b12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016b14:	2300      	movs	r3, #0
 8016b16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b20:	4b64      	ldr	r3, [pc, #400]	; (8016cb4 <udp_input+0x21c>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	627b      	str	r3, [r7, #36]	; 0x24
 8016b26:	e054      	b.n	8016bd2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2a:	8a5b      	ldrh	r3, [r3, #18]
 8016b2c:	89fa      	ldrh	r2, [r7, #14]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d14a      	bne.n	8016bc8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016b32:	7cfb      	ldrb	r3, [r7, #19]
 8016b34:	461a      	mov	r2, r3
 8016b36:	6839      	ldr	r1, [r7, #0]
 8016b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b3a:	f7ff ff49 	bl	80169d0 <udp_input_local_match>
 8016b3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d041      	beq.n	8016bc8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b46:	7c1b      	ldrb	r3, [r3, #16]
 8016b48:	f003 0304 	and.w	r3, r3, #4
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d11d      	bne.n	8016b8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016b50:	69fb      	ldr	r3, [r7, #28]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d102      	bne.n	8016b5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	61fb      	str	r3, [r7, #28]
 8016b5a:	e017      	b.n	8016b8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016b5c:	7cfb      	ldrb	r3, [r7, #19]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d014      	beq.n	8016b8c <udp_input+0xf4>
 8016b62:	4b53      	ldr	r3, [pc, #332]	; (8016cb0 <udp_input+0x218>)
 8016b64:	695b      	ldr	r3, [r3, #20]
 8016b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b6a:	d10f      	bne.n	8016b8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	681a      	ldr	r2, [r3, #0]
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	3304      	adds	r3, #4
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d008      	beq.n	8016b8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7c:	681a      	ldr	r2, [r3, #0]
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	3304      	adds	r3, #4
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d101      	bne.n	8016b8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8e:	8a9b      	ldrh	r3, [r3, #20]
 8016b90:	8a3a      	ldrh	r2, [r7, #16]
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d118      	bne.n	8016bc8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d005      	beq.n	8016baa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba0:	685a      	ldr	r2, [r3, #4]
 8016ba2:	4b43      	ldr	r3, [pc, #268]	; (8016cb0 <udp_input+0x218>)
 8016ba4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d10e      	bne.n	8016bc8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016baa:	6a3b      	ldr	r3, [r7, #32]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d014      	beq.n	8016bda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb2:	68da      	ldr	r2, [r3, #12]
 8016bb4:	6a3b      	ldr	r3, [r7, #32]
 8016bb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016bb8:	4b3e      	ldr	r3, [pc, #248]	; (8016cb4 <udp_input+0x21c>)
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bbe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016bc0:	4a3c      	ldr	r2, [pc, #240]	; (8016cb4 <udp_input+0x21c>)
 8016bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016bc6:	e008      	b.n	8016bda <udp_input+0x142>
      }
    }

    prev = pcb;
 8016bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bce:	68db      	ldr	r3, [r3, #12]
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8016bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d1a7      	bne.n	8016b28 <udp_input+0x90>
 8016bd8:	e000      	b.n	8016bdc <udp_input+0x144>
        break;
 8016bda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d101      	bne.n	8016be6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d002      	beq.n	8016bf2 <udp_input+0x15a>
    for_us = 1;
 8016bec:	2301      	movs	r3, #1
 8016bee:	76fb      	strb	r3, [r7, #27]
 8016bf0:	e00a      	b.n	8016c08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	4b2d      	ldr	r3, [pc, #180]	; (8016cb0 <udp_input+0x218>)
 8016bfa:	695b      	ldr	r3, [r3, #20]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	bf0c      	ite	eq
 8016c00:	2301      	moveq	r3, #1
 8016c02:	2300      	movne	r3, #0
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016c08:	7efb      	ldrb	r3, [r7, #27]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d041      	beq.n	8016c92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016c0e:	2108      	movs	r1, #8
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f7fa f911 	bl	8010e38 <pbuf_remove_header>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d00a      	beq.n	8016c32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016c1c:	4b20      	ldr	r3, [pc, #128]	; (8016ca0 <udp_input+0x208>)
 8016c1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016c22:	4925      	ldr	r1, [pc, #148]	; (8016cb8 <udp_input+0x220>)
 8016c24:	4820      	ldr	r0, [pc, #128]	; (8016ca8 <udp_input+0x210>)
 8016c26:	f005 fa15 	bl	801c054 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7fa f98a 	bl	8010f44 <pbuf_free>
      goto end;
 8016c30:	e032      	b.n	8016c98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d012      	beq.n	8016c5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3a:	699b      	ldr	r3, [r3, #24]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d00a      	beq.n	8016c56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c42:	699c      	ldr	r4, [r3, #24]
 8016c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c46:	69d8      	ldr	r0, [r3, #28]
 8016c48:	8a3b      	ldrh	r3, [r7, #16]
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	4b1b      	ldr	r3, [pc, #108]	; (8016cbc <udp_input+0x224>)
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016c54:	e021      	b.n	8016c9a <udp_input+0x202>
        pbuf_free(p);
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7fa f974 	bl	8010f44 <pbuf_free>
        goto end;
 8016c5c:	e01c      	b.n	8016c98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016c5e:	7cfb      	ldrb	r3, [r7, #19]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d112      	bne.n	8016c8a <udp_input+0x1f2>
 8016c64:	4b12      	ldr	r3, [pc, #72]	; (8016cb0 <udp_input+0x218>)
 8016c66:	695b      	ldr	r3, [r3, #20]
 8016c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c6c:	2be0      	cmp	r3, #224	; 0xe0
 8016c6e:	d00c      	beq.n	8016c8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016c70:	4b0f      	ldr	r3, [pc, #60]	; (8016cb0 <udp_input+0x218>)
 8016c72:	899b      	ldrh	r3, [r3, #12]
 8016c74:	3308      	adds	r3, #8
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	b21b      	sxth	r3, r3
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f7fa f94e 	bl	8010f1e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016c82:	2103      	movs	r1, #3
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f003 f9bd 	bl	801a004 <icmp_dest_unreach>
      pbuf_free(p);
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	f7fa f95a 	bl	8010f44 <pbuf_free>
  return;
 8016c90:	e003      	b.n	8016c9a <udp_input+0x202>
    pbuf_free(p);
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f7fa f956 	bl	8010f44 <pbuf_free>
  return;
 8016c98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016c9a:	372c      	adds	r7, #44	; 0x2c
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd90      	pop	{r4, r7, pc}
 8016ca0:	08023560 	.word	0x08023560
 8016ca4:	08023604 	.word	0x08023604
 8016ca8:	080235b4 	.word	0x080235b4
 8016cac:	0802361c 	.word	0x0802361c
 8016cb0:	200051a0 	.word	0x200051a0
 8016cb4:	200082dc 	.word	0x200082dc
 8016cb8:	08023638 	.word	0x08023638
 8016cbc:	200051b0 	.word	0x200051b0

08016cc0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b088      	sub	sp, #32
 8016cc4:	af02      	add	r7, sp, #8
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d109      	bne.n	8016ce8 <udp_sendto_if+0x28>
 8016cd4:	4b2e      	ldr	r3, [pc, #184]	; (8016d90 <udp_sendto_if+0xd0>)
 8016cd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cda:	492e      	ldr	r1, [pc, #184]	; (8016d94 <udp_sendto_if+0xd4>)
 8016cdc:	482e      	ldr	r0, [pc, #184]	; (8016d98 <udp_sendto_if+0xd8>)
 8016cde:	f005 f9b9 	bl	801c054 <iprintf>
 8016ce2:	f06f 030f 	mvn.w	r3, #15
 8016ce6:	e04f      	b.n	8016d88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d109      	bne.n	8016d02 <udp_sendto_if+0x42>
 8016cee:	4b28      	ldr	r3, [pc, #160]	; (8016d90 <udp_sendto_if+0xd0>)
 8016cf0:	f240 2281 	movw	r2, #641	; 0x281
 8016cf4:	4929      	ldr	r1, [pc, #164]	; (8016d9c <udp_sendto_if+0xdc>)
 8016cf6:	4828      	ldr	r0, [pc, #160]	; (8016d98 <udp_sendto_if+0xd8>)
 8016cf8:	f005 f9ac 	bl	801c054 <iprintf>
 8016cfc:	f06f 030f 	mvn.w	r3, #15
 8016d00:	e042      	b.n	8016d88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d109      	bne.n	8016d1c <udp_sendto_if+0x5c>
 8016d08:	4b21      	ldr	r3, [pc, #132]	; (8016d90 <udp_sendto_if+0xd0>)
 8016d0a:	f240 2282 	movw	r2, #642	; 0x282
 8016d0e:	4924      	ldr	r1, [pc, #144]	; (8016da0 <udp_sendto_if+0xe0>)
 8016d10:	4821      	ldr	r0, [pc, #132]	; (8016d98 <udp_sendto_if+0xd8>)
 8016d12:	f005 f99f 	bl	801c054 <iprintf>
 8016d16:	f06f 030f 	mvn.w	r3, #15
 8016d1a:	e035      	b.n	8016d88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016d1c:	6a3b      	ldr	r3, [r7, #32]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d109      	bne.n	8016d36 <udp_sendto_if+0x76>
 8016d22:	4b1b      	ldr	r3, [pc, #108]	; (8016d90 <udp_sendto_if+0xd0>)
 8016d24:	f240 2283 	movw	r2, #643	; 0x283
 8016d28:	491e      	ldr	r1, [pc, #120]	; (8016da4 <udp_sendto_if+0xe4>)
 8016d2a:	481b      	ldr	r0, [pc, #108]	; (8016d98 <udp_sendto_if+0xd8>)
 8016d2c:	f005 f992 	bl	801c054 <iprintf>
 8016d30:	f06f 030f 	mvn.w	r3, #15
 8016d34:	e028      	b.n	8016d88 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d009      	beq.n	8016d50 <udp_sendto_if+0x90>
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d005      	beq.n	8016d50 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d4c:	2be0      	cmp	r3, #224	; 0xe0
 8016d4e:	d103      	bne.n	8016d58 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016d50:	6a3b      	ldr	r3, [r7, #32]
 8016d52:	3304      	adds	r3, #4
 8016d54:	617b      	str	r3, [r7, #20]
 8016d56:	e00b      	b.n	8016d70 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681a      	ldr	r2, [r3, #0]
 8016d5c:	6a3b      	ldr	r3, [r7, #32]
 8016d5e:	3304      	adds	r3, #4
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d002      	beq.n	8016d6c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016d66:	f06f 0303 	mvn.w	r3, #3
 8016d6a:	e00d      	b.n	8016d88 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016d70:	887a      	ldrh	r2, [r7, #2]
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	9301      	str	r3, [sp, #4]
 8016d76:	6a3b      	ldr	r3, [r7, #32]
 8016d78:	9300      	str	r3, [sp, #0]
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	68b9      	ldr	r1, [r7, #8]
 8016d80:	68f8      	ldr	r0, [r7, #12]
 8016d82:	f000 f811 	bl	8016da8 <udp_sendto_if_src>
 8016d86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	08023560 	.word	0x08023560
 8016d94:	080236d4 	.word	0x080236d4
 8016d98:	080235b4 	.word	0x080235b4
 8016d9c:	080236f0 	.word	0x080236f0
 8016da0:	0802370c 	.word	0x0802370c
 8016da4:	0802372c 	.word	0x0802372c

08016da8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b08c      	sub	sp, #48	; 0x30
 8016dac:	af04      	add	r7, sp, #16
 8016dae:	60f8      	str	r0, [r7, #12]
 8016db0:	60b9      	str	r1, [r7, #8]
 8016db2:	607a      	str	r2, [r7, #4]
 8016db4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d109      	bne.n	8016dd0 <udp_sendto_if_src+0x28>
 8016dbc:	4b65      	ldr	r3, [pc, #404]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016dbe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016dc2:	4965      	ldr	r1, [pc, #404]	; (8016f58 <udp_sendto_if_src+0x1b0>)
 8016dc4:	4865      	ldr	r0, [pc, #404]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016dc6:	f005 f945 	bl	801c054 <iprintf>
 8016dca:	f06f 030f 	mvn.w	r3, #15
 8016dce:	e0bc      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d109      	bne.n	8016dea <udp_sendto_if_src+0x42>
 8016dd6:	4b5f      	ldr	r3, [pc, #380]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016dd8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016ddc:	4960      	ldr	r1, [pc, #384]	; (8016f60 <udp_sendto_if_src+0x1b8>)
 8016dde:	485f      	ldr	r0, [pc, #380]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016de0:	f005 f938 	bl	801c054 <iprintf>
 8016de4:	f06f 030f 	mvn.w	r3, #15
 8016de8:	e0af      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d109      	bne.n	8016e04 <udp_sendto_if_src+0x5c>
 8016df0:	4b58      	ldr	r3, [pc, #352]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016df2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016df6:	495b      	ldr	r1, [pc, #364]	; (8016f64 <udp_sendto_if_src+0x1bc>)
 8016df8:	4858      	ldr	r0, [pc, #352]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016dfa:	f005 f92b 	bl	801c054 <iprintf>
 8016dfe:	f06f 030f 	mvn.w	r3, #15
 8016e02:	e0a2      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d109      	bne.n	8016e1e <udp_sendto_if_src+0x76>
 8016e0a:	4b52      	ldr	r3, [pc, #328]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016e0c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016e10:	4955      	ldr	r1, [pc, #340]	; (8016f68 <udp_sendto_if_src+0x1c0>)
 8016e12:	4852      	ldr	r0, [pc, #328]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016e14:	f005 f91e 	bl	801c054 <iprintf>
 8016e18:	f06f 030f 	mvn.w	r3, #15
 8016e1c:	e095      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d109      	bne.n	8016e38 <udp_sendto_if_src+0x90>
 8016e24:	4b4b      	ldr	r3, [pc, #300]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016e26:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016e2a:	4950      	ldr	r1, [pc, #320]	; (8016f6c <udp_sendto_if_src+0x1c4>)
 8016e2c:	484b      	ldr	r0, [pc, #300]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016e2e:	f005 f911 	bl	801c054 <iprintf>
 8016e32:	f06f 030f 	mvn.w	r3, #15
 8016e36:	e088      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	8a5b      	ldrh	r3, [r3, #18]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d10f      	bne.n	8016e60 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016e40:	68f9      	ldr	r1, [r7, #12]
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	8a5b      	ldrh	r3, [r3, #18]
 8016e46:	461a      	mov	r2, r3
 8016e48:	68f8      	ldr	r0, [r7, #12]
 8016e4a:	f000 f893 	bl	8016f74 <udp_bind>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016e52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d002      	beq.n	8016e60 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016e5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e5e:	e074      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	891b      	ldrh	r3, [r3, #8]
 8016e64:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d902      	bls.n	8016e72 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e70:	e06b      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016e72:	2108      	movs	r1, #8
 8016e74:	68b8      	ldr	r0, [r7, #8]
 8016e76:	f7f9 ffcf 	bl	8010e18 <pbuf_add_header>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d015      	beq.n	8016eac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016e80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e84:	2108      	movs	r1, #8
 8016e86:	2022      	movs	r0, #34	; 0x22
 8016e88:	f7f9 fd7c 	bl	8010984 <pbuf_alloc>
 8016e8c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d102      	bne.n	8016e9a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016e94:	f04f 33ff 	mov.w	r3, #4294967295
 8016e98:	e057      	b.n	8016f4a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	891b      	ldrh	r3, [r3, #8]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d006      	beq.n	8016eb0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016ea2:	68b9      	ldr	r1, [r7, #8]
 8016ea4:	69f8      	ldr	r0, [r7, #28]
 8016ea6:	f7fa f965 	bl	8011174 <pbuf_chain>
 8016eaa:	e001      	b.n	8016eb0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016eb0:	69fb      	ldr	r3, [r7, #28]
 8016eb2:	895b      	ldrh	r3, [r3, #10]
 8016eb4:	2b07      	cmp	r3, #7
 8016eb6:	d806      	bhi.n	8016ec6 <udp_sendto_if_src+0x11e>
 8016eb8:	4b26      	ldr	r3, [pc, #152]	; (8016f54 <udp_sendto_if_src+0x1ac>)
 8016eba:	f240 320e 	movw	r2, #782	; 0x30e
 8016ebe:	492c      	ldr	r1, [pc, #176]	; (8016f70 <udp_sendto_if_src+0x1c8>)
 8016ec0:	4826      	ldr	r0, [pc, #152]	; (8016f5c <udp_sendto_if_src+0x1b4>)
 8016ec2:	f005 f8c7 	bl	801c054 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	8a5b      	ldrh	r3, [r3, #18]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7f8 fd9f 	bl	800fa14 <lwip_htons>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	461a      	mov	r2, r3
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016ede:	887b      	ldrh	r3, [r7, #2]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7f8 fd97 	bl	800fa14 <lwip_htons>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	461a      	mov	r2, r3
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	719a      	strb	r2, [r3, #6]
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	891b      	ldrh	r3, [r3, #8]
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7f8 fd89 	bl	800fa14 <lwip_htons>
 8016f02:	4603      	mov	r3, r0
 8016f04:	461a      	mov	r2, r3
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016f0a:	2311      	movs	r3, #17
 8016f0c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	7adb      	ldrb	r3, [r3, #11]
 8016f12:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	7a9b      	ldrb	r3, [r3, #10]
 8016f18:	7cb9      	ldrb	r1, [r7, #18]
 8016f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f1c:	9202      	str	r2, [sp, #8]
 8016f1e:	7cfa      	ldrb	r2, [r7, #19]
 8016f20:	9201      	str	r2, [sp, #4]
 8016f22:	9300      	str	r3, [sp, #0]
 8016f24:	460b      	mov	r3, r1
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f2a:	69f8      	ldr	r0, [r7, #28]
 8016f2c:	f003 faf8 	bl	801a520 <ip4_output_if_src>
 8016f30:	4603      	mov	r3, r0
 8016f32:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016f34:	69fa      	ldr	r2, [r7, #28]
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d004      	beq.n	8016f46 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016f3c:	69f8      	ldr	r0, [r7, #28]
 8016f3e:	f7fa f801 	bl	8010f44 <pbuf_free>
    q = NULL;
 8016f42:	2300      	movs	r3, #0
 8016f44:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016f46:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3720      	adds	r7, #32
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	08023560 	.word	0x08023560
 8016f58:	0802374c 	.word	0x0802374c
 8016f5c:	080235b4 	.word	0x080235b4
 8016f60:	0802376c 	.word	0x0802376c
 8016f64:	0802378c 	.word	0x0802378c
 8016f68:	080237b0 	.word	0x080237b0
 8016f6c:	080237d4 	.word	0x080237d4
 8016f70:	080237f8 	.word	0x080237f8

08016f74 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b086      	sub	sp, #24
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	60f8      	str	r0, [r7, #12]
 8016f7c:	60b9      	str	r1, [r7, #8]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d101      	bne.n	8016f8c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016f88:	4b39      	ldr	r3, [pc, #228]	; (8017070 <udp_bind+0xfc>)
 8016f8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d109      	bne.n	8016fa6 <udp_bind+0x32>
 8016f92:	4b38      	ldr	r3, [pc, #224]	; (8017074 <udp_bind+0x100>)
 8016f94:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016f98:	4937      	ldr	r1, [pc, #220]	; (8017078 <udp_bind+0x104>)
 8016f9a:	4838      	ldr	r0, [pc, #224]	; (801707c <udp_bind+0x108>)
 8016f9c:	f005 f85a 	bl	801c054 <iprintf>
 8016fa0:	f06f 030f 	mvn.w	r3, #15
 8016fa4:	e060      	b.n	8017068 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016faa:	4b35      	ldr	r3, [pc, #212]	; (8017080 <udp_bind+0x10c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	617b      	str	r3, [r7, #20]
 8016fb0:	e009      	b.n	8016fc6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016fb2:	68fa      	ldr	r2, [r7, #12]
 8016fb4:	697b      	ldr	r3, [r7, #20]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d102      	bne.n	8016fc0 <udp_bind+0x4c>
      rebind = 1;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8016fbe:	e005      	b.n	8016fcc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	617b      	str	r3, [r7, #20]
 8016fc6:	697b      	ldr	r3, [r7, #20]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d1f2      	bne.n	8016fb2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016fcc:	88fb      	ldrh	r3, [r7, #6]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d109      	bne.n	8016fe6 <udp_bind+0x72>
    port = udp_new_port();
 8016fd2:	f7ff fcc5 	bl	8016960 <udp_new_port>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016fda:	88fb      	ldrh	r3, [r7, #6]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d12c      	bne.n	801703a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016fe0:	f06f 0307 	mvn.w	r3, #7
 8016fe4:	e040      	b.n	8017068 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fe6:	4b26      	ldr	r3, [pc, #152]	; (8017080 <udp_bind+0x10c>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	617b      	str	r3, [r7, #20]
 8016fec:	e022      	b.n	8017034 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016fee:	68fa      	ldr	r2, [r7, #12]
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d01b      	beq.n	801702e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	8a5b      	ldrh	r3, [r3, #18]
 8016ffa:	88fa      	ldrh	r2, [r7, #6]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d116      	bne.n	801702e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017008:	429a      	cmp	r2, r3
 801700a:	d00d      	beq.n	8017028 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d00a      	beq.n	8017028 <udp_bind+0xb4>
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d006      	beq.n	8017028 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801701a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801701c:	2b00      	cmp	r3, #0
 801701e:	d003      	beq.n	8017028 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d102      	bne.n	801702e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017028:	f06f 0307 	mvn.w	r3, #7
 801702c:	e01c      	b.n	8017068 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	68db      	ldr	r3, [r3, #12]
 8017032:	617b      	str	r3, [r7, #20]
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d1d9      	bne.n	8016fee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d002      	beq.n	8017046 <udp_bind+0xd2>
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	e000      	b.n	8017048 <udp_bind+0xd4>
 8017046:	2300      	movs	r3, #0
 8017048:	68fa      	ldr	r2, [r7, #12]
 801704a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	88fa      	ldrh	r2, [r7, #6]
 8017050:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017052:	7cfb      	ldrb	r3, [r7, #19]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d106      	bne.n	8017066 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017058:	4b09      	ldr	r3, [pc, #36]	; (8017080 <udp_bind+0x10c>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017060:	4a07      	ldr	r2, [pc, #28]	; (8017080 <udp_bind+0x10c>)
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017066:	2300      	movs	r3, #0
}
 8017068:	4618      	mov	r0, r3
 801706a:	3718      	adds	r7, #24
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	08024980 	.word	0x08024980
 8017074:	08023560 	.word	0x08023560
 8017078:	08023828 	.word	0x08023828
 801707c:	080235b4 	.word	0x080235b4
 8017080:	200082dc 	.word	0x200082dc

08017084 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b086      	sub	sp, #24
 8017088:	af00      	add	r7, sp, #0
 801708a:	60f8      	str	r0, [r7, #12]
 801708c:	60b9      	str	r1, [r7, #8]
 801708e:	4613      	mov	r3, r2
 8017090:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d109      	bne.n	80170ac <udp_connect+0x28>
 8017098:	4b2c      	ldr	r3, [pc, #176]	; (801714c <udp_connect+0xc8>)
 801709a:	f240 4235 	movw	r2, #1077	; 0x435
 801709e:	492c      	ldr	r1, [pc, #176]	; (8017150 <udp_connect+0xcc>)
 80170a0:	482c      	ldr	r0, [pc, #176]	; (8017154 <udp_connect+0xd0>)
 80170a2:	f004 ffd7 	bl	801c054 <iprintf>
 80170a6:	f06f 030f 	mvn.w	r3, #15
 80170aa:	e04b      	b.n	8017144 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d109      	bne.n	80170c6 <udp_connect+0x42>
 80170b2:	4b26      	ldr	r3, [pc, #152]	; (801714c <udp_connect+0xc8>)
 80170b4:	f240 4236 	movw	r2, #1078	; 0x436
 80170b8:	4927      	ldr	r1, [pc, #156]	; (8017158 <udp_connect+0xd4>)
 80170ba:	4826      	ldr	r0, [pc, #152]	; (8017154 <udp_connect+0xd0>)
 80170bc:	f004 ffca 	bl	801c054 <iprintf>
 80170c0:	f06f 030f 	mvn.w	r3, #15
 80170c4:	e03e      	b.n	8017144 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	8a5b      	ldrh	r3, [r3, #18]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d10f      	bne.n	80170ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80170ce:	68f9      	ldr	r1, [r7, #12]
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	8a5b      	ldrh	r3, [r3, #18]
 80170d4:	461a      	mov	r2, r3
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7ff ff4c 	bl	8016f74 <udp_bind>
 80170dc:	4603      	mov	r3, r0
 80170de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80170e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d002      	beq.n	80170ee <udp_connect+0x6a>
      return err;
 80170e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80170ec:	e02a      	b.n	8017144 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d002      	beq.n	80170fa <udp_connect+0x76>
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	e000      	b.n	80170fc <udp_connect+0x78>
 80170fa:	2300      	movs	r3, #0
 80170fc:	68fa      	ldr	r2, [r7, #12]
 80170fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	88fa      	ldrh	r2, [r7, #6]
 8017104:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	7c1b      	ldrb	r3, [r3, #16]
 801710a:	f043 0304 	orr.w	r3, r3, #4
 801710e:	b2da      	uxtb	r2, r3
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017114:	4b11      	ldr	r3, [pc, #68]	; (801715c <udp_connect+0xd8>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	617b      	str	r3, [r7, #20]
 801711a:	e008      	b.n	801712e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801711c:	68fa      	ldr	r2, [r7, #12]
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	429a      	cmp	r2, r3
 8017122:	d101      	bne.n	8017128 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017124:	2300      	movs	r3, #0
 8017126:	e00d      	b.n	8017144 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	617b      	str	r3, [r7, #20]
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d1f3      	bne.n	801711c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017134:	4b09      	ldr	r3, [pc, #36]	; (801715c <udp_connect+0xd8>)
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801713c:	4a07      	ldr	r2, [pc, #28]	; (801715c <udp_connect+0xd8>)
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3718      	adds	r7, #24
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	08023560 	.word	0x08023560
 8017150:	08023840 	.word	0x08023840
 8017154:	080235b4 	.word	0x080235b4
 8017158:	0802385c 	.word	0x0802385c
 801715c:	200082dc 	.word	0x200082dc

08017160 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d107      	bne.n	8017182 <udp_recv+0x22>
 8017172:	4b08      	ldr	r3, [pc, #32]	; (8017194 <udp_recv+0x34>)
 8017174:	f240 428a 	movw	r2, #1162	; 0x48a
 8017178:	4907      	ldr	r1, [pc, #28]	; (8017198 <udp_recv+0x38>)
 801717a:	4808      	ldr	r0, [pc, #32]	; (801719c <udp_recv+0x3c>)
 801717c:	f004 ff6a 	bl	801c054 <iprintf>
 8017180:	e005      	b.n	801718e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	68ba      	ldr	r2, [r7, #8]
 8017186:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	61da      	str	r2, [r3, #28]
}
 801718e:	3710      	adds	r7, #16
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	08023560 	.word	0x08023560
 8017198:	08023894 	.word	0x08023894
 801719c:	080235b4 	.word	0x080235b4

080171a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b084      	sub	sp, #16
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d107      	bne.n	80171be <udp_remove+0x1e>
 80171ae:	4b19      	ldr	r3, [pc, #100]	; (8017214 <udp_remove+0x74>)
 80171b0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80171b4:	4918      	ldr	r1, [pc, #96]	; (8017218 <udp_remove+0x78>)
 80171b6:	4819      	ldr	r0, [pc, #100]	; (801721c <udp_remove+0x7c>)
 80171b8:	f004 ff4c 	bl	801c054 <iprintf>
 80171bc:	e026      	b.n	801720c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80171be:	4b18      	ldr	r3, [pc, #96]	; (8017220 <udp_remove+0x80>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d105      	bne.n	80171d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80171c8:	4b15      	ldr	r3, [pc, #84]	; (8017220 <udp_remove+0x80>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	68db      	ldr	r3, [r3, #12]
 80171ce:	4a14      	ldr	r2, [pc, #80]	; (8017220 <udp_remove+0x80>)
 80171d0:	6013      	str	r3, [r2, #0]
 80171d2:	e017      	b.n	8017204 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80171d4:	4b12      	ldr	r3, [pc, #72]	; (8017220 <udp_remove+0x80>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	60fb      	str	r3, [r7, #12]
 80171da:	e010      	b.n	80171fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	68db      	ldr	r3, [r3, #12]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d009      	beq.n	80171f8 <udp_remove+0x58>
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	687a      	ldr	r2, [r7, #4]
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d104      	bne.n	80171f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	68da      	ldr	r2, [r3, #12]
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	60da      	str	r2, [r3, #12]
        break;
 80171f6:	e005      	b.n	8017204 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	60fb      	str	r3, [r7, #12]
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d1eb      	bne.n	80171dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017204:	6879      	ldr	r1, [r7, #4]
 8017206:	2000      	movs	r0, #0
 8017208:	f7f9 f8a6 	bl	8010358 <memp_free>
}
 801720c:	3710      	adds	r7, #16
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop
 8017214:	08023560 	.word	0x08023560
 8017218:	080238ac 	.word	0x080238ac
 801721c:	080235b4 	.word	0x080235b4
 8017220:	200082dc 	.word	0x200082dc

08017224 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801722a:	2000      	movs	r0, #0
 801722c:	f7f9 f848 	bl	80102c0 <memp_malloc>
 8017230:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d007      	beq.n	8017248 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017238:	2220      	movs	r2, #32
 801723a:	2100      	movs	r1, #0
 801723c:	6878      	ldr	r0, [r7, #4]
 801723e:	f004 f9fc 	bl	801b63a <memset>
    pcb->ttl = UDP_TTL;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	22ff      	movs	r2, #255	; 0xff
 8017246:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017248:	687b      	ldr	r3, [r7, #4]
}
 801724a:	4618      	mov	r0, r3
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
	...

08017254 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d01e      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d01a      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d017      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d013      	beq.n	80172a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801727a:	4b0d      	ldr	r3, [pc, #52]	; (80172b0 <udp_netif_ip_addr_changed+0x5c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	60fb      	str	r3, [r7, #12]
 8017280:	e00c      	b.n	801729c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	429a      	cmp	r2, r3
 801728c:	d103      	bne.n	8017296 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	68db      	ldr	r3, [r3, #12]
 801729a:	60fb      	str	r3, [r7, #12]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1ef      	bne.n	8017282 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80172a2:	bf00      	nop
 80172a4:	3714      	adds	r7, #20
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	200082dc 	.word	0x200082dc

080172b4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80172b8:	4b20      	ldr	r3, [pc, #128]	; (801733c <dhcp_inc_pcb_refcount+0x88>)
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d133      	bne.n	8017328 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80172c0:	4b1f      	ldr	r3, [pc, #124]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d005      	beq.n	80172d4 <dhcp_inc_pcb_refcount+0x20>
 80172c8:	4b1e      	ldr	r3, [pc, #120]	; (8017344 <dhcp_inc_pcb_refcount+0x90>)
 80172ca:	22e5      	movs	r2, #229	; 0xe5
 80172cc:	491e      	ldr	r1, [pc, #120]	; (8017348 <dhcp_inc_pcb_refcount+0x94>)
 80172ce:	481f      	ldr	r0, [pc, #124]	; (801734c <dhcp_inc_pcb_refcount+0x98>)
 80172d0:	f004 fec0 	bl	801c054 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80172d4:	f7ff ffa6 	bl	8017224 <udp_new>
 80172d8:	4602      	mov	r2, r0
 80172da:	4b19      	ldr	r3, [pc, #100]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 80172dc:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80172de:	4b18      	ldr	r3, [pc, #96]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d102      	bne.n	80172ec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80172e6:	f04f 33ff 	mov.w	r3, #4294967295
 80172ea:	e024      	b.n	8017336 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80172ec:	4b14      	ldr	r3, [pc, #80]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	7a5a      	ldrb	r2, [r3, #9]
 80172f2:	4b13      	ldr	r3, [pc, #76]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	f042 0220 	orr.w	r2, r2, #32
 80172fa:	b2d2      	uxtb	r2, r2
 80172fc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80172fe:	4b10      	ldr	r3, [pc, #64]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2244      	movs	r2, #68	; 0x44
 8017304:	4912      	ldr	r1, [pc, #72]	; (8017350 <dhcp_inc_pcb_refcount+0x9c>)
 8017306:	4618      	mov	r0, r3
 8017308:	f7ff fe34 	bl	8016f74 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801730c:	4b0c      	ldr	r3, [pc, #48]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2243      	movs	r2, #67	; 0x43
 8017312:	490f      	ldr	r1, [pc, #60]	; (8017350 <dhcp_inc_pcb_refcount+0x9c>)
 8017314:	4618      	mov	r0, r3
 8017316:	f7ff feb5 	bl	8017084 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801731a:	4b09      	ldr	r3, [pc, #36]	; (8017340 <dhcp_inc_pcb_refcount+0x8c>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	2200      	movs	r2, #0
 8017320:	490c      	ldr	r1, [pc, #48]	; (8017354 <dhcp_inc_pcb_refcount+0xa0>)
 8017322:	4618      	mov	r0, r3
 8017324:	f7ff ff1c 	bl	8017160 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8017328:	4b04      	ldr	r3, [pc, #16]	; (801733c <dhcp_inc_pcb_refcount+0x88>)
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	3301      	adds	r3, #1
 801732e:	b2da      	uxtb	r2, r3
 8017330:	4b02      	ldr	r3, [pc, #8]	; (801733c <dhcp_inc_pcb_refcount+0x88>)
 8017332:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8017334:	2300      	movs	r3, #0
}
 8017336:	4618      	mov	r0, r3
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	20001078 	.word	0x20001078
 8017340:	20001074 	.word	0x20001074
 8017344:	080238c4 	.word	0x080238c4
 8017348:	080238fc 	.word	0x080238fc
 801734c:	08023924 	.word	0x08023924
 8017350:	08024980 	.word	0x08024980
 8017354:	08018b71 	.word	0x08018b71

08017358 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801735c:	4b0e      	ldr	r3, [pc, #56]	; (8017398 <dhcp_dec_pcb_refcount+0x40>)
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d105      	bne.n	8017370 <dhcp_dec_pcb_refcount+0x18>
 8017364:	4b0d      	ldr	r3, [pc, #52]	; (801739c <dhcp_dec_pcb_refcount+0x44>)
 8017366:	22ff      	movs	r2, #255	; 0xff
 8017368:	490d      	ldr	r1, [pc, #52]	; (80173a0 <dhcp_dec_pcb_refcount+0x48>)
 801736a:	480e      	ldr	r0, [pc, #56]	; (80173a4 <dhcp_dec_pcb_refcount+0x4c>)
 801736c:	f004 fe72 	bl	801c054 <iprintf>
  dhcp_pcb_refcount--;
 8017370:	4b09      	ldr	r3, [pc, #36]	; (8017398 <dhcp_dec_pcb_refcount+0x40>)
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	3b01      	subs	r3, #1
 8017376:	b2da      	uxtb	r2, r3
 8017378:	4b07      	ldr	r3, [pc, #28]	; (8017398 <dhcp_dec_pcb_refcount+0x40>)
 801737a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801737c:	4b06      	ldr	r3, [pc, #24]	; (8017398 <dhcp_dec_pcb_refcount+0x40>)
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d107      	bne.n	8017394 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8017384:	4b08      	ldr	r3, [pc, #32]	; (80173a8 <dhcp_dec_pcb_refcount+0x50>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4618      	mov	r0, r3
 801738a:	f7ff ff09 	bl	80171a0 <udp_remove>
    dhcp_pcb = NULL;
 801738e:	4b06      	ldr	r3, [pc, #24]	; (80173a8 <dhcp_dec_pcb_refcount+0x50>)
 8017390:	2200      	movs	r2, #0
 8017392:	601a      	str	r2, [r3, #0]
  }
}
 8017394:	bf00      	nop
 8017396:	bd80      	pop	{r7, pc}
 8017398:	20001078 	.word	0x20001078
 801739c:	080238c4 	.word	0x080238c4
 80173a0:	0802394c 	.word	0x0802394c
 80173a4:	08023924 	.word	0x08023924
 80173a8:	20001074 	.word	0x20001074

080173ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80173ba:	210c      	movs	r1, #12
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f001 f819 	bl	80183f4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80173c2:	4b06      	ldr	r3, [pc, #24]	; (80173dc <dhcp_handle_nak+0x30>)
 80173c4:	4a05      	ldr	r2, [pc, #20]	; (80173dc <dhcp_handle_nak+0x30>)
 80173c6:	4905      	ldr	r1, [pc, #20]	; (80173dc <dhcp_handle_nak+0x30>)
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f7f9 f967 	bl	801069c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80173ce:	6878      	ldr	r0, [r7, #4]
 80173d0:	f000 fc0c 	bl	8017bec <dhcp_discover>
}
 80173d4:	bf00      	nop
 80173d6:	3710      	adds	r7, #16
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}
 80173dc:	08024980 	.word	0x08024980

080173e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80173ee:	2108      	movs	r1, #8
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f000 ffff 	bl	80183f4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	331c      	adds	r3, #28
 80173fa:	2200      	movs	r2, #0
 80173fc:	4619      	mov	r1, r3
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f002 fafe 	bl	8019a00 <etharp_query>
 8017404:	4603      	mov	r3, r0
 8017406:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	799b      	ldrb	r3, [r3, #6]
 801740c:	2bff      	cmp	r3, #255	; 0xff
 801740e:	d005      	beq.n	801741c <dhcp_check+0x3c>
    dhcp->tries++;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	799b      	ldrb	r3, [r3, #6]
 8017414:	3301      	adds	r3, #1
 8017416:	b2da      	uxtb	r2, r3
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801741c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017420:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017422:	893b      	ldrh	r3, [r7, #8]
 8017424:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017428:	4a06      	ldr	r2, [pc, #24]	; (8017444 <dhcp_check+0x64>)
 801742a:	fb82 1203 	smull	r1, r2, r2, r3
 801742e:	1152      	asrs	r2, r2, #5
 8017430:	17db      	asrs	r3, r3, #31
 8017432:	1ad3      	subs	r3, r2, r3
 8017434:	b29a      	uxth	r2, r3
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801743a:	bf00      	nop
 801743c:	3710      	adds	r7, #16
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}
 8017442:	bf00      	nop
 8017444:	10624dd3 	.word	0x10624dd3

08017448 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017456:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017458:	4b0c      	ldr	r3, [pc, #48]	; (801748c <dhcp_handle_offer+0x44>)
 801745a:	789b      	ldrb	r3, [r3, #2]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d011      	beq.n	8017484 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2200      	movs	r2, #0
 8017464:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8017466:	4b0a      	ldr	r3, [pc, #40]	; (8017490 <dhcp_handle_offer+0x48>)
 8017468:	689b      	ldr	r3, [r3, #8]
 801746a:	4618      	mov	r0, r3
 801746c:	f7f8 fae7 	bl	800fa3e <lwip_htonl>
 8017470:	4602      	mov	r2, r0
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	691a      	ldr	r2, [r3, #16]
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 f808 	bl	8017494 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8017484:	bf00      	nop
 8017486:	3710      	adds	r7, #16
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}
 801748c:	200082e0 	.word	0x200082e0
 8017490:	200082e8 	.word	0x200082e8

08017494 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8017494:	b5b0      	push	{r4, r5, r7, lr}
 8017496:	b08a      	sub	sp, #40	; 0x28
 8017498:	af02      	add	r7, sp, #8
 801749a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d109      	bne.n	80174b6 <dhcp_select+0x22>
 80174a2:	4b71      	ldr	r3, [pc, #452]	; (8017668 <dhcp_select+0x1d4>)
 80174a4:	f240 1277 	movw	r2, #375	; 0x177
 80174a8:	4970      	ldr	r1, [pc, #448]	; (801766c <dhcp_select+0x1d8>)
 80174aa:	4871      	ldr	r0, [pc, #452]	; (8017670 <dhcp_select+0x1dc>)
 80174ac:	f004 fdd2 	bl	801c054 <iprintf>
 80174b0:	f06f 030f 	mvn.w	r3, #15
 80174b4:	e0d3      	b.n	801765e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80174bc:	69bb      	ldr	r3, [r7, #24]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d109      	bne.n	80174d6 <dhcp_select+0x42>
 80174c2:	4b69      	ldr	r3, [pc, #420]	; (8017668 <dhcp_select+0x1d4>)
 80174c4:	f240 1279 	movw	r2, #377	; 0x179
 80174c8:	496a      	ldr	r1, [pc, #424]	; (8017674 <dhcp_select+0x1e0>)
 80174ca:	4869      	ldr	r0, [pc, #420]	; (8017670 <dhcp_select+0x1dc>)
 80174cc:	f004 fdc2 	bl	801c054 <iprintf>
 80174d0:	f06f 0305 	mvn.w	r3, #5
 80174d4:	e0c3      	b.n	801765e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80174d6:	2101      	movs	r1, #1
 80174d8:	69b8      	ldr	r0, [r7, #24]
 80174da:	f000 ff8b 	bl	80183f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80174de:	f107 030c 	add.w	r3, r7, #12
 80174e2:	2203      	movs	r2, #3
 80174e4:	69b9      	ldr	r1, [r7, #24]
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f001 fc0e 	bl	8018d08 <dhcp_create_msg>
 80174ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f000 8085 	beq.w	8017600 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	685b      	ldr	r3, [r3, #4]
 80174fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80174fc:	89b8      	ldrh	r0, [r7, #12]
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017504:	2302      	movs	r3, #2
 8017506:	2239      	movs	r2, #57	; 0x39
 8017508:	f000 ff8e 	bl	8018428 <dhcp_option>
 801750c:	4603      	mov	r3, r0
 801750e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017510:	89b8      	ldrh	r0, [r7, #12]
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801751c:	461a      	mov	r2, r3
 801751e:	f000 ffdd 	bl	80184dc <dhcp_option_short>
 8017522:	4603      	mov	r3, r0
 8017524:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017526:	89b8      	ldrh	r0, [r7, #12]
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801752e:	2304      	movs	r3, #4
 8017530:	2232      	movs	r2, #50	; 0x32
 8017532:	f000 ff79 	bl	8018428 <dhcp_option>
 8017536:	4603      	mov	r3, r0
 8017538:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801753a:	89bc      	ldrh	r4, [r7, #12]
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017542:	69bb      	ldr	r3, [r7, #24]
 8017544:	69db      	ldr	r3, [r3, #28]
 8017546:	4618      	mov	r0, r3
 8017548:	f7f8 fa79 	bl	800fa3e <lwip_htonl>
 801754c:	4603      	mov	r3, r0
 801754e:	461a      	mov	r2, r3
 8017550:	4629      	mov	r1, r5
 8017552:	4620      	mov	r0, r4
 8017554:	f000 fff4 	bl	8018540 <dhcp_option_long>
 8017558:	4603      	mov	r3, r0
 801755a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801755c:	89b8      	ldrh	r0, [r7, #12]
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017564:	2304      	movs	r3, #4
 8017566:	2236      	movs	r2, #54	; 0x36
 8017568:	f000 ff5e 	bl	8018428 <dhcp_option>
 801756c:	4603      	mov	r3, r0
 801756e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8017570:	89bc      	ldrh	r4, [r7, #12]
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017578:	69bb      	ldr	r3, [r7, #24]
 801757a:	699b      	ldr	r3, [r3, #24]
 801757c:	4618      	mov	r0, r3
 801757e:	f7f8 fa5e 	bl	800fa3e <lwip_htonl>
 8017582:	4603      	mov	r3, r0
 8017584:	461a      	mov	r2, r3
 8017586:	4629      	mov	r1, r5
 8017588:	4620      	mov	r0, r4
 801758a:	f000 ffd9 	bl	8018540 <dhcp_option_long>
 801758e:	4603      	mov	r3, r0
 8017590:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017592:	89b8      	ldrh	r0, [r7, #12]
 8017594:	693b      	ldr	r3, [r7, #16]
 8017596:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801759a:	2303      	movs	r3, #3
 801759c:	2237      	movs	r2, #55	; 0x37
 801759e:	f000 ff43 	bl	8018428 <dhcp_option>
 80175a2:	4603      	mov	r3, r0
 80175a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175a6:	2300      	movs	r3, #0
 80175a8:	77bb      	strb	r3, [r7, #30]
 80175aa:	e00e      	b.n	80175ca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80175ac:	89b8      	ldrh	r0, [r7, #12]
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80175b4:	7fbb      	ldrb	r3, [r7, #30]
 80175b6:	4a30      	ldr	r2, [pc, #192]	; (8017678 <dhcp_select+0x1e4>)
 80175b8:	5cd3      	ldrb	r3, [r2, r3]
 80175ba:	461a      	mov	r2, r3
 80175bc:	f000 ff68 	bl	8018490 <dhcp_option_byte>
 80175c0:	4603      	mov	r3, r0
 80175c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175c4:	7fbb      	ldrb	r3, [r7, #30]
 80175c6:	3301      	adds	r3, #1
 80175c8:	77bb      	strb	r3, [r7, #30]
 80175ca:	7fbb      	ldrb	r3, [r7, #30]
 80175cc:	2b02      	cmp	r3, #2
 80175ce:	d9ed      	bls.n	80175ac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80175d0:	89b8      	ldrh	r0, [r7, #12]
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	33f0      	adds	r3, #240	; 0xf0
 80175d6:	697a      	ldr	r2, [r7, #20]
 80175d8:	4619      	mov	r1, r3
 80175da:	f001 fc6b 	bl	8018eb4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80175de:	4b27      	ldr	r3, [pc, #156]	; (801767c <dhcp_select+0x1e8>)
 80175e0:	6818      	ldr	r0, [r3, #0]
 80175e2:	4b27      	ldr	r3, [pc, #156]	; (8017680 <dhcp_select+0x1ec>)
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	9300      	str	r3, [sp, #0]
 80175ea:	2343      	movs	r3, #67	; 0x43
 80175ec:	4a25      	ldr	r2, [pc, #148]	; (8017684 <dhcp_select+0x1f0>)
 80175ee:	6979      	ldr	r1, [r7, #20]
 80175f0:	f7ff fbda 	bl	8016da8 <udp_sendto_if_src>
 80175f4:	4603      	mov	r3, r0
 80175f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80175f8:	6978      	ldr	r0, [r7, #20]
 80175fa:	f7f9 fca3 	bl	8010f44 <pbuf_free>
 80175fe:	e001      	b.n	8017604 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017600:	23ff      	movs	r3, #255	; 0xff
 8017602:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017604:	69bb      	ldr	r3, [r7, #24]
 8017606:	799b      	ldrb	r3, [r3, #6]
 8017608:	2bff      	cmp	r3, #255	; 0xff
 801760a:	d005      	beq.n	8017618 <dhcp_select+0x184>
    dhcp->tries++;
 801760c:	69bb      	ldr	r3, [r7, #24]
 801760e:	799b      	ldrb	r3, [r3, #6]
 8017610:	3301      	adds	r3, #1
 8017612:	b2da      	uxtb	r2, r3
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017618:	69bb      	ldr	r3, [r7, #24]
 801761a:	799b      	ldrb	r3, [r3, #6]
 801761c:	2b05      	cmp	r3, #5
 801761e:	d80d      	bhi.n	801763c <dhcp_select+0x1a8>
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	799b      	ldrb	r3, [r3, #6]
 8017624:	461a      	mov	r2, r3
 8017626:	2301      	movs	r3, #1
 8017628:	4093      	lsls	r3, r2
 801762a:	b29b      	uxth	r3, r3
 801762c:	461a      	mov	r2, r3
 801762e:	0152      	lsls	r2, r2, #5
 8017630:	1ad2      	subs	r2, r2, r3
 8017632:	0092      	lsls	r2, r2, #2
 8017634:	4413      	add	r3, r2
 8017636:	00db      	lsls	r3, r3, #3
 8017638:	b29b      	uxth	r3, r3
 801763a:	e001      	b.n	8017640 <dhcp_select+0x1ac>
 801763c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017640:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017642:	89fb      	ldrh	r3, [r7, #14]
 8017644:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017648:	4a0f      	ldr	r2, [pc, #60]	; (8017688 <dhcp_select+0x1f4>)
 801764a:	fb82 1203 	smull	r1, r2, r2, r3
 801764e:	1152      	asrs	r2, r2, #5
 8017650:	17db      	asrs	r3, r3, #31
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	b29a      	uxth	r2, r3
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801765a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801765e:	4618      	mov	r0, r3
 8017660:	3720      	adds	r7, #32
 8017662:	46bd      	mov	sp, r7
 8017664:	bdb0      	pop	{r4, r5, r7, pc}
 8017666:	bf00      	nop
 8017668:	080238c4 	.word	0x080238c4
 801766c:	08023970 	.word	0x08023970
 8017670:	08023924 	.word	0x08023924
 8017674:	0802398c 	.word	0x0802398c
 8017678:	20000080 	.word	0x20000080
 801767c:	20001074 	.word	0x20001074
 8017680:	08024980 	.word	0x08024980
 8017684:	08024984 	.word	0x08024984
 8017688:	10624dd3 	.word	0x10624dd3

0801768c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8017692:	4b27      	ldr	r3, [pc, #156]	; (8017730 <dhcp_coarse_tmr+0xa4>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	607b      	str	r3, [r7, #4]
 8017698:	e042      	b.n	8017720 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801769e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d039      	beq.n	801771a <dhcp_coarse_tmr+0x8e>
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	795b      	ldrb	r3, [r3, #5]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d035      	beq.n	801771a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	8a9b      	ldrh	r3, [r3, #20]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d012      	beq.n	80176dc <dhcp_coarse_tmr+0x50>
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	8a5b      	ldrh	r3, [r3, #18]
 80176ba:	3301      	adds	r3, #1
 80176bc:	b29a      	uxth	r2, r3
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	825a      	strh	r2, [r3, #18]
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	8a5a      	ldrh	r2, [r3, #18]
 80176c6:	683b      	ldr	r3, [r7, #0]
 80176c8:	8a9b      	ldrh	r3, [r3, #20]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d106      	bne.n	80176dc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	f000 fdf6 	bl	80182c0 <dhcp_release_and_stop>
        dhcp_start(netif);
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f000 f969 	bl	80179ac <dhcp_start>
 80176da:	e01e      	b.n	801771a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	8a1b      	ldrh	r3, [r3, #16]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d00b      	beq.n	80176fc <dhcp_coarse_tmr+0x70>
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	8a1b      	ldrh	r3, [r3, #16]
 80176e8:	1e5a      	subs	r2, r3, #1
 80176ea:	b291      	uxth	r1, r2
 80176ec:	683a      	ldr	r2, [r7, #0]
 80176ee:	8211      	strh	r1, [r2, #16]
 80176f0:	2b01      	cmp	r3, #1
 80176f2:	d103      	bne.n	80176fc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f000 f8c6 	bl	8017886 <dhcp_t2_timeout>
 80176fa:	e00e      	b.n	801771a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	89db      	ldrh	r3, [r3, #14]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d00a      	beq.n	801771a <dhcp_coarse_tmr+0x8e>
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	89db      	ldrh	r3, [r3, #14]
 8017708:	1e5a      	subs	r2, r3, #1
 801770a:	b291      	uxth	r1, r2
 801770c:	683a      	ldr	r2, [r7, #0]
 801770e:	81d1      	strh	r1, [r2, #14]
 8017710:	2b01      	cmp	r3, #1
 8017712:	d102      	bne.n	801771a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 f888 	bl	801782a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	607b      	str	r3, [r7, #4]
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d1b9      	bne.n	801769a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8017726:	bf00      	nop
 8017728:	3708      	adds	r7, #8
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	200082b4 	.word	0x200082b4

08017734 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801773a:	4b16      	ldr	r3, [pc, #88]	; (8017794 <dhcp_fine_tmr+0x60>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	607b      	str	r3, [r7, #4]
 8017740:	e020      	b.n	8017784 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017746:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d017      	beq.n	801777e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	891b      	ldrh	r3, [r3, #8]
 8017752:	2b01      	cmp	r3, #1
 8017754:	d906      	bls.n	8017764 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	891b      	ldrh	r3, [r3, #8]
 801775a:	3b01      	subs	r3, #1
 801775c:	b29a      	uxth	r2, r3
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	811a      	strh	r2, [r3, #8]
 8017762:	e00c      	b.n	801777e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8017764:	683b      	ldr	r3, [r7, #0]
 8017766:	891b      	ldrh	r3, [r3, #8]
 8017768:	2b01      	cmp	r3, #1
 801776a:	d108      	bne.n	801777e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	891b      	ldrh	r3, [r3, #8]
 8017770:	3b01      	subs	r3, #1
 8017772:	b29a      	uxth	r2, r3
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f000 f80d 	bl	8017798 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	607b      	str	r3, [r7, #4]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d1db      	bne.n	8017742 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801778a:	bf00      	nop
 801778c:	3708      	adds	r7, #8
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	200082b4 	.word	0x200082b4

08017798 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	795b      	ldrb	r3, [r3, #5]
 80177aa:	2b0c      	cmp	r3, #12
 80177ac:	d003      	beq.n	80177b6 <dhcp_timeout+0x1e>
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	795b      	ldrb	r3, [r3, #5]
 80177b2:	2b06      	cmp	r3, #6
 80177b4:	d103      	bne.n	80177be <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f000 fa18 	bl	8017bec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80177bc:	e031      	b.n	8017822 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	795b      	ldrb	r3, [r3, #5]
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d10e      	bne.n	80177e4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	799b      	ldrb	r3, [r3, #6]
 80177ca:	2b05      	cmp	r3, #5
 80177cc:	d803      	bhi.n	80177d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ff fe60 	bl	8017494 <dhcp_select>
}
 80177d4:	e025      	b.n	8017822 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f000 fd72 	bl	80182c0 <dhcp_release_and_stop>
      dhcp_start(netif);
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f000 f8e5 	bl	80179ac <dhcp_start>
}
 80177e2:	e01e      	b.n	8017822 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	795b      	ldrb	r3, [r3, #5]
 80177e8:	2b08      	cmp	r3, #8
 80177ea:	d10b      	bne.n	8017804 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	799b      	ldrb	r3, [r3, #6]
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	d803      	bhi.n	80177fc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f7ff fdf3 	bl	80173e0 <dhcp_check>
}
 80177fa:	e012      	b.n	8017822 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f000 fa97 	bl	8017d30 <dhcp_bind>
}
 8017802:	e00e      	b.n	8017822 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	795b      	ldrb	r3, [r3, #5]
 8017808:	2b03      	cmp	r3, #3
 801780a:	d10a      	bne.n	8017822 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	799b      	ldrb	r3, [r3, #6]
 8017810:	2b01      	cmp	r3, #1
 8017812:	d803      	bhi.n	801781c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f000 fc9d 	bl	8018154 <dhcp_reboot>
}
 801781a:	e002      	b.n	8017822 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f000 f9e5 	bl	8017bec <dhcp_discover>
}
 8017822:	bf00      	nop
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}

0801782a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801782a:	b580      	push	{r7, lr}
 801782c:	b084      	sub	sp, #16
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017836:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	795b      	ldrb	r3, [r3, #5]
 801783c:	2b01      	cmp	r3, #1
 801783e:	d007      	beq.n	8017850 <dhcp_t1_timeout+0x26>
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	795b      	ldrb	r3, [r3, #5]
 8017844:	2b0a      	cmp	r3, #10
 8017846:	d003      	beq.n	8017850 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801784c:	2b05      	cmp	r3, #5
 801784e:	d116      	bne.n	801787e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 fb47 	bl	8017ee4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	899b      	ldrh	r3, [r3, #12]
 801785a:	461a      	mov	r2, r3
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	8a5b      	ldrh	r3, [r3, #18]
 8017860:	1ad3      	subs	r3, r2, r3
 8017862:	2b01      	cmp	r3, #1
 8017864:	dd0b      	ble.n	801787e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	899b      	ldrh	r3, [r3, #12]
 801786a:	461a      	mov	r2, r3
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	8a5b      	ldrh	r3, [r3, #18]
 8017870:	1ad3      	subs	r3, r2, r3
 8017872:	0fda      	lsrs	r2, r3, #31
 8017874:	4413      	add	r3, r2
 8017876:	105b      	asrs	r3, r3, #1
 8017878:	b29a      	uxth	r2, r3
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801787e:	bf00      	nop
 8017880:	3710      	adds	r7, #16
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}

08017886 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017886:	b580      	push	{r7, lr}
 8017888:	b084      	sub	sp, #16
 801788a:	af00      	add	r7, sp, #0
 801788c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017892:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	795b      	ldrb	r3, [r3, #5]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d00b      	beq.n	80178b4 <dhcp_t2_timeout+0x2e>
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	795b      	ldrb	r3, [r3, #5]
 80178a0:	2b0a      	cmp	r3, #10
 80178a2:	d007      	beq.n	80178b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80178a8:	2b05      	cmp	r3, #5
 80178aa:	d003      	beq.n	80178b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	795b      	ldrb	r3, [r3, #5]
 80178b0:	2b04      	cmp	r3, #4
 80178b2:	d116      	bne.n	80178e2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f000 fbb1 	bl	801801c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	8a9b      	ldrh	r3, [r3, #20]
 80178be:	461a      	mov	r2, r3
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	8a5b      	ldrh	r3, [r3, #18]
 80178c4:	1ad3      	subs	r3, r2, r3
 80178c6:	2b01      	cmp	r3, #1
 80178c8:	dd0b      	ble.n	80178e2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	8a9b      	ldrh	r3, [r3, #20]
 80178ce:	461a      	mov	r2, r3
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	8a5b      	ldrh	r3, [r3, #18]
 80178d4:	1ad3      	subs	r3, r2, r3
 80178d6:	0fda      	lsrs	r2, r3, #31
 80178d8:	4413      	add	r3, r2
 80178da:	105b      	asrs	r3, r3, #1
 80178dc:	b29a      	uxth	r2, r3
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80178e2:	bf00      	nop
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
	...

080178ec <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2200      	movs	r2, #0
 8017900:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2200      	movs	r2, #0
 8017906:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8017908:	4b26      	ldr	r3, [pc, #152]	; (80179a4 <dhcp_handle_ack+0xb8>)
 801790a:	78db      	ldrb	r3, [r3, #3]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d003      	beq.n	8017918 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8017910:	4b25      	ldr	r3, [pc, #148]	; (80179a8 <dhcp_handle_ack+0xbc>)
 8017912:	68da      	ldr	r2, [r3, #12]
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8017918:	4b22      	ldr	r3, [pc, #136]	; (80179a4 <dhcp_handle_ack+0xb8>)
 801791a:	791b      	ldrb	r3, [r3, #4]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d004      	beq.n	801792a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8017920:	4b21      	ldr	r3, [pc, #132]	; (80179a8 <dhcp_handle_ack+0xbc>)
 8017922:	691a      	ldr	r2, [r3, #16]
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	62da      	str	r2, [r3, #44]	; 0x2c
 8017928:	e004      	b.n	8017934 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801792e:	085a      	lsrs	r2, r3, #1
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8017934:	4b1b      	ldr	r3, [pc, #108]	; (80179a4 <dhcp_handle_ack+0xb8>)
 8017936:	795b      	ldrb	r3, [r3, #5]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d004      	beq.n	8017946 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801793c:	4b1a      	ldr	r3, [pc, #104]	; (80179a8 <dhcp_handle_ack+0xbc>)
 801793e:	695a      	ldr	r2, [r3, #20]
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	631a      	str	r2, [r3, #48]	; 0x30
 8017944:	e007      	b.n	8017956 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801794a:	4613      	mov	r3, r2
 801794c:	00db      	lsls	r3, r3, #3
 801794e:	1a9b      	subs	r3, r3, r2
 8017950:	08da      	lsrs	r2, r3, #3
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	691a      	ldr	r2, [r3, #16]
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801795e:	4b11      	ldr	r3, [pc, #68]	; (80179a4 <dhcp_handle_ack+0xb8>)
 8017960:	799b      	ldrb	r3, [r3, #6]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d00b      	beq.n	801797e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017966:	4b10      	ldr	r3, [pc, #64]	; (80179a8 <dhcp_handle_ack+0xbc>)
 8017968:	699b      	ldr	r3, [r3, #24]
 801796a:	4618      	mov	r0, r3
 801796c:	f7f8 f867 	bl	800fa3e <lwip_htonl>
 8017970:	4602      	mov	r2, r0
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	2201      	movs	r2, #1
 801797a:	71da      	strb	r2, [r3, #7]
 801797c:	e002      	b.n	8017984 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	2200      	movs	r2, #0
 8017982:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017984:	4b07      	ldr	r3, [pc, #28]	; (80179a4 <dhcp_handle_ack+0xb8>)
 8017986:	79db      	ldrb	r3, [r3, #7]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d007      	beq.n	801799c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801798c:	4b06      	ldr	r3, [pc, #24]	; (80179a8 <dhcp_handle_ack+0xbc>)
 801798e:	69db      	ldr	r3, [r3, #28]
 8017990:	4618      	mov	r0, r3
 8017992:	f7f8 f854 	bl	800fa3e <lwip_htonl>
 8017996:	4602      	mov	r2, r0
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801799c:	bf00      	nop
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	200082e0 	.word	0x200082e0
 80179a8:	200082e8 	.word	0x200082e8

080179ac <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d109      	bne.n	80179ce <dhcp_start+0x22>
 80179ba:	4b37      	ldr	r3, [pc, #220]	; (8017a98 <dhcp_start+0xec>)
 80179bc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80179c0:	4936      	ldr	r1, [pc, #216]	; (8017a9c <dhcp_start+0xf0>)
 80179c2:	4837      	ldr	r0, [pc, #220]	; (8017aa0 <dhcp_start+0xf4>)
 80179c4:	f004 fb46 	bl	801c054 <iprintf>
 80179c8:	f06f 030f 	mvn.w	r3, #15
 80179cc:	e060      	b.n	8017a90 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179d4:	f003 0301 	and.w	r3, r3, #1
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d109      	bne.n	80179f0 <dhcp_start+0x44>
 80179dc:	4b2e      	ldr	r3, [pc, #184]	; (8017a98 <dhcp_start+0xec>)
 80179de:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80179e2:	4930      	ldr	r1, [pc, #192]	; (8017aa4 <dhcp_start+0xf8>)
 80179e4:	482e      	ldr	r0, [pc, #184]	; (8017aa0 <dhcp_start+0xf4>)
 80179e6:	f004 fb35 	bl	801c054 <iprintf>
 80179ea:	f06f 030f 	mvn.w	r3, #15
 80179ee:	e04f      	b.n	8017a90 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179fa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80179fe:	d202      	bcs.n	8017a06 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8017a00:	f04f 33ff 	mov.w	r3, #4294967295
 8017a04:	e044      	b.n	8017a90 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d10d      	bne.n	8017a28 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8017a0c:	2034      	movs	r0, #52	; 0x34
 8017a0e:	f7f8 fae9 	bl	800ffe4 <mem_malloc>
 8017a12:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d102      	bne.n	8017a20 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8017a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017a1e:	e037      	b.n	8017a90 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	68fa      	ldr	r2, [r7, #12]
 8017a24:	625a      	str	r2, [r3, #36]	; 0x24
 8017a26:	e005      	b.n	8017a34 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	791b      	ldrb	r3, [r3, #4]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d001      	beq.n	8017a34 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017a30:	f7ff fc92 	bl	8017358 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017a34:	2234      	movs	r2, #52	; 0x34
 8017a36:	2100      	movs	r1, #0
 8017a38:	68f8      	ldr	r0, [r7, #12]
 8017a3a:	f003 fdfe 	bl	801b63a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8017a3e:	f7ff fc39 	bl	80172b4 <dhcp_inc_pcb_refcount>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <dhcp_start+0xa2>
    return ERR_MEM;
 8017a48:	f04f 33ff 	mov.w	r3, #4294967295
 8017a4c:	e020      	b.n	8017a90 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	2201      	movs	r2, #1
 8017a52:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a5a:	f003 0304 	and.w	r3, r3, #4
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d105      	bne.n	8017a6e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8017a62:	2102      	movs	r1, #2
 8017a64:	68f8      	ldr	r0, [r7, #12]
 8017a66:	f000 fcc5 	bl	80183f4 <dhcp_set_state>
    return ERR_OK;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	e010      	b.n	8017a90 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f000 f8bc 	bl	8017bec <dhcp_discover>
 8017a74:	4603      	mov	r3, r0
 8017a76:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017a78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d005      	beq.n	8017a8c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f000 fc1d 	bl	80182c0 <dhcp_release_and_stop>
    return ERR_MEM;
 8017a86:	f04f 33ff 	mov.w	r3, #4294967295
 8017a8a:	e001      	b.n	8017a90 <dhcp_start+0xe4>
  }
  return result;
 8017a8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	080238c4 	.word	0x080238c4
 8017a9c:	080239a8 	.word	0x080239a8
 8017aa0:	08023924 	.word	0x08023924
 8017aa4:	080239ec 	.word	0x080239ec

08017aa8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d107      	bne.n	8017ac8 <dhcp_arp_reply+0x20>
 8017ab8:	4b0e      	ldr	r3, [pc, #56]	; (8017af4 <dhcp_arp_reply+0x4c>)
 8017aba:	f240 328b 	movw	r2, #907	; 0x38b
 8017abe:	490e      	ldr	r1, [pc, #56]	; (8017af8 <dhcp_arp_reply+0x50>)
 8017ac0:	480e      	ldr	r0, [pc, #56]	; (8017afc <dhcp_arp_reply+0x54>)
 8017ac2:	f004 fac7 	bl	801c054 <iprintf>
 8017ac6:	e012      	b.n	8017aee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017acc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00c      	beq.n	8017aee <dhcp_arp_reply+0x46>
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	795b      	ldrb	r3, [r3, #5]
 8017ad8:	2b08      	cmp	r3, #8
 8017ada:	d108      	bne.n	8017aee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	681a      	ldr	r2, [r3, #0]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	69db      	ldr	r3, [r3, #28]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d102      	bne.n	8017aee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f000 f809 	bl	8017b00 <dhcp_decline>
    }
  }
}
 8017aee:	3710      	adds	r7, #16
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	080238c4 	.word	0x080238c4
 8017af8:	080239a8 	.word	0x080239a8
 8017afc:	08023924 	.word	0x08023924

08017b00 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017b00:	b5b0      	push	{r4, r5, r7, lr}
 8017b02:	b08a      	sub	sp, #40	; 0x28
 8017b04:	af02      	add	r7, sp, #8
 8017b06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b0c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017b0e:	210c      	movs	r1, #12
 8017b10:	69b8      	ldr	r0, [r7, #24]
 8017b12:	f000 fc6f 	bl	80183f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8017b16:	f107 030c 	add.w	r3, r7, #12
 8017b1a:	2204      	movs	r2, #4
 8017b1c:	69b9      	ldr	r1, [r7, #24]
 8017b1e:	6878      	ldr	r0, [r7, #4]
 8017b20:	f001 f8f2 	bl	8018d08 <dhcp_create_msg>
 8017b24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d035      	beq.n	8017b98 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017b32:	89b8      	ldrh	r0, [r7, #12]
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b3a:	2304      	movs	r3, #4
 8017b3c:	2232      	movs	r2, #50	; 0x32
 8017b3e:	f000 fc73 	bl	8018428 <dhcp_option>
 8017b42:	4603      	mov	r3, r0
 8017b44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017b46:	89bc      	ldrh	r4, [r7, #12]
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017b4e:	69bb      	ldr	r3, [r7, #24]
 8017b50:	69db      	ldr	r3, [r3, #28]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7f7 ff73 	bl	800fa3e <lwip_htonl>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	461a      	mov	r2, r3
 8017b5c:	4629      	mov	r1, r5
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f000 fcee 	bl	8018540 <dhcp_option_long>
 8017b64:	4603      	mov	r3, r0
 8017b66:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017b68:	89b8      	ldrh	r0, [r7, #12]
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	33f0      	adds	r3, #240	; 0xf0
 8017b6e:	697a      	ldr	r2, [r7, #20]
 8017b70:	4619      	mov	r1, r3
 8017b72:	f001 f99f 	bl	8018eb4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017b76:	4b19      	ldr	r3, [pc, #100]	; (8017bdc <dhcp_decline+0xdc>)
 8017b78:	6818      	ldr	r0, [r3, #0]
 8017b7a:	4b19      	ldr	r3, [pc, #100]	; (8017be0 <dhcp_decline+0xe0>)
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	9300      	str	r3, [sp, #0]
 8017b82:	2343      	movs	r3, #67	; 0x43
 8017b84:	4a17      	ldr	r2, [pc, #92]	; (8017be4 <dhcp_decline+0xe4>)
 8017b86:	6979      	ldr	r1, [r7, #20]
 8017b88:	f7ff f90e 	bl	8016da8 <udp_sendto_if_src>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017b90:	6978      	ldr	r0, [r7, #20]
 8017b92:	f7f9 f9d7 	bl	8010f44 <pbuf_free>
 8017b96:	e001      	b.n	8017b9c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017b98:	23ff      	movs	r3, #255	; 0xff
 8017b9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017b9c:	69bb      	ldr	r3, [r7, #24]
 8017b9e:	799b      	ldrb	r3, [r3, #6]
 8017ba0:	2bff      	cmp	r3, #255	; 0xff
 8017ba2:	d005      	beq.n	8017bb0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	799b      	ldrb	r3, [r3, #6]
 8017ba8:	3301      	adds	r3, #1
 8017baa:	b2da      	uxtb	r2, r3
 8017bac:	69bb      	ldr	r3, [r7, #24]
 8017bae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017bb0:	f242 7310 	movw	r3, #10000	; 0x2710
 8017bb4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017bb6:	89fb      	ldrh	r3, [r7, #14]
 8017bb8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017bbc:	4a0a      	ldr	r2, [pc, #40]	; (8017be8 <dhcp_decline+0xe8>)
 8017bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8017bc2:	1152      	asrs	r2, r2, #5
 8017bc4:	17db      	asrs	r3, r3, #31
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017bce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	3720      	adds	r7, #32
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8017bda:	bf00      	nop
 8017bdc:	20001074 	.word	0x20001074
 8017be0:	08024980 	.word	0x08024980
 8017be4:	08024984 	.word	0x08024984
 8017be8:	10624dd3 	.word	0x10624dd3

08017bec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b08a      	sub	sp, #40	; 0x28
 8017bf0:	af02      	add	r7, sp, #8
 8017bf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017bfe:	69bb      	ldr	r3, [r7, #24]
 8017c00:	2200      	movs	r2, #0
 8017c02:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017c04:	2106      	movs	r1, #6
 8017c06:	69b8      	ldr	r0, [r7, #24]
 8017c08:	f000 fbf4 	bl	80183f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017c0c:	f107 0308 	add.w	r3, r7, #8
 8017c10:	2201      	movs	r2, #1
 8017c12:	69b9      	ldr	r1, [r7, #24]
 8017c14:	6878      	ldr	r0, [r7, #4]
 8017c16:	f001 f877 	bl	8018d08 <dhcp_create_msg>
 8017c1a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d04b      	beq.n	8017cba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017c28:	8938      	ldrh	r0, [r7, #8]
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c30:	2302      	movs	r3, #2
 8017c32:	2239      	movs	r2, #57	; 0x39
 8017c34:	f000 fbf8 	bl	8018428 <dhcp_option>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017c3c:	8938      	ldrh	r0, [r7, #8]
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c48:	461a      	mov	r2, r3
 8017c4a:	f000 fc47 	bl	80184dc <dhcp_option_short>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017c52:	8938      	ldrh	r0, [r7, #8]
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c5a:	2303      	movs	r3, #3
 8017c5c:	2237      	movs	r2, #55	; 0x37
 8017c5e:	f000 fbe3 	bl	8018428 <dhcp_option>
 8017c62:	4603      	mov	r3, r0
 8017c64:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c66:	2300      	movs	r3, #0
 8017c68:	77fb      	strb	r3, [r7, #31]
 8017c6a:	e00e      	b.n	8017c8a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017c6c:	8938      	ldrh	r0, [r7, #8]
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c74:	7ffb      	ldrb	r3, [r7, #31]
 8017c76:	4a29      	ldr	r2, [pc, #164]	; (8017d1c <dhcp_discover+0x130>)
 8017c78:	5cd3      	ldrb	r3, [r2, r3]
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	f000 fc08 	bl	8018490 <dhcp_option_byte>
 8017c80:	4603      	mov	r3, r0
 8017c82:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c84:	7ffb      	ldrb	r3, [r7, #31]
 8017c86:	3301      	adds	r3, #1
 8017c88:	77fb      	strb	r3, [r7, #31]
 8017c8a:	7ffb      	ldrb	r3, [r7, #31]
 8017c8c:	2b02      	cmp	r3, #2
 8017c8e:	d9ed      	bls.n	8017c6c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017c90:	8938      	ldrh	r0, [r7, #8]
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	33f0      	adds	r3, #240	; 0xf0
 8017c96:	693a      	ldr	r2, [r7, #16]
 8017c98:	4619      	mov	r1, r3
 8017c9a:	f001 f90b 	bl	8018eb4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017c9e:	4b20      	ldr	r3, [pc, #128]	; (8017d20 <dhcp_discover+0x134>)
 8017ca0:	6818      	ldr	r0, [r3, #0]
 8017ca2:	4b20      	ldr	r3, [pc, #128]	; (8017d24 <dhcp_discover+0x138>)
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	9300      	str	r3, [sp, #0]
 8017caa:	2343      	movs	r3, #67	; 0x43
 8017cac:	4a1e      	ldr	r2, [pc, #120]	; (8017d28 <dhcp_discover+0x13c>)
 8017cae:	6939      	ldr	r1, [r7, #16]
 8017cb0:	f7ff f87a 	bl	8016da8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017cb4:	6938      	ldr	r0, [r7, #16]
 8017cb6:	f7f9 f945 	bl	8010f44 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017cba:	69bb      	ldr	r3, [r7, #24]
 8017cbc:	799b      	ldrb	r3, [r3, #6]
 8017cbe:	2bff      	cmp	r3, #255	; 0xff
 8017cc0:	d005      	beq.n	8017cce <dhcp_discover+0xe2>
    dhcp->tries++;
 8017cc2:	69bb      	ldr	r3, [r7, #24]
 8017cc4:	799b      	ldrb	r3, [r3, #6]
 8017cc6:	3301      	adds	r3, #1
 8017cc8:	b2da      	uxtb	r2, r3
 8017cca:	69bb      	ldr	r3, [r7, #24]
 8017ccc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017cce:	69bb      	ldr	r3, [r7, #24]
 8017cd0:	799b      	ldrb	r3, [r3, #6]
 8017cd2:	2b05      	cmp	r3, #5
 8017cd4:	d80d      	bhi.n	8017cf2 <dhcp_discover+0x106>
 8017cd6:	69bb      	ldr	r3, [r7, #24]
 8017cd8:	799b      	ldrb	r3, [r3, #6]
 8017cda:	461a      	mov	r2, r3
 8017cdc:	2301      	movs	r3, #1
 8017cde:	4093      	lsls	r3, r2
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	0152      	lsls	r2, r2, #5
 8017ce6:	1ad2      	subs	r2, r2, r3
 8017ce8:	0092      	lsls	r2, r2, #2
 8017cea:	4413      	add	r3, r2
 8017cec:	00db      	lsls	r3, r3, #3
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	e001      	b.n	8017cf6 <dhcp_discover+0x10a>
 8017cf2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017cf6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017cf8:	897b      	ldrh	r3, [r7, #10]
 8017cfa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017cfe:	4a0b      	ldr	r2, [pc, #44]	; (8017d2c <dhcp_discover+0x140>)
 8017d00:	fb82 1203 	smull	r1, r2, r2, r3
 8017d04:	1152      	asrs	r2, r2, #5
 8017d06:	17db      	asrs	r3, r3, #31
 8017d08:	1ad3      	subs	r3, r2, r3
 8017d0a:	b29a      	uxth	r2, r3
 8017d0c:	69bb      	ldr	r3, [r7, #24]
 8017d0e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3720      	adds	r7, #32
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}
 8017d1c:	20000080 	.word	0x20000080
 8017d20:	20001074 	.word	0x20001074
 8017d24:	08024980 	.word	0x08024980
 8017d28:	08024984 	.word	0x08024984
 8017d2c:	10624dd3 	.word	0x10624dd3

08017d30 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b088      	sub	sp, #32
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d107      	bne.n	8017d4e <dhcp_bind+0x1e>
 8017d3e:	4b64      	ldr	r3, [pc, #400]	; (8017ed0 <dhcp_bind+0x1a0>)
 8017d40:	f240 4215 	movw	r2, #1045	; 0x415
 8017d44:	4963      	ldr	r1, [pc, #396]	; (8017ed4 <dhcp_bind+0x1a4>)
 8017d46:	4864      	ldr	r0, [pc, #400]	; (8017ed8 <dhcp_bind+0x1a8>)
 8017d48:	f004 f984 	bl	801c054 <iprintf>
 8017d4c:	e0bc      	b.n	8017ec8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d107      	bne.n	8017d6a <dhcp_bind+0x3a>
 8017d5a:	4b5d      	ldr	r3, [pc, #372]	; (8017ed0 <dhcp_bind+0x1a0>)
 8017d5c:	f240 4217 	movw	r2, #1047	; 0x417
 8017d60:	495e      	ldr	r1, [pc, #376]	; (8017edc <dhcp_bind+0x1ac>)
 8017d62:	485d      	ldr	r0, [pc, #372]	; (8017ed8 <dhcp_bind+0x1a8>)
 8017d64:	f004 f976 	bl	801c054 <iprintf>
 8017d68:	e0ae      	b.n	8017ec8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017d6a:	69bb      	ldr	r3, [r7, #24]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017d70:	69bb      	ldr	r3, [r7, #24]
 8017d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d78:	d019      	beq.n	8017dae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017d7a:	69bb      	ldr	r3, [r7, #24]
 8017d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d7e:	331e      	adds	r3, #30
 8017d80:	4a57      	ldr	r2, [pc, #348]	; (8017ee0 <dhcp_bind+0x1b0>)
 8017d82:	fba2 2303 	umull	r2, r3, r2, r3
 8017d86:	095b      	lsrs	r3, r3, #5
 8017d88:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d90:	d302      	bcc.n	8017d98 <dhcp_bind+0x68>
      timeout = 0xffff;
 8017d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d96:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017d98:	69fb      	ldr	r3, [r7, #28]
 8017d9a:	b29a      	uxth	r2, r3
 8017d9c:	69bb      	ldr	r3, [r7, #24]
 8017d9e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017da0:	69bb      	ldr	r3, [r7, #24]
 8017da2:	8a9b      	ldrh	r3, [r3, #20]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d102      	bne.n	8017dae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017da8:	69bb      	ldr	r3, [r7, #24]
 8017daa:	2201      	movs	r2, #1
 8017dac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017dae:	69bb      	ldr	r3, [r7, #24]
 8017db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017db6:	d01d      	beq.n	8017df4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017db8:	69bb      	ldr	r3, [r7, #24]
 8017dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dbc:	331e      	adds	r3, #30
 8017dbe:	4a48      	ldr	r2, [pc, #288]	; (8017ee0 <dhcp_bind+0x1b0>)
 8017dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8017dc4:	095b      	lsrs	r3, r3, #5
 8017dc6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017dce:	d302      	bcc.n	8017dd6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dd4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	b29a      	uxth	r2, r3
 8017dda:	69bb      	ldr	r3, [r7, #24]
 8017ddc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	895b      	ldrh	r3, [r3, #10]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d102      	bne.n	8017dec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	2201      	movs	r2, #1
 8017dea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017dec:	69bb      	ldr	r3, [r7, #24]
 8017dee:	895a      	ldrh	r2, [r3, #10]
 8017df0:	69bb      	ldr	r3, [r7, #24]
 8017df2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017df4:	69bb      	ldr	r3, [r7, #24]
 8017df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dfc:	d01d      	beq.n	8017e3a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e02:	331e      	adds	r3, #30
 8017e04:	4a36      	ldr	r2, [pc, #216]	; (8017ee0 <dhcp_bind+0x1b0>)
 8017e06:	fba2 2303 	umull	r2, r3, r2, r3
 8017e0a:	095b      	lsrs	r3, r3, #5
 8017e0c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017e14:	d302      	bcc.n	8017e1c <dhcp_bind+0xec>
      timeout = 0xffff;
 8017e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e1a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017e1c:	69fb      	ldr	r3, [r7, #28]
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017e24:	69bb      	ldr	r3, [r7, #24]
 8017e26:	899b      	ldrh	r3, [r3, #12]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d102      	bne.n	8017e32 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017e2c:	69bb      	ldr	r3, [r7, #24]
 8017e2e:	2201      	movs	r2, #1
 8017e30:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017e32:	69bb      	ldr	r3, [r7, #24]
 8017e34:	899a      	ldrh	r2, [r3, #12]
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	895a      	ldrh	r2, [r3, #10]
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	899b      	ldrh	r3, [r3, #12]
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d306      	bcc.n	8017e54 <dhcp_bind+0x124>
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	899b      	ldrh	r3, [r3, #12]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d002      	beq.n	8017e54 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017e4e:	69bb      	ldr	r3, [r7, #24]
 8017e50:	2200      	movs	r2, #0
 8017e52:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017e54:	69bb      	ldr	r3, [r7, #24]
 8017e56:	79db      	ldrb	r3, [r3, #7]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d003      	beq.n	8017e64 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	6a1b      	ldr	r3, [r3, #32]
 8017e60:	613b      	str	r3, [r7, #16]
 8017e62:	e014      	b.n	8017e8e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017e64:	69bb      	ldr	r3, [r7, #24]
 8017e66:	331c      	adds	r3, #28
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	db02      	blt.n	8017e7a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017e74:	23ff      	movs	r3, #255	; 0xff
 8017e76:	613b      	str	r3, [r7, #16]
 8017e78:	e009      	b.n	8017e8e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017e7a:	7dfb      	ldrb	r3, [r7, #23]
 8017e7c:	2bbf      	cmp	r3, #191	; 0xbf
 8017e7e:	d903      	bls.n	8017e88 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017e80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017e84:	613b      	str	r3, [r7, #16]
 8017e86:	e002      	b.n	8017e8e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e8c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e92:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d108      	bne.n	8017eac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017e9a:	69bb      	ldr	r3, [r7, #24]
 8017e9c:	69da      	ldr	r2, [r3, #28]
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	4013      	ands	r3, r2
 8017ea2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017eaa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017eac:	210a      	movs	r1, #10
 8017eae:	69b8      	ldr	r0, [r7, #24]
 8017eb0:	f000 faa0 	bl	80183f4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017eb4:	69bb      	ldr	r3, [r7, #24]
 8017eb6:	f103 011c 	add.w	r1, r3, #28
 8017eba:	f107 030c 	add.w	r3, r7, #12
 8017ebe:	f107 0210 	add.w	r2, r7, #16
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f7f8 fbea 	bl	801069c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017ec8:	3720      	adds	r7, #32
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	080238c4 	.word	0x080238c4
 8017ed4:	08023a24 	.word	0x08023a24
 8017ed8:	08023924 	.word	0x08023924
 8017edc:	08023a40 	.word	0x08023a40
 8017ee0:	88888889 	.word	0x88888889

08017ee4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b08a      	sub	sp, #40	; 0x28
 8017ee8:	af02      	add	r7, sp, #8
 8017eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ef0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017ef2:	2105      	movs	r1, #5
 8017ef4:	69b8      	ldr	r0, [r7, #24]
 8017ef6:	f000 fa7d 	bl	80183f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017efa:	f107 030c 	add.w	r3, r7, #12
 8017efe:	2203      	movs	r2, #3
 8017f00:	69b9      	ldr	r1, [r7, #24]
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f000 ff00 	bl	8018d08 <dhcp_create_msg>
 8017f08:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d04e      	beq.n	8017fae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017f16:	89b8      	ldrh	r0, [r7, #12]
 8017f18:	693b      	ldr	r3, [r7, #16]
 8017f1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f1e:	2302      	movs	r3, #2
 8017f20:	2239      	movs	r2, #57	; 0x39
 8017f22:	f000 fa81 	bl	8018428 <dhcp_option>
 8017f26:	4603      	mov	r3, r0
 8017f28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017f2a:	89b8      	ldrh	r0, [r7, #12]
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f36:	461a      	mov	r2, r3
 8017f38:	f000 fad0 	bl	80184dc <dhcp_option_short>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017f40:	89b8      	ldrh	r0, [r7, #12]
 8017f42:	693b      	ldr	r3, [r7, #16]
 8017f44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f48:	2303      	movs	r3, #3
 8017f4a:	2237      	movs	r2, #55	; 0x37
 8017f4c:	f000 fa6c 	bl	8018428 <dhcp_option>
 8017f50:	4603      	mov	r3, r0
 8017f52:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017f54:	2300      	movs	r3, #0
 8017f56:	77bb      	strb	r3, [r7, #30]
 8017f58:	e00e      	b.n	8017f78 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017f5a:	89b8      	ldrh	r0, [r7, #12]
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f62:	7fbb      	ldrb	r3, [r7, #30]
 8017f64:	4a2a      	ldr	r2, [pc, #168]	; (8018010 <dhcp_renew+0x12c>)
 8017f66:	5cd3      	ldrb	r3, [r2, r3]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	f000 fa91 	bl	8018490 <dhcp_option_byte>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017f72:	7fbb      	ldrb	r3, [r7, #30]
 8017f74:	3301      	adds	r3, #1
 8017f76:	77bb      	strb	r3, [r7, #30]
 8017f78:	7fbb      	ldrb	r3, [r7, #30]
 8017f7a:	2b02      	cmp	r3, #2
 8017f7c:	d9ed      	bls.n	8017f5a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017f7e:	89b8      	ldrh	r0, [r7, #12]
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	33f0      	adds	r3, #240	; 0xf0
 8017f84:	697a      	ldr	r2, [r7, #20]
 8017f86:	4619      	mov	r1, r3
 8017f88:	f000 ff94 	bl	8018eb4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017f8c:	4b21      	ldr	r3, [pc, #132]	; (8018014 <dhcp_renew+0x130>)
 8017f8e:	6818      	ldr	r0, [r3, #0]
 8017f90:	69bb      	ldr	r3, [r7, #24]
 8017f92:	f103 0218 	add.w	r2, r3, #24
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	9300      	str	r3, [sp, #0]
 8017f9a:	2343      	movs	r3, #67	; 0x43
 8017f9c:	6979      	ldr	r1, [r7, #20]
 8017f9e:	f7fe fe8f 	bl	8016cc0 <udp_sendto_if>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017fa6:	6978      	ldr	r0, [r7, #20]
 8017fa8:	f7f8 ffcc 	bl	8010f44 <pbuf_free>
 8017fac:	e001      	b.n	8017fb2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017fae:	23ff      	movs	r3, #255	; 0xff
 8017fb0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017fb2:	69bb      	ldr	r3, [r7, #24]
 8017fb4:	799b      	ldrb	r3, [r3, #6]
 8017fb6:	2bff      	cmp	r3, #255	; 0xff
 8017fb8:	d005      	beq.n	8017fc6 <dhcp_renew+0xe2>
    dhcp->tries++;
 8017fba:	69bb      	ldr	r3, [r7, #24]
 8017fbc:	799b      	ldrb	r3, [r3, #6]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	b2da      	uxtb	r2, r3
 8017fc2:	69bb      	ldr	r3, [r7, #24]
 8017fc4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8017fc6:	69bb      	ldr	r3, [r7, #24]
 8017fc8:	799b      	ldrb	r3, [r3, #6]
 8017fca:	2b09      	cmp	r3, #9
 8017fcc:	d80a      	bhi.n	8017fe4 <dhcp_renew+0x100>
 8017fce:	69bb      	ldr	r3, [r7, #24]
 8017fd0:	799b      	ldrb	r3, [r3, #6]
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	461a      	mov	r2, r3
 8017fd6:	0152      	lsls	r2, r2, #5
 8017fd8:	1ad2      	subs	r2, r2, r3
 8017fda:	0092      	lsls	r2, r2, #2
 8017fdc:	4413      	add	r3, r2
 8017fde:	011b      	lsls	r3, r3, #4
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	e001      	b.n	8017fe8 <dhcp_renew+0x104>
 8017fe4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017fe8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017fea:	89fb      	ldrh	r3, [r7, #14]
 8017fec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017ff0:	4a09      	ldr	r2, [pc, #36]	; (8018018 <dhcp_renew+0x134>)
 8017ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8017ff6:	1152      	asrs	r2, r2, #5
 8017ff8:	17db      	asrs	r3, r3, #31
 8017ffa:	1ad3      	subs	r3, r2, r3
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	69bb      	ldr	r3, [r7, #24]
 8018000:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018002:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3720      	adds	r7, #32
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	20000080 	.word	0x20000080
 8018014:	20001074 	.word	0x20001074
 8018018:	10624dd3 	.word	0x10624dd3

0801801c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b08a      	sub	sp, #40	; 0x28
 8018020:	af02      	add	r7, sp, #8
 8018022:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018028:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801802a:	2104      	movs	r1, #4
 801802c:	69b8      	ldr	r0, [r7, #24]
 801802e:	f000 f9e1 	bl	80183f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018032:	f107 030c 	add.w	r3, r7, #12
 8018036:	2203      	movs	r2, #3
 8018038:	69b9      	ldr	r1, [r7, #24]
 801803a:	6878      	ldr	r0, [r7, #4]
 801803c:	f000 fe64 	bl	8018d08 <dhcp_create_msg>
 8018040:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d04c      	beq.n	80180e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801804e:	89b8      	ldrh	r0, [r7, #12]
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018056:	2302      	movs	r3, #2
 8018058:	2239      	movs	r2, #57	; 0x39
 801805a:	f000 f9e5 	bl	8018428 <dhcp_option>
 801805e:	4603      	mov	r3, r0
 8018060:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018062:	89b8      	ldrh	r0, [r7, #12]
 8018064:	693b      	ldr	r3, [r7, #16]
 8018066:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801806e:	461a      	mov	r2, r3
 8018070:	f000 fa34 	bl	80184dc <dhcp_option_short>
 8018074:	4603      	mov	r3, r0
 8018076:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018078:	89b8      	ldrh	r0, [r7, #12]
 801807a:	693b      	ldr	r3, [r7, #16]
 801807c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018080:	2303      	movs	r3, #3
 8018082:	2237      	movs	r2, #55	; 0x37
 8018084:	f000 f9d0 	bl	8018428 <dhcp_option>
 8018088:	4603      	mov	r3, r0
 801808a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801808c:	2300      	movs	r3, #0
 801808e:	77bb      	strb	r3, [r7, #30]
 8018090:	e00e      	b.n	80180b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018092:	89b8      	ldrh	r0, [r7, #12]
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801809a:	7fbb      	ldrb	r3, [r7, #30]
 801809c:	4a29      	ldr	r2, [pc, #164]	; (8018144 <dhcp_rebind+0x128>)
 801809e:	5cd3      	ldrb	r3, [r2, r3]
 80180a0:	461a      	mov	r2, r3
 80180a2:	f000 f9f5 	bl	8018490 <dhcp_option_byte>
 80180a6:	4603      	mov	r3, r0
 80180a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80180aa:	7fbb      	ldrb	r3, [r7, #30]
 80180ac:	3301      	adds	r3, #1
 80180ae:	77bb      	strb	r3, [r7, #30]
 80180b0:	7fbb      	ldrb	r3, [r7, #30]
 80180b2:	2b02      	cmp	r3, #2
 80180b4:	d9ed      	bls.n	8018092 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80180b6:	89b8      	ldrh	r0, [r7, #12]
 80180b8:	693b      	ldr	r3, [r7, #16]
 80180ba:	33f0      	adds	r3, #240	; 0xf0
 80180bc:	697a      	ldr	r2, [r7, #20]
 80180be:	4619      	mov	r1, r3
 80180c0:	f000 fef8 	bl	8018eb4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80180c4:	4b20      	ldr	r3, [pc, #128]	; (8018148 <dhcp_rebind+0x12c>)
 80180c6:	6818      	ldr	r0, [r3, #0]
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	9300      	str	r3, [sp, #0]
 80180cc:	2343      	movs	r3, #67	; 0x43
 80180ce:	4a1f      	ldr	r2, [pc, #124]	; (801814c <dhcp_rebind+0x130>)
 80180d0:	6979      	ldr	r1, [r7, #20]
 80180d2:	f7fe fdf5 	bl	8016cc0 <udp_sendto_if>
 80180d6:	4603      	mov	r3, r0
 80180d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80180da:	6978      	ldr	r0, [r7, #20]
 80180dc:	f7f8 ff32 	bl	8010f44 <pbuf_free>
 80180e0:	e001      	b.n	80180e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80180e2:	23ff      	movs	r3, #255	; 0xff
 80180e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	799b      	ldrb	r3, [r3, #6]
 80180ea:	2bff      	cmp	r3, #255	; 0xff
 80180ec:	d005      	beq.n	80180fa <dhcp_rebind+0xde>
    dhcp->tries++;
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	799b      	ldrb	r3, [r3, #6]
 80180f2:	3301      	adds	r3, #1
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	69bb      	ldr	r3, [r7, #24]
 80180f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80180fa:	69bb      	ldr	r3, [r7, #24]
 80180fc:	799b      	ldrb	r3, [r3, #6]
 80180fe:	2b09      	cmp	r3, #9
 8018100:	d80a      	bhi.n	8018118 <dhcp_rebind+0xfc>
 8018102:	69bb      	ldr	r3, [r7, #24]
 8018104:	799b      	ldrb	r3, [r3, #6]
 8018106:	b29b      	uxth	r3, r3
 8018108:	461a      	mov	r2, r3
 801810a:	0152      	lsls	r2, r2, #5
 801810c:	1ad2      	subs	r2, r2, r3
 801810e:	0092      	lsls	r2, r2, #2
 8018110:	4413      	add	r3, r2
 8018112:	00db      	lsls	r3, r3, #3
 8018114:	b29b      	uxth	r3, r3
 8018116:	e001      	b.n	801811c <dhcp_rebind+0x100>
 8018118:	f242 7310 	movw	r3, #10000	; 0x2710
 801811c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801811e:	89fb      	ldrh	r3, [r7, #14]
 8018120:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018124:	4a0a      	ldr	r2, [pc, #40]	; (8018150 <dhcp_rebind+0x134>)
 8018126:	fb82 1203 	smull	r1, r2, r2, r3
 801812a:	1152      	asrs	r2, r2, #5
 801812c:	17db      	asrs	r3, r3, #31
 801812e:	1ad3      	subs	r3, r2, r3
 8018130:	b29a      	uxth	r2, r3
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018136:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801813a:	4618      	mov	r0, r3
 801813c:	3720      	adds	r7, #32
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	20000080 	.word	0x20000080
 8018148:	20001074 	.word	0x20001074
 801814c:	08024984 	.word	0x08024984
 8018150:	10624dd3 	.word	0x10624dd3

08018154 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8018154:	b5b0      	push	{r4, r5, r7, lr}
 8018156:	b08a      	sub	sp, #40	; 0x28
 8018158:	af02      	add	r7, sp, #8
 801815a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018160:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8018162:	2103      	movs	r1, #3
 8018164:	69b8      	ldr	r0, [r7, #24]
 8018166:	f000 f945 	bl	80183f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801816a:	f107 030c 	add.w	r3, r7, #12
 801816e:	2203      	movs	r2, #3
 8018170:	69b9      	ldr	r1, [r7, #24]
 8018172:	6878      	ldr	r0, [r7, #4]
 8018174:	f000 fdc8 	bl	8018d08 <dhcp_create_msg>
 8018178:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d066      	beq.n	801824e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018186:	89b8      	ldrh	r0, [r7, #12]
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801818e:	2302      	movs	r3, #2
 8018190:	2239      	movs	r2, #57	; 0x39
 8018192:	f000 f949 	bl	8018428 <dhcp_option>
 8018196:	4603      	mov	r3, r0
 8018198:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801819a:	89b8      	ldrh	r0, [r7, #12]
 801819c:	693b      	ldr	r3, [r7, #16]
 801819e:	33f0      	adds	r3, #240	; 0xf0
 80181a0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80181a4:	4619      	mov	r1, r3
 80181a6:	f000 f999 	bl	80184dc <dhcp_option_short>
 80181aa:	4603      	mov	r3, r0
 80181ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80181ae:	89b8      	ldrh	r0, [r7, #12]
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80181b6:	2304      	movs	r3, #4
 80181b8:	2232      	movs	r2, #50	; 0x32
 80181ba:	f000 f935 	bl	8018428 <dhcp_option>
 80181be:	4603      	mov	r3, r0
 80181c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80181c2:	89bc      	ldrh	r4, [r7, #12]
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	69db      	ldr	r3, [r3, #28]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f7 fc35 	bl	800fa3e <lwip_htonl>
 80181d4:	4603      	mov	r3, r0
 80181d6:	461a      	mov	r2, r3
 80181d8:	4629      	mov	r1, r5
 80181da:	4620      	mov	r0, r4
 80181dc:	f000 f9b0 	bl	8018540 <dhcp_option_long>
 80181e0:	4603      	mov	r3, r0
 80181e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80181e4:	89b8      	ldrh	r0, [r7, #12]
 80181e6:	693b      	ldr	r3, [r7, #16]
 80181e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80181ec:	2303      	movs	r3, #3
 80181ee:	2237      	movs	r2, #55	; 0x37
 80181f0:	f000 f91a 	bl	8018428 <dhcp_option>
 80181f4:	4603      	mov	r3, r0
 80181f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80181f8:	2300      	movs	r3, #0
 80181fa:	77bb      	strb	r3, [r7, #30]
 80181fc:	e00e      	b.n	801821c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80181fe:	89b8      	ldrh	r0, [r7, #12]
 8018200:	693b      	ldr	r3, [r7, #16]
 8018202:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018206:	7fbb      	ldrb	r3, [r7, #30]
 8018208:	4a29      	ldr	r2, [pc, #164]	; (80182b0 <dhcp_reboot+0x15c>)
 801820a:	5cd3      	ldrb	r3, [r2, r3]
 801820c:	461a      	mov	r2, r3
 801820e:	f000 f93f 	bl	8018490 <dhcp_option_byte>
 8018212:	4603      	mov	r3, r0
 8018214:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018216:	7fbb      	ldrb	r3, [r7, #30]
 8018218:	3301      	adds	r3, #1
 801821a:	77bb      	strb	r3, [r7, #30]
 801821c:	7fbb      	ldrb	r3, [r7, #30]
 801821e:	2b02      	cmp	r3, #2
 8018220:	d9ed      	bls.n	80181fe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018222:	89b8      	ldrh	r0, [r7, #12]
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	33f0      	adds	r3, #240	; 0xf0
 8018228:	697a      	ldr	r2, [r7, #20]
 801822a:	4619      	mov	r1, r3
 801822c:	f000 fe42 	bl	8018eb4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018230:	4b20      	ldr	r3, [pc, #128]	; (80182b4 <dhcp_reboot+0x160>)
 8018232:	6818      	ldr	r0, [r3, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	9300      	str	r3, [sp, #0]
 8018238:	2343      	movs	r3, #67	; 0x43
 801823a:	4a1f      	ldr	r2, [pc, #124]	; (80182b8 <dhcp_reboot+0x164>)
 801823c:	6979      	ldr	r1, [r7, #20]
 801823e:	f7fe fd3f 	bl	8016cc0 <udp_sendto_if>
 8018242:	4603      	mov	r3, r0
 8018244:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018246:	6978      	ldr	r0, [r7, #20]
 8018248:	f7f8 fe7c 	bl	8010f44 <pbuf_free>
 801824c:	e001      	b.n	8018252 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801824e:	23ff      	movs	r3, #255	; 0xff
 8018250:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018252:	69bb      	ldr	r3, [r7, #24]
 8018254:	799b      	ldrb	r3, [r3, #6]
 8018256:	2bff      	cmp	r3, #255	; 0xff
 8018258:	d005      	beq.n	8018266 <dhcp_reboot+0x112>
    dhcp->tries++;
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	799b      	ldrb	r3, [r3, #6]
 801825e:	3301      	adds	r3, #1
 8018260:	b2da      	uxtb	r2, r3
 8018262:	69bb      	ldr	r3, [r7, #24]
 8018264:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	799b      	ldrb	r3, [r3, #6]
 801826a:	2b09      	cmp	r3, #9
 801826c:	d80a      	bhi.n	8018284 <dhcp_reboot+0x130>
 801826e:	69bb      	ldr	r3, [r7, #24]
 8018270:	799b      	ldrb	r3, [r3, #6]
 8018272:	b29b      	uxth	r3, r3
 8018274:	461a      	mov	r2, r3
 8018276:	0152      	lsls	r2, r2, #5
 8018278:	1ad2      	subs	r2, r2, r3
 801827a:	0092      	lsls	r2, r2, #2
 801827c:	4413      	add	r3, r2
 801827e:	00db      	lsls	r3, r3, #3
 8018280:	b29b      	uxth	r3, r3
 8018282:	e001      	b.n	8018288 <dhcp_reboot+0x134>
 8018284:	f242 7310 	movw	r3, #10000	; 0x2710
 8018288:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801828a:	89fb      	ldrh	r3, [r7, #14]
 801828c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018290:	4a0a      	ldr	r2, [pc, #40]	; (80182bc <dhcp_reboot+0x168>)
 8018292:	fb82 1203 	smull	r1, r2, r2, r3
 8018296:	1152      	asrs	r2, r2, #5
 8018298:	17db      	asrs	r3, r3, #31
 801829a:	1ad3      	subs	r3, r2, r3
 801829c:	b29a      	uxth	r2, r3
 801829e:	69bb      	ldr	r3, [r7, #24]
 80182a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80182a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80182a6:	4618      	mov	r0, r3
 80182a8:	3720      	adds	r7, #32
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bdb0      	pop	{r4, r5, r7, pc}
 80182ae:	bf00      	nop
 80182b0:	20000080 	.word	0x20000080
 80182b4:	20001074 	.word	0x20001074
 80182b8:	08024984 	.word	0x08024984
 80182bc:	10624dd3 	.word	0x10624dd3

080182c0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80182c0:	b5b0      	push	{r4, r5, r7, lr}
 80182c2:	b08a      	sub	sp, #40	; 0x28
 80182c4:	af02      	add	r7, sp, #8
 80182c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	f000 8084 	beq.w	80183de <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80182d6:	69fb      	ldr	r3, [r7, #28]
 80182d8:	795b      	ldrb	r3, [r3, #5]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 8081 	beq.w	80183e2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80182e0:	69fb      	ldr	r3, [r7, #28]
 80182e2:	699b      	ldr	r3, [r3, #24]
 80182e4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80182e6:	69fb      	ldr	r3, [r7, #28]
 80182e8:	2200      	movs	r2, #0
 80182ea:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80182ec:	69fb      	ldr	r3, [r7, #28]
 80182ee:	2200      	movs	r2, #0
 80182f0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80182f2:	69fb      	ldr	r3, [r7, #28]
 80182f4:	2200      	movs	r2, #0
 80182f6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80182f8:	69fb      	ldr	r3, [r7, #28]
 80182fa:	2200      	movs	r2, #0
 80182fc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80182fe:	69fb      	ldr	r3, [r7, #28]
 8018300:	2200      	movs	r2, #0
 8018302:	631a      	str	r2, [r3, #48]	; 0x30
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018308:	69fb      	ldr	r3, [r7, #28]
 801830a:	62da      	str	r2, [r3, #44]	; 0x2c
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018310:	69fb      	ldr	r3, [r7, #28]
 8018312:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8018314:	69fb      	ldr	r3, [r7, #28]
 8018316:	2200      	movs	r2, #0
 8018318:	829a      	strh	r2, [r3, #20]
 801831a:	69fb      	ldr	r3, [r7, #28]
 801831c:	8a9a      	ldrh	r2, [r3, #20]
 801831e:	69fb      	ldr	r3, [r7, #28]
 8018320:	825a      	strh	r2, [r3, #18]
 8018322:	69fb      	ldr	r3, [r7, #28]
 8018324:	8a5a      	ldrh	r2, [r3, #18]
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	821a      	strh	r2, [r3, #16]
 801832a:	69fb      	ldr	r3, [r7, #28]
 801832c:	8a1a      	ldrh	r2, [r3, #16]
 801832e:	69fb      	ldr	r3, [r7, #28]
 8018330:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f000 fdec 	bl	8018f10 <dhcp_supplied_address>
 8018338:	4603      	mov	r3, r0
 801833a:	2b00      	cmp	r3, #0
 801833c:	d03b      	beq.n	80183b6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801833e:	f107 030e 	add.w	r3, r7, #14
 8018342:	2207      	movs	r2, #7
 8018344:	69f9      	ldr	r1, [r7, #28]
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	f000 fcde 	bl	8018d08 <dhcp_create_msg>
 801834c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801834e:	69bb      	ldr	r3, [r7, #24]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d030      	beq.n	80183b6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018354:	69bb      	ldr	r3, [r7, #24]
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801835a:	89f8      	ldrh	r0, [r7, #14]
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018362:	2304      	movs	r3, #4
 8018364:	2236      	movs	r2, #54	; 0x36
 8018366:	f000 f85f 	bl	8018428 <dhcp_option>
 801836a:	4603      	mov	r3, r0
 801836c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801836e:	89fc      	ldrh	r4, [r7, #14]
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018376:	693b      	ldr	r3, [r7, #16]
 8018378:	4618      	mov	r0, r3
 801837a:	f7f7 fb60 	bl	800fa3e <lwip_htonl>
 801837e:	4603      	mov	r3, r0
 8018380:	461a      	mov	r2, r3
 8018382:	4629      	mov	r1, r5
 8018384:	4620      	mov	r0, r4
 8018386:	f000 f8db 	bl	8018540 <dhcp_option_long>
 801838a:	4603      	mov	r3, r0
 801838c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801838e:	89f8      	ldrh	r0, [r7, #14]
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	33f0      	adds	r3, #240	; 0xf0
 8018394:	69ba      	ldr	r2, [r7, #24]
 8018396:	4619      	mov	r1, r3
 8018398:	f000 fd8c 	bl	8018eb4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801839c:	4b13      	ldr	r3, [pc, #76]	; (80183ec <dhcp_release_and_stop+0x12c>)
 801839e:	6818      	ldr	r0, [r3, #0]
 80183a0:	f107 0210 	add.w	r2, r7, #16
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	9300      	str	r3, [sp, #0]
 80183a8:	2343      	movs	r3, #67	; 0x43
 80183aa:	69b9      	ldr	r1, [r7, #24]
 80183ac:	f7fe fc88 	bl	8016cc0 <udp_sendto_if>
      pbuf_free(p_out);
 80183b0:	69b8      	ldr	r0, [r7, #24]
 80183b2:	f7f8 fdc7 	bl	8010f44 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80183b6:	4b0e      	ldr	r3, [pc, #56]	; (80183f0 <dhcp_release_and_stop+0x130>)
 80183b8:	4a0d      	ldr	r2, [pc, #52]	; (80183f0 <dhcp_release_and_stop+0x130>)
 80183ba:	490d      	ldr	r1, [pc, #52]	; (80183f0 <dhcp_release_and_stop+0x130>)
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	f7f8 f96d 	bl	801069c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80183c2:	2100      	movs	r1, #0
 80183c4:	69f8      	ldr	r0, [r7, #28]
 80183c6:	f000 f815 	bl	80183f4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80183ca:	69fb      	ldr	r3, [r7, #28]
 80183cc:	791b      	ldrb	r3, [r3, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d008      	beq.n	80183e4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80183d2:	f7fe ffc1 	bl	8017358 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80183d6:	69fb      	ldr	r3, [r7, #28]
 80183d8:	2200      	movs	r2, #0
 80183da:	711a      	strb	r2, [r3, #4]
 80183dc:	e002      	b.n	80183e4 <dhcp_release_and_stop+0x124>
    return;
 80183de:	bf00      	nop
 80183e0:	e000      	b.n	80183e4 <dhcp_release_and_stop+0x124>
    return;
 80183e2:	bf00      	nop
  }
}
 80183e4:	3720      	adds	r7, #32
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bdb0      	pop	{r4, r5, r7, pc}
 80183ea:	bf00      	nop
 80183ec:	20001074 	.word	0x20001074
 80183f0:	08024980 	.word	0x08024980

080183f4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80183f4:	b480      	push	{r7}
 80183f6:	b083      	sub	sp, #12
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
 80183fc:	460b      	mov	r3, r1
 80183fe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	795b      	ldrb	r3, [r3, #5]
 8018404:	78fa      	ldrb	r2, [r7, #3]
 8018406:	429a      	cmp	r2, r3
 8018408:	d008      	beq.n	801841c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	78fa      	ldrb	r2, [r7, #3]
 801840e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2200      	movs	r2, #0
 8018414:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2200      	movs	r2, #0
 801841a:	811a      	strh	r2, [r3, #8]
  }
}
 801841c:	bf00      	nop
 801841e:	370c      	adds	r7, #12
 8018420:	46bd      	mov	sp, r7
 8018422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018426:	4770      	bx	lr

08018428 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6039      	str	r1, [r7, #0]
 8018430:	4611      	mov	r1, r2
 8018432:	461a      	mov	r2, r3
 8018434:	4603      	mov	r3, r0
 8018436:	80fb      	strh	r3, [r7, #6]
 8018438:	460b      	mov	r3, r1
 801843a:	717b      	strb	r3, [r7, #5]
 801843c:	4613      	mov	r3, r2
 801843e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018440:	88fa      	ldrh	r2, [r7, #6]
 8018442:	793b      	ldrb	r3, [r7, #4]
 8018444:	4413      	add	r3, r2
 8018446:	3302      	adds	r3, #2
 8018448:	2b44      	cmp	r3, #68	; 0x44
 801844a:	d906      	bls.n	801845a <dhcp_option+0x32>
 801844c:	4b0d      	ldr	r3, [pc, #52]	; (8018484 <dhcp_option+0x5c>)
 801844e:	f240 529a 	movw	r2, #1434	; 0x59a
 8018452:	490d      	ldr	r1, [pc, #52]	; (8018488 <dhcp_option+0x60>)
 8018454:	480d      	ldr	r0, [pc, #52]	; (801848c <dhcp_option+0x64>)
 8018456:	f003 fdfd 	bl	801c054 <iprintf>
  options[options_out_len++] = option_type;
 801845a:	88fb      	ldrh	r3, [r7, #6]
 801845c:	1c5a      	adds	r2, r3, #1
 801845e:	80fa      	strh	r2, [r7, #6]
 8018460:	461a      	mov	r2, r3
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	4413      	add	r3, r2
 8018466:	797a      	ldrb	r2, [r7, #5]
 8018468:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801846a:	88fb      	ldrh	r3, [r7, #6]
 801846c:	1c5a      	adds	r2, r3, #1
 801846e:	80fa      	strh	r2, [r7, #6]
 8018470:	461a      	mov	r2, r3
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	4413      	add	r3, r2
 8018476:	793a      	ldrb	r2, [r7, #4]
 8018478:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801847a:	88fb      	ldrh	r3, [r7, #6]
}
 801847c:	4618      	mov	r0, r3
 801847e:	3708      	adds	r7, #8
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	080238c4 	.word	0x080238c4
 8018488:	08023a58 	.word	0x08023a58
 801848c:	08023924 	.word	0x08023924

08018490 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	4603      	mov	r3, r0
 8018498:	6039      	str	r1, [r7, #0]
 801849a:	80fb      	strh	r3, [r7, #6]
 801849c:	4613      	mov	r3, r2
 801849e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80184a0:	88fb      	ldrh	r3, [r7, #6]
 80184a2:	2b43      	cmp	r3, #67	; 0x43
 80184a4:	d906      	bls.n	80184b4 <dhcp_option_byte+0x24>
 80184a6:	4b0a      	ldr	r3, [pc, #40]	; (80184d0 <dhcp_option_byte+0x40>)
 80184a8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80184ac:	4909      	ldr	r1, [pc, #36]	; (80184d4 <dhcp_option_byte+0x44>)
 80184ae:	480a      	ldr	r0, [pc, #40]	; (80184d8 <dhcp_option_byte+0x48>)
 80184b0:	f003 fdd0 	bl	801c054 <iprintf>
  options[options_out_len++] = value;
 80184b4:	88fb      	ldrh	r3, [r7, #6]
 80184b6:	1c5a      	adds	r2, r3, #1
 80184b8:	80fa      	strh	r2, [r7, #6]
 80184ba:	461a      	mov	r2, r3
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	4413      	add	r3, r2
 80184c0:	797a      	ldrb	r2, [r7, #5]
 80184c2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80184c4:	88fb      	ldrh	r3, [r7, #6]
}
 80184c6:	4618      	mov	r0, r3
 80184c8:	3708      	adds	r7, #8
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	080238c4 	.word	0x080238c4
 80184d4:	08023a9c 	.word	0x08023a9c
 80184d8:	08023924 	.word	0x08023924

080184dc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	4603      	mov	r3, r0
 80184e4:	6039      	str	r1, [r7, #0]
 80184e6:	80fb      	strh	r3, [r7, #6]
 80184e8:	4613      	mov	r3, r2
 80184ea:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80184ec:	88fb      	ldrh	r3, [r7, #6]
 80184ee:	3302      	adds	r3, #2
 80184f0:	2b44      	cmp	r3, #68	; 0x44
 80184f2:	d906      	bls.n	8018502 <dhcp_option_short+0x26>
 80184f4:	4b0f      	ldr	r3, [pc, #60]	; (8018534 <dhcp_option_short+0x58>)
 80184f6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80184fa:	490f      	ldr	r1, [pc, #60]	; (8018538 <dhcp_option_short+0x5c>)
 80184fc:	480f      	ldr	r0, [pc, #60]	; (801853c <dhcp_option_short+0x60>)
 80184fe:	f003 fda9 	bl	801c054 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8018502:	88bb      	ldrh	r3, [r7, #4]
 8018504:	0a1b      	lsrs	r3, r3, #8
 8018506:	b29a      	uxth	r2, r3
 8018508:	88fb      	ldrh	r3, [r7, #6]
 801850a:	1c59      	adds	r1, r3, #1
 801850c:	80f9      	strh	r1, [r7, #6]
 801850e:	4619      	mov	r1, r3
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	440b      	add	r3, r1
 8018514:	b2d2      	uxtb	r2, r2
 8018516:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8018518:	88fb      	ldrh	r3, [r7, #6]
 801851a:	1c5a      	adds	r2, r3, #1
 801851c:	80fa      	strh	r2, [r7, #6]
 801851e:	461a      	mov	r2, r3
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	4413      	add	r3, r2
 8018524:	88ba      	ldrh	r2, [r7, #4]
 8018526:	b2d2      	uxtb	r2, r2
 8018528:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801852a:	88fb      	ldrh	r3, [r7, #6]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3708      	adds	r7, #8
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}
 8018534:	080238c4 	.word	0x080238c4
 8018538:	08023ad4 	.word	0x08023ad4
 801853c:	08023924 	.word	0x08023924

08018540 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	4603      	mov	r3, r0
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
 801854c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801854e:	89fb      	ldrh	r3, [r7, #14]
 8018550:	3304      	adds	r3, #4
 8018552:	2b44      	cmp	r3, #68	; 0x44
 8018554:	d906      	bls.n	8018564 <dhcp_option_long+0x24>
 8018556:	4b19      	ldr	r3, [pc, #100]	; (80185bc <dhcp_option_long+0x7c>)
 8018558:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801855c:	4918      	ldr	r1, [pc, #96]	; (80185c0 <dhcp_option_long+0x80>)
 801855e:	4819      	ldr	r0, [pc, #100]	; (80185c4 <dhcp_option_long+0x84>)
 8018560:	f003 fd78 	bl	801c054 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	0e1a      	lsrs	r2, r3, #24
 8018568:	89fb      	ldrh	r3, [r7, #14]
 801856a:	1c59      	adds	r1, r3, #1
 801856c:	81f9      	strh	r1, [r7, #14]
 801856e:	4619      	mov	r1, r3
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	440b      	add	r3, r1
 8018574:	b2d2      	uxtb	r2, r2
 8018576:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	0c1a      	lsrs	r2, r3, #16
 801857c:	89fb      	ldrh	r3, [r7, #14]
 801857e:	1c59      	adds	r1, r3, #1
 8018580:	81f9      	strh	r1, [r7, #14]
 8018582:	4619      	mov	r1, r3
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	440b      	add	r3, r1
 8018588:	b2d2      	uxtb	r2, r2
 801858a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	0a1a      	lsrs	r2, r3, #8
 8018590:	89fb      	ldrh	r3, [r7, #14]
 8018592:	1c59      	adds	r1, r3, #1
 8018594:	81f9      	strh	r1, [r7, #14]
 8018596:	4619      	mov	r1, r3
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	440b      	add	r3, r1
 801859c:	b2d2      	uxtb	r2, r2
 801859e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80185a0:	89fb      	ldrh	r3, [r7, #14]
 80185a2:	1c5a      	adds	r2, r3, #1
 80185a4:	81fa      	strh	r2, [r7, #14]
 80185a6:	461a      	mov	r2, r3
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	4413      	add	r3, r2
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	b2d2      	uxtb	r2, r2
 80185b0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80185b2:	89fb      	ldrh	r3, [r7, #14]
}
 80185b4:	4618      	mov	r0, r3
 80185b6:	3710      	adds	r7, #16
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	080238c4 	.word	0x080238c4
 80185c0:	08023b10 	.word	0x08023b10
 80185c4:	08023924 	.word	0x08023924

080185c8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b090      	sub	sp, #64	; 0x40
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80185d2:	2300      	movs	r3, #0
 80185d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80185d6:	2300      	movs	r3, #0
 80185d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80185da:	2208      	movs	r2, #8
 80185dc:	2100      	movs	r1, #0
 80185de:	48be      	ldr	r0, [pc, #760]	; (80188d8 <dhcp_parse_reply+0x310>)
 80185e0:	f003 f82b 	bl	801b63a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	895b      	ldrh	r3, [r3, #10]
 80185e8:	2b2b      	cmp	r3, #43	; 0x2b
 80185ea:	d802      	bhi.n	80185f2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80185ec:	f06f 0301 	mvn.w	r3, #1
 80185f0:	e2a8      	b.n	8018b44 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80185f8:	23f0      	movs	r3, #240	; 0xf0
 80185fa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	891b      	ldrh	r3, [r3, #8]
 8018600:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8018606:	e00c      	b.n	8018622 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8018608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860a:	895b      	ldrh	r3, [r3, #10]
 801860c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801860e:	1ad3      	subs	r3, r2, r3
 8018610:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8018612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018614:	895b      	ldrh	r3, [r3, #10]
 8018616:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8018618:	1ad3      	subs	r3, r2, r3
 801861a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8018622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018624:	2b00      	cmp	r3, #0
 8018626:	d004      	beq.n	8018632 <dhcp_parse_reply+0x6a>
 8018628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801862a:	895b      	ldrh	r3, [r3, #10]
 801862c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801862e:	429a      	cmp	r2, r3
 8018630:	d2ea      	bcs.n	8018608 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8018632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018634:	2b00      	cmp	r3, #0
 8018636:	d102      	bne.n	801863e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8018638:	f06f 0301 	mvn.w	r3, #1
 801863c:	e282      	b.n	8018b44 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801863e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018640:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8018642:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018644:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8018646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801864c:	e23a      	b.n	8018ac4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801864e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018652:	4413      	add	r3, r2
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8018658:	2300      	movs	r3, #0
 801865a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801865e:	f04f 33ff 	mov.w	r3, #4294967295
 8018662:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8018664:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018666:	3302      	adds	r3, #2
 8018668:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801866a:	8bfa      	ldrh	r2, [r7, #30]
 801866c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801866e:	429a      	cmp	r2, r3
 8018670:	d202      	bcs.n	8018678 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8018672:	f06f 0301 	mvn.w	r3, #1
 8018676:	e265      	b.n	8018b44 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8018678:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801867a:	3301      	adds	r3, #1
 801867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801867e:	8952      	ldrh	r2, [r2, #10]
 8018680:	4293      	cmp	r3, r2
 8018682:	da07      	bge.n	8018694 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8018684:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018686:	3301      	adds	r3, #1
 8018688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801868a:	4413      	add	r3, r2
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018692:	e00b      	b.n	80186ac <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8018694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d004      	beq.n	80186a6 <dhcp_parse_reply+0xde>
 801869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	685b      	ldr	r3, [r3, #4]
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	e000      	b.n	80186a8 <dhcp_parse_reply+0xe0>
 80186a6:	2300      	movs	r3, #0
 80186a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80186ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80186b4:	7dfb      	ldrb	r3, [r7, #23]
 80186b6:	2b3b      	cmp	r3, #59	; 0x3b
 80186b8:	f200 812d 	bhi.w	8018916 <dhcp_parse_reply+0x34e>
 80186bc:	a201      	add	r2, pc, #4	; (adr r2, 80186c4 <dhcp_parse_reply+0xfc>)
 80186be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c2:	bf00      	nop
 80186c4:	080187b5 	.word	0x080187b5
 80186c8:	080187c5 	.word	0x080187c5
 80186cc:	08018917 	.word	0x08018917
 80186d0:	080187e7 	.word	0x080187e7
 80186d4:	08018917 	.word	0x08018917
 80186d8:	08018917 	.word	0x08018917
 80186dc:	08018917 	.word	0x08018917
 80186e0:	08018917 	.word	0x08018917
 80186e4:	08018917 	.word	0x08018917
 80186e8:	08018917 	.word	0x08018917
 80186ec:	08018917 	.word	0x08018917
 80186f0:	08018917 	.word	0x08018917
 80186f4:	08018917 	.word	0x08018917
 80186f8:	08018917 	.word	0x08018917
 80186fc:	08018917 	.word	0x08018917
 8018700:	08018917 	.word	0x08018917
 8018704:	08018917 	.word	0x08018917
 8018708:	08018917 	.word	0x08018917
 801870c:	08018917 	.word	0x08018917
 8018710:	08018917 	.word	0x08018917
 8018714:	08018917 	.word	0x08018917
 8018718:	08018917 	.word	0x08018917
 801871c:	08018917 	.word	0x08018917
 8018720:	08018917 	.word	0x08018917
 8018724:	08018917 	.word	0x08018917
 8018728:	08018917 	.word	0x08018917
 801872c:	08018917 	.word	0x08018917
 8018730:	08018917 	.word	0x08018917
 8018734:	08018917 	.word	0x08018917
 8018738:	08018917 	.word	0x08018917
 801873c:	08018917 	.word	0x08018917
 8018740:	08018917 	.word	0x08018917
 8018744:	08018917 	.word	0x08018917
 8018748:	08018917 	.word	0x08018917
 801874c:	08018917 	.word	0x08018917
 8018750:	08018917 	.word	0x08018917
 8018754:	08018917 	.word	0x08018917
 8018758:	08018917 	.word	0x08018917
 801875c:	08018917 	.word	0x08018917
 8018760:	08018917 	.word	0x08018917
 8018764:	08018917 	.word	0x08018917
 8018768:	08018917 	.word	0x08018917
 801876c:	08018917 	.word	0x08018917
 8018770:	08018917 	.word	0x08018917
 8018774:	08018917 	.word	0x08018917
 8018778:	08018917 	.word	0x08018917
 801877c:	08018917 	.word	0x08018917
 8018780:	08018917 	.word	0x08018917
 8018784:	08018917 	.word	0x08018917
 8018788:	08018917 	.word	0x08018917
 801878c:	08018917 	.word	0x08018917
 8018790:	08018813 	.word	0x08018813
 8018794:	08018835 	.word	0x08018835
 8018798:	08018871 	.word	0x08018871
 801879c:	08018893 	.word	0x08018893
 80187a0:	08018917 	.word	0x08018917
 80187a4:	08018917 	.word	0x08018917
 80187a8:	08018917 	.word	0x08018917
 80187ac:	080188b5 	.word	0x080188b5
 80187b0:	080188f5 	.word	0x080188f5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80187b4:	2300      	movs	r3, #0
 80187b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80187ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80187c2:	e0ac      	b.n	801891e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80187c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187c8:	2b04      	cmp	r3, #4
 80187ca:	d009      	beq.n	80187e0 <dhcp_parse_reply+0x218>
 80187cc:	4b43      	ldr	r3, [pc, #268]	; (80188dc <dhcp_parse_reply+0x314>)
 80187ce:	f240 622e 	movw	r2, #1582	; 0x62e
 80187d2:	4943      	ldr	r1, [pc, #268]	; (80188e0 <dhcp_parse_reply+0x318>)
 80187d4:	4843      	ldr	r0, [pc, #268]	; (80188e4 <dhcp_parse_reply+0x31c>)
 80187d6:	f003 fc3d 	bl	801c054 <iprintf>
 80187da:	f06f 0305 	mvn.w	r3, #5
 80187de:	e1b1      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80187e0:	2306      	movs	r3, #6
 80187e2:	623b      	str	r3, [r7, #32]
        break;
 80187e4:	e09b      	b.n	801891e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80187e6:	2304      	movs	r3, #4
 80187e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80187ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80187f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d209      	bcs.n	801880c <dhcp_parse_reply+0x244>
 80187f8:	4b38      	ldr	r3, [pc, #224]	; (80188dc <dhcp_parse_reply+0x314>)
 80187fa:	f240 6233 	movw	r2, #1587	; 0x633
 80187fe:	493a      	ldr	r1, [pc, #232]	; (80188e8 <dhcp_parse_reply+0x320>)
 8018800:	4838      	ldr	r0, [pc, #224]	; (80188e4 <dhcp_parse_reply+0x31c>)
 8018802:	f003 fc27 	bl	801c054 <iprintf>
 8018806:	f06f 0305 	mvn.w	r3, #5
 801880a:	e19b      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801880c:	2307      	movs	r3, #7
 801880e:	623b      	str	r3, [r7, #32]
        break;
 8018810:	e085      	b.n	801891e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018816:	2b04      	cmp	r3, #4
 8018818:	d009      	beq.n	801882e <dhcp_parse_reply+0x266>
 801881a:	4b30      	ldr	r3, [pc, #192]	; (80188dc <dhcp_parse_reply+0x314>)
 801881c:	f240 6241 	movw	r2, #1601	; 0x641
 8018820:	492f      	ldr	r1, [pc, #188]	; (80188e0 <dhcp_parse_reply+0x318>)
 8018822:	4830      	ldr	r0, [pc, #192]	; (80188e4 <dhcp_parse_reply+0x31c>)
 8018824:	f003 fc16 	bl	801c054 <iprintf>
 8018828:	f06f 0305 	mvn.w	r3, #5
 801882c:	e18a      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801882e:	2303      	movs	r3, #3
 8018830:	623b      	str	r3, [r7, #32]
        break;
 8018832:	e074      	b.n	801891e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018838:	2b01      	cmp	r3, #1
 801883a:	d009      	beq.n	8018850 <dhcp_parse_reply+0x288>
 801883c:	4b27      	ldr	r3, [pc, #156]	; (80188dc <dhcp_parse_reply+0x314>)
 801883e:	f240 624f 	movw	r2, #1615	; 0x64f
 8018842:	492a      	ldr	r1, [pc, #168]	; (80188ec <dhcp_parse_reply+0x324>)
 8018844:	4827      	ldr	r0, [pc, #156]	; (80188e4 <dhcp_parse_reply+0x31c>)
 8018846:	f003 fc05 	bl	801c054 <iprintf>
 801884a:	f06f 0305 	mvn.w	r3, #5
 801884e:	e179      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8018850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018852:	2bf0      	cmp	r3, #240	; 0xf0
 8018854:	d009      	beq.n	801886a <dhcp_parse_reply+0x2a2>
 8018856:	4b21      	ldr	r3, [pc, #132]	; (80188dc <dhcp_parse_reply+0x314>)
 8018858:	f240 6251 	movw	r2, #1617	; 0x651
 801885c:	4924      	ldr	r1, [pc, #144]	; (80188f0 <dhcp_parse_reply+0x328>)
 801885e:	4821      	ldr	r0, [pc, #132]	; (80188e4 <dhcp_parse_reply+0x31c>)
 8018860:	f003 fbf8 	bl	801c054 <iprintf>
 8018864:	f06f 0305 	mvn.w	r3, #5
 8018868:	e16c      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801886a:	2300      	movs	r3, #0
 801886c:	623b      	str	r3, [r7, #32]
        break;
 801886e:	e056      	b.n	801891e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018874:	2b01      	cmp	r3, #1
 8018876:	d009      	beq.n	801888c <dhcp_parse_reply+0x2c4>
 8018878:	4b18      	ldr	r3, [pc, #96]	; (80188dc <dhcp_parse_reply+0x314>)
 801887a:	f240 6255 	movw	r2, #1621	; 0x655
 801887e:	491b      	ldr	r1, [pc, #108]	; (80188ec <dhcp_parse_reply+0x324>)
 8018880:	4818      	ldr	r0, [pc, #96]	; (80188e4 <dhcp_parse_reply+0x31c>)
 8018882:	f003 fbe7 	bl	801c054 <iprintf>
 8018886:	f06f 0305 	mvn.w	r3, #5
 801888a:	e15b      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801888c:	2301      	movs	r3, #1
 801888e:	623b      	str	r3, [r7, #32]
        break;
 8018890:	e045      	b.n	801891e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018896:	2b04      	cmp	r3, #4
 8018898:	d009      	beq.n	80188ae <dhcp_parse_reply+0x2e6>
 801889a:	4b10      	ldr	r3, [pc, #64]	; (80188dc <dhcp_parse_reply+0x314>)
 801889c:	f240 6259 	movw	r2, #1625	; 0x659
 80188a0:	490f      	ldr	r1, [pc, #60]	; (80188e0 <dhcp_parse_reply+0x318>)
 80188a2:	4810      	ldr	r0, [pc, #64]	; (80188e4 <dhcp_parse_reply+0x31c>)
 80188a4:	f003 fbd6 	bl	801c054 <iprintf>
 80188a8:	f06f 0305 	mvn.w	r3, #5
 80188ac:	e14a      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80188ae:	2302      	movs	r3, #2
 80188b0:	623b      	str	r3, [r7, #32]
        break;
 80188b2:	e034      	b.n	801891e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80188b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188b8:	2b04      	cmp	r3, #4
 80188ba:	d009      	beq.n	80188d0 <dhcp_parse_reply+0x308>
 80188bc:	4b07      	ldr	r3, [pc, #28]	; (80188dc <dhcp_parse_reply+0x314>)
 80188be:	f240 625d 	movw	r2, #1629	; 0x65d
 80188c2:	4907      	ldr	r1, [pc, #28]	; (80188e0 <dhcp_parse_reply+0x318>)
 80188c4:	4807      	ldr	r0, [pc, #28]	; (80188e4 <dhcp_parse_reply+0x31c>)
 80188c6:	f003 fbc5 	bl	801c054 <iprintf>
 80188ca:	f06f 0305 	mvn.w	r3, #5
 80188ce:	e139      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80188d0:	2304      	movs	r3, #4
 80188d2:	623b      	str	r3, [r7, #32]
        break;
 80188d4:	e023      	b.n	801891e <dhcp_parse_reply+0x356>
 80188d6:	bf00      	nop
 80188d8:	200082e0 	.word	0x200082e0
 80188dc:	080238c4 	.word	0x080238c4
 80188e0:	08023b4c 	.word	0x08023b4c
 80188e4:	08023924 	.word	0x08023924
 80188e8:	08023b58 	.word	0x08023b58
 80188ec:	08023b6c 	.word	0x08023b6c
 80188f0:	08023b78 	.word	0x08023b78
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80188f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188f8:	2b04      	cmp	r3, #4
 80188fa:	d009      	beq.n	8018910 <dhcp_parse_reply+0x348>
 80188fc:	4b93      	ldr	r3, [pc, #588]	; (8018b4c <dhcp_parse_reply+0x584>)
 80188fe:	f240 6261 	movw	r2, #1633	; 0x661
 8018902:	4993      	ldr	r1, [pc, #588]	; (8018b50 <dhcp_parse_reply+0x588>)
 8018904:	4893      	ldr	r0, [pc, #588]	; (8018b54 <dhcp_parse_reply+0x58c>)
 8018906:	f003 fba5 	bl	801c054 <iprintf>
 801890a:	f06f 0305 	mvn.w	r3, #5
 801890e:	e119      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018910:	2305      	movs	r3, #5
 8018912:	623b      	str	r3, [r7, #32]
        break;
 8018914:	e003      	b.n	801891e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8018916:	2300      	movs	r3, #0
 8018918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801891c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801891e:	7dfb      	ldrb	r3, [r7, #23]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d103      	bne.n	801892c <dhcp_parse_reply+0x364>
      offset++;
 8018924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018926:	3301      	adds	r3, #1
 8018928:	877b      	strh	r3, [r7, #58]	; 0x3a
 801892a:	e0a1      	b.n	8018a70 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801892c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801892e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018932:	4413      	add	r3, r2
 8018934:	3302      	adds	r3, #2
 8018936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801893a:	db02      	blt.n	8018942 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801893c:	f06f 0301 	mvn.w	r3, #1
 8018940:	e100      	b.n	8018b44 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8018942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018946:	b29a      	uxth	r2, r3
 8018948:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801894a:	4413      	add	r3, r2
 801894c:	b29b      	uxth	r3, r3
 801894e:	3302      	adds	r3, #2
 8018950:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8018952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018956:	2b00      	cmp	r3, #0
 8018958:	f000 808a 	beq.w	8018a70 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801895c:	2300      	movs	r3, #0
 801895e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018960:	6a3b      	ldr	r3, [r7, #32]
 8018962:	2b00      	cmp	r3, #0
 8018964:	db02      	blt.n	801896c <dhcp_parse_reply+0x3a4>
 8018966:	6a3b      	ldr	r3, [r7, #32]
 8018968:	2b07      	cmp	r3, #7
 801896a:	dd06      	ble.n	801897a <dhcp_parse_reply+0x3b2>
 801896c:	4b77      	ldr	r3, [pc, #476]	; (8018b4c <dhcp_parse_reply+0x584>)
 801896e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8018972:	4979      	ldr	r1, [pc, #484]	; (8018b58 <dhcp_parse_reply+0x590>)
 8018974:	4877      	ldr	r0, [pc, #476]	; (8018b54 <dhcp_parse_reply+0x58c>)
 8018976:	f003 fb6d 	bl	801c054 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801897a:	4a78      	ldr	r2, [pc, #480]	; (8018b5c <dhcp_parse_reply+0x594>)
 801897c:	6a3b      	ldr	r3, [r7, #32]
 801897e:	4413      	add	r3, r2
 8018980:	781b      	ldrb	r3, [r3, #0]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d174      	bne.n	8018a70 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8018986:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801898a:	2b04      	cmp	r3, #4
 801898c:	bf28      	it	cs
 801898e:	2304      	movcs	r3, #4
 8018990:	b2db      	uxtb	r3, r3
 8018992:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8018994:	8bfb      	ldrh	r3, [r7, #30]
 8018996:	8aba      	ldrh	r2, [r7, #20]
 8018998:	f107 0108 	add.w	r1, r7, #8
 801899c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801899e:	f7f8 fccb 	bl	8011338 <pbuf_copy_partial>
 80189a2:	4603      	mov	r3, r0
 80189a4:	461a      	mov	r2, r3
 80189a6:	8abb      	ldrh	r3, [r7, #20]
 80189a8:	4293      	cmp	r3, r2
 80189aa:	d002      	beq.n	80189b2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80189ac:	f06f 0301 	mvn.w	r3, #1
 80189b0:	e0c8      	b.n	8018b44 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80189b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189b6:	2b04      	cmp	r3, #4
 80189b8:	d933      	bls.n	8018a22 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80189ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189be:	f003 0303 	and.w	r3, r3, #3
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d009      	beq.n	80189dc <dhcp_parse_reply+0x414>
 80189c8:	4b60      	ldr	r3, [pc, #384]	; (8018b4c <dhcp_parse_reply+0x584>)
 80189ca:	f240 6281 	movw	r2, #1665	; 0x681
 80189ce:	4964      	ldr	r1, [pc, #400]	; (8018b60 <dhcp_parse_reply+0x598>)
 80189d0:	4860      	ldr	r0, [pc, #384]	; (8018b54 <dhcp_parse_reply+0x58c>)
 80189d2:	f003 fb3f 	bl	801c054 <iprintf>
 80189d6:	f06f 0305 	mvn.w	r3, #5
 80189da:	e0b3      	b.n	8018b44 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80189dc:	4a5f      	ldr	r2, [pc, #380]	; (8018b5c <dhcp_parse_reply+0x594>)
 80189de:	6a3b      	ldr	r3, [r7, #32]
 80189e0:	4413      	add	r3, r2
 80189e2:	2201      	movs	r2, #1
 80189e4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7f7 f828 	bl	800fa3e <lwip_htonl>
 80189ee:	4601      	mov	r1, r0
 80189f0:	4a5c      	ldr	r2, [pc, #368]	; (8018b64 <dhcp_parse_reply+0x59c>)
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80189f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189fc:	3b04      	subs	r3, #4
 80189fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8018a02:	8bfb      	ldrh	r3, [r7, #30]
 8018a04:	3304      	adds	r3, #4
 8018a06:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8018a08:	8a7a      	ldrh	r2, [r7, #18]
 8018a0a:	8bfb      	ldrh	r3, [r7, #30]
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d202      	bcs.n	8018a16 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8018a10:	f06f 0301 	mvn.w	r3, #1
 8018a14:	e096      	b.n	8018b44 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8018a16:	8a7b      	ldrh	r3, [r7, #18]
 8018a18:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8018a1a:	6a3b      	ldr	r3, [r7, #32]
 8018a1c:	3301      	adds	r3, #1
 8018a1e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8018a20:	e79e      	b.n	8018960 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8018a22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a26:	2b04      	cmp	r3, #4
 8018a28:	d106      	bne.n	8018a38 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7f7 f806 	bl	800fa3e <lwip_htonl>
 8018a32:	4603      	mov	r3, r0
 8018a34:	60bb      	str	r3, [r7, #8]
 8018a36:	e011      	b.n	8018a5c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8018a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a3c:	2b01      	cmp	r3, #1
 8018a3e:	d009      	beq.n	8018a54 <dhcp_parse_reply+0x48c>
 8018a40:	4b42      	ldr	r3, [pc, #264]	; (8018b4c <dhcp_parse_reply+0x584>)
 8018a42:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8018a46:	4948      	ldr	r1, [pc, #288]	; (8018b68 <dhcp_parse_reply+0x5a0>)
 8018a48:	4842      	ldr	r0, [pc, #264]	; (8018b54 <dhcp_parse_reply+0x58c>)
 8018a4a:	f003 fb03 	bl	801c054 <iprintf>
 8018a4e:	f06f 0305 	mvn.w	r3, #5
 8018a52:	e077      	b.n	8018b44 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8018a54:	f107 0308 	add.w	r3, r7, #8
 8018a58:	781b      	ldrb	r3, [r3, #0]
 8018a5a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018a5c:	4a3f      	ldr	r2, [pc, #252]	; (8018b5c <dhcp_parse_reply+0x594>)
 8018a5e:	6a3b      	ldr	r3, [r7, #32]
 8018a60:	4413      	add	r3, r2
 8018a62:	2201      	movs	r2, #1
 8018a64:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8018a66:	68ba      	ldr	r2, [r7, #8]
 8018a68:	493e      	ldr	r1, [pc, #248]	; (8018b64 <dhcp_parse_reply+0x59c>)
 8018a6a:	6a3b      	ldr	r3, [r7, #32]
 8018a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8018a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a72:	895b      	ldrh	r3, [r3, #10]
 8018a74:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d324      	bcc.n	8018ac4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8018a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a7c:	895b      	ldrh	r3, [r3, #10]
 8018a7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8018a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a86:	895b      	ldrh	r3, [r3, #10]
 8018a88:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018a8a:	1ad3      	subs	r3, r2, r3
 8018a8c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8018a8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d213      	bcs.n	8018abe <dhcp_parse_reply+0x4f6>
        q = q->next;
 8018a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8018a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d109      	bne.n	8018ab6 <dhcp_parse_reply+0x4ee>
 8018aa2:	4b2a      	ldr	r3, [pc, #168]	; (8018b4c <dhcp_parse_reply+0x584>)
 8018aa4:	f240 629d 	movw	r2, #1693	; 0x69d
 8018aa8:	4930      	ldr	r1, [pc, #192]	; (8018b6c <dhcp_parse_reply+0x5a4>)
 8018aaa:	482a      	ldr	r0, [pc, #168]	; (8018b54 <dhcp_parse_reply+0x58c>)
 8018aac:	f003 fad2 	bl	801c054 <iprintf>
 8018ab0:	f06f 0305 	mvn.w	r3, #5
 8018ab4:	e046      	b.n	8018b44 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8018ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018abc:	e002      	b.n	8018ac4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018abe:	f06f 0301 	mvn.w	r3, #1
 8018ac2:	e03f      	b.n	8018b44 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d00a      	beq.n	8018ae0 <dhcp_parse_reply+0x518>
 8018aca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018acc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d206      	bcs.n	8018ae0 <dhcp_parse_reply+0x518>
 8018ad2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018ad6:	4413      	add	r3, r2
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	2bff      	cmp	r3, #255	; 0xff
 8018adc:	f47f adb7 	bne.w	801864e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018ae0:	4b1e      	ldr	r3, [pc, #120]	; (8018b5c <dhcp_parse_reply+0x594>)
 8018ae2:	781b      	ldrb	r3, [r3, #0]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d018      	beq.n	8018b1a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018ae8:	4b1e      	ldr	r3, [pc, #120]	; (8018b64 <dhcp_parse_reply+0x59c>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018aee:	4b1b      	ldr	r3, [pc, #108]	; (8018b5c <dhcp_parse_reply+0x594>)
 8018af0:	2200      	movs	r2, #0
 8018af2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	d102      	bne.n	8018b00 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8018afa:	2301      	movs	r3, #1
 8018afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018afe:	e00c      	b.n	8018b1a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	2b02      	cmp	r3, #2
 8018b04:	d102      	bne.n	8018b0c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8018b06:	2301      	movs	r3, #1
 8018b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b0a:	e006      	b.n	8018b1a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	2b03      	cmp	r3, #3
 8018b10:	d103      	bne.n	8018b1a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8018b12:	2301      	movs	r3, #1
 8018b14:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8018b16:	2301      	movs	r3, #1
 8018b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8018b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d006      	beq.n	8018b2e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018b20:	2300      	movs	r3, #0
 8018b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8018b24:	236c      	movs	r3, #108	; 0x6c
 8018b26:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018b28:	23ec      	movs	r3, #236	; 0xec
 8018b2a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8018b2c:	e569      	b.n	8018602 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d006      	beq.n	8018b42 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8018b34:	2300      	movs	r3, #0
 8018b36:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8018b38:	232c      	movs	r3, #44	; 0x2c
 8018b3a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8018b3c:	236c      	movs	r3, #108	; 0x6c
 8018b3e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8018b40:	e55f      	b.n	8018602 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018b42:	2300      	movs	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3740      	adds	r7, #64	; 0x40
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}
 8018b4c:	080238c4 	.word	0x080238c4
 8018b50:	08023b4c 	.word	0x08023b4c
 8018b54:	08023924 	.word	0x08023924
 8018b58:	08023b90 	.word	0x08023b90
 8018b5c:	200082e0 	.word	0x200082e0
 8018b60:	08023ba4 	.word	0x08023ba4
 8018b64:	200082e8 	.word	0x200082e8
 8018b68:	08023bbc 	.word	0x08023bbc
 8018b6c:	08023bd0 	.word	0x08023bd0

08018b70 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b08a      	sub	sp, #40	; 0x28
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	60f8      	str	r0, [r7, #12]
 8018b78:	60b9      	str	r1, [r7, #8]
 8018b7a:	607a      	str	r2, [r7, #4]
 8018b7c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8018b7e:	4b5f      	ldr	r3, [pc, #380]	; (8018cfc <dhcp_recv+0x18c>)
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018b84:	6a3b      	ldr	r3, [r7, #32]
 8018b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b88:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018b90:	69fb      	ldr	r3, [r7, #28]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	f000 809d 	beq.w	8018cd2 <dhcp_recv+0x162>
 8018b98:	69fb      	ldr	r3, [r7, #28]
 8018b9a:	791b      	ldrb	r3, [r3, #4]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f000 8098 	beq.w	8018cd2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	895b      	ldrh	r3, [r3, #10]
 8018ba6:	2b2b      	cmp	r3, #43	; 0x2b
 8018ba8:	f240 8095 	bls.w	8018cd6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8018bac:	69bb      	ldr	r3, [r7, #24]
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b02      	cmp	r3, #2
 8018bb2:	f040 8092 	bne.w	8018cda <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bbc:	e012      	b.n	8018be4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bc2:	6a3a      	ldr	r2, [r7, #32]
 8018bc4:	4413      	add	r3, r2
 8018bc6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bce:	69b9      	ldr	r1, [r7, #24]
 8018bd0:	440b      	add	r3, r1
 8018bd2:	7f1b      	ldrb	r3, [r3, #28]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	f040 8082 	bne.w	8018cde <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bde:	3301      	adds	r3, #1
 8018be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018be4:	6a3b      	ldr	r3, [r7, #32]
 8018be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018bea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d203      	bcs.n	8018bfa <dhcp_recv+0x8a>
 8018bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bf6:	2b05      	cmp	r3, #5
 8018bf8:	d9e1      	bls.n	8018bbe <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018bfa:	69bb      	ldr	r3, [r7, #24]
 8018bfc:	685b      	ldr	r3, [r3, #4]
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7f6 ff1d 	bl	800fa3e <lwip_htonl>
 8018c04:	4602      	mov	r2, r0
 8018c06:	69fb      	ldr	r3, [r7, #28]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	429a      	cmp	r2, r3
 8018c0c:	d169      	bne.n	8018ce2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018c0e:	69f9      	ldr	r1, [r7, #28]
 8018c10:	6878      	ldr	r0, [r7, #4]
 8018c12:	f7ff fcd9 	bl	80185c8 <dhcp_parse_reply>
 8018c16:	4603      	mov	r3, r0
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d164      	bne.n	8018ce6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018c1c:	4b38      	ldr	r3, [pc, #224]	; (8018d00 <dhcp_recv+0x190>)
 8018c1e:	785b      	ldrb	r3, [r3, #1]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d062      	beq.n	8018cea <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	685b      	ldr	r3, [r3, #4]
 8018c28:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018c2a:	4b36      	ldr	r3, [pc, #216]	; (8018d04 <dhcp_recv+0x194>)
 8018c2c:	685b      	ldr	r3, [r3, #4]
 8018c2e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018c30:	7cfb      	ldrb	r3, [r7, #19]
 8018c32:	2b05      	cmp	r3, #5
 8018c34:	d12a      	bne.n	8018c8c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018c36:	69fb      	ldr	r3, [r7, #28]
 8018c38:	795b      	ldrb	r3, [r3, #5]
 8018c3a:	2b01      	cmp	r3, #1
 8018c3c:	d112      	bne.n	8018c64 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8018c3e:	6979      	ldr	r1, [r7, #20]
 8018c40:	6a38      	ldr	r0, [r7, #32]
 8018c42:	f7fe fe53 	bl	80178ec <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018c46:	6a3b      	ldr	r3, [r7, #32]
 8018c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c4c:	f003 0308 	and.w	r3, r3, #8
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d003      	beq.n	8018c5c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018c54:	6a38      	ldr	r0, [r7, #32]
 8018c56:	f7fe fbc3 	bl	80173e0 <dhcp_check>
 8018c5a:	e047      	b.n	8018cec <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018c5c:	6a38      	ldr	r0, [r7, #32]
 8018c5e:	f7ff f867 	bl	8017d30 <dhcp_bind>
 8018c62:	e043      	b.n	8018cec <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018c64:	69fb      	ldr	r3, [r7, #28]
 8018c66:	795b      	ldrb	r3, [r3, #5]
 8018c68:	2b03      	cmp	r3, #3
 8018c6a:	d007      	beq.n	8018c7c <dhcp_recv+0x10c>
 8018c6c:	69fb      	ldr	r3, [r7, #28]
 8018c6e:	795b      	ldrb	r3, [r3, #5]
 8018c70:	2b04      	cmp	r3, #4
 8018c72:	d003      	beq.n	8018c7c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8018c74:	69fb      	ldr	r3, [r7, #28]
 8018c76:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018c78:	2b05      	cmp	r3, #5
 8018c7a:	d137      	bne.n	8018cec <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8018c7c:	6979      	ldr	r1, [r7, #20]
 8018c7e:	6a38      	ldr	r0, [r7, #32]
 8018c80:	f7fe fe34 	bl	80178ec <dhcp_handle_ack>
      dhcp_bind(netif);
 8018c84:	6a38      	ldr	r0, [r7, #32]
 8018c86:	f7ff f853 	bl	8017d30 <dhcp_bind>
 8018c8a:	e02f      	b.n	8018cec <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018c8c:	7cfb      	ldrb	r3, [r7, #19]
 8018c8e:	2b06      	cmp	r3, #6
 8018c90:	d113      	bne.n	8018cba <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c92:	69fb      	ldr	r3, [r7, #28]
 8018c94:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8018c96:	2b03      	cmp	r3, #3
 8018c98:	d00b      	beq.n	8018cb2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c9a:	69fb      	ldr	r3, [r7, #28]
 8018c9c:	795b      	ldrb	r3, [r3, #5]
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d007      	beq.n	8018cb2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018ca2:	69fb      	ldr	r3, [r7, #28]
 8018ca4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018ca6:	2b04      	cmp	r3, #4
 8018ca8:	d003      	beq.n	8018cb2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018caa:	69fb      	ldr	r3, [r7, #28]
 8018cac:	795b      	ldrb	r3, [r3, #5]
 8018cae:	2b05      	cmp	r3, #5
 8018cb0:	d103      	bne.n	8018cba <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8018cb2:	6a38      	ldr	r0, [r7, #32]
 8018cb4:	f7fe fb7a 	bl	80173ac <dhcp_handle_nak>
 8018cb8:	e018      	b.n	8018cec <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018cba:	7cfb      	ldrb	r3, [r7, #19]
 8018cbc:	2b02      	cmp	r3, #2
 8018cbe:	d108      	bne.n	8018cd2 <dhcp_recv+0x162>
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	795b      	ldrb	r3, [r3, #5]
 8018cc4:	2b06      	cmp	r3, #6
 8018cc6:	d104      	bne.n	8018cd2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018cc8:	6979      	ldr	r1, [r7, #20]
 8018cca:	6a38      	ldr	r0, [r7, #32]
 8018ccc:	f7fe fbbc 	bl	8017448 <dhcp_handle_offer>
 8018cd0:	e00c      	b.n	8018cec <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8018cd2:	bf00      	nop
 8018cd4:	e00a      	b.n	8018cec <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cd6:	bf00      	nop
 8018cd8:	e008      	b.n	8018cec <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cda:	bf00      	nop
 8018cdc:	e006      	b.n	8018cec <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8018cde:	bf00      	nop
 8018ce0:	e004      	b.n	8018cec <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018ce2:	bf00      	nop
 8018ce4:	e002      	b.n	8018cec <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018ce6:	bf00      	nop
 8018ce8:	e000      	b.n	8018cec <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cea:	bf00      	nop
  pbuf_free(p);
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f7f8 f929 	bl	8010f44 <pbuf_free>
}
 8018cf2:	bf00      	nop
 8018cf4:	3728      	adds	r7, #40	; 0x28
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	200051a0 	.word	0x200051a0
 8018d00:	200082e0 	.word	0x200082e0
 8018d04:	200082e8 	.word	0x200082e8

08018d08 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b088      	sub	sp, #32
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	60f8      	str	r0, [r7, #12]
 8018d10:	60b9      	str	r1, [r7, #8]
 8018d12:	603b      	str	r3, [r7, #0]
 8018d14:	4613      	mov	r3, r2
 8018d16:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d108      	bne.n	8018d30 <dhcp_create_msg+0x28>
 8018d1e:	4b5f      	ldr	r3, [pc, #380]	; (8018e9c <dhcp_create_msg+0x194>)
 8018d20:	f240 7269 	movw	r2, #1897	; 0x769
 8018d24:	495e      	ldr	r1, [pc, #376]	; (8018ea0 <dhcp_create_msg+0x198>)
 8018d26:	485f      	ldr	r0, [pc, #380]	; (8018ea4 <dhcp_create_msg+0x19c>)
 8018d28:	f003 f994 	bl	801c054 <iprintf>
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	e0b1      	b.n	8018e94 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d108      	bne.n	8018d48 <dhcp_create_msg+0x40>
 8018d36:	4b59      	ldr	r3, [pc, #356]	; (8018e9c <dhcp_create_msg+0x194>)
 8018d38:	f240 726a 	movw	r2, #1898	; 0x76a
 8018d3c:	495a      	ldr	r1, [pc, #360]	; (8018ea8 <dhcp_create_msg+0x1a0>)
 8018d3e:	4859      	ldr	r0, [pc, #356]	; (8018ea4 <dhcp_create_msg+0x19c>)
 8018d40:	f003 f988 	bl	801c054 <iprintf>
 8018d44:	2300      	movs	r3, #0
 8018d46:	e0a5      	b.n	8018e94 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018d48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d4c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018d50:	2036      	movs	r0, #54	; 0x36
 8018d52:	f7f7 fe17 	bl	8010984 <pbuf_alloc>
 8018d56:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018d58:	69bb      	ldr	r3, [r7, #24]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d101      	bne.n	8018d62 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018d5e:	2300      	movs	r3, #0
 8018d60:	e098      	b.n	8018e94 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018d62:	69bb      	ldr	r3, [r7, #24]
 8018d64:	895b      	ldrh	r3, [r3, #10]
 8018d66:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018d6a:	d206      	bcs.n	8018d7a <dhcp_create_msg+0x72>
 8018d6c:	4b4b      	ldr	r3, [pc, #300]	; (8018e9c <dhcp_create_msg+0x194>)
 8018d6e:	f240 7272 	movw	r2, #1906	; 0x772
 8018d72:	494e      	ldr	r1, [pc, #312]	; (8018eac <dhcp_create_msg+0x1a4>)
 8018d74:	484b      	ldr	r0, [pc, #300]	; (8018ea4 <dhcp_create_msg+0x19c>)
 8018d76:	f003 f96d 	bl	801c054 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018d7a:	79fb      	ldrb	r3, [r7, #7]
 8018d7c:	2b03      	cmp	r3, #3
 8018d7e:	d103      	bne.n	8018d88 <dhcp_create_msg+0x80>
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	795b      	ldrb	r3, [r3, #5]
 8018d84:	2b03      	cmp	r3, #3
 8018d86:	d10d      	bne.n	8018da4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	799b      	ldrb	r3, [r3, #6]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d105      	bne.n	8018d9c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018d90:	f003 f978 	bl	801c084 <rand>
 8018d94:	4603      	mov	r3, r0
 8018d96:	461a      	mov	r2, r3
 8018d98:	4b45      	ldr	r3, [pc, #276]	; (8018eb0 <dhcp_create_msg+0x1a8>)
 8018d9a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018d9c:	4b44      	ldr	r3, [pc, #272]	; (8018eb0 <dhcp_create_msg+0x1a8>)
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018daa:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018dae:	2100      	movs	r1, #0
 8018db0:	6978      	ldr	r0, [r7, #20]
 8018db2:	f002 fc42 	bl	801b63a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	2201      	movs	r2, #1
 8018dba:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018dcc:	68bb      	ldr	r3, [r7, #8]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7f6 fe34 	bl	800fa3e <lwip_htonl>
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018ddc:	79fb      	ldrb	r3, [r7, #7]
 8018dde:	2b08      	cmp	r3, #8
 8018de0:	d010      	beq.n	8018e04 <dhcp_create_msg+0xfc>
 8018de2:	79fb      	ldrb	r3, [r7, #7]
 8018de4:	2b04      	cmp	r3, #4
 8018de6:	d00d      	beq.n	8018e04 <dhcp_create_msg+0xfc>
 8018de8:	79fb      	ldrb	r3, [r7, #7]
 8018dea:	2b07      	cmp	r3, #7
 8018dec:	d00a      	beq.n	8018e04 <dhcp_create_msg+0xfc>
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	2b03      	cmp	r3, #3
 8018df2:	d10c      	bne.n	8018e0e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018df8:	2b05      	cmp	r3, #5
 8018dfa:	d003      	beq.n	8018e04 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	795b      	ldrb	r3, [r3, #5]
 8018e00:	2b04      	cmp	r3, #4
 8018e02:	d104      	bne.n	8018e0e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	3304      	adds	r3, #4
 8018e08:	681a      	ldr	r2, [r3, #0]
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018e0e:	2300      	movs	r3, #0
 8018e10:	83fb      	strh	r3, [r7, #30]
 8018e12:	e00c      	b.n	8018e2e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018e14:	8bfa      	ldrh	r2, [r7, #30]
 8018e16:	8bfb      	ldrh	r3, [r7, #30]
 8018e18:	68f9      	ldr	r1, [r7, #12]
 8018e1a:	440a      	add	r2, r1
 8018e1c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018e20:	697a      	ldr	r2, [r7, #20]
 8018e22:	4413      	add	r3, r2
 8018e24:	460a      	mov	r2, r1
 8018e26:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018e28:	8bfb      	ldrh	r3, [r7, #30]
 8018e2a:	3301      	adds	r3, #1
 8018e2c:	83fb      	strh	r3, [r7, #30]
 8018e2e:	8bfb      	ldrh	r3, [r7, #30]
 8018e30:	2b05      	cmp	r3, #5
 8018e32:	d9ef      	bls.n	8018e14 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	2200      	movs	r2, #0
 8018e38:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018e3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018e40:	2200      	movs	r2, #0
 8018e42:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018e46:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018e50:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018e54:	2200      	movs	r2, #0
 8018e56:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018e5a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e64:	2301      	movs	r3, #1
 8018e66:	2235      	movs	r2, #53	; 0x35
 8018e68:	2000      	movs	r0, #0
 8018e6a:	f7ff fadd 	bl	8018428 <dhcp_option>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018e72:	697b      	ldr	r3, [r7, #20]
 8018e74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e78:	79fa      	ldrb	r2, [r7, #7]
 8018e7a:	8a7b      	ldrh	r3, [r7, #18]
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7ff fb07 	bl	8018490 <dhcp_option_byte>
 8018e82:	4603      	mov	r3, r0
 8018e84:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d002      	beq.n	8018e92 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	8a7a      	ldrh	r2, [r7, #18]
 8018e90:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8018e92:	69bb      	ldr	r3, [r7, #24]
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3720      	adds	r7, #32
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}
 8018e9c:	080238c4 	.word	0x080238c4
 8018ea0:	08023be4 	.word	0x08023be4
 8018ea4:	08023924 	.word	0x08023924
 8018ea8:	08023c04 	.word	0x08023c04
 8018eac:	08023c24 	.word	0x08023c24
 8018eb0:	2000107c 	.word	0x2000107c

08018eb4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b084      	sub	sp, #16
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	4603      	mov	r3, r0
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
 8018ec0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8018ec2:	89fb      	ldrh	r3, [r7, #14]
 8018ec4:	1c5a      	adds	r2, r3, #1
 8018ec6:	81fa      	strh	r2, [r7, #14]
 8018ec8:	461a      	mov	r2, r3
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	4413      	add	r3, r2
 8018ece:	22ff      	movs	r2, #255	; 0xff
 8018ed0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018ed2:	e007      	b.n	8018ee4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018ed4:	89fb      	ldrh	r3, [r7, #14]
 8018ed6:	1c5a      	adds	r2, r3, #1
 8018ed8:	81fa      	strh	r2, [r7, #14]
 8018eda:	461a      	mov	r2, r3
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	4413      	add	r3, r2
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018ee4:	89fb      	ldrh	r3, [r7, #14]
 8018ee6:	2b43      	cmp	r3, #67	; 0x43
 8018ee8:	d904      	bls.n	8018ef4 <dhcp_option_trailer+0x40>
 8018eea:	89fb      	ldrh	r3, [r7, #14]
 8018eec:	f003 0303 	and.w	r3, r3, #3
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d002      	beq.n	8018efa <dhcp_option_trailer+0x46>
 8018ef4:	89fb      	ldrh	r3, [r7, #14]
 8018ef6:	2b43      	cmp	r3, #67	; 0x43
 8018ef8:	d9ec      	bls.n	8018ed4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018efa:	89fb      	ldrh	r3, [r7, #14]
 8018efc:	33f0      	adds	r3, #240	; 0xf0
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	4619      	mov	r1, r3
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f7f7 fe98 	bl	8010c38 <pbuf_realloc>
}
 8018f08:	bf00      	nop
 8018f0a:	3710      	adds	r7, #16
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	bd80      	pop	{r7, pc}

08018f10 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018f10:	b480      	push	{r7}
 8018f12:	b085      	sub	sp, #20
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d017      	beq.n	8018f4e <dhcp_supplied_address+0x3e>
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d013      	beq.n	8018f4e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	795b      	ldrb	r3, [r3, #5]
 8018f30:	2b0a      	cmp	r3, #10
 8018f32:	d007      	beq.n	8018f44 <dhcp_supplied_address+0x34>
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	795b      	ldrb	r3, [r3, #5]
 8018f38:	2b05      	cmp	r3, #5
 8018f3a:	d003      	beq.n	8018f44 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018f40:	2b04      	cmp	r3, #4
 8018f42:	d101      	bne.n	8018f48 <dhcp_supplied_address+0x38>
 8018f44:	2301      	movs	r3, #1
 8018f46:	e000      	b.n	8018f4a <dhcp_supplied_address+0x3a>
 8018f48:	2300      	movs	r3, #0
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	e000      	b.n	8018f50 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018f4e:	2300      	movs	r3, #0
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3714      	adds	r7, #20
 8018f54:	46bd      	mov	sp, r7
 8018f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5a:	4770      	bx	lr

08018f5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b082      	sub	sp, #8
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018f64:	4915      	ldr	r1, [pc, #84]	; (8018fbc <etharp_free_entry+0x60>)
 8018f66:	687a      	ldr	r2, [r7, #4]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	4413      	add	r3, r2
 8018f6e:	00db      	lsls	r3, r3, #3
 8018f70:	440b      	add	r3, r1
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d013      	beq.n	8018fa0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018f78:	4910      	ldr	r1, [pc, #64]	; (8018fbc <etharp_free_entry+0x60>)
 8018f7a:	687a      	ldr	r2, [r7, #4]
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	005b      	lsls	r3, r3, #1
 8018f80:	4413      	add	r3, r2
 8018f82:	00db      	lsls	r3, r3, #3
 8018f84:	440b      	add	r3, r1
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f7f7 ffdb 	bl	8010f44 <pbuf_free>
    arp_table[i].q = NULL;
 8018f8e:	490b      	ldr	r1, [pc, #44]	; (8018fbc <etharp_free_entry+0x60>)
 8018f90:	687a      	ldr	r2, [r7, #4]
 8018f92:	4613      	mov	r3, r2
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	4413      	add	r3, r2
 8018f98:	00db      	lsls	r3, r3, #3
 8018f9a:	440b      	add	r3, r1
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018fa0:	4906      	ldr	r1, [pc, #24]	; (8018fbc <etharp_free_entry+0x60>)
 8018fa2:	687a      	ldr	r2, [r7, #4]
 8018fa4:	4613      	mov	r3, r2
 8018fa6:	005b      	lsls	r3, r3, #1
 8018fa8:	4413      	add	r3, r2
 8018faa:	00db      	lsls	r3, r3, #3
 8018fac:	440b      	add	r3, r1
 8018fae:	3314      	adds	r3, #20
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018fb4:	bf00      	nop
 8018fb6:	3708      	adds	r7, #8
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}
 8018fbc:	20001080 	.word	0x20001080

08018fc0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	607b      	str	r3, [r7, #4]
 8018fca:	e096      	b.n	80190fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018fcc:	494f      	ldr	r1, [pc, #316]	; (801910c <etharp_tmr+0x14c>)
 8018fce:	687a      	ldr	r2, [r7, #4]
 8018fd0:	4613      	mov	r3, r2
 8018fd2:	005b      	lsls	r3, r3, #1
 8018fd4:	4413      	add	r3, r2
 8018fd6:	00db      	lsls	r3, r3, #3
 8018fd8:	440b      	add	r3, r1
 8018fda:	3314      	adds	r3, #20
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018fe0:	78fb      	ldrb	r3, [r7, #3]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f000 8086 	beq.w	80190f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018fe8:	4948      	ldr	r1, [pc, #288]	; (801910c <etharp_tmr+0x14c>)
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	4613      	mov	r3, r2
 8018fee:	005b      	lsls	r3, r3, #1
 8018ff0:	4413      	add	r3, r2
 8018ff2:	00db      	lsls	r3, r3, #3
 8018ff4:	440b      	add	r3, r1
 8018ff6:	3312      	adds	r3, #18
 8018ff8:	881b      	ldrh	r3, [r3, #0]
 8018ffa:	3301      	adds	r3, #1
 8018ffc:	b298      	uxth	r0, r3
 8018ffe:	4943      	ldr	r1, [pc, #268]	; (801910c <etharp_tmr+0x14c>)
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	4613      	mov	r3, r2
 8019004:	005b      	lsls	r3, r3, #1
 8019006:	4413      	add	r3, r2
 8019008:	00db      	lsls	r3, r3, #3
 801900a:	440b      	add	r3, r1
 801900c:	3312      	adds	r3, #18
 801900e:	4602      	mov	r2, r0
 8019010:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019012:	493e      	ldr	r1, [pc, #248]	; (801910c <etharp_tmr+0x14c>)
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	4613      	mov	r3, r2
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	4413      	add	r3, r2
 801901c:	00db      	lsls	r3, r3, #3
 801901e:	440b      	add	r3, r1
 8019020:	3312      	adds	r3, #18
 8019022:	881b      	ldrh	r3, [r3, #0]
 8019024:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019028:	d215      	bcs.n	8019056 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801902a:	4938      	ldr	r1, [pc, #224]	; (801910c <etharp_tmr+0x14c>)
 801902c:	687a      	ldr	r2, [r7, #4]
 801902e:	4613      	mov	r3, r2
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	4413      	add	r3, r2
 8019034:	00db      	lsls	r3, r3, #3
 8019036:	440b      	add	r3, r1
 8019038:	3314      	adds	r3, #20
 801903a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801903c:	2b01      	cmp	r3, #1
 801903e:	d10e      	bne.n	801905e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019040:	4932      	ldr	r1, [pc, #200]	; (801910c <etharp_tmr+0x14c>)
 8019042:	687a      	ldr	r2, [r7, #4]
 8019044:	4613      	mov	r3, r2
 8019046:	005b      	lsls	r3, r3, #1
 8019048:	4413      	add	r3, r2
 801904a:	00db      	lsls	r3, r3, #3
 801904c:	440b      	add	r3, r1
 801904e:	3312      	adds	r3, #18
 8019050:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019052:	2b04      	cmp	r3, #4
 8019054:	d903      	bls.n	801905e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f7ff ff80 	bl	8018f5c <etharp_free_entry>
 801905c:	e04a      	b.n	80190f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801905e:	492b      	ldr	r1, [pc, #172]	; (801910c <etharp_tmr+0x14c>)
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	4613      	mov	r3, r2
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	4413      	add	r3, r2
 8019068:	00db      	lsls	r3, r3, #3
 801906a:	440b      	add	r3, r1
 801906c:	3314      	adds	r3, #20
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	2b03      	cmp	r3, #3
 8019072:	d10a      	bne.n	801908a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019074:	4925      	ldr	r1, [pc, #148]	; (801910c <etharp_tmr+0x14c>)
 8019076:	687a      	ldr	r2, [r7, #4]
 8019078:	4613      	mov	r3, r2
 801907a:	005b      	lsls	r3, r3, #1
 801907c:	4413      	add	r3, r2
 801907e:	00db      	lsls	r3, r3, #3
 8019080:	440b      	add	r3, r1
 8019082:	3314      	adds	r3, #20
 8019084:	2204      	movs	r2, #4
 8019086:	701a      	strb	r2, [r3, #0]
 8019088:	e034      	b.n	80190f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801908a:	4920      	ldr	r1, [pc, #128]	; (801910c <etharp_tmr+0x14c>)
 801908c:	687a      	ldr	r2, [r7, #4]
 801908e:	4613      	mov	r3, r2
 8019090:	005b      	lsls	r3, r3, #1
 8019092:	4413      	add	r3, r2
 8019094:	00db      	lsls	r3, r3, #3
 8019096:	440b      	add	r3, r1
 8019098:	3314      	adds	r3, #20
 801909a:	781b      	ldrb	r3, [r3, #0]
 801909c:	2b04      	cmp	r3, #4
 801909e:	d10a      	bne.n	80190b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80190a0:	491a      	ldr	r1, [pc, #104]	; (801910c <etharp_tmr+0x14c>)
 80190a2:	687a      	ldr	r2, [r7, #4]
 80190a4:	4613      	mov	r3, r2
 80190a6:	005b      	lsls	r3, r3, #1
 80190a8:	4413      	add	r3, r2
 80190aa:	00db      	lsls	r3, r3, #3
 80190ac:	440b      	add	r3, r1
 80190ae:	3314      	adds	r3, #20
 80190b0:	2202      	movs	r2, #2
 80190b2:	701a      	strb	r2, [r3, #0]
 80190b4:	e01e      	b.n	80190f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80190b6:	4915      	ldr	r1, [pc, #84]	; (801910c <etharp_tmr+0x14c>)
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	4613      	mov	r3, r2
 80190bc:	005b      	lsls	r3, r3, #1
 80190be:	4413      	add	r3, r2
 80190c0:	00db      	lsls	r3, r3, #3
 80190c2:	440b      	add	r3, r1
 80190c4:	3314      	adds	r3, #20
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	2b01      	cmp	r3, #1
 80190ca:	d113      	bne.n	80190f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80190cc:	490f      	ldr	r1, [pc, #60]	; (801910c <etharp_tmr+0x14c>)
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	4613      	mov	r3, r2
 80190d2:	005b      	lsls	r3, r3, #1
 80190d4:	4413      	add	r3, r2
 80190d6:	00db      	lsls	r3, r3, #3
 80190d8:	440b      	add	r3, r1
 80190da:	3308      	adds	r3, #8
 80190dc:	6818      	ldr	r0, [r3, #0]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	4613      	mov	r3, r2
 80190e2:	005b      	lsls	r3, r3, #1
 80190e4:	4413      	add	r3, r2
 80190e6:	00db      	lsls	r3, r3, #3
 80190e8:	4a08      	ldr	r2, [pc, #32]	; (801910c <etharp_tmr+0x14c>)
 80190ea:	4413      	add	r3, r2
 80190ec:	3304      	adds	r3, #4
 80190ee:	4619      	mov	r1, r3
 80190f0:	f000 fe72 	bl	8019dd8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	3301      	adds	r3, #1
 80190f8:	607b      	str	r3, [r7, #4]
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2b09      	cmp	r3, #9
 80190fe:	f77f af65 	ble.w	8018fcc <etharp_tmr+0xc>
      }
    }
  }
}
 8019102:	bf00      	nop
 8019104:	3708      	adds	r7, #8
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	20001080 	.word	0x20001080

08019110 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b08a      	sub	sp, #40	; 0x28
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	460b      	mov	r3, r1
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801911e:	230a      	movs	r3, #10
 8019120:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019122:	230a      	movs	r3, #10
 8019124:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019126:	230a      	movs	r3, #10
 8019128:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801912a:	2300      	movs	r3, #0
 801912c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801912e:	230a      	movs	r3, #10
 8019130:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019132:	2300      	movs	r3, #0
 8019134:	83bb      	strh	r3, [r7, #28]
 8019136:	2300      	movs	r3, #0
 8019138:	837b      	strh	r3, [r7, #26]
 801913a:	2300      	movs	r3, #0
 801913c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801913e:	2300      	movs	r3, #0
 8019140:	843b      	strh	r3, [r7, #32]
 8019142:	e0ae      	b.n	80192a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019148:	49a6      	ldr	r1, [pc, #664]	; (80193e4 <etharp_find_entry+0x2d4>)
 801914a:	4613      	mov	r3, r2
 801914c:	005b      	lsls	r3, r3, #1
 801914e:	4413      	add	r3, r2
 8019150:	00db      	lsls	r3, r3, #3
 8019152:	440b      	add	r3, r1
 8019154:	3314      	adds	r3, #20
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801915a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801915e:	2b0a      	cmp	r3, #10
 8019160:	d105      	bne.n	801916e <etharp_find_entry+0x5e>
 8019162:	7dfb      	ldrb	r3, [r7, #23]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d102      	bne.n	801916e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019168:	8c3b      	ldrh	r3, [r7, #32]
 801916a:	847b      	strh	r3, [r7, #34]	; 0x22
 801916c:	e095      	b.n	801929a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801916e:	7dfb      	ldrb	r3, [r7, #23]
 8019170:	2b00      	cmp	r3, #0
 8019172:	f000 8092 	beq.w	801929a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019176:	7dfb      	ldrb	r3, [r7, #23]
 8019178:	2b01      	cmp	r3, #1
 801917a:	d009      	beq.n	8019190 <etharp_find_entry+0x80>
 801917c:	7dfb      	ldrb	r3, [r7, #23]
 801917e:	2b01      	cmp	r3, #1
 8019180:	d806      	bhi.n	8019190 <etharp_find_entry+0x80>
 8019182:	4b99      	ldr	r3, [pc, #612]	; (80193e8 <etharp_find_entry+0x2d8>)
 8019184:	f44f 7292 	mov.w	r2, #292	; 0x124
 8019188:	4998      	ldr	r1, [pc, #608]	; (80193ec <etharp_find_entry+0x2dc>)
 801918a:	4899      	ldr	r0, [pc, #612]	; (80193f0 <etharp_find_entry+0x2e0>)
 801918c:	f002 ff62 	bl	801c054 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d020      	beq.n	80191d8 <etharp_find_entry+0xc8>
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	6819      	ldr	r1, [r3, #0]
 801919a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801919e:	4891      	ldr	r0, [pc, #580]	; (80193e4 <etharp_find_entry+0x2d4>)
 80191a0:	4613      	mov	r3, r2
 80191a2:	005b      	lsls	r3, r3, #1
 80191a4:	4413      	add	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	4403      	add	r3, r0
 80191aa:	3304      	adds	r3, #4
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	4299      	cmp	r1, r3
 80191b0:	d112      	bne.n	80191d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d00c      	beq.n	80191d2 <etharp_find_entry+0xc2>
 80191b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191bc:	4989      	ldr	r1, [pc, #548]	; (80193e4 <etharp_find_entry+0x2d4>)
 80191be:	4613      	mov	r3, r2
 80191c0:	005b      	lsls	r3, r3, #1
 80191c2:	4413      	add	r3, r2
 80191c4:	00db      	lsls	r3, r3, #3
 80191c6:	440b      	add	r3, r1
 80191c8:	3308      	adds	r3, #8
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	687a      	ldr	r2, [r7, #4]
 80191ce:	429a      	cmp	r2, r3
 80191d0:	d102      	bne.n	80191d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80191d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80191d6:	e100      	b.n	80193da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80191d8:	7dfb      	ldrb	r3, [r7, #23]
 80191da:	2b01      	cmp	r3, #1
 80191dc:	d140      	bne.n	8019260 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80191de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191e2:	4980      	ldr	r1, [pc, #512]	; (80193e4 <etharp_find_entry+0x2d4>)
 80191e4:	4613      	mov	r3, r2
 80191e6:	005b      	lsls	r3, r3, #1
 80191e8:	4413      	add	r3, r2
 80191ea:	00db      	lsls	r3, r3, #3
 80191ec:	440b      	add	r3, r1
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d01a      	beq.n	801922a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80191f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191f8:	497a      	ldr	r1, [pc, #488]	; (80193e4 <etharp_find_entry+0x2d4>)
 80191fa:	4613      	mov	r3, r2
 80191fc:	005b      	lsls	r3, r3, #1
 80191fe:	4413      	add	r3, r2
 8019200:	00db      	lsls	r3, r3, #3
 8019202:	440b      	add	r3, r1
 8019204:	3312      	adds	r3, #18
 8019206:	881b      	ldrh	r3, [r3, #0]
 8019208:	8bba      	ldrh	r2, [r7, #28]
 801920a:	429a      	cmp	r2, r3
 801920c:	d845      	bhi.n	801929a <etharp_find_entry+0x18a>
            old_queue = i;
 801920e:	8c3b      	ldrh	r3, [r7, #32]
 8019210:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019216:	4973      	ldr	r1, [pc, #460]	; (80193e4 <etharp_find_entry+0x2d4>)
 8019218:	4613      	mov	r3, r2
 801921a:	005b      	lsls	r3, r3, #1
 801921c:	4413      	add	r3, r2
 801921e:	00db      	lsls	r3, r3, #3
 8019220:	440b      	add	r3, r1
 8019222:	3312      	adds	r3, #18
 8019224:	881b      	ldrh	r3, [r3, #0]
 8019226:	83bb      	strh	r3, [r7, #28]
 8019228:	e037      	b.n	801929a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801922a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801922e:	496d      	ldr	r1, [pc, #436]	; (80193e4 <etharp_find_entry+0x2d4>)
 8019230:	4613      	mov	r3, r2
 8019232:	005b      	lsls	r3, r3, #1
 8019234:	4413      	add	r3, r2
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	440b      	add	r3, r1
 801923a:	3312      	adds	r3, #18
 801923c:	881b      	ldrh	r3, [r3, #0]
 801923e:	8b7a      	ldrh	r2, [r7, #26]
 8019240:	429a      	cmp	r2, r3
 8019242:	d82a      	bhi.n	801929a <etharp_find_entry+0x18a>
            old_pending = i;
 8019244:	8c3b      	ldrh	r3, [r7, #32]
 8019246:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019248:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801924c:	4965      	ldr	r1, [pc, #404]	; (80193e4 <etharp_find_entry+0x2d4>)
 801924e:	4613      	mov	r3, r2
 8019250:	005b      	lsls	r3, r3, #1
 8019252:	4413      	add	r3, r2
 8019254:	00db      	lsls	r3, r3, #3
 8019256:	440b      	add	r3, r1
 8019258:	3312      	adds	r3, #18
 801925a:	881b      	ldrh	r3, [r3, #0]
 801925c:	837b      	strh	r3, [r7, #26]
 801925e:	e01c      	b.n	801929a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019260:	7dfb      	ldrb	r3, [r7, #23]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d919      	bls.n	801929a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801926a:	495e      	ldr	r1, [pc, #376]	; (80193e4 <etharp_find_entry+0x2d4>)
 801926c:	4613      	mov	r3, r2
 801926e:	005b      	lsls	r3, r3, #1
 8019270:	4413      	add	r3, r2
 8019272:	00db      	lsls	r3, r3, #3
 8019274:	440b      	add	r3, r1
 8019276:	3312      	adds	r3, #18
 8019278:	881b      	ldrh	r3, [r3, #0]
 801927a:	8b3a      	ldrh	r2, [r7, #24]
 801927c:	429a      	cmp	r2, r3
 801927e:	d80c      	bhi.n	801929a <etharp_find_entry+0x18a>
            old_stable = i;
 8019280:	8c3b      	ldrh	r3, [r7, #32]
 8019282:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019284:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019288:	4956      	ldr	r1, [pc, #344]	; (80193e4 <etharp_find_entry+0x2d4>)
 801928a:	4613      	mov	r3, r2
 801928c:	005b      	lsls	r3, r3, #1
 801928e:	4413      	add	r3, r2
 8019290:	00db      	lsls	r3, r3, #3
 8019292:	440b      	add	r3, r1
 8019294:	3312      	adds	r3, #18
 8019296:	881b      	ldrh	r3, [r3, #0]
 8019298:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801929a:	8c3b      	ldrh	r3, [r7, #32]
 801929c:	3301      	adds	r3, #1
 801929e:	b29b      	uxth	r3, r3
 80192a0:	843b      	strh	r3, [r7, #32]
 80192a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192a6:	2b09      	cmp	r3, #9
 80192a8:	f77f af4c 	ble.w	8019144 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80192ac:	7afb      	ldrb	r3, [r7, #11]
 80192ae:	f003 0302 	and.w	r3, r3, #2
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d108      	bne.n	80192c8 <etharp_find_entry+0x1b8>
 80192b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192ba:	2b0a      	cmp	r3, #10
 80192bc:	d107      	bne.n	80192ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80192be:	7afb      	ldrb	r3, [r7, #11]
 80192c0:	f003 0301 	and.w	r3, r3, #1
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d102      	bne.n	80192ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80192c8:	f04f 33ff 	mov.w	r3, #4294967295
 80192cc:	e085      	b.n	80193da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80192ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192d2:	2b09      	cmp	r3, #9
 80192d4:	dc02      	bgt.n	80192dc <etharp_find_entry+0x1cc>
    i = empty;
 80192d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192d8:	843b      	strh	r3, [r7, #32]
 80192da:	e039      	b.n	8019350 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80192dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80192e0:	2b09      	cmp	r3, #9
 80192e2:	dc14      	bgt.n	801930e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80192e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80192e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192ec:	493d      	ldr	r1, [pc, #244]	; (80193e4 <etharp_find_entry+0x2d4>)
 80192ee:	4613      	mov	r3, r2
 80192f0:	005b      	lsls	r3, r3, #1
 80192f2:	4413      	add	r3, r2
 80192f4:	00db      	lsls	r3, r3, #3
 80192f6:	440b      	add	r3, r1
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d018      	beq.n	8019330 <etharp_find_entry+0x220>
 80192fe:	4b3a      	ldr	r3, [pc, #232]	; (80193e8 <etharp_find_entry+0x2d8>)
 8019300:	f240 126d 	movw	r2, #365	; 0x16d
 8019304:	493b      	ldr	r1, [pc, #236]	; (80193f4 <etharp_find_entry+0x2e4>)
 8019306:	483a      	ldr	r0, [pc, #232]	; (80193f0 <etharp_find_entry+0x2e0>)
 8019308:	f002 fea4 	bl	801c054 <iprintf>
 801930c:	e010      	b.n	8019330 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801930e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019312:	2b09      	cmp	r3, #9
 8019314:	dc02      	bgt.n	801931c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019318:	843b      	strh	r3, [r7, #32]
 801931a:	e009      	b.n	8019330 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801931c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019320:	2b09      	cmp	r3, #9
 8019322:	dc02      	bgt.n	801932a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019324:	8bfb      	ldrh	r3, [r7, #30]
 8019326:	843b      	strh	r3, [r7, #32]
 8019328:	e002      	b.n	8019330 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801932a:	f04f 33ff 	mov.w	r3, #4294967295
 801932e:	e054      	b.n	80193da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019330:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019334:	2b09      	cmp	r3, #9
 8019336:	dd06      	ble.n	8019346 <etharp_find_entry+0x236>
 8019338:	4b2b      	ldr	r3, [pc, #172]	; (80193e8 <etharp_find_entry+0x2d8>)
 801933a:	f240 127f 	movw	r2, #383	; 0x17f
 801933e:	492e      	ldr	r1, [pc, #184]	; (80193f8 <etharp_find_entry+0x2e8>)
 8019340:	482b      	ldr	r0, [pc, #172]	; (80193f0 <etharp_find_entry+0x2e0>)
 8019342:	f002 fe87 	bl	801c054 <iprintf>
    etharp_free_entry(i);
 8019346:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801934a:	4618      	mov	r0, r3
 801934c:	f7ff fe06 	bl	8018f5c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019350:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019354:	2b09      	cmp	r3, #9
 8019356:	dd06      	ble.n	8019366 <etharp_find_entry+0x256>
 8019358:	4b23      	ldr	r3, [pc, #140]	; (80193e8 <etharp_find_entry+0x2d8>)
 801935a:	f240 1283 	movw	r2, #387	; 0x183
 801935e:	4926      	ldr	r1, [pc, #152]	; (80193f8 <etharp_find_entry+0x2e8>)
 8019360:	4823      	ldr	r0, [pc, #140]	; (80193f0 <etharp_find_entry+0x2e0>)
 8019362:	f002 fe77 	bl	801c054 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801936a:	491e      	ldr	r1, [pc, #120]	; (80193e4 <etharp_find_entry+0x2d4>)
 801936c:	4613      	mov	r3, r2
 801936e:	005b      	lsls	r3, r3, #1
 8019370:	4413      	add	r3, r2
 8019372:	00db      	lsls	r3, r3, #3
 8019374:	440b      	add	r3, r1
 8019376:	3314      	adds	r3, #20
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d006      	beq.n	801938c <etharp_find_entry+0x27c>
 801937e:	4b1a      	ldr	r3, [pc, #104]	; (80193e8 <etharp_find_entry+0x2d8>)
 8019380:	f240 1285 	movw	r2, #389	; 0x185
 8019384:	491d      	ldr	r1, [pc, #116]	; (80193fc <etharp_find_entry+0x2ec>)
 8019386:	481a      	ldr	r0, [pc, #104]	; (80193f0 <etharp_find_entry+0x2e0>)
 8019388:	f002 fe64 	bl	801c054 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d00b      	beq.n	80193aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	6819      	ldr	r1, [r3, #0]
 801939a:	4812      	ldr	r0, [pc, #72]	; (80193e4 <etharp_find_entry+0x2d4>)
 801939c:	4613      	mov	r3, r2
 801939e:	005b      	lsls	r3, r3, #1
 80193a0:	4413      	add	r3, r2
 80193a2:	00db      	lsls	r3, r3, #3
 80193a4:	4403      	add	r3, r0
 80193a6:	3304      	adds	r3, #4
 80193a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80193aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193ae:	490d      	ldr	r1, [pc, #52]	; (80193e4 <etharp_find_entry+0x2d4>)
 80193b0:	4613      	mov	r3, r2
 80193b2:	005b      	lsls	r3, r3, #1
 80193b4:	4413      	add	r3, r2
 80193b6:	00db      	lsls	r3, r3, #3
 80193b8:	440b      	add	r3, r1
 80193ba:	3312      	adds	r3, #18
 80193bc:	2200      	movs	r2, #0
 80193be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80193c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193c4:	4907      	ldr	r1, [pc, #28]	; (80193e4 <etharp_find_entry+0x2d4>)
 80193c6:	4613      	mov	r3, r2
 80193c8:	005b      	lsls	r3, r3, #1
 80193ca:	4413      	add	r3, r2
 80193cc:	00db      	lsls	r3, r3, #3
 80193ce:	440b      	add	r3, r1
 80193d0:	3308      	adds	r3, #8
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80193d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3728      	adds	r7, #40	; 0x28
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	20001080 	.word	0x20001080
 80193e8:	08023c64 	.word	0x08023c64
 80193ec:	08023c9c 	.word	0x08023c9c
 80193f0:	08023cdc 	.word	0x08023cdc
 80193f4:	08023d04 	.word	0x08023d04
 80193f8:	08023d1c 	.word	0x08023d1c
 80193fc:	08023d30 	.word	0x08023d30

08019400 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b088      	sub	sp, #32
 8019404:	af02      	add	r7, sp, #8
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	607a      	str	r2, [r7, #4]
 801940c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019414:	2b06      	cmp	r3, #6
 8019416:	d006      	beq.n	8019426 <etharp_update_arp_entry+0x26>
 8019418:	4b48      	ldr	r3, [pc, #288]	; (801953c <etharp_update_arp_entry+0x13c>)
 801941a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801941e:	4948      	ldr	r1, [pc, #288]	; (8019540 <etharp_update_arp_entry+0x140>)
 8019420:	4848      	ldr	r0, [pc, #288]	; (8019544 <etharp_update_arp_entry+0x144>)
 8019422:	f002 fe17 	bl	801c054 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d012      	beq.n	8019452 <etharp_update_arp_entry+0x52>
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d00e      	beq.n	8019452 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	68f9      	ldr	r1, [r7, #12]
 801943a:	4618      	mov	r0, r3
 801943c:	f001 f91e 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8019440:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019442:	2b00      	cmp	r3, #0
 8019444:	d105      	bne.n	8019452 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019446:	68bb      	ldr	r3, [r7, #8]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801944e:	2be0      	cmp	r3, #224	; 0xe0
 8019450:	d102      	bne.n	8019458 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019452:	f06f 030f 	mvn.w	r3, #15
 8019456:	e06c      	b.n	8019532 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019458:	78fb      	ldrb	r3, [r7, #3]
 801945a:	68fa      	ldr	r2, [r7, #12]
 801945c:	4619      	mov	r1, r3
 801945e:	68b8      	ldr	r0, [r7, #8]
 8019460:	f7ff fe56 	bl	8019110 <etharp_find_entry>
 8019464:	4603      	mov	r3, r0
 8019466:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801946c:	2b00      	cmp	r3, #0
 801946e:	da02      	bge.n	8019476 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019470:	8afb      	ldrh	r3, [r7, #22]
 8019472:	b25b      	sxtb	r3, r3
 8019474:	e05d      	b.n	8019532 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019476:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801947a:	4933      	ldr	r1, [pc, #204]	; (8019548 <etharp_update_arp_entry+0x148>)
 801947c:	4613      	mov	r3, r2
 801947e:	005b      	lsls	r3, r3, #1
 8019480:	4413      	add	r3, r2
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	440b      	add	r3, r1
 8019486:	3314      	adds	r3, #20
 8019488:	2202      	movs	r2, #2
 801948a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801948c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019490:	492d      	ldr	r1, [pc, #180]	; (8019548 <etharp_update_arp_entry+0x148>)
 8019492:	4613      	mov	r3, r2
 8019494:	005b      	lsls	r3, r3, #1
 8019496:	4413      	add	r3, r2
 8019498:	00db      	lsls	r3, r3, #3
 801949a:	440b      	add	r3, r1
 801949c:	3308      	adds	r3, #8
 801949e:	68fa      	ldr	r2, [r7, #12]
 80194a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80194a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194a6:	4613      	mov	r3, r2
 80194a8:	005b      	lsls	r3, r3, #1
 80194aa:	4413      	add	r3, r2
 80194ac:	00db      	lsls	r3, r3, #3
 80194ae:	3308      	adds	r3, #8
 80194b0:	4a25      	ldr	r2, [pc, #148]	; (8019548 <etharp_update_arp_entry+0x148>)
 80194b2:	4413      	add	r3, r2
 80194b4:	3304      	adds	r3, #4
 80194b6:	2206      	movs	r2, #6
 80194b8:	6879      	ldr	r1, [r7, #4]
 80194ba:	4618      	mov	r0, r3
 80194bc:	f002 f899 	bl	801b5f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80194c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194c4:	4920      	ldr	r1, [pc, #128]	; (8019548 <etharp_update_arp_entry+0x148>)
 80194c6:	4613      	mov	r3, r2
 80194c8:	005b      	lsls	r3, r3, #1
 80194ca:	4413      	add	r3, r2
 80194cc:	00db      	lsls	r3, r3, #3
 80194ce:	440b      	add	r3, r1
 80194d0:	3312      	adds	r3, #18
 80194d2:	2200      	movs	r2, #0
 80194d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80194d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194da:	491b      	ldr	r1, [pc, #108]	; (8019548 <etharp_update_arp_entry+0x148>)
 80194dc:	4613      	mov	r3, r2
 80194de:	005b      	lsls	r3, r3, #1
 80194e0:	4413      	add	r3, r2
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	440b      	add	r3, r1
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d021      	beq.n	8019530 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80194ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194f0:	4915      	ldr	r1, [pc, #84]	; (8019548 <etharp_update_arp_entry+0x148>)
 80194f2:	4613      	mov	r3, r2
 80194f4:	005b      	lsls	r3, r3, #1
 80194f6:	4413      	add	r3, r2
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	440b      	add	r3, r1
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019504:	4910      	ldr	r1, [pc, #64]	; (8019548 <etharp_update_arp_entry+0x148>)
 8019506:	4613      	mov	r3, r2
 8019508:	005b      	lsls	r3, r3, #1
 801950a:	4413      	add	r3, r2
 801950c:	00db      	lsls	r3, r3, #3
 801950e:	440b      	add	r3, r1
 8019510:	2200      	movs	r2, #0
 8019512:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801951a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801951e:	9300      	str	r3, [sp, #0]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6939      	ldr	r1, [r7, #16]
 8019524:	68f8      	ldr	r0, [r7, #12]
 8019526:	f001 ffad 	bl	801b484 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801952a:	6938      	ldr	r0, [r7, #16]
 801952c:	f7f7 fd0a 	bl	8010f44 <pbuf_free>
  }
  return ERR_OK;
 8019530:	2300      	movs	r3, #0
}
 8019532:	4618      	mov	r0, r3
 8019534:	3718      	adds	r7, #24
 8019536:	46bd      	mov	sp, r7
 8019538:	bd80      	pop	{r7, pc}
 801953a:	bf00      	nop
 801953c:	08023c64 	.word	0x08023c64
 8019540:	08023d5c 	.word	0x08023d5c
 8019544:	08023cdc 	.word	0x08023cdc
 8019548:	20001080 	.word	0x20001080

0801954c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b084      	sub	sp, #16
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019554:	2300      	movs	r3, #0
 8019556:	60fb      	str	r3, [r7, #12]
 8019558:	e01e      	b.n	8019598 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801955a:	4913      	ldr	r1, [pc, #76]	; (80195a8 <etharp_cleanup_netif+0x5c>)
 801955c:	68fa      	ldr	r2, [r7, #12]
 801955e:	4613      	mov	r3, r2
 8019560:	005b      	lsls	r3, r3, #1
 8019562:	4413      	add	r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	440b      	add	r3, r1
 8019568:	3314      	adds	r3, #20
 801956a:	781b      	ldrb	r3, [r3, #0]
 801956c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801956e:	7afb      	ldrb	r3, [r7, #11]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d00e      	beq.n	8019592 <etharp_cleanup_netif+0x46>
 8019574:	490c      	ldr	r1, [pc, #48]	; (80195a8 <etharp_cleanup_netif+0x5c>)
 8019576:	68fa      	ldr	r2, [r7, #12]
 8019578:	4613      	mov	r3, r2
 801957a:	005b      	lsls	r3, r3, #1
 801957c:	4413      	add	r3, r2
 801957e:	00db      	lsls	r3, r3, #3
 8019580:	440b      	add	r3, r1
 8019582:	3308      	adds	r3, #8
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	429a      	cmp	r2, r3
 801958a:	d102      	bne.n	8019592 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f7ff fce5 	bl	8018f5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	3301      	adds	r3, #1
 8019596:	60fb      	str	r3, [r7, #12]
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	2b09      	cmp	r3, #9
 801959c:	dddd      	ble.n	801955a <etharp_cleanup_netif+0xe>
    }
  }
}
 801959e:	bf00      	nop
 80195a0:	3710      	adds	r7, #16
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
 80195a6:	bf00      	nop
 80195a8:	20001080 	.word	0x20001080

080195ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80195ac:	b5b0      	push	{r4, r5, r7, lr}
 80195ae:	b08a      	sub	sp, #40	; 0x28
 80195b0:	af04      	add	r7, sp, #16
 80195b2:	6078      	str	r0, [r7, #4]
 80195b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d107      	bne.n	80195cc <etharp_input+0x20>
 80195bc:	4b3f      	ldr	r3, [pc, #252]	; (80196bc <etharp_input+0x110>)
 80195be:	f240 228a 	movw	r2, #650	; 0x28a
 80195c2:	493f      	ldr	r1, [pc, #252]	; (80196c0 <etharp_input+0x114>)
 80195c4:	483f      	ldr	r0, [pc, #252]	; (80196c4 <etharp_input+0x118>)
 80195c6:	f002 fd45 	bl	801c054 <iprintf>
 80195ca:	e074      	b.n	80196b6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	685b      	ldr	r3, [r3, #4]
 80195d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80195d2:	693b      	ldr	r3, [r7, #16]
 80195d4:	881b      	ldrh	r3, [r3, #0]
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195dc:	d10c      	bne.n	80195f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80195e2:	2b06      	cmp	r3, #6
 80195e4:	d108      	bne.n	80195f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80195e6:	693b      	ldr	r3, [r7, #16]
 80195e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80195ea:	2b04      	cmp	r3, #4
 80195ec:	d104      	bne.n	80195f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	885b      	ldrh	r3, [r3, #2]
 80195f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80195f4:	2b08      	cmp	r3, #8
 80195f6:	d003      	beq.n	8019600 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	f7f7 fca3 	bl	8010f44 <pbuf_free>
    return;
 80195fe:	e05a      	b.n	80196b6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	330e      	adds	r3, #14
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019608:	693b      	ldr	r3, [r7, #16]
 801960a:	3318      	adds	r3, #24
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	3304      	adds	r3, #4
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d102      	bne.n	8019620 <etharp_input+0x74>
    for_us = 0;
 801961a:	2300      	movs	r3, #0
 801961c:	75fb      	strb	r3, [r7, #23]
 801961e:	e009      	b.n	8019634 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019620:	68ba      	ldr	r2, [r7, #8]
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	3304      	adds	r3, #4
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	429a      	cmp	r2, r3
 801962a:	bf0c      	ite	eq
 801962c:	2301      	moveq	r3, #1
 801962e:	2300      	movne	r3, #0
 8019630:	b2db      	uxtb	r3, r3
 8019632:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	f103 0208 	add.w	r2, r3, #8
 801963a:	7dfb      	ldrb	r3, [r7, #23]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d001      	beq.n	8019644 <etharp_input+0x98>
 8019640:	2301      	movs	r3, #1
 8019642:	e000      	b.n	8019646 <etharp_input+0x9a>
 8019644:	2302      	movs	r3, #2
 8019646:	f107 010c 	add.w	r1, r7, #12
 801964a:	6838      	ldr	r0, [r7, #0]
 801964c:	f7ff fed8 	bl	8019400 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	88db      	ldrh	r3, [r3, #6]
 8019654:	b29b      	uxth	r3, r3
 8019656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801965a:	d003      	beq.n	8019664 <etharp_input+0xb8>
 801965c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019660:	d01e      	beq.n	80196a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019662:	e025      	b.n	80196b0 <etharp_input+0x104>
      if (for_us) {
 8019664:	7dfb      	ldrb	r3, [r7, #23]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d021      	beq.n	80196ae <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019680:	693a      	ldr	r2, [r7, #16]
 8019682:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019684:	2102      	movs	r1, #2
 8019686:	9103      	str	r1, [sp, #12]
 8019688:	f107 010c 	add.w	r1, r7, #12
 801968c:	9102      	str	r1, [sp, #8]
 801968e:	9201      	str	r2, [sp, #4]
 8019690:	9300      	str	r3, [sp, #0]
 8019692:	462b      	mov	r3, r5
 8019694:	4622      	mov	r2, r4
 8019696:	4601      	mov	r1, r0
 8019698:	6838      	ldr	r0, [r7, #0]
 801969a:	f000 faef 	bl	8019c7c <etharp_raw>
      break;
 801969e:	e006      	b.n	80196ae <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80196a0:	f107 030c 	add.w	r3, r7, #12
 80196a4:	4619      	mov	r1, r3
 80196a6:	6838      	ldr	r0, [r7, #0]
 80196a8:	f7fe f9fe 	bl	8017aa8 <dhcp_arp_reply>
      break;
 80196ac:	e000      	b.n	80196b0 <etharp_input+0x104>
      break;
 80196ae:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80196b0:	6878      	ldr	r0, [r7, #4]
 80196b2:	f7f7 fc47 	bl	8010f44 <pbuf_free>
}
 80196b6:	3718      	adds	r7, #24
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bdb0      	pop	{r4, r5, r7, pc}
 80196bc:	08023c64 	.word	0x08023c64
 80196c0:	08023db4 	.word	0x08023db4
 80196c4:	08023cdc 	.word	0x08023cdc

080196c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b086      	sub	sp, #24
 80196cc:	af02      	add	r7, sp, #8
 80196ce:	60f8      	str	r0, [r7, #12]
 80196d0:	60b9      	str	r1, [r7, #8]
 80196d2:	4613      	mov	r3, r2
 80196d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80196d6:	79fa      	ldrb	r2, [r7, #7]
 80196d8:	4944      	ldr	r1, [pc, #272]	; (80197ec <etharp_output_to_arp_index+0x124>)
 80196da:	4613      	mov	r3, r2
 80196dc:	005b      	lsls	r3, r3, #1
 80196de:	4413      	add	r3, r2
 80196e0:	00db      	lsls	r3, r3, #3
 80196e2:	440b      	add	r3, r1
 80196e4:	3314      	adds	r3, #20
 80196e6:	781b      	ldrb	r3, [r3, #0]
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	d806      	bhi.n	80196fa <etharp_output_to_arp_index+0x32>
 80196ec:	4b40      	ldr	r3, [pc, #256]	; (80197f0 <etharp_output_to_arp_index+0x128>)
 80196ee:	f240 22ef 	movw	r2, #751	; 0x2ef
 80196f2:	4940      	ldr	r1, [pc, #256]	; (80197f4 <etharp_output_to_arp_index+0x12c>)
 80196f4:	4840      	ldr	r0, [pc, #256]	; (80197f8 <etharp_output_to_arp_index+0x130>)
 80196f6:	f002 fcad 	bl	801c054 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80196fa:	79fa      	ldrb	r2, [r7, #7]
 80196fc:	493b      	ldr	r1, [pc, #236]	; (80197ec <etharp_output_to_arp_index+0x124>)
 80196fe:	4613      	mov	r3, r2
 8019700:	005b      	lsls	r3, r3, #1
 8019702:	4413      	add	r3, r2
 8019704:	00db      	lsls	r3, r3, #3
 8019706:	440b      	add	r3, r1
 8019708:	3314      	adds	r3, #20
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	2b02      	cmp	r3, #2
 801970e:	d153      	bne.n	80197b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019710:	79fa      	ldrb	r2, [r7, #7]
 8019712:	4936      	ldr	r1, [pc, #216]	; (80197ec <etharp_output_to_arp_index+0x124>)
 8019714:	4613      	mov	r3, r2
 8019716:	005b      	lsls	r3, r3, #1
 8019718:	4413      	add	r3, r2
 801971a:	00db      	lsls	r3, r3, #3
 801971c:	440b      	add	r3, r1
 801971e:	3312      	adds	r3, #18
 8019720:	881b      	ldrh	r3, [r3, #0]
 8019722:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019726:	d919      	bls.n	801975c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019728:	79fa      	ldrb	r2, [r7, #7]
 801972a:	4613      	mov	r3, r2
 801972c:	005b      	lsls	r3, r3, #1
 801972e:	4413      	add	r3, r2
 8019730:	00db      	lsls	r3, r3, #3
 8019732:	4a2e      	ldr	r2, [pc, #184]	; (80197ec <etharp_output_to_arp_index+0x124>)
 8019734:	4413      	add	r3, r2
 8019736:	3304      	adds	r3, #4
 8019738:	4619      	mov	r1, r3
 801973a:	68f8      	ldr	r0, [r7, #12]
 801973c:	f000 fb4c 	bl	8019dd8 <etharp_request>
 8019740:	4603      	mov	r3, r0
 8019742:	2b00      	cmp	r3, #0
 8019744:	d138      	bne.n	80197b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019746:	79fa      	ldrb	r2, [r7, #7]
 8019748:	4928      	ldr	r1, [pc, #160]	; (80197ec <etharp_output_to_arp_index+0x124>)
 801974a:	4613      	mov	r3, r2
 801974c:	005b      	lsls	r3, r3, #1
 801974e:	4413      	add	r3, r2
 8019750:	00db      	lsls	r3, r3, #3
 8019752:	440b      	add	r3, r1
 8019754:	3314      	adds	r3, #20
 8019756:	2203      	movs	r2, #3
 8019758:	701a      	strb	r2, [r3, #0]
 801975a:	e02d      	b.n	80197b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801975c:	79fa      	ldrb	r2, [r7, #7]
 801975e:	4923      	ldr	r1, [pc, #140]	; (80197ec <etharp_output_to_arp_index+0x124>)
 8019760:	4613      	mov	r3, r2
 8019762:	005b      	lsls	r3, r3, #1
 8019764:	4413      	add	r3, r2
 8019766:	00db      	lsls	r3, r3, #3
 8019768:	440b      	add	r3, r1
 801976a:	3312      	adds	r3, #18
 801976c:	881b      	ldrh	r3, [r3, #0]
 801976e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019772:	d321      	bcc.n	80197b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019774:	79fa      	ldrb	r2, [r7, #7]
 8019776:	4613      	mov	r3, r2
 8019778:	005b      	lsls	r3, r3, #1
 801977a:	4413      	add	r3, r2
 801977c:	00db      	lsls	r3, r3, #3
 801977e:	4a1b      	ldr	r2, [pc, #108]	; (80197ec <etharp_output_to_arp_index+0x124>)
 8019780:	4413      	add	r3, r2
 8019782:	1d19      	adds	r1, r3, #4
 8019784:	79fa      	ldrb	r2, [r7, #7]
 8019786:	4613      	mov	r3, r2
 8019788:	005b      	lsls	r3, r3, #1
 801978a:	4413      	add	r3, r2
 801978c:	00db      	lsls	r3, r3, #3
 801978e:	3308      	adds	r3, #8
 8019790:	4a16      	ldr	r2, [pc, #88]	; (80197ec <etharp_output_to_arp_index+0x124>)
 8019792:	4413      	add	r3, r2
 8019794:	3304      	adds	r3, #4
 8019796:	461a      	mov	r2, r3
 8019798:	68f8      	ldr	r0, [r7, #12]
 801979a:	f000 fafb 	bl	8019d94 <etharp_request_dst>
 801979e:	4603      	mov	r3, r0
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d109      	bne.n	80197b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80197a4:	79fa      	ldrb	r2, [r7, #7]
 80197a6:	4911      	ldr	r1, [pc, #68]	; (80197ec <etharp_output_to_arp_index+0x124>)
 80197a8:	4613      	mov	r3, r2
 80197aa:	005b      	lsls	r3, r3, #1
 80197ac:	4413      	add	r3, r2
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	440b      	add	r3, r1
 80197b2:	3314      	adds	r3, #20
 80197b4:	2203      	movs	r2, #3
 80197b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80197be:	79fa      	ldrb	r2, [r7, #7]
 80197c0:	4613      	mov	r3, r2
 80197c2:	005b      	lsls	r3, r3, #1
 80197c4:	4413      	add	r3, r2
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	3308      	adds	r3, #8
 80197ca:	4a08      	ldr	r2, [pc, #32]	; (80197ec <etharp_output_to_arp_index+0x124>)
 80197cc:	4413      	add	r3, r2
 80197ce:	1d1a      	adds	r2, r3, #4
 80197d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80197d4:	9300      	str	r3, [sp, #0]
 80197d6:	4613      	mov	r3, r2
 80197d8:	460a      	mov	r2, r1
 80197da:	68b9      	ldr	r1, [r7, #8]
 80197dc:	68f8      	ldr	r0, [r7, #12]
 80197de:	f001 fe51 	bl	801b484 <ethernet_output>
 80197e2:	4603      	mov	r3, r0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3710      	adds	r7, #16
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	20001080 	.word	0x20001080
 80197f0:	08023c64 	.word	0x08023c64
 80197f4:	08023dd4 	.word	0x08023dd4
 80197f8:	08023cdc 	.word	0x08023cdc

080197fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b08a      	sub	sp, #40	; 0x28
 8019800:	af02      	add	r7, sp, #8
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d106      	bne.n	8019820 <etharp_output+0x24>
 8019812:	4b73      	ldr	r3, [pc, #460]	; (80199e0 <etharp_output+0x1e4>)
 8019814:	f240 321e 	movw	r2, #798	; 0x31e
 8019818:	4972      	ldr	r1, [pc, #456]	; (80199e4 <etharp_output+0x1e8>)
 801981a:	4873      	ldr	r0, [pc, #460]	; (80199e8 <etharp_output+0x1ec>)
 801981c:	f002 fc1a 	bl	801c054 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019820:	68bb      	ldr	r3, [r7, #8]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d106      	bne.n	8019834 <etharp_output+0x38>
 8019826:	4b6e      	ldr	r3, [pc, #440]	; (80199e0 <etharp_output+0x1e4>)
 8019828:	f240 321f 	movw	r2, #799	; 0x31f
 801982c:	496f      	ldr	r1, [pc, #444]	; (80199ec <etharp_output+0x1f0>)
 801982e:	486e      	ldr	r0, [pc, #440]	; (80199e8 <etharp_output+0x1ec>)
 8019830:	f002 fc10 	bl	801c054 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d106      	bne.n	8019848 <etharp_output+0x4c>
 801983a:	4b69      	ldr	r3, [pc, #420]	; (80199e0 <etharp_output+0x1e4>)
 801983c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019840:	496b      	ldr	r1, [pc, #428]	; (80199f0 <etharp_output+0x1f4>)
 8019842:	4869      	ldr	r0, [pc, #420]	; (80199e8 <etharp_output+0x1ec>)
 8019844:	f002 fc06 	bl	801c054 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	68f9      	ldr	r1, [r7, #12]
 801984e:	4618      	mov	r0, r3
 8019850:	f000 ff14 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8019854:	4603      	mov	r3, r0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d002      	beq.n	8019860 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801985a:	4b66      	ldr	r3, [pc, #408]	; (80199f4 <etharp_output+0x1f8>)
 801985c:	61fb      	str	r3, [r7, #28]
 801985e:	e0af      	b.n	80199c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019868:	2be0      	cmp	r3, #224	; 0xe0
 801986a:	d118      	bne.n	801989e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801986c:	2301      	movs	r3, #1
 801986e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019870:	2300      	movs	r3, #0
 8019872:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019874:	235e      	movs	r3, #94	; 0x5e
 8019876:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	3301      	adds	r3, #1
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019882:	b2db      	uxtb	r3, r3
 8019884:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	3302      	adds	r3, #2
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	3303      	adds	r3, #3
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019896:	f107 0310 	add.w	r3, r7, #16
 801989a:	61fb      	str	r3, [r7, #28]
 801989c:	e090      	b.n	80199c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	3304      	adds	r3, #4
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	405a      	eors	r2, r3
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	3308      	adds	r3, #8
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	4013      	ands	r3, r2
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d012      	beq.n	80198dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80198bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80198c0:	4293      	cmp	r3, r2
 80198c2:	d00b      	beq.n	80198dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	330c      	adds	r3, #12
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d003      	beq.n	80198d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	330c      	adds	r3, #12
 80198d2:	61bb      	str	r3, [r7, #24]
 80198d4:	e002      	b.n	80198dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80198d6:	f06f 0303 	mvn.w	r3, #3
 80198da:	e07d      	b.n	80199d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80198dc:	4b46      	ldr	r3, [pc, #280]	; (80199f8 <etharp_output+0x1fc>)
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	4619      	mov	r1, r3
 80198e2:	4a46      	ldr	r2, [pc, #280]	; (80199fc <etharp_output+0x200>)
 80198e4:	460b      	mov	r3, r1
 80198e6:	005b      	lsls	r3, r3, #1
 80198e8:	440b      	add	r3, r1
 80198ea:	00db      	lsls	r3, r3, #3
 80198ec:	4413      	add	r3, r2
 80198ee:	3314      	adds	r3, #20
 80198f0:	781b      	ldrb	r3, [r3, #0]
 80198f2:	2b01      	cmp	r3, #1
 80198f4:	d925      	bls.n	8019942 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80198f6:	4b40      	ldr	r3, [pc, #256]	; (80199f8 <etharp_output+0x1fc>)
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	4619      	mov	r1, r3
 80198fc:	4a3f      	ldr	r2, [pc, #252]	; (80199fc <etharp_output+0x200>)
 80198fe:	460b      	mov	r3, r1
 8019900:	005b      	lsls	r3, r3, #1
 8019902:	440b      	add	r3, r1
 8019904:	00db      	lsls	r3, r3, #3
 8019906:	4413      	add	r3, r2
 8019908:	3308      	adds	r3, #8
 801990a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801990c:	68fa      	ldr	r2, [r7, #12]
 801990e:	429a      	cmp	r2, r3
 8019910:	d117      	bne.n	8019942 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019912:	69bb      	ldr	r3, [r7, #24]
 8019914:	681a      	ldr	r2, [r3, #0]
 8019916:	4b38      	ldr	r3, [pc, #224]	; (80199f8 <etharp_output+0x1fc>)
 8019918:	781b      	ldrb	r3, [r3, #0]
 801991a:	4618      	mov	r0, r3
 801991c:	4937      	ldr	r1, [pc, #220]	; (80199fc <etharp_output+0x200>)
 801991e:	4603      	mov	r3, r0
 8019920:	005b      	lsls	r3, r3, #1
 8019922:	4403      	add	r3, r0
 8019924:	00db      	lsls	r3, r3, #3
 8019926:	440b      	add	r3, r1
 8019928:	3304      	adds	r3, #4
 801992a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801992c:	429a      	cmp	r2, r3
 801992e:	d108      	bne.n	8019942 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019930:	4b31      	ldr	r3, [pc, #196]	; (80199f8 <etharp_output+0x1fc>)
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	461a      	mov	r2, r3
 8019936:	68b9      	ldr	r1, [r7, #8]
 8019938:	68f8      	ldr	r0, [r7, #12]
 801993a:	f7ff fec5 	bl	80196c8 <etharp_output_to_arp_index>
 801993e:	4603      	mov	r3, r0
 8019940:	e04a      	b.n	80199d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019942:	2300      	movs	r3, #0
 8019944:	75fb      	strb	r3, [r7, #23]
 8019946:	e031      	b.n	80199ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019948:	7dfa      	ldrb	r2, [r7, #23]
 801994a:	492c      	ldr	r1, [pc, #176]	; (80199fc <etharp_output+0x200>)
 801994c:	4613      	mov	r3, r2
 801994e:	005b      	lsls	r3, r3, #1
 8019950:	4413      	add	r3, r2
 8019952:	00db      	lsls	r3, r3, #3
 8019954:	440b      	add	r3, r1
 8019956:	3314      	adds	r3, #20
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	2b01      	cmp	r3, #1
 801995c:	d923      	bls.n	80199a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801995e:	7dfa      	ldrb	r2, [r7, #23]
 8019960:	4926      	ldr	r1, [pc, #152]	; (80199fc <etharp_output+0x200>)
 8019962:	4613      	mov	r3, r2
 8019964:	005b      	lsls	r3, r3, #1
 8019966:	4413      	add	r3, r2
 8019968:	00db      	lsls	r3, r3, #3
 801996a:	440b      	add	r3, r1
 801996c:	3308      	adds	r3, #8
 801996e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019970:	68fa      	ldr	r2, [r7, #12]
 8019972:	429a      	cmp	r2, r3
 8019974:	d117      	bne.n	80199a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019976:	69bb      	ldr	r3, [r7, #24]
 8019978:	6819      	ldr	r1, [r3, #0]
 801997a:	7dfa      	ldrb	r2, [r7, #23]
 801997c:	481f      	ldr	r0, [pc, #124]	; (80199fc <etharp_output+0x200>)
 801997e:	4613      	mov	r3, r2
 8019980:	005b      	lsls	r3, r3, #1
 8019982:	4413      	add	r3, r2
 8019984:	00db      	lsls	r3, r3, #3
 8019986:	4403      	add	r3, r0
 8019988:	3304      	adds	r3, #4
 801998a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801998c:	4299      	cmp	r1, r3
 801998e:	d10a      	bne.n	80199a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019990:	4a19      	ldr	r2, [pc, #100]	; (80199f8 <etharp_output+0x1fc>)
 8019992:	7dfb      	ldrb	r3, [r7, #23]
 8019994:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019996:	7dfb      	ldrb	r3, [r7, #23]
 8019998:	461a      	mov	r2, r3
 801999a:	68b9      	ldr	r1, [r7, #8]
 801999c:	68f8      	ldr	r0, [r7, #12]
 801999e:	f7ff fe93 	bl	80196c8 <etharp_output_to_arp_index>
 80199a2:	4603      	mov	r3, r0
 80199a4:	e018      	b.n	80199d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80199a6:	7dfb      	ldrb	r3, [r7, #23]
 80199a8:	3301      	adds	r3, #1
 80199aa:	75fb      	strb	r3, [r7, #23]
 80199ac:	7dfb      	ldrb	r3, [r7, #23]
 80199ae:	2b09      	cmp	r3, #9
 80199b0:	d9ca      	bls.n	8019948 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80199b2:	68ba      	ldr	r2, [r7, #8]
 80199b4:	69b9      	ldr	r1, [r7, #24]
 80199b6:	68f8      	ldr	r0, [r7, #12]
 80199b8:	f000 f822 	bl	8019a00 <etharp_query>
 80199bc:	4603      	mov	r3, r0
 80199be:	e00b      	b.n	80199d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80199c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	69fb      	ldr	r3, [r7, #28]
 80199ce:	68b9      	ldr	r1, [r7, #8]
 80199d0:	68f8      	ldr	r0, [r7, #12]
 80199d2:	f001 fd57 	bl	801b484 <ethernet_output>
 80199d6:	4603      	mov	r3, r0
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3720      	adds	r7, #32
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}
 80199e0:	08023c64 	.word	0x08023c64
 80199e4:	08023db4 	.word	0x08023db4
 80199e8:	08023cdc 	.word	0x08023cdc
 80199ec:	08023e04 	.word	0x08023e04
 80199f0:	08023da4 	.word	0x08023da4
 80199f4:	08024988 	.word	0x08024988
 80199f8:	20001170 	.word	0x20001170
 80199fc:	20001080 	.word	0x20001080

08019a00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b08c      	sub	sp, #48	; 0x30
 8019a04:	af02      	add	r7, sp, #8
 8019a06:	60f8      	str	r0, [r7, #12]
 8019a08:	60b9      	str	r1, [r7, #8]
 8019a0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	332a      	adds	r3, #42	; 0x2a
 8019a10:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019a12:	23ff      	movs	r3, #255	; 0xff
 8019a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	68f9      	ldr	r1, [r7, #12]
 8019a22:	4618      	mov	r0, r3
 8019a24:	f000 fe2a 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d10c      	bne.n	8019a48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019a2e:	68bb      	ldr	r3, [r7, #8]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019a36:	2be0      	cmp	r3, #224	; 0xe0
 8019a38:	d006      	beq.n	8019a48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d003      	beq.n	8019a48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d102      	bne.n	8019a4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019a48:	f06f 030f 	mvn.w	r3, #15
 8019a4c:	e102      	b.n	8019c54 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019a4e:	68fa      	ldr	r2, [r7, #12]
 8019a50:	2101      	movs	r1, #1
 8019a52:	68b8      	ldr	r0, [r7, #8]
 8019a54:	f7ff fb5c 	bl	8019110 <etharp_find_entry>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019a5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	da02      	bge.n	8019a6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019a64:	8a7b      	ldrh	r3, [r7, #18]
 8019a66:	b25b      	sxtb	r3, r3
 8019a68:	e0f4      	b.n	8019c54 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019a6a:	8a7b      	ldrh	r3, [r7, #18]
 8019a6c:	2b7e      	cmp	r3, #126	; 0x7e
 8019a6e:	d906      	bls.n	8019a7e <etharp_query+0x7e>
 8019a70:	4b7a      	ldr	r3, [pc, #488]	; (8019c5c <etharp_query+0x25c>)
 8019a72:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019a76:	497a      	ldr	r1, [pc, #488]	; (8019c60 <etharp_query+0x260>)
 8019a78:	487a      	ldr	r0, [pc, #488]	; (8019c64 <etharp_query+0x264>)
 8019a7a:	f002 faeb 	bl	801c054 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019a7e:	8a7b      	ldrh	r3, [r7, #18]
 8019a80:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019a82:	7c7a      	ldrb	r2, [r7, #17]
 8019a84:	4978      	ldr	r1, [pc, #480]	; (8019c68 <etharp_query+0x268>)
 8019a86:	4613      	mov	r3, r2
 8019a88:	005b      	lsls	r3, r3, #1
 8019a8a:	4413      	add	r3, r2
 8019a8c:	00db      	lsls	r3, r3, #3
 8019a8e:	440b      	add	r3, r1
 8019a90:	3314      	adds	r3, #20
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d115      	bne.n	8019ac4 <etharp_query+0xc4>
    is_new_entry = 1;
 8019a98:	2301      	movs	r3, #1
 8019a9a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019a9c:	7c7a      	ldrb	r2, [r7, #17]
 8019a9e:	4972      	ldr	r1, [pc, #456]	; (8019c68 <etharp_query+0x268>)
 8019aa0:	4613      	mov	r3, r2
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	4413      	add	r3, r2
 8019aa6:	00db      	lsls	r3, r3, #3
 8019aa8:	440b      	add	r3, r1
 8019aaa:	3314      	adds	r3, #20
 8019aac:	2201      	movs	r2, #1
 8019aae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019ab0:	7c7a      	ldrb	r2, [r7, #17]
 8019ab2:	496d      	ldr	r1, [pc, #436]	; (8019c68 <etharp_query+0x268>)
 8019ab4:	4613      	mov	r3, r2
 8019ab6:	005b      	lsls	r3, r3, #1
 8019ab8:	4413      	add	r3, r2
 8019aba:	00db      	lsls	r3, r3, #3
 8019abc:	440b      	add	r3, r1
 8019abe:	3308      	adds	r3, #8
 8019ac0:	68fa      	ldr	r2, [r7, #12]
 8019ac2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019ac4:	7c7a      	ldrb	r2, [r7, #17]
 8019ac6:	4968      	ldr	r1, [pc, #416]	; (8019c68 <etharp_query+0x268>)
 8019ac8:	4613      	mov	r3, r2
 8019aca:	005b      	lsls	r3, r3, #1
 8019acc:	4413      	add	r3, r2
 8019ace:	00db      	lsls	r3, r3, #3
 8019ad0:	440b      	add	r3, r1
 8019ad2:	3314      	adds	r3, #20
 8019ad4:	781b      	ldrb	r3, [r3, #0]
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	d011      	beq.n	8019afe <etharp_query+0xfe>
 8019ada:	7c7a      	ldrb	r2, [r7, #17]
 8019adc:	4962      	ldr	r1, [pc, #392]	; (8019c68 <etharp_query+0x268>)
 8019ade:	4613      	mov	r3, r2
 8019ae0:	005b      	lsls	r3, r3, #1
 8019ae2:	4413      	add	r3, r2
 8019ae4:	00db      	lsls	r3, r3, #3
 8019ae6:	440b      	add	r3, r1
 8019ae8:	3314      	adds	r3, #20
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	2b01      	cmp	r3, #1
 8019aee:	d806      	bhi.n	8019afe <etharp_query+0xfe>
 8019af0:	4b5a      	ldr	r3, [pc, #360]	; (8019c5c <etharp_query+0x25c>)
 8019af2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019af6:	495d      	ldr	r1, [pc, #372]	; (8019c6c <etharp_query+0x26c>)
 8019af8:	485a      	ldr	r0, [pc, #360]	; (8019c64 <etharp_query+0x264>)
 8019afa:	f002 faab 	bl	801c054 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019afe:	6a3b      	ldr	r3, [r7, #32]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d102      	bne.n	8019b0a <etharp_query+0x10a>
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d10c      	bne.n	8019b24 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019b0a:	68b9      	ldr	r1, [r7, #8]
 8019b0c:	68f8      	ldr	r0, [r7, #12]
 8019b0e:	f000 f963 	bl	8019dd8 <etharp_request>
 8019b12:	4603      	mov	r3, r0
 8019b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d102      	bne.n	8019b24 <etharp_query+0x124>
      return result;
 8019b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019b22:	e097      	b.n	8019c54 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d106      	bne.n	8019b38 <etharp_query+0x138>
 8019b2a:	4b4c      	ldr	r3, [pc, #304]	; (8019c5c <etharp_query+0x25c>)
 8019b2c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019b30:	494f      	ldr	r1, [pc, #316]	; (8019c70 <etharp_query+0x270>)
 8019b32:	484c      	ldr	r0, [pc, #304]	; (8019c64 <etharp_query+0x264>)
 8019b34:	f002 fa8e 	bl	801c054 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019b38:	7c7a      	ldrb	r2, [r7, #17]
 8019b3a:	494b      	ldr	r1, [pc, #300]	; (8019c68 <etharp_query+0x268>)
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	005b      	lsls	r3, r3, #1
 8019b40:	4413      	add	r3, r2
 8019b42:	00db      	lsls	r3, r3, #3
 8019b44:	440b      	add	r3, r1
 8019b46:	3314      	adds	r3, #20
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	d918      	bls.n	8019b80 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019b4e:	4a49      	ldr	r2, [pc, #292]	; (8019c74 <etharp_query+0x274>)
 8019b50:	7c7b      	ldrb	r3, [r7, #17]
 8019b52:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019b54:	7c7a      	ldrb	r2, [r7, #17]
 8019b56:	4613      	mov	r3, r2
 8019b58:	005b      	lsls	r3, r3, #1
 8019b5a:	4413      	add	r3, r2
 8019b5c:	00db      	lsls	r3, r3, #3
 8019b5e:	3308      	adds	r3, #8
 8019b60:	4a41      	ldr	r2, [pc, #260]	; (8019c68 <etharp_query+0x268>)
 8019b62:	4413      	add	r3, r2
 8019b64:	1d1a      	adds	r2, r3, #4
 8019b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019b6a:	9300      	str	r3, [sp, #0]
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	697a      	ldr	r2, [r7, #20]
 8019b70:	6879      	ldr	r1, [r7, #4]
 8019b72:	68f8      	ldr	r0, [r7, #12]
 8019b74:	f001 fc86 	bl	801b484 <ethernet_output>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b7e:	e067      	b.n	8019c50 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019b80:	7c7a      	ldrb	r2, [r7, #17]
 8019b82:	4939      	ldr	r1, [pc, #228]	; (8019c68 <etharp_query+0x268>)
 8019b84:	4613      	mov	r3, r2
 8019b86:	005b      	lsls	r3, r3, #1
 8019b88:	4413      	add	r3, r2
 8019b8a:	00db      	lsls	r3, r3, #3
 8019b8c:	440b      	add	r3, r1
 8019b8e:	3314      	adds	r3, #20
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	2b01      	cmp	r3, #1
 8019b94:	d15c      	bne.n	8019c50 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019b96:	2300      	movs	r3, #0
 8019b98:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019b9e:	e01c      	b.n	8019bda <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019ba0:	69fb      	ldr	r3, [r7, #28]
 8019ba2:	895a      	ldrh	r2, [r3, #10]
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	891b      	ldrh	r3, [r3, #8]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d10a      	bne.n	8019bc2 <etharp_query+0x1c2>
 8019bac:	69fb      	ldr	r3, [r7, #28]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d006      	beq.n	8019bc2 <etharp_query+0x1c2>
 8019bb4:	4b29      	ldr	r3, [pc, #164]	; (8019c5c <etharp_query+0x25c>)
 8019bb6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019bba:	492f      	ldr	r1, [pc, #188]	; (8019c78 <etharp_query+0x278>)
 8019bbc:	4829      	ldr	r0, [pc, #164]	; (8019c64 <etharp_query+0x264>)
 8019bbe:	f002 fa49 	bl	801c054 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019bc2:	69fb      	ldr	r3, [r7, #28]
 8019bc4:	7b1b      	ldrb	r3, [r3, #12]
 8019bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d002      	beq.n	8019bd4 <etharp_query+0x1d4>
        copy_needed = 1;
 8019bce:	2301      	movs	r3, #1
 8019bd0:	61bb      	str	r3, [r7, #24]
        break;
 8019bd2:	e005      	b.n	8019be0 <etharp_query+0x1e0>
      }
      p = p->next;
 8019bd4:	69fb      	ldr	r3, [r7, #28]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019bda:	69fb      	ldr	r3, [r7, #28]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d1df      	bne.n	8019ba0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8019be0:	69bb      	ldr	r3, [r7, #24]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d007      	beq.n	8019bf6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019bec:	200e      	movs	r0, #14
 8019bee:	f7f7 fc15 	bl	801141c <pbuf_clone>
 8019bf2:	61f8      	str	r0, [r7, #28]
 8019bf4:	e004      	b.n	8019c00 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019bfa:	69f8      	ldr	r0, [r7, #28]
 8019bfc:	f7f7 fa42 	bl	8011084 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019c00:	69fb      	ldr	r3, [r7, #28]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d021      	beq.n	8019c4a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019c06:	7c7a      	ldrb	r2, [r7, #17]
 8019c08:	4917      	ldr	r1, [pc, #92]	; (8019c68 <etharp_query+0x268>)
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	005b      	lsls	r3, r3, #1
 8019c0e:	4413      	add	r3, r2
 8019c10:	00db      	lsls	r3, r3, #3
 8019c12:	440b      	add	r3, r1
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d00a      	beq.n	8019c30 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019c1a:	7c7a      	ldrb	r2, [r7, #17]
 8019c1c:	4912      	ldr	r1, [pc, #72]	; (8019c68 <etharp_query+0x268>)
 8019c1e:	4613      	mov	r3, r2
 8019c20:	005b      	lsls	r3, r3, #1
 8019c22:	4413      	add	r3, r2
 8019c24:	00db      	lsls	r3, r3, #3
 8019c26:	440b      	add	r3, r1
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7f7 f98a 	bl	8010f44 <pbuf_free>
      }
      arp_table[i].q = p;
 8019c30:	7c7a      	ldrb	r2, [r7, #17]
 8019c32:	490d      	ldr	r1, [pc, #52]	; (8019c68 <etharp_query+0x268>)
 8019c34:	4613      	mov	r3, r2
 8019c36:	005b      	lsls	r3, r3, #1
 8019c38:	4413      	add	r3, r2
 8019c3a:	00db      	lsls	r3, r3, #3
 8019c3c:	440b      	add	r3, r1
 8019c3e:	69fa      	ldr	r2, [r7, #28]
 8019c40:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019c42:	2300      	movs	r3, #0
 8019c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c48:	e002      	b.n	8019c50 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019c4a:	23ff      	movs	r3, #255	; 0xff
 8019c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3728      	adds	r7, #40	; 0x28
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	08023c64 	.word	0x08023c64
 8019c60:	08023e10 	.word	0x08023e10
 8019c64:	08023cdc 	.word	0x08023cdc
 8019c68:	20001080 	.word	0x20001080
 8019c6c:	08023e20 	.word	0x08023e20
 8019c70:	08023e04 	.word	0x08023e04
 8019c74:	20001170 	.word	0x20001170
 8019c78:	08023e48 	.word	0x08023e48

08019c7c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b08a      	sub	sp, #40	; 0x28
 8019c80:	af02      	add	r7, sp, #8
 8019c82:	60f8      	str	r0, [r7, #12]
 8019c84:	60b9      	str	r1, [r7, #8]
 8019c86:	607a      	str	r2, [r7, #4]
 8019c88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d106      	bne.n	8019ca2 <etharp_raw+0x26>
 8019c94:	4b3a      	ldr	r3, [pc, #232]	; (8019d80 <etharp_raw+0x104>)
 8019c96:	f240 4257 	movw	r2, #1111	; 0x457
 8019c9a:	493a      	ldr	r1, [pc, #232]	; (8019d84 <etharp_raw+0x108>)
 8019c9c:	483a      	ldr	r0, [pc, #232]	; (8019d88 <etharp_raw+0x10c>)
 8019c9e:	f002 f9d9 	bl	801c054 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019ca2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019ca6:	211c      	movs	r1, #28
 8019ca8:	200e      	movs	r0, #14
 8019caa:	f7f6 fe6b 	bl	8010984 <pbuf_alloc>
 8019cae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019cb0:	69bb      	ldr	r3, [r7, #24]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d102      	bne.n	8019cbc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8019cba:	e05d      	b.n	8019d78 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019cbc:	69bb      	ldr	r3, [r7, #24]
 8019cbe:	895b      	ldrh	r3, [r3, #10]
 8019cc0:	2b1b      	cmp	r3, #27
 8019cc2:	d806      	bhi.n	8019cd2 <etharp_raw+0x56>
 8019cc4:	4b2e      	ldr	r3, [pc, #184]	; (8019d80 <etharp_raw+0x104>)
 8019cc6:	f240 4263 	movw	r2, #1123	; 0x463
 8019cca:	4930      	ldr	r1, [pc, #192]	; (8019d8c <etharp_raw+0x110>)
 8019ccc:	482e      	ldr	r0, [pc, #184]	; (8019d88 <etharp_raw+0x10c>)
 8019cce:	f002 f9c1 	bl	801c054 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019cd2:	69bb      	ldr	r3, [r7, #24]
 8019cd4:	685b      	ldr	r3, [r3, #4]
 8019cd6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019cd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019cda:	4618      	mov	r0, r3
 8019cdc:	f7f5 fe9a 	bl	800fa14 <lwip_htons>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019cee:	2b06      	cmp	r3, #6
 8019cf0:	d006      	beq.n	8019d00 <etharp_raw+0x84>
 8019cf2:	4b23      	ldr	r3, [pc, #140]	; (8019d80 <etharp_raw+0x104>)
 8019cf4:	f240 426a 	movw	r2, #1130	; 0x46a
 8019cf8:	4925      	ldr	r1, [pc, #148]	; (8019d90 <etharp_raw+0x114>)
 8019cfa:	4823      	ldr	r0, [pc, #140]	; (8019d88 <etharp_raw+0x10c>)
 8019cfc:	f002 f9aa 	bl	801c054 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	3308      	adds	r3, #8
 8019d04:	2206      	movs	r2, #6
 8019d06:	6839      	ldr	r1, [r7, #0]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f001 fc72 	bl	801b5f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	3312      	adds	r3, #18
 8019d12:	2206      	movs	r2, #6
 8019d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019d16:	4618      	mov	r0, r3
 8019d18:	f001 fc6b 	bl	801b5f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	330e      	adds	r3, #14
 8019d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d22:	6812      	ldr	r2, [r2, #0]
 8019d24:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	3318      	adds	r3, #24
 8019d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d2c:	6812      	ldr	r2, [r2, #0]
 8019d2e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	2200      	movs	r2, #0
 8019d34:	701a      	strb	r2, [r3, #0]
 8019d36:	2200      	movs	r2, #0
 8019d38:	f042 0201 	orr.w	r2, r2, #1
 8019d3c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019d3e:	697b      	ldr	r3, [r7, #20]
 8019d40:	2200      	movs	r2, #0
 8019d42:	f042 0208 	orr.w	r2, r2, #8
 8019d46:	709a      	strb	r2, [r3, #2]
 8019d48:	2200      	movs	r2, #0
 8019d4a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	2206      	movs	r2, #6
 8019d50:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	2204      	movs	r2, #4
 8019d56:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019d58:	f640 0306 	movw	r3, #2054	; 0x806
 8019d5c:	9300      	str	r3, [sp, #0]
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	68ba      	ldr	r2, [r7, #8]
 8019d62:	69b9      	ldr	r1, [r7, #24]
 8019d64:	68f8      	ldr	r0, [r7, #12]
 8019d66:	f001 fb8d 	bl	801b484 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019d6a:	69b8      	ldr	r0, [r7, #24]
 8019d6c:	f7f7 f8ea 	bl	8010f44 <pbuf_free>
  p = NULL;
 8019d70:	2300      	movs	r3, #0
 8019d72:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3720      	adds	r7, #32
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}
 8019d80:	08023c64 	.word	0x08023c64
 8019d84:	08023db4 	.word	0x08023db4
 8019d88:	08023cdc 	.word	0x08023cdc
 8019d8c:	08023e64 	.word	0x08023e64
 8019d90:	08023e98 	.word	0x08023e98

08019d94 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b088      	sub	sp, #32
 8019d98:	af04      	add	r7, sp, #16
 8019d9a:	60f8      	str	r0, [r7, #12]
 8019d9c:	60b9      	str	r1, [r7, #8]
 8019d9e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019db0:	2201      	movs	r2, #1
 8019db2:	9203      	str	r2, [sp, #12]
 8019db4:	68ba      	ldr	r2, [r7, #8]
 8019db6:	9202      	str	r2, [sp, #8]
 8019db8:	4a06      	ldr	r2, [pc, #24]	; (8019dd4 <etharp_request_dst+0x40>)
 8019dba:	9201      	str	r2, [sp, #4]
 8019dbc:	9300      	str	r3, [sp, #0]
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	68f8      	ldr	r0, [r7, #12]
 8019dc4:	f7ff ff5a 	bl	8019c7c <etharp_raw>
 8019dc8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3710      	adds	r7, #16
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bd80      	pop	{r7, pc}
 8019dd2:	bf00      	nop
 8019dd4:	08024990 	.word	0x08024990

08019dd8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b082      	sub	sp, #8
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019de2:	4a05      	ldr	r2, [pc, #20]	; (8019df8 <etharp_request+0x20>)
 8019de4:	6839      	ldr	r1, [r7, #0]
 8019de6:	6878      	ldr	r0, [r7, #4]
 8019de8:	f7ff ffd4 	bl	8019d94 <etharp_request_dst>
 8019dec:	4603      	mov	r3, r0
}
 8019dee:	4618      	mov	r0, r3
 8019df0:	3708      	adds	r7, #8
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}
 8019df6:	bf00      	nop
 8019df8:	08024988 	.word	0x08024988

08019dfc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b08e      	sub	sp, #56	; 0x38
 8019e00:	af04      	add	r7, sp, #16
 8019e02:	6078      	str	r0, [r7, #4]
 8019e04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019e06:	4b79      	ldr	r3, [pc, #484]	; (8019fec <icmp_input+0x1f0>)
 8019e08:	689b      	ldr	r3, [r3, #8]
 8019e0a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	f003 030f 	and.w	r3, r3, #15
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	009b      	lsls	r3, r3, #2
 8019e18:	b2db      	uxtb	r3, r3
 8019e1a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e1e:	2b13      	cmp	r3, #19
 8019e20:	f240 80cd 	bls.w	8019fbe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	895b      	ldrh	r3, [r3, #10]
 8019e28:	2b03      	cmp	r3, #3
 8019e2a:	f240 80ca 	bls.w	8019fc2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019e38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	f000 80b7 	beq.w	8019fb0 <icmp_input+0x1b4>
 8019e42:	2b08      	cmp	r3, #8
 8019e44:	f040 80b7 	bne.w	8019fb6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019e48:	4b69      	ldr	r3, [pc, #420]	; (8019ff0 <icmp_input+0x1f4>)
 8019e4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019e4c:	4b67      	ldr	r3, [pc, #412]	; (8019fec <icmp_input+0x1f0>)
 8019e4e:	695b      	ldr	r3, [r3, #20]
 8019e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e54:	2be0      	cmp	r3, #224	; 0xe0
 8019e56:	f000 80bb 	beq.w	8019fd0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019e5a:	4b64      	ldr	r3, [pc, #400]	; (8019fec <icmp_input+0x1f0>)
 8019e5c:	695a      	ldr	r2, [r3, #20]
 8019e5e:	4b63      	ldr	r3, [pc, #396]	; (8019fec <icmp_input+0x1f0>)
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	4619      	mov	r1, r3
 8019e64:	4610      	mov	r0, r2
 8019e66:	f000 fc09 	bl	801a67c <ip4_addr_isbroadcast_u32>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	f040 80b1 	bne.w	8019fd4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	891b      	ldrh	r3, [r3, #8]
 8019e76:	2b07      	cmp	r3, #7
 8019e78:	f240 80a5 	bls.w	8019fc6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e7e:	330e      	adds	r3, #14
 8019e80:	4619      	mov	r1, r3
 8019e82:	6878      	ldr	r0, [r7, #4]
 8019e84:	f7f6 ffc8 	bl	8010e18 <pbuf_add_header>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d04b      	beq.n	8019f26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	891a      	ldrh	r2, [r3, #8]
 8019e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e94:	4413      	add	r3, r2
 8019e96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	891b      	ldrh	r3, [r3, #8]
 8019e9c:	8b7a      	ldrh	r2, [r7, #26]
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	f0c0 809a 	bcc.w	8019fd8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019ea4:	8b7b      	ldrh	r3, [r7, #26]
 8019ea6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019eaa:	4619      	mov	r1, r3
 8019eac:	200e      	movs	r0, #14
 8019eae:	f7f6 fd69 	bl	8010984 <pbuf_alloc>
 8019eb2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	f000 8090 	beq.w	8019fdc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	895b      	ldrh	r3, [r3, #10]
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ec4:	3308      	adds	r3, #8
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	d203      	bcs.n	8019ed2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019eca:	6978      	ldr	r0, [r7, #20]
 8019ecc:	f7f7 f83a 	bl	8010f44 <pbuf_free>
          goto icmperr;
 8019ed0:	e085      	b.n	8019fde <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019ed2:	697b      	ldr	r3, [r7, #20]
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019eda:	4618      	mov	r0, r3
 8019edc:	f001 fb89 	bl	801b5f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019ee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	6978      	ldr	r0, [r7, #20]
 8019ee6:	f7f6 ffa7 	bl	8010e38 <pbuf_remove_header>
 8019eea:	4603      	mov	r3, r0
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d009      	beq.n	8019f04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019ef0:	4b40      	ldr	r3, [pc, #256]	; (8019ff4 <icmp_input+0x1f8>)
 8019ef2:	22b6      	movs	r2, #182	; 0xb6
 8019ef4:	4940      	ldr	r1, [pc, #256]	; (8019ff8 <icmp_input+0x1fc>)
 8019ef6:	4841      	ldr	r0, [pc, #260]	; (8019ffc <icmp_input+0x200>)
 8019ef8:	f002 f8ac 	bl	801c054 <iprintf>
          pbuf_free(r);
 8019efc:	6978      	ldr	r0, [r7, #20]
 8019efe:	f7f7 f821 	bl	8010f44 <pbuf_free>
          goto icmperr;
 8019f02:	e06c      	b.n	8019fde <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019f04:	6879      	ldr	r1, [r7, #4]
 8019f06:	6978      	ldr	r0, [r7, #20]
 8019f08:	f7f7 f944 	bl	8011194 <pbuf_copy>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d003      	beq.n	8019f1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019f12:	6978      	ldr	r0, [r7, #20]
 8019f14:	f7f7 f816 	bl	8010f44 <pbuf_free>
          goto icmperr;
 8019f18:	e061      	b.n	8019fde <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019f1a:	6878      	ldr	r0, [r7, #4]
 8019f1c:	f7f7 f812 	bl	8010f44 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	607b      	str	r3, [r7, #4]
 8019f24:	e00f      	b.n	8019f46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f28:	330e      	adds	r3, #14
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f7f6 ff83 	bl	8010e38 <pbuf_remove_header>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d006      	beq.n	8019f46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019f38:	4b2e      	ldr	r3, [pc, #184]	; (8019ff4 <icmp_input+0x1f8>)
 8019f3a:	22c7      	movs	r2, #199	; 0xc7
 8019f3c:	4930      	ldr	r1, [pc, #192]	; (801a000 <icmp_input+0x204>)
 8019f3e:	482f      	ldr	r0, [pc, #188]	; (8019ffc <icmp_input+0x200>)
 8019f40:	f002 f888 	bl	801c054 <iprintf>
          goto icmperr;
 8019f44:	e04b      	b.n	8019fde <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	685b      	ldr	r3, [r3, #4]
 8019f4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f4e:	4619      	mov	r1, r3
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f7f6 ff61 	bl	8010e18 <pbuf_add_header>
 8019f56:	4603      	mov	r3, r0
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d12b      	bne.n	8019fb4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	685b      	ldr	r3, [r3, #4]
 8019f60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019f62:	69fb      	ldr	r3, [r7, #28]
 8019f64:	681a      	ldr	r2, [r3, #0]
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019f6a:	4b20      	ldr	r3, [pc, #128]	; (8019fec <icmp_input+0x1f0>)
 8019f6c:	691a      	ldr	r2, [r3, #16]
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019f72:	693b      	ldr	r3, [r7, #16]
 8019f74:	2200      	movs	r2, #0
 8019f76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	709a      	strb	r2, [r3, #2]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	22ff      	movs	r2, #255	; 0xff
 8019f86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	729a      	strb	r2, [r3, #10]
 8019f8e:	2200      	movs	r2, #0
 8019f90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	9302      	str	r3, [sp, #8]
 8019f96:	2301      	movs	r3, #1
 8019f98:	9301      	str	r3, [sp, #4]
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	23ff      	movs	r3, #255	; 0xff
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	69f9      	ldr	r1, [r7, #28]
 8019fa4:	6878      	ldr	r0, [r7, #4]
 8019fa6:	f000 fa91 	bl	801a4cc <ip4_output_if>
 8019faa:	4603      	mov	r3, r0
 8019fac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019fae:	e001      	b.n	8019fb4 <icmp_input+0x1b8>
      break;
 8019fb0:	bf00      	nop
 8019fb2:	e000      	b.n	8019fb6 <icmp_input+0x1ba>
      break;
 8019fb4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019fb6:	6878      	ldr	r0, [r7, #4]
 8019fb8:	f7f6 ffc4 	bl	8010f44 <pbuf_free>
  return;
 8019fbc:	e013      	b.n	8019fe6 <icmp_input+0x1ea>
    goto lenerr;
 8019fbe:	bf00      	nop
 8019fc0:	e002      	b.n	8019fc8 <icmp_input+0x1cc>
    goto lenerr;
 8019fc2:	bf00      	nop
 8019fc4:	e000      	b.n	8019fc8 <icmp_input+0x1cc>
        goto lenerr;
 8019fc6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f7f6 ffbb 	bl	8010f44 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019fce:	e00a      	b.n	8019fe6 <icmp_input+0x1ea>
        goto icmperr;
 8019fd0:	bf00      	nop
 8019fd2:	e004      	b.n	8019fde <icmp_input+0x1e2>
        goto icmperr;
 8019fd4:	bf00      	nop
 8019fd6:	e002      	b.n	8019fde <icmp_input+0x1e2>
          goto icmperr;
 8019fd8:	bf00      	nop
 8019fda:	e000      	b.n	8019fde <icmp_input+0x1e2>
          goto icmperr;
 8019fdc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019fde:	6878      	ldr	r0, [r7, #4]
 8019fe0:	f7f6 ffb0 	bl	8010f44 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019fe4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019fe6:	3728      	adds	r7, #40	; 0x28
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	200051a0 	.word	0x200051a0
 8019ff0:	200051b4 	.word	0x200051b4
 8019ff4:	08023edc 	.word	0x08023edc
 8019ff8:	08023f14 	.word	0x08023f14
 8019ffc:	08023f4c 	.word	0x08023f4c
 801a000:	08023f74 	.word	0x08023f74

0801a004 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	460b      	mov	r3, r1
 801a00e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a010:	78fb      	ldrb	r3, [r7, #3]
 801a012:	461a      	mov	r2, r3
 801a014:	2103      	movs	r1, #3
 801a016:	6878      	ldr	r0, [r7, #4]
 801a018:	f000 f814 	bl	801a044 <icmp_send_response>
}
 801a01c:	bf00      	nop
 801a01e:	3708      	adds	r7, #8
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b082      	sub	sp, #8
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	460b      	mov	r3, r1
 801a02e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a030:	78fb      	ldrb	r3, [r7, #3]
 801a032:	461a      	mov	r2, r3
 801a034:	210b      	movs	r1, #11
 801a036:	6878      	ldr	r0, [r7, #4]
 801a038:	f000 f804 	bl	801a044 <icmp_send_response>
}
 801a03c:	bf00      	nop
 801a03e:	3708      	adds	r7, #8
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}

0801a044 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b08c      	sub	sp, #48	; 0x30
 801a048:	af04      	add	r7, sp, #16
 801a04a:	6078      	str	r0, [r7, #4]
 801a04c:	460b      	mov	r3, r1
 801a04e:	70fb      	strb	r3, [r7, #3]
 801a050:	4613      	mov	r3, r2
 801a052:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a054:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a058:	2124      	movs	r1, #36	; 0x24
 801a05a:	2022      	movs	r0, #34	; 0x22
 801a05c:	f7f6 fc92 	bl	8010984 <pbuf_alloc>
 801a060:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a062:	69fb      	ldr	r3, [r7, #28]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d04c      	beq.n	801a102 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a068:	69fb      	ldr	r3, [r7, #28]
 801a06a:	895b      	ldrh	r3, [r3, #10]
 801a06c:	2b23      	cmp	r3, #35	; 0x23
 801a06e:	d806      	bhi.n	801a07e <icmp_send_response+0x3a>
 801a070:	4b26      	ldr	r3, [pc, #152]	; (801a10c <icmp_send_response+0xc8>)
 801a072:	f240 1269 	movw	r2, #361	; 0x169
 801a076:	4926      	ldr	r1, [pc, #152]	; (801a110 <icmp_send_response+0xcc>)
 801a078:	4826      	ldr	r0, [pc, #152]	; (801a114 <icmp_send_response+0xd0>)
 801a07a:	f001 ffeb 	bl	801c054 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	685b      	ldr	r3, [r3, #4]
 801a082:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a084:	69fb      	ldr	r3, [r7, #28]
 801a086:	685b      	ldr	r3, [r3, #4]
 801a088:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a08a:	697b      	ldr	r3, [r7, #20]
 801a08c:	78fa      	ldrb	r2, [r7, #3]
 801a08e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a090:	697b      	ldr	r3, [r7, #20]
 801a092:	78ba      	ldrb	r2, [r7, #2]
 801a094:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a096:	697b      	ldr	r3, [r7, #20]
 801a098:	2200      	movs	r2, #0
 801a09a:	711a      	strb	r2, [r3, #4]
 801a09c:	2200      	movs	r2, #0
 801a09e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a0a0:	697b      	ldr	r3, [r7, #20]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	719a      	strb	r2, [r3, #6]
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	685b      	ldr	r3, [r3, #4]
 801a0ae:	f103 0008 	add.w	r0, r3, #8
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	685b      	ldr	r3, [r3, #4]
 801a0b6:	221c      	movs	r2, #28
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	f001 fa9a 	bl	801b5f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a0be:	69bb      	ldr	r3, [r7, #24]
 801a0c0:	68db      	ldr	r3, [r3, #12]
 801a0c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a0c4:	f107 030c 	add.w	r3, r7, #12
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f000 f825 	bl	801a118 <ip4_route>
 801a0ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d011      	beq.n	801a0fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	2200      	movs	r2, #0
 801a0da:	709a      	strb	r2, [r3, #2]
 801a0dc:	2200      	movs	r2, #0
 801a0de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a0e0:	f107 020c 	add.w	r2, r7, #12
 801a0e4:	693b      	ldr	r3, [r7, #16]
 801a0e6:	9302      	str	r3, [sp, #8]
 801a0e8:	2301      	movs	r3, #1
 801a0ea:	9301      	str	r3, [sp, #4]
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	9300      	str	r3, [sp, #0]
 801a0f0:	23ff      	movs	r3, #255	; 0xff
 801a0f2:	2100      	movs	r1, #0
 801a0f4:	69f8      	ldr	r0, [r7, #28]
 801a0f6:	f000 f9e9 	bl	801a4cc <ip4_output_if>
  }
  pbuf_free(q);
 801a0fa:	69f8      	ldr	r0, [r7, #28]
 801a0fc:	f7f6 ff22 	bl	8010f44 <pbuf_free>
 801a100:	e000      	b.n	801a104 <icmp_send_response+0xc0>
    return;
 801a102:	bf00      	nop
}
 801a104:	3720      	adds	r7, #32
 801a106:	46bd      	mov	sp, r7
 801a108:	bd80      	pop	{r7, pc}
 801a10a:	bf00      	nop
 801a10c:	08023edc 	.word	0x08023edc
 801a110:	08023fa8 	.word	0x08023fa8
 801a114:	08023f4c 	.word	0x08023f4c

0801a118 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a118:	b480      	push	{r7}
 801a11a:	b085      	sub	sp, #20
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a120:	4b33      	ldr	r3, [pc, #204]	; (801a1f0 <ip4_route+0xd8>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	60fb      	str	r3, [r7, #12]
 801a126:	e036      	b.n	801a196 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a12e:	f003 0301 	and.w	r3, r3, #1
 801a132:	b2db      	uxtb	r3, r3
 801a134:	2b00      	cmp	r3, #0
 801a136:	d02b      	beq.n	801a190 <ip4_route+0x78>
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a13e:	089b      	lsrs	r3, r3, #2
 801a140:	f003 0301 	and.w	r3, r3, #1
 801a144:	b2db      	uxtb	r3, r3
 801a146:	2b00      	cmp	r3, #0
 801a148:	d022      	beq.n	801a190 <ip4_route+0x78>
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	3304      	adds	r3, #4
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d01d      	beq.n	801a190 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681a      	ldr	r2, [r3, #0]
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	3304      	adds	r3, #4
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	405a      	eors	r2, r3
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	3308      	adds	r3, #8
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4013      	ands	r3, r2
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d101      	bne.n	801a170 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	e038      	b.n	801a1e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a176:	f003 0302 	and.w	r3, r3, #2
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d108      	bne.n	801a190 <ip4_route+0x78>
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681a      	ldr	r2, [r3, #0]
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	330c      	adds	r3, #12
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	429a      	cmp	r2, r3
 801a18a:	d101      	bne.n	801a190 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	e028      	b.n	801a1e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	60fb      	str	r3, [r7, #12]
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d1c5      	bne.n	801a128 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a19c:	4b15      	ldr	r3, [pc, #84]	; (801a1f4 <ip4_route+0xdc>)
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d01a      	beq.n	801a1da <ip4_route+0xc2>
 801a1a4:	4b13      	ldr	r3, [pc, #76]	; (801a1f4 <ip4_route+0xdc>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1ac:	f003 0301 	and.w	r3, r3, #1
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d012      	beq.n	801a1da <ip4_route+0xc2>
 801a1b4:	4b0f      	ldr	r3, [pc, #60]	; (801a1f4 <ip4_route+0xdc>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1bc:	f003 0304 	and.w	r3, r3, #4
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d00a      	beq.n	801a1da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a1c4:	4b0b      	ldr	r3, [pc, #44]	; (801a1f4 <ip4_route+0xdc>)
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	3304      	adds	r3, #4
 801a1ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d004      	beq.n	801a1da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	b2db      	uxtb	r3, r3
 801a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 801a1d8:	d101      	bne.n	801a1de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	e001      	b.n	801a1e2 <ip4_route+0xca>
  }

  return netif_default;
 801a1de:	4b05      	ldr	r3, [pc, #20]	; (801a1f4 <ip4_route+0xdc>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3714      	adds	r7, #20
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ec:	4770      	bx	lr
 801a1ee:	bf00      	nop
 801a1f0:	200082b4 	.word	0x200082b4
 801a1f4:	200082b8 	.word	0x200082b8

0801a1f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a206:	f003 0301 	and.w	r3, r3, #1
 801a20a:	b2db      	uxtb	r3, r3
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d016      	beq.n	801a23e <ip4_input_accept+0x46>
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	3304      	adds	r3, #4
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d011      	beq.n	801a23e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a21a:	4b0b      	ldr	r3, [pc, #44]	; (801a248 <ip4_input_accept+0x50>)
 801a21c:	695a      	ldr	r2, [r3, #20]
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	3304      	adds	r3, #4
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	429a      	cmp	r2, r3
 801a226:	d008      	beq.n	801a23a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a228:	4b07      	ldr	r3, [pc, #28]	; (801a248 <ip4_input_accept+0x50>)
 801a22a:	695b      	ldr	r3, [r3, #20]
 801a22c:	6879      	ldr	r1, [r7, #4]
 801a22e:	4618      	mov	r0, r3
 801a230:	f000 fa24 	bl	801a67c <ip4_addr_isbroadcast_u32>
 801a234:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a236:	2b00      	cmp	r3, #0
 801a238:	d001      	beq.n	801a23e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a23a:	2301      	movs	r3, #1
 801a23c:	e000      	b.n	801a240 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a23e:	2300      	movs	r3, #0
}
 801a240:	4618      	mov	r0, r3
 801a242:	3708      	adds	r7, #8
 801a244:	46bd      	mov	sp, r7
 801a246:	bd80      	pop	{r7, pc}
 801a248:	200051a0 	.word	0x200051a0

0801a24c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b088      	sub	sp, #32
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a256:	2301      	movs	r3, #1
 801a258:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	685b      	ldr	r3, [r3, #4]
 801a25e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	781b      	ldrb	r3, [r3, #0]
 801a264:	091b      	lsrs	r3, r3, #4
 801a266:	b2db      	uxtb	r3, r3
 801a268:	2b04      	cmp	r3, #4
 801a26a:	d004      	beq.n	801a276 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a26c:	6878      	ldr	r0, [r7, #4]
 801a26e:	f7f6 fe69 	bl	8010f44 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a272:	2300      	movs	r3, #0
 801a274:	e121      	b.n	801a4ba <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a276:	69fb      	ldr	r3, [r7, #28]
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	f003 030f 	and.w	r3, r3, #15
 801a27e:	b2db      	uxtb	r3, r3
 801a280:	009b      	lsls	r3, r3, #2
 801a282:	b2db      	uxtb	r3, r3
 801a284:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a286:	69fb      	ldr	r3, [r7, #28]
 801a288:	885b      	ldrh	r3, [r3, #2]
 801a28a:	b29b      	uxth	r3, r3
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7f5 fbc1 	bl	800fa14 <lwip_htons>
 801a292:	4603      	mov	r3, r0
 801a294:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	891b      	ldrh	r3, [r3, #8]
 801a29a:	8a3a      	ldrh	r2, [r7, #16]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d204      	bcs.n	801a2aa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a2a0:	8a3b      	ldrh	r3, [r7, #16]
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	f7f6 fcc7 	bl	8010c38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	895b      	ldrh	r3, [r3, #10]
 801a2ae:	8a7a      	ldrh	r2, [r7, #18]
 801a2b0:	429a      	cmp	r2, r3
 801a2b2:	d807      	bhi.n	801a2c4 <ip4_input+0x78>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	891b      	ldrh	r3, [r3, #8]
 801a2b8:	8a3a      	ldrh	r2, [r7, #16]
 801a2ba:	429a      	cmp	r2, r3
 801a2bc:	d802      	bhi.n	801a2c4 <ip4_input+0x78>
 801a2be:	8a7b      	ldrh	r3, [r7, #18]
 801a2c0:	2b13      	cmp	r3, #19
 801a2c2:	d804      	bhi.n	801a2ce <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	f7f6 fe3d 	bl	8010f44 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	e0f5      	b.n	801a4ba <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a2ce:	69fb      	ldr	r3, [r7, #28]
 801a2d0:	691b      	ldr	r3, [r3, #16]
 801a2d2:	4a7c      	ldr	r2, [pc, #496]	; (801a4c4 <ip4_input+0x278>)
 801a2d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a2d6:	69fb      	ldr	r3, [r7, #28]
 801a2d8:	68db      	ldr	r3, [r3, #12]
 801a2da:	4a7a      	ldr	r2, [pc, #488]	; (801a4c4 <ip4_input+0x278>)
 801a2dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a2de:	4b79      	ldr	r3, [pc, #484]	; (801a4c4 <ip4_input+0x278>)
 801a2e0:	695b      	ldr	r3, [r3, #20]
 801a2e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a2e6:	2be0      	cmp	r3, #224	; 0xe0
 801a2e8:	d112      	bne.n	801a310 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a2ea:	683b      	ldr	r3, [r7, #0]
 801a2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a2f0:	f003 0301 	and.w	r3, r3, #1
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d007      	beq.n	801a30a <ip4_input+0xbe>
 801a2fa:	683b      	ldr	r3, [r7, #0]
 801a2fc:	3304      	adds	r3, #4
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d002      	beq.n	801a30a <ip4_input+0xbe>
      netif = inp;
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	61bb      	str	r3, [r7, #24]
 801a308:	e02a      	b.n	801a360 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a30a:	2300      	movs	r3, #0
 801a30c:	61bb      	str	r3, [r7, #24]
 801a30e:	e027      	b.n	801a360 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a310:	6838      	ldr	r0, [r7, #0]
 801a312:	f7ff ff71 	bl	801a1f8 <ip4_input_accept>
 801a316:	4603      	mov	r3, r0
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d002      	beq.n	801a322 <ip4_input+0xd6>
      netif = inp;
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	61bb      	str	r3, [r7, #24]
 801a320:	e01e      	b.n	801a360 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a322:	2300      	movs	r3, #0
 801a324:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a326:	4b67      	ldr	r3, [pc, #412]	; (801a4c4 <ip4_input+0x278>)
 801a328:	695b      	ldr	r3, [r3, #20]
 801a32a:	b2db      	uxtb	r3, r3
 801a32c:	2b7f      	cmp	r3, #127	; 0x7f
 801a32e:	d017      	beq.n	801a360 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a330:	4b65      	ldr	r3, [pc, #404]	; (801a4c8 <ip4_input+0x27c>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	61bb      	str	r3, [r7, #24]
 801a336:	e00e      	b.n	801a356 <ip4_input+0x10a>
          if (netif == inp) {
 801a338:	69ba      	ldr	r2, [r7, #24]
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d006      	beq.n	801a34e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a340:	69b8      	ldr	r0, [r7, #24]
 801a342:	f7ff ff59 	bl	801a1f8 <ip4_input_accept>
 801a346:	4603      	mov	r3, r0
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d108      	bne.n	801a35e <ip4_input+0x112>
 801a34c:	e000      	b.n	801a350 <ip4_input+0x104>
            continue;
 801a34e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a350:	69bb      	ldr	r3, [r7, #24]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	61bb      	str	r3, [r7, #24]
 801a356:	69bb      	ldr	r3, [r7, #24]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d1ed      	bne.n	801a338 <ip4_input+0xec>
 801a35c:	e000      	b.n	801a360 <ip4_input+0x114>
            break;
 801a35e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a360:	69bb      	ldr	r3, [r7, #24]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d111      	bne.n	801a38a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a366:	69fb      	ldr	r3, [r7, #28]
 801a368:	7a5b      	ldrb	r3, [r3, #9]
 801a36a:	2b11      	cmp	r3, #17
 801a36c:	d10d      	bne.n	801a38a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a36e:	8a7b      	ldrh	r3, [r7, #18]
 801a370:	69fa      	ldr	r2, [r7, #28]
 801a372:	4413      	add	r3, r2
 801a374:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	885b      	ldrh	r3, [r3, #2]
 801a37a:	b29b      	uxth	r3, r3
 801a37c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a380:	d103      	bne.n	801a38a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a386:	2300      	movs	r3, #0
 801a388:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d017      	beq.n	801a3c0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a390:	4b4c      	ldr	r3, [pc, #304]	; (801a4c4 <ip4_input+0x278>)
 801a392:	691b      	ldr	r3, [r3, #16]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d013      	beq.n	801a3c0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a398:	4b4a      	ldr	r3, [pc, #296]	; (801a4c4 <ip4_input+0x278>)
 801a39a:	691b      	ldr	r3, [r3, #16]
 801a39c:	6839      	ldr	r1, [r7, #0]
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f000 f96c 	bl	801a67c <ip4_addr_isbroadcast_u32>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d105      	bne.n	801a3b6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a3aa:	4b46      	ldr	r3, [pc, #280]	; (801a4c4 <ip4_input+0x278>)
 801a3ac:	691b      	ldr	r3, [r3, #16]
 801a3ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a3b2:	2be0      	cmp	r3, #224	; 0xe0
 801a3b4:	d104      	bne.n	801a3c0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a3b6:	6878      	ldr	r0, [r7, #4]
 801a3b8:	f7f6 fdc4 	bl	8010f44 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a3bc:	2300      	movs	r3, #0
 801a3be:	e07c      	b.n	801a4ba <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a3c0:	69bb      	ldr	r3, [r7, #24]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d104      	bne.n	801a3d0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a3c6:	6878      	ldr	r0, [r7, #4]
 801a3c8:	f7f6 fdbc 	bl	8010f44 <pbuf_free>
    return ERR_OK;
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	e074      	b.n	801a4ba <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	88db      	ldrh	r3, [r3, #6]
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a3dc:	4013      	ands	r3, r2
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d00b      	beq.n	801a3fa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f000 fc90 	bl	801ad08 <ip4_reass>
 801a3e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d101      	bne.n	801a3f4 <ip4_input+0x1a8>
      return ERR_OK;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	e062      	b.n	801a4ba <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a3fa:	4a32      	ldr	r2, [pc, #200]	; (801a4c4 <ip4_input+0x278>)
 801a3fc:	69bb      	ldr	r3, [r7, #24]
 801a3fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a400:	4a30      	ldr	r2, [pc, #192]	; (801a4c4 <ip4_input+0x278>)
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a406:	4a2f      	ldr	r2, [pc, #188]	; (801a4c4 <ip4_input+0x278>)
 801a408:	69fb      	ldr	r3, [r7, #28]
 801a40a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a40c:	69fb      	ldr	r3, [r7, #28]
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	f003 030f 	and.w	r3, r3, #15
 801a414:	b2db      	uxtb	r3, r3
 801a416:	009b      	lsls	r3, r3, #2
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	4b29      	ldr	r3, [pc, #164]	; (801a4c4 <ip4_input+0x278>)
 801a41e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a420:	8a7b      	ldrh	r3, [r7, #18]
 801a422:	4619      	mov	r1, r3
 801a424:	6878      	ldr	r0, [r7, #4]
 801a426:	f7f6 fd07 	bl	8010e38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	7a5b      	ldrb	r3, [r3, #9]
 801a42e:	2b06      	cmp	r3, #6
 801a430:	d009      	beq.n	801a446 <ip4_input+0x1fa>
 801a432:	2b11      	cmp	r3, #17
 801a434:	d002      	beq.n	801a43c <ip4_input+0x1f0>
 801a436:	2b01      	cmp	r3, #1
 801a438:	d00a      	beq.n	801a450 <ip4_input+0x204>
 801a43a:	e00e      	b.n	801a45a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a43c:	6839      	ldr	r1, [r7, #0]
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	f7fc fb2a 	bl	8016a98 <udp_input>
        break;
 801a444:	e026      	b.n	801a494 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a446:	6839      	ldr	r1, [r7, #0]
 801a448:	6878      	ldr	r0, [r7, #4]
 801a44a:	f7f8 fba7 	bl	8012b9c <tcp_input>
        break;
 801a44e:	e021      	b.n	801a494 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a450:	6839      	ldr	r1, [r7, #0]
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f7ff fcd2 	bl	8019dfc <icmp_input>
        break;
 801a458:	e01c      	b.n	801a494 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a45a:	4b1a      	ldr	r3, [pc, #104]	; (801a4c4 <ip4_input+0x278>)
 801a45c:	695b      	ldr	r3, [r3, #20]
 801a45e:	69b9      	ldr	r1, [r7, #24]
 801a460:	4618      	mov	r0, r3
 801a462:	f000 f90b 	bl	801a67c <ip4_addr_isbroadcast_u32>
 801a466:	4603      	mov	r3, r0
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d10f      	bne.n	801a48c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a46c:	4b15      	ldr	r3, [pc, #84]	; (801a4c4 <ip4_input+0x278>)
 801a46e:	695b      	ldr	r3, [r3, #20]
 801a470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a474:	2be0      	cmp	r3, #224	; 0xe0
 801a476:	d009      	beq.n	801a48c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a47c:	4619      	mov	r1, r3
 801a47e:	6878      	ldr	r0, [r7, #4]
 801a480:	f7f6 fd4d 	bl	8010f1e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a484:	2102      	movs	r1, #2
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f7ff fdbc 	bl	801a004 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7f6 fd59 	bl	8010f44 <pbuf_free>
        break;
 801a492:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a494:	4b0b      	ldr	r3, [pc, #44]	; (801a4c4 <ip4_input+0x278>)
 801a496:	2200      	movs	r2, #0
 801a498:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a49a:	4b0a      	ldr	r3, [pc, #40]	; (801a4c4 <ip4_input+0x278>)
 801a49c:	2200      	movs	r2, #0
 801a49e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a4a0:	4b08      	ldr	r3, [pc, #32]	; (801a4c4 <ip4_input+0x278>)
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a4a6:	4b07      	ldr	r3, [pc, #28]	; (801a4c4 <ip4_input+0x278>)
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a4ac:	4b05      	ldr	r3, [pc, #20]	; (801a4c4 <ip4_input+0x278>)
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a4b2:	4b04      	ldr	r3, [pc, #16]	; (801a4c4 <ip4_input+0x278>)
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a4b8:	2300      	movs	r3, #0
}
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	3720      	adds	r7, #32
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	bd80      	pop	{r7, pc}
 801a4c2:	bf00      	nop
 801a4c4:	200051a0 	.word	0x200051a0
 801a4c8:	200082b4 	.word	0x200082b4

0801a4cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b08a      	sub	sp, #40	; 0x28
 801a4d0:	af04      	add	r7, sp, #16
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
 801a4d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a4da:	68bb      	ldr	r3, [r7, #8]
 801a4dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d009      	beq.n	801a4f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a4e4:	68bb      	ldr	r3, [r7, #8]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d003      	beq.n	801a4f2 <ip4_output_if+0x26>
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d102      	bne.n	801a4f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4f4:	3304      	adds	r3, #4
 801a4f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a4f8:	78fa      	ldrb	r2, [r7, #3]
 801a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4fc:	9302      	str	r3, [sp, #8]
 801a4fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a502:	9301      	str	r3, [sp, #4]
 801a504:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	4613      	mov	r3, r2
 801a50c:	687a      	ldr	r2, [r7, #4]
 801a50e:	6979      	ldr	r1, [r7, #20]
 801a510:	68f8      	ldr	r0, [r7, #12]
 801a512:	f000 f805 	bl	801a520 <ip4_output_if_src>
 801a516:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a518:	4618      	mov	r0, r3
 801a51a:	3718      	adds	r7, #24
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}

0801a520 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b088      	sub	sp, #32
 801a524:	af00      	add	r7, sp, #0
 801a526:	60f8      	str	r0, [r7, #12]
 801a528:	60b9      	str	r1, [r7, #8]
 801a52a:	607a      	str	r2, [r7, #4]
 801a52c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	7b9b      	ldrb	r3, [r3, #14]
 801a532:	2b01      	cmp	r3, #1
 801a534:	d006      	beq.n	801a544 <ip4_output_if_src+0x24>
 801a536:	4b4b      	ldr	r3, [pc, #300]	; (801a664 <ip4_output_if_src+0x144>)
 801a538:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a53c:	494a      	ldr	r1, [pc, #296]	; (801a668 <ip4_output_if_src+0x148>)
 801a53e:	484b      	ldr	r0, [pc, #300]	; (801a66c <ip4_output_if_src+0x14c>)
 801a540:	f001 fd88 	bl	801c054 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d060      	beq.n	801a60c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a54a:	2314      	movs	r3, #20
 801a54c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a54e:	2114      	movs	r1, #20
 801a550:	68f8      	ldr	r0, [r7, #12]
 801a552:	f7f6 fc61 	bl	8010e18 <pbuf_add_header>
 801a556:	4603      	mov	r3, r0
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d002      	beq.n	801a562 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a55c:	f06f 0301 	mvn.w	r3, #1
 801a560:	e07c      	b.n	801a65c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	895b      	ldrh	r3, [r3, #10]
 801a56c:	2b13      	cmp	r3, #19
 801a56e:	d806      	bhi.n	801a57e <ip4_output_if_src+0x5e>
 801a570:	4b3c      	ldr	r3, [pc, #240]	; (801a664 <ip4_output_if_src+0x144>)
 801a572:	f240 3289 	movw	r2, #905	; 0x389
 801a576:	493e      	ldr	r1, [pc, #248]	; (801a670 <ip4_output_if_src+0x150>)
 801a578:	483c      	ldr	r0, [pc, #240]	; (801a66c <ip4_output_if_src+0x14c>)
 801a57a:	f001 fd6b 	bl	801c054 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a57e:	69fb      	ldr	r3, [r7, #28]
 801a580:	78fa      	ldrb	r2, [r7, #3]
 801a582:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a584:	69fb      	ldr	r3, [r7, #28]
 801a586:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a58a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681a      	ldr	r2, [r3, #0]
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a594:	8b7b      	ldrh	r3, [r7, #26]
 801a596:	089b      	lsrs	r3, r3, #2
 801a598:	b29b      	uxth	r3, r3
 801a59a:	b2db      	uxtb	r3, r3
 801a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5a0:	b2da      	uxtb	r2, r3
 801a5a2:	69fb      	ldr	r3, [r7, #28]
 801a5a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a5a6:	69fb      	ldr	r3, [r7, #28]
 801a5a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a5ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	891b      	ldrh	r3, [r3, #8]
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f7f5 fa2e 	bl	800fa14 <lwip_htons>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	461a      	mov	r2, r3
 801a5bc:	69fb      	ldr	r3, [r7, #28]
 801a5be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	719a      	strb	r2, [r3, #6]
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a5ca:	4b2a      	ldr	r3, [pc, #168]	; (801a674 <ip4_output_if_src+0x154>)
 801a5cc:	881b      	ldrh	r3, [r3, #0]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7f5 fa20 	bl	800fa14 <lwip_htons>
 801a5d4:	4603      	mov	r3, r0
 801a5d6:	461a      	mov	r2, r3
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a5dc:	4b25      	ldr	r3, [pc, #148]	; (801a674 <ip4_output_if_src+0x154>)
 801a5de:	881b      	ldrh	r3, [r3, #0]
 801a5e0:	3301      	adds	r3, #1
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	4b23      	ldr	r3, [pc, #140]	; (801a674 <ip4_output_if_src+0x154>)
 801a5e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a5e8:	68bb      	ldr	r3, [r7, #8]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d104      	bne.n	801a5f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a5ee:	4b22      	ldr	r3, [pc, #136]	; (801a678 <ip4_output_if_src+0x158>)
 801a5f0:	681a      	ldr	r2, [r3, #0]
 801a5f2:	69fb      	ldr	r3, [r7, #28]
 801a5f4:	60da      	str	r2, [r3, #12]
 801a5f6:	e003      	b.n	801a600 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	681a      	ldr	r2, [r3, #0]
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	2200      	movs	r2, #0
 801a604:	729a      	strb	r2, [r3, #10]
 801a606:	2200      	movs	r2, #0
 801a608:	72da      	strb	r2, [r3, #11]
 801a60a:	e00f      	b.n	801a62c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	895b      	ldrh	r3, [r3, #10]
 801a610:	2b13      	cmp	r3, #19
 801a612:	d802      	bhi.n	801a61a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a614:	f06f 0301 	mvn.w	r3, #1
 801a618:	e020      	b.n	801a65c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	691b      	ldr	r3, [r3, #16]
 801a624:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a626:	f107 0314 	add.w	r3, r7, #20
 801a62a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a630:	2b00      	cmp	r3, #0
 801a632:	d00c      	beq.n	801a64e <ip4_output_if_src+0x12e>
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	891a      	ldrh	r2, [r3, #8]
 801a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a63c:	429a      	cmp	r2, r3
 801a63e:	d906      	bls.n	801a64e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a644:	68f8      	ldr	r0, [r7, #12]
 801a646:	f000 fd4b 	bl	801b0e0 <ip4_frag>
 801a64a:	4603      	mov	r3, r0
 801a64c:	e006      	b.n	801a65c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a650:	695b      	ldr	r3, [r3, #20]
 801a652:	687a      	ldr	r2, [r7, #4]
 801a654:	68f9      	ldr	r1, [r7, #12]
 801a656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a658:	4798      	blx	r3
 801a65a:	4603      	mov	r3, r0
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	3720      	adds	r7, #32
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	08023fd4 	.word	0x08023fd4
 801a668:	08024008 	.word	0x08024008
 801a66c:	08024014 	.word	0x08024014
 801a670:	0802403c 	.word	0x0802403c
 801a674:	20001172 	.word	0x20001172
 801a678:	08024980 	.word	0x08024980

0801a67c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a67c:	b480      	push	{r7}
 801a67e:	b085      	sub	sp, #20
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
 801a684:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a690:	d002      	beq.n	801a698 <ip4_addr_isbroadcast_u32+0x1c>
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d101      	bne.n	801a69c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a698:	2301      	movs	r3, #1
 801a69a:	e02a      	b.n	801a6f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a6a2:	f003 0302 	and.w	r3, r3, #2
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d101      	bne.n	801a6ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	e021      	b.n	801a6f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a6ae:	683b      	ldr	r3, [r7, #0]
 801a6b0:	3304      	adds	r3, #4
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	687a      	ldr	r2, [r7, #4]
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	d101      	bne.n	801a6be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	e019      	b.n	801a6f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a6be:	68fa      	ldr	r2, [r7, #12]
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	3304      	adds	r3, #4
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	405a      	eors	r2, r3
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	3308      	adds	r3, #8
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	4013      	ands	r3, r2
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d10d      	bne.n	801a6f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	3308      	adds	r3, #8
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	43da      	mvns	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a6e0:	683b      	ldr	r3, [r7, #0]
 801a6e2:	3308      	adds	r3, #8
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d101      	bne.n	801a6f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	e000      	b.n	801a6f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a6f0:	2300      	movs	r3, #0
  }
}
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	3714      	adds	r7, #20
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fc:	4770      	bx	lr
	...

0801a700 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a706:	2300      	movs	r3, #0
 801a708:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a70a:	4b12      	ldr	r3, [pc, #72]	; (801a754 <ip_reass_tmr+0x54>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a710:	e018      	b.n	801a744 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	7fdb      	ldrb	r3, [r3, #31]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d00b      	beq.n	801a732 <ip_reass_tmr+0x32>
      r->timer--;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	7fdb      	ldrb	r3, [r3, #31]
 801a71e:	3b01      	subs	r3, #1
 801a720:	b2da      	uxtb	r2, r3
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	60fb      	str	r3, [r7, #12]
 801a730:	e008      	b.n	801a744 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a73c:	68b9      	ldr	r1, [r7, #8]
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f000 f80a 	bl	801a758 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d1e3      	bne.n	801a712 <ip_reass_tmr+0x12>
    }
  }
}
 801a74a:	bf00      	nop
 801a74c:	3710      	adds	r7, #16
 801a74e:	46bd      	mov	sp, r7
 801a750:	bd80      	pop	{r7, pc}
 801a752:	bf00      	nop
 801a754:	20001174 	.word	0x20001174

0801a758 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b088      	sub	sp, #32
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a762:	2300      	movs	r3, #0
 801a764:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d105      	bne.n	801a77a <ip_reass_free_complete_datagram+0x22>
 801a76e:	4b45      	ldr	r3, [pc, #276]	; (801a884 <ip_reass_free_complete_datagram+0x12c>)
 801a770:	22ab      	movs	r2, #171	; 0xab
 801a772:	4945      	ldr	r1, [pc, #276]	; (801a888 <ip_reass_free_complete_datagram+0x130>)
 801a774:	4845      	ldr	r0, [pc, #276]	; (801a88c <ip_reass_free_complete_datagram+0x134>)
 801a776:	f001 fc6d 	bl	801c054 <iprintf>
  if (prev != NULL) {
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d00a      	beq.n	801a796 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	687a      	ldr	r2, [r7, #4]
 801a786:	429a      	cmp	r2, r3
 801a788:	d005      	beq.n	801a796 <ip_reass_free_complete_datagram+0x3e>
 801a78a:	4b3e      	ldr	r3, [pc, #248]	; (801a884 <ip_reass_free_complete_datagram+0x12c>)
 801a78c:	22ad      	movs	r2, #173	; 0xad
 801a78e:	4940      	ldr	r1, [pc, #256]	; (801a890 <ip_reass_free_complete_datagram+0x138>)
 801a790:	483e      	ldr	r0, [pc, #248]	; (801a88c <ip_reass_free_complete_datagram+0x134>)
 801a792:	f001 fc5f 	bl	801c054 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	685b      	ldr	r3, [r3, #4]
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a79e:	697b      	ldr	r3, [r7, #20]
 801a7a0:	889b      	ldrh	r3, [r3, #4]
 801a7a2:	b29b      	uxth	r3, r3
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d12a      	bne.n	801a7fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a7ae:	697b      	ldr	r3, [r7, #20]
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a7b6:	69bb      	ldr	r3, [r7, #24]
 801a7b8:	6858      	ldr	r0, [r3, #4]
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	3308      	adds	r3, #8
 801a7be:	2214      	movs	r2, #20
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	f000 ff16 	bl	801b5f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a7c6:	2101      	movs	r1, #1
 801a7c8:	69b8      	ldr	r0, [r7, #24]
 801a7ca:	f7ff fc2b 	bl	801a024 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a7ce:	69b8      	ldr	r0, [r7, #24]
 801a7d0:	f7f6 fc40 	bl	8011054 <pbuf_clen>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a7d8:	8bfa      	ldrh	r2, [r7, #30]
 801a7da:	8a7b      	ldrh	r3, [r7, #18]
 801a7dc:	4413      	add	r3, r2
 801a7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a7e2:	db05      	blt.n	801a7f0 <ip_reass_free_complete_datagram+0x98>
 801a7e4:	4b27      	ldr	r3, [pc, #156]	; (801a884 <ip_reass_free_complete_datagram+0x12c>)
 801a7e6:	22bc      	movs	r2, #188	; 0xbc
 801a7e8:	492a      	ldr	r1, [pc, #168]	; (801a894 <ip_reass_free_complete_datagram+0x13c>)
 801a7ea:	4828      	ldr	r0, [pc, #160]	; (801a88c <ip_reass_free_complete_datagram+0x134>)
 801a7ec:	f001 fc32 	bl	801c054 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a7f0:	8bfa      	ldrh	r2, [r7, #30]
 801a7f2:	8a7b      	ldrh	r3, [r7, #18]
 801a7f4:	4413      	add	r3, r2
 801a7f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a7f8:	69b8      	ldr	r0, [r7, #24]
 801a7fa:	f7f6 fba3 	bl	8010f44 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	685b      	ldr	r3, [r3, #4]
 801a802:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a804:	e01f      	b.n	801a846 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a806:	69bb      	ldr	r3, [r7, #24]
 801a808:	685b      	ldr	r3, [r3, #4]
 801a80a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a80c:	69bb      	ldr	r3, [r7, #24]
 801a80e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f7f6 fc1c 	bl	8011054 <pbuf_clen>
 801a81c:	4603      	mov	r3, r0
 801a81e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a820:	8bfa      	ldrh	r2, [r7, #30]
 801a822:	8a7b      	ldrh	r3, [r7, #18]
 801a824:	4413      	add	r3, r2
 801a826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a82a:	db05      	blt.n	801a838 <ip_reass_free_complete_datagram+0xe0>
 801a82c:	4b15      	ldr	r3, [pc, #84]	; (801a884 <ip_reass_free_complete_datagram+0x12c>)
 801a82e:	22cc      	movs	r2, #204	; 0xcc
 801a830:	4918      	ldr	r1, [pc, #96]	; (801a894 <ip_reass_free_complete_datagram+0x13c>)
 801a832:	4816      	ldr	r0, [pc, #88]	; (801a88c <ip_reass_free_complete_datagram+0x134>)
 801a834:	f001 fc0e 	bl	801c054 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a838:	8bfa      	ldrh	r2, [r7, #30]
 801a83a:	8a7b      	ldrh	r3, [r7, #18]
 801a83c:	4413      	add	r3, r2
 801a83e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a840:	68f8      	ldr	r0, [r7, #12]
 801a842:	f7f6 fb7f 	bl	8010f44 <pbuf_free>
  while (p != NULL) {
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d1dc      	bne.n	801a806 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a84c:	6839      	ldr	r1, [r7, #0]
 801a84e:	6878      	ldr	r0, [r7, #4]
 801a850:	f000 f8c2 	bl	801a9d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a854:	4b10      	ldr	r3, [pc, #64]	; (801a898 <ip_reass_free_complete_datagram+0x140>)
 801a856:	881b      	ldrh	r3, [r3, #0]
 801a858:	8bfa      	ldrh	r2, [r7, #30]
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d905      	bls.n	801a86a <ip_reass_free_complete_datagram+0x112>
 801a85e:	4b09      	ldr	r3, [pc, #36]	; (801a884 <ip_reass_free_complete_datagram+0x12c>)
 801a860:	22d2      	movs	r2, #210	; 0xd2
 801a862:	490e      	ldr	r1, [pc, #56]	; (801a89c <ip_reass_free_complete_datagram+0x144>)
 801a864:	4809      	ldr	r0, [pc, #36]	; (801a88c <ip_reass_free_complete_datagram+0x134>)
 801a866:	f001 fbf5 	bl	801c054 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a86a:	4b0b      	ldr	r3, [pc, #44]	; (801a898 <ip_reass_free_complete_datagram+0x140>)
 801a86c:	881a      	ldrh	r2, [r3, #0]
 801a86e:	8bfb      	ldrh	r3, [r7, #30]
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	b29a      	uxth	r2, r3
 801a874:	4b08      	ldr	r3, [pc, #32]	; (801a898 <ip_reass_free_complete_datagram+0x140>)
 801a876:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a878:	8bfb      	ldrh	r3, [r7, #30]
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	3720      	adds	r7, #32
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}
 801a882:	bf00      	nop
 801a884:	0802406c 	.word	0x0802406c
 801a888:	080240a8 	.word	0x080240a8
 801a88c:	080240b4 	.word	0x080240b4
 801a890:	080240dc 	.word	0x080240dc
 801a894:	080240f0 	.word	0x080240f0
 801a898:	20001178 	.word	0x20001178
 801a89c:	08024110 	.word	0x08024110

0801a8a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	b08a      	sub	sp, #40	; 0x28
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	6078      	str	r0, [r7, #4]
 801a8a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a8be:	4b28      	ldr	r3, [pc, #160]	; (801a960 <ip_reass_remove_oldest_datagram+0xc0>)
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a8c4:	e030      	b.n	801a928 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c8:	695a      	ldr	r2, [r3, #20]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	68db      	ldr	r3, [r3, #12]
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d10c      	bne.n	801a8ec <ip_reass_remove_oldest_datagram+0x4c>
 801a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8d4:	699a      	ldr	r2, [r3, #24]
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	691b      	ldr	r3, [r3, #16]
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d106      	bne.n	801a8ec <ip_reass_remove_oldest_datagram+0x4c>
 801a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e0:	899a      	ldrh	r2, [r3, #12]
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	889b      	ldrh	r3, [r3, #4]
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d014      	beq.n	801a916 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a8ec:	693b      	ldr	r3, [r7, #16]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a8f2:	6a3b      	ldr	r3, [r7, #32]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d104      	bne.n	801a902 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a8fc:	69fb      	ldr	r3, [r7, #28]
 801a8fe:	61bb      	str	r3, [r7, #24]
 801a900:	e009      	b.n	801a916 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a904:	7fda      	ldrb	r2, [r3, #31]
 801a906:	6a3b      	ldr	r3, [r7, #32]
 801a908:	7fdb      	ldrb	r3, [r3, #31]
 801a90a:	429a      	cmp	r2, r3
 801a90c:	d803      	bhi.n	801a916 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a910:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a912:	69fb      	ldr	r3, [r7, #28]
 801a914:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d001      	beq.n	801a922 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a920:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d1cb      	bne.n	801a8c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a92e:	6a3b      	ldr	r3, [r7, #32]
 801a930:	2b00      	cmp	r3, #0
 801a932:	d008      	beq.n	801a946 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a934:	69b9      	ldr	r1, [r7, #24]
 801a936:	6a38      	ldr	r0, [r7, #32]
 801a938:	f7ff ff0e 	bl	801a758 <ip_reass_free_complete_datagram>
 801a93c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a93e:	697a      	ldr	r2, [r7, #20]
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	4413      	add	r3, r2
 801a944:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a946:	697a      	ldr	r2, [r7, #20]
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	429a      	cmp	r2, r3
 801a94c:	da02      	bge.n	801a954 <ip_reass_remove_oldest_datagram+0xb4>
 801a94e:	693b      	ldr	r3, [r7, #16]
 801a950:	2b01      	cmp	r3, #1
 801a952:	dcac      	bgt.n	801a8ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a954:	697b      	ldr	r3, [r7, #20]
}
 801a956:	4618      	mov	r0, r3
 801a958:	3728      	adds	r7, #40	; 0x28
 801a95a:	46bd      	mov	sp, r7
 801a95c:	bd80      	pop	{r7, pc}
 801a95e:	bf00      	nop
 801a960:	20001174 	.word	0x20001174

0801a964 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b084      	sub	sp, #16
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a96e:	2004      	movs	r0, #4
 801a970:	f7f5 fca6 	bl	80102c0 <memp_malloc>
 801a974:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d110      	bne.n	801a99e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a97c:	6839      	ldr	r1, [r7, #0]
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	f7ff ff8e 	bl	801a8a0 <ip_reass_remove_oldest_datagram>
 801a984:	4602      	mov	r2, r0
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	4293      	cmp	r3, r2
 801a98a:	dc03      	bgt.n	801a994 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a98c:	2004      	movs	r0, #4
 801a98e:	f7f5 fc97 	bl	80102c0 <memp_malloc>
 801a992:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d101      	bne.n	801a99e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a99a:	2300      	movs	r3, #0
 801a99c:	e016      	b.n	801a9cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a99e:	2220      	movs	r2, #32
 801a9a0:	2100      	movs	r1, #0
 801a9a2:	68f8      	ldr	r0, [r7, #12]
 801a9a4:	f000 fe49 	bl	801b63a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	220f      	movs	r2, #15
 801a9ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a9ae:	4b09      	ldr	r3, [pc, #36]	; (801a9d4 <ip_reass_enqueue_new_datagram+0x70>)
 801a9b0:	681a      	ldr	r2, [r3, #0]
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a9b6:	4a07      	ldr	r2, [pc, #28]	; (801a9d4 <ip_reass_enqueue_new_datagram+0x70>)
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	3308      	adds	r3, #8
 801a9c0:	2214      	movs	r2, #20
 801a9c2:	6879      	ldr	r1, [r7, #4]
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f000 fe14 	bl	801b5f2 <memcpy>
  return ipr;
 801a9ca:	68fb      	ldr	r3, [r7, #12]
}
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	3710      	adds	r7, #16
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}
 801a9d4:	20001174 	.word	0x20001174

0801a9d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a9e2:	4b10      	ldr	r3, [pc, #64]	; (801aa24 <ip_reass_dequeue_datagram+0x4c>)
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	687a      	ldr	r2, [r7, #4]
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d104      	bne.n	801a9f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a0c      	ldr	r2, [pc, #48]	; (801aa24 <ip_reass_dequeue_datagram+0x4c>)
 801a9f2:	6013      	str	r3, [r2, #0]
 801a9f4:	e00d      	b.n	801aa12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a9f6:	683b      	ldr	r3, [r7, #0]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d106      	bne.n	801aa0a <ip_reass_dequeue_datagram+0x32>
 801a9fc:	4b0a      	ldr	r3, [pc, #40]	; (801aa28 <ip_reass_dequeue_datagram+0x50>)
 801a9fe:	f240 1245 	movw	r2, #325	; 0x145
 801aa02:	490a      	ldr	r1, [pc, #40]	; (801aa2c <ip_reass_dequeue_datagram+0x54>)
 801aa04:	480a      	ldr	r0, [pc, #40]	; (801aa30 <ip_reass_dequeue_datagram+0x58>)
 801aa06:	f001 fb25 	bl	801c054 <iprintf>
    prev->next = ipr->next;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681a      	ldr	r2, [r3, #0]
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801aa12:	6879      	ldr	r1, [r7, #4]
 801aa14:	2004      	movs	r0, #4
 801aa16:	f7f5 fc9f 	bl	8010358 <memp_free>
}
 801aa1a:	bf00      	nop
 801aa1c:	3708      	adds	r7, #8
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bd80      	pop	{r7, pc}
 801aa22:	bf00      	nop
 801aa24:	20001174 	.word	0x20001174
 801aa28:	0802406c 	.word	0x0802406c
 801aa2c:	08024134 	.word	0x08024134
 801aa30:	080240b4 	.word	0x080240b4

0801aa34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b08c      	sub	sp, #48	; 0x30
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	60f8      	str	r0, [r7, #12]
 801aa3c:	60b9      	str	r1, [r7, #8]
 801aa3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801aa40:	2300      	movs	r3, #0
 801aa42:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801aa44:	2301      	movs	r3, #1
 801aa46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801aa48:	68bb      	ldr	r3, [r7, #8]
 801aa4a:	685b      	ldr	r3, [r3, #4]
 801aa4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801aa4e:	69fb      	ldr	r3, [r7, #28]
 801aa50:	885b      	ldrh	r3, [r3, #2]
 801aa52:	b29b      	uxth	r3, r3
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7f4 ffdd 	bl	800fa14 <lwip_htons>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801aa5e:	69fb      	ldr	r3, [r7, #28]
 801aa60:	781b      	ldrb	r3, [r3, #0]
 801aa62:	f003 030f 	and.w	r3, r3, #15
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	009b      	lsls	r3, r3, #2
 801aa6a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801aa6c:	7e7b      	ldrb	r3, [r7, #25]
 801aa6e:	b29b      	uxth	r3, r3
 801aa70:	8b7a      	ldrh	r2, [r7, #26]
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d202      	bcs.n	801aa7c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa76:	f04f 33ff 	mov.w	r3, #4294967295
 801aa7a:	e135      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801aa7c:	7e7b      	ldrb	r3, [r7, #25]
 801aa7e:	b29b      	uxth	r3, r3
 801aa80:	8b7a      	ldrh	r2, [r7, #26]
 801aa82:	1ad3      	subs	r3, r2, r3
 801aa84:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801aa86:	69fb      	ldr	r3, [r7, #28]
 801aa88:	88db      	ldrh	r3, [r3, #6]
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f7f4 ffc1 	bl	800fa14 <lwip_htons>
 801aa92:	4603      	mov	r3, r0
 801aa94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	00db      	lsls	r3, r3, #3
 801aa9c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	685b      	ldr	r3, [r3, #4]
 801aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	701a      	strb	r2, [r3, #0]
 801aaaa:	2200      	movs	r2, #0
 801aaac:	705a      	strb	r2, [r3, #1]
 801aaae:	2200      	movs	r2, #0
 801aab0:	709a      	strb	r2, [r3, #2]
 801aab2:	2200      	movs	r2, #0
 801aab4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab8:	8afa      	ldrh	r2, [r7, #22]
 801aaba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801aabc:	8afa      	ldrh	r2, [r7, #22]
 801aabe:	8b7b      	ldrh	r3, [r7, #26]
 801aac0:	4413      	add	r3, r2
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aac6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaca:	88db      	ldrh	r3, [r3, #6]
 801aacc:	b29b      	uxth	r3, r3
 801aace:	8afa      	ldrh	r2, [r7, #22]
 801aad0:	429a      	cmp	r2, r3
 801aad2:	d902      	bls.n	801aada <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aad4:	f04f 33ff 	mov.w	r3, #4294967295
 801aad8:	e106      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	685b      	ldr	r3, [r3, #4]
 801aade:	627b      	str	r3, [r7, #36]	; 0x24
 801aae0:	e068      	b.n	801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae4:	685b      	ldr	r3, [r3, #4]
 801aae6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaea:	889b      	ldrh	r3, [r3, #4]
 801aaec:	b29a      	uxth	r2, r3
 801aaee:	693b      	ldr	r3, [r7, #16]
 801aaf0:	889b      	ldrh	r3, [r3, #4]
 801aaf2:	b29b      	uxth	r3, r3
 801aaf4:	429a      	cmp	r2, r3
 801aaf6:	d235      	bcs.n	801ab64 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aafc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d020      	beq.n	801ab46 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ab04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab06:	889b      	ldrh	r3, [r3, #4]
 801ab08:	b29a      	uxth	r2, r3
 801ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab0c:	88db      	ldrh	r3, [r3, #6]
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d307      	bcc.n	801ab24 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab16:	88db      	ldrh	r3, [r3, #6]
 801ab18:	b29a      	uxth	r2, r3
 801ab1a:	693b      	ldr	r3, [r7, #16]
 801ab1c:	889b      	ldrh	r3, [r3, #4]
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	429a      	cmp	r2, r3
 801ab22:	d902      	bls.n	801ab2a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab24:	f04f 33ff 	mov.w	r3, #4294967295
 801ab28:	e0de      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab2c:	68ba      	ldr	r2, [r7, #8]
 801ab2e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab32:	88db      	ldrh	r3, [r3, #6]
 801ab34:	b29a      	uxth	r2, r3
 801ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab38:	889b      	ldrh	r3, [r3, #4]
 801ab3a:	b29b      	uxth	r3, r3
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	d03d      	beq.n	801abbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ab40:	2300      	movs	r3, #0
 801ab42:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ab44:	e03a      	b.n	801abbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab48:	88db      	ldrh	r3, [r3, #6]
 801ab4a:	b29a      	uxth	r2, r3
 801ab4c:	693b      	ldr	r3, [r7, #16]
 801ab4e:	889b      	ldrh	r3, [r3, #4]
 801ab50:	b29b      	uxth	r3, r3
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d902      	bls.n	801ab5c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab56:	f04f 33ff 	mov.w	r3, #4294967295
 801ab5a:	e0c5      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	68ba      	ldr	r2, [r7, #8]
 801ab60:	605a      	str	r2, [r3, #4]
      break;
 801ab62:	e02b      	b.n	801abbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab66:	889b      	ldrh	r3, [r3, #4]
 801ab68:	b29a      	uxth	r2, r3
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	889b      	ldrh	r3, [r3, #4]
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	429a      	cmp	r2, r3
 801ab72:	d102      	bne.n	801ab7a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab74:	f04f 33ff 	mov.w	r3, #4294967295
 801ab78:	e0b6      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab7c:	889b      	ldrh	r3, [r3, #4]
 801ab7e:	b29a      	uxth	r2, r3
 801ab80:	693b      	ldr	r3, [r7, #16]
 801ab82:	88db      	ldrh	r3, [r3, #6]
 801ab84:	b29b      	uxth	r3, r3
 801ab86:	429a      	cmp	r2, r3
 801ab88:	d202      	bcs.n	801ab90 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab8a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab8e:	e0ab      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d009      	beq.n	801abaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab98:	88db      	ldrh	r3, [r3, #6]
 801ab9a:	b29a      	uxth	r2, r3
 801ab9c:	693b      	ldr	r3, [r7, #16]
 801ab9e:	889b      	ldrh	r3, [r3, #4]
 801aba0:	b29b      	uxth	r3, r3
 801aba2:	429a      	cmp	r2, r3
 801aba4:	d001      	beq.n	801abaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aba6:	2300      	movs	r3, #0
 801aba8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801abaa:	693b      	ldr	r3, [r7, #16]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801abb0:	693b      	ldr	r3, [r7, #16]
 801abb2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d193      	bne.n	801aae2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801abba:	e000      	b.n	801abbe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801abbc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d12d      	bne.n	801ac20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d01c      	beq.n	801ac04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abcc:	88db      	ldrh	r3, [r3, #6]
 801abce:	b29a      	uxth	r2, r3
 801abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd2:	889b      	ldrh	r3, [r3, #4]
 801abd4:	b29b      	uxth	r3, r3
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d906      	bls.n	801abe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801abda:	4b45      	ldr	r3, [pc, #276]	; (801acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801abdc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801abe0:	4944      	ldr	r1, [pc, #272]	; (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801abe2:	4845      	ldr	r0, [pc, #276]	; (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801abe4:	f001 fa36 	bl	801c054 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abea:	68ba      	ldr	r2, [r7, #8]
 801abec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf0:	88db      	ldrh	r3, [r3, #6]
 801abf2:	b29a      	uxth	r2, r3
 801abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abf6:	889b      	ldrh	r3, [r3, #4]
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d010      	beq.n	801ac20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801abfe:	2300      	movs	r3, #0
 801ac00:	623b      	str	r3, [r7, #32]
 801ac02:	e00d      	b.n	801ac20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	685b      	ldr	r3, [r3, #4]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d006      	beq.n	801ac1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ac0c:	4b38      	ldr	r3, [pc, #224]	; (801acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac0e:	f240 12bf 	movw	r2, #447	; 0x1bf
 801ac12:	493a      	ldr	r1, [pc, #232]	; (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ac14:	4838      	ldr	r0, [pc, #224]	; (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac16:	f001 fa1d 	bl	801c054 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	68ba      	ldr	r2, [r7, #8]
 801ac1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d105      	bne.n	801ac32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	7f9b      	ldrb	r3, [r3, #30]
 801ac2a:	f003 0301 	and.w	r3, r3, #1
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d059      	beq.n	801ace6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ac32:	6a3b      	ldr	r3, [r7, #32]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d04f      	beq.n	801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d006      	beq.n	801ac4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	685b      	ldr	r3, [r3, #4]
 801ac44:	685b      	ldr	r3, [r3, #4]
 801ac46:	889b      	ldrh	r3, [r3, #4]
 801ac48:	b29b      	uxth	r3, r3
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d002      	beq.n	801ac54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	623b      	str	r3, [r7, #32]
 801ac52:	e041      	b.n	801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ac5e:	e012      	b.n	801ac86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac62:	685b      	ldr	r3, [r3, #4]
 801ac64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac68:	88db      	ldrh	r3, [r3, #6]
 801ac6a:	b29a      	uxth	r2, r3
 801ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6e:	889b      	ldrh	r3, [r3, #4]
 801ac70:	b29b      	uxth	r3, r3
 801ac72:	429a      	cmp	r2, r3
 801ac74:	d002      	beq.n	801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ac76:	2300      	movs	r3, #0
 801ac78:	623b      	str	r3, [r7, #32]
            break;
 801ac7a:	e007      	b.n	801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d1e9      	bne.n	801ac60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ac8c:	6a3b      	ldr	r3, [r7, #32]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d022      	beq.n	801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	685b      	ldr	r3, [r3, #4]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d106      	bne.n	801aca8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ac9a:	4b15      	ldr	r3, [pc, #84]	; (801acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac9c:	f240 12df 	movw	r2, #479	; 0x1df
 801aca0:	4917      	ldr	r1, [pc, #92]	; (801ad00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801aca2:	4815      	ldr	r0, [pc, #84]	; (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aca4:	f001 f9d6 	bl	801c054 <iprintf>
          LWIP_ASSERT("sanity check",
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	685b      	ldr	r3, [r3, #4]
 801acac:	685b      	ldr	r3, [r3, #4]
 801acae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801acb0:	429a      	cmp	r2, r3
 801acb2:	d106      	bne.n	801acc2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801acb4:	4b0e      	ldr	r3, [pc, #56]	; (801acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801acb6:	f240 12e1 	movw	r2, #481	; 0x1e1
 801acba:	4911      	ldr	r1, [pc, #68]	; (801ad00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801acbc:	480e      	ldr	r0, [pc, #56]	; (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acbe:	f001 f9c9 	bl	801c054 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d006      	beq.n	801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801acca:	4b09      	ldr	r3, [pc, #36]	; (801acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801accc:	f240 12e3 	movw	r2, #483	; 0x1e3
 801acd0:	490c      	ldr	r1, [pc, #48]	; (801ad04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801acd2:	4809      	ldr	r0, [pc, #36]	; (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acd4:	f001 f9be 	bl	801c054 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801acd8:	6a3b      	ldr	r3, [r7, #32]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	bf14      	ite	ne
 801acde:	2301      	movne	r3, #1
 801ace0:	2300      	moveq	r3, #0
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	e000      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ace6:	2300      	movs	r3, #0
}
 801ace8:	4618      	mov	r0, r3
 801acea:	3730      	adds	r7, #48	; 0x30
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}
 801acf0:	0802406c 	.word	0x0802406c
 801acf4:	08024150 	.word	0x08024150
 801acf8:	080240b4 	.word	0x080240b4
 801acfc:	08024170 	.word	0x08024170
 801ad00:	080241a8 	.word	0x080241a8
 801ad04:	080241b8 	.word	0x080241b8

0801ad08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b08e      	sub	sp, #56	; 0x38
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	685b      	ldr	r3, [r3, #4]
 801ad14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad18:	781b      	ldrb	r3, [r3, #0]
 801ad1a:	f003 030f 	and.w	r3, r3, #15
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	009b      	lsls	r3, r3, #2
 801ad22:	b2db      	uxtb	r3, r3
 801ad24:	2b14      	cmp	r3, #20
 801ad26:	f040 8167 	bne.w	801aff8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad2c:	88db      	ldrh	r3, [r3, #6]
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7f4 fe6f 	bl	800fa14 <lwip_htons>
 801ad36:	4603      	mov	r3, r0
 801ad38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad3c:	b29b      	uxth	r3, r3
 801ad3e:	00db      	lsls	r3, r3, #3
 801ad40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad44:	885b      	ldrh	r3, [r3, #2]
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	4618      	mov	r0, r3
 801ad4a:	f7f4 fe63 	bl	800fa14 <lwip_htons>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	f003 030f 	and.w	r3, r3, #15
 801ad5a:	b2db      	uxtb	r3, r3
 801ad5c:	009b      	lsls	r3, r3, #2
 801ad5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ad62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ad66:	b29b      	uxth	r3, r3
 801ad68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad6a:	429a      	cmp	r2, r3
 801ad6c:	f0c0 8146 	bcc.w	801affc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ad70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad78:	1ad3      	subs	r3, r2, r3
 801ad7a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ad7c:	6878      	ldr	r0, [r7, #4]
 801ad7e:	f7f6 f969 	bl	8011054 <pbuf_clen>
 801ad82:	4603      	mov	r3, r0
 801ad84:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ad86:	4ba3      	ldr	r3, [pc, #652]	; (801b014 <ip4_reass+0x30c>)
 801ad88:	881b      	ldrh	r3, [r3, #0]
 801ad8a:	461a      	mov	r2, r3
 801ad8c:	8c3b      	ldrh	r3, [r7, #32]
 801ad8e:	4413      	add	r3, r2
 801ad90:	2b0a      	cmp	r3, #10
 801ad92:	dd10      	ble.n	801adb6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad94:	8c3b      	ldrh	r3, [r7, #32]
 801ad96:	4619      	mov	r1, r3
 801ad98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad9a:	f7ff fd81 	bl	801a8a0 <ip_reass_remove_oldest_datagram>
 801ad9e:	4603      	mov	r3, r0
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	f000 812d 	beq.w	801b000 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ada6:	4b9b      	ldr	r3, [pc, #620]	; (801b014 <ip4_reass+0x30c>)
 801ada8:	881b      	ldrh	r3, [r3, #0]
 801adaa:	461a      	mov	r2, r3
 801adac:	8c3b      	ldrh	r3, [r7, #32]
 801adae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801adb0:	2b0a      	cmp	r3, #10
 801adb2:	f300 8125 	bgt.w	801b000 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801adb6:	4b98      	ldr	r3, [pc, #608]	; (801b018 <ip4_reass+0x310>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	633b      	str	r3, [r7, #48]	; 0x30
 801adbc:	e015      	b.n	801adea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc0:	695a      	ldr	r2, [r3, #20]
 801adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc4:	68db      	ldr	r3, [r3, #12]
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d10c      	bne.n	801ade4 <ip4_reass+0xdc>
 801adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adcc:	699a      	ldr	r2, [r3, #24]
 801adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801add0:	691b      	ldr	r3, [r3, #16]
 801add2:	429a      	cmp	r2, r3
 801add4:	d106      	bne.n	801ade4 <ip4_reass+0xdc>
 801add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add8:	899a      	ldrh	r2, [r3, #12]
 801adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801addc:	889b      	ldrh	r3, [r3, #4]
 801adde:	b29b      	uxth	r3, r3
 801ade0:	429a      	cmp	r2, r3
 801ade2:	d006      	beq.n	801adf2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	633b      	str	r3, [r7, #48]	; 0x30
 801adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adec:	2b00      	cmp	r3, #0
 801adee:	d1e6      	bne.n	801adbe <ip4_reass+0xb6>
 801adf0:	e000      	b.n	801adf4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801adf2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d109      	bne.n	801ae0e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801adfa:	8c3b      	ldrh	r3, [r7, #32]
 801adfc:	4619      	mov	r1, r3
 801adfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ae00:	f7ff fdb0 	bl	801a964 <ip_reass_enqueue_new_datagram>
 801ae04:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d11c      	bne.n	801ae46 <ip4_reass+0x13e>
      goto nullreturn;
 801ae0c:	e0f9      	b.n	801b002 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae10:	88db      	ldrh	r3, [r3, #6]
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7f4 fdfd 	bl	800fa14 <lwip_htons>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d110      	bne.n	801ae46 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae26:	89db      	ldrh	r3, [r3, #14]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7f4 fdf3 	bl	800fa14 <lwip_htons>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d006      	beq.n	801ae46 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae3a:	3308      	adds	r3, #8
 801ae3c:	2214      	movs	r2, #20
 801ae3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ae40:	4618      	mov	r0, r3
 801ae42:	f000 fbd6 	bl	801b5f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae48:	88db      	ldrh	r3, [r3, #6]
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	f003 0320 	and.w	r3, r3, #32
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	bf0c      	ite	eq
 801ae54:	2301      	moveq	r3, #1
 801ae56:	2300      	movne	r3, #0
 801ae58:	b2db      	uxtb	r3, r3
 801ae5a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ae5c:	69fb      	ldr	r3, [r7, #28]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d00e      	beq.n	801ae80 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ae62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ae64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae66:	4413      	add	r3, r2
 801ae68:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ae6a:	8b7a      	ldrh	r2, [r7, #26]
 801ae6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	f0c0 80a0 	bcc.w	801afb4 <ip4_reass+0x2ac>
 801ae74:	8b7b      	ldrh	r3, [r7, #26]
 801ae76:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ae7a:	4293      	cmp	r3, r2
 801ae7c:	f200 809a 	bhi.w	801afb4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ae80:	69fa      	ldr	r2, [r7, #28]
 801ae82:	6879      	ldr	r1, [r7, #4]
 801ae84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae86:	f7ff fdd5 	bl	801aa34 <ip_reass_chain_frag_into_datagram_and_validate>
 801ae8a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ae8c:	697b      	ldr	r3, [r7, #20]
 801ae8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae92:	f000 8091 	beq.w	801afb8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ae96:	4b5f      	ldr	r3, [pc, #380]	; (801b014 <ip4_reass+0x30c>)
 801ae98:	881a      	ldrh	r2, [r3, #0]
 801ae9a:	8c3b      	ldrh	r3, [r7, #32]
 801ae9c:	4413      	add	r3, r2
 801ae9e:	b29a      	uxth	r2, r3
 801aea0:	4b5c      	ldr	r3, [pc, #368]	; (801b014 <ip4_reass+0x30c>)
 801aea2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801aea4:	69fb      	ldr	r3, [r7, #28]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d00d      	beq.n	801aec6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801aeaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aeae:	4413      	add	r3, r2
 801aeb0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb4:	8a7a      	ldrh	r2, [r7, #18]
 801aeb6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeba:	7f9b      	ldrb	r3, [r3, #30]
 801aebc:	f043 0301 	orr.w	r3, r3, #1
 801aec0:	b2da      	uxtb	r2, r3
 801aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801aec6:	697b      	ldr	r3, [r7, #20]
 801aec8:	2b01      	cmp	r3, #1
 801aeca:	d171      	bne.n	801afb0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aece:	8b9b      	ldrh	r3, [r3, #28]
 801aed0:	3314      	adds	r3, #20
 801aed2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed6:	685b      	ldr	r3, [r3, #4]
 801aed8:	685b      	ldr	r3, [r3, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee8:	3308      	adds	r3, #8
 801aeea:	2214      	movs	r2, #20
 801aeec:	4619      	mov	r1, r3
 801aeee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aef0:	f000 fb7f 	bl	801b5f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aef4:	8a3b      	ldrh	r3, [r7, #16]
 801aef6:	4618      	mov	r0, r3
 801aef8:	f7f4 fd8c 	bl	800fa14 <lwip_htons>
 801aefc:	4603      	mov	r3, r0
 801aefe:	461a      	mov	r2, r3
 801af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af02:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af06:	2200      	movs	r2, #0
 801af08:	719a      	strb	r2, [r3, #6]
 801af0a:	2200      	movs	r2, #0
 801af0c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af10:	2200      	movs	r2, #0
 801af12:	729a      	strb	r2, [r3, #10]
 801af14:	2200      	movs	r2, #0
 801af16:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af1a:	685b      	ldr	r3, [r3, #4]
 801af1c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801af1e:	e00d      	b.n	801af3c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801af20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af22:	685b      	ldr	r3, [r3, #4]
 801af24:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801af26:	2114      	movs	r1, #20
 801af28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801af2a:	f7f5 ff85 	bl	8010e38 <pbuf_remove_header>
      pbuf_cat(p, r);
 801af2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801af30:	6878      	ldr	r0, [r7, #4]
 801af32:	f7f6 f8c9 	bl	80110c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d1ee      	bne.n	801af20 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801af42:	4b35      	ldr	r3, [pc, #212]	; (801b018 <ip4_reass+0x310>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af48:	429a      	cmp	r2, r3
 801af4a:	d102      	bne.n	801af52 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801af4c:	2300      	movs	r3, #0
 801af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af50:	e010      	b.n	801af74 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af52:	4b31      	ldr	r3, [pc, #196]	; (801b018 <ip4_reass+0x310>)
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af58:	e007      	b.n	801af6a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af60:	429a      	cmp	r2, r3
 801af62:	d006      	beq.n	801af72 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d1f4      	bne.n	801af5a <ip4_reass+0x252>
 801af70:	e000      	b.n	801af74 <ip4_reass+0x26c>
          break;
 801af72:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801af74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801af76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af78:	f7ff fd2e 	bl	801a9d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801af7c:	6878      	ldr	r0, [r7, #4]
 801af7e:	f7f6 f869 	bl	8011054 <pbuf_clen>
 801af82:	4603      	mov	r3, r0
 801af84:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801af86:	4b23      	ldr	r3, [pc, #140]	; (801b014 <ip4_reass+0x30c>)
 801af88:	881b      	ldrh	r3, [r3, #0]
 801af8a:	8c3a      	ldrh	r2, [r7, #32]
 801af8c:	429a      	cmp	r2, r3
 801af8e:	d906      	bls.n	801af9e <ip4_reass+0x296>
 801af90:	4b22      	ldr	r3, [pc, #136]	; (801b01c <ip4_reass+0x314>)
 801af92:	f240 229b 	movw	r2, #667	; 0x29b
 801af96:	4922      	ldr	r1, [pc, #136]	; (801b020 <ip4_reass+0x318>)
 801af98:	4822      	ldr	r0, [pc, #136]	; (801b024 <ip4_reass+0x31c>)
 801af9a:	f001 f85b 	bl	801c054 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801af9e:	4b1d      	ldr	r3, [pc, #116]	; (801b014 <ip4_reass+0x30c>)
 801afa0:	881a      	ldrh	r2, [r3, #0]
 801afa2:	8c3b      	ldrh	r3, [r7, #32]
 801afa4:	1ad3      	subs	r3, r2, r3
 801afa6:	b29a      	uxth	r2, r3
 801afa8:	4b1a      	ldr	r3, [pc, #104]	; (801b014 <ip4_reass+0x30c>)
 801afaa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	e02c      	b.n	801b00a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801afb0:	2300      	movs	r3, #0
 801afb2:	e02a      	b.n	801b00a <ip4_reass+0x302>

nullreturn_ipr:
 801afb4:	bf00      	nop
 801afb6:	e000      	b.n	801afba <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801afb8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d106      	bne.n	801afce <ip4_reass+0x2c6>
 801afc0:	4b16      	ldr	r3, [pc, #88]	; (801b01c <ip4_reass+0x314>)
 801afc2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801afc6:	4918      	ldr	r1, [pc, #96]	; (801b028 <ip4_reass+0x320>)
 801afc8:	4816      	ldr	r0, [pc, #88]	; (801b024 <ip4_reass+0x31c>)
 801afca:	f001 f843 	bl	801c054 <iprintf>
  if (ipr->p == NULL) {
 801afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d114      	bne.n	801b000 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801afd6:	4b10      	ldr	r3, [pc, #64]	; (801b018 <ip4_reass+0x310>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801afdc:	429a      	cmp	r2, r3
 801afde:	d006      	beq.n	801afee <ip4_reass+0x2e6>
 801afe0:	4b0e      	ldr	r3, [pc, #56]	; (801b01c <ip4_reass+0x314>)
 801afe2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801afe6:	4911      	ldr	r1, [pc, #68]	; (801b02c <ip4_reass+0x324>)
 801afe8:	480e      	ldr	r0, [pc, #56]	; (801b024 <ip4_reass+0x31c>)
 801afea:	f001 f833 	bl	801c054 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801afee:	2100      	movs	r1, #0
 801aff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aff2:	f7ff fcf1 	bl	801a9d8 <ip_reass_dequeue_datagram>
 801aff6:	e004      	b.n	801b002 <ip4_reass+0x2fa>
    goto nullreturn;
 801aff8:	bf00      	nop
 801affa:	e002      	b.n	801b002 <ip4_reass+0x2fa>
    goto nullreturn;
 801affc:	bf00      	nop
 801affe:	e000      	b.n	801b002 <ip4_reass+0x2fa>
  }

nullreturn:
 801b000:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b002:	6878      	ldr	r0, [r7, #4]
 801b004:	f7f5 ff9e 	bl	8010f44 <pbuf_free>
  return NULL;
 801b008:	2300      	movs	r3, #0
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3738      	adds	r7, #56	; 0x38
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	20001178 	.word	0x20001178
 801b018:	20001174 	.word	0x20001174
 801b01c:	0802406c 	.word	0x0802406c
 801b020:	080241dc 	.word	0x080241dc
 801b024:	080240b4 	.word	0x080240b4
 801b028:	080241f8 	.word	0x080241f8
 801b02c:	08024204 	.word	0x08024204

0801b030 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b034:	2005      	movs	r0, #5
 801b036:	f7f5 f943 	bl	80102c0 <memp_malloc>
 801b03a:	4603      	mov	r3, r0
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	bd80      	pop	{r7, pc}

0801b040 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b082      	sub	sp, #8
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d106      	bne.n	801b05c <ip_frag_free_pbuf_custom_ref+0x1c>
 801b04e:	4b07      	ldr	r3, [pc, #28]	; (801b06c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b050:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b054:	4906      	ldr	r1, [pc, #24]	; (801b070 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b056:	4807      	ldr	r0, [pc, #28]	; (801b074 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b058:	f000 fffc 	bl	801c054 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b05c:	6879      	ldr	r1, [r7, #4]
 801b05e:	2005      	movs	r0, #5
 801b060:	f7f5 f97a 	bl	8010358 <memp_free>
}
 801b064:	bf00      	nop
 801b066:	3708      	adds	r7, #8
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	0802406c 	.word	0x0802406c
 801b070:	08024224 	.word	0x08024224
 801b074:	080240b4 	.word	0x080240b4

0801b078 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d106      	bne.n	801b098 <ipfrag_free_pbuf_custom+0x20>
 801b08a:	4b11      	ldr	r3, [pc, #68]	; (801b0d0 <ipfrag_free_pbuf_custom+0x58>)
 801b08c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b090:	4910      	ldr	r1, [pc, #64]	; (801b0d4 <ipfrag_free_pbuf_custom+0x5c>)
 801b092:	4811      	ldr	r0, [pc, #68]	; (801b0d8 <ipfrag_free_pbuf_custom+0x60>)
 801b094:	f000 ffde 	bl	801c054 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b098:	68fa      	ldr	r2, [r7, #12]
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d006      	beq.n	801b0ae <ipfrag_free_pbuf_custom+0x36>
 801b0a0:	4b0b      	ldr	r3, [pc, #44]	; (801b0d0 <ipfrag_free_pbuf_custom+0x58>)
 801b0a2:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b0a6:	490d      	ldr	r1, [pc, #52]	; (801b0dc <ipfrag_free_pbuf_custom+0x64>)
 801b0a8:	480b      	ldr	r0, [pc, #44]	; (801b0d8 <ipfrag_free_pbuf_custom+0x60>)
 801b0aa:	f000 ffd3 	bl	801c054 <iprintf>
  if (pcr->original != NULL) {
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	695b      	ldr	r3, [r3, #20]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d004      	beq.n	801b0c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	695b      	ldr	r3, [r3, #20]
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	f7f5 ff42 	bl	8010f44 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	f7ff ffbd 	bl	801b040 <ip_frag_free_pbuf_custom_ref>
}
 801b0c6:	bf00      	nop
 801b0c8:	3710      	adds	r7, #16
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	bd80      	pop	{r7, pc}
 801b0ce:	bf00      	nop
 801b0d0:	0802406c 	.word	0x0802406c
 801b0d4:	08024230 	.word	0x08024230
 801b0d8:	080240b4 	.word	0x080240b4
 801b0dc:	0802423c 	.word	0x0802423c

0801b0e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b094      	sub	sp, #80	; 0x50
 801b0e4:	af02      	add	r7, sp, #8
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b0f2:	68bb      	ldr	r3, [r7, #8]
 801b0f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0f6:	3b14      	subs	r3, #20
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	da00      	bge.n	801b0fe <ip4_frag+0x1e>
 801b0fc:	3307      	adds	r3, #7
 801b0fe:	10db      	asrs	r3, r3, #3
 801b100:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b102:	2314      	movs	r3, #20
 801b104:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	685b      	ldr	r3, [r3, #4]
 801b10a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b10e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	f003 030f 	and.w	r3, r3, #15
 801b118:	b2db      	uxtb	r3, r3
 801b11a:	009b      	lsls	r3, r3, #2
 801b11c:	b2db      	uxtb	r3, r3
 801b11e:	2b14      	cmp	r3, #20
 801b120:	d002      	beq.n	801b128 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b122:	f06f 0305 	mvn.w	r3, #5
 801b126:	e10f      	b.n	801b348 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	895b      	ldrh	r3, [r3, #10]
 801b12c:	2b13      	cmp	r3, #19
 801b12e:	d809      	bhi.n	801b144 <ip4_frag+0x64>
 801b130:	4b87      	ldr	r3, [pc, #540]	; (801b350 <ip4_frag+0x270>)
 801b132:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b136:	4987      	ldr	r1, [pc, #540]	; (801b354 <ip4_frag+0x274>)
 801b138:	4887      	ldr	r0, [pc, #540]	; (801b358 <ip4_frag+0x278>)
 801b13a:	f000 ff8b 	bl	801c054 <iprintf>
 801b13e:	f06f 0305 	mvn.w	r3, #5
 801b142:	e101      	b.n	801b348 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b146:	88db      	ldrh	r3, [r3, #6]
 801b148:	b29b      	uxth	r3, r3
 801b14a:	4618      	mov	r0, r3
 801b14c:	f7f4 fc62 	bl	800fa14 <lwip_htons>
 801b150:	4603      	mov	r3, r0
 801b152:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b154:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b156:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b15a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b15e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b164:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	891b      	ldrh	r3, [r3, #8]
 801b16a:	3b14      	subs	r3, #20
 801b16c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b170:	e0e0      	b.n	801b334 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b172:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b174:	00db      	lsls	r3, r3, #3
 801b176:	b29b      	uxth	r3, r3
 801b178:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b17c:	4293      	cmp	r3, r2
 801b17e:	bf28      	it	cs
 801b180:	4613      	movcs	r3, r2
 801b182:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b184:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b188:	2114      	movs	r1, #20
 801b18a:	200e      	movs	r0, #14
 801b18c:	f7f5 fbfa 	bl	8010984 <pbuf_alloc>
 801b190:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b194:	2b00      	cmp	r3, #0
 801b196:	f000 80d4 	beq.w	801b342 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19c:	895b      	ldrh	r3, [r3, #10]
 801b19e:	2b13      	cmp	r3, #19
 801b1a0:	d806      	bhi.n	801b1b0 <ip4_frag+0xd0>
 801b1a2:	4b6b      	ldr	r3, [pc, #428]	; (801b350 <ip4_frag+0x270>)
 801b1a4:	f240 3225 	movw	r2, #805	; 0x325
 801b1a8:	496c      	ldr	r1, [pc, #432]	; (801b35c <ip4_frag+0x27c>)
 801b1aa:	486b      	ldr	r0, [pc, #428]	; (801b358 <ip4_frag+0x278>)
 801b1ac:	f000 ff52 	bl	801c054 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	2214      	movs	r2, #20
 801b1b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f000 fa1a 	bl	801b5f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1c0:	685b      	ldr	r3, [r3, #4]
 801b1c2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b1c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b1c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b1ca:	e064      	b.n	801b296 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	895a      	ldrh	r2, [r3, #10]
 801b1d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b1d2:	1ad3      	subs	r3, r2, r3
 801b1d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	895b      	ldrh	r3, [r3, #10]
 801b1da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	d906      	bls.n	801b1ee <ip4_frag+0x10e>
 801b1e0:	4b5b      	ldr	r3, [pc, #364]	; (801b350 <ip4_frag+0x270>)
 801b1e2:	f240 322d 	movw	r2, #813	; 0x32d
 801b1e6:	495e      	ldr	r1, [pc, #376]	; (801b360 <ip4_frag+0x280>)
 801b1e8:	485b      	ldr	r0, [pc, #364]	; (801b358 <ip4_frag+0x278>)
 801b1ea:	f000 ff33 	bl	801c054 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b1ee:	8bfa      	ldrh	r2, [r7, #30]
 801b1f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b1f4:	4293      	cmp	r3, r2
 801b1f6:	bf28      	it	cs
 801b1f8:	4613      	movcs	r3, r2
 801b1fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b1fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b202:	2b00      	cmp	r3, #0
 801b204:	d105      	bne.n	801b212 <ip4_frag+0x132>
        poff = 0;
 801b206:	2300      	movs	r3, #0
 801b208:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	60fb      	str	r3, [r7, #12]
        continue;
 801b210:	e041      	b.n	801b296 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b212:	f7ff ff0d 	bl	801b030 <ip_frag_alloc_pbuf_custom_ref>
 801b216:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b218:	69bb      	ldr	r3, [r7, #24]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d103      	bne.n	801b226 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b220:	f7f5 fe90 	bl	8010f44 <pbuf_free>
        goto memerr;
 801b224:	e08e      	b.n	801b344 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b226:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b22c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b22e:	4413      	add	r3, r2
 801b230:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b234:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b238:	9201      	str	r2, [sp, #4]
 801b23a:	9300      	str	r3, [sp, #0]
 801b23c:	4603      	mov	r3, r0
 801b23e:	2241      	movs	r2, #65	; 0x41
 801b240:	2000      	movs	r0, #0
 801b242:	f7f5 fcc5 	bl	8010bd0 <pbuf_alloced_custom>
 801b246:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d106      	bne.n	801b25c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b24e:	69b8      	ldr	r0, [r7, #24]
 801b250:	f7ff fef6 	bl	801b040 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b256:	f7f5 fe75 	bl	8010f44 <pbuf_free>
        goto memerr;
 801b25a:	e073      	b.n	801b344 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801b25c:	68f8      	ldr	r0, [r7, #12]
 801b25e:	f7f5 ff11 	bl	8011084 <pbuf_ref>
      pcr->original = p;
 801b262:	69bb      	ldr	r3, [r7, #24]
 801b264:	68fa      	ldr	r2, [r7, #12]
 801b266:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b268:	69bb      	ldr	r3, [r7, #24]
 801b26a:	4a3e      	ldr	r2, [pc, #248]	; (801b364 <ip4_frag+0x284>)
 801b26c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b26e:	6979      	ldr	r1, [r7, #20]
 801b270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b272:	f7f5 ff29 	bl	80110c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b276:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b27a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b27e:	1ad3      	subs	r3, r2, r3
 801b280:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b284:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d004      	beq.n	801b296 <ip4_frag+0x1b6>
        poff = 0;
 801b28c:	2300      	movs	r3, #0
 801b28e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b296:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d196      	bne.n	801b1cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b29e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b2a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b2a4:	4413      	add	r3, r2
 801b2a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b2a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b2ac:	68bb      	ldr	r3, [r7, #8]
 801b2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2b0:	3b14      	subs	r3, #20
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	bfd4      	ite	le
 801b2b6:	2301      	movle	r3, #1
 801b2b8:	2300      	movgt	r3, #0
 801b2ba:	b2db      	uxtb	r3, r3
 801b2bc:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b2be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b2c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b2c8:	6a3b      	ldr	r3, [r7, #32]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d002      	beq.n	801b2d4 <ip4_frag+0x1f4>
 801b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d003      	beq.n	801b2dc <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b2d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b2d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b2da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b2dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f7f4 fb98 	bl	800fa14 <lwip_htons>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	461a      	mov	r2, r3
 801b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2ea:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b2ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b2ee:	3314      	adds	r3, #20
 801b2f0:	b29b      	uxth	r3, r3
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	f7f4 fb8e 	bl	800fa14 <lwip_htons>
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	461a      	mov	r2, r3
 801b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2fe:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b302:	2200      	movs	r2, #0
 801b304:	729a      	strb	r2, [r3, #10]
 801b306:	2200      	movs	r2, #0
 801b308:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	695b      	ldr	r3, [r3, #20]
 801b30e:	687a      	ldr	r2, [r7, #4]
 801b310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b312:	68b8      	ldr	r0, [r7, #8]
 801b314:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b318:	f7f5 fe14 	bl	8010f44 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b31c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b322:	1ad3      	subs	r3, r2, r3
 801b324:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b328:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b32c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b32e:	4413      	add	r3, r2
 801b330:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b334:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b338:	2b00      	cmp	r3, #0
 801b33a:	f47f af1a 	bne.w	801b172 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b33e:	2300      	movs	r3, #0
 801b340:	e002      	b.n	801b348 <ip4_frag+0x268>
      goto memerr;
 801b342:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b344:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b348:	4618      	mov	r0, r3
 801b34a:	3748      	adds	r7, #72	; 0x48
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}
 801b350:	0802406c 	.word	0x0802406c
 801b354:	08024248 	.word	0x08024248
 801b358:	080240b4 	.word	0x080240b4
 801b35c:	08024264 	.word	0x08024264
 801b360:	08024284 	.word	0x08024284
 801b364:	0801b079 	.word	0x0801b079

0801b368 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b086      	sub	sp, #24
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
 801b370:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b372:	230e      	movs	r3, #14
 801b374:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	895b      	ldrh	r3, [r3, #10]
 801b37a:	2b0e      	cmp	r3, #14
 801b37c:	d96e      	bls.n	801b45c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	7bdb      	ldrb	r3, [r3, #15]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d106      	bne.n	801b394 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b386:	683b      	ldr	r3, [r7, #0]
 801b388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b38c:	3301      	adds	r3, #1
 801b38e:	b2da      	uxtb	r2, r3
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	685b      	ldr	r3, [r3, #4]
 801b398:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b39a:	693b      	ldr	r3, [r7, #16]
 801b39c:	7b1a      	ldrb	r2, [r3, #12]
 801b39e:	7b5b      	ldrb	r3, [r3, #13]
 801b3a0:	021b      	lsls	r3, r3, #8
 801b3a2:	4313      	orrs	r3, r2
 801b3a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b3a6:	693b      	ldr	r3, [r7, #16]
 801b3a8:	781b      	ldrb	r3, [r3, #0]
 801b3aa:	f003 0301 	and.w	r3, r3, #1
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d023      	beq.n	801b3fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b3b2:	693b      	ldr	r3, [r7, #16]
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	2b01      	cmp	r3, #1
 801b3b8:	d10f      	bne.n	801b3da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3ba:	693b      	ldr	r3, [r7, #16]
 801b3bc:	785b      	ldrb	r3, [r3, #1]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d11b      	bne.n	801b3fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3c6:	2b5e      	cmp	r3, #94	; 0x5e
 801b3c8:	d117      	bne.n	801b3fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	7b5b      	ldrb	r3, [r3, #13]
 801b3ce:	f043 0310 	orr.w	r3, r3, #16
 801b3d2:	b2da      	uxtb	r2, r3
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	735a      	strb	r2, [r3, #13]
 801b3d8:	e00f      	b.n	801b3fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	2206      	movs	r2, #6
 801b3de:	4928      	ldr	r1, [pc, #160]	; (801b480 <ethernet_input+0x118>)
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	f000 f8f7 	bl	801b5d4 <memcmp>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d106      	bne.n	801b3fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	7b5b      	ldrb	r3, [r3, #13]
 801b3f0:	f043 0308 	orr.w	r3, r3, #8
 801b3f4:	b2da      	uxtb	r2, r3
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b3fa:	89fb      	ldrh	r3, [r7, #14]
 801b3fc:	2b08      	cmp	r3, #8
 801b3fe:	d003      	beq.n	801b408 <ethernet_input+0xa0>
 801b400:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b404:	d014      	beq.n	801b430 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b406:	e032      	b.n	801b46e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b408:	683b      	ldr	r3, [r7, #0]
 801b40a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b40e:	f003 0308 	and.w	r3, r3, #8
 801b412:	2b00      	cmp	r3, #0
 801b414:	d024      	beq.n	801b460 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b416:	8afb      	ldrh	r3, [r7, #22]
 801b418:	4619      	mov	r1, r3
 801b41a:	6878      	ldr	r0, [r7, #4]
 801b41c:	f7f5 fd0c 	bl	8010e38 <pbuf_remove_header>
 801b420:	4603      	mov	r3, r0
 801b422:	2b00      	cmp	r3, #0
 801b424:	d11e      	bne.n	801b464 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b426:	6839      	ldr	r1, [r7, #0]
 801b428:	6878      	ldr	r0, [r7, #4]
 801b42a:	f7fe ff0f 	bl	801a24c <ip4_input>
      break;
 801b42e:	e013      	b.n	801b458 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b430:	683b      	ldr	r3, [r7, #0]
 801b432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b436:	f003 0308 	and.w	r3, r3, #8
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d014      	beq.n	801b468 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b43e:	8afb      	ldrh	r3, [r7, #22]
 801b440:	4619      	mov	r1, r3
 801b442:	6878      	ldr	r0, [r7, #4]
 801b444:	f7f5 fcf8 	bl	8010e38 <pbuf_remove_header>
 801b448:	4603      	mov	r3, r0
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d10e      	bne.n	801b46c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b44e:	6839      	ldr	r1, [r7, #0]
 801b450:	6878      	ldr	r0, [r7, #4]
 801b452:	f7fe f8ab 	bl	80195ac <etharp_input>
      break;
 801b456:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b458:	2300      	movs	r3, #0
 801b45a:	e00c      	b.n	801b476 <ethernet_input+0x10e>
    goto free_and_return;
 801b45c:	bf00      	nop
 801b45e:	e006      	b.n	801b46e <ethernet_input+0x106>
        goto free_and_return;
 801b460:	bf00      	nop
 801b462:	e004      	b.n	801b46e <ethernet_input+0x106>
        goto free_and_return;
 801b464:	bf00      	nop
 801b466:	e002      	b.n	801b46e <ethernet_input+0x106>
        goto free_and_return;
 801b468:	bf00      	nop
 801b46a:	e000      	b.n	801b46e <ethernet_input+0x106>
        goto free_and_return;
 801b46c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b46e:	6878      	ldr	r0, [r7, #4]
 801b470:	f7f5 fd68 	bl	8010f44 <pbuf_free>
  return ERR_OK;
 801b474:	2300      	movs	r3, #0
}
 801b476:	4618      	mov	r0, r3
 801b478:	3718      	adds	r7, #24
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd80      	pop	{r7, pc}
 801b47e:	bf00      	nop
 801b480:	08024988 	.word	0x08024988

0801b484 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b484:	b580      	push	{r7, lr}
 801b486:	b086      	sub	sp, #24
 801b488:	af00      	add	r7, sp, #0
 801b48a:	60f8      	str	r0, [r7, #12]
 801b48c:	60b9      	str	r1, [r7, #8]
 801b48e:	607a      	str	r2, [r7, #4]
 801b490:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b492:	8c3b      	ldrh	r3, [r7, #32]
 801b494:	4618      	mov	r0, r3
 801b496:	f7f4 fabd 	bl	800fa14 <lwip_htons>
 801b49a:	4603      	mov	r3, r0
 801b49c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b49e:	210e      	movs	r1, #14
 801b4a0:	68b8      	ldr	r0, [r7, #8]
 801b4a2:	f7f5 fcb9 	bl	8010e18 <pbuf_add_header>
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d125      	bne.n	801b4f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	685b      	ldr	r3, [r3, #4]
 801b4b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	8afa      	ldrh	r2, [r7, #22]
 801b4b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b4b8:	693b      	ldr	r3, [r7, #16]
 801b4ba:	2206      	movs	r2, #6
 801b4bc:	6839      	ldr	r1, [r7, #0]
 801b4be:	4618      	mov	r0, r3
 801b4c0:	f000 f897 	bl	801b5f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	3306      	adds	r3, #6
 801b4c8:	2206      	movs	r2, #6
 801b4ca:	6879      	ldr	r1, [r7, #4]
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f000 f890 	bl	801b5f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b4d8:	2b06      	cmp	r3, #6
 801b4da:	d006      	beq.n	801b4ea <ethernet_output+0x66>
 801b4dc:	4b0a      	ldr	r3, [pc, #40]	; (801b508 <ethernet_output+0x84>)
 801b4de:	f240 1233 	movw	r2, #307	; 0x133
 801b4e2:	490a      	ldr	r1, [pc, #40]	; (801b50c <ethernet_output+0x88>)
 801b4e4:	480a      	ldr	r0, [pc, #40]	; (801b510 <ethernet_output+0x8c>)
 801b4e6:	f000 fdb5 	bl	801c054 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	699b      	ldr	r3, [r3, #24]
 801b4ee:	68b9      	ldr	r1, [r7, #8]
 801b4f0:	68f8      	ldr	r0, [r7, #12]
 801b4f2:	4798      	blx	r3
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	e002      	b.n	801b4fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b4f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b4fa:	f06f 0301 	mvn.w	r3, #1
}
 801b4fe:	4618      	mov	r0, r3
 801b500:	3718      	adds	r7, #24
 801b502:	46bd      	mov	sp, r7
 801b504:	bd80      	pop	{r7, pc}
 801b506:	bf00      	nop
 801b508:	08024294 	.word	0x08024294
 801b50c:	080242cc 	.word	0x080242cc
 801b510:	08024300 	.word	0x08024300

0801b514 <atof>:
 801b514:	2100      	movs	r1, #0
 801b516:	f001 bc8b 	b.w	801ce30 <strtod>

0801b51a <atoi>:
 801b51a:	220a      	movs	r2, #10
 801b51c:	2100      	movs	r1, #0
 801b51e:	f001 bd17 	b.w	801cf50 <strtol>
	...

0801b524 <__libc_init_array>:
 801b524:	b570      	push	{r4, r5, r6, lr}
 801b526:	4e0d      	ldr	r6, [pc, #52]	; (801b55c <__libc_init_array+0x38>)
 801b528:	4c0d      	ldr	r4, [pc, #52]	; (801b560 <__libc_init_array+0x3c>)
 801b52a:	1ba4      	subs	r4, r4, r6
 801b52c:	10a4      	asrs	r4, r4, #2
 801b52e:	2500      	movs	r5, #0
 801b530:	42a5      	cmp	r5, r4
 801b532:	d109      	bne.n	801b548 <__libc_init_array+0x24>
 801b534:	4e0b      	ldr	r6, [pc, #44]	; (801b564 <__libc_init_array+0x40>)
 801b536:	4c0c      	ldr	r4, [pc, #48]	; (801b568 <__libc_init_array+0x44>)
 801b538:	f005 f91e 	bl	8020778 <_init>
 801b53c:	1ba4      	subs	r4, r4, r6
 801b53e:	10a4      	asrs	r4, r4, #2
 801b540:	2500      	movs	r5, #0
 801b542:	42a5      	cmp	r5, r4
 801b544:	d105      	bne.n	801b552 <__libc_init_array+0x2e>
 801b546:	bd70      	pop	{r4, r5, r6, pc}
 801b548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b54c:	4798      	blx	r3
 801b54e:	3501      	adds	r5, #1
 801b550:	e7ee      	b.n	801b530 <__libc_init_array+0xc>
 801b552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b556:	4798      	blx	r3
 801b558:	3501      	adds	r5, #1
 801b55a:	e7f2      	b.n	801b542 <__libc_init_array+0x1e>
 801b55c:	08024d00 	.word	0x08024d00
 801b560:	08024d00 	.word	0x08024d00
 801b564:	08024d00 	.word	0x08024d00
 801b568:	08024d04 	.word	0x08024d04

0801b56c <__locale_ctype_ptr_l>:
 801b56c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801b570:	4770      	bx	lr
	...

0801b574 <__locale_ctype_ptr>:
 801b574:	4b04      	ldr	r3, [pc, #16]	; (801b588 <__locale_ctype_ptr+0x14>)
 801b576:	4a05      	ldr	r2, [pc, #20]	; (801b58c <__locale_ctype_ptr+0x18>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	6a1b      	ldr	r3, [r3, #32]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	bf08      	it	eq
 801b580:	4613      	moveq	r3, r2
 801b582:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801b586:	4770      	bx	lr
 801b588:	20000084 	.word	0x20000084
 801b58c:	200000e8 	.word	0x200000e8

0801b590 <malloc>:
 801b590:	4b02      	ldr	r3, [pc, #8]	; (801b59c <malloc+0xc>)
 801b592:	4601      	mov	r1, r0
 801b594:	6818      	ldr	r0, [r3, #0]
 801b596:	f000 b8a7 	b.w	801b6e8 <_malloc_r>
 801b59a:	bf00      	nop
 801b59c:	20000084 	.word	0x20000084

0801b5a0 <free>:
 801b5a0:	4b02      	ldr	r3, [pc, #8]	; (801b5ac <free+0xc>)
 801b5a2:	4601      	mov	r1, r0
 801b5a4:	6818      	ldr	r0, [r3, #0]
 801b5a6:	f000 b851 	b.w	801b64c <_free_r>
 801b5aa:	bf00      	nop
 801b5ac:	20000084 	.word	0x20000084

0801b5b0 <__ascii_mbtowc>:
 801b5b0:	b082      	sub	sp, #8
 801b5b2:	b901      	cbnz	r1, 801b5b6 <__ascii_mbtowc+0x6>
 801b5b4:	a901      	add	r1, sp, #4
 801b5b6:	b142      	cbz	r2, 801b5ca <__ascii_mbtowc+0x1a>
 801b5b8:	b14b      	cbz	r3, 801b5ce <__ascii_mbtowc+0x1e>
 801b5ba:	7813      	ldrb	r3, [r2, #0]
 801b5bc:	600b      	str	r3, [r1, #0]
 801b5be:	7812      	ldrb	r2, [r2, #0]
 801b5c0:	1c10      	adds	r0, r2, #0
 801b5c2:	bf18      	it	ne
 801b5c4:	2001      	movne	r0, #1
 801b5c6:	b002      	add	sp, #8
 801b5c8:	4770      	bx	lr
 801b5ca:	4610      	mov	r0, r2
 801b5cc:	e7fb      	b.n	801b5c6 <__ascii_mbtowc+0x16>
 801b5ce:	f06f 0001 	mvn.w	r0, #1
 801b5d2:	e7f8      	b.n	801b5c6 <__ascii_mbtowc+0x16>

0801b5d4 <memcmp>:
 801b5d4:	b530      	push	{r4, r5, lr}
 801b5d6:	2400      	movs	r4, #0
 801b5d8:	42a2      	cmp	r2, r4
 801b5da:	d101      	bne.n	801b5e0 <memcmp+0xc>
 801b5dc:	2000      	movs	r0, #0
 801b5de:	e007      	b.n	801b5f0 <memcmp+0x1c>
 801b5e0:	5d03      	ldrb	r3, [r0, r4]
 801b5e2:	3401      	adds	r4, #1
 801b5e4:	190d      	adds	r5, r1, r4
 801b5e6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801b5ea:	42ab      	cmp	r3, r5
 801b5ec:	d0f4      	beq.n	801b5d8 <memcmp+0x4>
 801b5ee:	1b58      	subs	r0, r3, r5
 801b5f0:	bd30      	pop	{r4, r5, pc}

0801b5f2 <memcpy>:
 801b5f2:	b510      	push	{r4, lr}
 801b5f4:	1e43      	subs	r3, r0, #1
 801b5f6:	440a      	add	r2, r1
 801b5f8:	4291      	cmp	r1, r2
 801b5fa:	d100      	bne.n	801b5fe <memcpy+0xc>
 801b5fc:	bd10      	pop	{r4, pc}
 801b5fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b602:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b606:	e7f7      	b.n	801b5f8 <memcpy+0x6>

0801b608 <memmove>:
 801b608:	4288      	cmp	r0, r1
 801b60a:	b510      	push	{r4, lr}
 801b60c:	eb01 0302 	add.w	r3, r1, r2
 801b610:	d807      	bhi.n	801b622 <memmove+0x1a>
 801b612:	1e42      	subs	r2, r0, #1
 801b614:	4299      	cmp	r1, r3
 801b616:	d00a      	beq.n	801b62e <memmove+0x26>
 801b618:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b61c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b620:	e7f8      	b.n	801b614 <memmove+0xc>
 801b622:	4283      	cmp	r3, r0
 801b624:	d9f5      	bls.n	801b612 <memmove+0xa>
 801b626:	1881      	adds	r1, r0, r2
 801b628:	1ad2      	subs	r2, r2, r3
 801b62a:	42d3      	cmn	r3, r2
 801b62c:	d100      	bne.n	801b630 <memmove+0x28>
 801b62e:	bd10      	pop	{r4, pc}
 801b630:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b634:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b638:	e7f7      	b.n	801b62a <memmove+0x22>

0801b63a <memset>:
 801b63a:	4402      	add	r2, r0
 801b63c:	4603      	mov	r3, r0
 801b63e:	4293      	cmp	r3, r2
 801b640:	d100      	bne.n	801b644 <memset+0xa>
 801b642:	4770      	bx	lr
 801b644:	f803 1b01 	strb.w	r1, [r3], #1
 801b648:	e7f9      	b.n	801b63e <memset+0x4>
	...

0801b64c <_free_r>:
 801b64c:	b538      	push	{r3, r4, r5, lr}
 801b64e:	4605      	mov	r5, r0
 801b650:	2900      	cmp	r1, #0
 801b652:	d045      	beq.n	801b6e0 <_free_r+0x94>
 801b654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b658:	1f0c      	subs	r4, r1, #4
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	bfb8      	it	lt
 801b65e:	18e4      	addlt	r4, r4, r3
 801b660:	f002 fede 	bl	801e420 <__malloc_lock>
 801b664:	4a1f      	ldr	r2, [pc, #124]	; (801b6e4 <_free_r+0x98>)
 801b666:	6813      	ldr	r3, [r2, #0]
 801b668:	4610      	mov	r0, r2
 801b66a:	b933      	cbnz	r3, 801b67a <_free_r+0x2e>
 801b66c:	6063      	str	r3, [r4, #4]
 801b66e:	6014      	str	r4, [r2, #0]
 801b670:	4628      	mov	r0, r5
 801b672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b676:	f002 bed4 	b.w	801e422 <__malloc_unlock>
 801b67a:	42a3      	cmp	r3, r4
 801b67c:	d90c      	bls.n	801b698 <_free_r+0x4c>
 801b67e:	6821      	ldr	r1, [r4, #0]
 801b680:	1862      	adds	r2, r4, r1
 801b682:	4293      	cmp	r3, r2
 801b684:	bf04      	itt	eq
 801b686:	681a      	ldreq	r2, [r3, #0]
 801b688:	685b      	ldreq	r3, [r3, #4]
 801b68a:	6063      	str	r3, [r4, #4]
 801b68c:	bf04      	itt	eq
 801b68e:	1852      	addeq	r2, r2, r1
 801b690:	6022      	streq	r2, [r4, #0]
 801b692:	6004      	str	r4, [r0, #0]
 801b694:	e7ec      	b.n	801b670 <_free_r+0x24>
 801b696:	4613      	mov	r3, r2
 801b698:	685a      	ldr	r2, [r3, #4]
 801b69a:	b10a      	cbz	r2, 801b6a0 <_free_r+0x54>
 801b69c:	42a2      	cmp	r2, r4
 801b69e:	d9fa      	bls.n	801b696 <_free_r+0x4a>
 801b6a0:	6819      	ldr	r1, [r3, #0]
 801b6a2:	1858      	adds	r0, r3, r1
 801b6a4:	42a0      	cmp	r0, r4
 801b6a6:	d10b      	bne.n	801b6c0 <_free_r+0x74>
 801b6a8:	6820      	ldr	r0, [r4, #0]
 801b6aa:	4401      	add	r1, r0
 801b6ac:	1858      	adds	r0, r3, r1
 801b6ae:	4282      	cmp	r2, r0
 801b6b0:	6019      	str	r1, [r3, #0]
 801b6b2:	d1dd      	bne.n	801b670 <_free_r+0x24>
 801b6b4:	6810      	ldr	r0, [r2, #0]
 801b6b6:	6852      	ldr	r2, [r2, #4]
 801b6b8:	605a      	str	r2, [r3, #4]
 801b6ba:	4401      	add	r1, r0
 801b6bc:	6019      	str	r1, [r3, #0]
 801b6be:	e7d7      	b.n	801b670 <_free_r+0x24>
 801b6c0:	d902      	bls.n	801b6c8 <_free_r+0x7c>
 801b6c2:	230c      	movs	r3, #12
 801b6c4:	602b      	str	r3, [r5, #0]
 801b6c6:	e7d3      	b.n	801b670 <_free_r+0x24>
 801b6c8:	6820      	ldr	r0, [r4, #0]
 801b6ca:	1821      	adds	r1, r4, r0
 801b6cc:	428a      	cmp	r2, r1
 801b6ce:	bf04      	itt	eq
 801b6d0:	6811      	ldreq	r1, [r2, #0]
 801b6d2:	6852      	ldreq	r2, [r2, #4]
 801b6d4:	6062      	str	r2, [r4, #4]
 801b6d6:	bf04      	itt	eq
 801b6d8:	1809      	addeq	r1, r1, r0
 801b6da:	6021      	streq	r1, [r4, #0]
 801b6dc:	605c      	str	r4, [r3, #4]
 801b6de:	e7c7      	b.n	801b670 <_free_r+0x24>
 801b6e0:	bd38      	pop	{r3, r4, r5, pc}
 801b6e2:	bf00      	nop
 801b6e4:	2000117c 	.word	0x2000117c

0801b6e8 <_malloc_r>:
 801b6e8:	b570      	push	{r4, r5, r6, lr}
 801b6ea:	1ccd      	adds	r5, r1, #3
 801b6ec:	f025 0503 	bic.w	r5, r5, #3
 801b6f0:	3508      	adds	r5, #8
 801b6f2:	2d0c      	cmp	r5, #12
 801b6f4:	bf38      	it	cc
 801b6f6:	250c      	movcc	r5, #12
 801b6f8:	2d00      	cmp	r5, #0
 801b6fa:	4606      	mov	r6, r0
 801b6fc:	db01      	blt.n	801b702 <_malloc_r+0x1a>
 801b6fe:	42a9      	cmp	r1, r5
 801b700:	d903      	bls.n	801b70a <_malloc_r+0x22>
 801b702:	230c      	movs	r3, #12
 801b704:	6033      	str	r3, [r6, #0]
 801b706:	2000      	movs	r0, #0
 801b708:	bd70      	pop	{r4, r5, r6, pc}
 801b70a:	f002 fe89 	bl	801e420 <__malloc_lock>
 801b70e:	4a21      	ldr	r2, [pc, #132]	; (801b794 <_malloc_r+0xac>)
 801b710:	6814      	ldr	r4, [r2, #0]
 801b712:	4621      	mov	r1, r4
 801b714:	b991      	cbnz	r1, 801b73c <_malloc_r+0x54>
 801b716:	4c20      	ldr	r4, [pc, #128]	; (801b798 <_malloc_r+0xb0>)
 801b718:	6823      	ldr	r3, [r4, #0]
 801b71a:	b91b      	cbnz	r3, 801b724 <_malloc_r+0x3c>
 801b71c:	4630      	mov	r0, r6
 801b71e:	f000 fce5 	bl	801c0ec <_sbrk_r>
 801b722:	6020      	str	r0, [r4, #0]
 801b724:	4629      	mov	r1, r5
 801b726:	4630      	mov	r0, r6
 801b728:	f000 fce0 	bl	801c0ec <_sbrk_r>
 801b72c:	1c43      	adds	r3, r0, #1
 801b72e:	d124      	bne.n	801b77a <_malloc_r+0x92>
 801b730:	230c      	movs	r3, #12
 801b732:	6033      	str	r3, [r6, #0]
 801b734:	4630      	mov	r0, r6
 801b736:	f002 fe74 	bl	801e422 <__malloc_unlock>
 801b73a:	e7e4      	b.n	801b706 <_malloc_r+0x1e>
 801b73c:	680b      	ldr	r3, [r1, #0]
 801b73e:	1b5b      	subs	r3, r3, r5
 801b740:	d418      	bmi.n	801b774 <_malloc_r+0x8c>
 801b742:	2b0b      	cmp	r3, #11
 801b744:	d90f      	bls.n	801b766 <_malloc_r+0x7e>
 801b746:	600b      	str	r3, [r1, #0]
 801b748:	50cd      	str	r5, [r1, r3]
 801b74a:	18cc      	adds	r4, r1, r3
 801b74c:	4630      	mov	r0, r6
 801b74e:	f002 fe68 	bl	801e422 <__malloc_unlock>
 801b752:	f104 000b 	add.w	r0, r4, #11
 801b756:	1d23      	adds	r3, r4, #4
 801b758:	f020 0007 	bic.w	r0, r0, #7
 801b75c:	1ac3      	subs	r3, r0, r3
 801b75e:	d0d3      	beq.n	801b708 <_malloc_r+0x20>
 801b760:	425a      	negs	r2, r3
 801b762:	50e2      	str	r2, [r4, r3]
 801b764:	e7d0      	b.n	801b708 <_malloc_r+0x20>
 801b766:	428c      	cmp	r4, r1
 801b768:	684b      	ldr	r3, [r1, #4]
 801b76a:	bf16      	itet	ne
 801b76c:	6063      	strne	r3, [r4, #4]
 801b76e:	6013      	streq	r3, [r2, #0]
 801b770:	460c      	movne	r4, r1
 801b772:	e7eb      	b.n	801b74c <_malloc_r+0x64>
 801b774:	460c      	mov	r4, r1
 801b776:	6849      	ldr	r1, [r1, #4]
 801b778:	e7cc      	b.n	801b714 <_malloc_r+0x2c>
 801b77a:	1cc4      	adds	r4, r0, #3
 801b77c:	f024 0403 	bic.w	r4, r4, #3
 801b780:	42a0      	cmp	r0, r4
 801b782:	d005      	beq.n	801b790 <_malloc_r+0xa8>
 801b784:	1a21      	subs	r1, r4, r0
 801b786:	4630      	mov	r0, r6
 801b788:	f000 fcb0 	bl	801c0ec <_sbrk_r>
 801b78c:	3001      	adds	r0, #1
 801b78e:	d0cf      	beq.n	801b730 <_malloc_r+0x48>
 801b790:	6025      	str	r5, [r4, #0]
 801b792:	e7db      	b.n	801b74c <_malloc_r+0x64>
 801b794:	2000117c 	.word	0x2000117c
 801b798:	20001180 	.word	0x20001180

0801b79c <__cvt>:
 801b79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7a0:	ec55 4b10 	vmov	r4, r5, d0
 801b7a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b7a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b7aa:	2d00      	cmp	r5, #0
 801b7ac:	460e      	mov	r6, r1
 801b7ae:	4691      	mov	r9, r2
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	bfb8      	it	lt
 801b7b4:	4622      	movlt	r2, r4
 801b7b6:	462b      	mov	r3, r5
 801b7b8:	f027 0720 	bic.w	r7, r7, #32
 801b7bc:	bfbb      	ittet	lt
 801b7be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b7c2:	461d      	movlt	r5, r3
 801b7c4:	2300      	movge	r3, #0
 801b7c6:	232d      	movlt	r3, #45	; 0x2d
 801b7c8:	bfb8      	it	lt
 801b7ca:	4614      	movlt	r4, r2
 801b7cc:	2f46      	cmp	r7, #70	; 0x46
 801b7ce:	700b      	strb	r3, [r1, #0]
 801b7d0:	d004      	beq.n	801b7dc <__cvt+0x40>
 801b7d2:	2f45      	cmp	r7, #69	; 0x45
 801b7d4:	d100      	bne.n	801b7d8 <__cvt+0x3c>
 801b7d6:	3601      	adds	r6, #1
 801b7d8:	2102      	movs	r1, #2
 801b7da:	e000      	b.n	801b7de <__cvt+0x42>
 801b7dc:	2103      	movs	r1, #3
 801b7de:	ab03      	add	r3, sp, #12
 801b7e0:	9301      	str	r3, [sp, #4]
 801b7e2:	ab02      	add	r3, sp, #8
 801b7e4:	9300      	str	r3, [sp, #0]
 801b7e6:	4632      	mov	r2, r6
 801b7e8:	4653      	mov	r3, sl
 801b7ea:	ec45 4b10 	vmov	d0, r4, r5
 801b7ee:	f001 fc5f 	bl	801d0b0 <_dtoa_r>
 801b7f2:	2f47      	cmp	r7, #71	; 0x47
 801b7f4:	4680      	mov	r8, r0
 801b7f6:	d102      	bne.n	801b7fe <__cvt+0x62>
 801b7f8:	f019 0f01 	tst.w	r9, #1
 801b7fc:	d026      	beq.n	801b84c <__cvt+0xb0>
 801b7fe:	2f46      	cmp	r7, #70	; 0x46
 801b800:	eb08 0906 	add.w	r9, r8, r6
 801b804:	d111      	bne.n	801b82a <__cvt+0x8e>
 801b806:	f898 3000 	ldrb.w	r3, [r8]
 801b80a:	2b30      	cmp	r3, #48	; 0x30
 801b80c:	d10a      	bne.n	801b824 <__cvt+0x88>
 801b80e:	2200      	movs	r2, #0
 801b810:	2300      	movs	r3, #0
 801b812:	4620      	mov	r0, r4
 801b814:	4629      	mov	r1, r5
 801b816:	f7e5 f967 	bl	8000ae8 <__aeabi_dcmpeq>
 801b81a:	b918      	cbnz	r0, 801b824 <__cvt+0x88>
 801b81c:	f1c6 0601 	rsb	r6, r6, #1
 801b820:	f8ca 6000 	str.w	r6, [sl]
 801b824:	f8da 3000 	ldr.w	r3, [sl]
 801b828:	4499      	add	r9, r3
 801b82a:	2200      	movs	r2, #0
 801b82c:	2300      	movs	r3, #0
 801b82e:	4620      	mov	r0, r4
 801b830:	4629      	mov	r1, r5
 801b832:	f7e5 f959 	bl	8000ae8 <__aeabi_dcmpeq>
 801b836:	b938      	cbnz	r0, 801b848 <__cvt+0xac>
 801b838:	2230      	movs	r2, #48	; 0x30
 801b83a:	9b03      	ldr	r3, [sp, #12]
 801b83c:	454b      	cmp	r3, r9
 801b83e:	d205      	bcs.n	801b84c <__cvt+0xb0>
 801b840:	1c59      	adds	r1, r3, #1
 801b842:	9103      	str	r1, [sp, #12]
 801b844:	701a      	strb	r2, [r3, #0]
 801b846:	e7f8      	b.n	801b83a <__cvt+0x9e>
 801b848:	f8cd 900c 	str.w	r9, [sp, #12]
 801b84c:	9b03      	ldr	r3, [sp, #12]
 801b84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b850:	eba3 0308 	sub.w	r3, r3, r8
 801b854:	4640      	mov	r0, r8
 801b856:	6013      	str	r3, [r2, #0]
 801b858:	b004      	add	sp, #16
 801b85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b85e <__exponent>:
 801b85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b860:	2900      	cmp	r1, #0
 801b862:	4604      	mov	r4, r0
 801b864:	bfba      	itte	lt
 801b866:	4249      	neglt	r1, r1
 801b868:	232d      	movlt	r3, #45	; 0x2d
 801b86a:	232b      	movge	r3, #43	; 0x2b
 801b86c:	2909      	cmp	r1, #9
 801b86e:	f804 2b02 	strb.w	r2, [r4], #2
 801b872:	7043      	strb	r3, [r0, #1]
 801b874:	dd20      	ble.n	801b8b8 <__exponent+0x5a>
 801b876:	f10d 0307 	add.w	r3, sp, #7
 801b87a:	461f      	mov	r7, r3
 801b87c:	260a      	movs	r6, #10
 801b87e:	fb91 f5f6 	sdiv	r5, r1, r6
 801b882:	fb06 1115 	mls	r1, r6, r5, r1
 801b886:	3130      	adds	r1, #48	; 0x30
 801b888:	2d09      	cmp	r5, #9
 801b88a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b88e:	f103 32ff 	add.w	r2, r3, #4294967295
 801b892:	4629      	mov	r1, r5
 801b894:	dc09      	bgt.n	801b8aa <__exponent+0x4c>
 801b896:	3130      	adds	r1, #48	; 0x30
 801b898:	3b02      	subs	r3, #2
 801b89a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b89e:	42bb      	cmp	r3, r7
 801b8a0:	4622      	mov	r2, r4
 801b8a2:	d304      	bcc.n	801b8ae <__exponent+0x50>
 801b8a4:	1a10      	subs	r0, r2, r0
 801b8a6:	b003      	add	sp, #12
 801b8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8aa:	4613      	mov	r3, r2
 801b8ac:	e7e7      	b.n	801b87e <__exponent+0x20>
 801b8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8b2:	f804 2b01 	strb.w	r2, [r4], #1
 801b8b6:	e7f2      	b.n	801b89e <__exponent+0x40>
 801b8b8:	2330      	movs	r3, #48	; 0x30
 801b8ba:	4419      	add	r1, r3
 801b8bc:	7083      	strb	r3, [r0, #2]
 801b8be:	1d02      	adds	r2, r0, #4
 801b8c0:	70c1      	strb	r1, [r0, #3]
 801b8c2:	e7ef      	b.n	801b8a4 <__exponent+0x46>

0801b8c4 <_printf_float>:
 801b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8c8:	b08d      	sub	sp, #52	; 0x34
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b8d0:	4616      	mov	r6, r2
 801b8d2:	461f      	mov	r7, r3
 801b8d4:	4605      	mov	r5, r0
 801b8d6:	f002 fd95 	bl	801e404 <_localeconv_r>
 801b8da:	6803      	ldr	r3, [r0, #0]
 801b8dc:	9304      	str	r3, [sp, #16]
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f7e4 fc80 	bl	80001e4 <strlen>
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	930a      	str	r3, [sp, #40]	; 0x28
 801b8e8:	f8d8 3000 	ldr.w	r3, [r8]
 801b8ec:	9005      	str	r0, [sp, #20]
 801b8ee:	3307      	adds	r3, #7
 801b8f0:	f023 0307 	bic.w	r3, r3, #7
 801b8f4:	f103 0208 	add.w	r2, r3, #8
 801b8f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b8fc:	f8d4 b000 	ldr.w	fp, [r4]
 801b900:	f8c8 2000 	str.w	r2, [r8]
 801b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b908:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b90c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b914:	9307      	str	r3, [sp, #28]
 801b916:	f8cd 8018 	str.w	r8, [sp, #24]
 801b91a:	f04f 32ff 	mov.w	r2, #4294967295
 801b91e:	4ba7      	ldr	r3, [pc, #668]	; (801bbbc <_printf_float+0x2f8>)
 801b920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b924:	f7e5 f912 	bl	8000b4c <__aeabi_dcmpun>
 801b928:	bb70      	cbnz	r0, 801b988 <_printf_float+0xc4>
 801b92a:	f04f 32ff 	mov.w	r2, #4294967295
 801b92e:	4ba3      	ldr	r3, [pc, #652]	; (801bbbc <_printf_float+0x2f8>)
 801b930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b934:	f7e5 f8ec 	bl	8000b10 <__aeabi_dcmple>
 801b938:	bb30      	cbnz	r0, 801b988 <_printf_float+0xc4>
 801b93a:	2200      	movs	r2, #0
 801b93c:	2300      	movs	r3, #0
 801b93e:	4640      	mov	r0, r8
 801b940:	4649      	mov	r1, r9
 801b942:	f7e5 f8db 	bl	8000afc <__aeabi_dcmplt>
 801b946:	b110      	cbz	r0, 801b94e <_printf_float+0x8a>
 801b948:	232d      	movs	r3, #45	; 0x2d
 801b94a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b94e:	4a9c      	ldr	r2, [pc, #624]	; (801bbc0 <_printf_float+0x2fc>)
 801b950:	4b9c      	ldr	r3, [pc, #624]	; (801bbc4 <_printf_float+0x300>)
 801b952:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b956:	bf8c      	ite	hi
 801b958:	4690      	movhi	r8, r2
 801b95a:	4698      	movls	r8, r3
 801b95c:	2303      	movs	r3, #3
 801b95e:	f02b 0204 	bic.w	r2, fp, #4
 801b962:	6123      	str	r3, [r4, #16]
 801b964:	6022      	str	r2, [r4, #0]
 801b966:	f04f 0900 	mov.w	r9, #0
 801b96a:	9700      	str	r7, [sp, #0]
 801b96c:	4633      	mov	r3, r6
 801b96e:	aa0b      	add	r2, sp, #44	; 0x2c
 801b970:	4621      	mov	r1, r4
 801b972:	4628      	mov	r0, r5
 801b974:	f000 f9e6 	bl	801bd44 <_printf_common>
 801b978:	3001      	adds	r0, #1
 801b97a:	f040 808d 	bne.w	801ba98 <_printf_float+0x1d4>
 801b97e:	f04f 30ff 	mov.w	r0, #4294967295
 801b982:	b00d      	add	sp, #52	; 0x34
 801b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b988:	4642      	mov	r2, r8
 801b98a:	464b      	mov	r3, r9
 801b98c:	4640      	mov	r0, r8
 801b98e:	4649      	mov	r1, r9
 801b990:	f7e5 f8dc 	bl	8000b4c <__aeabi_dcmpun>
 801b994:	b110      	cbz	r0, 801b99c <_printf_float+0xd8>
 801b996:	4a8c      	ldr	r2, [pc, #560]	; (801bbc8 <_printf_float+0x304>)
 801b998:	4b8c      	ldr	r3, [pc, #560]	; (801bbcc <_printf_float+0x308>)
 801b99a:	e7da      	b.n	801b952 <_printf_float+0x8e>
 801b99c:	6861      	ldr	r1, [r4, #4]
 801b99e:	1c4b      	adds	r3, r1, #1
 801b9a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801b9a4:	a80a      	add	r0, sp, #40	; 0x28
 801b9a6:	d13e      	bne.n	801ba26 <_printf_float+0x162>
 801b9a8:	2306      	movs	r3, #6
 801b9aa:	6063      	str	r3, [r4, #4]
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b9b2:	ab09      	add	r3, sp, #36	; 0x24
 801b9b4:	9300      	str	r3, [sp, #0]
 801b9b6:	ec49 8b10 	vmov	d0, r8, r9
 801b9ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b9be:	6022      	str	r2, [r4, #0]
 801b9c0:	f8cd a004 	str.w	sl, [sp, #4]
 801b9c4:	6861      	ldr	r1, [r4, #4]
 801b9c6:	4628      	mov	r0, r5
 801b9c8:	f7ff fee8 	bl	801b79c <__cvt>
 801b9cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801b9d0:	2b47      	cmp	r3, #71	; 0x47
 801b9d2:	4680      	mov	r8, r0
 801b9d4:	d109      	bne.n	801b9ea <_printf_float+0x126>
 801b9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9d8:	1cd8      	adds	r0, r3, #3
 801b9da:	db02      	blt.n	801b9e2 <_printf_float+0x11e>
 801b9dc:	6862      	ldr	r2, [r4, #4]
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	dd47      	ble.n	801ba72 <_printf_float+0x1ae>
 801b9e2:	f1aa 0a02 	sub.w	sl, sl, #2
 801b9e6:	fa5f fa8a 	uxtb.w	sl, sl
 801b9ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b9ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9f0:	d824      	bhi.n	801ba3c <_printf_float+0x178>
 801b9f2:	3901      	subs	r1, #1
 801b9f4:	4652      	mov	r2, sl
 801b9f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b9fa:	9109      	str	r1, [sp, #36]	; 0x24
 801b9fc:	f7ff ff2f 	bl	801b85e <__exponent>
 801ba00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba02:	1813      	adds	r3, r2, r0
 801ba04:	2a01      	cmp	r2, #1
 801ba06:	4681      	mov	r9, r0
 801ba08:	6123      	str	r3, [r4, #16]
 801ba0a:	dc02      	bgt.n	801ba12 <_printf_float+0x14e>
 801ba0c:	6822      	ldr	r2, [r4, #0]
 801ba0e:	07d1      	lsls	r1, r2, #31
 801ba10:	d501      	bpl.n	801ba16 <_printf_float+0x152>
 801ba12:	3301      	adds	r3, #1
 801ba14:	6123      	str	r3, [r4, #16]
 801ba16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d0a5      	beq.n	801b96a <_printf_float+0xa6>
 801ba1e:	232d      	movs	r3, #45	; 0x2d
 801ba20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba24:	e7a1      	b.n	801b96a <_printf_float+0xa6>
 801ba26:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801ba2a:	f000 8177 	beq.w	801bd1c <_printf_float+0x458>
 801ba2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801ba32:	d1bb      	bne.n	801b9ac <_printf_float+0xe8>
 801ba34:	2900      	cmp	r1, #0
 801ba36:	d1b9      	bne.n	801b9ac <_printf_float+0xe8>
 801ba38:	2301      	movs	r3, #1
 801ba3a:	e7b6      	b.n	801b9aa <_printf_float+0xe6>
 801ba3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801ba40:	d119      	bne.n	801ba76 <_printf_float+0x1b2>
 801ba42:	2900      	cmp	r1, #0
 801ba44:	6863      	ldr	r3, [r4, #4]
 801ba46:	dd0c      	ble.n	801ba62 <_printf_float+0x19e>
 801ba48:	6121      	str	r1, [r4, #16]
 801ba4a:	b913      	cbnz	r3, 801ba52 <_printf_float+0x18e>
 801ba4c:	6822      	ldr	r2, [r4, #0]
 801ba4e:	07d2      	lsls	r2, r2, #31
 801ba50:	d502      	bpl.n	801ba58 <_printf_float+0x194>
 801ba52:	3301      	adds	r3, #1
 801ba54:	440b      	add	r3, r1
 801ba56:	6123      	str	r3, [r4, #16]
 801ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba5a:	65a3      	str	r3, [r4, #88]	; 0x58
 801ba5c:	f04f 0900 	mov.w	r9, #0
 801ba60:	e7d9      	b.n	801ba16 <_printf_float+0x152>
 801ba62:	b913      	cbnz	r3, 801ba6a <_printf_float+0x1a6>
 801ba64:	6822      	ldr	r2, [r4, #0]
 801ba66:	07d0      	lsls	r0, r2, #31
 801ba68:	d501      	bpl.n	801ba6e <_printf_float+0x1aa>
 801ba6a:	3302      	adds	r3, #2
 801ba6c:	e7f3      	b.n	801ba56 <_printf_float+0x192>
 801ba6e:	2301      	movs	r3, #1
 801ba70:	e7f1      	b.n	801ba56 <_printf_float+0x192>
 801ba72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801ba76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ba7a:	4293      	cmp	r3, r2
 801ba7c:	db05      	blt.n	801ba8a <_printf_float+0x1c6>
 801ba7e:	6822      	ldr	r2, [r4, #0]
 801ba80:	6123      	str	r3, [r4, #16]
 801ba82:	07d1      	lsls	r1, r2, #31
 801ba84:	d5e8      	bpl.n	801ba58 <_printf_float+0x194>
 801ba86:	3301      	adds	r3, #1
 801ba88:	e7e5      	b.n	801ba56 <_printf_float+0x192>
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	bfd4      	ite	le
 801ba8e:	f1c3 0302 	rsble	r3, r3, #2
 801ba92:	2301      	movgt	r3, #1
 801ba94:	4413      	add	r3, r2
 801ba96:	e7de      	b.n	801ba56 <_printf_float+0x192>
 801ba98:	6823      	ldr	r3, [r4, #0]
 801ba9a:	055a      	lsls	r2, r3, #21
 801ba9c:	d407      	bmi.n	801baae <_printf_float+0x1ea>
 801ba9e:	6923      	ldr	r3, [r4, #16]
 801baa0:	4642      	mov	r2, r8
 801baa2:	4631      	mov	r1, r6
 801baa4:	4628      	mov	r0, r5
 801baa6:	47b8      	blx	r7
 801baa8:	3001      	adds	r0, #1
 801baaa:	d12b      	bne.n	801bb04 <_printf_float+0x240>
 801baac:	e767      	b.n	801b97e <_printf_float+0xba>
 801baae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801bab2:	f240 80dc 	bls.w	801bc6e <_printf_float+0x3aa>
 801bab6:	2200      	movs	r2, #0
 801bab8:	2300      	movs	r3, #0
 801baba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801babe:	f7e5 f813 	bl	8000ae8 <__aeabi_dcmpeq>
 801bac2:	2800      	cmp	r0, #0
 801bac4:	d033      	beq.n	801bb2e <_printf_float+0x26a>
 801bac6:	2301      	movs	r3, #1
 801bac8:	4a41      	ldr	r2, [pc, #260]	; (801bbd0 <_printf_float+0x30c>)
 801baca:	4631      	mov	r1, r6
 801bacc:	4628      	mov	r0, r5
 801bace:	47b8      	blx	r7
 801bad0:	3001      	adds	r0, #1
 801bad2:	f43f af54 	beq.w	801b97e <_printf_float+0xba>
 801bad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bada:	429a      	cmp	r2, r3
 801badc:	db02      	blt.n	801bae4 <_printf_float+0x220>
 801bade:	6823      	ldr	r3, [r4, #0]
 801bae0:	07d8      	lsls	r0, r3, #31
 801bae2:	d50f      	bpl.n	801bb04 <_printf_float+0x240>
 801bae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bae8:	4631      	mov	r1, r6
 801baea:	4628      	mov	r0, r5
 801baec:	47b8      	blx	r7
 801baee:	3001      	adds	r0, #1
 801baf0:	f43f af45 	beq.w	801b97e <_printf_float+0xba>
 801baf4:	f04f 0800 	mov.w	r8, #0
 801baf8:	f104 091a 	add.w	r9, r4, #26
 801bafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bafe:	3b01      	subs	r3, #1
 801bb00:	4543      	cmp	r3, r8
 801bb02:	dc09      	bgt.n	801bb18 <_printf_float+0x254>
 801bb04:	6823      	ldr	r3, [r4, #0]
 801bb06:	079b      	lsls	r3, r3, #30
 801bb08:	f100 8103 	bmi.w	801bd12 <_printf_float+0x44e>
 801bb0c:	68e0      	ldr	r0, [r4, #12]
 801bb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb10:	4298      	cmp	r0, r3
 801bb12:	bfb8      	it	lt
 801bb14:	4618      	movlt	r0, r3
 801bb16:	e734      	b.n	801b982 <_printf_float+0xbe>
 801bb18:	2301      	movs	r3, #1
 801bb1a:	464a      	mov	r2, r9
 801bb1c:	4631      	mov	r1, r6
 801bb1e:	4628      	mov	r0, r5
 801bb20:	47b8      	blx	r7
 801bb22:	3001      	adds	r0, #1
 801bb24:	f43f af2b 	beq.w	801b97e <_printf_float+0xba>
 801bb28:	f108 0801 	add.w	r8, r8, #1
 801bb2c:	e7e6      	b.n	801bafc <_printf_float+0x238>
 801bb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	dc2b      	bgt.n	801bb8c <_printf_float+0x2c8>
 801bb34:	2301      	movs	r3, #1
 801bb36:	4a26      	ldr	r2, [pc, #152]	; (801bbd0 <_printf_float+0x30c>)
 801bb38:	4631      	mov	r1, r6
 801bb3a:	4628      	mov	r0, r5
 801bb3c:	47b8      	blx	r7
 801bb3e:	3001      	adds	r0, #1
 801bb40:	f43f af1d 	beq.w	801b97e <_printf_float+0xba>
 801bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb46:	b923      	cbnz	r3, 801bb52 <_printf_float+0x28e>
 801bb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb4a:	b913      	cbnz	r3, 801bb52 <_printf_float+0x28e>
 801bb4c:	6823      	ldr	r3, [r4, #0]
 801bb4e:	07d9      	lsls	r1, r3, #31
 801bb50:	d5d8      	bpl.n	801bb04 <_printf_float+0x240>
 801bb52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb56:	4631      	mov	r1, r6
 801bb58:	4628      	mov	r0, r5
 801bb5a:	47b8      	blx	r7
 801bb5c:	3001      	adds	r0, #1
 801bb5e:	f43f af0e 	beq.w	801b97e <_printf_float+0xba>
 801bb62:	f04f 0900 	mov.w	r9, #0
 801bb66:	f104 0a1a 	add.w	sl, r4, #26
 801bb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb6c:	425b      	negs	r3, r3
 801bb6e:	454b      	cmp	r3, r9
 801bb70:	dc01      	bgt.n	801bb76 <_printf_float+0x2b2>
 801bb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb74:	e794      	b.n	801baa0 <_printf_float+0x1dc>
 801bb76:	2301      	movs	r3, #1
 801bb78:	4652      	mov	r2, sl
 801bb7a:	4631      	mov	r1, r6
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	47b8      	blx	r7
 801bb80:	3001      	adds	r0, #1
 801bb82:	f43f aefc 	beq.w	801b97e <_printf_float+0xba>
 801bb86:	f109 0901 	add.w	r9, r9, #1
 801bb8a:	e7ee      	b.n	801bb6a <_printf_float+0x2a6>
 801bb8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb90:	429a      	cmp	r2, r3
 801bb92:	bfa8      	it	ge
 801bb94:	461a      	movge	r2, r3
 801bb96:	2a00      	cmp	r2, #0
 801bb98:	4691      	mov	r9, r2
 801bb9a:	dd07      	ble.n	801bbac <_printf_float+0x2e8>
 801bb9c:	4613      	mov	r3, r2
 801bb9e:	4631      	mov	r1, r6
 801bba0:	4642      	mov	r2, r8
 801bba2:	4628      	mov	r0, r5
 801bba4:	47b8      	blx	r7
 801bba6:	3001      	adds	r0, #1
 801bba8:	f43f aee9 	beq.w	801b97e <_printf_float+0xba>
 801bbac:	f104 031a 	add.w	r3, r4, #26
 801bbb0:	f04f 0b00 	mov.w	fp, #0
 801bbb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bbb8:	9306      	str	r3, [sp, #24]
 801bbba:	e015      	b.n	801bbe8 <_printf_float+0x324>
 801bbbc:	7fefffff 	.word	0x7fefffff
 801bbc0:	080249aa 	.word	0x080249aa
 801bbc4:	080249a6 	.word	0x080249a6
 801bbc8:	080249b2 	.word	0x080249b2
 801bbcc:	080249ae 	.word	0x080249ae
 801bbd0:	080249b6 	.word	0x080249b6
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	9a06      	ldr	r2, [sp, #24]
 801bbd8:	4631      	mov	r1, r6
 801bbda:	4628      	mov	r0, r5
 801bbdc:	47b8      	blx	r7
 801bbde:	3001      	adds	r0, #1
 801bbe0:	f43f aecd 	beq.w	801b97e <_printf_float+0xba>
 801bbe4:	f10b 0b01 	add.w	fp, fp, #1
 801bbe8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801bbec:	ebaa 0309 	sub.w	r3, sl, r9
 801bbf0:	455b      	cmp	r3, fp
 801bbf2:	dcef      	bgt.n	801bbd4 <_printf_float+0x310>
 801bbf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	44d0      	add	r8, sl
 801bbfc:	db15      	blt.n	801bc2a <_printf_float+0x366>
 801bbfe:	6823      	ldr	r3, [r4, #0]
 801bc00:	07da      	lsls	r2, r3, #31
 801bc02:	d412      	bmi.n	801bc2a <_printf_float+0x366>
 801bc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc06:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc08:	eba3 020a 	sub.w	r2, r3, sl
 801bc0c:	eba3 0a01 	sub.w	sl, r3, r1
 801bc10:	4592      	cmp	sl, r2
 801bc12:	bfa8      	it	ge
 801bc14:	4692      	movge	sl, r2
 801bc16:	f1ba 0f00 	cmp.w	sl, #0
 801bc1a:	dc0e      	bgt.n	801bc3a <_printf_float+0x376>
 801bc1c:	f04f 0800 	mov.w	r8, #0
 801bc20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bc24:	f104 091a 	add.w	r9, r4, #26
 801bc28:	e019      	b.n	801bc5e <_printf_float+0x39a>
 801bc2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc2e:	4631      	mov	r1, r6
 801bc30:	4628      	mov	r0, r5
 801bc32:	47b8      	blx	r7
 801bc34:	3001      	adds	r0, #1
 801bc36:	d1e5      	bne.n	801bc04 <_printf_float+0x340>
 801bc38:	e6a1      	b.n	801b97e <_printf_float+0xba>
 801bc3a:	4653      	mov	r3, sl
 801bc3c:	4642      	mov	r2, r8
 801bc3e:	4631      	mov	r1, r6
 801bc40:	4628      	mov	r0, r5
 801bc42:	47b8      	blx	r7
 801bc44:	3001      	adds	r0, #1
 801bc46:	d1e9      	bne.n	801bc1c <_printf_float+0x358>
 801bc48:	e699      	b.n	801b97e <_printf_float+0xba>
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	464a      	mov	r2, r9
 801bc4e:	4631      	mov	r1, r6
 801bc50:	4628      	mov	r0, r5
 801bc52:	47b8      	blx	r7
 801bc54:	3001      	adds	r0, #1
 801bc56:	f43f ae92 	beq.w	801b97e <_printf_float+0xba>
 801bc5a:	f108 0801 	add.w	r8, r8, #1
 801bc5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bc62:	1a9b      	subs	r3, r3, r2
 801bc64:	eba3 030a 	sub.w	r3, r3, sl
 801bc68:	4543      	cmp	r3, r8
 801bc6a:	dcee      	bgt.n	801bc4a <_printf_float+0x386>
 801bc6c:	e74a      	b.n	801bb04 <_printf_float+0x240>
 801bc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc70:	2a01      	cmp	r2, #1
 801bc72:	dc01      	bgt.n	801bc78 <_printf_float+0x3b4>
 801bc74:	07db      	lsls	r3, r3, #31
 801bc76:	d53a      	bpl.n	801bcee <_printf_float+0x42a>
 801bc78:	2301      	movs	r3, #1
 801bc7a:	4642      	mov	r2, r8
 801bc7c:	4631      	mov	r1, r6
 801bc7e:	4628      	mov	r0, r5
 801bc80:	47b8      	blx	r7
 801bc82:	3001      	adds	r0, #1
 801bc84:	f43f ae7b 	beq.w	801b97e <_printf_float+0xba>
 801bc88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc8c:	4631      	mov	r1, r6
 801bc8e:	4628      	mov	r0, r5
 801bc90:	47b8      	blx	r7
 801bc92:	3001      	adds	r0, #1
 801bc94:	f108 0801 	add.w	r8, r8, #1
 801bc98:	f43f ae71 	beq.w	801b97e <_printf_float+0xba>
 801bc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f103 3aff 	add.w	sl, r3, #4294967295
 801bca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bca8:	2300      	movs	r3, #0
 801bcaa:	f7e4 ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 801bcae:	b9c8      	cbnz	r0, 801bce4 <_printf_float+0x420>
 801bcb0:	4653      	mov	r3, sl
 801bcb2:	4642      	mov	r2, r8
 801bcb4:	4631      	mov	r1, r6
 801bcb6:	4628      	mov	r0, r5
 801bcb8:	47b8      	blx	r7
 801bcba:	3001      	adds	r0, #1
 801bcbc:	d10e      	bne.n	801bcdc <_printf_float+0x418>
 801bcbe:	e65e      	b.n	801b97e <_printf_float+0xba>
 801bcc0:	2301      	movs	r3, #1
 801bcc2:	4652      	mov	r2, sl
 801bcc4:	4631      	mov	r1, r6
 801bcc6:	4628      	mov	r0, r5
 801bcc8:	47b8      	blx	r7
 801bcca:	3001      	adds	r0, #1
 801bccc:	f43f ae57 	beq.w	801b97e <_printf_float+0xba>
 801bcd0:	f108 0801 	add.w	r8, r8, #1
 801bcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	4543      	cmp	r3, r8
 801bcda:	dcf1      	bgt.n	801bcc0 <_printf_float+0x3fc>
 801bcdc:	464b      	mov	r3, r9
 801bcde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bce2:	e6de      	b.n	801baa2 <_printf_float+0x1de>
 801bce4:	f04f 0800 	mov.w	r8, #0
 801bce8:	f104 0a1a 	add.w	sl, r4, #26
 801bcec:	e7f2      	b.n	801bcd4 <_printf_float+0x410>
 801bcee:	2301      	movs	r3, #1
 801bcf0:	e7df      	b.n	801bcb2 <_printf_float+0x3ee>
 801bcf2:	2301      	movs	r3, #1
 801bcf4:	464a      	mov	r2, r9
 801bcf6:	4631      	mov	r1, r6
 801bcf8:	4628      	mov	r0, r5
 801bcfa:	47b8      	blx	r7
 801bcfc:	3001      	adds	r0, #1
 801bcfe:	f43f ae3e 	beq.w	801b97e <_printf_float+0xba>
 801bd02:	f108 0801 	add.w	r8, r8, #1
 801bd06:	68e3      	ldr	r3, [r4, #12]
 801bd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd0a:	1a9b      	subs	r3, r3, r2
 801bd0c:	4543      	cmp	r3, r8
 801bd0e:	dcf0      	bgt.n	801bcf2 <_printf_float+0x42e>
 801bd10:	e6fc      	b.n	801bb0c <_printf_float+0x248>
 801bd12:	f04f 0800 	mov.w	r8, #0
 801bd16:	f104 0919 	add.w	r9, r4, #25
 801bd1a:	e7f4      	b.n	801bd06 <_printf_float+0x442>
 801bd1c:	2900      	cmp	r1, #0
 801bd1e:	f43f ae8b 	beq.w	801ba38 <_printf_float+0x174>
 801bd22:	2300      	movs	r3, #0
 801bd24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801bd28:	ab09      	add	r3, sp, #36	; 0x24
 801bd2a:	9300      	str	r3, [sp, #0]
 801bd2c:	ec49 8b10 	vmov	d0, r8, r9
 801bd30:	6022      	str	r2, [r4, #0]
 801bd32:	f8cd a004 	str.w	sl, [sp, #4]
 801bd36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bd3a:	4628      	mov	r0, r5
 801bd3c:	f7ff fd2e 	bl	801b79c <__cvt>
 801bd40:	4680      	mov	r8, r0
 801bd42:	e648      	b.n	801b9d6 <_printf_float+0x112>

0801bd44 <_printf_common>:
 801bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd48:	4691      	mov	r9, r2
 801bd4a:	461f      	mov	r7, r3
 801bd4c:	688a      	ldr	r2, [r1, #8]
 801bd4e:	690b      	ldr	r3, [r1, #16]
 801bd50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bd54:	4293      	cmp	r3, r2
 801bd56:	bfb8      	it	lt
 801bd58:	4613      	movlt	r3, r2
 801bd5a:	f8c9 3000 	str.w	r3, [r9]
 801bd5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bd62:	4606      	mov	r6, r0
 801bd64:	460c      	mov	r4, r1
 801bd66:	b112      	cbz	r2, 801bd6e <_printf_common+0x2a>
 801bd68:	3301      	adds	r3, #1
 801bd6a:	f8c9 3000 	str.w	r3, [r9]
 801bd6e:	6823      	ldr	r3, [r4, #0]
 801bd70:	0699      	lsls	r1, r3, #26
 801bd72:	bf42      	ittt	mi
 801bd74:	f8d9 3000 	ldrmi.w	r3, [r9]
 801bd78:	3302      	addmi	r3, #2
 801bd7a:	f8c9 3000 	strmi.w	r3, [r9]
 801bd7e:	6825      	ldr	r5, [r4, #0]
 801bd80:	f015 0506 	ands.w	r5, r5, #6
 801bd84:	d107      	bne.n	801bd96 <_printf_common+0x52>
 801bd86:	f104 0a19 	add.w	sl, r4, #25
 801bd8a:	68e3      	ldr	r3, [r4, #12]
 801bd8c:	f8d9 2000 	ldr.w	r2, [r9]
 801bd90:	1a9b      	subs	r3, r3, r2
 801bd92:	42ab      	cmp	r3, r5
 801bd94:	dc28      	bgt.n	801bde8 <_printf_common+0xa4>
 801bd96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bd9a:	6822      	ldr	r2, [r4, #0]
 801bd9c:	3300      	adds	r3, #0
 801bd9e:	bf18      	it	ne
 801bda0:	2301      	movne	r3, #1
 801bda2:	0692      	lsls	r2, r2, #26
 801bda4:	d42d      	bmi.n	801be02 <_printf_common+0xbe>
 801bda6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bdaa:	4639      	mov	r1, r7
 801bdac:	4630      	mov	r0, r6
 801bdae:	47c0      	blx	r8
 801bdb0:	3001      	adds	r0, #1
 801bdb2:	d020      	beq.n	801bdf6 <_printf_common+0xb2>
 801bdb4:	6823      	ldr	r3, [r4, #0]
 801bdb6:	68e5      	ldr	r5, [r4, #12]
 801bdb8:	f8d9 2000 	ldr.w	r2, [r9]
 801bdbc:	f003 0306 	and.w	r3, r3, #6
 801bdc0:	2b04      	cmp	r3, #4
 801bdc2:	bf08      	it	eq
 801bdc4:	1aad      	subeq	r5, r5, r2
 801bdc6:	68a3      	ldr	r3, [r4, #8]
 801bdc8:	6922      	ldr	r2, [r4, #16]
 801bdca:	bf0c      	ite	eq
 801bdcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bdd0:	2500      	movne	r5, #0
 801bdd2:	4293      	cmp	r3, r2
 801bdd4:	bfc4      	itt	gt
 801bdd6:	1a9b      	subgt	r3, r3, r2
 801bdd8:	18ed      	addgt	r5, r5, r3
 801bdda:	f04f 0900 	mov.w	r9, #0
 801bdde:	341a      	adds	r4, #26
 801bde0:	454d      	cmp	r5, r9
 801bde2:	d11a      	bne.n	801be1a <_printf_common+0xd6>
 801bde4:	2000      	movs	r0, #0
 801bde6:	e008      	b.n	801bdfa <_printf_common+0xb6>
 801bde8:	2301      	movs	r3, #1
 801bdea:	4652      	mov	r2, sl
 801bdec:	4639      	mov	r1, r7
 801bdee:	4630      	mov	r0, r6
 801bdf0:	47c0      	blx	r8
 801bdf2:	3001      	adds	r0, #1
 801bdf4:	d103      	bne.n	801bdfe <_printf_common+0xba>
 801bdf6:	f04f 30ff 	mov.w	r0, #4294967295
 801bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdfe:	3501      	adds	r5, #1
 801be00:	e7c3      	b.n	801bd8a <_printf_common+0x46>
 801be02:	18e1      	adds	r1, r4, r3
 801be04:	1c5a      	adds	r2, r3, #1
 801be06:	2030      	movs	r0, #48	; 0x30
 801be08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801be0c:	4422      	add	r2, r4
 801be0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801be12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801be16:	3302      	adds	r3, #2
 801be18:	e7c5      	b.n	801bda6 <_printf_common+0x62>
 801be1a:	2301      	movs	r3, #1
 801be1c:	4622      	mov	r2, r4
 801be1e:	4639      	mov	r1, r7
 801be20:	4630      	mov	r0, r6
 801be22:	47c0      	blx	r8
 801be24:	3001      	adds	r0, #1
 801be26:	d0e6      	beq.n	801bdf6 <_printf_common+0xb2>
 801be28:	f109 0901 	add.w	r9, r9, #1
 801be2c:	e7d8      	b.n	801bde0 <_printf_common+0x9c>
	...

0801be30 <_printf_i>:
 801be30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801be38:	460c      	mov	r4, r1
 801be3a:	7e09      	ldrb	r1, [r1, #24]
 801be3c:	b085      	sub	sp, #20
 801be3e:	296e      	cmp	r1, #110	; 0x6e
 801be40:	4617      	mov	r7, r2
 801be42:	4606      	mov	r6, r0
 801be44:	4698      	mov	r8, r3
 801be46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be48:	f000 80b3 	beq.w	801bfb2 <_printf_i+0x182>
 801be4c:	d822      	bhi.n	801be94 <_printf_i+0x64>
 801be4e:	2963      	cmp	r1, #99	; 0x63
 801be50:	d036      	beq.n	801bec0 <_printf_i+0x90>
 801be52:	d80a      	bhi.n	801be6a <_printf_i+0x3a>
 801be54:	2900      	cmp	r1, #0
 801be56:	f000 80b9 	beq.w	801bfcc <_printf_i+0x19c>
 801be5a:	2958      	cmp	r1, #88	; 0x58
 801be5c:	f000 8083 	beq.w	801bf66 <_printf_i+0x136>
 801be60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801be68:	e032      	b.n	801bed0 <_printf_i+0xa0>
 801be6a:	2964      	cmp	r1, #100	; 0x64
 801be6c:	d001      	beq.n	801be72 <_printf_i+0x42>
 801be6e:	2969      	cmp	r1, #105	; 0x69
 801be70:	d1f6      	bne.n	801be60 <_printf_i+0x30>
 801be72:	6820      	ldr	r0, [r4, #0]
 801be74:	6813      	ldr	r3, [r2, #0]
 801be76:	0605      	lsls	r5, r0, #24
 801be78:	f103 0104 	add.w	r1, r3, #4
 801be7c:	d52a      	bpl.n	801bed4 <_printf_i+0xa4>
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	6011      	str	r1, [r2, #0]
 801be82:	2b00      	cmp	r3, #0
 801be84:	da03      	bge.n	801be8e <_printf_i+0x5e>
 801be86:	222d      	movs	r2, #45	; 0x2d
 801be88:	425b      	negs	r3, r3
 801be8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801be8e:	486f      	ldr	r0, [pc, #444]	; (801c04c <_printf_i+0x21c>)
 801be90:	220a      	movs	r2, #10
 801be92:	e039      	b.n	801bf08 <_printf_i+0xd8>
 801be94:	2973      	cmp	r1, #115	; 0x73
 801be96:	f000 809d 	beq.w	801bfd4 <_printf_i+0x1a4>
 801be9a:	d808      	bhi.n	801beae <_printf_i+0x7e>
 801be9c:	296f      	cmp	r1, #111	; 0x6f
 801be9e:	d020      	beq.n	801bee2 <_printf_i+0xb2>
 801bea0:	2970      	cmp	r1, #112	; 0x70
 801bea2:	d1dd      	bne.n	801be60 <_printf_i+0x30>
 801bea4:	6823      	ldr	r3, [r4, #0]
 801bea6:	f043 0320 	orr.w	r3, r3, #32
 801beaa:	6023      	str	r3, [r4, #0]
 801beac:	e003      	b.n	801beb6 <_printf_i+0x86>
 801beae:	2975      	cmp	r1, #117	; 0x75
 801beb0:	d017      	beq.n	801bee2 <_printf_i+0xb2>
 801beb2:	2978      	cmp	r1, #120	; 0x78
 801beb4:	d1d4      	bne.n	801be60 <_printf_i+0x30>
 801beb6:	2378      	movs	r3, #120	; 0x78
 801beb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bebc:	4864      	ldr	r0, [pc, #400]	; (801c050 <_printf_i+0x220>)
 801bebe:	e055      	b.n	801bf6c <_printf_i+0x13c>
 801bec0:	6813      	ldr	r3, [r2, #0]
 801bec2:	1d19      	adds	r1, r3, #4
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	6011      	str	r1, [r2, #0]
 801bec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801becc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bed0:	2301      	movs	r3, #1
 801bed2:	e08c      	b.n	801bfee <_printf_i+0x1be>
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	6011      	str	r1, [r2, #0]
 801bed8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bedc:	bf18      	it	ne
 801bede:	b21b      	sxthne	r3, r3
 801bee0:	e7cf      	b.n	801be82 <_printf_i+0x52>
 801bee2:	6813      	ldr	r3, [r2, #0]
 801bee4:	6825      	ldr	r5, [r4, #0]
 801bee6:	1d18      	adds	r0, r3, #4
 801bee8:	6010      	str	r0, [r2, #0]
 801beea:	0628      	lsls	r0, r5, #24
 801beec:	d501      	bpl.n	801bef2 <_printf_i+0xc2>
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	e002      	b.n	801bef8 <_printf_i+0xc8>
 801bef2:	0668      	lsls	r0, r5, #25
 801bef4:	d5fb      	bpl.n	801beee <_printf_i+0xbe>
 801bef6:	881b      	ldrh	r3, [r3, #0]
 801bef8:	4854      	ldr	r0, [pc, #336]	; (801c04c <_printf_i+0x21c>)
 801befa:	296f      	cmp	r1, #111	; 0x6f
 801befc:	bf14      	ite	ne
 801befe:	220a      	movne	r2, #10
 801bf00:	2208      	moveq	r2, #8
 801bf02:	2100      	movs	r1, #0
 801bf04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bf08:	6865      	ldr	r5, [r4, #4]
 801bf0a:	60a5      	str	r5, [r4, #8]
 801bf0c:	2d00      	cmp	r5, #0
 801bf0e:	f2c0 8095 	blt.w	801c03c <_printf_i+0x20c>
 801bf12:	6821      	ldr	r1, [r4, #0]
 801bf14:	f021 0104 	bic.w	r1, r1, #4
 801bf18:	6021      	str	r1, [r4, #0]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d13d      	bne.n	801bf9a <_printf_i+0x16a>
 801bf1e:	2d00      	cmp	r5, #0
 801bf20:	f040 808e 	bne.w	801c040 <_printf_i+0x210>
 801bf24:	4665      	mov	r5, ip
 801bf26:	2a08      	cmp	r2, #8
 801bf28:	d10b      	bne.n	801bf42 <_printf_i+0x112>
 801bf2a:	6823      	ldr	r3, [r4, #0]
 801bf2c:	07db      	lsls	r3, r3, #31
 801bf2e:	d508      	bpl.n	801bf42 <_printf_i+0x112>
 801bf30:	6923      	ldr	r3, [r4, #16]
 801bf32:	6862      	ldr	r2, [r4, #4]
 801bf34:	429a      	cmp	r2, r3
 801bf36:	bfde      	ittt	le
 801bf38:	2330      	movle	r3, #48	; 0x30
 801bf3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bf3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bf42:	ebac 0305 	sub.w	r3, ip, r5
 801bf46:	6123      	str	r3, [r4, #16]
 801bf48:	f8cd 8000 	str.w	r8, [sp]
 801bf4c:	463b      	mov	r3, r7
 801bf4e:	aa03      	add	r2, sp, #12
 801bf50:	4621      	mov	r1, r4
 801bf52:	4630      	mov	r0, r6
 801bf54:	f7ff fef6 	bl	801bd44 <_printf_common>
 801bf58:	3001      	adds	r0, #1
 801bf5a:	d14d      	bne.n	801bff8 <_printf_i+0x1c8>
 801bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf60:	b005      	add	sp, #20
 801bf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf66:	4839      	ldr	r0, [pc, #228]	; (801c04c <_printf_i+0x21c>)
 801bf68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801bf6c:	6813      	ldr	r3, [r2, #0]
 801bf6e:	6821      	ldr	r1, [r4, #0]
 801bf70:	1d1d      	adds	r5, r3, #4
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	6015      	str	r5, [r2, #0]
 801bf76:	060a      	lsls	r2, r1, #24
 801bf78:	d50b      	bpl.n	801bf92 <_printf_i+0x162>
 801bf7a:	07ca      	lsls	r2, r1, #31
 801bf7c:	bf44      	itt	mi
 801bf7e:	f041 0120 	orrmi.w	r1, r1, #32
 801bf82:	6021      	strmi	r1, [r4, #0]
 801bf84:	b91b      	cbnz	r3, 801bf8e <_printf_i+0x15e>
 801bf86:	6822      	ldr	r2, [r4, #0]
 801bf88:	f022 0220 	bic.w	r2, r2, #32
 801bf8c:	6022      	str	r2, [r4, #0]
 801bf8e:	2210      	movs	r2, #16
 801bf90:	e7b7      	b.n	801bf02 <_printf_i+0xd2>
 801bf92:	064d      	lsls	r5, r1, #25
 801bf94:	bf48      	it	mi
 801bf96:	b29b      	uxthmi	r3, r3
 801bf98:	e7ef      	b.n	801bf7a <_printf_i+0x14a>
 801bf9a:	4665      	mov	r5, ip
 801bf9c:	fbb3 f1f2 	udiv	r1, r3, r2
 801bfa0:	fb02 3311 	mls	r3, r2, r1, r3
 801bfa4:	5cc3      	ldrb	r3, [r0, r3]
 801bfa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801bfaa:	460b      	mov	r3, r1
 801bfac:	2900      	cmp	r1, #0
 801bfae:	d1f5      	bne.n	801bf9c <_printf_i+0x16c>
 801bfb0:	e7b9      	b.n	801bf26 <_printf_i+0xf6>
 801bfb2:	6813      	ldr	r3, [r2, #0]
 801bfb4:	6825      	ldr	r5, [r4, #0]
 801bfb6:	6961      	ldr	r1, [r4, #20]
 801bfb8:	1d18      	adds	r0, r3, #4
 801bfba:	6010      	str	r0, [r2, #0]
 801bfbc:	0628      	lsls	r0, r5, #24
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	d501      	bpl.n	801bfc6 <_printf_i+0x196>
 801bfc2:	6019      	str	r1, [r3, #0]
 801bfc4:	e002      	b.n	801bfcc <_printf_i+0x19c>
 801bfc6:	066a      	lsls	r2, r5, #25
 801bfc8:	d5fb      	bpl.n	801bfc2 <_printf_i+0x192>
 801bfca:	8019      	strh	r1, [r3, #0]
 801bfcc:	2300      	movs	r3, #0
 801bfce:	6123      	str	r3, [r4, #16]
 801bfd0:	4665      	mov	r5, ip
 801bfd2:	e7b9      	b.n	801bf48 <_printf_i+0x118>
 801bfd4:	6813      	ldr	r3, [r2, #0]
 801bfd6:	1d19      	adds	r1, r3, #4
 801bfd8:	6011      	str	r1, [r2, #0]
 801bfda:	681d      	ldr	r5, [r3, #0]
 801bfdc:	6862      	ldr	r2, [r4, #4]
 801bfde:	2100      	movs	r1, #0
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	f7e4 f90d 	bl	8000200 <memchr>
 801bfe6:	b108      	cbz	r0, 801bfec <_printf_i+0x1bc>
 801bfe8:	1b40      	subs	r0, r0, r5
 801bfea:	6060      	str	r0, [r4, #4]
 801bfec:	6863      	ldr	r3, [r4, #4]
 801bfee:	6123      	str	r3, [r4, #16]
 801bff0:	2300      	movs	r3, #0
 801bff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bff6:	e7a7      	b.n	801bf48 <_printf_i+0x118>
 801bff8:	6923      	ldr	r3, [r4, #16]
 801bffa:	462a      	mov	r2, r5
 801bffc:	4639      	mov	r1, r7
 801bffe:	4630      	mov	r0, r6
 801c000:	47c0      	blx	r8
 801c002:	3001      	adds	r0, #1
 801c004:	d0aa      	beq.n	801bf5c <_printf_i+0x12c>
 801c006:	6823      	ldr	r3, [r4, #0]
 801c008:	079b      	lsls	r3, r3, #30
 801c00a:	d413      	bmi.n	801c034 <_printf_i+0x204>
 801c00c:	68e0      	ldr	r0, [r4, #12]
 801c00e:	9b03      	ldr	r3, [sp, #12]
 801c010:	4298      	cmp	r0, r3
 801c012:	bfb8      	it	lt
 801c014:	4618      	movlt	r0, r3
 801c016:	e7a3      	b.n	801bf60 <_printf_i+0x130>
 801c018:	2301      	movs	r3, #1
 801c01a:	464a      	mov	r2, r9
 801c01c:	4639      	mov	r1, r7
 801c01e:	4630      	mov	r0, r6
 801c020:	47c0      	blx	r8
 801c022:	3001      	adds	r0, #1
 801c024:	d09a      	beq.n	801bf5c <_printf_i+0x12c>
 801c026:	3501      	adds	r5, #1
 801c028:	68e3      	ldr	r3, [r4, #12]
 801c02a:	9a03      	ldr	r2, [sp, #12]
 801c02c:	1a9b      	subs	r3, r3, r2
 801c02e:	42ab      	cmp	r3, r5
 801c030:	dcf2      	bgt.n	801c018 <_printf_i+0x1e8>
 801c032:	e7eb      	b.n	801c00c <_printf_i+0x1dc>
 801c034:	2500      	movs	r5, #0
 801c036:	f104 0919 	add.w	r9, r4, #25
 801c03a:	e7f5      	b.n	801c028 <_printf_i+0x1f8>
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d1ac      	bne.n	801bf9a <_printf_i+0x16a>
 801c040:	7803      	ldrb	r3, [r0, #0]
 801c042:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c046:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c04a:	e76c      	b.n	801bf26 <_printf_i+0xf6>
 801c04c:	080249b8 	.word	0x080249b8
 801c050:	080249c9 	.word	0x080249c9

0801c054 <iprintf>:
 801c054:	b40f      	push	{r0, r1, r2, r3}
 801c056:	4b0a      	ldr	r3, [pc, #40]	; (801c080 <iprintf+0x2c>)
 801c058:	b513      	push	{r0, r1, r4, lr}
 801c05a:	681c      	ldr	r4, [r3, #0]
 801c05c:	b124      	cbz	r4, 801c068 <iprintf+0x14>
 801c05e:	69a3      	ldr	r3, [r4, #24]
 801c060:	b913      	cbnz	r3, 801c068 <iprintf+0x14>
 801c062:	4620      	mov	r0, r4
 801c064:	f001 fe1c 	bl	801dca0 <__sinit>
 801c068:	ab05      	add	r3, sp, #20
 801c06a:	9a04      	ldr	r2, [sp, #16]
 801c06c:	68a1      	ldr	r1, [r4, #8]
 801c06e:	9301      	str	r3, [sp, #4]
 801c070:	4620      	mov	r0, r4
 801c072:	f002 ff61 	bl	801ef38 <_vfiprintf_r>
 801c076:	b002      	add	sp, #8
 801c078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c07c:	b004      	add	sp, #16
 801c07e:	4770      	bx	lr
 801c080:	20000084 	.word	0x20000084

0801c084 <rand>:
 801c084:	b538      	push	{r3, r4, r5, lr}
 801c086:	4b13      	ldr	r3, [pc, #76]	; (801c0d4 <rand+0x50>)
 801c088:	681c      	ldr	r4, [r3, #0]
 801c08a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c08c:	b97b      	cbnz	r3, 801c0ae <rand+0x2a>
 801c08e:	2018      	movs	r0, #24
 801c090:	f7ff fa7e 	bl	801b590 <malloc>
 801c094:	4a10      	ldr	r2, [pc, #64]	; (801c0d8 <rand+0x54>)
 801c096:	4b11      	ldr	r3, [pc, #68]	; (801c0dc <rand+0x58>)
 801c098:	63a0      	str	r0, [r4, #56]	; 0x38
 801c09a:	e9c0 2300 	strd	r2, r3, [r0]
 801c09e:	4b10      	ldr	r3, [pc, #64]	; (801c0e0 <rand+0x5c>)
 801c0a0:	6083      	str	r3, [r0, #8]
 801c0a2:	230b      	movs	r3, #11
 801c0a4:	8183      	strh	r3, [r0, #12]
 801c0a6:	2201      	movs	r2, #1
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c0ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c0b0:	480c      	ldr	r0, [pc, #48]	; (801c0e4 <rand+0x60>)
 801c0b2:	690a      	ldr	r2, [r1, #16]
 801c0b4:	694b      	ldr	r3, [r1, #20]
 801c0b6:	4c0c      	ldr	r4, [pc, #48]	; (801c0e8 <rand+0x64>)
 801c0b8:	4350      	muls	r0, r2
 801c0ba:	fb04 0003 	mla	r0, r4, r3, r0
 801c0be:	fba2 2304 	umull	r2, r3, r2, r4
 801c0c2:	4403      	add	r3, r0
 801c0c4:	1c54      	adds	r4, r2, #1
 801c0c6:	f143 0500 	adc.w	r5, r3, #0
 801c0ca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801c0ce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801c0d2:	bd38      	pop	{r3, r4, r5, pc}
 801c0d4:	20000084 	.word	0x20000084
 801c0d8:	abcd330e 	.word	0xabcd330e
 801c0dc:	e66d1234 	.word	0xe66d1234
 801c0e0:	0005deec 	.word	0x0005deec
 801c0e4:	5851f42d 	.word	0x5851f42d
 801c0e8:	4c957f2d 	.word	0x4c957f2d

0801c0ec <_sbrk_r>:
 801c0ec:	b538      	push	{r3, r4, r5, lr}
 801c0ee:	4c06      	ldr	r4, [pc, #24]	; (801c108 <_sbrk_r+0x1c>)
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	4605      	mov	r5, r0
 801c0f4:	4608      	mov	r0, r1
 801c0f6:	6023      	str	r3, [r4, #0]
 801c0f8:	f7e7 ff02 	bl	8003f00 <_sbrk>
 801c0fc:	1c43      	adds	r3, r0, #1
 801c0fe:	d102      	bne.n	801c106 <_sbrk_r+0x1a>
 801c100:	6823      	ldr	r3, [r4, #0]
 801c102:	b103      	cbz	r3, 801c106 <_sbrk_r+0x1a>
 801c104:	602b      	str	r3, [r5, #0]
 801c106:	bd38      	pop	{r3, r4, r5, pc}
 801c108:	20008308 	.word	0x20008308

0801c10c <sniprintf>:
 801c10c:	b40c      	push	{r2, r3}
 801c10e:	b530      	push	{r4, r5, lr}
 801c110:	4b17      	ldr	r3, [pc, #92]	; (801c170 <sniprintf+0x64>)
 801c112:	1e0c      	subs	r4, r1, #0
 801c114:	b09d      	sub	sp, #116	; 0x74
 801c116:	681d      	ldr	r5, [r3, #0]
 801c118:	da08      	bge.n	801c12c <sniprintf+0x20>
 801c11a:	238b      	movs	r3, #139	; 0x8b
 801c11c:	602b      	str	r3, [r5, #0]
 801c11e:	f04f 30ff 	mov.w	r0, #4294967295
 801c122:	b01d      	add	sp, #116	; 0x74
 801c124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c128:	b002      	add	sp, #8
 801c12a:	4770      	bx	lr
 801c12c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c130:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c134:	bf14      	ite	ne
 801c136:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c13a:	4623      	moveq	r3, r4
 801c13c:	9304      	str	r3, [sp, #16]
 801c13e:	9307      	str	r3, [sp, #28]
 801c140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c144:	9002      	str	r0, [sp, #8]
 801c146:	9006      	str	r0, [sp, #24]
 801c148:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c14c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c14e:	ab21      	add	r3, sp, #132	; 0x84
 801c150:	a902      	add	r1, sp, #8
 801c152:	4628      	mov	r0, r5
 801c154:	9301      	str	r3, [sp, #4]
 801c156:	f002 fdcd 	bl	801ecf4 <_svfiprintf_r>
 801c15a:	1c43      	adds	r3, r0, #1
 801c15c:	bfbc      	itt	lt
 801c15e:	238b      	movlt	r3, #139	; 0x8b
 801c160:	602b      	strlt	r3, [r5, #0]
 801c162:	2c00      	cmp	r4, #0
 801c164:	d0dd      	beq.n	801c122 <sniprintf+0x16>
 801c166:	9b02      	ldr	r3, [sp, #8]
 801c168:	2200      	movs	r2, #0
 801c16a:	701a      	strb	r2, [r3, #0]
 801c16c:	e7d9      	b.n	801c122 <sniprintf+0x16>
 801c16e:	bf00      	nop
 801c170:	20000084 	.word	0x20000084

0801c174 <siprintf>:
 801c174:	b40e      	push	{r1, r2, r3}
 801c176:	b500      	push	{lr}
 801c178:	b09c      	sub	sp, #112	; 0x70
 801c17a:	ab1d      	add	r3, sp, #116	; 0x74
 801c17c:	9002      	str	r0, [sp, #8]
 801c17e:	9006      	str	r0, [sp, #24]
 801c180:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c184:	4809      	ldr	r0, [pc, #36]	; (801c1ac <siprintf+0x38>)
 801c186:	9107      	str	r1, [sp, #28]
 801c188:	9104      	str	r1, [sp, #16]
 801c18a:	4909      	ldr	r1, [pc, #36]	; (801c1b0 <siprintf+0x3c>)
 801c18c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c190:	9105      	str	r1, [sp, #20]
 801c192:	6800      	ldr	r0, [r0, #0]
 801c194:	9301      	str	r3, [sp, #4]
 801c196:	a902      	add	r1, sp, #8
 801c198:	f002 fdac 	bl	801ecf4 <_svfiprintf_r>
 801c19c:	9b02      	ldr	r3, [sp, #8]
 801c19e:	2200      	movs	r2, #0
 801c1a0:	701a      	strb	r2, [r3, #0]
 801c1a2:	b01c      	add	sp, #112	; 0x70
 801c1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c1a8:	b003      	add	sp, #12
 801c1aa:	4770      	bx	lr
 801c1ac:	20000084 	.word	0x20000084
 801c1b0:	ffff0208 	.word	0xffff0208

0801c1b4 <strncmp>:
 801c1b4:	b510      	push	{r4, lr}
 801c1b6:	b16a      	cbz	r2, 801c1d4 <strncmp+0x20>
 801c1b8:	3901      	subs	r1, #1
 801c1ba:	1884      	adds	r4, r0, r2
 801c1bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c1c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c1c4:	4293      	cmp	r3, r2
 801c1c6:	d103      	bne.n	801c1d0 <strncmp+0x1c>
 801c1c8:	42a0      	cmp	r0, r4
 801c1ca:	d001      	beq.n	801c1d0 <strncmp+0x1c>
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d1f5      	bne.n	801c1bc <strncmp+0x8>
 801c1d0:	1a98      	subs	r0, r3, r2
 801c1d2:	bd10      	pop	{r4, pc}
 801c1d4:	4610      	mov	r0, r2
 801c1d6:	e7fc      	b.n	801c1d2 <strncmp+0x1e>

0801c1d8 <strstr>:
 801c1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1da:	7803      	ldrb	r3, [r0, #0]
 801c1dc:	b17b      	cbz	r3, 801c1fe <strstr+0x26>
 801c1de:	4604      	mov	r4, r0
 801c1e0:	7823      	ldrb	r3, [r4, #0]
 801c1e2:	4620      	mov	r0, r4
 801c1e4:	1c66      	adds	r6, r4, #1
 801c1e6:	b17b      	cbz	r3, 801c208 <strstr+0x30>
 801c1e8:	1e4a      	subs	r2, r1, #1
 801c1ea:	1e63      	subs	r3, r4, #1
 801c1ec:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c1f0:	b14d      	cbz	r5, 801c206 <strstr+0x2e>
 801c1f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801c1f6:	42af      	cmp	r7, r5
 801c1f8:	4634      	mov	r4, r6
 801c1fa:	d0f7      	beq.n	801c1ec <strstr+0x14>
 801c1fc:	e7f0      	b.n	801c1e0 <strstr+0x8>
 801c1fe:	780b      	ldrb	r3, [r1, #0]
 801c200:	2b00      	cmp	r3, #0
 801c202:	bf18      	it	ne
 801c204:	2000      	movne	r0, #0
 801c206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c208:	4618      	mov	r0, r3
 801c20a:	e7fc      	b.n	801c206 <strstr+0x2e>

0801c20c <sulp>:
 801c20c:	b570      	push	{r4, r5, r6, lr}
 801c20e:	4604      	mov	r4, r0
 801c210:	460d      	mov	r5, r1
 801c212:	ec45 4b10 	vmov	d0, r4, r5
 801c216:	4616      	mov	r6, r2
 801c218:	f002 fbd0 	bl	801e9bc <__ulp>
 801c21c:	ec51 0b10 	vmov	r0, r1, d0
 801c220:	b17e      	cbz	r6, 801c242 <sulp+0x36>
 801c222:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	dd09      	ble.n	801c242 <sulp+0x36>
 801c22e:	051b      	lsls	r3, r3, #20
 801c230:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c234:	2400      	movs	r4, #0
 801c236:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c23a:	4622      	mov	r2, r4
 801c23c:	462b      	mov	r3, r5
 801c23e:	f7e4 f9eb 	bl	8000618 <__aeabi_dmul>
 801c242:	bd70      	pop	{r4, r5, r6, pc}
 801c244:	0000      	movs	r0, r0
	...

0801c248 <_strtod_l>:
 801c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c24c:	461f      	mov	r7, r3
 801c24e:	b0a1      	sub	sp, #132	; 0x84
 801c250:	2300      	movs	r3, #0
 801c252:	4681      	mov	r9, r0
 801c254:	4638      	mov	r0, r7
 801c256:	460e      	mov	r6, r1
 801c258:	9217      	str	r2, [sp, #92]	; 0x5c
 801c25a:	931c      	str	r3, [sp, #112]	; 0x70
 801c25c:	f002 f8d0 	bl	801e400 <__localeconv_l>
 801c260:	4680      	mov	r8, r0
 801c262:	6800      	ldr	r0, [r0, #0]
 801c264:	f7e3 ffbe 	bl	80001e4 <strlen>
 801c268:	f04f 0a00 	mov.w	sl, #0
 801c26c:	4604      	mov	r4, r0
 801c26e:	f04f 0b00 	mov.w	fp, #0
 801c272:	961b      	str	r6, [sp, #108]	; 0x6c
 801c274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c276:	781a      	ldrb	r2, [r3, #0]
 801c278:	2a0d      	cmp	r2, #13
 801c27a:	d832      	bhi.n	801c2e2 <_strtod_l+0x9a>
 801c27c:	2a09      	cmp	r2, #9
 801c27e:	d236      	bcs.n	801c2ee <_strtod_l+0xa6>
 801c280:	2a00      	cmp	r2, #0
 801c282:	d03e      	beq.n	801c302 <_strtod_l+0xba>
 801c284:	2300      	movs	r3, #0
 801c286:	930d      	str	r3, [sp, #52]	; 0x34
 801c288:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c28a:	782b      	ldrb	r3, [r5, #0]
 801c28c:	2b30      	cmp	r3, #48	; 0x30
 801c28e:	f040 80ac 	bne.w	801c3ea <_strtod_l+0x1a2>
 801c292:	786b      	ldrb	r3, [r5, #1]
 801c294:	2b58      	cmp	r3, #88	; 0x58
 801c296:	d001      	beq.n	801c29c <_strtod_l+0x54>
 801c298:	2b78      	cmp	r3, #120	; 0x78
 801c29a:	d167      	bne.n	801c36c <_strtod_l+0x124>
 801c29c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c29e:	9301      	str	r3, [sp, #4]
 801c2a0:	ab1c      	add	r3, sp, #112	; 0x70
 801c2a2:	9300      	str	r3, [sp, #0]
 801c2a4:	9702      	str	r7, [sp, #8]
 801c2a6:	ab1d      	add	r3, sp, #116	; 0x74
 801c2a8:	4a88      	ldr	r2, [pc, #544]	; (801c4cc <_strtod_l+0x284>)
 801c2aa:	a91b      	add	r1, sp, #108	; 0x6c
 801c2ac:	4648      	mov	r0, r9
 801c2ae:	f001 fdd0 	bl	801de52 <__gethex>
 801c2b2:	f010 0407 	ands.w	r4, r0, #7
 801c2b6:	4606      	mov	r6, r0
 801c2b8:	d005      	beq.n	801c2c6 <_strtod_l+0x7e>
 801c2ba:	2c06      	cmp	r4, #6
 801c2bc:	d12b      	bne.n	801c316 <_strtod_l+0xce>
 801c2be:	3501      	adds	r5, #1
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	951b      	str	r5, [sp, #108]	; 0x6c
 801c2c4:	930d      	str	r3, [sp, #52]	; 0x34
 801c2c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	f040 859a 	bne.w	801ce02 <_strtod_l+0xbba>
 801c2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2d0:	b1e3      	cbz	r3, 801c30c <_strtod_l+0xc4>
 801c2d2:	4652      	mov	r2, sl
 801c2d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c2d8:	ec43 2b10 	vmov	d0, r2, r3
 801c2dc:	b021      	add	sp, #132	; 0x84
 801c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2e2:	2a2b      	cmp	r2, #43	; 0x2b
 801c2e4:	d015      	beq.n	801c312 <_strtod_l+0xca>
 801c2e6:	2a2d      	cmp	r2, #45	; 0x2d
 801c2e8:	d004      	beq.n	801c2f4 <_strtod_l+0xac>
 801c2ea:	2a20      	cmp	r2, #32
 801c2ec:	d1ca      	bne.n	801c284 <_strtod_l+0x3c>
 801c2ee:	3301      	adds	r3, #1
 801c2f0:	931b      	str	r3, [sp, #108]	; 0x6c
 801c2f2:	e7bf      	b.n	801c274 <_strtod_l+0x2c>
 801c2f4:	2201      	movs	r2, #1
 801c2f6:	920d      	str	r2, [sp, #52]	; 0x34
 801c2f8:	1c5a      	adds	r2, r3, #1
 801c2fa:	921b      	str	r2, [sp, #108]	; 0x6c
 801c2fc:	785b      	ldrb	r3, [r3, #1]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d1c2      	bne.n	801c288 <_strtod_l+0x40>
 801c302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c304:	961b      	str	r6, [sp, #108]	; 0x6c
 801c306:	2b00      	cmp	r3, #0
 801c308:	f040 8579 	bne.w	801cdfe <_strtod_l+0xbb6>
 801c30c:	4652      	mov	r2, sl
 801c30e:	465b      	mov	r3, fp
 801c310:	e7e2      	b.n	801c2d8 <_strtod_l+0x90>
 801c312:	2200      	movs	r2, #0
 801c314:	e7ef      	b.n	801c2f6 <_strtod_l+0xae>
 801c316:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c318:	b13a      	cbz	r2, 801c32a <_strtod_l+0xe2>
 801c31a:	2135      	movs	r1, #53	; 0x35
 801c31c:	a81e      	add	r0, sp, #120	; 0x78
 801c31e:	f002 fc45 	bl	801ebac <__copybits>
 801c322:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c324:	4648      	mov	r0, r9
 801c326:	f002 f8b1 	bl	801e48c <_Bfree>
 801c32a:	3c01      	subs	r4, #1
 801c32c:	2c04      	cmp	r4, #4
 801c32e:	d806      	bhi.n	801c33e <_strtod_l+0xf6>
 801c330:	e8df f004 	tbb	[pc, r4]
 801c334:	1714030a 	.word	0x1714030a
 801c338:	0a          	.byte	0x0a
 801c339:	00          	.byte	0x00
 801c33a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801c33e:	0730      	lsls	r0, r6, #28
 801c340:	d5c1      	bpl.n	801c2c6 <_strtod_l+0x7e>
 801c342:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c346:	e7be      	b.n	801c2c6 <_strtod_l+0x7e>
 801c348:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801c34c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c34e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c352:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c356:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c35a:	e7f0      	b.n	801c33e <_strtod_l+0xf6>
 801c35c:	f8df b170 	ldr.w	fp, [pc, #368]	; 801c4d0 <_strtod_l+0x288>
 801c360:	e7ed      	b.n	801c33e <_strtod_l+0xf6>
 801c362:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c366:	f04f 3aff 	mov.w	sl, #4294967295
 801c36a:	e7e8      	b.n	801c33e <_strtod_l+0xf6>
 801c36c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c36e:	1c5a      	adds	r2, r3, #1
 801c370:	921b      	str	r2, [sp, #108]	; 0x6c
 801c372:	785b      	ldrb	r3, [r3, #1]
 801c374:	2b30      	cmp	r3, #48	; 0x30
 801c376:	d0f9      	beq.n	801c36c <_strtod_l+0x124>
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d0a4      	beq.n	801c2c6 <_strtod_l+0x7e>
 801c37c:	2301      	movs	r3, #1
 801c37e:	2500      	movs	r5, #0
 801c380:	9306      	str	r3, [sp, #24]
 801c382:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c384:	9308      	str	r3, [sp, #32]
 801c386:	9507      	str	r5, [sp, #28]
 801c388:	9505      	str	r5, [sp, #20]
 801c38a:	220a      	movs	r2, #10
 801c38c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c38e:	7807      	ldrb	r7, [r0, #0]
 801c390:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801c394:	b2d9      	uxtb	r1, r3
 801c396:	2909      	cmp	r1, #9
 801c398:	d929      	bls.n	801c3ee <_strtod_l+0x1a6>
 801c39a:	4622      	mov	r2, r4
 801c39c:	f8d8 1000 	ldr.w	r1, [r8]
 801c3a0:	f7ff ff08 	bl	801c1b4 <strncmp>
 801c3a4:	2800      	cmp	r0, #0
 801c3a6:	d031      	beq.n	801c40c <_strtod_l+0x1c4>
 801c3a8:	2000      	movs	r0, #0
 801c3aa:	9c05      	ldr	r4, [sp, #20]
 801c3ac:	9004      	str	r0, [sp, #16]
 801c3ae:	463b      	mov	r3, r7
 801c3b0:	4602      	mov	r2, r0
 801c3b2:	2b65      	cmp	r3, #101	; 0x65
 801c3b4:	d001      	beq.n	801c3ba <_strtod_l+0x172>
 801c3b6:	2b45      	cmp	r3, #69	; 0x45
 801c3b8:	d114      	bne.n	801c3e4 <_strtod_l+0x19c>
 801c3ba:	b924      	cbnz	r4, 801c3c6 <_strtod_l+0x17e>
 801c3bc:	b910      	cbnz	r0, 801c3c4 <_strtod_l+0x17c>
 801c3be:	9b06      	ldr	r3, [sp, #24]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d09e      	beq.n	801c302 <_strtod_l+0xba>
 801c3c4:	2400      	movs	r4, #0
 801c3c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801c3c8:	1c73      	adds	r3, r6, #1
 801c3ca:	931b      	str	r3, [sp, #108]	; 0x6c
 801c3cc:	7873      	ldrb	r3, [r6, #1]
 801c3ce:	2b2b      	cmp	r3, #43	; 0x2b
 801c3d0:	d078      	beq.n	801c4c4 <_strtod_l+0x27c>
 801c3d2:	2b2d      	cmp	r3, #45	; 0x2d
 801c3d4:	d070      	beq.n	801c4b8 <_strtod_l+0x270>
 801c3d6:	f04f 0c00 	mov.w	ip, #0
 801c3da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801c3de:	2f09      	cmp	r7, #9
 801c3e0:	d97c      	bls.n	801c4dc <_strtod_l+0x294>
 801c3e2:	961b      	str	r6, [sp, #108]	; 0x6c
 801c3e4:	f04f 0e00 	mov.w	lr, #0
 801c3e8:	e09a      	b.n	801c520 <_strtod_l+0x2d8>
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	e7c7      	b.n	801c37e <_strtod_l+0x136>
 801c3ee:	9905      	ldr	r1, [sp, #20]
 801c3f0:	2908      	cmp	r1, #8
 801c3f2:	bfdd      	ittte	le
 801c3f4:	9907      	ldrle	r1, [sp, #28]
 801c3f6:	fb02 3301 	mlale	r3, r2, r1, r3
 801c3fa:	9307      	strle	r3, [sp, #28]
 801c3fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 801c400:	9b05      	ldr	r3, [sp, #20]
 801c402:	3001      	adds	r0, #1
 801c404:	3301      	adds	r3, #1
 801c406:	9305      	str	r3, [sp, #20]
 801c408:	901b      	str	r0, [sp, #108]	; 0x6c
 801c40a:	e7bf      	b.n	801c38c <_strtod_l+0x144>
 801c40c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c40e:	191a      	adds	r2, r3, r4
 801c410:	921b      	str	r2, [sp, #108]	; 0x6c
 801c412:	9a05      	ldr	r2, [sp, #20]
 801c414:	5d1b      	ldrb	r3, [r3, r4]
 801c416:	2a00      	cmp	r2, #0
 801c418:	d037      	beq.n	801c48a <_strtod_l+0x242>
 801c41a:	9c05      	ldr	r4, [sp, #20]
 801c41c:	4602      	mov	r2, r0
 801c41e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c422:	2909      	cmp	r1, #9
 801c424:	d913      	bls.n	801c44e <_strtod_l+0x206>
 801c426:	2101      	movs	r1, #1
 801c428:	9104      	str	r1, [sp, #16]
 801c42a:	e7c2      	b.n	801c3b2 <_strtod_l+0x16a>
 801c42c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c42e:	1c5a      	adds	r2, r3, #1
 801c430:	921b      	str	r2, [sp, #108]	; 0x6c
 801c432:	785b      	ldrb	r3, [r3, #1]
 801c434:	3001      	adds	r0, #1
 801c436:	2b30      	cmp	r3, #48	; 0x30
 801c438:	d0f8      	beq.n	801c42c <_strtod_l+0x1e4>
 801c43a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801c43e:	2a08      	cmp	r2, #8
 801c440:	f200 84e4 	bhi.w	801ce0c <_strtod_l+0xbc4>
 801c444:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c446:	9208      	str	r2, [sp, #32]
 801c448:	4602      	mov	r2, r0
 801c44a:	2000      	movs	r0, #0
 801c44c:	4604      	mov	r4, r0
 801c44e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801c452:	f100 0101 	add.w	r1, r0, #1
 801c456:	d012      	beq.n	801c47e <_strtod_l+0x236>
 801c458:	440a      	add	r2, r1
 801c45a:	eb00 0c04 	add.w	ip, r0, r4
 801c45e:	4621      	mov	r1, r4
 801c460:	270a      	movs	r7, #10
 801c462:	458c      	cmp	ip, r1
 801c464:	d113      	bne.n	801c48e <_strtod_l+0x246>
 801c466:	1821      	adds	r1, r4, r0
 801c468:	2908      	cmp	r1, #8
 801c46a:	f104 0401 	add.w	r4, r4, #1
 801c46e:	4404      	add	r4, r0
 801c470:	dc19      	bgt.n	801c4a6 <_strtod_l+0x25e>
 801c472:	9b07      	ldr	r3, [sp, #28]
 801c474:	210a      	movs	r1, #10
 801c476:	fb01 e303 	mla	r3, r1, r3, lr
 801c47a:	9307      	str	r3, [sp, #28]
 801c47c:	2100      	movs	r1, #0
 801c47e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c480:	1c58      	adds	r0, r3, #1
 801c482:	901b      	str	r0, [sp, #108]	; 0x6c
 801c484:	785b      	ldrb	r3, [r3, #1]
 801c486:	4608      	mov	r0, r1
 801c488:	e7c9      	b.n	801c41e <_strtod_l+0x1d6>
 801c48a:	9805      	ldr	r0, [sp, #20]
 801c48c:	e7d3      	b.n	801c436 <_strtod_l+0x1ee>
 801c48e:	2908      	cmp	r1, #8
 801c490:	f101 0101 	add.w	r1, r1, #1
 801c494:	dc03      	bgt.n	801c49e <_strtod_l+0x256>
 801c496:	9b07      	ldr	r3, [sp, #28]
 801c498:	437b      	muls	r3, r7
 801c49a:	9307      	str	r3, [sp, #28]
 801c49c:	e7e1      	b.n	801c462 <_strtod_l+0x21a>
 801c49e:	2910      	cmp	r1, #16
 801c4a0:	bfd8      	it	le
 801c4a2:	437d      	mulle	r5, r7
 801c4a4:	e7dd      	b.n	801c462 <_strtod_l+0x21a>
 801c4a6:	2c10      	cmp	r4, #16
 801c4a8:	bfdc      	itt	le
 801c4aa:	210a      	movle	r1, #10
 801c4ac:	fb01 e505 	mlale	r5, r1, r5, lr
 801c4b0:	e7e4      	b.n	801c47c <_strtod_l+0x234>
 801c4b2:	2301      	movs	r3, #1
 801c4b4:	9304      	str	r3, [sp, #16]
 801c4b6:	e781      	b.n	801c3bc <_strtod_l+0x174>
 801c4b8:	f04f 0c01 	mov.w	ip, #1
 801c4bc:	1cb3      	adds	r3, r6, #2
 801c4be:	931b      	str	r3, [sp, #108]	; 0x6c
 801c4c0:	78b3      	ldrb	r3, [r6, #2]
 801c4c2:	e78a      	b.n	801c3da <_strtod_l+0x192>
 801c4c4:	f04f 0c00 	mov.w	ip, #0
 801c4c8:	e7f8      	b.n	801c4bc <_strtod_l+0x274>
 801c4ca:	bf00      	nop
 801c4cc:	080249dc 	.word	0x080249dc
 801c4d0:	7ff00000 	.word	0x7ff00000
 801c4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c4d6:	1c5f      	adds	r7, r3, #1
 801c4d8:	971b      	str	r7, [sp, #108]	; 0x6c
 801c4da:	785b      	ldrb	r3, [r3, #1]
 801c4dc:	2b30      	cmp	r3, #48	; 0x30
 801c4de:	d0f9      	beq.n	801c4d4 <_strtod_l+0x28c>
 801c4e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801c4e4:	2f08      	cmp	r7, #8
 801c4e6:	f63f af7d 	bhi.w	801c3e4 <_strtod_l+0x19c>
 801c4ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801c4ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c4f0:	930a      	str	r3, [sp, #40]	; 0x28
 801c4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c4f4:	1c5f      	adds	r7, r3, #1
 801c4f6:	971b      	str	r7, [sp, #108]	; 0x6c
 801c4f8:	785b      	ldrb	r3, [r3, #1]
 801c4fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801c4fe:	f1b8 0f09 	cmp.w	r8, #9
 801c502:	d937      	bls.n	801c574 <_strtod_l+0x32c>
 801c504:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c506:	1a7f      	subs	r7, r7, r1
 801c508:	2f08      	cmp	r7, #8
 801c50a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801c50e:	dc37      	bgt.n	801c580 <_strtod_l+0x338>
 801c510:	45be      	cmp	lr, r7
 801c512:	bfa8      	it	ge
 801c514:	46be      	movge	lr, r7
 801c516:	f1bc 0f00 	cmp.w	ip, #0
 801c51a:	d001      	beq.n	801c520 <_strtod_l+0x2d8>
 801c51c:	f1ce 0e00 	rsb	lr, lr, #0
 801c520:	2c00      	cmp	r4, #0
 801c522:	d151      	bne.n	801c5c8 <_strtod_l+0x380>
 801c524:	2800      	cmp	r0, #0
 801c526:	f47f aece 	bne.w	801c2c6 <_strtod_l+0x7e>
 801c52a:	9a06      	ldr	r2, [sp, #24]
 801c52c:	2a00      	cmp	r2, #0
 801c52e:	f47f aeca 	bne.w	801c2c6 <_strtod_l+0x7e>
 801c532:	9a04      	ldr	r2, [sp, #16]
 801c534:	2a00      	cmp	r2, #0
 801c536:	f47f aee4 	bne.w	801c302 <_strtod_l+0xba>
 801c53a:	2b4e      	cmp	r3, #78	; 0x4e
 801c53c:	d027      	beq.n	801c58e <_strtod_l+0x346>
 801c53e:	dc21      	bgt.n	801c584 <_strtod_l+0x33c>
 801c540:	2b49      	cmp	r3, #73	; 0x49
 801c542:	f47f aede 	bne.w	801c302 <_strtod_l+0xba>
 801c546:	49a0      	ldr	r1, [pc, #640]	; (801c7c8 <_strtod_l+0x580>)
 801c548:	a81b      	add	r0, sp, #108	; 0x6c
 801c54a:	f001 feb5 	bl	801e2b8 <__match>
 801c54e:	2800      	cmp	r0, #0
 801c550:	f43f aed7 	beq.w	801c302 <_strtod_l+0xba>
 801c554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c556:	499d      	ldr	r1, [pc, #628]	; (801c7cc <_strtod_l+0x584>)
 801c558:	3b01      	subs	r3, #1
 801c55a:	a81b      	add	r0, sp, #108	; 0x6c
 801c55c:	931b      	str	r3, [sp, #108]	; 0x6c
 801c55e:	f001 feab 	bl	801e2b8 <__match>
 801c562:	b910      	cbnz	r0, 801c56a <_strtod_l+0x322>
 801c564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c566:	3301      	adds	r3, #1
 801c568:	931b      	str	r3, [sp, #108]	; 0x6c
 801c56a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801c7e0 <_strtod_l+0x598>
 801c56e:	f04f 0a00 	mov.w	sl, #0
 801c572:	e6a8      	b.n	801c2c6 <_strtod_l+0x7e>
 801c574:	210a      	movs	r1, #10
 801c576:	fb01 3e0e 	mla	lr, r1, lr, r3
 801c57a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c57e:	e7b8      	b.n	801c4f2 <_strtod_l+0x2aa>
 801c580:	46be      	mov	lr, r7
 801c582:	e7c8      	b.n	801c516 <_strtod_l+0x2ce>
 801c584:	2b69      	cmp	r3, #105	; 0x69
 801c586:	d0de      	beq.n	801c546 <_strtod_l+0x2fe>
 801c588:	2b6e      	cmp	r3, #110	; 0x6e
 801c58a:	f47f aeba 	bne.w	801c302 <_strtod_l+0xba>
 801c58e:	4990      	ldr	r1, [pc, #576]	; (801c7d0 <_strtod_l+0x588>)
 801c590:	a81b      	add	r0, sp, #108	; 0x6c
 801c592:	f001 fe91 	bl	801e2b8 <__match>
 801c596:	2800      	cmp	r0, #0
 801c598:	f43f aeb3 	beq.w	801c302 <_strtod_l+0xba>
 801c59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c59e:	781b      	ldrb	r3, [r3, #0]
 801c5a0:	2b28      	cmp	r3, #40	; 0x28
 801c5a2:	d10e      	bne.n	801c5c2 <_strtod_l+0x37a>
 801c5a4:	aa1e      	add	r2, sp, #120	; 0x78
 801c5a6:	498b      	ldr	r1, [pc, #556]	; (801c7d4 <_strtod_l+0x58c>)
 801c5a8:	a81b      	add	r0, sp, #108	; 0x6c
 801c5aa:	f001 fe99 	bl	801e2e0 <__hexnan>
 801c5ae:	2805      	cmp	r0, #5
 801c5b0:	d107      	bne.n	801c5c2 <_strtod_l+0x37a>
 801c5b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c5b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801c5b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c5bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c5c0:	e681      	b.n	801c2c6 <_strtod_l+0x7e>
 801c5c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801c7e8 <_strtod_l+0x5a0>
 801c5c6:	e7d2      	b.n	801c56e <_strtod_l+0x326>
 801c5c8:	ebae 0302 	sub.w	r3, lr, r2
 801c5cc:	9306      	str	r3, [sp, #24]
 801c5ce:	9b05      	ldr	r3, [sp, #20]
 801c5d0:	9807      	ldr	r0, [sp, #28]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	bf08      	it	eq
 801c5d6:	4623      	moveq	r3, r4
 801c5d8:	2c10      	cmp	r4, #16
 801c5da:	9305      	str	r3, [sp, #20]
 801c5dc:	46a0      	mov	r8, r4
 801c5de:	bfa8      	it	ge
 801c5e0:	f04f 0810 	movge.w	r8, #16
 801c5e4:	f7e3 ff9e 	bl	8000524 <__aeabi_ui2d>
 801c5e8:	2c09      	cmp	r4, #9
 801c5ea:	4682      	mov	sl, r0
 801c5ec:	468b      	mov	fp, r1
 801c5ee:	dc13      	bgt.n	801c618 <_strtod_l+0x3d0>
 801c5f0:	9b06      	ldr	r3, [sp, #24]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	f43f ae67 	beq.w	801c2c6 <_strtod_l+0x7e>
 801c5f8:	9b06      	ldr	r3, [sp, #24]
 801c5fa:	dd7a      	ble.n	801c6f2 <_strtod_l+0x4aa>
 801c5fc:	2b16      	cmp	r3, #22
 801c5fe:	dc61      	bgt.n	801c6c4 <_strtod_l+0x47c>
 801c600:	4a75      	ldr	r2, [pc, #468]	; (801c7d8 <_strtod_l+0x590>)
 801c602:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801c606:	e9de 0100 	ldrd	r0, r1, [lr]
 801c60a:	4652      	mov	r2, sl
 801c60c:	465b      	mov	r3, fp
 801c60e:	f7e4 f803 	bl	8000618 <__aeabi_dmul>
 801c612:	4682      	mov	sl, r0
 801c614:	468b      	mov	fp, r1
 801c616:	e656      	b.n	801c2c6 <_strtod_l+0x7e>
 801c618:	4b6f      	ldr	r3, [pc, #444]	; (801c7d8 <_strtod_l+0x590>)
 801c61a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c61e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c622:	f7e3 fff9 	bl	8000618 <__aeabi_dmul>
 801c626:	4606      	mov	r6, r0
 801c628:	4628      	mov	r0, r5
 801c62a:	460f      	mov	r7, r1
 801c62c:	f7e3 ff7a 	bl	8000524 <__aeabi_ui2d>
 801c630:	4602      	mov	r2, r0
 801c632:	460b      	mov	r3, r1
 801c634:	4630      	mov	r0, r6
 801c636:	4639      	mov	r1, r7
 801c638:	f7e3 fe38 	bl	80002ac <__adddf3>
 801c63c:	2c0f      	cmp	r4, #15
 801c63e:	4682      	mov	sl, r0
 801c640:	468b      	mov	fp, r1
 801c642:	ddd5      	ble.n	801c5f0 <_strtod_l+0x3a8>
 801c644:	9b06      	ldr	r3, [sp, #24]
 801c646:	eba4 0808 	sub.w	r8, r4, r8
 801c64a:	4498      	add	r8, r3
 801c64c:	f1b8 0f00 	cmp.w	r8, #0
 801c650:	f340 8096 	ble.w	801c780 <_strtod_l+0x538>
 801c654:	f018 030f 	ands.w	r3, r8, #15
 801c658:	d00a      	beq.n	801c670 <_strtod_l+0x428>
 801c65a:	495f      	ldr	r1, [pc, #380]	; (801c7d8 <_strtod_l+0x590>)
 801c65c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c660:	4652      	mov	r2, sl
 801c662:	465b      	mov	r3, fp
 801c664:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c668:	f7e3 ffd6 	bl	8000618 <__aeabi_dmul>
 801c66c:	4682      	mov	sl, r0
 801c66e:	468b      	mov	fp, r1
 801c670:	f038 080f 	bics.w	r8, r8, #15
 801c674:	d073      	beq.n	801c75e <_strtod_l+0x516>
 801c676:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c67a:	dd47      	ble.n	801c70c <_strtod_l+0x4c4>
 801c67c:	2400      	movs	r4, #0
 801c67e:	46a0      	mov	r8, r4
 801c680:	9407      	str	r4, [sp, #28]
 801c682:	9405      	str	r4, [sp, #20]
 801c684:	2322      	movs	r3, #34	; 0x22
 801c686:	f8df b158 	ldr.w	fp, [pc, #344]	; 801c7e0 <_strtod_l+0x598>
 801c68a:	f8c9 3000 	str.w	r3, [r9]
 801c68e:	f04f 0a00 	mov.w	sl, #0
 801c692:	9b07      	ldr	r3, [sp, #28]
 801c694:	2b00      	cmp	r3, #0
 801c696:	f43f ae16 	beq.w	801c2c6 <_strtod_l+0x7e>
 801c69a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c69c:	4648      	mov	r0, r9
 801c69e:	f001 fef5 	bl	801e48c <_Bfree>
 801c6a2:	9905      	ldr	r1, [sp, #20]
 801c6a4:	4648      	mov	r0, r9
 801c6a6:	f001 fef1 	bl	801e48c <_Bfree>
 801c6aa:	4641      	mov	r1, r8
 801c6ac:	4648      	mov	r0, r9
 801c6ae:	f001 feed 	bl	801e48c <_Bfree>
 801c6b2:	9907      	ldr	r1, [sp, #28]
 801c6b4:	4648      	mov	r0, r9
 801c6b6:	f001 fee9 	bl	801e48c <_Bfree>
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	4648      	mov	r0, r9
 801c6be:	f001 fee5 	bl	801e48c <_Bfree>
 801c6c2:	e600      	b.n	801c2c6 <_strtod_l+0x7e>
 801c6c4:	9a06      	ldr	r2, [sp, #24]
 801c6c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801c6ca:	4293      	cmp	r3, r2
 801c6cc:	dbba      	blt.n	801c644 <_strtod_l+0x3fc>
 801c6ce:	4d42      	ldr	r5, [pc, #264]	; (801c7d8 <_strtod_l+0x590>)
 801c6d0:	f1c4 040f 	rsb	r4, r4, #15
 801c6d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801c6d8:	4652      	mov	r2, sl
 801c6da:	465b      	mov	r3, fp
 801c6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6e0:	f7e3 ff9a 	bl	8000618 <__aeabi_dmul>
 801c6e4:	9b06      	ldr	r3, [sp, #24]
 801c6e6:	1b1c      	subs	r4, r3, r4
 801c6e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801c6ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c6f0:	e78d      	b.n	801c60e <_strtod_l+0x3c6>
 801c6f2:	f113 0f16 	cmn.w	r3, #22
 801c6f6:	dba5      	blt.n	801c644 <_strtod_l+0x3fc>
 801c6f8:	4a37      	ldr	r2, [pc, #220]	; (801c7d8 <_strtod_l+0x590>)
 801c6fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801c6fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 801c702:	4650      	mov	r0, sl
 801c704:	4659      	mov	r1, fp
 801c706:	f7e4 f8b1 	bl	800086c <__aeabi_ddiv>
 801c70a:	e782      	b.n	801c612 <_strtod_l+0x3ca>
 801c70c:	2300      	movs	r3, #0
 801c70e:	4e33      	ldr	r6, [pc, #204]	; (801c7dc <_strtod_l+0x594>)
 801c710:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c714:	4650      	mov	r0, sl
 801c716:	4659      	mov	r1, fp
 801c718:	461d      	mov	r5, r3
 801c71a:	f1b8 0f01 	cmp.w	r8, #1
 801c71e:	dc21      	bgt.n	801c764 <_strtod_l+0x51c>
 801c720:	b10b      	cbz	r3, 801c726 <_strtod_l+0x4de>
 801c722:	4682      	mov	sl, r0
 801c724:	468b      	mov	fp, r1
 801c726:	4b2d      	ldr	r3, [pc, #180]	; (801c7dc <_strtod_l+0x594>)
 801c728:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c72c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c730:	4652      	mov	r2, sl
 801c732:	465b      	mov	r3, fp
 801c734:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c738:	f7e3 ff6e 	bl	8000618 <__aeabi_dmul>
 801c73c:	4b28      	ldr	r3, [pc, #160]	; (801c7e0 <_strtod_l+0x598>)
 801c73e:	460a      	mov	r2, r1
 801c740:	400b      	ands	r3, r1
 801c742:	4928      	ldr	r1, [pc, #160]	; (801c7e4 <_strtod_l+0x59c>)
 801c744:	428b      	cmp	r3, r1
 801c746:	4682      	mov	sl, r0
 801c748:	d898      	bhi.n	801c67c <_strtod_l+0x434>
 801c74a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c74e:	428b      	cmp	r3, r1
 801c750:	bf86      	itte	hi
 801c752:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c7ec <_strtod_l+0x5a4>
 801c756:	f04f 3aff 	movhi.w	sl, #4294967295
 801c75a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c75e:	2300      	movs	r3, #0
 801c760:	9304      	str	r3, [sp, #16]
 801c762:	e077      	b.n	801c854 <_strtod_l+0x60c>
 801c764:	f018 0f01 	tst.w	r8, #1
 801c768:	d006      	beq.n	801c778 <_strtod_l+0x530>
 801c76a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c772:	f7e3 ff51 	bl	8000618 <__aeabi_dmul>
 801c776:	2301      	movs	r3, #1
 801c778:	3501      	adds	r5, #1
 801c77a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c77e:	e7cc      	b.n	801c71a <_strtod_l+0x4d2>
 801c780:	d0ed      	beq.n	801c75e <_strtod_l+0x516>
 801c782:	f1c8 0800 	rsb	r8, r8, #0
 801c786:	f018 020f 	ands.w	r2, r8, #15
 801c78a:	d00a      	beq.n	801c7a2 <_strtod_l+0x55a>
 801c78c:	4b12      	ldr	r3, [pc, #72]	; (801c7d8 <_strtod_l+0x590>)
 801c78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c792:	4650      	mov	r0, sl
 801c794:	4659      	mov	r1, fp
 801c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c79a:	f7e4 f867 	bl	800086c <__aeabi_ddiv>
 801c79e:	4682      	mov	sl, r0
 801c7a0:	468b      	mov	fp, r1
 801c7a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c7a6:	d0da      	beq.n	801c75e <_strtod_l+0x516>
 801c7a8:	f1b8 0f1f 	cmp.w	r8, #31
 801c7ac:	dd20      	ble.n	801c7f0 <_strtod_l+0x5a8>
 801c7ae:	2400      	movs	r4, #0
 801c7b0:	46a0      	mov	r8, r4
 801c7b2:	9407      	str	r4, [sp, #28]
 801c7b4:	9405      	str	r4, [sp, #20]
 801c7b6:	2322      	movs	r3, #34	; 0x22
 801c7b8:	f04f 0a00 	mov.w	sl, #0
 801c7bc:	f04f 0b00 	mov.w	fp, #0
 801c7c0:	f8c9 3000 	str.w	r3, [r9]
 801c7c4:	e765      	b.n	801c692 <_strtod_l+0x44a>
 801c7c6:	bf00      	nop
 801c7c8:	080249ab 	.word	0x080249ab
 801c7cc:	08024b34 	.word	0x08024b34
 801c7d0:	080249b3 	.word	0x080249b3
 801c7d4:	080249f0 	.word	0x080249f0
 801c7d8:	08024bc8 	.word	0x08024bc8
 801c7dc:	08024ba0 	.word	0x08024ba0
 801c7e0:	7ff00000 	.word	0x7ff00000
 801c7e4:	7ca00000 	.word	0x7ca00000
 801c7e8:	fff80000 	.word	0xfff80000
 801c7ec:	7fefffff 	.word	0x7fefffff
 801c7f0:	f018 0310 	ands.w	r3, r8, #16
 801c7f4:	bf18      	it	ne
 801c7f6:	236a      	movne	r3, #106	; 0x6a
 801c7f8:	4da0      	ldr	r5, [pc, #640]	; (801ca7c <_strtod_l+0x834>)
 801c7fa:	9304      	str	r3, [sp, #16]
 801c7fc:	4650      	mov	r0, sl
 801c7fe:	4659      	mov	r1, fp
 801c800:	2300      	movs	r3, #0
 801c802:	f1b8 0f00 	cmp.w	r8, #0
 801c806:	f300 810a 	bgt.w	801ca1e <_strtod_l+0x7d6>
 801c80a:	b10b      	cbz	r3, 801c810 <_strtod_l+0x5c8>
 801c80c:	4682      	mov	sl, r0
 801c80e:	468b      	mov	fp, r1
 801c810:	9b04      	ldr	r3, [sp, #16]
 801c812:	b1bb      	cbz	r3, 801c844 <_strtod_l+0x5fc>
 801c814:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	4659      	mov	r1, fp
 801c820:	dd10      	ble.n	801c844 <_strtod_l+0x5fc>
 801c822:	2b1f      	cmp	r3, #31
 801c824:	f340 8107 	ble.w	801ca36 <_strtod_l+0x7ee>
 801c828:	2b34      	cmp	r3, #52	; 0x34
 801c82a:	bfde      	ittt	le
 801c82c:	3b20      	suble	r3, #32
 801c82e:	f04f 32ff 	movle.w	r2, #4294967295
 801c832:	fa02 f303 	lslle.w	r3, r2, r3
 801c836:	f04f 0a00 	mov.w	sl, #0
 801c83a:	bfcc      	ite	gt
 801c83c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c840:	ea03 0b01 	andle.w	fp, r3, r1
 801c844:	2200      	movs	r2, #0
 801c846:	2300      	movs	r3, #0
 801c848:	4650      	mov	r0, sl
 801c84a:	4659      	mov	r1, fp
 801c84c:	f7e4 f94c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c850:	2800      	cmp	r0, #0
 801c852:	d1ac      	bne.n	801c7ae <_strtod_l+0x566>
 801c854:	9b07      	ldr	r3, [sp, #28]
 801c856:	9300      	str	r3, [sp, #0]
 801c858:	9a05      	ldr	r2, [sp, #20]
 801c85a:	9908      	ldr	r1, [sp, #32]
 801c85c:	4623      	mov	r3, r4
 801c85e:	4648      	mov	r0, r9
 801c860:	f001 fe66 	bl	801e530 <__s2b>
 801c864:	9007      	str	r0, [sp, #28]
 801c866:	2800      	cmp	r0, #0
 801c868:	f43f af08 	beq.w	801c67c <_strtod_l+0x434>
 801c86c:	9a06      	ldr	r2, [sp, #24]
 801c86e:	9b06      	ldr	r3, [sp, #24]
 801c870:	2a00      	cmp	r2, #0
 801c872:	f1c3 0300 	rsb	r3, r3, #0
 801c876:	bfa8      	it	ge
 801c878:	2300      	movge	r3, #0
 801c87a:	930e      	str	r3, [sp, #56]	; 0x38
 801c87c:	2400      	movs	r4, #0
 801c87e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c882:	9316      	str	r3, [sp, #88]	; 0x58
 801c884:	46a0      	mov	r8, r4
 801c886:	9b07      	ldr	r3, [sp, #28]
 801c888:	4648      	mov	r0, r9
 801c88a:	6859      	ldr	r1, [r3, #4]
 801c88c:	f001 fdca 	bl	801e424 <_Balloc>
 801c890:	9005      	str	r0, [sp, #20]
 801c892:	2800      	cmp	r0, #0
 801c894:	f43f aef6 	beq.w	801c684 <_strtod_l+0x43c>
 801c898:	9b07      	ldr	r3, [sp, #28]
 801c89a:	691a      	ldr	r2, [r3, #16]
 801c89c:	3202      	adds	r2, #2
 801c89e:	f103 010c 	add.w	r1, r3, #12
 801c8a2:	0092      	lsls	r2, r2, #2
 801c8a4:	300c      	adds	r0, #12
 801c8a6:	f7fe fea4 	bl	801b5f2 <memcpy>
 801c8aa:	aa1e      	add	r2, sp, #120	; 0x78
 801c8ac:	a91d      	add	r1, sp, #116	; 0x74
 801c8ae:	ec4b ab10 	vmov	d0, sl, fp
 801c8b2:	4648      	mov	r0, r9
 801c8b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c8b8:	f002 f8f6 	bl	801eaa8 <__d2b>
 801c8bc:	901c      	str	r0, [sp, #112]	; 0x70
 801c8be:	2800      	cmp	r0, #0
 801c8c0:	f43f aee0 	beq.w	801c684 <_strtod_l+0x43c>
 801c8c4:	2101      	movs	r1, #1
 801c8c6:	4648      	mov	r0, r9
 801c8c8:	f001 febe 	bl	801e648 <__i2b>
 801c8cc:	4680      	mov	r8, r0
 801c8ce:	2800      	cmp	r0, #0
 801c8d0:	f43f aed8 	beq.w	801c684 <_strtod_l+0x43c>
 801c8d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c8d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c8d8:	2e00      	cmp	r6, #0
 801c8da:	bfab      	itete	ge
 801c8dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801c8de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801c8e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801c8e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801c8e4:	bfac      	ite	ge
 801c8e6:	18f7      	addge	r7, r6, r3
 801c8e8:	1b9d      	sublt	r5, r3, r6
 801c8ea:	9b04      	ldr	r3, [sp, #16]
 801c8ec:	1af6      	subs	r6, r6, r3
 801c8ee:	4416      	add	r6, r2
 801c8f0:	4b63      	ldr	r3, [pc, #396]	; (801ca80 <_strtod_l+0x838>)
 801c8f2:	3e01      	subs	r6, #1
 801c8f4:	429e      	cmp	r6, r3
 801c8f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c8fa:	f280 80af 	bge.w	801ca5c <_strtod_l+0x814>
 801c8fe:	1b9b      	subs	r3, r3, r6
 801c900:	2b1f      	cmp	r3, #31
 801c902:	eba2 0203 	sub.w	r2, r2, r3
 801c906:	f04f 0101 	mov.w	r1, #1
 801c90a:	f300 809b 	bgt.w	801ca44 <_strtod_l+0x7fc>
 801c90e:	fa01 f303 	lsl.w	r3, r1, r3
 801c912:	930f      	str	r3, [sp, #60]	; 0x3c
 801c914:	2300      	movs	r3, #0
 801c916:	930a      	str	r3, [sp, #40]	; 0x28
 801c918:	18be      	adds	r6, r7, r2
 801c91a:	9b04      	ldr	r3, [sp, #16]
 801c91c:	42b7      	cmp	r7, r6
 801c91e:	4415      	add	r5, r2
 801c920:	441d      	add	r5, r3
 801c922:	463b      	mov	r3, r7
 801c924:	bfa8      	it	ge
 801c926:	4633      	movge	r3, r6
 801c928:	42ab      	cmp	r3, r5
 801c92a:	bfa8      	it	ge
 801c92c:	462b      	movge	r3, r5
 801c92e:	2b00      	cmp	r3, #0
 801c930:	bfc2      	ittt	gt
 801c932:	1af6      	subgt	r6, r6, r3
 801c934:	1aed      	subgt	r5, r5, r3
 801c936:	1aff      	subgt	r7, r7, r3
 801c938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c93a:	b1bb      	cbz	r3, 801c96c <_strtod_l+0x724>
 801c93c:	4641      	mov	r1, r8
 801c93e:	461a      	mov	r2, r3
 801c940:	4648      	mov	r0, r9
 801c942:	f001 ff21 	bl	801e788 <__pow5mult>
 801c946:	4680      	mov	r8, r0
 801c948:	2800      	cmp	r0, #0
 801c94a:	f43f ae9b 	beq.w	801c684 <_strtod_l+0x43c>
 801c94e:	4601      	mov	r1, r0
 801c950:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c952:	4648      	mov	r0, r9
 801c954:	f001 fe81 	bl	801e65a <__multiply>
 801c958:	900c      	str	r0, [sp, #48]	; 0x30
 801c95a:	2800      	cmp	r0, #0
 801c95c:	f43f ae92 	beq.w	801c684 <_strtod_l+0x43c>
 801c960:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c962:	4648      	mov	r0, r9
 801c964:	f001 fd92 	bl	801e48c <_Bfree>
 801c968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c96a:	931c      	str	r3, [sp, #112]	; 0x70
 801c96c:	2e00      	cmp	r6, #0
 801c96e:	dc7a      	bgt.n	801ca66 <_strtod_l+0x81e>
 801c970:	9b06      	ldr	r3, [sp, #24]
 801c972:	2b00      	cmp	r3, #0
 801c974:	dd08      	ble.n	801c988 <_strtod_l+0x740>
 801c976:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c978:	9905      	ldr	r1, [sp, #20]
 801c97a:	4648      	mov	r0, r9
 801c97c:	f001 ff04 	bl	801e788 <__pow5mult>
 801c980:	9005      	str	r0, [sp, #20]
 801c982:	2800      	cmp	r0, #0
 801c984:	f43f ae7e 	beq.w	801c684 <_strtod_l+0x43c>
 801c988:	2d00      	cmp	r5, #0
 801c98a:	dd08      	ble.n	801c99e <_strtod_l+0x756>
 801c98c:	462a      	mov	r2, r5
 801c98e:	9905      	ldr	r1, [sp, #20]
 801c990:	4648      	mov	r0, r9
 801c992:	f001 ff47 	bl	801e824 <__lshift>
 801c996:	9005      	str	r0, [sp, #20]
 801c998:	2800      	cmp	r0, #0
 801c99a:	f43f ae73 	beq.w	801c684 <_strtod_l+0x43c>
 801c99e:	2f00      	cmp	r7, #0
 801c9a0:	dd08      	ble.n	801c9b4 <_strtod_l+0x76c>
 801c9a2:	4641      	mov	r1, r8
 801c9a4:	463a      	mov	r2, r7
 801c9a6:	4648      	mov	r0, r9
 801c9a8:	f001 ff3c 	bl	801e824 <__lshift>
 801c9ac:	4680      	mov	r8, r0
 801c9ae:	2800      	cmp	r0, #0
 801c9b0:	f43f ae68 	beq.w	801c684 <_strtod_l+0x43c>
 801c9b4:	9a05      	ldr	r2, [sp, #20]
 801c9b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c9b8:	4648      	mov	r0, r9
 801c9ba:	f001 ffa1 	bl	801e900 <__mdiff>
 801c9be:	4604      	mov	r4, r0
 801c9c0:	2800      	cmp	r0, #0
 801c9c2:	f43f ae5f 	beq.w	801c684 <_strtod_l+0x43c>
 801c9c6:	68c3      	ldr	r3, [r0, #12]
 801c9c8:	930c      	str	r3, [sp, #48]	; 0x30
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	60c3      	str	r3, [r0, #12]
 801c9ce:	4641      	mov	r1, r8
 801c9d0:	f001 ff7c 	bl	801e8cc <__mcmp>
 801c9d4:	2800      	cmp	r0, #0
 801c9d6:	da55      	bge.n	801ca84 <_strtod_l+0x83c>
 801c9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9da:	b9e3      	cbnz	r3, 801ca16 <_strtod_l+0x7ce>
 801c9dc:	f1ba 0f00 	cmp.w	sl, #0
 801c9e0:	d119      	bne.n	801ca16 <_strtod_l+0x7ce>
 801c9e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9e6:	b9b3      	cbnz	r3, 801ca16 <_strtod_l+0x7ce>
 801c9e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9ec:	0d1b      	lsrs	r3, r3, #20
 801c9ee:	051b      	lsls	r3, r3, #20
 801c9f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c9f4:	d90f      	bls.n	801ca16 <_strtod_l+0x7ce>
 801c9f6:	6963      	ldr	r3, [r4, #20]
 801c9f8:	b913      	cbnz	r3, 801ca00 <_strtod_l+0x7b8>
 801c9fa:	6923      	ldr	r3, [r4, #16]
 801c9fc:	2b01      	cmp	r3, #1
 801c9fe:	dd0a      	ble.n	801ca16 <_strtod_l+0x7ce>
 801ca00:	4621      	mov	r1, r4
 801ca02:	2201      	movs	r2, #1
 801ca04:	4648      	mov	r0, r9
 801ca06:	f001 ff0d 	bl	801e824 <__lshift>
 801ca0a:	4641      	mov	r1, r8
 801ca0c:	4604      	mov	r4, r0
 801ca0e:	f001 ff5d 	bl	801e8cc <__mcmp>
 801ca12:	2800      	cmp	r0, #0
 801ca14:	dc67      	bgt.n	801cae6 <_strtod_l+0x89e>
 801ca16:	9b04      	ldr	r3, [sp, #16]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d171      	bne.n	801cb00 <_strtod_l+0x8b8>
 801ca1c:	e63d      	b.n	801c69a <_strtod_l+0x452>
 801ca1e:	f018 0f01 	tst.w	r8, #1
 801ca22:	d004      	beq.n	801ca2e <_strtod_l+0x7e6>
 801ca24:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ca28:	f7e3 fdf6 	bl	8000618 <__aeabi_dmul>
 801ca2c:	2301      	movs	r3, #1
 801ca2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ca32:	3508      	adds	r5, #8
 801ca34:	e6e5      	b.n	801c802 <_strtod_l+0x5ba>
 801ca36:	f04f 32ff 	mov.w	r2, #4294967295
 801ca3a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca3e:	ea03 0a0a 	and.w	sl, r3, sl
 801ca42:	e6ff      	b.n	801c844 <_strtod_l+0x5fc>
 801ca44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801ca48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801ca4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801ca50:	36e2      	adds	r6, #226	; 0xe2
 801ca52:	fa01 f306 	lsl.w	r3, r1, r6
 801ca56:	930a      	str	r3, [sp, #40]	; 0x28
 801ca58:	910f      	str	r1, [sp, #60]	; 0x3c
 801ca5a:	e75d      	b.n	801c918 <_strtod_l+0x6d0>
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	930a      	str	r3, [sp, #40]	; 0x28
 801ca60:	2301      	movs	r3, #1
 801ca62:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca64:	e758      	b.n	801c918 <_strtod_l+0x6d0>
 801ca66:	4632      	mov	r2, r6
 801ca68:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ca6a:	4648      	mov	r0, r9
 801ca6c:	f001 feda 	bl	801e824 <__lshift>
 801ca70:	901c      	str	r0, [sp, #112]	; 0x70
 801ca72:	2800      	cmp	r0, #0
 801ca74:	f47f af7c 	bne.w	801c970 <_strtod_l+0x728>
 801ca78:	e604      	b.n	801c684 <_strtod_l+0x43c>
 801ca7a:	bf00      	nop
 801ca7c:	08024a08 	.word	0x08024a08
 801ca80:	fffffc02 	.word	0xfffffc02
 801ca84:	465d      	mov	r5, fp
 801ca86:	f040 8086 	bne.w	801cb96 <_strtod_l+0x94e>
 801ca8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca90:	b32a      	cbz	r2, 801cade <_strtod_l+0x896>
 801ca92:	4aaf      	ldr	r2, [pc, #700]	; (801cd50 <_strtod_l+0xb08>)
 801ca94:	4293      	cmp	r3, r2
 801ca96:	d153      	bne.n	801cb40 <_strtod_l+0x8f8>
 801ca98:	9b04      	ldr	r3, [sp, #16]
 801ca9a:	4650      	mov	r0, sl
 801ca9c:	b1d3      	cbz	r3, 801cad4 <_strtod_l+0x88c>
 801ca9e:	4aad      	ldr	r2, [pc, #692]	; (801cd54 <_strtod_l+0xb0c>)
 801caa0:	402a      	ands	r2, r5
 801caa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801caa6:	f04f 31ff 	mov.w	r1, #4294967295
 801caaa:	d816      	bhi.n	801cada <_strtod_l+0x892>
 801caac:	0d12      	lsrs	r2, r2, #20
 801caae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cab2:	fa01 f303 	lsl.w	r3, r1, r3
 801cab6:	4298      	cmp	r0, r3
 801cab8:	d142      	bne.n	801cb40 <_strtod_l+0x8f8>
 801caba:	4ba7      	ldr	r3, [pc, #668]	; (801cd58 <_strtod_l+0xb10>)
 801cabc:	429d      	cmp	r5, r3
 801cabe:	d102      	bne.n	801cac6 <_strtod_l+0x87e>
 801cac0:	3001      	adds	r0, #1
 801cac2:	f43f addf 	beq.w	801c684 <_strtod_l+0x43c>
 801cac6:	4ba3      	ldr	r3, [pc, #652]	; (801cd54 <_strtod_l+0xb0c>)
 801cac8:	402b      	ands	r3, r5
 801caca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cace:	f04f 0a00 	mov.w	sl, #0
 801cad2:	e7a0      	b.n	801ca16 <_strtod_l+0x7ce>
 801cad4:	f04f 33ff 	mov.w	r3, #4294967295
 801cad8:	e7ed      	b.n	801cab6 <_strtod_l+0x86e>
 801cada:	460b      	mov	r3, r1
 801cadc:	e7eb      	b.n	801cab6 <_strtod_l+0x86e>
 801cade:	bb7b      	cbnz	r3, 801cb40 <_strtod_l+0x8f8>
 801cae0:	f1ba 0f00 	cmp.w	sl, #0
 801cae4:	d12c      	bne.n	801cb40 <_strtod_l+0x8f8>
 801cae6:	9904      	ldr	r1, [sp, #16]
 801cae8:	4a9a      	ldr	r2, [pc, #616]	; (801cd54 <_strtod_l+0xb0c>)
 801caea:	465b      	mov	r3, fp
 801caec:	b1f1      	cbz	r1, 801cb2c <_strtod_l+0x8e4>
 801caee:	ea02 010b 	and.w	r1, r2, fp
 801caf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801caf6:	dc19      	bgt.n	801cb2c <_strtod_l+0x8e4>
 801caf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cafc:	f77f ae5b 	ble.w	801c7b6 <_strtod_l+0x56e>
 801cb00:	4a96      	ldr	r2, [pc, #600]	; (801cd5c <_strtod_l+0xb14>)
 801cb02:	2300      	movs	r3, #0
 801cb04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801cb08:	4650      	mov	r0, sl
 801cb0a:	4659      	mov	r1, fp
 801cb0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cb10:	f7e3 fd82 	bl	8000618 <__aeabi_dmul>
 801cb14:	4682      	mov	sl, r0
 801cb16:	468b      	mov	fp, r1
 801cb18:	2900      	cmp	r1, #0
 801cb1a:	f47f adbe 	bne.w	801c69a <_strtod_l+0x452>
 801cb1e:	2800      	cmp	r0, #0
 801cb20:	f47f adbb 	bne.w	801c69a <_strtod_l+0x452>
 801cb24:	2322      	movs	r3, #34	; 0x22
 801cb26:	f8c9 3000 	str.w	r3, [r9]
 801cb2a:	e5b6      	b.n	801c69a <_strtod_l+0x452>
 801cb2c:	4013      	ands	r3, r2
 801cb2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cb32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cb36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cb3a:	f04f 3aff 	mov.w	sl, #4294967295
 801cb3e:	e76a      	b.n	801ca16 <_strtod_l+0x7ce>
 801cb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb42:	b193      	cbz	r3, 801cb6a <_strtod_l+0x922>
 801cb44:	422b      	tst	r3, r5
 801cb46:	f43f af66 	beq.w	801ca16 <_strtod_l+0x7ce>
 801cb4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb4c:	9a04      	ldr	r2, [sp, #16]
 801cb4e:	4650      	mov	r0, sl
 801cb50:	4659      	mov	r1, fp
 801cb52:	b173      	cbz	r3, 801cb72 <_strtod_l+0x92a>
 801cb54:	f7ff fb5a 	bl	801c20c <sulp>
 801cb58:	4602      	mov	r2, r0
 801cb5a:	460b      	mov	r3, r1
 801cb5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb60:	f7e3 fba4 	bl	80002ac <__adddf3>
 801cb64:	4682      	mov	sl, r0
 801cb66:	468b      	mov	fp, r1
 801cb68:	e755      	b.n	801ca16 <_strtod_l+0x7ce>
 801cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb6c:	ea13 0f0a 	tst.w	r3, sl
 801cb70:	e7e9      	b.n	801cb46 <_strtod_l+0x8fe>
 801cb72:	f7ff fb4b 	bl	801c20c <sulp>
 801cb76:	4602      	mov	r2, r0
 801cb78:	460b      	mov	r3, r1
 801cb7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb7e:	f7e3 fb93 	bl	80002a8 <__aeabi_dsub>
 801cb82:	2200      	movs	r2, #0
 801cb84:	2300      	movs	r3, #0
 801cb86:	4682      	mov	sl, r0
 801cb88:	468b      	mov	fp, r1
 801cb8a:	f7e3 ffad 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb8e:	2800      	cmp	r0, #0
 801cb90:	f47f ae11 	bne.w	801c7b6 <_strtod_l+0x56e>
 801cb94:	e73f      	b.n	801ca16 <_strtod_l+0x7ce>
 801cb96:	4641      	mov	r1, r8
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f001 ffd4 	bl	801eb46 <__ratio>
 801cb9e:	ec57 6b10 	vmov	r6, r7, d0
 801cba2:	2200      	movs	r2, #0
 801cba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cba8:	ee10 0a10 	vmov	r0, s0
 801cbac:	4639      	mov	r1, r7
 801cbae:	f7e3 ffaf 	bl	8000b10 <__aeabi_dcmple>
 801cbb2:	2800      	cmp	r0, #0
 801cbb4:	d077      	beq.n	801cca6 <_strtod_l+0xa5e>
 801cbb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d04a      	beq.n	801cc52 <_strtod_l+0xa0a>
 801cbbc:	4b68      	ldr	r3, [pc, #416]	; (801cd60 <_strtod_l+0xb18>)
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cbc4:	4f66      	ldr	r7, [pc, #408]	; (801cd60 <_strtod_l+0xb18>)
 801cbc6:	2600      	movs	r6, #0
 801cbc8:	4b62      	ldr	r3, [pc, #392]	; (801cd54 <_strtod_l+0xb0c>)
 801cbca:	402b      	ands	r3, r5
 801cbcc:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cbd0:	4b64      	ldr	r3, [pc, #400]	; (801cd64 <_strtod_l+0xb1c>)
 801cbd2:	429a      	cmp	r2, r3
 801cbd4:	f040 80ce 	bne.w	801cd74 <_strtod_l+0xb2c>
 801cbd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cbdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cbe0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801cbe4:	ec4b ab10 	vmov	d0, sl, fp
 801cbe8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801cbec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cbf0:	f001 fee4 	bl	801e9bc <__ulp>
 801cbf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cbf8:	ec53 2b10 	vmov	r2, r3, d0
 801cbfc:	f7e3 fd0c 	bl	8000618 <__aeabi_dmul>
 801cc00:	4652      	mov	r2, sl
 801cc02:	465b      	mov	r3, fp
 801cc04:	f7e3 fb52 	bl	80002ac <__adddf3>
 801cc08:	460b      	mov	r3, r1
 801cc0a:	4952      	ldr	r1, [pc, #328]	; (801cd54 <_strtod_l+0xb0c>)
 801cc0c:	4a56      	ldr	r2, [pc, #344]	; (801cd68 <_strtod_l+0xb20>)
 801cc0e:	4019      	ands	r1, r3
 801cc10:	4291      	cmp	r1, r2
 801cc12:	4682      	mov	sl, r0
 801cc14:	d95b      	bls.n	801ccce <_strtod_l+0xa86>
 801cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	d103      	bne.n	801cc28 <_strtod_l+0x9e0>
 801cc20:	9b08      	ldr	r3, [sp, #32]
 801cc22:	3301      	adds	r3, #1
 801cc24:	f43f ad2e 	beq.w	801c684 <_strtod_l+0x43c>
 801cc28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801cd58 <_strtod_l+0xb10>
 801cc2c:	f04f 3aff 	mov.w	sl, #4294967295
 801cc30:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cc32:	4648      	mov	r0, r9
 801cc34:	f001 fc2a 	bl	801e48c <_Bfree>
 801cc38:	9905      	ldr	r1, [sp, #20]
 801cc3a:	4648      	mov	r0, r9
 801cc3c:	f001 fc26 	bl	801e48c <_Bfree>
 801cc40:	4641      	mov	r1, r8
 801cc42:	4648      	mov	r0, r9
 801cc44:	f001 fc22 	bl	801e48c <_Bfree>
 801cc48:	4621      	mov	r1, r4
 801cc4a:	4648      	mov	r0, r9
 801cc4c:	f001 fc1e 	bl	801e48c <_Bfree>
 801cc50:	e619      	b.n	801c886 <_strtod_l+0x63e>
 801cc52:	f1ba 0f00 	cmp.w	sl, #0
 801cc56:	d11a      	bne.n	801cc8e <_strtod_l+0xa46>
 801cc58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc5c:	b9eb      	cbnz	r3, 801cc9a <_strtod_l+0xa52>
 801cc5e:	2200      	movs	r2, #0
 801cc60:	4b3f      	ldr	r3, [pc, #252]	; (801cd60 <_strtod_l+0xb18>)
 801cc62:	4630      	mov	r0, r6
 801cc64:	4639      	mov	r1, r7
 801cc66:	f7e3 ff49 	bl	8000afc <__aeabi_dcmplt>
 801cc6a:	b9c8      	cbnz	r0, 801cca0 <_strtod_l+0xa58>
 801cc6c:	4630      	mov	r0, r6
 801cc6e:	4639      	mov	r1, r7
 801cc70:	2200      	movs	r2, #0
 801cc72:	4b3e      	ldr	r3, [pc, #248]	; (801cd6c <_strtod_l+0xb24>)
 801cc74:	f7e3 fcd0 	bl	8000618 <__aeabi_dmul>
 801cc78:	4606      	mov	r6, r0
 801cc7a:	460f      	mov	r7, r1
 801cc7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801cc80:	9618      	str	r6, [sp, #96]	; 0x60
 801cc82:	9319      	str	r3, [sp, #100]	; 0x64
 801cc84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801cc88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cc8c:	e79c      	b.n	801cbc8 <_strtod_l+0x980>
 801cc8e:	f1ba 0f01 	cmp.w	sl, #1
 801cc92:	d102      	bne.n	801cc9a <_strtod_l+0xa52>
 801cc94:	2d00      	cmp	r5, #0
 801cc96:	f43f ad8e 	beq.w	801c7b6 <_strtod_l+0x56e>
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	4b34      	ldr	r3, [pc, #208]	; (801cd70 <_strtod_l+0xb28>)
 801cc9e:	e78f      	b.n	801cbc0 <_strtod_l+0x978>
 801cca0:	2600      	movs	r6, #0
 801cca2:	4f32      	ldr	r7, [pc, #200]	; (801cd6c <_strtod_l+0xb24>)
 801cca4:	e7ea      	b.n	801cc7c <_strtod_l+0xa34>
 801cca6:	4b31      	ldr	r3, [pc, #196]	; (801cd6c <_strtod_l+0xb24>)
 801cca8:	4630      	mov	r0, r6
 801ccaa:	4639      	mov	r1, r7
 801ccac:	2200      	movs	r2, #0
 801ccae:	f7e3 fcb3 	bl	8000618 <__aeabi_dmul>
 801ccb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccb4:	4606      	mov	r6, r0
 801ccb6:	460f      	mov	r7, r1
 801ccb8:	b933      	cbnz	r3, 801ccc8 <_strtod_l+0xa80>
 801ccba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ccbe:	9010      	str	r0, [sp, #64]	; 0x40
 801ccc0:	9311      	str	r3, [sp, #68]	; 0x44
 801ccc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ccc6:	e7df      	b.n	801cc88 <_strtod_l+0xa40>
 801ccc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801cccc:	e7f9      	b.n	801ccc2 <_strtod_l+0xa7a>
 801ccce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ccd2:	9b04      	ldr	r3, [sp, #16]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d1ab      	bne.n	801cc30 <_strtod_l+0x9e8>
 801ccd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ccdc:	0d1b      	lsrs	r3, r3, #20
 801ccde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cce0:	051b      	lsls	r3, r3, #20
 801cce2:	429a      	cmp	r2, r3
 801cce4:	465d      	mov	r5, fp
 801cce6:	d1a3      	bne.n	801cc30 <_strtod_l+0x9e8>
 801cce8:	4639      	mov	r1, r7
 801ccea:	4630      	mov	r0, r6
 801ccec:	f7e3 ff44 	bl	8000b78 <__aeabi_d2iz>
 801ccf0:	f7e3 fc28 	bl	8000544 <__aeabi_i2d>
 801ccf4:	460b      	mov	r3, r1
 801ccf6:	4602      	mov	r2, r0
 801ccf8:	4639      	mov	r1, r7
 801ccfa:	4630      	mov	r0, r6
 801ccfc:	f7e3 fad4 	bl	80002a8 <__aeabi_dsub>
 801cd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd02:	4606      	mov	r6, r0
 801cd04:	460f      	mov	r7, r1
 801cd06:	b933      	cbnz	r3, 801cd16 <_strtod_l+0xace>
 801cd08:	f1ba 0f00 	cmp.w	sl, #0
 801cd0c:	d103      	bne.n	801cd16 <_strtod_l+0xace>
 801cd0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801cd12:	2d00      	cmp	r5, #0
 801cd14:	d06d      	beq.n	801cdf2 <_strtod_l+0xbaa>
 801cd16:	a30a      	add	r3, pc, #40	; (adr r3, 801cd40 <_strtod_l+0xaf8>)
 801cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1c:	4630      	mov	r0, r6
 801cd1e:	4639      	mov	r1, r7
 801cd20:	f7e3 feec 	bl	8000afc <__aeabi_dcmplt>
 801cd24:	2800      	cmp	r0, #0
 801cd26:	f47f acb8 	bne.w	801c69a <_strtod_l+0x452>
 801cd2a:	a307      	add	r3, pc, #28	; (adr r3, 801cd48 <_strtod_l+0xb00>)
 801cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd30:	4630      	mov	r0, r6
 801cd32:	4639      	mov	r1, r7
 801cd34:	f7e3 ff00 	bl	8000b38 <__aeabi_dcmpgt>
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	f43f af79 	beq.w	801cc30 <_strtod_l+0x9e8>
 801cd3e:	e4ac      	b.n	801c69a <_strtod_l+0x452>
 801cd40:	94a03595 	.word	0x94a03595
 801cd44:	3fdfffff 	.word	0x3fdfffff
 801cd48:	35afe535 	.word	0x35afe535
 801cd4c:	3fe00000 	.word	0x3fe00000
 801cd50:	000fffff 	.word	0x000fffff
 801cd54:	7ff00000 	.word	0x7ff00000
 801cd58:	7fefffff 	.word	0x7fefffff
 801cd5c:	39500000 	.word	0x39500000
 801cd60:	3ff00000 	.word	0x3ff00000
 801cd64:	7fe00000 	.word	0x7fe00000
 801cd68:	7c9fffff 	.word	0x7c9fffff
 801cd6c:	3fe00000 	.word	0x3fe00000
 801cd70:	bff00000 	.word	0xbff00000
 801cd74:	9b04      	ldr	r3, [sp, #16]
 801cd76:	b333      	cbz	r3, 801cdc6 <_strtod_l+0xb7e>
 801cd78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cd7e:	d822      	bhi.n	801cdc6 <_strtod_l+0xb7e>
 801cd80:	a327      	add	r3, pc, #156	; (adr r3, 801ce20 <_strtod_l+0xbd8>)
 801cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd86:	4630      	mov	r0, r6
 801cd88:	4639      	mov	r1, r7
 801cd8a:	f7e3 fec1 	bl	8000b10 <__aeabi_dcmple>
 801cd8e:	b1a0      	cbz	r0, 801cdba <_strtod_l+0xb72>
 801cd90:	4639      	mov	r1, r7
 801cd92:	4630      	mov	r0, r6
 801cd94:	f7e3 ff18 	bl	8000bc8 <__aeabi_d2uiz>
 801cd98:	2800      	cmp	r0, #0
 801cd9a:	bf08      	it	eq
 801cd9c:	2001      	moveq	r0, #1
 801cd9e:	f7e3 fbc1 	bl	8000524 <__aeabi_ui2d>
 801cda2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cda4:	4606      	mov	r6, r0
 801cda6:	460f      	mov	r7, r1
 801cda8:	bb03      	cbnz	r3, 801cdec <_strtod_l+0xba4>
 801cdaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cdae:	9012      	str	r0, [sp, #72]	; 0x48
 801cdb0:	9313      	str	r3, [sp, #76]	; 0x4c
 801cdb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801cdb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cdba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cdc2:	1a9b      	subs	r3, r3, r2
 801cdc4:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801cdca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801cdce:	f001 fdf5 	bl	801e9bc <__ulp>
 801cdd2:	4650      	mov	r0, sl
 801cdd4:	ec53 2b10 	vmov	r2, r3, d0
 801cdd8:	4659      	mov	r1, fp
 801cdda:	f7e3 fc1d 	bl	8000618 <__aeabi_dmul>
 801cdde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cde2:	f7e3 fa63 	bl	80002ac <__adddf3>
 801cde6:	4682      	mov	sl, r0
 801cde8:	468b      	mov	fp, r1
 801cdea:	e772      	b.n	801ccd2 <_strtod_l+0xa8a>
 801cdec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801cdf0:	e7df      	b.n	801cdb2 <_strtod_l+0xb6a>
 801cdf2:	a30d      	add	r3, pc, #52	; (adr r3, 801ce28 <_strtod_l+0xbe0>)
 801cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf8:	f7e3 fe80 	bl	8000afc <__aeabi_dcmplt>
 801cdfc:	e79c      	b.n	801cd38 <_strtod_l+0xaf0>
 801cdfe:	2300      	movs	r3, #0
 801ce00:	930d      	str	r3, [sp, #52]	; 0x34
 801ce02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ce04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ce06:	6013      	str	r3, [r2, #0]
 801ce08:	f7ff ba61 	b.w	801c2ce <_strtod_l+0x86>
 801ce0c:	2b65      	cmp	r3, #101	; 0x65
 801ce0e:	f04f 0200 	mov.w	r2, #0
 801ce12:	f43f ab4e 	beq.w	801c4b2 <_strtod_l+0x26a>
 801ce16:	2101      	movs	r1, #1
 801ce18:	4614      	mov	r4, r2
 801ce1a:	9104      	str	r1, [sp, #16]
 801ce1c:	f7ff bacb 	b.w	801c3b6 <_strtod_l+0x16e>
 801ce20:	ffc00000 	.word	0xffc00000
 801ce24:	41dfffff 	.word	0x41dfffff
 801ce28:	94a03595 	.word	0x94a03595
 801ce2c:	3fcfffff 	.word	0x3fcfffff

0801ce30 <strtod>:
 801ce30:	4b07      	ldr	r3, [pc, #28]	; (801ce50 <strtod+0x20>)
 801ce32:	4a08      	ldr	r2, [pc, #32]	; (801ce54 <strtod+0x24>)
 801ce34:	b410      	push	{r4}
 801ce36:	681c      	ldr	r4, [r3, #0]
 801ce38:	6a23      	ldr	r3, [r4, #32]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	bf08      	it	eq
 801ce3e:	4613      	moveq	r3, r2
 801ce40:	460a      	mov	r2, r1
 801ce42:	4601      	mov	r1, r0
 801ce44:	4620      	mov	r0, r4
 801ce46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce4a:	f7ff b9fd 	b.w	801c248 <_strtod_l>
 801ce4e:	bf00      	nop
 801ce50:	20000084 	.word	0x20000084
 801ce54:	200000e8 	.word	0x200000e8

0801ce58 <_strtol_l.isra.0>:
 801ce58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce5c:	4680      	mov	r8, r0
 801ce5e:	4689      	mov	r9, r1
 801ce60:	4692      	mov	sl, r2
 801ce62:	461e      	mov	r6, r3
 801ce64:	460f      	mov	r7, r1
 801ce66:	463d      	mov	r5, r7
 801ce68:	9808      	ldr	r0, [sp, #32]
 801ce6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce6e:	f7fe fb7d 	bl	801b56c <__locale_ctype_ptr_l>
 801ce72:	4420      	add	r0, r4
 801ce74:	7843      	ldrb	r3, [r0, #1]
 801ce76:	f013 0308 	ands.w	r3, r3, #8
 801ce7a:	d132      	bne.n	801cee2 <_strtol_l.isra.0+0x8a>
 801ce7c:	2c2d      	cmp	r4, #45	; 0x2d
 801ce7e:	d132      	bne.n	801cee6 <_strtol_l.isra.0+0x8e>
 801ce80:	787c      	ldrb	r4, [r7, #1]
 801ce82:	1cbd      	adds	r5, r7, #2
 801ce84:	2201      	movs	r2, #1
 801ce86:	2e00      	cmp	r6, #0
 801ce88:	d05d      	beq.n	801cf46 <_strtol_l.isra.0+0xee>
 801ce8a:	2e10      	cmp	r6, #16
 801ce8c:	d109      	bne.n	801cea2 <_strtol_l.isra.0+0x4a>
 801ce8e:	2c30      	cmp	r4, #48	; 0x30
 801ce90:	d107      	bne.n	801cea2 <_strtol_l.isra.0+0x4a>
 801ce92:	782b      	ldrb	r3, [r5, #0]
 801ce94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ce98:	2b58      	cmp	r3, #88	; 0x58
 801ce9a:	d14f      	bne.n	801cf3c <_strtol_l.isra.0+0xe4>
 801ce9c:	786c      	ldrb	r4, [r5, #1]
 801ce9e:	2610      	movs	r6, #16
 801cea0:	3502      	adds	r5, #2
 801cea2:	2a00      	cmp	r2, #0
 801cea4:	bf14      	ite	ne
 801cea6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801ceaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801ceae:	2700      	movs	r7, #0
 801ceb0:	fbb1 fcf6 	udiv	ip, r1, r6
 801ceb4:	4638      	mov	r0, r7
 801ceb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801ceba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cebe:	2b09      	cmp	r3, #9
 801cec0:	d817      	bhi.n	801cef2 <_strtol_l.isra.0+0x9a>
 801cec2:	461c      	mov	r4, r3
 801cec4:	42a6      	cmp	r6, r4
 801cec6:	dd23      	ble.n	801cf10 <_strtol_l.isra.0+0xb8>
 801cec8:	1c7b      	adds	r3, r7, #1
 801ceca:	d007      	beq.n	801cedc <_strtol_l.isra.0+0x84>
 801cecc:	4584      	cmp	ip, r0
 801cece:	d31c      	bcc.n	801cf0a <_strtol_l.isra.0+0xb2>
 801ced0:	d101      	bne.n	801ced6 <_strtol_l.isra.0+0x7e>
 801ced2:	45a6      	cmp	lr, r4
 801ced4:	db19      	blt.n	801cf0a <_strtol_l.isra.0+0xb2>
 801ced6:	fb00 4006 	mla	r0, r0, r6, r4
 801ceda:	2701      	movs	r7, #1
 801cedc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cee0:	e7eb      	b.n	801ceba <_strtol_l.isra.0+0x62>
 801cee2:	462f      	mov	r7, r5
 801cee4:	e7bf      	b.n	801ce66 <_strtol_l.isra.0+0xe>
 801cee6:	2c2b      	cmp	r4, #43	; 0x2b
 801cee8:	bf04      	itt	eq
 801ceea:	1cbd      	addeq	r5, r7, #2
 801ceec:	787c      	ldrbeq	r4, [r7, #1]
 801ceee:	461a      	mov	r2, r3
 801cef0:	e7c9      	b.n	801ce86 <_strtol_l.isra.0+0x2e>
 801cef2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801cef6:	2b19      	cmp	r3, #25
 801cef8:	d801      	bhi.n	801cefe <_strtol_l.isra.0+0xa6>
 801cefa:	3c37      	subs	r4, #55	; 0x37
 801cefc:	e7e2      	b.n	801cec4 <_strtol_l.isra.0+0x6c>
 801cefe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801cf02:	2b19      	cmp	r3, #25
 801cf04:	d804      	bhi.n	801cf10 <_strtol_l.isra.0+0xb8>
 801cf06:	3c57      	subs	r4, #87	; 0x57
 801cf08:	e7dc      	b.n	801cec4 <_strtol_l.isra.0+0x6c>
 801cf0a:	f04f 37ff 	mov.w	r7, #4294967295
 801cf0e:	e7e5      	b.n	801cedc <_strtol_l.isra.0+0x84>
 801cf10:	1c7b      	adds	r3, r7, #1
 801cf12:	d108      	bne.n	801cf26 <_strtol_l.isra.0+0xce>
 801cf14:	2322      	movs	r3, #34	; 0x22
 801cf16:	f8c8 3000 	str.w	r3, [r8]
 801cf1a:	4608      	mov	r0, r1
 801cf1c:	f1ba 0f00 	cmp.w	sl, #0
 801cf20:	d107      	bne.n	801cf32 <_strtol_l.isra.0+0xda>
 801cf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf26:	b102      	cbz	r2, 801cf2a <_strtol_l.isra.0+0xd2>
 801cf28:	4240      	negs	r0, r0
 801cf2a:	f1ba 0f00 	cmp.w	sl, #0
 801cf2e:	d0f8      	beq.n	801cf22 <_strtol_l.isra.0+0xca>
 801cf30:	b10f      	cbz	r7, 801cf36 <_strtol_l.isra.0+0xde>
 801cf32:	f105 39ff 	add.w	r9, r5, #4294967295
 801cf36:	f8ca 9000 	str.w	r9, [sl]
 801cf3a:	e7f2      	b.n	801cf22 <_strtol_l.isra.0+0xca>
 801cf3c:	2430      	movs	r4, #48	; 0x30
 801cf3e:	2e00      	cmp	r6, #0
 801cf40:	d1af      	bne.n	801cea2 <_strtol_l.isra.0+0x4a>
 801cf42:	2608      	movs	r6, #8
 801cf44:	e7ad      	b.n	801cea2 <_strtol_l.isra.0+0x4a>
 801cf46:	2c30      	cmp	r4, #48	; 0x30
 801cf48:	d0a3      	beq.n	801ce92 <_strtol_l.isra.0+0x3a>
 801cf4a:	260a      	movs	r6, #10
 801cf4c:	e7a9      	b.n	801cea2 <_strtol_l.isra.0+0x4a>
	...

0801cf50 <strtol>:
 801cf50:	4b08      	ldr	r3, [pc, #32]	; (801cf74 <strtol+0x24>)
 801cf52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf54:	681c      	ldr	r4, [r3, #0]
 801cf56:	4d08      	ldr	r5, [pc, #32]	; (801cf78 <strtol+0x28>)
 801cf58:	6a23      	ldr	r3, [r4, #32]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	bf08      	it	eq
 801cf5e:	462b      	moveq	r3, r5
 801cf60:	9300      	str	r3, [sp, #0]
 801cf62:	4613      	mov	r3, r2
 801cf64:	460a      	mov	r2, r1
 801cf66:	4601      	mov	r1, r0
 801cf68:	4620      	mov	r0, r4
 801cf6a:	f7ff ff75 	bl	801ce58 <_strtol_l.isra.0>
 801cf6e:	b003      	add	sp, #12
 801cf70:	bd30      	pop	{r4, r5, pc}
 801cf72:	bf00      	nop
 801cf74:	20000084 	.word	0x20000084
 801cf78:	200000e8 	.word	0x200000e8

0801cf7c <__ascii_wctomb>:
 801cf7c:	b149      	cbz	r1, 801cf92 <__ascii_wctomb+0x16>
 801cf7e:	2aff      	cmp	r2, #255	; 0xff
 801cf80:	bf85      	ittet	hi
 801cf82:	238a      	movhi	r3, #138	; 0x8a
 801cf84:	6003      	strhi	r3, [r0, #0]
 801cf86:	700a      	strbls	r2, [r1, #0]
 801cf88:	f04f 30ff 	movhi.w	r0, #4294967295
 801cf8c:	bf98      	it	ls
 801cf8e:	2001      	movls	r0, #1
 801cf90:	4770      	bx	lr
 801cf92:	4608      	mov	r0, r1
 801cf94:	4770      	bx	lr

0801cf96 <quorem>:
 801cf96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf9a:	6903      	ldr	r3, [r0, #16]
 801cf9c:	690c      	ldr	r4, [r1, #16]
 801cf9e:	42a3      	cmp	r3, r4
 801cfa0:	4680      	mov	r8, r0
 801cfa2:	f2c0 8082 	blt.w	801d0aa <quorem+0x114>
 801cfa6:	3c01      	subs	r4, #1
 801cfa8:	f101 0714 	add.w	r7, r1, #20
 801cfac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801cfb0:	f100 0614 	add.w	r6, r0, #20
 801cfb4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801cfb8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801cfbc:	eb06 030c 	add.w	r3, r6, ip
 801cfc0:	3501      	adds	r5, #1
 801cfc2:	eb07 090c 	add.w	r9, r7, ip
 801cfc6:	9301      	str	r3, [sp, #4]
 801cfc8:	fbb0 f5f5 	udiv	r5, r0, r5
 801cfcc:	b395      	cbz	r5, 801d034 <quorem+0x9e>
 801cfce:	f04f 0a00 	mov.w	sl, #0
 801cfd2:	4638      	mov	r0, r7
 801cfd4:	46b6      	mov	lr, r6
 801cfd6:	46d3      	mov	fp, sl
 801cfd8:	f850 2b04 	ldr.w	r2, [r0], #4
 801cfdc:	b293      	uxth	r3, r2
 801cfde:	fb05 a303 	mla	r3, r5, r3, sl
 801cfe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cfe6:	b29b      	uxth	r3, r3
 801cfe8:	ebab 0303 	sub.w	r3, fp, r3
 801cfec:	0c12      	lsrs	r2, r2, #16
 801cfee:	f8de b000 	ldr.w	fp, [lr]
 801cff2:	fb05 a202 	mla	r2, r5, r2, sl
 801cff6:	fa13 f38b 	uxtah	r3, r3, fp
 801cffa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801cffe:	fa1f fb82 	uxth.w	fp, r2
 801d002:	f8de 2000 	ldr.w	r2, [lr]
 801d006:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801d00a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d00e:	b29b      	uxth	r3, r3
 801d010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d014:	4581      	cmp	r9, r0
 801d016:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801d01a:	f84e 3b04 	str.w	r3, [lr], #4
 801d01e:	d2db      	bcs.n	801cfd8 <quorem+0x42>
 801d020:	f856 300c 	ldr.w	r3, [r6, ip]
 801d024:	b933      	cbnz	r3, 801d034 <quorem+0x9e>
 801d026:	9b01      	ldr	r3, [sp, #4]
 801d028:	3b04      	subs	r3, #4
 801d02a:	429e      	cmp	r6, r3
 801d02c:	461a      	mov	r2, r3
 801d02e:	d330      	bcc.n	801d092 <quorem+0xfc>
 801d030:	f8c8 4010 	str.w	r4, [r8, #16]
 801d034:	4640      	mov	r0, r8
 801d036:	f001 fc49 	bl	801e8cc <__mcmp>
 801d03a:	2800      	cmp	r0, #0
 801d03c:	db25      	blt.n	801d08a <quorem+0xf4>
 801d03e:	3501      	adds	r5, #1
 801d040:	4630      	mov	r0, r6
 801d042:	f04f 0c00 	mov.w	ip, #0
 801d046:	f857 2b04 	ldr.w	r2, [r7], #4
 801d04a:	f8d0 e000 	ldr.w	lr, [r0]
 801d04e:	b293      	uxth	r3, r2
 801d050:	ebac 0303 	sub.w	r3, ip, r3
 801d054:	0c12      	lsrs	r2, r2, #16
 801d056:	fa13 f38e 	uxtah	r3, r3, lr
 801d05a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d05e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d062:	b29b      	uxth	r3, r3
 801d064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d068:	45b9      	cmp	r9, r7
 801d06a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d06e:	f840 3b04 	str.w	r3, [r0], #4
 801d072:	d2e8      	bcs.n	801d046 <quorem+0xb0>
 801d074:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801d078:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801d07c:	b92a      	cbnz	r2, 801d08a <quorem+0xf4>
 801d07e:	3b04      	subs	r3, #4
 801d080:	429e      	cmp	r6, r3
 801d082:	461a      	mov	r2, r3
 801d084:	d30b      	bcc.n	801d09e <quorem+0x108>
 801d086:	f8c8 4010 	str.w	r4, [r8, #16]
 801d08a:	4628      	mov	r0, r5
 801d08c:	b003      	add	sp, #12
 801d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d092:	6812      	ldr	r2, [r2, #0]
 801d094:	3b04      	subs	r3, #4
 801d096:	2a00      	cmp	r2, #0
 801d098:	d1ca      	bne.n	801d030 <quorem+0x9a>
 801d09a:	3c01      	subs	r4, #1
 801d09c:	e7c5      	b.n	801d02a <quorem+0x94>
 801d09e:	6812      	ldr	r2, [r2, #0]
 801d0a0:	3b04      	subs	r3, #4
 801d0a2:	2a00      	cmp	r2, #0
 801d0a4:	d1ef      	bne.n	801d086 <quorem+0xf0>
 801d0a6:	3c01      	subs	r4, #1
 801d0a8:	e7ea      	b.n	801d080 <quorem+0xea>
 801d0aa:	2000      	movs	r0, #0
 801d0ac:	e7ee      	b.n	801d08c <quorem+0xf6>
	...

0801d0b0 <_dtoa_r>:
 801d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b4:	ec57 6b10 	vmov	r6, r7, d0
 801d0b8:	b097      	sub	sp, #92	; 0x5c
 801d0ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d0bc:	9106      	str	r1, [sp, #24]
 801d0be:	4604      	mov	r4, r0
 801d0c0:	920b      	str	r2, [sp, #44]	; 0x2c
 801d0c2:	9312      	str	r3, [sp, #72]	; 0x48
 801d0c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d0c8:	e9cd 6700 	strd	r6, r7, [sp]
 801d0cc:	b93d      	cbnz	r5, 801d0de <_dtoa_r+0x2e>
 801d0ce:	2010      	movs	r0, #16
 801d0d0:	f7fe fa5e 	bl	801b590 <malloc>
 801d0d4:	6260      	str	r0, [r4, #36]	; 0x24
 801d0d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d0da:	6005      	str	r5, [r0, #0]
 801d0dc:	60c5      	str	r5, [r0, #12]
 801d0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0e0:	6819      	ldr	r1, [r3, #0]
 801d0e2:	b151      	cbz	r1, 801d0fa <_dtoa_r+0x4a>
 801d0e4:	685a      	ldr	r2, [r3, #4]
 801d0e6:	604a      	str	r2, [r1, #4]
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	4093      	lsls	r3, r2
 801d0ec:	608b      	str	r3, [r1, #8]
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	f001 f9cc 	bl	801e48c <_Bfree>
 801d0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0f6:	2200      	movs	r2, #0
 801d0f8:	601a      	str	r2, [r3, #0]
 801d0fa:	1e3b      	subs	r3, r7, #0
 801d0fc:	bfbb      	ittet	lt
 801d0fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d102:	9301      	strlt	r3, [sp, #4]
 801d104:	2300      	movge	r3, #0
 801d106:	2201      	movlt	r2, #1
 801d108:	bfac      	ite	ge
 801d10a:	f8c8 3000 	strge.w	r3, [r8]
 801d10e:	f8c8 2000 	strlt.w	r2, [r8]
 801d112:	4baf      	ldr	r3, [pc, #700]	; (801d3d0 <_dtoa_r+0x320>)
 801d114:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d118:	ea33 0308 	bics.w	r3, r3, r8
 801d11c:	d114      	bne.n	801d148 <_dtoa_r+0x98>
 801d11e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d120:	f242 730f 	movw	r3, #9999	; 0x270f
 801d124:	6013      	str	r3, [r2, #0]
 801d126:	9b00      	ldr	r3, [sp, #0]
 801d128:	b923      	cbnz	r3, 801d134 <_dtoa_r+0x84>
 801d12a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801d12e:	2800      	cmp	r0, #0
 801d130:	f000 8542 	beq.w	801dbb8 <_dtoa_r+0xb08>
 801d134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d136:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801d3e4 <_dtoa_r+0x334>
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	f000 8544 	beq.w	801dbc8 <_dtoa_r+0xb18>
 801d140:	f10b 0303 	add.w	r3, fp, #3
 801d144:	f000 bd3e 	b.w	801dbc4 <_dtoa_r+0xb14>
 801d148:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d14c:	2200      	movs	r2, #0
 801d14e:	2300      	movs	r3, #0
 801d150:	4630      	mov	r0, r6
 801d152:	4639      	mov	r1, r7
 801d154:	f7e3 fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 801d158:	4681      	mov	r9, r0
 801d15a:	b168      	cbz	r0, 801d178 <_dtoa_r+0xc8>
 801d15c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d15e:	2301      	movs	r3, #1
 801d160:	6013      	str	r3, [r2, #0]
 801d162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d164:	2b00      	cmp	r3, #0
 801d166:	f000 8524 	beq.w	801dbb2 <_dtoa_r+0xb02>
 801d16a:	4b9a      	ldr	r3, [pc, #616]	; (801d3d4 <_dtoa_r+0x324>)
 801d16c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d16e:	f103 3bff 	add.w	fp, r3, #4294967295
 801d172:	6013      	str	r3, [r2, #0]
 801d174:	f000 bd28 	b.w	801dbc8 <_dtoa_r+0xb18>
 801d178:	aa14      	add	r2, sp, #80	; 0x50
 801d17a:	a915      	add	r1, sp, #84	; 0x54
 801d17c:	ec47 6b10 	vmov	d0, r6, r7
 801d180:	4620      	mov	r0, r4
 801d182:	f001 fc91 	bl	801eaa8 <__d2b>
 801d186:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d18a:	9004      	str	r0, [sp, #16]
 801d18c:	2d00      	cmp	r5, #0
 801d18e:	d07c      	beq.n	801d28a <_dtoa_r+0x1da>
 801d190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d194:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801d198:	46b2      	mov	sl, r6
 801d19a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801d19e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d1a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	4b8b      	ldr	r3, [pc, #556]	; (801d3d8 <_dtoa_r+0x328>)
 801d1aa:	4650      	mov	r0, sl
 801d1ac:	4659      	mov	r1, fp
 801d1ae:	f7e3 f87b 	bl	80002a8 <__aeabi_dsub>
 801d1b2:	a381      	add	r3, pc, #516	; (adr r3, 801d3b8 <_dtoa_r+0x308>)
 801d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1b8:	f7e3 fa2e 	bl	8000618 <__aeabi_dmul>
 801d1bc:	a380      	add	r3, pc, #512	; (adr r3, 801d3c0 <_dtoa_r+0x310>)
 801d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1c2:	f7e3 f873 	bl	80002ac <__adddf3>
 801d1c6:	4606      	mov	r6, r0
 801d1c8:	4628      	mov	r0, r5
 801d1ca:	460f      	mov	r7, r1
 801d1cc:	f7e3 f9ba 	bl	8000544 <__aeabi_i2d>
 801d1d0:	a37d      	add	r3, pc, #500	; (adr r3, 801d3c8 <_dtoa_r+0x318>)
 801d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d6:	f7e3 fa1f 	bl	8000618 <__aeabi_dmul>
 801d1da:	4602      	mov	r2, r0
 801d1dc:	460b      	mov	r3, r1
 801d1de:	4630      	mov	r0, r6
 801d1e0:	4639      	mov	r1, r7
 801d1e2:	f7e3 f863 	bl	80002ac <__adddf3>
 801d1e6:	4606      	mov	r6, r0
 801d1e8:	460f      	mov	r7, r1
 801d1ea:	f7e3 fcc5 	bl	8000b78 <__aeabi_d2iz>
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	4682      	mov	sl, r0
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	4630      	mov	r0, r6
 801d1f6:	4639      	mov	r1, r7
 801d1f8:	f7e3 fc80 	bl	8000afc <__aeabi_dcmplt>
 801d1fc:	b148      	cbz	r0, 801d212 <_dtoa_r+0x162>
 801d1fe:	4650      	mov	r0, sl
 801d200:	f7e3 f9a0 	bl	8000544 <__aeabi_i2d>
 801d204:	4632      	mov	r2, r6
 801d206:	463b      	mov	r3, r7
 801d208:	f7e3 fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801d20c:	b908      	cbnz	r0, 801d212 <_dtoa_r+0x162>
 801d20e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d212:	f1ba 0f16 	cmp.w	sl, #22
 801d216:	d859      	bhi.n	801d2cc <_dtoa_r+0x21c>
 801d218:	4970      	ldr	r1, [pc, #448]	; (801d3dc <_dtoa_r+0x32c>)
 801d21a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801d21e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d222:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d226:	f7e3 fc87 	bl	8000b38 <__aeabi_dcmpgt>
 801d22a:	2800      	cmp	r0, #0
 801d22c:	d050      	beq.n	801d2d0 <_dtoa_r+0x220>
 801d22e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d232:	2300      	movs	r3, #0
 801d234:	930f      	str	r3, [sp, #60]	; 0x3c
 801d236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d238:	1b5d      	subs	r5, r3, r5
 801d23a:	f1b5 0801 	subs.w	r8, r5, #1
 801d23e:	bf49      	itett	mi
 801d240:	f1c5 0301 	rsbmi	r3, r5, #1
 801d244:	2300      	movpl	r3, #0
 801d246:	9305      	strmi	r3, [sp, #20]
 801d248:	f04f 0800 	movmi.w	r8, #0
 801d24c:	bf58      	it	pl
 801d24e:	9305      	strpl	r3, [sp, #20]
 801d250:	f1ba 0f00 	cmp.w	sl, #0
 801d254:	db3e      	blt.n	801d2d4 <_dtoa_r+0x224>
 801d256:	2300      	movs	r3, #0
 801d258:	44d0      	add	r8, sl
 801d25a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801d25e:	9307      	str	r3, [sp, #28]
 801d260:	9b06      	ldr	r3, [sp, #24]
 801d262:	2b09      	cmp	r3, #9
 801d264:	f200 8090 	bhi.w	801d388 <_dtoa_r+0x2d8>
 801d268:	2b05      	cmp	r3, #5
 801d26a:	bfc4      	itt	gt
 801d26c:	3b04      	subgt	r3, #4
 801d26e:	9306      	strgt	r3, [sp, #24]
 801d270:	9b06      	ldr	r3, [sp, #24]
 801d272:	f1a3 0302 	sub.w	r3, r3, #2
 801d276:	bfcc      	ite	gt
 801d278:	2500      	movgt	r5, #0
 801d27a:	2501      	movle	r5, #1
 801d27c:	2b03      	cmp	r3, #3
 801d27e:	f200 808f 	bhi.w	801d3a0 <_dtoa_r+0x2f0>
 801d282:	e8df f003 	tbb	[pc, r3]
 801d286:	7f7d      	.short	0x7f7d
 801d288:	7131      	.short	0x7131
 801d28a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801d28e:	441d      	add	r5, r3
 801d290:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801d294:	2820      	cmp	r0, #32
 801d296:	dd13      	ble.n	801d2c0 <_dtoa_r+0x210>
 801d298:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801d29c:	9b00      	ldr	r3, [sp, #0]
 801d29e:	fa08 f800 	lsl.w	r8, r8, r0
 801d2a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801d2a6:	fa23 f000 	lsr.w	r0, r3, r0
 801d2aa:	ea48 0000 	orr.w	r0, r8, r0
 801d2ae:	f7e3 f939 	bl	8000524 <__aeabi_ui2d>
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	4682      	mov	sl, r0
 801d2b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801d2ba:	3d01      	subs	r5, #1
 801d2bc:	9313      	str	r3, [sp, #76]	; 0x4c
 801d2be:	e772      	b.n	801d1a6 <_dtoa_r+0xf6>
 801d2c0:	9b00      	ldr	r3, [sp, #0]
 801d2c2:	f1c0 0020 	rsb	r0, r0, #32
 801d2c6:	fa03 f000 	lsl.w	r0, r3, r0
 801d2ca:	e7f0      	b.n	801d2ae <_dtoa_r+0x1fe>
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	e7b1      	b.n	801d234 <_dtoa_r+0x184>
 801d2d0:	900f      	str	r0, [sp, #60]	; 0x3c
 801d2d2:	e7b0      	b.n	801d236 <_dtoa_r+0x186>
 801d2d4:	9b05      	ldr	r3, [sp, #20]
 801d2d6:	eba3 030a 	sub.w	r3, r3, sl
 801d2da:	9305      	str	r3, [sp, #20]
 801d2dc:	f1ca 0300 	rsb	r3, sl, #0
 801d2e0:	9307      	str	r3, [sp, #28]
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	930e      	str	r3, [sp, #56]	; 0x38
 801d2e6:	e7bb      	b.n	801d260 <_dtoa_r+0x1b0>
 801d2e8:	2301      	movs	r3, #1
 801d2ea:	930a      	str	r3, [sp, #40]	; 0x28
 801d2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	dd59      	ble.n	801d3a6 <_dtoa_r+0x2f6>
 801d2f2:	9302      	str	r3, [sp, #8]
 801d2f4:	4699      	mov	r9, r3
 801d2f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d2f8:	2200      	movs	r2, #0
 801d2fa:	6072      	str	r2, [r6, #4]
 801d2fc:	2204      	movs	r2, #4
 801d2fe:	f102 0014 	add.w	r0, r2, #20
 801d302:	4298      	cmp	r0, r3
 801d304:	6871      	ldr	r1, [r6, #4]
 801d306:	d953      	bls.n	801d3b0 <_dtoa_r+0x300>
 801d308:	4620      	mov	r0, r4
 801d30a:	f001 f88b 	bl	801e424 <_Balloc>
 801d30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d310:	6030      	str	r0, [r6, #0]
 801d312:	f1b9 0f0e 	cmp.w	r9, #14
 801d316:	f8d3 b000 	ldr.w	fp, [r3]
 801d31a:	f200 80e6 	bhi.w	801d4ea <_dtoa_r+0x43a>
 801d31e:	2d00      	cmp	r5, #0
 801d320:	f000 80e3 	beq.w	801d4ea <_dtoa_r+0x43a>
 801d324:	ed9d 7b00 	vldr	d7, [sp]
 801d328:	f1ba 0f00 	cmp.w	sl, #0
 801d32c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801d330:	dd74      	ble.n	801d41c <_dtoa_r+0x36c>
 801d332:	4a2a      	ldr	r2, [pc, #168]	; (801d3dc <_dtoa_r+0x32c>)
 801d334:	f00a 030f 	and.w	r3, sl, #15
 801d338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d33c:	ed93 7b00 	vldr	d7, [r3]
 801d340:	ea4f 162a 	mov.w	r6, sl, asr #4
 801d344:	06f0      	lsls	r0, r6, #27
 801d346:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d34a:	d565      	bpl.n	801d418 <_dtoa_r+0x368>
 801d34c:	4b24      	ldr	r3, [pc, #144]	; (801d3e0 <_dtoa_r+0x330>)
 801d34e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d352:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d356:	f7e3 fa89 	bl	800086c <__aeabi_ddiv>
 801d35a:	e9cd 0100 	strd	r0, r1, [sp]
 801d35e:	f006 060f 	and.w	r6, r6, #15
 801d362:	2503      	movs	r5, #3
 801d364:	4f1e      	ldr	r7, [pc, #120]	; (801d3e0 <_dtoa_r+0x330>)
 801d366:	e04c      	b.n	801d402 <_dtoa_r+0x352>
 801d368:	2301      	movs	r3, #1
 801d36a:	930a      	str	r3, [sp, #40]	; 0x28
 801d36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d36e:	4453      	add	r3, sl
 801d370:	f103 0901 	add.w	r9, r3, #1
 801d374:	9302      	str	r3, [sp, #8]
 801d376:	464b      	mov	r3, r9
 801d378:	2b01      	cmp	r3, #1
 801d37a:	bfb8      	it	lt
 801d37c:	2301      	movlt	r3, #1
 801d37e:	e7ba      	b.n	801d2f6 <_dtoa_r+0x246>
 801d380:	2300      	movs	r3, #0
 801d382:	e7b2      	b.n	801d2ea <_dtoa_r+0x23a>
 801d384:	2300      	movs	r3, #0
 801d386:	e7f0      	b.n	801d36a <_dtoa_r+0x2ba>
 801d388:	2501      	movs	r5, #1
 801d38a:	2300      	movs	r3, #0
 801d38c:	9306      	str	r3, [sp, #24]
 801d38e:	950a      	str	r5, [sp, #40]	; 0x28
 801d390:	f04f 33ff 	mov.w	r3, #4294967295
 801d394:	9302      	str	r3, [sp, #8]
 801d396:	4699      	mov	r9, r3
 801d398:	2200      	movs	r2, #0
 801d39a:	2312      	movs	r3, #18
 801d39c:	920b      	str	r2, [sp, #44]	; 0x2c
 801d39e:	e7aa      	b.n	801d2f6 <_dtoa_r+0x246>
 801d3a0:	2301      	movs	r3, #1
 801d3a2:	930a      	str	r3, [sp, #40]	; 0x28
 801d3a4:	e7f4      	b.n	801d390 <_dtoa_r+0x2e0>
 801d3a6:	2301      	movs	r3, #1
 801d3a8:	9302      	str	r3, [sp, #8]
 801d3aa:	4699      	mov	r9, r3
 801d3ac:	461a      	mov	r2, r3
 801d3ae:	e7f5      	b.n	801d39c <_dtoa_r+0x2ec>
 801d3b0:	3101      	adds	r1, #1
 801d3b2:	6071      	str	r1, [r6, #4]
 801d3b4:	0052      	lsls	r2, r2, #1
 801d3b6:	e7a2      	b.n	801d2fe <_dtoa_r+0x24e>
 801d3b8:	636f4361 	.word	0x636f4361
 801d3bc:	3fd287a7 	.word	0x3fd287a7
 801d3c0:	8b60c8b3 	.word	0x8b60c8b3
 801d3c4:	3fc68a28 	.word	0x3fc68a28
 801d3c8:	509f79fb 	.word	0x509f79fb
 801d3cc:	3fd34413 	.word	0x3fd34413
 801d3d0:	7ff00000 	.word	0x7ff00000
 801d3d4:	080249b7 	.word	0x080249b7
 801d3d8:	3ff80000 	.word	0x3ff80000
 801d3dc:	08024bc8 	.word	0x08024bc8
 801d3e0:	08024ba0 	.word	0x08024ba0
 801d3e4:	08024b3a 	.word	0x08024b3a
 801d3e8:	07f1      	lsls	r1, r6, #31
 801d3ea:	d508      	bpl.n	801d3fe <_dtoa_r+0x34e>
 801d3ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3f4:	f7e3 f910 	bl	8000618 <__aeabi_dmul>
 801d3f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d3fc:	3501      	adds	r5, #1
 801d3fe:	1076      	asrs	r6, r6, #1
 801d400:	3708      	adds	r7, #8
 801d402:	2e00      	cmp	r6, #0
 801d404:	d1f0      	bne.n	801d3e8 <_dtoa_r+0x338>
 801d406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d40a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d40e:	f7e3 fa2d 	bl	800086c <__aeabi_ddiv>
 801d412:	e9cd 0100 	strd	r0, r1, [sp]
 801d416:	e01a      	b.n	801d44e <_dtoa_r+0x39e>
 801d418:	2502      	movs	r5, #2
 801d41a:	e7a3      	b.n	801d364 <_dtoa_r+0x2b4>
 801d41c:	f000 80a0 	beq.w	801d560 <_dtoa_r+0x4b0>
 801d420:	f1ca 0600 	rsb	r6, sl, #0
 801d424:	4b9f      	ldr	r3, [pc, #636]	; (801d6a4 <_dtoa_r+0x5f4>)
 801d426:	4fa0      	ldr	r7, [pc, #640]	; (801d6a8 <_dtoa_r+0x5f8>)
 801d428:	f006 020f 	and.w	r2, r6, #15
 801d42c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d438:	f7e3 f8ee 	bl	8000618 <__aeabi_dmul>
 801d43c:	e9cd 0100 	strd	r0, r1, [sp]
 801d440:	1136      	asrs	r6, r6, #4
 801d442:	2300      	movs	r3, #0
 801d444:	2502      	movs	r5, #2
 801d446:	2e00      	cmp	r6, #0
 801d448:	d17f      	bne.n	801d54a <_dtoa_r+0x49a>
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d1e1      	bne.n	801d412 <_dtoa_r+0x362>
 801d44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d450:	2b00      	cmp	r3, #0
 801d452:	f000 8087 	beq.w	801d564 <_dtoa_r+0x4b4>
 801d456:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d45a:	2200      	movs	r2, #0
 801d45c:	4b93      	ldr	r3, [pc, #588]	; (801d6ac <_dtoa_r+0x5fc>)
 801d45e:	4630      	mov	r0, r6
 801d460:	4639      	mov	r1, r7
 801d462:	f7e3 fb4b 	bl	8000afc <__aeabi_dcmplt>
 801d466:	2800      	cmp	r0, #0
 801d468:	d07c      	beq.n	801d564 <_dtoa_r+0x4b4>
 801d46a:	f1b9 0f00 	cmp.w	r9, #0
 801d46e:	d079      	beq.n	801d564 <_dtoa_r+0x4b4>
 801d470:	9b02      	ldr	r3, [sp, #8]
 801d472:	2b00      	cmp	r3, #0
 801d474:	dd35      	ble.n	801d4e2 <_dtoa_r+0x432>
 801d476:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d47a:	9308      	str	r3, [sp, #32]
 801d47c:	4639      	mov	r1, r7
 801d47e:	2200      	movs	r2, #0
 801d480:	4b8b      	ldr	r3, [pc, #556]	; (801d6b0 <_dtoa_r+0x600>)
 801d482:	4630      	mov	r0, r6
 801d484:	f7e3 f8c8 	bl	8000618 <__aeabi_dmul>
 801d488:	e9cd 0100 	strd	r0, r1, [sp]
 801d48c:	9f02      	ldr	r7, [sp, #8]
 801d48e:	3501      	adds	r5, #1
 801d490:	4628      	mov	r0, r5
 801d492:	f7e3 f857 	bl	8000544 <__aeabi_i2d>
 801d496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d49a:	f7e3 f8bd 	bl	8000618 <__aeabi_dmul>
 801d49e:	2200      	movs	r2, #0
 801d4a0:	4b84      	ldr	r3, [pc, #528]	; (801d6b4 <_dtoa_r+0x604>)
 801d4a2:	f7e2 ff03 	bl	80002ac <__adddf3>
 801d4a6:	4605      	mov	r5, r0
 801d4a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801d4ac:	2f00      	cmp	r7, #0
 801d4ae:	d15d      	bne.n	801d56c <_dtoa_r+0x4bc>
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	4b81      	ldr	r3, [pc, #516]	; (801d6b8 <_dtoa_r+0x608>)
 801d4b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4b8:	f7e2 fef6 	bl	80002a8 <__aeabi_dsub>
 801d4bc:	462a      	mov	r2, r5
 801d4be:	4633      	mov	r3, r6
 801d4c0:	e9cd 0100 	strd	r0, r1, [sp]
 801d4c4:	f7e3 fb38 	bl	8000b38 <__aeabi_dcmpgt>
 801d4c8:	2800      	cmp	r0, #0
 801d4ca:	f040 8288 	bne.w	801d9de <_dtoa_r+0x92e>
 801d4ce:	462a      	mov	r2, r5
 801d4d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d4d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4d8:	f7e3 fb10 	bl	8000afc <__aeabi_dcmplt>
 801d4dc:	2800      	cmp	r0, #0
 801d4de:	f040 827c 	bne.w	801d9da <_dtoa_r+0x92a>
 801d4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d4e6:	e9cd 2300 	strd	r2, r3, [sp]
 801d4ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	f2c0 8150 	blt.w	801d792 <_dtoa_r+0x6e2>
 801d4f2:	f1ba 0f0e 	cmp.w	sl, #14
 801d4f6:	f300 814c 	bgt.w	801d792 <_dtoa_r+0x6e2>
 801d4fa:	4b6a      	ldr	r3, [pc, #424]	; (801d6a4 <_dtoa_r+0x5f4>)
 801d4fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d500:	ed93 7b00 	vldr	d7, [r3]
 801d504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d506:	2b00      	cmp	r3, #0
 801d508:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d50c:	f280 80d8 	bge.w	801d6c0 <_dtoa_r+0x610>
 801d510:	f1b9 0f00 	cmp.w	r9, #0
 801d514:	f300 80d4 	bgt.w	801d6c0 <_dtoa_r+0x610>
 801d518:	f040 825e 	bne.w	801d9d8 <_dtoa_r+0x928>
 801d51c:	2200      	movs	r2, #0
 801d51e:	4b66      	ldr	r3, [pc, #408]	; (801d6b8 <_dtoa_r+0x608>)
 801d520:	ec51 0b17 	vmov	r0, r1, d7
 801d524:	f7e3 f878 	bl	8000618 <__aeabi_dmul>
 801d528:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d52c:	f7e3 fafa 	bl	8000b24 <__aeabi_dcmpge>
 801d530:	464f      	mov	r7, r9
 801d532:	464e      	mov	r6, r9
 801d534:	2800      	cmp	r0, #0
 801d536:	f040 8234 	bne.w	801d9a2 <_dtoa_r+0x8f2>
 801d53a:	2331      	movs	r3, #49	; 0x31
 801d53c:	f10b 0501 	add.w	r5, fp, #1
 801d540:	f88b 3000 	strb.w	r3, [fp]
 801d544:	f10a 0a01 	add.w	sl, sl, #1
 801d548:	e22f      	b.n	801d9aa <_dtoa_r+0x8fa>
 801d54a:	07f2      	lsls	r2, r6, #31
 801d54c:	d505      	bpl.n	801d55a <_dtoa_r+0x4aa>
 801d54e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d552:	f7e3 f861 	bl	8000618 <__aeabi_dmul>
 801d556:	3501      	adds	r5, #1
 801d558:	2301      	movs	r3, #1
 801d55a:	1076      	asrs	r6, r6, #1
 801d55c:	3708      	adds	r7, #8
 801d55e:	e772      	b.n	801d446 <_dtoa_r+0x396>
 801d560:	2502      	movs	r5, #2
 801d562:	e774      	b.n	801d44e <_dtoa_r+0x39e>
 801d564:	f8cd a020 	str.w	sl, [sp, #32]
 801d568:	464f      	mov	r7, r9
 801d56a:	e791      	b.n	801d490 <_dtoa_r+0x3e0>
 801d56c:	4b4d      	ldr	r3, [pc, #308]	; (801d6a4 <_dtoa_r+0x5f4>)
 801d56e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d572:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801d576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d047      	beq.n	801d60c <_dtoa_r+0x55c>
 801d57c:	4602      	mov	r2, r0
 801d57e:	460b      	mov	r3, r1
 801d580:	2000      	movs	r0, #0
 801d582:	494e      	ldr	r1, [pc, #312]	; (801d6bc <_dtoa_r+0x60c>)
 801d584:	f7e3 f972 	bl	800086c <__aeabi_ddiv>
 801d588:	462a      	mov	r2, r5
 801d58a:	4633      	mov	r3, r6
 801d58c:	f7e2 fe8c 	bl	80002a8 <__aeabi_dsub>
 801d590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d594:	465d      	mov	r5, fp
 801d596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d59a:	f7e3 faed 	bl	8000b78 <__aeabi_d2iz>
 801d59e:	4606      	mov	r6, r0
 801d5a0:	f7e2 ffd0 	bl	8000544 <__aeabi_i2d>
 801d5a4:	4602      	mov	r2, r0
 801d5a6:	460b      	mov	r3, r1
 801d5a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d5ac:	f7e2 fe7c 	bl	80002a8 <__aeabi_dsub>
 801d5b0:	3630      	adds	r6, #48	; 0x30
 801d5b2:	f805 6b01 	strb.w	r6, [r5], #1
 801d5b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d5ba:	e9cd 0100 	strd	r0, r1, [sp]
 801d5be:	f7e3 fa9d 	bl	8000afc <__aeabi_dcmplt>
 801d5c2:	2800      	cmp	r0, #0
 801d5c4:	d163      	bne.n	801d68e <_dtoa_r+0x5de>
 801d5c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d5ca:	2000      	movs	r0, #0
 801d5cc:	4937      	ldr	r1, [pc, #220]	; (801d6ac <_dtoa_r+0x5fc>)
 801d5ce:	f7e2 fe6b 	bl	80002a8 <__aeabi_dsub>
 801d5d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d5d6:	f7e3 fa91 	bl	8000afc <__aeabi_dcmplt>
 801d5da:	2800      	cmp	r0, #0
 801d5dc:	f040 80b7 	bne.w	801d74e <_dtoa_r+0x69e>
 801d5e0:	eba5 030b 	sub.w	r3, r5, fp
 801d5e4:	429f      	cmp	r7, r3
 801d5e6:	f77f af7c 	ble.w	801d4e2 <_dtoa_r+0x432>
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	4b30      	ldr	r3, [pc, #192]	; (801d6b0 <_dtoa_r+0x600>)
 801d5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d5f2:	f7e3 f811 	bl	8000618 <__aeabi_dmul>
 801d5f6:	2200      	movs	r2, #0
 801d5f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d5fc:	4b2c      	ldr	r3, [pc, #176]	; (801d6b0 <_dtoa_r+0x600>)
 801d5fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d602:	f7e3 f809 	bl	8000618 <__aeabi_dmul>
 801d606:	e9cd 0100 	strd	r0, r1, [sp]
 801d60a:	e7c4      	b.n	801d596 <_dtoa_r+0x4e6>
 801d60c:	462a      	mov	r2, r5
 801d60e:	4633      	mov	r3, r6
 801d610:	f7e3 f802 	bl	8000618 <__aeabi_dmul>
 801d614:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d618:	eb0b 0507 	add.w	r5, fp, r7
 801d61c:	465e      	mov	r6, fp
 801d61e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d622:	f7e3 faa9 	bl	8000b78 <__aeabi_d2iz>
 801d626:	4607      	mov	r7, r0
 801d628:	f7e2 ff8c 	bl	8000544 <__aeabi_i2d>
 801d62c:	3730      	adds	r7, #48	; 0x30
 801d62e:	4602      	mov	r2, r0
 801d630:	460b      	mov	r3, r1
 801d632:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d636:	f7e2 fe37 	bl	80002a8 <__aeabi_dsub>
 801d63a:	f806 7b01 	strb.w	r7, [r6], #1
 801d63e:	42ae      	cmp	r6, r5
 801d640:	e9cd 0100 	strd	r0, r1, [sp]
 801d644:	f04f 0200 	mov.w	r2, #0
 801d648:	d126      	bne.n	801d698 <_dtoa_r+0x5e8>
 801d64a:	4b1c      	ldr	r3, [pc, #112]	; (801d6bc <_dtoa_r+0x60c>)
 801d64c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d650:	f7e2 fe2c 	bl	80002ac <__adddf3>
 801d654:	4602      	mov	r2, r0
 801d656:	460b      	mov	r3, r1
 801d658:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d65c:	f7e3 fa6c 	bl	8000b38 <__aeabi_dcmpgt>
 801d660:	2800      	cmp	r0, #0
 801d662:	d174      	bne.n	801d74e <_dtoa_r+0x69e>
 801d664:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d668:	2000      	movs	r0, #0
 801d66a:	4914      	ldr	r1, [pc, #80]	; (801d6bc <_dtoa_r+0x60c>)
 801d66c:	f7e2 fe1c 	bl	80002a8 <__aeabi_dsub>
 801d670:	4602      	mov	r2, r0
 801d672:	460b      	mov	r3, r1
 801d674:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d678:	f7e3 fa40 	bl	8000afc <__aeabi_dcmplt>
 801d67c:	2800      	cmp	r0, #0
 801d67e:	f43f af30 	beq.w	801d4e2 <_dtoa_r+0x432>
 801d682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d686:	2b30      	cmp	r3, #48	; 0x30
 801d688:	f105 32ff 	add.w	r2, r5, #4294967295
 801d68c:	d002      	beq.n	801d694 <_dtoa_r+0x5e4>
 801d68e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d692:	e04a      	b.n	801d72a <_dtoa_r+0x67a>
 801d694:	4615      	mov	r5, r2
 801d696:	e7f4      	b.n	801d682 <_dtoa_r+0x5d2>
 801d698:	4b05      	ldr	r3, [pc, #20]	; (801d6b0 <_dtoa_r+0x600>)
 801d69a:	f7e2 ffbd 	bl	8000618 <__aeabi_dmul>
 801d69e:	e9cd 0100 	strd	r0, r1, [sp]
 801d6a2:	e7bc      	b.n	801d61e <_dtoa_r+0x56e>
 801d6a4:	08024bc8 	.word	0x08024bc8
 801d6a8:	08024ba0 	.word	0x08024ba0
 801d6ac:	3ff00000 	.word	0x3ff00000
 801d6b0:	40240000 	.word	0x40240000
 801d6b4:	401c0000 	.word	0x401c0000
 801d6b8:	40140000 	.word	0x40140000
 801d6bc:	3fe00000 	.word	0x3fe00000
 801d6c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d6c4:	465d      	mov	r5, fp
 801d6c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6ca:	4630      	mov	r0, r6
 801d6cc:	4639      	mov	r1, r7
 801d6ce:	f7e3 f8cd 	bl	800086c <__aeabi_ddiv>
 801d6d2:	f7e3 fa51 	bl	8000b78 <__aeabi_d2iz>
 801d6d6:	4680      	mov	r8, r0
 801d6d8:	f7e2 ff34 	bl	8000544 <__aeabi_i2d>
 801d6dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6e0:	f7e2 ff9a 	bl	8000618 <__aeabi_dmul>
 801d6e4:	4602      	mov	r2, r0
 801d6e6:	460b      	mov	r3, r1
 801d6e8:	4630      	mov	r0, r6
 801d6ea:	4639      	mov	r1, r7
 801d6ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801d6f0:	f7e2 fdda 	bl	80002a8 <__aeabi_dsub>
 801d6f4:	f805 6b01 	strb.w	r6, [r5], #1
 801d6f8:	eba5 060b 	sub.w	r6, r5, fp
 801d6fc:	45b1      	cmp	r9, r6
 801d6fe:	4602      	mov	r2, r0
 801d700:	460b      	mov	r3, r1
 801d702:	d139      	bne.n	801d778 <_dtoa_r+0x6c8>
 801d704:	f7e2 fdd2 	bl	80002ac <__adddf3>
 801d708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d70c:	4606      	mov	r6, r0
 801d70e:	460f      	mov	r7, r1
 801d710:	f7e3 fa12 	bl	8000b38 <__aeabi_dcmpgt>
 801d714:	b9c8      	cbnz	r0, 801d74a <_dtoa_r+0x69a>
 801d716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d71a:	4630      	mov	r0, r6
 801d71c:	4639      	mov	r1, r7
 801d71e:	f7e3 f9e3 	bl	8000ae8 <__aeabi_dcmpeq>
 801d722:	b110      	cbz	r0, 801d72a <_dtoa_r+0x67a>
 801d724:	f018 0f01 	tst.w	r8, #1
 801d728:	d10f      	bne.n	801d74a <_dtoa_r+0x69a>
 801d72a:	9904      	ldr	r1, [sp, #16]
 801d72c:	4620      	mov	r0, r4
 801d72e:	f000 fead 	bl	801e48c <_Bfree>
 801d732:	2300      	movs	r3, #0
 801d734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d736:	702b      	strb	r3, [r5, #0]
 801d738:	f10a 0301 	add.w	r3, sl, #1
 801d73c:	6013      	str	r3, [r2, #0]
 801d73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d740:	2b00      	cmp	r3, #0
 801d742:	f000 8241 	beq.w	801dbc8 <_dtoa_r+0xb18>
 801d746:	601d      	str	r5, [r3, #0]
 801d748:	e23e      	b.n	801dbc8 <_dtoa_r+0xb18>
 801d74a:	f8cd a020 	str.w	sl, [sp, #32]
 801d74e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d752:	2a39      	cmp	r2, #57	; 0x39
 801d754:	f105 33ff 	add.w	r3, r5, #4294967295
 801d758:	d108      	bne.n	801d76c <_dtoa_r+0x6bc>
 801d75a:	459b      	cmp	fp, r3
 801d75c:	d10a      	bne.n	801d774 <_dtoa_r+0x6c4>
 801d75e:	9b08      	ldr	r3, [sp, #32]
 801d760:	3301      	adds	r3, #1
 801d762:	9308      	str	r3, [sp, #32]
 801d764:	2330      	movs	r3, #48	; 0x30
 801d766:	f88b 3000 	strb.w	r3, [fp]
 801d76a:	465b      	mov	r3, fp
 801d76c:	781a      	ldrb	r2, [r3, #0]
 801d76e:	3201      	adds	r2, #1
 801d770:	701a      	strb	r2, [r3, #0]
 801d772:	e78c      	b.n	801d68e <_dtoa_r+0x5de>
 801d774:	461d      	mov	r5, r3
 801d776:	e7ea      	b.n	801d74e <_dtoa_r+0x69e>
 801d778:	2200      	movs	r2, #0
 801d77a:	4b9b      	ldr	r3, [pc, #620]	; (801d9e8 <_dtoa_r+0x938>)
 801d77c:	f7e2 ff4c 	bl	8000618 <__aeabi_dmul>
 801d780:	2200      	movs	r2, #0
 801d782:	2300      	movs	r3, #0
 801d784:	4606      	mov	r6, r0
 801d786:	460f      	mov	r7, r1
 801d788:	f7e3 f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 801d78c:	2800      	cmp	r0, #0
 801d78e:	d09a      	beq.n	801d6c6 <_dtoa_r+0x616>
 801d790:	e7cb      	b.n	801d72a <_dtoa_r+0x67a>
 801d792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d794:	2a00      	cmp	r2, #0
 801d796:	f000 808b 	beq.w	801d8b0 <_dtoa_r+0x800>
 801d79a:	9a06      	ldr	r2, [sp, #24]
 801d79c:	2a01      	cmp	r2, #1
 801d79e:	dc6e      	bgt.n	801d87e <_dtoa_r+0x7ce>
 801d7a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7a2:	2a00      	cmp	r2, #0
 801d7a4:	d067      	beq.n	801d876 <_dtoa_r+0x7c6>
 801d7a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d7aa:	9f07      	ldr	r7, [sp, #28]
 801d7ac:	9d05      	ldr	r5, [sp, #20]
 801d7ae:	9a05      	ldr	r2, [sp, #20]
 801d7b0:	2101      	movs	r1, #1
 801d7b2:	441a      	add	r2, r3
 801d7b4:	4620      	mov	r0, r4
 801d7b6:	9205      	str	r2, [sp, #20]
 801d7b8:	4498      	add	r8, r3
 801d7ba:	f000 ff45 	bl	801e648 <__i2b>
 801d7be:	4606      	mov	r6, r0
 801d7c0:	2d00      	cmp	r5, #0
 801d7c2:	dd0c      	ble.n	801d7de <_dtoa_r+0x72e>
 801d7c4:	f1b8 0f00 	cmp.w	r8, #0
 801d7c8:	dd09      	ble.n	801d7de <_dtoa_r+0x72e>
 801d7ca:	4545      	cmp	r5, r8
 801d7cc:	9a05      	ldr	r2, [sp, #20]
 801d7ce:	462b      	mov	r3, r5
 801d7d0:	bfa8      	it	ge
 801d7d2:	4643      	movge	r3, r8
 801d7d4:	1ad2      	subs	r2, r2, r3
 801d7d6:	9205      	str	r2, [sp, #20]
 801d7d8:	1aed      	subs	r5, r5, r3
 801d7da:	eba8 0803 	sub.w	r8, r8, r3
 801d7de:	9b07      	ldr	r3, [sp, #28]
 801d7e0:	b1eb      	cbz	r3, 801d81e <_dtoa_r+0x76e>
 801d7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d067      	beq.n	801d8b8 <_dtoa_r+0x808>
 801d7e8:	b18f      	cbz	r7, 801d80e <_dtoa_r+0x75e>
 801d7ea:	4631      	mov	r1, r6
 801d7ec:	463a      	mov	r2, r7
 801d7ee:	4620      	mov	r0, r4
 801d7f0:	f000 ffca 	bl	801e788 <__pow5mult>
 801d7f4:	9a04      	ldr	r2, [sp, #16]
 801d7f6:	4601      	mov	r1, r0
 801d7f8:	4606      	mov	r6, r0
 801d7fa:	4620      	mov	r0, r4
 801d7fc:	f000 ff2d 	bl	801e65a <__multiply>
 801d800:	9904      	ldr	r1, [sp, #16]
 801d802:	9008      	str	r0, [sp, #32]
 801d804:	4620      	mov	r0, r4
 801d806:	f000 fe41 	bl	801e48c <_Bfree>
 801d80a:	9b08      	ldr	r3, [sp, #32]
 801d80c:	9304      	str	r3, [sp, #16]
 801d80e:	9b07      	ldr	r3, [sp, #28]
 801d810:	1bda      	subs	r2, r3, r7
 801d812:	d004      	beq.n	801d81e <_dtoa_r+0x76e>
 801d814:	9904      	ldr	r1, [sp, #16]
 801d816:	4620      	mov	r0, r4
 801d818:	f000 ffb6 	bl	801e788 <__pow5mult>
 801d81c:	9004      	str	r0, [sp, #16]
 801d81e:	2101      	movs	r1, #1
 801d820:	4620      	mov	r0, r4
 801d822:	f000 ff11 	bl	801e648 <__i2b>
 801d826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d828:	4607      	mov	r7, r0
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	f000 81d0 	beq.w	801dbd0 <_dtoa_r+0xb20>
 801d830:	461a      	mov	r2, r3
 801d832:	4601      	mov	r1, r0
 801d834:	4620      	mov	r0, r4
 801d836:	f000 ffa7 	bl	801e788 <__pow5mult>
 801d83a:	9b06      	ldr	r3, [sp, #24]
 801d83c:	2b01      	cmp	r3, #1
 801d83e:	4607      	mov	r7, r0
 801d840:	dc40      	bgt.n	801d8c4 <_dtoa_r+0x814>
 801d842:	9b00      	ldr	r3, [sp, #0]
 801d844:	2b00      	cmp	r3, #0
 801d846:	d139      	bne.n	801d8bc <_dtoa_r+0x80c>
 801d848:	9b01      	ldr	r3, [sp, #4]
 801d84a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d136      	bne.n	801d8c0 <_dtoa_r+0x810>
 801d852:	9b01      	ldr	r3, [sp, #4]
 801d854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d858:	0d1b      	lsrs	r3, r3, #20
 801d85a:	051b      	lsls	r3, r3, #20
 801d85c:	b12b      	cbz	r3, 801d86a <_dtoa_r+0x7ba>
 801d85e:	9b05      	ldr	r3, [sp, #20]
 801d860:	3301      	adds	r3, #1
 801d862:	9305      	str	r3, [sp, #20]
 801d864:	f108 0801 	add.w	r8, r8, #1
 801d868:	2301      	movs	r3, #1
 801d86a:	9307      	str	r3, [sp, #28]
 801d86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d86e:	2b00      	cmp	r3, #0
 801d870:	d12a      	bne.n	801d8c8 <_dtoa_r+0x818>
 801d872:	2001      	movs	r0, #1
 801d874:	e030      	b.n	801d8d8 <_dtoa_r+0x828>
 801d876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d878:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d87c:	e795      	b.n	801d7aa <_dtoa_r+0x6fa>
 801d87e:	9b07      	ldr	r3, [sp, #28]
 801d880:	f109 37ff 	add.w	r7, r9, #4294967295
 801d884:	42bb      	cmp	r3, r7
 801d886:	bfbf      	itttt	lt
 801d888:	9b07      	ldrlt	r3, [sp, #28]
 801d88a:	9707      	strlt	r7, [sp, #28]
 801d88c:	1afa      	sublt	r2, r7, r3
 801d88e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801d890:	bfbb      	ittet	lt
 801d892:	189b      	addlt	r3, r3, r2
 801d894:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d896:	1bdf      	subge	r7, r3, r7
 801d898:	2700      	movlt	r7, #0
 801d89a:	f1b9 0f00 	cmp.w	r9, #0
 801d89e:	bfb5      	itete	lt
 801d8a0:	9b05      	ldrlt	r3, [sp, #20]
 801d8a2:	9d05      	ldrge	r5, [sp, #20]
 801d8a4:	eba3 0509 	sublt.w	r5, r3, r9
 801d8a8:	464b      	movge	r3, r9
 801d8aa:	bfb8      	it	lt
 801d8ac:	2300      	movlt	r3, #0
 801d8ae:	e77e      	b.n	801d7ae <_dtoa_r+0x6fe>
 801d8b0:	9f07      	ldr	r7, [sp, #28]
 801d8b2:	9d05      	ldr	r5, [sp, #20]
 801d8b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d8b6:	e783      	b.n	801d7c0 <_dtoa_r+0x710>
 801d8b8:	9a07      	ldr	r2, [sp, #28]
 801d8ba:	e7ab      	b.n	801d814 <_dtoa_r+0x764>
 801d8bc:	2300      	movs	r3, #0
 801d8be:	e7d4      	b.n	801d86a <_dtoa_r+0x7ba>
 801d8c0:	9b00      	ldr	r3, [sp, #0]
 801d8c2:	e7d2      	b.n	801d86a <_dtoa_r+0x7ba>
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	9307      	str	r3, [sp, #28]
 801d8c8:	693b      	ldr	r3, [r7, #16]
 801d8ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801d8ce:	6918      	ldr	r0, [r3, #16]
 801d8d0:	f000 fe6c 	bl	801e5ac <__hi0bits>
 801d8d4:	f1c0 0020 	rsb	r0, r0, #32
 801d8d8:	4440      	add	r0, r8
 801d8da:	f010 001f 	ands.w	r0, r0, #31
 801d8de:	d047      	beq.n	801d970 <_dtoa_r+0x8c0>
 801d8e0:	f1c0 0320 	rsb	r3, r0, #32
 801d8e4:	2b04      	cmp	r3, #4
 801d8e6:	dd3b      	ble.n	801d960 <_dtoa_r+0x8b0>
 801d8e8:	9b05      	ldr	r3, [sp, #20]
 801d8ea:	f1c0 001c 	rsb	r0, r0, #28
 801d8ee:	4403      	add	r3, r0
 801d8f0:	9305      	str	r3, [sp, #20]
 801d8f2:	4405      	add	r5, r0
 801d8f4:	4480      	add	r8, r0
 801d8f6:	9b05      	ldr	r3, [sp, #20]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	dd05      	ble.n	801d908 <_dtoa_r+0x858>
 801d8fc:	461a      	mov	r2, r3
 801d8fe:	9904      	ldr	r1, [sp, #16]
 801d900:	4620      	mov	r0, r4
 801d902:	f000 ff8f 	bl	801e824 <__lshift>
 801d906:	9004      	str	r0, [sp, #16]
 801d908:	f1b8 0f00 	cmp.w	r8, #0
 801d90c:	dd05      	ble.n	801d91a <_dtoa_r+0x86a>
 801d90e:	4639      	mov	r1, r7
 801d910:	4642      	mov	r2, r8
 801d912:	4620      	mov	r0, r4
 801d914:	f000 ff86 	bl	801e824 <__lshift>
 801d918:	4607      	mov	r7, r0
 801d91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d91c:	b353      	cbz	r3, 801d974 <_dtoa_r+0x8c4>
 801d91e:	4639      	mov	r1, r7
 801d920:	9804      	ldr	r0, [sp, #16]
 801d922:	f000 ffd3 	bl	801e8cc <__mcmp>
 801d926:	2800      	cmp	r0, #0
 801d928:	da24      	bge.n	801d974 <_dtoa_r+0x8c4>
 801d92a:	2300      	movs	r3, #0
 801d92c:	220a      	movs	r2, #10
 801d92e:	9904      	ldr	r1, [sp, #16]
 801d930:	4620      	mov	r0, r4
 801d932:	f000 fdc2 	bl	801e4ba <__multadd>
 801d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d938:	9004      	str	r0, [sp, #16]
 801d93a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d93e:	2b00      	cmp	r3, #0
 801d940:	f000 814d 	beq.w	801dbde <_dtoa_r+0xb2e>
 801d944:	2300      	movs	r3, #0
 801d946:	4631      	mov	r1, r6
 801d948:	220a      	movs	r2, #10
 801d94a:	4620      	mov	r0, r4
 801d94c:	f000 fdb5 	bl	801e4ba <__multadd>
 801d950:	9b02      	ldr	r3, [sp, #8]
 801d952:	2b00      	cmp	r3, #0
 801d954:	4606      	mov	r6, r0
 801d956:	dc4f      	bgt.n	801d9f8 <_dtoa_r+0x948>
 801d958:	9b06      	ldr	r3, [sp, #24]
 801d95a:	2b02      	cmp	r3, #2
 801d95c:	dd4c      	ble.n	801d9f8 <_dtoa_r+0x948>
 801d95e:	e011      	b.n	801d984 <_dtoa_r+0x8d4>
 801d960:	d0c9      	beq.n	801d8f6 <_dtoa_r+0x846>
 801d962:	9a05      	ldr	r2, [sp, #20]
 801d964:	331c      	adds	r3, #28
 801d966:	441a      	add	r2, r3
 801d968:	9205      	str	r2, [sp, #20]
 801d96a:	441d      	add	r5, r3
 801d96c:	4498      	add	r8, r3
 801d96e:	e7c2      	b.n	801d8f6 <_dtoa_r+0x846>
 801d970:	4603      	mov	r3, r0
 801d972:	e7f6      	b.n	801d962 <_dtoa_r+0x8b2>
 801d974:	f1b9 0f00 	cmp.w	r9, #0
 801d978:	dc38      	bgt.n	801d9ec <_dtoa_r+0x93c>
 801d97a:	9b06      	ldr	r3, [sp, #24]
 801d97c:	2b02      	cmp	r3, #2
 801d97e:	dd35      	ble.n	801d9ec <_dtoa_r+0x93c>
 801d980:	f8cd 9008 	str.w	r9, [sp, #8]
 801d984:	9b02      	ldr	r3, [sp, #8]
 801d986:	b963      	cbnz	r3, 801d9a2 <_dtoa_r+0x8f2>
 801d988:	4639      	mov	r1, r7
 801d98a:	2205      	movs	r2, #5
 801d98c:	4620      	mov	r0, r4
 801d98e:	f000 fd94 	bl	801e4ba <__multadd>
 801d992:	4601      	mov	r1, r0
 801d994:	4607      	mov	r7, r0
 801d996:	9804      	ldr	r0, [sp, #16]
 801d998:	f000 ff98 	bl	801e8cc <__mcmp>
 801d99c:	2800      	cmp	r0, #0
 801d99e:	f73f adcc 	bgt.w	801d53a <_dtoa_r+0x48a>
 801d9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9a4:	465d      	mov	r5, fp
 801d9a6:	ea6f 0a03 	mvn.w	sl, r3
 801d9aa:	f04f 0900 	mov.w	r9, #0
 801d9ae:	4639      	mov	r1, r7
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	f000 fd6b 	bl	801e48c <_Bfree>
 801d9b6:	2e00      	cmp	r6, #0
 801d9b8:	f43f aeb7 	beq.w	801d72a <_dtoa_r+0x67a>
 801d9bc:	f1b9 0f00 	cmp.w	r9, #0
 801d9c0:	d005      	beq.n	801d9ce <_dtoa_r+0x91e>
 801d9c2:	45b1      	cmp	r9, r6
 801d9c4:	d003      	beq.n	801d9ce <_dtoa_r+0x91e>
 801d9c6:	4649      	mov	r1, r9
 801d9c8:	4620      	mov	r0, r4
 801d9ca:	f000 fd5f 	bl	801e48c <_Bfree>
 801d9ce:	4631      	mov	r1, r6
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	f000 fd5b 	bl	801e48c <_Bfree>
 801d9d6:	e6a8      	b.n	801d72a <_dtoa_r+0x67a>
 801d9d8:	2700      	movs	r7, #0
 801d9da:	463e      	mov	r6, r7
 801d9dc:	e7e1      	b.n	801d9a2 <_dtoa_r+0x8f2>
 801d9de:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d9e2:	463e      	mov	r6, r7
 801d9e4:	e5a9      	b.n	801d53a <_dtoa_r+0x48a>
 801d9e6:	bf00      	nop
 801d9e8:	40240000 	.word	0x40240000
 801d9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9ee:	f8cd 9008 	str.w	r9, [sp, #8]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	f000 80fa 	beq.w	801dbec <_dtoa_r+0xb3c>
 801d9f8:	2d00      	cmp	r5, #0
 801d9fa:	dd05      	ble.n	801da08 <_dtoa_r+0x958>
 801d9fc:	4631      	mov	r1, r6
 801d9fe:	462a      	mov	r2, r5
 801da00:	4620      	mov	r0, r4
 801da02:	f000 ff0f 	bl	801e824 <__lshift>
 801da06:	4606      	mov	r6, r0
 801da08:	9b07      	ldr	r3, [sp, #28]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d04c      	beq.n	801daa8 <_dtoa_r+0x9f8>
 801da0e:	6871      	ldr	r1, [r6, #4]
 801da10:	4620      	mov	r0, r4
 801da12:	f000 fd07 	bl	801e424 <_Balloc>
 801da16:	6932      	ldr	r2, [r6, #16]
 801da18:	3202      	adds	r2, #2
 801da1a:	4605      	mov	r5, r0
 801da1c:	0092      	lsls	r2, r2, #2
 801da1e:	f106 010c 	add.w	r1, r6, #12
 801da22:	300c      	adds	r0, #12
 801da24:	f7fd fde5 	bl	801b5f2 <memcpy>
 801da28:	2201      	movs	r2, #1
 801da2a:	4629      	mov	r1, r5
 801da2c:	4620      	mov	r0, r4
 801da2e:	f000 fef9 	bl	801e824 <__lshift>
 801da32:	9b00      	ldr	r3, [sp, #0]
 801da34:	f8cd b014 	str.w	fp, [sp, #20]
 801da38:	f003 0301 	and.w	r3, r3, #1
 801da3c:	46b1      	mov	r9, r6
 801da3e:	9307      	str	r3, [sp, #28]
 801da40:	4606      	mov	r6, r0
 801da42:	4639      	mov	r1, r7
 801da44:	9804      	ldr	r0, [sp, #16]
 801da46:	f7ff faa6 	bl	801cf96 <quorem>
 801da4a:	4649      	mov	r1, r9
 801da4c:	4605      	mov	r5, r0
 801da4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801da52:	9804      	ldr	r0, [sp, #16]
 801da54:	f000 ff3a 	bl	801e8cc <__mcmp>
 801da58:	4632      	mov	r2, r6
 801da5a:	9000      	str	r0, [sp, #0]
 801da5c:	4639      	mov	r1, r7
 801da5e:	4620      	mov	r0, r4
 801da60:	f000 ff4e 	bl	801e900 <__mdiff>
 801da64:	68c3      	ldr	r3, [r0, #12]
 801da66:	4602      	mov	r2, r0
 801da68:	bb03      	cbnz	r3, 801daac <_dtoa_r+0x9fc>
 801da6a:	4601      	mov	r1, r0
 801da6c:	9008      	str	r0, [sp, #32]
 801da6e:	9804      	ldr	r0, [sp, #16]
 801da70:	f000 ff2c 	bl	801e8cc <__mcmp>
 801da74:	9a08      	ldr	r2, [sp, #32]
 801da76:	4603      	mov	r3, r0
 801da78:	4611      	mov	r1, r2
 801da7a:	4620      	mov	r0, r4
 801da7c:	9308      	str	r3, [sp, #32]
 801da7e:	f000 fd05 	bl	801e48c <_Bfree>
 801da82:	9b08      	ldr	r3, [sp, #32]
 801da84:	b9a3      	cbnz	r3, 801dab0 <_dtoa_r+0xa00>
 801da86:	9a06      	ldr	r2, [sp, #24]
 801da88:	b992      	cbnz	r2, 801dab0 <_dtoa_r+0xa00>
 801da8a:	9a07      	ldr	r2, [sp, #28]
 801da8c:	b982      	cbnz	r2, 801dab0 <_dtoa_r+0xa00>
 801da8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801da92:	d029      	beq.n	801dae8 <_dtoa_r+0xa38>
 801da94:	9b00      	ldr	r3, [sp, #0]
 801da96:	2b00      	cmp	r3, #0
 801da98:	dd01      	ble.n	801da9e <_dtoa_r+0x9ee>
 801da9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801da9e:	9b05      	ldr	r3, [sp, #20]
 801daa0:	1c5d      	adds	r5, r3, #1
 801daa2:	f883 8000 	strb.w	r8, [r3]
 801daa6:	e782      	b.n	801d9ae <_dtoa_r+0x8fe>
 801daa8:	4630      	mov	r0, r6
 801daaa:	e7c2      	b.n	801da32 <_dtoa_r+0x982>
 801daac:	2301      	movs	r3, #1
 801daae:	e7e3      	b.n	801da78 <_dtoa_r+0x9c8>
 801dab0:	9a00      	ldr	r2, [sp, #0]
 801dab2:	2a00      	cmp	r2, #0
 801dab4:	db04      	blt.n	801dac0 <_dtoa_r+0xa10>
 801dab6:	d125      	bne.n	801db04 <_dtoa_r+0xa54>
 801dab8:	9a06      	ldr	r2, [sp, #24]
 801daba:	bb1a      	cbnz	r2, 801db04 <_dtoa_r+0xa54>
 801dabc:	9a07      	ldr	r2, [sp, #28]
 801dabe:	bb0a      	cbnz	r2, 801db04 <_dtoa_r+0xa54>
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	ddec      	ble.n	801da9e <_dtoa_r+0x9ee>
 801dac4:	2201      	movs	r2, #1
 801dac6:	9904      	ldr	r1, [sp, #16]
 801dac8:	4620      	mov	r0, r4
 801daca:	f000 feab 	bl	801e824 <__lshift>
 801dace:	4639      	mov	r1, r7
 801dad0:	9004      	str	r0, [sp, #16]
 801dad2:	f000 fefb 	bl	801e8cc <__mcmp>
 801dad6:	2800      	cmp	r0, #0
 801dad8:	dc03      	bgt.n	801dae2 <_dtoa_r+0xa32>
 801dada:	d1e0      	bne.n	801da9e <_dtoa_r+0x9ee>
 801dadc:	f018 0f01 	tst.w	r8, #1
 801dae0:	d0dd      	beq.n	801da9e <_dtoa_r+0x9ee>
 801dae2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801dae6:	d1d8      	bne.n	801da9a <_dtoa_r+0x9ea>
 801dae8:	9b05      	ldr	r3, [sp, #20]
 801daea:	9a05      	ldr	r2, [sp, #20]
 801daec:	1c5d      	adds	r5, r3, #1
 801daee:	2339      	movs	r3, #57	; 0x39
 801daf0:	7013      	strb	r3, [r2, #0]
 801daf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801daf6:	2b39      	cmp	r3, #57	; 0x39
 801daf8:	f105 32ff 	add.w	r2, r5, #4294967295
 801dafc:	d04f      	beq.n	801db9e <_dtoa_r+0xaee>
 801dafe:	3301      	adds	r3, #1
 801db00:	7013      	strb	r3, [r2, #0]
 801db02:	e754      	b.n	801d9ae <_dtoa_r+0x8fe>
 801db04:	9a05      	ldr	r2, [sp, #20]
 801db06:	2b00      	cmp	r3, #0
 801db08:	f102 0501 	add.w	r5, r2, #1
 801db0c:	dd06      	ble.n	801db1c <_dtoa_r+0xa6c>
 801db0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801db12:	d0e9      	beq.n	801dae8 <_dtoa_r+0xa38>
 801db14:	f108 0801 	add.w	r8, r8, #1
 801db18:	9b05      	ldr	r3, [sp, #20]
 801db1a:	e7c2      	b.n	801daa2 <_dtoa_r+0x9f2>
 801db1c:	9a02      	ldr	r2, [sp, #8]
 801db1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 801db22:	eba5 030b 	sub.w	r3, r5, fp
 801db26:	4293      	cmp	r3, r2
 801db28:	d021      	beq.n	801db6e <_dtoa_r+0xabe>
 801db2a:	2300      	movs	r3, #0
 801db2c:	220a      	movs	r2, #10
 801db2e:	9904      	ldr	r1, [sp, #16]
 801db30:	4620      	mov	r0, r4
 801db32:	f000 fcc2 	bl	801e4ba <__multadd>
 801db36:	45b1      	cmp	r9, r6
 801db38:	9004      	str	r0, [sp, #16]
 801db3a:	f04f 0300 	mov.w	r3, #0
 801db3e:	f04f 020a 	mov.w	r2, #10
 801db42:	4649      	mov	r1, r9
 801db44:	4620      	mov	r0, r4
 801db46:	d105      	bne.n	801db54 <_dtoa_r+0xaa4>
 801db48:	f000 fcb7 	bl	801e4ba <__multadd>
 801db4c:	4681      	mov	r9, r0
 801db4e:	4606      	mov	r6, r0
 801db50:	9505      	str	r5, [sp, #20]
 801db52:	e776      	b.n	801da42 <_dtoa_r+0x992>
 801db54:	f000 fcb1 	bl	801e4ba <__multadd>
 801db58:	4631      	mov	r1, r6
 801db5a:	4681      	mov	r9, r0
 801db5c:	2300      	movs	r3, #0
 801db5e:	220a      	movs	r2, #10
 801db60:	4620      	mov	r0, r4
 801db62:	f000 fcaa 	bl	801e4ba <__multadd>
 801db66:	4606      	mov	r6, r0
 801db68:	e7f2      	b.n	801db50 <_dtoa_r+0xaa0>
 801db6a:	f04f 0900 	mov.w	r9, #0
 801db6e:	2201      	movs	r2, #1
 801db70:	9904      	ldr	r1, [sp, #16]
 801db72:	4620      	mov	r0, r4
 801db74:	f000 fe56 	bl	801e824 <__lshift>
 801db78:	4639      	mov	r1, r7
 801db7a:	9004      	str	r0, [sp, #16]
 801db7c:	f000 fea6 	bl	801e8cc <__mcmp>
 801db80:	2800      	cmp	r0, #0
 801db82:	dcb6      	bgt.n	801daf2 <_dtoa_r+0xa42>
 801db84:	d102      	bne.n	801db8c <_dtoa_r+0xadc>
 801db86:	f018 0f01 	tst.w	r8, #1
 801db8a:	d1b2      	bne.n	801daf2 <_dtoa_r+0xa42>
 801db8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801db90:	2b30      	cmp	r3, #48	; 0x30
 801db92:	f105 32ff 	add.w	r2, r5, #4294967295
 801db96:	f47f af0a 	bne.w	801d9ae <_dtoa_r+0x8fe>
 801db9a:	4615      	mov	r5, r2
 801db9c:	e7f6      	b.n	801db8c <_dtoa_r+0xadc>
 801db9e:	4593      	cmp	fp, r2
 801dba0:	d105      	bne.n	801dbae <_dtoa_r+0xafe>
 801dba2:	2331      	movs	r3, #49	; 0x31
 801dba4:	f10a 0a01 	add.w	sl, sl, #1
 801dba8:	f88b 3000 	strb.w	r3, [fp]
 801dbac:	e6ff      	b.n	801d9ae <_dtoa_r+0x8fe>
 801dbae:	4615      	mov	r5, r2
 801dbb0:	e79f      	b.n	801daf2 <_dtoa_r+0xa42>
 801dbb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 801dc18 <_dtoa_r+0xb68>
 801dbb6:	e007      	b.n	801dbc8 <_dtoa_r+0xb18>
 801dbb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dbba:	f8df b060 	ldr.w	fp, [pc, #96]	; 801dc1c <_dtoa_r+0xb6c>
 801dbbe:	b11b      	cbz	r3, 801dbc8 <_dtoa_r+0xb18>
 801dbc0:	f10b 0308 	add.w	r3, fp, #8
 801dbc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dbc6:	6013      	str	r3, [r2, #0]
 801dbc8:	4658      	mov	r0, fp
 801dbca:	b017      	add	sp, #92	; 0x5c
 801dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbd0:	9b06      	ldr	r3, [sp, #24]
 801dbd2:	2b01      	cmp	r3, #1
 801dbd4:	f77f ae35 	ble.w	801d842 <_dtoa_r+0x792>
 801dbd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbda:	9307      	str	r3, [sp, #28]
 801dbdc:	e649      	b.n	801d872 <_dtoa_r+0x7c2>
 801dbde:	9b02      	ldr	r3, [sp, #8]
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	dc03      	bgt.n	801dbec <_dtoa_r+0xb3c>
 801dbe4:	9b06      	ldr	r3, [sp, #24]
 801dbe6:	2b02      	cmp	r3, #2
 801dbe8:	f73f aecc 	bgt.w	801d984 <_dtoa_r+0x8d4>
 801dbec:	465d      	mov	r5, fp
 801dbee:	4639      	mov	r1, r7
 801dbf0:	9804      	ldr	r0, [sp, #16]
 801dbf2:	f7ff f9d0 	bl	801cf96 <quorem>
 801dbf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801dbfa:	f805 8b01 	strb.w	r8, [r5], #1
 801dbfe:	9a02      	ldr	r2, [sp, #8]
 801dc00:	eba5 030b 	sub.w	r3, r5, fp
 801dc04:	429a      	cmp	r2, r3
 801dc06:	ddb0      	ble.n	801db6a <_dtoa_r+0xaba>
 801dc08:	2300      	movs	r3, #0
 801dc0a:	220a      	movs	r2, #10
 801dc0c:	9904      	ldr	r1, [sp, #16]
 801dc0e:	4620      	mov	r0, r4
 801dc10:	f000 fc53 	bl	801e4ba <__multadd>
 801dc14:	9004      	str	r0, [sp, #16]
 801dc16:	e7ea      	b.n	801dbee <_dtoa_r+0xb3e>
 801dc18:	080249b6 	.word	0x080249b6
 801dc1c:	08024b31 	.word	0x08024b31

0801dc20 <std>:
 801dc20:	2300      	movs	r3, #0
 801dc22:	b510      	push	{r4, lr}
 801dc24:	4604      	mov	r4, r0
 801dc26:	e9c0 3300 	strd	r3, r3, [r0]
 801dc2a:	6083      	str	r3, [r0, #8]
 801dc2c:	8181      	strh	r1, [r0, #12]
 801dc2e:	6643      	str	r3, [r0, #100]	; 0x64
 801dc30:	81c2      	strh	r2, [r0, #14]
 801dc32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc36:	6183      	str	r3, [r0, #24]
 801dc38:	4619      	mov	r1, r3
 801dc3a:	2208      	movs	r2, #8
 801dc3c:	305c      	adds	r0, #92	; 0x5c
 801dc3e:	f7fd fcfc 	bl	801b63a <memset>
 801dc42:	4b05      	ldr	r3, [pc, #20]	; (801dc58 <std+0x38>)
 801dc44:	6263      	str	r3, [r4, #36]	; 0x24
 801dc46:	4b05      	ldr	r3, [pc, #20]	; (801dc5c <std+0x3c>)
 801dc48:	62a3      	str	r3, [r4, #40]	; 0x28
 801dc4a:	4b05      	ldr	r3, [pc, #20]	; (801dc60 <std+0x40>)
 801dc4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dc4e:	4b05      	ldr	r3, [pc, #20]	; (801dc64 <std+0x44>)
 801dc50:	6224      	str	r4, [r4, #32]
 801dc52:	6323      	str	r3, [r4, #48]	; 0x30
 801dc54:	bd10      	pop	{r4, pc}
 801dc56:	bf00      	nop
 801dc58:	0801f165 	.word	0x0801f165
 801dc5c:	0801f187 	.word	0x0801f187
 801dc60:	0801f1bf 	.word	0x0801f1bf
 801dc64:	0801f1e3 	.word	0x0801f1e3

0801dc68 <_cleanup_r>:
 801dc68:	4901      	ldr	r1, [pc, #4]	; (801dc70 <_cleanup_r+0x8>)
 801dc6a:	f000 b885 	b.w	801dd78 <_fwalk_reent>
 801dc6e:	bf00      	nop
 801dc70:	0801f4bd 	.word	0x0801f4bd

0801dc74 <__sfmoreglue>:
 801dc74:	b570      	push	{r4, r5, r6, lr}
 801dc76:	1e4a      	subs	r2, r1, #1
 801dc78:	2568      	movs	r5, #104	; 0x68
 801dc7a:	4355      	muls	r5, r2
 801dc7c:	460e      	mov	r6, r1
 801dc7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dc82:	f7fd fd31 	bl	801b6e8 <_malloc_r>
 801dc86:	4604      	mov	r4, r0
 801dc88:	b140      	cbz	r0, 801dc9c <__sfmoreglue+0x28>
 801dc8a:	2100      	movs	r1, #0
 801dc8c:	e9c0 1600 	strd	r1, r6, [r0]
 801dc90:	300c      	adds	r0, #12
 801dc92:	60a0      	str	r0, [r4, #8]
 801dc94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc98:	f7fd fccf 	bl	801b63a <memset>
 801dc9c:	4620      	mov	r0, r4
 801dc9e:	bd70      	pop	{r4, r5, r6, pc}

0801dca0 <__sinit>:
 801dca0:	6983      	ldr	r3, [r0, #24]
 801dca2:	b510      	push	{r4, lr}
 801dca4:	4604      	mov	r4, r0
 801dca6:	bb33      	cbnz	r3, 801dcf6 <__sinit+0x56>
 801dca8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801dcac:	6503      	str	r3, [r0, #80]	; 0x50
 801dcae:	4b12      	ldr	r3, [pc, #72]	; (801dcf8 <__sinit+0x58>)
 801dcb0:	4a12      	ldr	r2, [pc, #72]	; (801dcfc <__sinit+0x5c>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	6282      	str	r2, [r0, #40]	; 0x28
 801dcb6:	4298      	cmp	r0, r3
 801dcb8:	bf04      	itt	eq
 801dcba:	2301      	moveq	r3, #1
 801dcbc:	6183      	streq	r3, [r0, #24]
 801dcbe:	f000 f81f 	bl	801dd00 <__sfp>
 801dcc2:	6060      	str	r0, [r4, #4]
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	f000 f81b 	bl	801dd00 <__sfp>
 801dcca:	60a0      	str	r0, [r4, #8]
 801dccc:	4620      	mov	r0, r4
 801dcce:	f000 f817 	bl	801dd00 <__sfp>
 801dcd2:	2200      	movs	r2, #0
 801dcd4:	60e0      	str	r0, [r4, #12]
 801dcd6:	2104      	movs	r1, #4
 801dcd8:	6860      	ldr	r0, [r4, #4]
 801dcda:	f7ff ffa1 	bl	801dc20 <std>
 801dcde:	2201      	movs	r2, #1
 801dce0:	2109      	movs	r1, #9
 801dce2:	68a0      	ldr	r0, [r4, #8]
 801dce4:	f7ff ff9c 	bl	801dc20 <std>
 801dce8:	2202      	movs	r2, #2
 801dcea:	2112      	movs	r1, #18
 801dcec:	68e0      	ldr	r0, [r4, #12]
 801dcee:	f7ff ff97 	bl	801dc20 <std>
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	61a3      	str	r3, [r4, #24]
 801dcf6:	bd10      	pop	{r4, pc}
 801dcf8:	08024998 	.word	0x08024998
 801dcfc:	0801dc69 	.word	0x0801dc69

0801dd00 <__sfp>:
 801dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd02:	4b1b      	ldr	r3, [pc, #108]	; (801dd70 <__sfp+0x70>)
 801dd04:	681e      	ldr	r6, [r3, #0]
 801dd06:	69b3      	ldr	r3, [r6, #24]
 801dd08:	4607      	mov	r7, r0
 801dd0a:	b913      	cbnz	r3, 801dd12 <__sfp+0x12>
 801dd0c:	4630      	mov	r0, r6
 801dd0e:	f7ff ffc7 	bl	801dca0 <__sinit>
 801dd12:	3648      	adds	r6, #72	; 0x48
 801dd14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dd18:	3b01      	subs	r3, #1
 801dd1a:	d503      	bpl.n	801dd24 <__sfp+0x24>
 801dd1c:	6833      	ldr	r3, [r6, #0]
 801dd1e:	b133      	cbz	r3, 801dd2e <__sfp+0x2e>
 801dd20:	6836      	ldr	r6, [r6, #0]
 801dd22:	e7f7      	b.n	801dd14 <__sfp+0x14>
 801dd24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dd28:	b16d      	cbz	r5, 801dd46 <__sfp+0x46>
 801dd2a:	3468      	adds	r4, #104	; 0x68
 801dd2c:	e7f4      	b.n	801dd18 <__sfp+0x18>
 801dd2e:	2104      	movs	r1, #4
 801dd30:	4638      	mov	r0, r7
 801dd32:	f7ff ff9f 	bl	801dc74 <__sfmoreglue>
 801dd36:	6030      	str	r0, [r6, #0]
 801dd38:	2800      	cmp	r0, #0
 801dd3a:	d1f1      	bne.n	801dd20 <__sfp+0x20>
 801dd3c:	230c      	movs	r3, #12
 801dd3e:	603b      	str	r3, [r7, #0]
 801dd40:	4604      	mov	r4, r0
 801dd42:	4620      	mov	r0, r4
 801dd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd46:	4b0b      	ldr	r3, [pc, #44]	; (801dd74 <__sfp+0x74>)
 801dd48:	6665      	str	r5, [r4, #100]	; 0x64
 801dd4a:	e9c4 5500 	strd	r5, r5, [r4]
 801dd4e:	60a5      	str	r5, [r4, #8]
 801dd50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801dd54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801dd58:	2208      	movs	r2, #8
 801dd5a:	4629      	mov	r1, r5
 801dd5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd60:	f7fd fc6b 	bl	801b63a <memset>
 801dd64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd6c:	e7e9      	b.n	801dd42 <__sfp+0x42>
 801dd6e:	bf00      	nop
 801dd70:	08024998 	.word	0x08024998
 801dd74:	ffff0001 	.word	0xffff0001

0801dd78 <_fwalk_reent>:
 801dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd7c:	4680      	mov	r8, r0
 801dd7e:	4689      	mov	r9, r1
 801dd80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dd84:	2600      	movs	r6, #0
 801dd86:	b914      	cbnz	r4, 801dd8e <_fwalk_reent+0x16>
 801dd88:	4630      	mov	r0, r6
 801dd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801dd92:	3f01      	subs	r7, #1
 801dd94:	d501      	bpl.n	801dd9a <_fwalk_reent+0x22>
 801dd96:	6824      	ldr	r4, [r4, #0]
 801dd98:	e7f5      	b.n	801dd86 <_fwalk_reent+0xe>
 801dd9a:	89ab      	ldrh	r3, [r5, #12]
 801dd9c:	2b01      	cmp	r3, #1
 801dd9e:	d907      	bls.n	801ddb0 <_fwalk_reent+0x38>
 801dda0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dda4:	3301      	adds	r3, #1
 801dda6:	d003      	beq.n	801ddb0 <_fwalk_reent+0x38>
 801dda8:	4629      	mov	r1, r5
 801ddaa:	4640      	mov	r0, r8
 801ddac:	47c8      	blx	r9
 801ddae:	4306      	orrs	r6, r0
 801ddb0:	3568      	adds	r5, #104	; 0x68
 801ddb2:	e7ee      	b.n	801dd92 <_fwalk_reent+0x1a>

0801ddb4 <rshift>:
 801ddb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddb6:	6906      	ldr	r6, [r0, #16]
 801ddb8:	114b      	asrs	r3, r1, #5
 801ddba:	429e      	cmp	r6, r3
 801ddbc:	f100 0414 	add.w	r4, r0, #20
 801ddc0:	dd30      	ble.n	801de24 <rshift+0x70>
 801ddc2:	f011 011f 	ands.w	r1, r1, #31
 801ddc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801ddca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801ddce:	d108      	bne.n	801dde2 <rshift+0x2e>
 801ddd0:	4621      	mov	r1, r4
 801ddd2:	42b2      	cmp	r2, r6
 801ddd4:	460b      	mov	r3, r1
 801ddd6:	d211      	bcs.n	801ddfc <rshift+0x48>
 801ddd8:	f852 3b04 	ldr.w	r3, [r2], #4
 801dddc:	f841 3b04 	str.w	r3, [r1], #4
 801dde0:	e7f7      	b.n	801ddd2 <rshift+0x1e>
 801dde2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801dde6:	f1c1 0c20 	rsb	ip, r1, #32
 801ddea:	40cd      	lsrs	r5, r1
 801ddec:	3204      	adds	r2, #4
 801ddee:	4623      	mov	r3, r4
 801ddf0:	42b2      	cmp	r2, r6
 801ddf2:	4617      	mov	r7, r2
 801ddf4:	d30c      	bcc.n	801de10 <rshift+0x5c>
 801ddf6:	601d      	str	r5, [r3, #0]
 801ddf8:	b105      	cbz	r5, 801ddfc <rshift+0x48>
 801ddfa:	3304      	adds	r3, #4
 801ddfc:	1b1a      	subs	r2, r3, r4
 801ddfe:	42a3      	cmp	r3, r4
 801de00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de04:	bf08      	it	eq
 801de06:	2300      	moveq	r3, #0
 801de08:	6102      	str	r2, [r0, #16]
 801de0a:	bf08      	it	eq
 801de0c:	6143      	streq	r3, [r0, #20]
 801de0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de10:	683f      	ldr	r7, [r7, #0]
 801de12:	fa07 f70c 	lsl.w	r7, r7, ip
 801de16:	433d      	orrs	r5, r7
 801de18:	f843 5b04 	str.w	r5, [r3], #4
 801de1c:	f852 5b04 	ldr.w	r5, [r2], #4
 801de20:	40cd      	lsrs	r5, r1
 801de22:	e7e5      	b.n	801ddf0 <rshift+0x3c>
 801de24:	4623      	mov	r3, r4
 801de26:	e7e9      	b.n	801ddfc <rshift+0x48>

0801de28 <__hexdig_fun>:
 801de28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801de2c:	2b09      	cmp	r3, #9
 801de2e:	d802      	bhi.n	801de36 <__hexdig_fun+0xe>
 801de30:	3820      	subs	r0, #32
 801de32:	b2c0      	uxtb	r0, r0
 801de34:	4770      	bx	lr
 801de36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de3a:	2b05      	cmp	r3, #5
 801de3c:	d801      	bhi.n	801de42 <__hexdig_fun+0x1a>
 801de3e:	3847      	subs	r0, #71	; 0x47
 801de40:	e7f7      	b.n	801de32 <__hexdig_fun+0xa>
 801de42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801de46:	2b05      	cmp	r3, #5
 801de48:	d801      	bhi.n	801de4e <__hexdig_fun+0x26>
 801de4a:	3827      	subs	r0, #39	; 0x27
 801de4c:	e7f1      	b.n	801de32 <__hexdig_fun+0xa>
 801de4e:	2000      	movs	r0, #0
 801de50:	4770      	bx	lr

0801de52 <__gethex>:
 801de52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de56:	b08b      	sub	sp, #44	; 0x2c
 801de58:	468a      	mov	sl, r1
 801de5a:	9002      	str	r0, [sp, #8]
 801de5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801de5e:	9306      	str	r3, [sp, #24]
 801de60:	4690      	mov	r8, r2
 801de62:	f000 facd 	bl	801e400 <__localeconv_l>
 801de66:	6803      	ldr	r3, [r0, #0]
 801de68:	9303      	str	r3, [sp, #12]
 801de6a:	4618      	mov	r0, r3
 801de6c:	f7e2 f9ba 	bl	80001e4 <strlen>
 801de70:	9b03      	ldr	r3, [sp, #12]
 801de72:	9001      	str	r0, [sp, #4]
 801de74:	4403      	add	r3, r0
 801de76:	f04f 0b00 	mov.w	fp, #0
 801de7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801de7e:	9307      	str	r3, [sp, #28]
 801de80:	f8da 3000 	ldr.w	r3, [sl]
 801de84:	3302      	adds	r3, #2
 801de86:	461f      	mov	r7, r3
 801de88:	f813 0b01 	ldrb.w	r0, [r3], #1
 801de8c:	2830      	cmp	r0, #48	; 0x30
 801de8e:	d06c      	beq.n	801df6a <__gethex+0x118>
 801de90:	f7ff ffca 	bl	801de28 <__hexdig_fun>
 801de94:	4604      	mov	r4, r0
 801de96:	2800      	cmp	r0, #0
 801de98:	d16a      	bne.n	801df70 <__gethex+0x11e>
 801de9a:	9a01      	ldr	r2, [sp, #4]
 801de9c:	9903      	ldr	r1, [sp, #12]
 801de9e:	4638      	mov	r0, r7
 801dea0:	f7fe f988 	bl	801c1b4 <strncmp>
 801dea4:	2800      	cmp	r0, #0
 801dea6:	d166      	bne.n	801df76 <__gethex+0x124>
 801dea8:	9b01      	ldr	r3, [sp, #4]
 801deaa:	5cf8      	ldrb	r0, [r7, r3]
 801deac:	18fe      	adds	r6, r7, r3
 801deae:	f7ff ffbb 	bl	801de28 <__hexdig_fun>
 801deb2:	2800      	cmp	r0, #0
 801deb4:	d062      	beq.n	801df7c <__gethex+0x12a>
 801deb6:	4633      	mov	r3, r6
 801deb8:	7818      	ldrb	r0, [r3, #0]
 801deba:	2830      	cmp	r0, #48	; 0x30
 801debc:	461f      	mov	r7, r3
 801debe:	f103 0301 	add.w	r3, r3, #1
 801dec2:	d0f9      	beq.n	801deb8 <__gethex+0x66>
 801dec4:	f7ff ffb0 	bl	801de28 <__hexdig_fun>
 801dec8:	fab0 f580 	clz	r5, r0
 801decc:	096d      	lsrs	r5, r5, #5
 801dece:	4634      	mov	r4, r6
 801ded0:	f04f 0b01 	mov.w	fp, #1
 801ded4:	463a      	mov	r2, r7
 801ded6:	4616      	mov	r6, r2
 801ded8:	3201      	adds	r2, #1
 801deda:	7830      	ldrb	r0, [r6, #0]
 801dedc:	f7ff ffa4 	bl	801de28 <__hexdig_fun>
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d1f8      	bne.n	801ded6 <__gethex+0x84>
 801dee4:	9a01      	ldr	r2, [sp, #4]
 801dee6:	9903      	ldr	r1, [sp, #12]
 801dee8:	4630      	mov	r0, r6
 801deea:	f7fe f963 	bl	801c1b4 <strncmp>
 801deee:	b950      	cbnz	r0, 801df06 <__gethex+0xb4>
 801def0:	b954      	cbnz	r4, 801df08 <__gethex+0xb6>
 801def2:	9b01      	ldr	r3, [sp, #4]
 801def4:	18f4      	adds	r4, r6, r3
 801def6:	4622      	mov	r2, r4
 801def8:	4616      	mov	r6, r2
 801defa:	3201      	adds	r2, #1
 801defc:	7830      	ldrb	r0, [r6, #0]
 801defe:	f7ff ff93 	bl	801de28 <__hexdig_fun>
 801df02:	2800      	cmp	r0, #0
 801df04:	d1f8      	bne.n	801def8 <__gethex+0xa6>
 801df06:	b10c      	cbz	r4, 801df0c <__gethex+0xba>
 801df08:	1ba4      	subs	r4, r4, r6
 801df0a:	00a4      	lsls	r4, r4, #2
 801df0c:	7833      	ldrb	r3, [r6, #0]
 801df0e:	2b50      	cmp	r3, #80	; 0x50
 801df10:	d001      	beq.n	801df16 <__gethex+0xc4>
 801df12:	2b70      	cmp	r3, #112	; 0x70
 801df14:	d140      	bne.n	801df98 <__gethex+0x146>
 801df16:	7873      	ldrb	r3, [r6, #1]
 801df18:	2b2b      	cmp	r3, #43	; 0x2b
 801df1a:	d031      	beq.n	801df80 <__gethex+0x12e>
 801df1c:	2b2d      	cmp	r3, #45	; 0x2d
 801df1e:	d033      	beq.n	801df88 <__gethex+0x136>
 801df20:	1c71      	adds	r1, r6, #1
 801df22:	f04f 0900 	mov.w	r9, #0
 801df26:	7808      	ldrb	r0, [r1, #0]
 801df28:	f7ff ff7e 	bl	801de28 <__hexdig_fun>
 801df2c:	1e43      	subs	r3, r0, #1
 801df2e:	b2db      	uxtb	r3, r3
 801df30:	2b18      	cmp	r3, #24
 801df32:	d831      	bhi.n	801df98 <__gethex+0x146>
 801df34:	f1a0 0210 	sub.w	r2, r0, #16
 801df38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df3c:	f7ff ff74 	bl	801de28 <__hexdig_fun>
 801df40:	1e43      	subs	r3, r0, #1
 801df42:	b2db      	uxtb	r3, r3
 801df44:	2b18      	cmp	r3, #24
 801df46:	d922      	bls.n	801df8e <__gethex+0x13c>
 801df48:	f1b9 0f00 	cmp.w	r9, #0
 801df4c:	d000      	beq.n	801df50 <__gethex+0xfe>
 801df4e:	4252      	negs	r2, r2
 801df50:	4414      	add	r4, r2
 801df52:	f8ca 1000 	str.w	r1, [sl]
 801df56:	b30d      	cbz	r5, 801df9c <__gethex+0x14a>
 801df58:	f1bb 0f00 	cmp.w	fp, #0
 801df5c:	bf0c      	ite	eq
 801df5e:	2706      	moveq	r7, #6
 801df60:	2700      	movne	r7, #0
 801df62:	4638      	mov	r0, r7
 801df64:	b00b      	add	sp, #44	; 0x2c
 801df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df6a:	f10b 0b01 	add.w	fp, fp, #1
 801df6e:	e78a      	b.n	801de86 <__gethex+0x34>
 801df70:	2500      	movs	r5, #0
 801df72:	462c      	mov	r4, r5
 801df74:	e7ae      	b.n	801ded4 <__gethex+0x82>
 801df76:	463e      	mov	r6, r7
 801df78:	2501      	movs	r5, #1
 801df7a:	e7c7      	b.n	801df0c <__gethex+0xba>
 801df7c:	4604      	mov	r4, r0
 801df7e:	e7fb      	b.n	801df78 <__gethex+0x126>
 801df80:	f04f 0900 	mov.w	r9, #0
 801df84:	1cb1      	adds	r1, r6, #2
 801df86:	e7ce      	b.n	801df26 <__gethex+0xd4>
 801df88:	f04f 0901 	mov.w	r9, #1
 801df8c:	e7fa      	b.n	801df84 <__gethex+0x132>
 801df8e:	230a      	movs	r3, #10
 801df90:	fb03 0202 	mla	r2, r3, r2, r0
 801df94:	3a10      	subs	r2, #16
 801df96:	e7cf      	b.n	801df38 <__gethex+0xe6>
 801df98:	4631      	mov	r1, r6
 801df9a:	e7da      	b.n	801df52 <__gethex+0x100>
 801df9c:	1bf3      	subs	r3, r6, r7
 801df9e:	3b01      	subs	r3, #1
 801dfa0:	4629      	mov	r1, r5
 801dfa2:	2b07      	cmp	r3, #7
 801dfa4:	dc49      	bgt.n	801e03a <__gethex+0x1e8>
 801dfa6:	9802      	ldr	r0, [sp, #8]
 801dfa8:	f000 fa3c 	bl	801e424 <_Balloc>
 801dfac:	9b01      	ldr	r3, [sp, #4]
 801dfae:	f100 0914 	add.w	r9, r0, #20
 801dfb2:	f04f 0b00 	mov.w	fp, #0
 801dfb6:	f1c3 0301 	rsb	r3, r3, #1
 801dfba:	4605      	mov	r5, r0
 801dfbc:	f8cd 9010 	str.w	r9, [sp, #16]
 801dfc0:	46da      	mov	sl, fp
 801dfc2:	9308      	str	r3, [sp, #32]
 801dfc4:	42b7      	cmp	r7, r6
 801dfc6:	d33b      	bcc.n	801e040 <__gethex+0x1ee>
 801dfc8:	9804      	ldr	r0, [sp, #16]
 801dfca:	f840 ab04 	str.w	sl, [r0], #4
 801dfce:	eba0 0009 	sub.w	r0, r0, r9
 801dfd2:	1080      	asrs	r0, r0, #2
 801dfd4:	6128      	str	r0, [r5, #16]
 801dfd6:	0147      	lsls	r7, r0, #5
 801dfd8:	4650      	mov	r0, sl
 801dfda:	f000 fae7 	bl	801e5ac <__hi0bits>
 801dfde:	f8d8 6000 	ldr.w	r6, [r8]
 801dfe2:	1a3f      	subs	r7, r7, r0
 801dfe4:	42b7      	cmp	r7, r6
 801dfe6:	dd64      	ble.n	801e0b2 <__gethex+0x260>
 801dfe8:	1bbf      	subs	r7, r7, r6
 801dfea:	4639      	mov	r1, r7
 801dfec:	4628      	mov	r0, r5
 801dfee:	f000 fdf7 	bl	801ebe0 <__any_on>
 801dff2:	4682      	mov	sl, r0
 801dff4:	b178      	cbz	r0, 801e016 <__gethex+0x1c4>
 801dff6:	1e7b      	subs	r3, r7, #1
 801dff8:	1159      	asrs	r1, r3, #5
 801dffa:	f003 021f 	and.w	r2, r3, #31
 801dffe:	f04f 0a01 	mov.w	sl, #1
 801e002:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e006:	fa0a f202 	lsl.w	r2, sl, r2
 801e00a:	420a      	tst	r2, r1
 801e00c:	d003      	beq.n	801e016 <__gethex+0x1c4>
 801e00e:	4553      	cmp	r3, sl
 801e010:	dc46      	bgt.n	801e0a0 <__gethex+0x24e>
 801e012:	f04f 0a02 	mov.w	sl, #2
 801e016:	4639      	mov	r1, r7
 801e018:	4628      	mov	r0, r5
 801e01a:	f7ff fecb 	bl	801ddb4 <rshift>
 801e01e:	443c      	add	r4, r7
 801e020:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e024:	42a3      	cmp	r3, r4
 801e026:	da52      	bge.n	801e0ce <__gethex+0x27c>
 801e028:	4629      	mov	r1, r5
 801e02a:	9802      	ldr	r0, [sp, #8]
 801e02c:	f000 fa2e 	bl	801e48c <_Bfree>
 801e030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e032:	2300      	movs	r3, #0
 801e034:	6013      	str	r3, [r2, #0]
 801e036:	27a3      	movs	r7, #163	; 0xa3
 801e038:	e793      	b.n	801df62 <__gethex+0x110>
 801e03a:	3101      	adds	r1, #1
 801e03c:	105b      	asrs	r3, r3, #1
 801e03e:	e7b0      	b.n	801dfa2 <__gethex+0x150>
 801e040:	1e73      	subs	r3, r6, #1
 801e042:	9305      	str	r3, [sp, #20]
 801e044:	9a07      	ldr	r2, [sp, #28]
 801e046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e04a:	4293      	cmp	r3, r2
 801e04c:	d018      	beq.n	801e080 <__gethex+0x22e>
 801e04e:	f1bb 0f20 	cmp.w	fp, #32
 801e052:	d107      	bne.n	801e064 <__gethex+0x212>
 801e054:	9b04      	ldr	r3, [sp, #16]
 801e056:	f8c3 a000 	str.w	sl, [r3]
 801e05a:	3304      	adds	r3, #4
 801e05c:	f04f 0a00 	mov.w	sl, #0
 801e060:	9304      	str	r3, [sp, #16]
 801e062:	46d3      	mov	fp, sl
 801e064:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e068:	f7ff fede 	bl	801de28 <__hexdig_fun>
 801e06c:	f000 000f 	and.w	r0, r0, #15
 801e070:	fa00 f00b 	lsl.w	r0, r0, fp
 801e074:	ea4a 0a00 	orr.w	sl, sl, r0
 801e078:	f10b 0b04 	add.w	fp, fp, #4
 801e07c:	9b05      	ldr	r3, [sp, #20]
 801e07e:	e00d      	b.n	801e09c <__gethex+0x24a>
 801e080:	9b05      	ldr	r3, [sp, #20]
 801e082:	9a08      	ldr	r2, [sp, #32]
 801e084:	4413      	add	r3, r2
 801e086:	42bb      	cmp	r3, r7
 801e088:	d3e1      	bcc.n	801e04e <__gethex+0x1fc>
 801e08a:	4618      	mov	r0, r3
 801e08c:	9a01      	ldr	r2, [sp, #4]
 801e08e:	9903      	ldr	r1, [sp, #12]
 801e090:	9309      	str	r3, [sp, #36]	; 0x24
 801e092:	f7fe f88f 	bl	801c1b4 <strncmp>
 801e096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e098:	2800      	cmp	r0, #0
 801e09a:	d1d8      	bne.n	801e04e <__gethex+0x1fc>
 801e09c:	461e      	mov	r6, r3
 801e09e:	e791      	b.n	801dfc4 <__gethex+0x172>
 801e0a0:	1eb9      	subs	r1, r7, #2
 801e0a2:	4628      	mov	r0, r5
 801e0a4:	f000 fd9c 	bl	801ebe0 <__any_on>
 801e0a8:	2800      	cmp	r0, #0
 801e0aa:	d0b2      	beq.n	801e012 <__gethex+0x1c0>
 801e0ac:	f04f 0a03 	mov.w	sl, #3
 801e0b0:	e7b1      	b.n	801e016 <__gethex+0x1c4>
 801e0b2:	da09      	bge.n	801e0c8 <__gethex+0x276>
 801e0b4:	1bf7      	subs	r7, r6, r7
 801e0b6:	4629      	mov	r1, r5
 801e0b8:	463a      	mov	r2, r7
 801e0ba:	9802      	ldr	r0, [sp, #8]
 801e0bc:	f000 fbb2 	bl	801e824 <__lshift>
 801e0c0:	1be4      	subs	r4, r4, r7
 801e0c2:	4605      	mov	r5, r0
 801e0c4:	f100 0914 	add.w	r9, r0, #20
 801e0c8:	f04f 0a00 	mov.w	sl, #0
 801e0cc:	e7a8      	b.n	801e020 <__gethex+0x1ce>
 801e0ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e0d2:	42a0      	cmp	r0, r4
 801e0d4:	dd6a      	ble.n	801e1ac <__gethex+0x35a>
 801e0d6:	1b04      	subs	r4, r0, r4
 801e0d8:	42a6      	cmp	r6, r4
 801e0da:	dc2e      	bgt.n	801e13a <__gethex+0x2e8>
 801e0dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e0e0:	2b02      	cmp	r3, #2
 801e0e2:	d022      	beq.n	801e12a <__gethex+0x2d8>
 801e0e4:	2b03      	cmp	r3, #3
 801e0e6:	d024      	beq.n	801e132 <__gethex+0x2e0>
 801e0e8:	2b01      	cmp	r3, #1
 801e0ea:	d115      	bne.n	801e118 <__gethex+0x2c6>
 801e0ec:	42a6      	cmp	r6, r4
 801e0ee:	d113      	bne.n	801e118 <__gethex+0x2c6>
 801e0f0:	2e01      	cmp	r6, #1
 801e0f2:	dc0b      	bgt.n	801e10c <__gethex+0x2ba>
 801e0f4:	9a06      	ldr	r2, [sp, #24]
 801e0f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e0fa:	6013      	str	r3, [r2, #0]
 801e0fc:	2301      	movs	r3, #1
 801e0fe:	612b      	str	r3, [r5, #16]
 801e100:	f8c9 3000 	str.w	r3, [r9]
 801e104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e106:	2762      	movs	r7, #98	; 0x62
 801e108:	601d      	str	r5, [r3, #0]
 801e10a:	e72a      	b.n	801df62 <__gethex+0x110>
 801e10c:	1e71      	subs	r1, r6, #1
 801e10e:	4628      	mov	r0, r5
 801e110:	f000 fd66 	bl	801ebe0 <__any_on>
 801e114:	2800      	cmp	r0, #0
 801e116:	d1ed      	bne.n	801e0f4 <__gethex+0x2a2>
 801e118:	4629      	mov	r1, r5
 801e11a:	9802      	ldr	r0, [sp, #8]
 801e11c:	f000 f9b6 	bl	801e48c <_Bfree>
 801e120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e122:	2300      	movs	r3, #0
 801e124:	6013      	str	r3, [r2, #0]
 801e126:	2750      	movs	r7, #80	; 0x50
 801e128:	e71b      	b.n	801df62 <__gethex+0x110>
 801e12a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d0e1      	beq.n	801e0f4 <__gethex+0x2a2>
 801e130:	e7f2      	b.n	801e118 <__gethex+0x2c6>
 801e132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e134:	2b00      	cmp	r3, #0
 801e136:	d1dd      	bne.n	801e0f4 <__gethex+0x2a2>
 801e138:	e7ee      	b.n	801e118 <__gethex+0x2c6>
 801e13a:	1e67      	subs	r7, r4, #1
 801e13c:	f1ba 0f00 	cmp.w	sl, #0
 801e140:	d131      	bne.n	801e1a6 <__gethex+0x354>
 801e142:	b127      	cbz	r7, 801e14e <__gethex+0x2fc>
 801e144:	4639      	mov	r1, r7
 801e146:	4628      	mov	r0, r5
 801e148:	f000 fd4a 	bl	801ebe0 <__any_on>
 801e14c:	4682      	mov	sl, r0
 801e14e:	117a      	asrs	r2, r7, #5
 801e150:	2301      	movs	r3, #1
 801e152:	f007 071f 	and.w	r7, r7, #31
 801e156:	fa03 f707 	lsl.w	r7, r3, r7
 801e15a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801e15e:	4621      	mov	r1, r4
 801e160:	421f      	tst	r7, r3
 801e162:	4628      	mov	r0, r5
 801e164:	bf18      	it	ne
 801e166:	f04a 0a02 	orrne.w	sl, sl, #2
 801e16a:	1b36      	subs	r6, r6, r4
 801e16c:	f7ff fe22 	bl	801ddb4 <rshift>
 801e170:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e174:	2702      	movs	r7, #2
 801e176:	f1ba 0f00 	cmp.w	sl, #0
 801e17a:	d048      	beq.n	801e20e <__gethex+0x3bc>
 801e17c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e180:	2b02      	cmp	r3, #2
 801e182:	d015      	beq.n	801e1b0 <__gethex+0x35e>
 801e184:	2b03      	cmp	r3, #3
 801e186:	d017      	beq.n	801e1b8 <__gethex+0x366>
 801e188:	2b01      	cmp	r3, #1
 801e18a:	d109      	bne.n	801e1a0 <__gethex+0x34e>
 801e18c:	f01a 0f02 	tst.w	sl, #2
 801e190:	d006      	beq.n	801e1a0 <__gethex+0x34e>
 801e192:	f8d9 3000 	ldr.w	r3, [r9]
 801e196:	ea4a 0a03 	orr.w	sl, sl, r3
 801e19a:	f01a 0f01 	tst.w	sl, #1
 801e19e:	d10e      	bne.n	801e1be <__gethex+0x36c>
 801e1a0:	f047 0710 	orr.w	r7, r7, #16
 801e1a4:	e033      	b.n	801e20e <__gethex+0x3bc>
 801e1a6:	f04f 0a01 	mov.w	sl, #1
 801e1aa:	e7d0      	b.n	801e14e <__gethex+0x2fc>
 801e1ac:	2701      	movs	r7, #1
 801e1ae:	e7e2      	b.n	801e176 <__gethex+0x324>
 801e1b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1b2:	f1c3 0301 	rsb	r3, r3, #1
 801e1b6:	9315      	str	r3, [sp, #84]	; 0x54
 801e1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d0f0      	beq.n	801e1a0 <__gethex+0x34e>
 801e1be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801e1c2:	f105 0314 	add.w	r3, r5, #20
 801e1c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801e1ca:	eb03 010a 	add.w	r1, r3, sl
 801e1ce:	f04f 0c00 	mov.w	ip, #0
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e1dc:	d01c      	beq.n	801e218 <__gethex+0x3c6>
 801e1de:	3201      	adds	r2, #1
 801e1e0:	6002      	str	r2, [r0, #0]
 801e1e2:	2f02      	cmp	r7, #2
 801e1e4:	f105 0314 	add.w	r3, r5, #20
 801e1e8:	d138      	bne.n	801e25c <__gethex+0x40a>
 801e1ea:	f8d8 2000 	ldr.w	r2, [r8]
 801e1ee:	3a01      	subs	r2, #1
 801e1f0:	42b2      	cmp	r2, r6
 801e1f2:	d10a      	bne.n	801e20a <__gethex+0x3b8>
 801e1f4:	1171      	asrs	r1, r6, #5
 801e1f6:	2201      	movs	r2, #1
 801e1f8:	f006 061f 	and.w	r6, r6, #31
 801e1fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e200:	fa02 f606 	lsl.w	r6, r2, r6
 801e204:	421e      	tst	r6, r3
 801e206:	bf18      	it	ne
 801e208:	4617      	movne	r7, r2
 801e20a:	f047 0720 	orr.w	r7, r7, #32
 801e20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e210:	601d      	str	r5, [r3, #0]
 801e212:	9b06      	ldr	r3, [sp, #24]
 801e214:	601c      	str	r4, [r3, #0]
 801e216:	e6a4      	b.n	801df62 <__gethex+0x110>
 801e218:	4299      	cmp	r1, r3
 801e21a:	f843 cc04 	str.w	ip, [r3, #-4]
 801e21e:	d8d8      	bhi.n	801e1d2 <__gethex+0x380>
 801e220:	68ab      	ldr	r3, [r5, #8]
 801e222:	4599      	cmp	r9, r3
 801e224:	db12      	blt.n	801e24c <__gethex+0x3fa>
 801e226:	6869      	ldr	r1, [r5, #4]
 801e228:	9802      	ldr	r0, [sp, #8]
 801e22a:	3101      	adds	r1, #1
 801e22c:	f000 f8fa 	bl	801e424 <_Balloc>
 801e230:	692a      	ldr	r2, [r5, #16]
 801e232:	3202      	adds	r2, #2
 801e234:	f105 010c 	add.w	r1, r5, #12
 801e238:	4683      	mov	fp, r0
 801e23a:	0092      	lsls	r2, r2, #2
 801e23c:	300c      	adds	r0, #12
 801e23e:	f7fd f9d8 	bl	801b5f2 <memcpy>
 801e242:	4629      	mov	r1, r5
 801e244:	9802      	ldr	r0, [sp, #8]
 801e246:	f000 f921 	bl	801e48c <_Bfree>
 801e24a:	465d      	mov	r5, fp
 801e24c:	692b      	ldr	r3, [r5, #16]
 801e24e:	1c5a      	adds	r2, r3, #1
 801e250:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801e254:	612a      	str	r2, [r5, #16]
 801e256:	2201      	movs	r2, #1
 801e258:	615a      	str	r2, [r3, #20]
 801e25a:	e7c2      	b.n	801e1e2 <__gethex+0x390>
 801e25c:	692a      	ldr	r2, [r5, #16]
 801e25e:	454a      	cmp	r2, r9
 801e260:	dd0b      	ble.n	801e27a <__gethex+0x428>
 801e262:	2101      	movs	r1, #1
 801e264:	4628      	mov	r0, r5
 801e266:	f7ff fda5 	bl	801ddb4 <rshift>
 801e26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e26e:	3401      	adds	r4, #1
 801e270:	42a3      	cmp	r3, r4
 801e272:	f6ff aed9 	blt.w	801e028 <__gethex+0x1d6>
 801e276:	2701      	movs	r7, #1
 801e278:	e7c7      	b.n	801e20a <__gethex+0x3b8>
 801e27a:	f016 061f 	ands.w	r6, r6, #31
 801e27e:	d0fa      	beq.n	801e276 <__gethex+0x424>
 801e280:	449a      	add	sl, r3
 801e282:	f1c6 0620 	rsb	r6, r6, #32
 801e286:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e28a:	f000 f98f 	bl	801e5ac <__hi0bits>
 801e28e:	42b0      	cmp	r0, r6
 801e290:	dbe7      	blt.n	801e262 <__gethex+0x410>
 801e292:	e7f0      	b.n	801e276 <__gethex+0x424>

0801e294 <L_shift>:
 801e294:	f1c2 0208 	rsb	r2, r2, #8
 801e298:	0092      	lsls	r2, r2, #2
 801e29a:	b570      	push	{r4, r5, r6, lr}
 801e29c:	f1c2 0620 	rsb	r6, r2, #32
 801e2a0:	6843      	ldr	r3, [r0, #4]
 801e2a2:	6804      	ldr	r4, [r0, #0]
 801e2a4:	fa03 f506 	lsl.w	r5, r3, r6
 801e2a8:	432c      	orrs	r4, r5
 801e2aa:	40d3      	lsrs	r3, r2
 801e2ac:	6004      	str	r4, [r0, #0]
 801e2ae:	f840 3f04 	str.w	r3, [r0, #4]!
 801e2b2:	4288      	cmp	r0, r1
 801e2b4:	d3f4      	bcc.n	801e2a0 <L_shift+0xc>
 801e2b6:	bd70      	pop	{r4, r5, r6, pc}

0801e2b8 <__match>:
 801e2b8:	b530      	push	{r4, r5, lr}
 801e2ba:	6803      	ldr	r3, [r0, #0]
 801e2bc:	3301      	adds	r3, #1
 801e2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e2c2:	b914      	cbnz	r4, 801e2ca <__match+0x12>
 801e2c4:	6003      	str	r3, [r0, #0]
 801e2c6:	2001      	movs	r0, #1
 801e2c8:	bd30      	pop	{r4, r5, pc}
 801e2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e2d2:	2d19      	cmp	r5, #25
 801e2d4:	bf98      	it	ls
 801e2d6:	3220      	addls	r2, #32
 801e2d8:	42a2      	cmp	r2, r4
 801e2da:	d0f0      	beq.n	801e2be <__match+0x6>
 801e2dc:	2000      	movs	r0, #0
 801e2de:	e7f3      	b.n	801e2c8 <__match+0x10>

0801e2e0 <__hexnan>:
 801e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e4:	680b      	ldr	r3, [r1, #0]
 801e2e6:	6801      	ldr	r1, [r0, #0]
 801e2e8:	115f      	asrs	r7, r3, #5
 801e2ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801e2ee:	f013 031f 	ands.w	r3, r3, #31
 801e2f2:	b087      	sub	sp, #28
 801e2f4:	bf18      	it	ne
 801e2f6:	3704      	addne	r7, #4
 801e2f8:	2500      	movs	r5, #0
 801e2fa:	1f3e      	subs	r6, r7, #4
 801e2fc:	4682      	mov	sl, r0
 801e2fe:	4690      	mov	r8, r2
 801e300:	9301      	str	r3, [sp, #4]
 801e302:	f847 5c04 	str.w	r5, [r7, #-4]
 801e306:	46b1      	mov	r9, r6
 801e308:	4634      	mov	r4, r6
 801e30a:	9502      	str	r5, [sp, #8]
 801e30c:	46ab      	mov	fp, r5
 801e30e:	784a      	ldrb	r2, [r1, #1]
 801e310:	1c4b      	adds	r3, r1, #1
 801e312:	9303      	str	r3, [sp, #12]
 801e314:	b342      	cbz	r2, 801e368 <__hexnan+0x88>
 801e316:	4610      	mov	r0, r2
 801e318:	9105      	str	r1, [sp, #20]
 801e31a:	9204      	str	r2, [sp, #16]
 801e31c:	f7ff fd84 	bl	801de28 <__hexdig_fun>
 801e320:	2800      	cmp	r0, #0
 801e322:	d143      	bne.n	801e3ac <__hexnan+0xcc>
 801e324:	9a04      	ldr	r2, [sp, #16]
 801e326:	9905      	ldr	r1, [sp, #20]
 801e328:	2a20      	cmp	r2, #32
 801e32a:	d818      	bhi.n	801e35e <__hexnan+0x7e>
 801e32c:	9b02      	ldr	r3, [sp, #8]
 801e32e:	459b      	cmp	fp, r3
 801e330:	dd13      	ble.n	801e35a <__hexnan+0x7a>
 801e332:	454c      	cmp	r4, r9
 801e334:	d206      	bcs.n	801e344 <__hexnan+0x64>
 801e336:	2d07      	cmp	r5, #7
 801e338:	dc04      	bgt.n	801e344 <__hexnan+0x64>
 801e33a:	462a      	mov	r2, r5
 801e33c:	4649      	mov	r1, r9
 801e33e:	4620      	mov	r0, r4
 801e340:	f7ff ffa8 	bl	801e294 <L_shift>
 801e344:	4544      	cmp	r4, r8
 801e346:	d944      	bls.n	801e3d2 <__hexnan+0xf2>
 801e348:	2300      	movs	r3, #0
 801e34a:	f1a4 0904 	sub.w	r9, r4, #4
 801e34e:	f844 3c04 	str.w	r3, [r4, #-4]
 801e352:	f8cd b008 	str.w	fp, [sp, #8]
 801e356:	464c      	mov	r4, r9
 801e358:	461d      	mov	r5, r3
 801e35a:	9903      	ldr	r1, [sp, #12]
 801e35c:	e7d7      	b.n	801e30e <__hexnan+0x2e>
 801e35e:	2a29      	cmp	r2, #41	; 0x29
 801e360:	d14a      	bne.n	801e3f8 <__hexnan+0x118>
 801e362:	3102      	adds	r1, #2
 801e364:	f8ca 1000 	str.w	r1, [sl]
 801e368:	f1bb 0f00 	cmp.w	fp, #0
 801e36c:	d044      	beq.n	801e3f8 <__hexnan+0x118>
 801e36e:	454c      	cmp	r4, r9
 801e370:	d206      	bcs.n	801e380 <__hexnan+0xa0>
 801e372:	2d07      	cmp	r5, #7
 801e374:	dc04      	bgt.n	801e380 <__hexnan+0xa0>
 801e376:	462a      	mov	r2, r5
 801e378:	4649      	mov	r1, r9
 801e37a:	4620      	mov	r0, r4
 801e37c:	f7ff ff8a 	bl	801e294 <L_shift>
 801e380:	4544      	cmp	r4, r8
 801e382:	d928      	bls.n	801e3d6 <__hexnan+0xf6>
 801e384:	4643      	mov	r3, r8
 801e386:	f854 2b04 	ldr.w	r2, [r4], #4
 801e38a:	f843 2b04 	str.w	r2, [r3], #4
 801e38e:	42a6      	cmp	r6, r4
 801e390:	d2f9      	bcs.n	801e386 <__hexnan+0xa6>
 801e392:	2200      	movs	r2, #0
 801e394:	f843 2b04 	str.w	r2, [r3], #4
 801e398:	429e      	cmp	r6, r3
 801e39a:	d2fb      	bcs.n	801e394 <__hexnan+0xb4>
 801e39c:	6833      	ldr	r3, [r6, #0]
 801e39e:	b91b      	cbnz	r3, 801e3a8 <__hexnan+0xc8>
 801e3a0:	4546      	cmp	r6, r8
 801e3a2:	d127      	bne.n	801e3f4 <__hexnan+0x114>
 801e3a4:	2301      	movs	r3, #1
 801e3a6:	6033      	str	r3, [r6, #0]
 801e3a8:	2005      	movs	r0, #5
 801e3aa:	e026      	b.n	801e3fa <__hexnan+0x11a>
 801e3ac:	3501      	adds	r5, #1
 801e3ae:	2d08      	cmp	r5, #8
 801e3b0:	f10b 0b01 	add.w	fp, fp, #1
 801e3b4:	dd06      	ble.n	801e3c4 <__hexnan+0xe4>
 801e3b6:	4544      	cmp	r4, r8
 801e3b8:	d9cf      	bls.n	801e35a <__hexnan+0x7a>
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3c0:	2501      	movs	r5, #1
 801e3c2:	3c04      	subs	r4, #4
 801e3c4:	6822      	ldr	r2, [r4, #0]
 801e3c6:	f000 000f 	and.w	r0, r0, #15
 801e3ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e3ce:	6020      	str	r0, [r4, #0]
 801e3d0:	e7c3      	b.n	801e35a <__hexnan+0x7a>
 801e3d2:	2508      	movs	r5, #8
 801e3d4:	e7c1      	b.n	801e35a <__hexnan+0x7a>
 801e3d6:	9b01      	ldr	r3, [sp, #4]
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d0df      	beq.n	801e39c <__hexnan+0xbc>
 801e3dc:	f04f 32ff 	mov.w	r2, #4294967295
 801e3e0:	f1c3 0320 	rsb	r3, r3, #32
 801e3e4:	fa22 f303 	lsr.w	r3, r2, r3
 801e3e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801e3ec:	401a      	ands	r2, r3
 801e3ee:	f847 2c04 	str.w	r2, [r7, #-4]
 801e3f2:	e7d3      	b.n	801e39c <__hexnan+0xbc>
 801e3f4:	3e04      	subs	r6, #4
 801e3f6:	e7d1      	b.n	801e39c <__hexnan+0xbc>
 801e3f8:	2004      	movs	r0, #4
 801e3fa:	b007      	add	sp, #28
 801e3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e400 <__localeconv_l>:
 801e400:	30f0      	adds	r0, #240	; 0xf0
 801e402:	4770      	bx	lr

0801e404 <_localeconv_r>:
 801e404:	4b04      	ldr	r3, [pc, #16]	; (801e418 <_localeconv_r+0x14>)
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	6a18      	ldr	r0, [r3, #32]
 801e40a:	4b04      	ldr	r3, [pc, #16]	; (801e41c <_localeconv_r+0x18>)
 801e40c:	2800      	cmp	r0, #0
 801e40e:	bf08      	it	eq
 801e410:	4618      	moveq	r0, r3
 801e412:	30f0      	adds	r0, #240	; 0xf0
 801e414:	4770      	bx	lr
 801e416:	bf00      	nop
 801e418:	20000084 	.word	0x20000084
 801e41c:	200000e8 	.word	0x200000e8

0801e420 <__malloc_lock>:
 801e420:	4770      	bx	lr

0801e422 <__malloc_unlock>:
 801e422:	4770      	bx	lr

0801e424 <_Balloc>:
 801e424:	b570      	push	{r4, r5, r6, lr}
 801e426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e428:	4604      	mov	r4, r0
 801e42a:	460e      	mov	r6, r1
 801e42c:	b93d      	cbnz	r5, 801e43e <_Balloc+0x1a>
 801e42e:	2010      	movs	r0, #16
 801e430:	f7fd f8ae 	bl	801b590 <malloc>
 801e434:	6260      	str	r0, [r4, #36]	; 0x24
 801e436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e43a:	6005      	str	r5, [r0, #0]
 801e43c:	60c5      	str	r5, [r0, #12]
 801e43e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801e440:	68eb      	ldr	r3, [r5, #12]
 801e442:	b183      	cbz	r3, 801e466 <_Balloc+0x42>
 801e444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e446:	68db      	ldr	r3, [r3, #12]
 801e448:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801e44c:	b9b8      	cbnz	r0, 801e47e <_Balloc+0x5a>
 801e44e:	2101      	movs	r1, #1
 801e450:	fa01 f506 	lsl.w	r5, r1, r6
 801e454:	1d6a      	adds	r2, r5, #5
 801e456:	0092      	lsls	r2, r2, #2
 801e458:	4620      	mov	r0, r4
 801e45a:	f000 fbe2 	bl	801ec22 <_calloc_r>
 801e45e:	b160      	cbz	r0, 801e47a <_Balloc+0x56>
 801e460:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801e464:	e00e      	b.n	801e484 <_Balloc+0x60>
 801e466:	2221      	movs	r2, #33	; 0x21
 801e468:	2104      	movs	r1, #4
 801e46a:	4620      	mov	r0, r4
 801e46c:	f000 fbd9 	bl	801ec22 <_calloc_r>
 801e470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e472:	60e8      	str	r0, [r5, #12]
 801e474:	68db      	ldr	r3, [r3, #12]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d1e4      	bne.n	801e444 <_Balloc+0x20>
 801e47a:	2000      	movs	r0, #0
 801e47c:	bd70      	pop	{r4, r5, r6, pc}
 801e47e:	6802      	ldr	r2, [r0, #0]
 801e480:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801e484:	2300      	movs	r3, #0
 801e486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e48a:	e7f7      	b.n	801e47c <_Balloc+0x58>

0801e48c <_Bfree>:
 801e48c:	b570      	push	{r4, r5, r6, lr}
 801e48e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801e490:	4606      	mov	r6, r0
 801e492:	460d      	mov	r5, r1
 801e494:	b93c      	cbnz	r4, 801e4a6 <_Bfree+0x1a>
 801e496:	2010      	movs	r0, #16
 801e498:	f7fd f87a 	bl	801b590 <malloc>
 801e49c:	6270      	str	r0, [r6, #36]	; 0x24
 801e49e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e4a2:	6004      	str	r4, [r0, #0]
 801e4a4:	60c4      	str	r4, [r0, #12]
 801e4a6:	b13d      	cbz	r5, 801e4b8 <_Bfree+0x2c>
 801e4a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801e4aa:	686a      	ldr	r2, [r5, #4]
 801e4ac:	68db      	ldr	r3, [r3, #12]
 801e4ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e4b2:	6029      	str	r1, [r5, #0]
 801e4b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801e4b8:	bd70      	pop	{r4, r5, r6, pc}

0801e4ba <__multadd>:
 801e4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4be:	690d      	ldr	r5, [r1, #16]
 801e4c0:	461f      	mov	r7, r3
 801e4c2:	4606      	mov	r6, r0
 801e4c4:	460c      	mov	r4, r1
 801e4c6:	f101 0c14 	add.w	ip, r1, #20
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	f8dc 0000 	ldr.w	r0, [ip]
 801e4d0:	b281      	uxth	r1, r0
 801e4d2:	fb02 7101 	mla	r1, r2, r1, r7
 801e4d6:	0c0f      	lsrs	r7, r1, #16
 801e4d8:	0c00      	lsrs	r0, r0, #16
 801e4da:	fb02 7000 	mla	r0, r2, r0, r7
 801e4de:	b289      	uxth	r1, r1
 801e4e0:	3301      	adds	r3, #1
 801e4e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801e4e6:	429d      	cmp	r5, r3
 801e4e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801e4ec:	f84c 1b04 	str.w	r1, [ip], #4
 801e4f0:	dcec      	bgt.n	801e4cc <__multadd+0x12>
 801e4f2:	b1d7      	cbz	r7, 801e52a <__multadd+0x70>
 801e4f4:	68a3      	ldr	r3, [r4, #8]
 801e4f6:	42ab      	cmp	r3, r5
 801e4f8:	dc12      	bgt.n	801e520 <__multadd+0x66>
 801e4fa:	6861      	ldr	r1, [r4, #4]
 801e4fc:	4630      	mov	r0, r6
 801e4fe:	3101      	adds	r1, #1
 801e500:	f7ff ff90 	bl	801e424 <_Balloc>
 801e504:	6922      	ldr	r2, [r4, #16]
 801e506:	3202      	adds	r2, #2
 801e508:	f104 010c 	add.w	r1, r4, #12
 801e50c:	4680      	mov	r8, r0
 801e50e:	0092      	lsls	r2, r2, #2
 801e510:	300c      	adds	r0, #12
 801e512:	f7fd f86e 	bl	801b5f2 <memcpy>
 801e516:	4621      	mov	r1, r4
 801e518:	4630      	mov	r0, r6
 801e51a:	f7ff ffb7 	bl	801e48c <_Bfree>
 801e51e:	4644      	mov	r4, r8
 801e520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e524:	3501      	adds	r5, #1
 801e526:	615f      	str	r7, [r3, #20]
 801e528:	6125      	str	r5, [r4, #16]
 801e52a:	4620      	mov	r0, r4
 801e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e530 <__s2b>:
 801e530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e534:	460c      	mov	r4, r1
 801e536:	4615      	mov	r5, r2
 801e538:	461f      	mov	r7, r3
 801e53a:	2209      	movs	r2, #9
 801e53c:	3308      	adds	r3, #8
 801e53e:	4606      	mov	r6, r0
 801e540:	fb93 f3f2 	sdiv	r3, r3, r2
 801e544:	2100      	movs	r1, #0
 801e546:	2201      	movs	r2, #1
 801e548:	429a      	cmp	r2, r3
 801e54a:	db20      	blt.n	801e58e <__s2b+0x5e>
 801e54c:	4630      	mov	r0, r6
 801e54e:	f7ff ff69 	bl	801e424 <_Balloc>
 801e552:	9b08      	ldr	r3, [sp, #32]
 801e554:	6143      	str	r3, [r0, #20]
 801e556:	2d09      	cmp	r5, #9
 801e558:	f04f 0301 	mov.w	r3, #1
 801e55c:	6103      	str	r3, [r0, #16]
 801e55e:	dd19      	ble.n	801e594 <__s2b+0x64>
 801e560:	f104 0809 	add.w	r8, r4, #9
 801e564:	46c1      	mov	r9, r8
 801e566:	442c      	add	r4, r5
 801e568:	f819 3b01 	ldrb.w	r3, [r9], #1
 801e56c:	4601      	mov	r1, r0
 801e56e:	3b30      	subs	r3, #48	; 0x30
 801e570:	220a      	movs	r2, #10
 801e572:	4630      	mov	r0, r6
 801e574:	f7ff ffa1 	bl	801e4ba <__multadd>
 801e578:	45a1      	cmp	r9, r4
 801e57a:	d1f5      	bne.n	801e568 <__s2b+0x38>
 801e57c:	eb08 0405 	add.w	r4, r8, r5
 801e580:	3c08      	subs	r4, #8
 801e582:	1b2d      	subs	r5, r5, r4
 801e584:	1963      	adds	r3, r4, r5
 801e586:	42bb      	cmp	r3, r7
 801e588:	db07      	blt.n	801e59a <__s2b+0x6a>
 801e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e58e:	0052      	lsls	r2, r2, #1
 801e590:	3101      	adds	r1, #1
 801e592:	e7d9      	b.n	801e548 <__s2b+0x18>
 801e594:	340a      	adds	r4, #10
 801e596:	2509      	movs	r5, #9
 801e598:	e7f3      	b.n	801e582 <__s2b+0x52>
 801e59a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e59e:	4601      	mov	r1, r0
 801e5a0:	3b30      	subs	r3, #48	; 0x30
 801e5a2:	220a      	movs	r2, #10
 801e5a4:	4630      	mov	r0, r6
 801e5a6:	f7ff ff88 	bl	801e4ba <__multadd>
 801e5aa:	e7eb      	b.n	801e584 <__s2b+0x54>

0801e5ac <__hi0bits>:
 801e5ac:	0c02      	lsrs	r2, r0, #16
 801e5ae:	0412      	lsls	r2, r2, #16
 801e5b0:	4603      	mov	r3, r0
 801e5b2:	b9b2      	cbnz	r2, 801e5e2 <__hi0bits+0x36>
 801e5b4:	0403      	lsls	r3, r0, #16
 801e5b6:	2010      	movs	r0, #16
 801e5b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e5bc:	bf04      	itt	eq
 801e5be:	021b      	lsleq	r3, r3, #8
 801e5c0:	3008      	addeq	r0, #8
 801e5c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e5c6:	bf04      	itt	eq
 801e5c8:	011b      	lsleq	r3, r3, #4
 801e5ca:	3004      	addeq	r0, #4
 801e5cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e5d0:	bf04      	itt	eq
 801e5d2:	009b      	lsleq	r3, r3, #2
 801e5d4:	3002      	addeq	r0, #2
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	db06      	blt.n	801e5e8 <__hi0bits+0x3c>
 801e5da:	005b      	lsls	r3, r3, #1
 801e5dc:	d503      	bpl.n	801e5e6 <__hi0bits+0x3a>
 801e5de:	3001      	adds	r0, #1
 801e5e0:	4770      	bx	lr
 801e5e2:	2000      	movs	r0, #0
 801e5e4:	e7e8      	b.n	801e5b8 <__hi0bits+0xc>
 801e5e6:	2020      	movs	r0, #32
 801e5e8:	4770      	bx	lr

0801e5ea <__lo0bits>:
 801e5ea:	6803      	ldr	r3, [r0, #0]
 801e5ec:	f013 0207 	ands.w	r2, r3, #7
 801e5f0:	4601      	mov	r1, r0
 801e5f2:	d00b      	beq.n	801e60c <__lo0bits+0x22>
 801e5f4:	07da      	lsls	r2, r3, #31
 801e5f6:	d423      	bmi.n	801e640 <__lo0bits+0x56>
 801e5f8:	0798      	lsls	r0, r3, #30
 801e5fa:	bf49      	itett	mi
 801e5fc:	085b      	lsrmi	r3, r3, #1
 801e5fe:	089b      	lsrpl	r3, r3, #2
 801e600:	2001      	movmi	r0, #1
 801e602:	600b      	strmi	r3, [r1, #0]
 801e604:	bf5c      	itt	pl
 801e606:	600b      	strpl	r3, [r1, #0]
 801e608:	2002      	movpl	r0, #2
 801e60a:	4770      	bx	lr
 801e60c:	b298      	uxth	r0, r3
 801e60e:	b9a8      	cbnz	r0, 801e63c <__lo0bits+0x52>
 801e610:	0c1b      	lsrs	r3, r3, #16
 801e612:	2010      	movs	r0, #16
 801e614:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e618:	bf04      	itt	eq
 801e61a:	0a1b      	lsreq	r3, r3, #8
 801e61c:	3008      	addeq	r0, #8
 801e61e:	071a      	lsls	r2, r3, #28
 801e620:	bf04      	itt	eq
 801e622:	091b      	lsreq	r3, r3, #4
 801e624:	3004      	addeq	r0, #4
 801e626:	079a      	lsls	r2, r3, #30
 801e628:	bf04      	itt	eq
 801e62a:	089b      	lsreq	r3, r3, #2
 801e62c:	3002      	addeq	r0, #2
 801e62e:	07da      	lsls	r2, r3, #31
 801e630:	d402      	bmi.n	801e638 <__lo0bits+0x4e>
 801e632:	085b      	lsrs	r3, r3, #1
 801e634:	d006      	beq.n	801e644 <__lo0bits+0x5a>
 801e636:	3001      	adds	r0, #1
 801e638:	600b      	str	r3, [r1, #0]
 801e63a:	4770      	bx	lr
 801e63c:	4610      	mov	r0, r2
 801e63e:	e7e9      	b.n	801e614 <__lo0bits+0x2a>
 801e640:	2000      	movs	r0, #0
 801e642:	4770      	bx	lr
 801e644:	2020      	movs	r0, #32
 801e646:	4770      	bx	lr

0801e648 <__i2b>:
 801e648:	b510      	push	{r4, lr}
 801e64a:	460c      	mov	r4, r1
 801e64c:	2101      	movs	r1, #1
 801e64e:	f7ff fee9 	bl	801e424 <_Balloc>
 801e652:	2201      	movs	r2, #1
 801e654:	6144      	str	r4, [r0, #20]
 801e656:	6102      	str	r2, [r0, #16]
 801e658:	bd10      	pop	{r4, pc}

0801e65a <__multiply>:
 801e65a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65e:	4614      	mov	r4, r2
 801e660:	690a      	ldr	r2, [r1, #16]
 801e662:	6923      	ldr	r3, [r4, #16]
 801e664:	429a      	cmp	r2, r3
 801e666:	bfb8      	it	lt
 801e668:	460b      	movlt	r3, r1
 801e66a:	4688      	mov	r8, r1
 801e66c:	bfbc      	itt	lt
 801e66e:	46a0      	movlt	r8, r4
 801e670:	461c      	movlt	r4, r3
 801e672:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e676:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e67e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e682:	eb07 0609 	add.w	r6, r7, r9
 801e686:	42b3      	cmp	r3, r6
 801e688:	bfb8      	it	lt
 801e68a:	3101      	addlt	r1, #1
 801e68c:	f7ff feca 	bl	801e424 <_Balloc>
 801e690:	f100 0514 	add.w	r5, r0, #20
 801e694:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801e698:	462b      	mov	r3, r5
 801e69a:	2200      	movs	r2, #0
 801e69c:	4573      	cmp	r3, lr
 801e69e:	d316      	bcc.n	801e6ce <__multiply+0x74>
 801e6a0:	f104 0214 	add.w	r2, r4, #20
 801e6a4:	f108 0114 	add.w	r1, r8, #20
 801e6a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801e6ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801e6b0:	9300      	str	r3, [sp, #0]
 801e6b2:	9b00      	ldr	r3, [sp, #0]
 801e6b4:	9201      	str	r2, [sp, #4]
 801e6b6:	4293      	cmp	r3, r2
 801e6b8:	d80c      	bhi.n	801e6d4 <__multiply+0x7a>
 801e6ba:	2e00      	cmp	r6, #0
 801e6bc:	dd03      	ble.n	801e6c6 <__multiply+0x6c>
 801e6be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d05d      	beq.n	801e782 <__multiply+0x128>
 801e6c6:	6106      	str	r6, [r0, #16]
 801e6c8:	b003      	add	sp, #12
 801e6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ce:	f843 2b04 	str.w	r2, [r3], #4
 801e6d2:	e7e3      	b.n	801e69c <__multiply+0x42>
 801e6d4:	f8b2 b000 	ldrh.w	fp, [r2]
 801e6d8:	f1bb 0f00 	cmp.w	fp, #0
 801e6dc:	d023      	beq.n	801e726 <__multiply+0xcc>
 801e6de:	4689      	mov	r9, r1
 801e6e0:	46ac      	mov	ip, r5
 801e6e2:	f04f 0800 	mov.w	r8, #0
 801e6e6:	f859 4b04 	ldr.w	r4, [r9], #4
 801e6ea:	f8dc a000 	ldr.w	sl, [ip]
 801e6ee:	b2a3      	uxth	r3, r4
 801e6f0:	fa1f fa8a 	uxth.w	sl, sl
 801e6f4:	fb0b a303 	mla	r3, fp, r3, sl
 801e6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e6fc:	f8dc 4000 	ldr.w	r4, [ip]
 801e700:	4443      	add	r3, r8
 801e702:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801e706:	fb0b 840a 	mla	r4, fp, sl, r8
 801e70a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801e70e:	46e2      	mov	sl, ip
 801e710:	b29b      	uxth	r3, r3
 801e712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801e716:	454f      	cmp	r7, r9
 801e718:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801e71c:	f84a 3b04 	str.w	r3, [sl], #4
 801e720:	d82b      	bhi.n	801e77a <__multiply+0x120>
 801e722:	f8cc 8004 	str.w	r8, [ip, #4]
 801e726:	9b01      	ldr	r3, [sp, #4]
 801e728:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801e72c:	3204      	adds	r2, #4
 801e72e:	f1ba 0f00 	cmp.w	sl, #0
 801e732:	d020      	beq.n	801e776 <__multiply+0x11c>
 801e734:	682b      	ldr	r3, [r5, #0]
 801e736:	4689      	mov	r9, r1
 801e738:	46a8      	mov	r8, r5
 801e73a:	f04f 0b00 	mov.w	fp, #0
 801e73e:	f8b9 c000 	ldrh.w	ip, [r9]
 801e742:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801e746:	fb0a 440c 	mla	r4, sl, ip, r4
 801e74a:	445c      	add	r4, fp
 801e74c:	46c4      	mov	ip, r8
 801e74e:	b29b      	uxth	r3, r3
 801e750:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801e754:	f84c 3b04 	str.w	r3, [ip], #4
 801e758:	f859 3b04 	ldr.w	r3, [r9], #4
 801e75c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801e760:	0c1b      	lsrs	r3, r3, #16
 801e762:	fb0a b303 	mla	r3, sl, r3, fp
 801e766:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801e76a:	454f      	cmp	r7, r9
 801e76c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801e770:	d805      	bhi.n	801e77e <__multiply+0x124>
 801e772:	f8c8 3004 	str.w	r3, [r8, #4]
 801e776:	3504      	adds	r5, #4
 801e778:	e79b      	b.n	801e6b2 <__multiply+0x58>
 801e77a:	46d4      	mov	ip, sl
 801e77c:	e7b3      	b.n	801e6e6 <__multiply+0x8c>
 801e77e:	46e0      	mov	r8, ip
 801e780:	e7dd      	b.n	801e73e <__multiply+0xe4>
 801e782:	3e01      	subs	r6, #1
 801e784:	e799      	b.n	801e6ba <__multiply+0x60>
	...

0801e788 <__pow5mult>:
 801e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e78c:	4615      	mov	r5, r2
 801e78e:	f012 0203 	ands.w	r2, r2, #3
 801e792:	4606      	mov	r6, r0
 801e794:	460f      	mov	r7, r1
 801e796:	d007      	beq.n	801e7a8 <__pow5mult+0x20>
 801e798:	3a01      	subs	r2, #1
 801e79a:	4c21      	ldr	r4, [pc, #132]	; (801e820 <__pow5mult+0x98>)
 801e79c:	2300      	movs	r3, #0
 801e79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e7a2:	f7ff fe8a 	bl	801e4ba <__multadd>
 801e7a6:	4607      	mov	r7, r0
 801e7a8:	10ad      	asrs	r5, r5, #2
 801e7aa:	d035      	beq.n	801e818 <__pow5mult+0x90>
 801e7ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e7ae:	b93c      	cbnz	r4, 801e7c0 <__pow5mult+0x38>
 801e7b0:	2010      	movs	r0, #16
 801e7b2:	f7fc feed 	bl	801b590 <malloc>
 801e7b6:	6270      	str	r0, [r6, #36]	; 0x24
 801e7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e7bc:	6004      	str	r4, [r0, #0]
 801e7be:	60c4      	str	r4, [r0, #12]
 801e7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e7c8:	b94c      	cbnz	r4, 801e7de <__pow5mult+0x56>
 801e7ca:	f240 2171 	movw	r1, #625	; 0x271
 801e7ce:	4630      	mov	r0, r6
 801e7d0:	f7ff ff3a 	bl	801e648 <__i2b>
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801e7da:	4604      	mov	r4, r0
 801e7dc:	6003      	str	r3, [r0, #0]
 801e7de:	f04f 0800 	mov.w	r8, #0
 801e7e2:	07eb      	lsls	r3, r5, #31
 801e7e4:	d50a      	bpl.n	801e7fc <__pow5mult+0x74>
 801e7e6:	4639      	mov	r1, r7
 801e7e8:	4622      	mov	r2, r4
 801e7ea:	4630      	mov	r0, r6
 801e7ec:	f7ff ff35 	bl	801e65a <__multiply>
 801e7f0:	4639      	mov	r1, r7
 801e7f2:	4681      	mov	r9, r0
 801e7f4:	4630      	mov	r0, r6
 801e7f6:	f7ff fe49 	bl	801e48c <_Bfree>
 801e7fa:	464f      	mov	r7, r9
 801e7fc:	106d      	asrs	r5, r5, #1
 801e7fe:	d00b      	beq.n	801e818 <__pow5mult+0x90>
 801e800:	6820      	ldr	r0, [r4, #0]
 801e802:	b938      	cbnz	r0, 801e814 <__pow5mult+0x8c>
 801e804:	4622      	mov	r2, r4
 801e806:	4621      	mov	r1, r4
 801e808:	4630      	mov	r0, r6
 801e80a:	f7ff ff26 	bl	801e65a <__multiply>
 801e80e:	6020      	str	r0, [r4, #0]
 801e810:	f8c0 8000 	str.w	r8, [r0]
 801e814:	4604      	mov	r4, r0
 801e816:	e7e4      	b.n	801e7e2 <__pow5mult+0x5a>
 801e818:	4638      	mov	r0, r7
 801e81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e81e:	bf00      	nop
 801e820:	08024c90 	.word	0x08024c90

0801e824 <__lshift>:
 801e824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e828:	460c      	mov	r4, r1
 801e82a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e82e:	6923      	ldr	r3, [r4, #16]
 801e830:	6849      	ldr	r1, [r1, #4]
 801e832:	eb0a 0903 	add.w	r9, sl, r3
 801e836:	68a3      	ldr	r3, [r4, #8]
 801e838:	4607      	mov	r7, r0
 801e83a:	4616      	mov	r6, r2
 801e83c:	f109 0501 	add.w	r5, r9, #1
 801e840:	42ab      	cmp	r3, r5
 801e842:	db32      	blt.n	801e8aa <__lshift+0x86>
 801e844:	4638      	mov	r0, r7
 801e846:	f7ff fded 	bl	801e424 <_Balloc>
 801e84a:	2300      	movs	r3, #0
 801e84c:	4680      	mov	r8, r0
 801e84e:	f100 0114 	add.w	r1, r0, #20
 801e852:	461a      	mov	r2, r3
 801e854:	4553      	cmp	r3, sl
 801e856:	db2b      	blt.n	801e8b0 <__lshift+0x8c>
 801e858:	6920      	ldr	r0, [r4, #16]
 801e85a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e85e:	f104 0314 	add.w	r3, r4, #20
 801e862:	f016 021f 	ands.w	r2, r6, #31
 801e866:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e86a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e86e:	d025      	beq.n	801e8bc <__lshift+0x98>
 801e870:	f1c2 0e20 	rsb	lr, r2, #32
 801e874:	2000      	movs	r0, #0
 801e876:	681e      	ldr	r6, [r3, #0]
 801e878:	468a      	mov	sl, r1
 801e87a:	4096      	lsls	r6, r2
 801e87c:	4330      	orrs	r0, r6
 801e87e:	f84a 0b04 	str.w	r0, [sl], #4
 801e882:	f853 0b04 	ldr.w	r0, [r3], #4
 801e886:	459c      	cmp	ip, r3
 801e888:	fa20 f00e 	lsr.w	r0, r0, lr
 801e88c:	d814      	bhi.n	801e8b8 <__lshift+0x94>
 801e88e:	6048      	str	r0, [r1, #4]
 801e890:	b108      	cbz	r0, 801e896 <__lshift+0x72>
 801e892:	f109 0502 	add.w	r5, r9, #2
 801e896:	3d01      	subs	r5, #1
 801e898:	4638      	mov	r0, r7
 801e89a:	f8c8 5010 	str.w	r5, [r8, #16]
 801e89e:	4621      	mov	r1, r4
 801e8a0:	f7ff fdf4 	bl	801e48c <_Bfree>
 801e8a4:	4640      	mov	r0, r8
 801e8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8aa:	3101      	adds	r1, #1
 801e8ac:	005b      	lsls	r3, r3, #1
 801e8ae:	e7c7      	b.n	801e840 <__lshift+0x1c>
 801e8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	e7cd      	b.n	801e854 <__lshift+0x30>
 801e8b8:	4651      	mov	r1, sl
 801e8ba:	e7dc      	b.n	801e876 <__lshift+0x52>
 801e8bc:	3904      	subs	r1, #4
 801e8be:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8c2:	f841 2f04 	str.w	r2, [r1, #4]!
 801e8c6:	459c      	cmp	ip, r3
 801e8c8:	d8f9      	bhi.n	801e8be <__lshift+0x9a>
 801e8ca:	e7e4      	b.n	801e896 <__lshift+0x72>

0801e8cc <__mcmp>:
 801e8cc:	6903      	ldr	r3, [r0, #16]
 801e8ce:	690a      	ldr	r2, [r1, #16]
 801e8d0:	1a9b      	subs	r3, r3, r2
 801e8d2:	b530      	push	{r4, r5, lr}
 801e8d4:	d10c      	bne.n	801e8f0 <__mcmp+0x24>
 801e8d6:	0092      	lsls	r2, r2, #2
 801e8d8:	3014      	adds	r0, #20
 801e8da:	3114      	adds	r1, #20
 801e8dc:	1884      	adds	r4, r0, r2
 801e8de:	4411      	add	r1, r2
 801e8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e8e8:	4295      	cmp	r5, r2
 801e8ea:	d003      	beq.n	801e8f4 <__mcmp+0x28>
 801e8ec:	d305      	bcc.n	801e8fa <__mcmp+0x2e>
 801e8ee:	2301      	movs	r3, #1
 801e8f0:	4618      	mov	r0, r3
 801e8f2:	bd30      	pop	{r4, r5, pc}
 801e8f4:	42a0      	cmp	r0, r4
 801e8f6:	d3f3      	bcc.n	801e8e0 <__mcmp+0x14>
 801e8f8:	e7fa      	b.n	801e8f0 <__mcmp+0x24>
 801e8fa:	f04f 33ff 	mov.w	r3, #4294967295
 801e8fe:	e7f7      	b.n	801e8f0 <__mcmp+0x24>

0801e900 <__mdiff>:
 801e900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e904:	460d      	mov	r5, r1
 801e906:	4607      	mov	r7, r0
 801e908:	4611      	mov	r1, r2
 801e90a:	4628      	mov	r0, r5
 801e90c:	4614      	mov	r4, r2
 801e90e:	f7ff ffdd 	bl	801e8cc <__mcmp>
 801e912:	1e06      	subs	r6, r0, #0
 801e914:	d108      	bne.n	801e928 <__mdiff+0x28>
 801e916:	4631      	mov	r1, r6
 801e918:	4638      	mov	r0, r7
 801e91a:	f7ff fd83 	bl	801e424 <_Balloc>
 801e91e:	2301      	movs	r3, #1
 801e920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e928:	bfa4      	itt	ge
 801e92a:	4623      	movge	r3, r4
 801e92c:	462c      	movge	r4, r5
 801e92e:	4638      	mov	r0, r7
 801e930:	6861      	ldr	r1, [r4, #4]
 801e932:	bfa6      	itte	ge
 801e934:	461d      	movge	r5, r3
 801e936:	2600      	movge	r6, #0
 801e938:	2601      	movlt	r6, #1
 801e93a:	f7ff fd73 	bl	801e424 <_Balloc>
 801e93e:	692b      	ldr	r3, [r5, #16]
 801e940:	60c6      	str	r6, [r0, #12]
 801e942:	6926      	ldr	r6, [r4, #16]
 801e944:	f105 0914 	add.w	r9, r5, #20
 801e948:	f104 0214 	add.w	r2, r4, #20
 801e94c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801e950:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801e954:	f100 0514 	add.w	r5, r0, #20
 801e958:	f04f 0e00 	mov.w	lr, #0
 801e95c:	f852 ab04 	ldr.w	sl, [r2], #4
 801e960:	f859 4b04 	ldr.w	r4, [r9], #4
 801e964:	fa1e f18a 	uxtah	r1, lr, sl
 801e968:	b2a3      	uxth	r3, r4
 801e96a:	1ac9      	subs	r1, r1, r3
 801e96c:	0c23      	lsrs	r3, r4, #16
 801e96e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801e972:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801e976:	b289      	uxth	r1, r1
 801e978:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801e97c:	45c8      	cmp	r8, r9
 801e97e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801e982:	4694      	mov	ip, r2
 801e984:	f845 3b04 	str.w	r3, [r5], #4
 801e988:	d8e8      	bhi.n	801e95c <__mdiff+0x5c>
 801e98a:	45bc      	cmp	ip, r7
 801e98c:	d304      	bcc.n	801e998 <__mdiff+0x98>
 801e98e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801e992:	b183      	cbz	r3, 801e9b6 <__mdiff+0xb6>
 801e994:	6106      	str	r6, [r0, #16]
 801e996:	e7c5      	b.n	801e924 <__mdiff+0x24>
 801e998:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e99c:	fa1e f381 	uxtah	r3, lr, r1
 801e9a0:	141a      	asrs	r2, r3, #16
 801e9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e9a6:	b29b      	uxth	r3, r3
 801e9a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e9ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801e9b0:	f845 3b04 	str.w	r3, [r5], #4
 801e9b4:	e7e9      	b.n	801e98a <__mdiff+0x8a>
 801e9b6:	3e01      	subs	r6, #1
 801e9b8:	e7e9      	b.n	801e98e <__mdiff+0x8e>
	...

0801e9bc <__ulp>:
 801e9bc:	4b12      	ldr	r3, [pc, #72]	; (801ea08 <__ulp+0x4c>)
 801e9be:	ee10 2a90 	vmov	r2, s1
 801e9c2:	401a      	ands	r2, r3
 801e9c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	dd04      	ble.n	801e9d6 <__ulp+0x1a>
 801e9cc:	2000      	movs	r0, #0
 801e9ce:	4619      	mov	r1, r3
 801e9d0:	ec41 0b10 	vmov	d0, r0, r1
 801e9d4:	4770      	bx	lr
 801e9d6:	425b      	negs	r3, r3
 801e9d8:	151b      	asrs	r3, r3, #20
 801e9da:	2b13      	cmp	r3, #19
 801e9dc:	f04f 0000 	mov.w	r0, #0
 801e9e0:	f04f 0100 	mov.w	r1, #0
 801e9e4:	dc04      	bgt.n	801e9f0 <__ulp+0x34>
 801e9e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801e9ea:	fa42 f103 	asr.w	r1, r2, r3
 801e9ee:	e7ef      	b.n	801e9d0 <__ulp+0x14>
 801e9f0:	3b14      	subs	r3, #20
 801e9f2:	2b1e      	cmp	r3, #30
 801e9f4:	f04f 0201 	mov.w	r2, #1
 801e9f8:	bfda      	itte	le
 801e9fa:	f1c3 031f 	rsble	r3, r3, #31
 801e9fe:	fa02 f303 	lslle.w	r3, r2, r3
 801ea02:	4613      	movgt	r3, r2
 801ea04:	4618      	mov	r0, r3
 801ea06:	e7e3      	b.n	801e9d0 <__ulp+0x14>
 801ea08:	7ff00000 	.word	0x7ff00000

0801ea0c <__b2d>:
 801ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea0e:	6905      	ldr	r5, [r0, #16]
 801ea10:	f100 0714 	add.w	r7, r0, #20
 801ea14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ea18:	1f2e      	subs	r6, r5, #4
 801ea1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ea1e:	4620      	mov	r0, r4
 801ea20:	f7ff fdc4 	bl	801e5ac <__hi0bits>
 801ea24:	f1c0 0320 	rsb	r3, r0, #32
 801ea28:	280a      	cmp	r0, #10
 801ea2a:	600b      	str	r3, [r1, #0]
 801ea2c:	f8df c074 	ldr.w	ip, [pc, #116]	; 801eaa4 <__b2d+0x98>
 801ea30:	dc14      	bgt.n	801ea5c <__b2d+0x50>
 801ea32:	f1c0 0e0b 	rsb	lr, r0, #11
 801ea36:	fa24 f10e 	lsr.w	r1, r4, lr
 801ea3a:	42b7      	cmp	r7, r6
 801ea3c:	ea41 030c 	orr.w	r3, r1, ip
 801ea40:	bf34      	ite	cc
 801ea42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ea46:	2100      	movcs	r1, #0
 801ea48:	3015      	adds	r0, #21
 801ea4a:	fa04 f000 	lsl.w	r0, r4, r0
 801ea4e:	fa21 f10e 	lsr.w	r1, r1, lr
 801ea52:	ea40 0201 	orr.w	r2, r0, r1
 801ea56:	ec43 2b10 	vmov	d0, r2, r3
 801ea5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea5c:	42b7      	cmp	r7, r6
 801ea5e:	bf3a      	itte	cc
 801ea60:	f1a5 0608 	subcc.w	r6, r5, #8
 801ea64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ea68:	2100      	movcs	r1, #0
 801ea6a:	380b      	subs	r0, #11
 801ea6c:	d015      	beq.n	801ea9a <__b2d+0x8e>
 801ea6e:	4084      	lsls	r4, r0
 801ea70:	f1c0 0520 	rsb	r5, r0, #32
 801ea74:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801ea78:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801ea7c:	42be      	cmp	r6, r7
 801ea7e:	fa21 fc05 	lsr.w	ip, r1, r5
 801ea82:	ea44 030c 	orr.w	r3, r4, ip
 801ea86:	bf8c      	ite	hi
 801ea88:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ea8c:	2400      	movls	r4, #0
 801ea8e:	fa01 f000 	lsl.w	r0, r1, r0
 801ea92:	40ec      	lsrs	r4, r5
 801ea94:	ea40 0204 	orr.w	r2, r0, r4
 801ea98:	e7dd      	b.n	801ea56 <__b2d+0x4a>
 801ea9a:	ea44 030c 	orr.w	r3, r4, ip
 801ea9e:	460a      	mov	r2, r1
 801eaa0:	e7d9      	b.n	801ea56 <__b2d+0x4a>
 801eaa2:	bf00      	nop
 801eaa4:	3ff00000 	.word	0x3ff00000

0801eaa8 <__d2b>:
 801eaa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eaac:	460e      	mov	r6, r1
 801eaae:	2101      	movs	r1, #1
 801eab0:	ec59 8b10 	vmov	r8, r9, d0
 801eab4:	4615      	mov	r5, r2
 801eab6:	f7ff fcb5 	bl	801e424 <_Balloc>
 801eaba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801eabe:	4607      	mov	r7, r0
 801eac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eac4:	bb34      	cbnz	r4, 801eb14 <__d2b+0x6c>
 801eac6:	9301      	str	r3, [sp, #4]
 801eac8:	f1b8 0300 	subs.w	r3, r8, #0
 801eacc:	d027      	beq.n	801eb1e <__d2b+0x76>
 801eace:	a802      	add	r0, sp, #8
 801ead0:	f840 3d08 	str.w	r3, [r0, #-8]!
 801ead4:	f7ff fd89 	bl	801e5ea <__lo0bits>
 801ead8:	9900      	ldr	r1, [sp, #0]
 801eada:	b1f0      	cbz	r0, 801eb1a <__d2b+0x72>
 801eadc:	9a01      	ldr	r2, [sp, #4]
 801eade:	f1c0 0320 	rsb	r3, r0, #32
 801eae2:	fa02 f303 	lsl.w	r3, r2, r3
 801eae6:	430b      	orrs	r3, r1
 801eae8:	40c2      	lsrs	r2, r0
 801eaea:	617b      	str	r3, [r7, #20]
 801eaec:	9201      	str	r2, [sp, #4]
 801eaee:	9b01      	ldr	r3, [sp, #4]
 801eaf0:	61bb      	str	r3, [r7, #24]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	bf14      	ite	ne
 801eaf6:	2102      	movne	r1, #2
 801eaf8:	2101      	moveq	r1, #1
 801eafa:	6139      	str	r1, [r7, #16]
 801eafc:	b1c4      	cbz	r4, 801eb30 <__d2b+0x88>
 801eafe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801eb02:	4404      	add	r4, r0
 801eb04:	6034      	str	r4, [r6, #0]
 801eb06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801eb0a:	6028      	str	r0, [r5, #0]
 801eb0c:	4638      	mov	r0, r7
 801eb0e:	b003      	add	sp, #12
 801eb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801eb18:	e7d5      	b.n	801eac6 <__d2b+0x1e>
 801eb1a:	6179      	str	r1, [r7, #20]
 801eb1c:	e7e7      	b.n	801eaee <__d2b+0x46>
 801eb1e:	a801      	add	r0, sp, #4
 801eb20:	f7ff fd63 	bl	801e5ea <__lo0bits>
 801eb24:	9b01      	ldr	r3, [sp, #4]
 801eb26:	617b      	str	r3, [r7, #20]
 801eb28:	2101      	movs	r1, #1
 801eb2a:	6139      	str	r1, [r7, #16]
 801eb2c:	3020      	adds	r0, #32
 801eb2e:	e7e5      	b.n	801eafc <__d2b+0x54>
 801eb30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801eb34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801eb38:	6030      	str	r0, [r6, #0]
 801eb3a:	6918      	ldr	r0, [r3, #16]
 801eb3c:	f7ff fd36 	bl	801e5ac <__hi0bits>
 801eb40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801eb44:	e7e1      	b.n	801eb0a <__d2b+0x62>

0801eb46 <__ratio>:
 801eb46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb4a:	4688      	mov	r8, r1
 801eb4c:	4669      	mov	r1, sp
 801eb4e:	4681      	mov	r9, r0
 801eb50:	f7ff ff5c 	bl	801ea0c <__b2d>
 801eb54:	a901      	add	r1, sp, #4
 801eb56:	4640      	mov	r0, r8
 801eb58:	ec57 6b10 	vmov	r6, r7, d0
 801eb5c:	f7ff ff56 	bl	801ea0c <__b2d>
 801eb60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801eb64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801eb68:	eba3 0c02 	sub.w	ip, r3, r2
 801eb6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801eb70:	1a9b      	subs	r3, r3, r2
 801eb72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801eb76:	ec5b ab10 	vmov	sl, fp, d0
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	bfce      	itee	gt
 801eb7e:	463a      	movgt	r2, r7
 801eb80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801eb84:	465a      	movle	r2, fp
 801eb86:	4659      	mov	r1, fp
 801eb88:	463d      	mov	r5, r7
 801eb8a:	bfd4      	ite	le
 801eb8c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801eb90:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801eb94:	4630      	mov	r0, r6
 801eb96:	ee10 2a10 	vmov	r2, s0
 801eb9a:	460b      	mov	r3, r1
 801eb9c:	4629      	mov	r1, r5
 801eb9e:	f7e1 fe65 	bl	800086c <__aeabi_ddiv>
 801eba2:	ec41 0b10 	vmov	d0, r0, r1
 801eba6:	b003      	add	sp, #12
 801eba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebac <__copybits>:
 801ebac:	3901      	subs	r1, #1
 801ebae:	b510      	push	{r4, lr}
 801ebb0:	1149      	asrs	r1, r1, #5
 801ebb2:	6914      	ldr	r4, [r2, #16]
 801ebb4:	3101      	adds	r1, #1
 801ebb6:	f102 0314 	add.w	r3, r2, #20
 801ebba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ebbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ebc2:	42a3      	cmp	r3, r4
 801ebc4:	4602      	mov	r2, r0
 801ebc6:	d303      	bcc.n	801ebd0 <__copybits+0x24>
 801ebc8:	2300      	movs	r3, #0
 801ebca:	428a      	cmp	r2, r1
 801ebcc:	d305      	bcc.n	801ebda <__copybits+0x2e>
 801ebce:	bd10      	pop	{r4, pc}
 801ebd0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ebd4:	f840 2b04 	str.w	r2, [r0], #4
 801ebd8:	e7f3      	b.n	801ebc2 <__copybits+0x16>
 801ebda:	f842 3b04 	str.w	r3, [r2], #4
 801ebde:	e7f4      	b.n	801ebca <__copybits+0x1e>

0801ebe0 <__any_on>:
 801ebe0:	f100 0214 	add.w	r2, r0, #20
 801ebe4:	6900      	ldr	r0, [r0, #16]
 801ebe6:	114b      	asrs	r3, r1, #5
 801ebe8:	4298      	cmp	r0, r3
 801ebea:	b510      	push	{r4, lr}
 801ebec:	db11      	blt.n	801ec12 <__any_on+0x32>
 801ebee:	dd0a      	ble.n	801ec06 <__any_on+0x26>
 801ebf0:	f011 011f 	ands.w	r1, r1, #31
 801ebf4:	d007      	beq.n	801ec06 <__any_on+0x26>
 801ebf6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ebfa:	fa24 f001 	lsr.w	r0, r4, r1
 801ebfe:	fa00 f101 	lsl.w	r1, r0, r1
 801ec02:	428c      	cmp	r4, r1
 801ec04:	d10b      	bne.n	801ec1e <__any_on+0x3e>
 801ec06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ec0a:	4293      	cmp	r3, r2
 801ec0c:	d803      	bhi.n	801ec16 <__any_on+0x36>
 801ec0e:	2000      	movs	r0, #0
 801ec10:	bd10      	pop	{r4, pc}
 801ec12:	4603      	mov	r3, r0
 801ec14:	e7f7      	b.n	801ec06 <__any_on+0x26>
 801ec16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ec1a:	2900      	cmp	r1, #0
 801ec1c:	d0f5      	beq.n	801ec0a <__any_on+0x2a>
 801ec1e:	2001      	movs	r0, #1
 801ec20:	e7f6      	b.n	801ec10 <__any_on+0x30>

0801ec22 <_calloc_r>:
 801ec22:	b538      	push	{r3, r4, r5, lr}
 801ec24:	fb02 f401 	mul.w	r4, r2, r1
 801ec28:	4621      	mov	r1, r4
 801ec2a:	f7fc fd5d 	bl	801b6e8 <_malloc_r>
 801ec2e:	4605      	mov	r5, r0
 801ec30:	b118      	cbz	r0, 801ec3a <_calloc_r+0x18>
 801ec32:	4622      	mov	r2, r4
 801ec34:	2100      	movs	r1, #0
 801ec36:	f7fc fd00 	bl	801b63a <memset>
 801ec3a:	4628      	mov	r0, r5
 801ec3c:	bd38      	pop	{r3, r4, r5, pc}

0801ec3e <__ssputs_r>:
 801ec3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec42:	688e      	ldr	r6, [r1, #8]
 801ec44:	429e      	cmp	r6, r3
 801ec46:	4682      	mov	sl, r0
 801ec48:	460c      	mov	r4, r1
 801ec4a:	4690      	mov	r8, r2
 801ec4c:	4699      	mov	r9, r3
 801ec4e:	d837      	bhi.n	801ecc0 <__ssputs_r+0x82>
 801ec50:	898a      	ldrh	r2, [r1, #12]
 801ec52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ec56:	d031      	beq.n	801ecbc <__ssputs_r+0x7e>
 801ec58:	6825      	ldr	r5, [r4, #0]
 801ec5a:	6909      	ldr	r1, [r1, #16]
 801ec5c:	1a6f      	subs	r7, r5, r1
 801ec5e:	6965      	ldr	r5, [r4, #20]
 801ec60:	2302      	movs	r3, #2
 801ec62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec66:	fb95 f5f3 	sdiv	r5, r5, r3
 801ec6a:	f109 0301 	add.w	r3, r9, #1
 801ec6e:	443b      	add	r3, r7
 801ec70:	429d      	cmp	r5, r3
 801ec72:	bf38      	it	cc
 801ec74:	461d      	movcc	r5, r3
 801ec76:	0553      	lsls	r3, r2, #21
 801ec78:	d530      	bpl.n	801ecdc <__ssputs_r+0x9e>
 801ec7a:	4629      	mov	r1, r5
 801ec7c:	f7fc fd34 	bl	801b6e8 <_malloc_r>
 801ec80:	4606      	mov	r6, r0
 801ec82:	b950      	cbnz	r0, 801ec9a <__ssputs_r+0x5c>
 801ec84:	230c      	movs	r3, #12
 801ec86:	f8ca 3000 	str.w	r3, [sl]
 801ec8a:	89a3      	ldrh	r3, [r4, #12]
 801ec8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec90:	81a3      	strh	r3, [r4, #12]
 801ec92:	f04f 30ff 	mov.w	r0, #4294967295
 801ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec9a:	463a      	mov	r2, r7
 801ec9c:	6921      	ldr	r1, [r4, #16]
 801ec9e:	f7fc fca8 	bl	801b5f2 <memcpy>
 801eca2:	89a3      	ldrh	r3, [r4, #12]
 801eca4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801eca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecac:	81a3      	strh	r3, [r4, #12]
 801ecae:	6126      	str	r6, [r4, #16]
 801ecb0:	6165      	str	r5, [r4, #20]
 801ecb2:	443e      	add	r6, r7
 801ecb4:	1bed      	subs	r5, r5, r7
 801ecb6:	6026      	str	r6, [r4, #0]
 801ecb8:	60a5      	str	r5, [r4, #8]
 801ecba:	464e      	mov	r6, r9
 801ecbc:	454e      	cmp	r6, r9
 801ecbe:	d900      	bls.n	801ecc2 <__ssputs_r+0x84>
 801ecc0:	464e      	mov	r6, r9
 801ecc2:	4632      	mov	r2, r6
 801ecc4:	4641      	mov	r1, r8
 801ecc6:	6820      	ldr	r0, [r4, #0]
 801ecc8:	f7fc fc9e 	bl	801b608 <memmove>
 801eccc:	68a3      	ldr	r3, [r4, #8]
 801ecce:	1b9b      	subs	r3, r3, r6
 801ecd0:	60a3      	str	r3, [r4, #8]
 801ecd2:	6823      	ldr	r3, [r4, #0]
 801ecd4:	441e      	add	r6, r3
 801ecd6:	6026      	str	r6, [r4, #0]
 801ecd8:	2000      	movs	r0, #0
 801ecda:	e7dc      	b.n	801ec96 <__ssputs_r+0x58>
 801ecdc:	462a      	mov	r2, r5
 801ecde:	f000 fc8d 	bl	801f5fc <_realloc_r>
 801ece2:	4606      	mov	r6, r0
 801ece4:	2800      	cmp	r0, #0
 801ece6:	d1e2      	bne.n	801ecae <__ssputs_r+0x70>
 801ece8:	6921      	ldr	r1, [r4, #16]
 801ecea:	4650      	mov	r0, sl
 801ecec:	f7fc fcae 	bl	801b64c <_free_r>
 801ecf0:	e7c8      	b.n	801ec84 <__ssputs_r+0x46>
	...

0801ecf4 <_svfiprintf_r>:
 801ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf8:	461d      	mov	r5, r3
 801ecfa:	898b      	ldrh	r3, [r1, #12]
 801ecfc:	061f      	lsls	r7, r3, #24
 801ecfe:	b09d      	sub	sp, #116	; 0x74
 801ed00:	4680      	mov	r8, r0
 801ed02:	460c      	mov	r4, r1
 801ed04:	4616      	mov	r6, r2
 801ed06:	d50f      	bpl.n	801ed28 <_svfiprintf_r+0x34>
 801ed08:	690b      	ldr	r3, [r1, #16]
 801ed0a:	b96b      	cbnz	r3, 801ed28 <_svfiprintf_r+0x34>
 801ed0c:	2140      	movs	r1, #64	; 0x40
 801ed0e:	f7fc fceb 	bl	801b6e8 <_malloc_r>
 801ed12:	6020      	str	r0, [r4, #0]
 801ed14:	6120      	str	r0, [r4, #16]
 801ed16:	b928      	cbnz	r0, 801ed24 <_svfiprintf_r+0x30>
 801ed18:	230c      	movs	r3, #12
 801ed1a:	f8c8 3000 	str.w	r3, [r8]
 801ed1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed22:	e0c8      	b.n	801eeb6 <_svfiprintf_r+0x1c2>
 801ed24:	2340      	movs	r3, #64	; 0x40
 801ed26:	6163      	str	r3, [r4, #20]
 801ed28:	2300      	movs	r3, #0
 801ed2a:	9309      	str	r3, [sp, #36]	; 0x24
 801ed2c:	2320      	movs	r3, #32
 801ed2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ed32:	2330      	movs	r3, #48	; 0x30
 801ed34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ed38:	9503      	str	r5, [sp, #12]
 801ed3a:	f04f 0b01 	mov.w	fp, #1
 801ed3e:	4637      	mov	r7, r6
 801ed40:	463d      	mov	r5, r7
 801ed42:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ed46:	b10b      	cbz	r3, 801ed4c <_svfiprintf_r+0x58>
 801ed48:	2b25      	cmp	r3, #37	; 0x25
 801ed4a:	d13e      	bne.n	801edca <_svfiprintf_r+0xd6>
 801ed4c:	ebb7 0a06 	subs.w	sl, r7, r6
 801ed50:	d00b      	beq.n	801ed6a <_svfiprintf_r+0x76>
 801ed52:	4653      	mov	r3, sl
 801ed54:	4632      	mov	r2, r6
 801ed56:	4621      	mov	r1, r4
 801ed58:	4640      	mov	r0, r8
 801ed5a:	f7ff ff70 	bl	801ec3e <__ssputs_r>
 801ed5e:	3001      	adds	r0, #1
 801ed60:	f000 80a4 	beq.w	801eeac <_svfiprintf_r+0x1b8>
 801ed64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed66:	4453      	add	r3, sl
 801ed68:	9309      	str	r3, [sp, #36]	; 0x24
 801ed6a:	783b      	ldrb	r3, [r7, #0]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	f000 809d 	beq.w	801eeac <_svfiprintf_r+0x1b8>
 801ed72:	2300      	movs	r3, #0
 801ed74:	f04f 32ff 	mov.w	r2, #4294967295
 801ed78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed7c:	9304      	str	r3, [sp, #16]
 801ed7e:	9307      	str	r3, [sp, #28]
 801ed80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed84:	931a      	str	r3, [sp, #104]	; 0x68
 801ed86:	462f      	mov	r7, r5
 801ed88:	2205      	movs	r2, #5
 801ed8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ed8e:	4850      	ldr	r0, [pc, #320]	; (801eed0 <_svfiprintf_r+0x1dc>)
 801ed90:	f7e1 fa36 	bl	8000200 <memchr>
 801ed94:	9b04      	ldr	r3, [sp, #16]
 801ed96:	b9d0      	cbnz	r0, 801edce <_svfiprintf_r+0xda>
 801ed98:	06d9      	lsls	r1, r3, #27
 801ed9a:	bf44      	itt	mi
 801ed9c:	2220      	movmi	r2, #32
 801ed9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801eda2:	071a      	lsls	r2, r3, #28
 801eda4:	bf44      	itt	mi
 801eda6:	222b      	movmi	r2, #43	; 0x2b
 801eda8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801edac:	782a      	ldrb	r2, [r5, #0]
 801edae:	2a2a      	cmp	r2, #42	; 0x2a
 801edb0:	d015      	beq.n	801edde <_svfiprintf_r+0xea>
 801edb2:	9a07      	ldr	r2, [sp, #28]
 801edb4:	462f      	mov	r7, r5
 801edb6:	2000      	movs	r0, #0
 801edb8:	250a      	movs	r5, #10
 801edba:	4639      	mov	r1, r7
 801edbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801edc0:	3b30      	subs	r3, #48	; 0x30
 801edc2:	2b09      	cmp	r3, #9
 801edc4:	d94d      	bls.n	801ee62 <_svfiprintf_r+0x16e>
 801edc6:	b1b8      	cbz	r0, 801edf8 <_svfiprintf_r+0x104>
 801edc8:	e00f      	b.n	801edea <_svfiprintf_r+0xf6>
 801edca:	462f      	mov	r7, r5
 801edcc:	e7b8      	b.n	801ed40 <_svfiprintf_r+0x4c>
 801edce:	4a40      	ldr	r2, [pc, #256]	; (801eed0 <_svfiprintf_r+0x1dc>)
 801edd0:	1a80      	subs	r0, r0, r2
 801edd2:	fa0b f000 	lsl.w	r0, fp, r0
 801edd6:	4318      	orrs	r0, r3
 801edd8:	9004      	str	r0, [sp, #16]
 801edda:	463d      	mov	r5, r7
 801eddc:	e7d3      	b.n	801ed86 <_svfiprintf_r+0x92>
 801edde:	9a03      	ldr	r2, [sp, #12]
 801ede0:	1d11      	adds	r1, r2, #4
 801ede2:	6812      	ldr	r2, [r2, #0]
 801ede4:	9103      	str	r1, [sp, #12]
 801ede6:	2a00      	cmp	r2, #0
 801ede8:	db01      	blt.n	801edee <_svfiprintf_r+0xfa>
 801edea:	9207      	str	r2, [sp, #28]
 801edec:	e004      	b.n	801edf8 <_svfiprintf_r+0x104>
 801edee:	4252      	negs	r2, r2
 801edf0:	f043 0302 	orr.w	r3, r3, #2
 801edf4:	9207      	str	r2, [sp, #28]
 801edf6:	9304      	str	r3, [sp, #16]
 801edf8:	783b      	ldrb	r3, [r7, #0]
 801edfa:	2b2e      	cmp	r3, #46	; 0x2e
 801edfc:	d10c      	bne.n	801ee18 <_svfiprintf_r+0x124>
 801edfe:	787b      	ldrb	r3, [r7, #1]
 801ee00:	2b2a      	cmp	r3, #42	; 0x2a
 801ee02:	d133      	bne.n	801ee6c <_svfiprintf_r+0x178>
 801ee04:	9b03      	ldr	r3, [sp, #12]
 801ee06:	1d1a      	adds	r2, r3, #4
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	9203      	str	r2, [sp, #12]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	bfb8      	it	lt
 801ee10:	f04f 33ff 	movlt.w	r3, #4294967295
 801ee14:	3702      	adds	r7, #2
 801ee16:	9305      	str	r3, [sp, #20]
 801ee18:	4d2e      	ldr	r5, [pc, #184]	; (801eed4 <_svfiprintf_r+0x1e0>)
 801ee1a:	7839      	ldrb	r1, [r7, #0]
 801ee1c:	2203      	movs	r2, #3
 801ee1e:	4628      	mov	r0, r5
 801ee20:	f7e1 f9ee 	bl	8000200 <memchr>
 801ee24:	b138      	cbz	r0, 801ee36 <_svfiprintf_r+0x142>
 801ee26:	2340      	movs	r3, #64	; 0x40
 801ee28:	1b40      	subs	r0, r0, r5
 801ee2a:	fa03 f000 	lsl.w	r0, r3, r0
 801ee2e:	9b04      	ldr	r3, [sp, #16]
 801ee30:	4303      	orrs	r3, r0
 801ee32:	3701      	adds	r7, #1
 801ee34:	9304      	str	r3, [sp, #16]
 801ee36:	7839      	ldrb	r1, [r7, #0]
 801ee38:	4827      	ldr	r0, [pc, #156]	; (801eed8 <_svfiprintf_r+0x1e4>)
 801ee3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ee3e:	2206      	movs	r2, #6
 801ee40:	1c7e      	adds	r6, r7, #1
 801ee42:	f7e1 f9dd 	bl	8000200 <memchr>
 801ee46:	2800      	cmp	r0, #0
 801ee48:	d038      	beq.n	801eebc <_svfiprintf_r+0x1c8>
 801ee4a:	4b24      	ldr	r3, [pc, #144]	; (801eedc <_svfiprintf_r+0x1e8>)
 801ee4c:	bb13      	cbnz	r3, 801ee94 <_svfiprintf_r+0x1a0>
 801ee4e:	9b03      	ldr	r3, [sp, #12]
 801ee50:	3307      	adds	r3, #7
 801ee52:	f023 0307 	bic.w	r3, r3, #7
 801ee56:	3308      	adds	r3, #8
 801ee58:	9303      	str	r3, [sp, #12]
 801ee5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee5c:	444b      	add	r3, r9
 801ee5e:	9309      	str	r3, [sp, #36]	; 0x24
 801ee60:	e76d      	b.n	801ed3e <_svfiprintf_r+0x4a>
 801ee62:	fb05 3202 	mla	r2, r5, r2, r3
 801ee66:	2001      	movs	r0, #1
 801ee68:	460f      	mov	r7, r1
 801ee6a:	e7a6      	b.n	801edba <_svfiprintf_r+0xc6>
 801ee6c:	2300      	movs	r3, #0
 801ee6e:	3701      	adds	r7, #1
 801ee70:	9305      	str	r3, [sp, #20]
 801ee72:	4619      	mov	r1, r3
 801ee74:	250a      	movs	r5, #10
 801ee76:	4638      	mov	r0, r7
 801ee78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee7c:	3a30      	subs	r2, #48	; 0x30
 801ee7e:	2a09      	cmp	r2, #9
 801ee80:	d903      	bls.n	801ee8a <_svfiprintf_r+0x196>
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d0c8      	beq.n	801ee18 <_svfiprintf_r+0x124>
 801ee86:	9105      	str	r1, [sp, #20]
 801ee88:	e7c6      	b.n	801ee18 <_svfiprintf_r+0x124>
 801ee8a:	fb05 2101 	mla	r1, r5, r1, r2
 801ee8e:	2301      	movs	r3, #1
 801ee90:	4607      	mov	r7, r0
 801ee92:	e7f0      	b.n	801ee76 <_svfiprintf_r+0x182>
 801ee94:	ab03      	add	r3, sp, #12
 801ee96:	9300      	str	r3, [sp, #0]
 801ee98:	4622      	mov	r2, r4
 801ee9a:	4b11      	ldr	r3, [pc, #68]	; (801eee0 <_svfiprintf_r+0x1ec>)
 801ee9c:	a904      	add	r1, sp, #16
 801ee9e:	4640      	mov	r0, r8
 801eea0:	f7fc fd10 	bl	801b8c4 <_printf_float>
 801eea4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801eea8:	4681      	mov	r9, r0
 801eeaa:	d1d6      	bne.n	801ee5a <_svfiprintf_r+0x166>
 801eeac:	89a3      	ldrh	r3, [r4, #12]
 801eeae:	065b      	lsls	r3, r3, #25
 801eeb0:	f53f af35 	bmi.w	801ed1e <_svfiprintf_r+0x2a>
 801eeb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eeb6:	b01d      	add	sp, #116	; 0x74
 801eeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eebc:	ab03      	add	r3, sp, #12
 801eebe:	9300      	str	r3, [sp, #0]
 801eec0:	4622      	mov	r2, r4
 801eec2:	4b07      	ldr	r3, [pc, #28]	; (801eee0 <_svfiprintf_r+0x1ec>)
 801eec4:	a904      	add	r1, sp, #16
 801eec6:	4640      	mov	r0, r8
 801eec8:	f7fc ffb2 	bl	801be30 <_printf_i>
 801eecc:	e7ea      	b.n	801eea4 <_svfiprintf_r+0x1b0>
 801eece:	bf00      	nop
 801eed0:	08024c9c 	.word	0x08024c9c
 801eed4:	08024ca2 	.word	0x08024ca2
 801eed8:	08024ca6 	.word	0x08024ca6
 801eedc:	0801b8c5 	.word	0x0801b8c5
 801eee0:	0801ec3f 	.word	0x0801ec3f

0801eee4 <__sfputc_r>:
 801eee4:	6893      	ldr	r3, [r2, #8]
 801eee6:	3b01      	subs	r3, #1
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	b410      	push	{r4}
 801eeec:	6093      	str	r3, [r2, #8]
 801eeee:	da08      	bge.n	801ef02 <__sfputc_r+0x1e>
 801eef0:	6994      	ldr	r4, [r2, #24]
 801eef2:	42a3      	cmp	r3, r4
 801eef4:	db01      	blt.n	801eefa <__sfputc_r+0x16>
 801eef6:	290a      	cmp	r1, #10
 801eef8:	d103      	bne.n	801ef02 <__sfputc_r+0x1e>
 801eefa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eefe:	f000 b975 	b.w	801f1ec <__swbuf_r>
 801ef02:	6813      	ldr	r3, [r2, #0]
 801ef04:	1c58      	adds	r0, r3, #1
 801ef06:	6010      	str	r0, [r2, #0]
 801ef08:	7019      	strb	r1, [r3, #0]
 801ef0a:	4608      	mov	r0, r1
 801ef0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef10:	4770      	bx	lr

0801ef12 <__sfputs_r>:
 801ef12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef14:	4606      	mov	r6, r0
 801ef16:	460f      	mov	r7, r1
 801ef18:	4614      	mov	r4, r2
 801ef1a:	18d5      	adds	r5, r2, r3
 801ef1c:	42ac      	cmp	r4, r5
 801ef1e:	d101      	bne.n	801ef24 <__sfputs_r+0x12>
 801ef20:	2000      	movs	r0, #0
 801ef22:	e007      	b.n	801ef34 <__sfputs_r+0x22>
 801ef24:	463a      	mov	r2, r7
 801ef26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef2a:	4630      	mov	r0, r6
 801ef2c:	f7ff ffda 	bl	801eee4 <__sfputc_r>
 801ef30:	1c43      	adds	r3, r0, #1
 801ef32:	d1f3      	bne.n	801ef1c <__sfputs_r+0xa>
 801ef34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ef38 <_vfiprintf_r>:
 801ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef3c:	460c      	mov	r4, r1
 801ef3e:	b09d      	sub	sp, #116	; 0x74
 801ef40:	4617      	mov	r7, r2
 801ef42:	461d      	mov	r5, r3
 801ef44:	4606      	mov	r6, r0
 801ef46:	b118      	cbz	r0, 801ef50 <_vfiprintf_r+0x18>
 801ef48:	6983      	ldr	r3, [r0, #24]
 801ef4a:	b90b      	cbnz	r3, 801ef50 <_vfiprintf_r+0x18>
 801ef4c:	f7fe fea8 	bl	801dca0 <__sinit>
 801ef50:	4b7c      	ldr	r3, [pc, #496]	; (801f144 <_vfiprintf_r+0x20c>)
 801ef52:	429c      	cmp	r4, r3
 801ef54:	d158      	bne.n	801f008 <_vfiprintf_r+0xd0>
 801ef56:	6874      	ldr	r4, [r6, #4]
 801ef58:	89a3      	ldrh	r3, [r4, #12]
 801ef5a:	0718      	lsls	r0, r3, #28
 801ef5c:	d55e      	bpl.n	801f01c <_vfiprintf_r+0xe4>
 801ef5e:	6923      	ldr	r3, [r4, #16]
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d05b      	beq.n	801f01c <_vfiprintf_r+0xe4>
 801ef64:	2300      	movs	r3, #0
 801ef66:	9309      	str	r3, [sp, #36]	; 0x24
 801ef68:	2320      	movs	r3, #32
 801ef6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef6e:	2330      	movs	r3, #48	; 0x30
 801ef70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef74:	9503      	str	r5, [sp, #12]
 801ef76:	f04f 0b01 	mov.w	fp, #1
 801ef7a:	46b8      	mov	r8, r7
 801ef7c:	4645      	mov	r5, r8
 801ef7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef82:	b10b      	cbz	r3, 801ef88 <_vfiprintf_r+0x50>
 801ef84:	2b25      	cmp	r3, #37	; 0x25
 801ef86:	d154      	bne.n	801f032 <_vfiprintf_r+0xfa>
 801ef88:	ebb8 0a07 	subs.w	sl, r8, r7
 801ef8c:	d00b      	beq.n	801efa6 <_vfiprintf_r+0x6e>
 801ef8e:	4653      	mov	r3, sl
 801ef90:	463a      	mov	r2, r7
 801ef92:	4621      	mov	r1, r4
 801ef94:	4630      	mov	r0, r6
 801ef96:	f7ff ffbc 	bl	801ef12 <__sfputs_r>
 801ef9a:	3001      	adds	r0, #1
 801ef9c:	f000 80c2 	beq.w	801f124 <_vfiprintf_r+0x1ec>
 801efa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efa2:	4453      	add	r3, sl
 801efa4:	9309      	str	r3, [sp, #36]	; 0x24
 801efa6:	f898 3000 	ldrb.w	r3, [r8]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	f000 80ba 	beq.w	801f124 <_vfiprintf_r+0x1ec>
 801efb0:	2300      	movs	r3, #0
 801efb2:	f04f 32ff 	mov.w	r2, #4294967295
 801efb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801efba:	9304      	str	r3, [sp, #16]
 801efbc:	9307      	str	r3, [sp, #28]
 801efbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801efc2:	931a      	str	r3, [sp, #104]	; 0x68
 801efc4:	46a8      	mov	r8, r5
 801efc6:	2205      	movs	r2, #5
 801efc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 801efcc:	485e      	ldr	r0, [pc, #376]	; (801f148 <_vfiprintf_r+0x210>)
 801efce:	f7e1 f917 	bl	8000200 <memchr>
 801efd2:	9b04      	ldr	r3, [sp, #16]
 801efd4:	bb78      	cbnz	r0, 801f036 <_vfiprintf_r+0xfe>
 801efd6:	06d9      	lsls	r1, r3, #27
 801efd8:	bf44      	itt	mi
 801efda:	2220      	movmi	r2, #32
 801efdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801efe0:	071a      	lsls	r2, r3, #28
 801efe2:	bf44      	itt	mi
 801efe4:	222b      	movmi	r2, #43	; 0x2b
 801efe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801efea:	782a      	ldrb	r2, [r5, #0]
 801efec:	2a2a      	cmp	r2, #42	; 0x2a
 801efee:	d02a      	beq.n	801f046 <_vfiprintf_r+0x10e>
 801eff0:	9a07      	ldr	r2, [sp, #28]
 801eff2:	46a8      	mov	r8, r5
 801eff4:	2000      	movs	r0, #0
 801eff6:	250a      	movs	r5, #10
 801eff8:	4641      	mov	r1, r8
 801effa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801effe:	3b30      	subs	r3, #48	; 0x30
 801f000:	2b09      	cmp	r3, #9
 801f002:	d969      	bls.n	801f0d8 <_vfiprintf_r+0x1a0>
 801f004:	b360      	cbz	r0, 801f060 <_vfiprintf_r+0x128>
 801f006:	e024      	b.n	801f052 <_vfiprintf_r+0x11a>
 801f008:	4b50      	ldr	r3, [pc, #320]	; (801f14c <_vfiprintf_r+0x214>)
 801f00a:	429c      	cmp	r4, r3
 801f00c:	d101      	bne.n	801f012 <_vfiprintf_r+0xda>
 801f00e:	68b4      	ldr	r4, [r6, #8]
 801f010:	e7a2      	b.n	801ef58 <_vfiprintf_r+0x20>
 801f012:	4b4f      	ldr	r3, [pc, #316]	; (801f150 <_vfiprintf_r+0x218>)
 801f014:	429c      	cmp	r4, r3
 801f016:	bf08      	it	eq
 801f018:	68f4      	ldreq	r4, [r6, #12]
 801f01a:	e79d      	b.n	801ef58 <_vfiprintf_r+0x20>
 801f01c:	4621      	mov	r1, r4
 801f01e:	4630      	mov	r0, r6
 801f020:	f000 f948 	bl	801f2b4 <__swsetup_r>
 801f024:	2800      	cmp	r0, #0
 801f026:	d09d      	beq.n	801ef64 <_vfiprintf_r+0x2c>
 801f028:	f04f 30ff 	mov.w	r0, #4294967295
 801f02c:	b01d      	add	sp, #116	; 0x74
 801f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f032:	46a8      	mov	r8, r5
 801f034:	e7a2      	b.n	801ef7c <_vfiprintf_r+0x44>
 801f036:	4a44      	ldr	r2, [pc, #272]	; (801f148 <_vfiprintf_r+0x210>)
 801f038:	1a80      	subs	r0, r0, r2
 801f03a:	fa0b f000 	lsl.w	r0, fp, r0
 801f03e:	4318      	orrs	r0, r3
 801f040:	9004      	str	r0, [sp, #16]
 801f042:	4645      	mov	r5, r8
 801f044:	e7be      	b.n	801efc4 <_vfiprintf_r+0x8c>
 801f046:	9a03      	ldr	r2, [sp, #12]
 801f048:	1d11      	adds	r1, r2, #4
 801f04a:	6812      	ldr	r2, [r2, #0]
 801f04c:	9103      	str	r1, [sp, #12]
 801f04e:	2a00      	cmp	r2, #0
 801f050:	db01      	blt.n	801f056 <_vfiprintf_r+0x11e>
 801f052:	9207      	str	r2, [sp, #28]
 801f054:	e004      	b.n	801f060 <_vfiprintf_r+0x128>
 801f056:	4252      	negs	r2, r2
 801f058:	f043 0302 	orr.w	r3, r3, #2
 801f05c:	9207      	str	r2, [sp, #28]
 801f05e:	9304      	str	r3, [sp, #16]
 801f060:	f898 3000 	ldrb.w	r3, [r8]
 801f064:	2b2e      	cmp	r3, #46	; 0x2e
 801f066:	d10e      	bne.n	801f086 <_vfiprintf_r+0x14e>
 801f068:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f06c:	2b2a      	cmp	r3, #42	; 0x2a
 801f06e:	d138      	bne.n	801f0e2 <_vfiprintf_r+0x1aa>
 801f070:	9b03      	ldr	r3, [sp, #12]
 801f072:	1d1a      	adds	r2, r3, #4
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	9203      	str	r2, [sp, #12]
 801f078:	2b00      	cmp	r3, #0
 801f07a:	bfb8      	it	lt
 801f07c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f080:	f108 0802 	add.w	r8, r8, #2
 801f084:	9305      	str	r3, [sp, #20]
 801f086:	4d33      	ldr	r5, [pc, #204]	; (801f154 <_vfiprintf_r+0x21c>)
 801f088:	f898 1000 	ldrb.w	r1, [r8]
 801f08c:	2203      	movs	r2, #3
 801f08e:	4628      	mov	r0, r5
 801f090:	f7e1 f8b6 	bl	8000200 <memchr>
 801f094:	b140      	cbz	r0, 801f0a8 <_vfiprintf_r+0x170>
 801f096:	2340      	movs	r3, #64	; 0x40
 801f098:	1b40      	subs	r0, r0, r5
 801f09a:	fa03 f000 	lsl.w	r0, r3, r0
 801f09e:	9b04      	ldr	r3, [sp, #16]
 801f0a0:	4303      	orrs	r3, r0
 801f0a2:	f108 0801 	add.w	r8, r8, #1
 801f0a6:	9304      	str	r3, [sp, #16]
 801f0a8:	f898 1000 	ldrb.w	r1, [r8]
 801f0ac:	482a      	ldr	r0, [pc, #168]	; (801f158 <_vfiprintf_r+0x220>)
 801f0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f0b2:	2206      	movs	r2, #6
 801f0b4:	f108 0701 	add.w	r7, r8, #1
 801f0b8:	f7e1 f8a2 	bl	8000200 <memchr>
 801f0bc:	2800      	cmp	r0, #0
 801f0be:	d037      	beq.n	801f130 <_vfiprintf_r+0x1f8>
 801f0c0:	4b26      	ldr	r3, [pc, #152]	; (801f15c <_vfiprintf_r+0x224>)
 801f0c2:	bb1b      	cbnz	r3, 801f10c <_vfiprintf_r+0x1d4>
 801f0c4:	9b03      	ldr	r3, [sp, #12]
 801f0c6:	3307      	adds	r3, #7
 801f0c8:	f023 0307 	bic.w	r3, r3, #7
 801f0cc:	3308      	adds	r3, #8
 801f0ce:	9303      	str	r3, [sp, #12]
 801f0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0d2:	444b      	add	r3, r9
 801f0d4:	9309      	str	r3, [sp, #36]	; 0x24
 801f0d6:	e750      	b.n	801ef7a <_vfiprintf_r+0x42>
 801f0d8:	fb05 3202 	mla	r2, r5, r2, r3
 801f0dc:	2001      	movs	r0, #1
 801f0de:	4688      	mov	r8, r1
 801f0e0:	e78a      	b.n	801eff8 <_vfiprintf_r+0xc0>
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	f108 0801 	add.w	r8, r8, #1
 801f0e8:	9305      	str	r3, [sp, #20]
 801f0ea:	4619      	mov	r1, r3
 801f0ec:	250a      	movs	r5, #10
 801f0ee:	4640      	mov	r0, r8
 801f0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0f4:	3a30      	subs	r2, #48	; 0x30
 801f0f6:	2a09      	cmp	r2, #9
 801f0f8:	d903      	bls.n	801f102 <_vfiprintf_r+0x1ca>
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d0c3      	beq.n	801f086 <_vfiprintf_r+0x14e>
 801f0fe:	9105      	str	r1, [sp, #20]
 801f100:	e7c1      	b.n	801f086 <_vfiprintf_r+0x14e>
 801f102:	fb05 2101 	mla	r1, r5, r1, r2
 801f106:	2301      	movs	r3, #1
 801f108:	4680      	mov	r8, r0
 801f10a:	e7f0      	b.n	801f0ee <_vfiprintf_r+0x1b6>
 801f10c:	ab03      	add	r3, sp, #12
 801f10e:	9300      	str	r3, [sp, #0]
 801f110:	4622      	mov	r2, r4
 801f112:	4b13      	ldr	r3, [pc, #76]	; (801f160 <_vfiprintf_r+0x228>)
 801f114:	a904      	add	r1, sp, #16
 801f116:	4630      	mov	r0, r6
 801f118:	f7fc fbd4 	bl	801b8c4 <_printf_float>
 801f11c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f120:	4681      	mov	r9, r0
 801f122:	d1d5      	bne.n	801f0d0 <_vfiprintf_r+0x198>
 801f124:	89a3      	ldrh	r3, [r4, #12]
 801f126:	065b      	lsls	r3, r3, #25
 801f128:	f53f af7e 	bmi.w	801f028 <_vfiprintf_r+0xf0>
 801f12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f12e:	e77d      	b.n	801f02c <_vfiprintf_r+0xf4>
 801f130:	ab03      	add	r3, sp, #12
 801f132:	9300      	str	r3, [sp, #0]
 801f134:	4622      	mov	r2, r4
 801f136:	4b0a      	ldr	r3, [pc, #40]	; (801f160 <_vfiprintf_r+0x228>)
 801f138:	a904      	add	r1, sp, #16
 801f13a:	4630      	mov	r0, r6
 801f13c:	f7fc fe78 	bl	801be30 <_printf_i>
 801f140:	e7ec      	b.n	801f11c <_vfiprintf_r+0x1e4>
 801f142:	bf00      	nop
 801f144:	08024b60 	.word	0x08024b60
 801f148:	08024c9c 	.word	0x08024c9c
 801f14c:	08024b80 	.word	0x08024b80
 801f150:	08024b40 	.word	0x08024b40
 801f154:	08024ca2 	.word	0x08024ca2
 801f158:	08024ca6 	.word	0x08024ca6
 801f15c:	0801b8c5 	.word	0x0801b8c5
 801f160:	0801ef13 	.word	0x0801ef13

0801f164 <__sread>:
 801f164:	b510      	push	{r4, lr}
 801f166:	460c      	mov	r4, r1
 801f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f16c:	f000 fa6c 	bl	801f648 <_read_r>
 801f170:	2800      	cmp	r0, #0
 801f172:	bfab      	itete	ge
 801f174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f176:	89a3      	ldrhlt	r3, [r4, #12]
 801f178:	181b      	addge	r3, r3, r0
 801f17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f17e:	bfac      	ite	ge
 801f180:	6563      	strge	r3, [r4, #84]	; 0x54
 801f182:	81a3      	strhlt	r3, [r4, #12]
 801f184:	bd10      	pop	{r4, pc}

0801f186 <__swrite>:
 801f186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f18a:	461f      	mov	r7, r3
 801f18c:	898b      	ldrh	r3, [r1, #12]
 801f18e:	05db      	lsls	r3, r3, #23
 801f190:	4605      	mov	r5, r0
 801f192:	460c      	mov	r4, r1
 801f194:	4616      	mov	r6, r2
 801f196:	d505      	bpl.n	801f1a4 <__swrite+0x1e>
 801f198:	2302      	movs	r3, #2
 801f19a:	2200      	movs	r2, #0
 801f19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1a0:	f000 f9b6 	bl	801f510 <_lseek_r>
 801f1a4:	89a3      	ldrh	r3, [r4, #12]
 801f1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f1ae:	81a3      	strh	r3, [r4, #12]
 801f1b0:	4632      	mov	r2, r6
 801f1b2:	463b      	mov	r3, r7
 801f1b4:	4628      	mov	r0, r5
 801f1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f1ba:	f000 b869 	b.w	801f290 <_write_r>

0801f1be <__sseek>:
 801f1be:	b510      	push	{r4, lr}
 801f1c0:	460c      	mov	r4, r1
 801f1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1c6:	f000 f9a3 	bl	801f510 <_lseek_r>
 801f1ca:	1c43      	adds	r3, r0, #1
 801f1cc:	89a3      	ldrh	r3, [r4, #12]
 801f1ce:	bf15      	itete	ne
 801f1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 801f1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f1da:	81a3      	strheq	r3, [r4, #12]
 801f1dc:	bf18      	it	ne
 801f1de:	81a3      	strhne	r3, [r4, #12]
 801f1e0:	bd10      	pop	{r4, pc}

0801f1e2 <__sclose>:
 801f1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1e6:	f000 b8d3 	b.w	801f390 <_close_r>
	...

0801f1ec <__swbuf_r>:
 801f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1ee:	460e      	mov	r6, r1
 801f1f0:	4614      	mov	r4, r2
 801f1f2:	4605      	mov	r5, r0
 801f1f4:	b118      	cbz	r0, 801f1fe <__swbuf_r+0x12>
 801f1f6:	6983      	ldr	r3, [r0, #24]
 801f1f8:	b90b      	cbnz	r3, 801f1fe <__swbuf_r+0x12>
 801f1fa:	f7fe fd51 	bl	801dca0 <__sinit>
 801f1fe:	4b21      	ldr	r3, [pc, #132]	; (801f284 <__swbuf_r+0x98>)
 801f200:	429c      	cmp	r4, r3
 801f202:	d12a      	bne.n	801f25a <__swbuf_r+0x6e>
 801f204:	686c      	ldr	r4, [r5, #4]
 801f206:	69a3      	ldr	r3, [r4, #24]
 801f208:	60a3      	str	r3, [r4, #8]
 801f20a:	89a3      	ldrh	r3, [r4, #12]
 801f20c:	071a      	lsls	r2, r3, #28
 801f20e:	d52e      	bpl.n	801f26e <__swbuf_r+0x82>
 801f210:	6923      	ldr	r3, [r4, #16]
 801f212:	b363      	cbz	r3, 801f26e <__swbuf_r+0x82>
 801f214:	6923      	ldr	r3, [r4, #16]
 801f216:	6820      	ldr	r0, [r4, #0]
 801f218:	1ac0      	subs	r0, r0, r3
 801f21a:	6963      	ldr	r3, [r4, #20]
 801f21c:	b2f6      	uxtb	r6, r6
 801f21e:	4283      	cmp	r3, r0
 801f220:	4637      	mov	r7, r6
 801f222:	dc04      	bgt.n	801f22e <__swbuf_r+0x42>
 801f224:	4621      	mov	r1, r4
 801f226:	4628      	mov	r0, r5
 801f228:	f000 f948 	bl	801f4bc <_fflush_r>
 801f22c:	bb28      	cbnz	r0, 801f27a <__swbuf_r+0x8e>
 801f22e:	68a3      	ldr	r3, [r4, #8]
 801f230:	3b01      	subs	r3, #1
 801f232:	60a3      	str	r3, [r4, #8]
 801f234:	6823      	ldr	r3, [r4, #0]
 801f236:	1c5a      	adds	r2, r3, #1
 801f238:	6022      	str	r2, [r4, #0]
 801f23a:	701e      	strb	r6, [r3, #0]
 801f23c:	6963      	ldr	r3, [r4, #20]
 801f23e:	3001      	adds	r0, #1
 801f240:	4283      	cmp	r3, r0
 801f242:	d004      	beq.n	801f24e <__swbuf_r+0x62>
 801f244:	89a3      	ldrh	r3, [r4, #12]
 801f246:	07db      	lsls	r3, r3, #31
 801f248:	d519      	bpl.n	801f27e <__swbuf_r+0x92>
 801f24a:	2e0a      	cmp	r6, #10
 801f24c:	d117      	bne.n	801f27e <__swbuf_r+0x92>
 801f24e:	4621      	mov	r1, r4
 801f250:	4628      	mov	r0, r5
 801f252:	f000 f933 	bl	801f4bc <_fflush_r>
 801f256:	b190      	cbz	r0, 801f27e <__swbuf_r+0x92>
 801f258:	e00f      	b.n	801f27a <__swbuf_r+0x8e>
 801f25a:	4b0b      	ldr	r3, [pc, #44]	; (801f288 <__swbuf_r+0x9c>)
 801f25c:	429c      	cmp	r4, r3
 801f25e:	d101      	bne.n	801f264 <__swbuf_r+0x78>
 801f260:	68ac      	ldr	r4, [r5, #8]
 801f262:	e7d0      	b.n	801f206 <__swbuf_r+0x1a>
 801f264:	4b09      	ldr	r3, [pc, #36]	; (801f28c <__swbuf_r+0xa0>)
 801f266:	429c      	cmp	r4, r3
 801f268:	bf08      	it	eq
 801f26a:	68ec      	ldreq	r4, [r5, #12]
 801f26c:	e7cb      	b.n	801f206 <__swbuf_r+0x1a>
 801f26e:	4621      	mov	r1, r4
 801f270:	4628      	mov	r0, r5
 801f272:	f000 f81f 	bl	801f2b4 <__swsetup_r>
 801f276:	2800      	cmp	r0, #0
 801f278:	d0cc      	beq.n	801f214 <__swbuf_r+0x28>
 801f27a:	f04f 37ff 	mov.w	r7, #4294967295
 801f27e:	4638      	mov	r0, r7
 801f280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f282:	bf00      	nop
 801f284:	08024b60 	.word	0x08024b60
 801f288:	08024b80 	.word	0x08024b80
 801f28c:	08024b40 	.word	0x08024b40

0801f290 <_write_r>:
 801f290:	b538      	push	{r3, r4, r5, lr}
 801f292:	4c07      	ldr	r4, [pc, #28]	; (801f2b0 <_write_r+0x20>)
 801f294:	4605      	mov	r5, r0
 801f296:	4608      	mov	r0, r1
 801f298:	4611      	mov	r1, r2
 801f29a:	2200      	movs	r2, #0
 801f29c:	6022      	str	r2, [r4, #0]
 801f29e:	461a      	mov	r2, r3
 801f2a0:	f7e4 fddd 	bl	8003e5e <_write>
 801f2a4:	1c43      	adds	r3, r0, #1
 801f2a6:	d102      	bne.n	801f2ae <_write_r+0x1e>
 801f2a8:	6823      	ldr	r3, [r4, #0]
 801f2aa:	b103      	cbz	r3, 801f2ae <_write_r+0x1e>
 801f2ac:	602b      	str	r3, [r5, #0]
 801f2ae:	bd38      	pop	{r3, r4, r5, pc}
 801f2b0:	20008308 	.word	0x20008308

0801f2b4 <__swsetup_r>:
 801f2b4:	4b32      	ldr	r3, [pc, #200]	; (801f380 <__swsetup_r+0xcc>)
 801f2b6:	b570      	push	{r4, r5, r6, lr}
 801f2b8:	681d      	ldr	r5, [r3, #0]
 801f2ba:	4606      	mov	r6, r0
 801f2bc:	460c      	mov	r4, r1
 801f2be:	b125      	cbz	r5, 801f2ca <__swsetup_r+0x16>
 801f2c0:	69ab      	ldr	r3, [r5, #24]
 801f2c2:	b913      	cbnz	r3, 801f2ca <__swsetup_r+0x16>
 801f2c4:	4628      	mov	r0, r5
 801f2c6:	f7fe fceb 	bl	801dca0 <__sinit>
 801f2ca:	4b2e      	ldr	r3, [pc, #184]	; (801f384 <__swsetup_r+0xd0>)
 801f2cc:	429c      	cmp	r4, r3
 801f2ce:	d10f      	bne.n	801f2f0 <__swsetup_r+0x3c>
 801f2d0:	686c      	ldr	r4, [r5, #4]
 801f2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2d6:	b29a      	uxth	r2, r3
 801f2d8:	0715      	lsls	r5, r2, #28
 801f2da:	d42c      	bmi.n	801f336 <__swsetup_r+0x82>
 801f2dc:	06d0      	lsls	r0, r2, #27
 801f2de:	d411      	bmi.n	801f304 <__swsetup_r+0x50>
 801f2e0:	2209      	movs	r2, #9
 801f2e2:	6032      	str	r2, [r6, #0]
 801f2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f2e8:	81a3      	strh	r3, [r4, #12]
 801f2ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f2ee:	e03e      	b.n	801f36e <__swsetup_r+0xba>
 801f2f0:	4b25      	ldr	r3, [pc, #148]	; (801f388 <__swsetup_r+0xd4>)
 801f2f2:	429c      	cmp	r4, r3
 801f2f4:	d101      	bne.n	801f2fa <__swsetup_r+0x46>
 801f2f6:	68ac      	ldr	r4, [r5, #8]
 801f2f8:	e7eb      	b.n	801f2d2 <__swsetup_r+0x1e>
 801f2fa:	4b24      	ldr	r3, [pc, #144]	; (801f38c <__swsetup_r+0xd8>)
 801f2fc:	429c      	cmp	r4, r3
 801f2fe:	bf08      	it	eq
 801f300:	68ec      	ldreq	r4, [r5, #12]
 801f302:	e7e6      	b.n	801f2d2 <__swsetup_r+0x1e>
 801f304:	0751      	lsls	r1, r2, #29
 801f306:	d512      	bpl.n	801f32e <__swsetup_r+0x7a>
 801f308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f30a:	b141      	cbz	r1, 801f31e <__swsetup_r+0x6a>
 801f30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f310:	4299      	cmp	r1, r3
 801f312:	d002      	beq.n	801f31a <__swsetup_r+0x66>
 801f314:	4630      	mov	r0, r6
 801f316:	f7fc f999 	bl	801b64c <_free_r>
 801f31a:	2300      	movs	r3, #0
 801f31c:	6363      	str	r3, [r4, #52]	; 0x34
 801f31e:	89a3      	ldrh	r3, [r4, #12]
 801f320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f324:	81a3      	strh	r3, [r4, #12]
 801f326:	2300      	movs	r3, #0
 801f328:	6063      	str	r3, [r4, #4]
 801f32a:	6923      	ldr	r3, [r4, #16]
 801f32c:	6023      	str	r3, [r4, #0]
 801f32e:	89a3      	ldrh	r3, [r4, #12]
 801f330:	f043 0308 	orr.w	r3, r3, #8
 801f334:	81a3      	strh	r3, [r4, #12]
 801f336:	6923      	ldr	r3, [r4, #16]
 801f338:	b94b      	cbnz	r3, 801f34e <__swsetup_r+0x9a>
 801f33a:	89a3      	ldrh	r3, [r4, #12]
 801f33c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f344:	d003      	beq.n	801f34e <__swsetup_r+0x9a>
 801f346:	4621      	mov	r1, r4
 801f348:	4630      	mov	r0, r6
 801f34a:	f000 f917 	bl	801f57c <__smakebuf_r>
 801f34e:	89a2      	ldrh	r2, [r4, #12]
 801f350:	f012 0301 	ands.w	r3, r2, #1
 801f354:	d00c      	beq.n	801f370 <__swsetup_r+0xbc>
 801f356:	2300      	movs	r3, #0
 801f358:	60a3      	str	r3, [r4, #8]
 801f35a:	6963      	ldr	r3, [r4, #20]
 801f35c:	425b      	negs	r3, r3
 801f35e:	61a3      	str	r3, [r4, #24]
 801f360:	6923      	ldr	r3, [r4, #16]
 801f362:	b953      	cbnz	r3, 801f37a <__swsetup_r+0xc6>
 801f364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f368:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801f36c:	d1ba      	bne.n	801f2e4 <__swsetup_r+0x30>
 801f36e:	bd70      	pop	{r4, r5, r6, pc}
 801f370:	0792      	lsls	r2, r2, #30
 801f372:	bf58      	it	pl
 801f374:	6963      	ldrpl	r3, [r4, #20]
 801f376:	60a3      	str	r3, [r4, #8]
 801f378:	e7f2      	b.n	801f360 <__swsetup_r+0xac>
 801f37a:	2000      	movs	r0, #0
 801f37c:	e7f7      	b.n	801f36e <__swsetup_r+0xba>
 801f37e:	bf00      	nop
 801f380:	20000084 	.word	0x20000084
 801f384:	08024b60 	.word	0x08024b60
 801f388:	08024b80 	.word	0x08024b80
 801f38c:	08024b40 	.word	0x08024b40

0801f390 <_close_r>:
 801f390:	b538      	push	{r3, r4, r5, lr}
 801f392:	4c06      	ldr	r4, [pc, #24]	; (801f3ac <_close_r+0x1c>)
 801f394:	2300      	movs	r3, #0
 801f396:	4605      	mov	r5, r0
 801f398:	4608      	mov	r0, r1
 801f39a:	6023      	str	r3, [r4, #0]
 801f39c:	f7e4 fd7b 	bl	8003e96 <_close>
 801f3a0:	1c43      	adds	r3, r0, #1
 801f3a2:	d102      	bne.n	801f3aa <_close_r+0x1a>
 801f3a4:	6823      	ldr	r3, [r4, #0]
 801f3a6:	b103      	cbz	r3, 801f3aa <_close_r+0x1a>
 801f3a8:	602b      	str	r3, [r5, #0]
 801f3aa:	bd38      	pop	{r3, r4, r5, pc}
 801f3ac:	20008308 	.word	0x20008308

0801f3b0 <__sflush_r>:
 801f3b0:	898a      	ldrh	r2, [r1, #12]
 801f3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3b6:	4605      	mov	r5, r0
 801f3b8:	0710      	lsls	r0, r2, #28
 801f3ba:	460c      	mov	r4, r1
 801f3bc:	d458      	bmi.n	801f470 <__sflush_r+0xc0>
 801f3be:	684b      	ldr	r3, [r1, #4]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	dc05      	bgt.n	801f3d0 <__sflush_r+0x20>
 801f3c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	dc02      	bgt.n	801f3d0 <__sflush_r+0x20>
 801f3ca:	2000      	movs	r0, #0
 801f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3d2:	2e00      	cmp	r6, #0
 801f3d4:	d0f9      	beq.n	801f3ca <__sflush_r+0x1a>
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f3dc:	682f      	ldr	r7, [r5, #0]
 801f3de:	6a21      	ldr	r1, [r4, #32]
 801f3e0:	602b      	str	r3, [r5, #0]
 801f3e2:	d032      	beq.n	801f44a <__sflush_r+0x9a>
 801f3e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f3e6:	89a3      	ldrh	r3, [r4, #12]
 801f3e8:	075a      	lsls	r2, r3, #29
 801f3ea:	d505      	bpl.n	801f3f8 <__sflush_r+0x48>
 801f3ec:	6863      	ldr	r3, [r4, #4]
 801f3ee:	1ac0      	subs	r0, r0, r3
 801f3f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f3f2:	b10b      	cbz	r3, 801f3f8 <__sflush_r+0x48>
 801f3f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f3f6:	1ac0      	subs	r0, r0, r3
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	4602      	mov	r2, r0
 801f3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3fe:	6a21      	ldr	r1, [r4, #32]
 801f400:	4628      	mov	r0, r5
 801f402:	47b0      	blx	r6
 801f404:	1c43      	adds	r3, r0, #1
 801f406:	89a3      	ldrh	r3, [r4, #12]
 801f408:	d106      	bne.n	801f418 <__sflush_r+0x68>
 801f40a:	6829      	ldr	r1, [r5, #0]
 801f40c:	291d      	cmp	r1, #29
 801f40e:	d848      	bhi.n	801f4a2 <__sflush_r+0xf2>
 801f410:	4a29      	ldr	r2, [pc, #164]	; (801f4b8 <__sflush_r+0x108>)
 801f412:	40ca      	lsrs	r2, r1
 801f414:	07d6      	lsls	r6, r2, #31
 801f416:	d544      	bpl.n	801f4a2 <__sflush_r+0xf2>
 801f418:	2200      	movs	r2, #0
 801f41a:	6062      	str	r2, [r4, #4]
 801f41c:	04d9      	lsls	r1, r3, #19
 801f41e:	6922      	ldr	r2, [r4, #16]
 801f420:	6022      	str	r2, [r4, #0]
 801f422:	d504      	bpl.n	801f42e <__sflush_r+0x7e>
 801f424:	1c42      	adds	r2, r0, #1
 801f426:	d101      	bne.n	801f42c <__sflush_r+0x7c>
 801f428:	682b      	ldr	r3, [r5, #0]
 801f42a:	b903      	cbnz	r3, 801f42e <__sflush_r+0x7e>
 801f42c:	6560      	str	r0, [r4, #84]	; 0x54
 801f42e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f430:	602f      	str	r7, [r5, #0]
 801f432:	2900      	cmp	r1, #0
 801f434:	d0c9      	beq.n	801f3ca <__sflush_r+0x1a>
 801f436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f43a:	4299      	cmp	r1, r3
 801f43c:	d002      	beq.n	801f444 <__sflush_r+0x94>
 801f43e:	4628      	mov	r0, r5
 801f440:	f7fc f904 	bl	801b64c <_free_r>
 801f444:	2000      	movs	r0, #0
 801f446:	6360      	str	r0, [r4, #52]	; 0x34
 801f448:	e7c0      	b.n	801f3cc <__sflush_r+0x1c>
 801f44a:	2301      	movs	r3, #1
 801f44c:	4628      	mov	r0, r5
 801f44e:	47b0      	blx	r6
 801f450:	1c41      	adds	r1, r0, #1
 801f452:	d1c8      	bne.n	801f3e6 <__sflush_r+0x36>
 801f454:	682b      	ldr	r3, [r5, #0]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d0c5      	beq.n	801f3e6 <__sflush_r+0x36>
 801f45a:	2b1d      	cmp	r3, #29
 801f45c:	d001      	beq.n	801f462 <__sflush_r+0xb2>
 801f45e:	2b16      	cmp	r3, #22
 801f460:	d101      	bne.n	801f466 <__sflush_r+0xb6>
 801f462:	602f      	str	r7, [r5, #0]
 801f464:	e7b1      	b.n	801f3ca <__sflush_r+0x1a>
 801f466:	89a3      	ldrh	r3, [r4, #12]
 801f468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f46c:	81a3      	strh	r3, [r4, #12]
 801f46e:	e7ad      	b.n	801f3cc <__sflush_r+0x1c>
 801f470:	690f      	ldr	r7, [r1, #16]
 801f472:	2f00      	cmp	r7, #0
 801f474:	d0a9      	beq.n	801f3ca <__sflush_r+0x1a>
 801f476:	0793      	lsls	r3, r2, #30
 801f478:	680e      	ldr	r6, [r1, #0]
 801f47a:	bf08      	it	eq
 801f47c:	694b      	ldreq	r3, [r1, #20]
 801f47e:	600f      	str	r7, [r1, #0]
 801f480:	bf18      	it	ne
 801f482:	2300      	movne	r3, #0
 801f484:	eba6 0807 	sub.w	r8, r6, r7
 801f488:	608b      	str	r3, [r1, #8]
 801f48a:	f1b8 0f00 	cmp.w	r8, #0
 801f48e:	dd9c      	ble.n	801f3ca <__sflush_r+0x1a>
 801f490:	4643      	mov	r3, r8
 801f492:	463a      	mov	r2, r7
 801f494:	6a21      	ldr	r1, [r4, #32]
 801f496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f498:	4628      	mov	r0, r5
 801f49a:	47b0      	blx	r6
 801f49c:	2800      	cmp	r0, #0
 801f49e:	dc06      	bgt.n	801f4ae <__sflush_r+0xfe>
 801f4a0:	89a3      	ldrh	r3, [r4, #12]
 801f4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4a6:	81a3      	strh	r3, [r4, #12]
 801f4a8:	f04f 30ff 	mov.w	r0, #4294967295
 801f4ac:	e78e      	b.n	801f3cc <__sflush_r+0x1c>
 801f4ae:	4407      	add	r7, r0
 801f4b0:	eba8 0800 	sub.w	r8, r8, r0
 801f4b4:	e7e9      	b.n	801f48a <__sflush_r+0xda>
 801f4b6:	bf00      	nop
 801f4b8:	20400001 	.word	0x20400001

0801f4bc <_fflush_r>:
 801f4bc:	b538      	push	{r3, r4, r5, lr}
 801f4be:	690b      	ldr	r3, [r1, #16]
 801f4c0:	4605      	mov	r5, r0
 801f4c2:	460c      	mov	r4, r1
 801f4c4:	b1db      	cbz	r3, 801f4fe <_fflush_r+0x42>
 801f4c6:	b118      	cbz	r0, 801f4d0 <_fflush_r+0x14>
 801f4c8:	6983      	ldr	r3, [r0, #24]
 801f4ca:	b90b      	cbnz	r3, 801f4d0 <_fflush_r+0x14>
 801f4cc:	f7fe fbe8 	bl	801dca0 <__sinit>
 801f4d0:	4b0c      	ldr	r3, [pc, #48]	; (801f504 <_fflush_r+0x48>)
 801f4d2:	429c      	cmp	r4, r3
 801f4d4:	d109      	bne.n	801f4ea <_fflush_r+0x2e>
 801f4d6:	686c      	ldr	r4, [r5, #4]
 801f4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4dc:	b17b      	cbz	r3, 801f4fe <_fflush_r+0x42>
 801f4de:	4621      	mov	r1, r4
 801f4e0:	4628      	mov	r0, r5
 801f4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f4e6:	f7ff bf63 	b.w	801f3b0 <__sflush_r>
 801f4ea:	4b07      	ldr	r3, [pc, #28]	; (801f508 <_fflush_r+0x4c>)
 801f4ec:	429c      	cmp	r4, r3
 801f4ee:	d101      	bne.n	801f4f4 <_fflush_r+0x38>
 801f4f0:	68ac      	ldr	r4, [r5, #8]
 801f4f2:	e7f1      	b.n	801f4d8 <_fflush_r+0x1c>
 801f4f4:	4b05      	ldr	r3, [pc, #20]	; (801f50c <_fflush_r+0x50>)
 801f4f6:	429c      	cmp	r4, r3
 801f4f8:	bf08      	it	eq
 801f4fa:	68ec      	ldreq	r4, [r5, #12]
 801f4fc:	e7ec      	b.n	801f4d8 <_fflush_r+0x1c>
 801f4fe:	2000      	movs	r0, #0
 801f500:	bd38      	pop	{r3, r4, r5, pc}
 801f502:	bf00      	nop
 801f504:	08024b60 	.word	0x08024b60
 801f508:	08024b80 	.word	0x08024b80
 801f50c:	08024b40 	.word	0x08024b40

0801f510 <_lseek_r>:
 801f510:	b538      	push	{r3, r4, r5, lr}
 801f512:	4c07      	ldr	r4, [pc, #28]	; (801f530 <_lseek_r+0x20>)
 801f514:	4605      	mov	r5, r0
 801f516:	4608      	mov	r0, r1
 801f518:	4611      	mov	r1, r2
 801f51a:	2200      	movs	r2, #0
 801f51c:	6022      	str	r2, [r4, #0]
 801f51e:	461a      	mov	r2, r3
 801f520:	f7e4 fce0 	bl	8003ee4 <_lseek>
 801f524:	1c43      	adds	r3, r0, #1
 801f526:	d102      	bne.n	801f52e <_lseek_r+0x1e>
 801f528:	6823      	ldr	r3, [r4, #0]
 801f52a:	b103      	cbz	r3, 801f52e <_lseek_r+0x1e>
 801f52c:	602b      	str	r3, [r5, #0]
 801f52e:	bd38      	pop	{r3, r4, r5, pc}
 801f530:	20008308 	.word	0x20008308

0801f534 <__swhatbuf_r>:
 801f534:	b570      	push	{r4, r5, r6, lr}
 801f536:	460e      	mov	r6, r1
 801f538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f53c:	2900      	cmp	r1, #0
 801f53e:	b096      	sub	sp, #88	; 0x58
 801f540:	4614      	mov	r4, r2
 801f542:	461d      	mov	r5, r3
 801f544:	da07      	bge.n	801f556 <__swhatbuf_r+0x22>
 801f546:	2300      	movs	r3, #0
 801f548:	602b      	str	r3, [r5, #0]
 801f54a:	89b3      	ldrh	r3, [r6, #12]
 801f54c:	061a      	lsls	r2, r3, #24
 801f54e:	d410      	bmi.n	801f572 <__swhatbuf_r+0x3e>
 801f550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f554:	e00e      	b.n	801f574 <__swhatbuf_r+0x40>
 801f556:	466a      	mov	r2, sp
 801f558:	f000 f888 	bl	801f66c <_fstat_r>
 801f55c:	2800      	cmp	r0, #0
 801f55e:	dbf2      	blt.n	801f546 <__swhatbuf_r+0x12>
 801f560:	9a01      	ldr	r2, [sp, #4]
 801f562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f56a:	425a      	negs	r2, r3
 801f56c:	415a      	adcs	r2, r3
 801f56e:	602a      	str	r2, [r5, #0]
 801f570:	e7ee      	b.n	801f550 <__swhatbuf_r+0x1c>
 801f572:	2340      	movs	r3, #64	; 0x40
 801f574:	2000      	movs	r0, #0
 801f576:	6023      	str	r3, [r4, #0]
 801f578:	b016      	add	sp, #88	; 0x58
 801f57a:	bd70      	pop	{r4, r5, r6, pc}

0801f57c <__smakebuf_r>:
 801f57c:	898b      	ldrh	r3, [r1, #12]
 801f57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f580:	079d      	lsls	r5, r3, #30
 801f582:	4606      	mov	r6, r0
 801f584:	460c      	mov	r4, r1
 801f586:	d507      	bpl.n	801f598 <__smakebuf_r+0x1c>
 801f588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f58c:	6023      	str	r3, [r4, #0]
 801f58e:	6123      	str	r3, [r4, #16]
 801f590:	2301      	movs	r3, #1
 801f592:	6163      	str	r3, [r4, #20]
 801f594:	b002      	add	sp, #8
 801f596:	bd70      	pop	{r4, r5, r6, pc}
 801f598:	ab01      	add	r3, sp, #4
 801f59a:	466a      	mov	r2, sp
 801f59c:	f7ff ffca 	bl	801f534 <__swhatbuf_r>
 801f5a0:	9900      	ldr	r1, [sp, #0]
 801f5a2:	4605      	mov	r5, r0
 801f5a4:	4630      	mov	r0, r6
 801f5a6:	f7fc f89f 	bl	801b6e8 <_malloc_r>
 801f5aa:	b948      	cbnz	r0, 801f5c0 <__smakebuf_r+0x44>
 801f5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f5b0:	059a      	lsls	r2, r3, #22
 801f5b2:	d4ef      	bmi.n	801f594 <__smakebuf_r+0x18>
 801f5b4:	f023 0303 	bic.w	r3, r3, #3
 801f5b8:	f043 0302 	orr.w	r3, r3, #2
 801f5bc:	81a3      	strh	r3, [r4, #12]
 801f5be:	e7e3      	b.n	801f588 <__smakebuf_r+0xc>
 801f5c0:	4b0d      	ldr	r3, [pc, #52]	; (801f5f8 <__smakebuf_r+0x7c>)
 801f5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801f5c4:	89a3      	ldrh	r3, [r4, #12]
 801f5c6:	6020      	str	r0, [r4, #0]
 801f5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f5cc:	81a3      	strh	r3, [r4, #12]
 801f5ce:	9b00      	ldr	r3, [sp, #0]
 801f5d0:	6163      	str	r3, [r4, #20]
 801f5d2:	9b01      	ldr	r3, [sp, #4]
 801f5d4:	6120      	str	r0, [r4, #16]
 801f5d6:	b15b      	cbz	r3, 801f5f0 <__smakebuf_r+0x74>
 801f5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f5dc:	4630      	mov	r0, r6
 801f5de:	f000 f857 	bl	801f690 <_isatty_r>
 801f5e2:	b128      	cbz	r0, 801f5f0 <__smakebuf_r+0x74>
 801f5e4:	89a3      	ldrh	r3, [r4, #12]
 801f5e6:	f023 0303 	bic.w	r3, r3, #3
 801f5ea:	f043 0301 	orr.w	r3, r3, #1
 801f5ee:	81a3      	strh	r3, [r4, #12]
 801f5f0:	89a3      	ldrh	r3, [r4, #12]
 801f5f2:	431d      	orrs	r5, r3
 801f5f4:	81a5      	strh	r5, [r4, #12]
 801f5f6:	e7cd      	b.n	801f594 <__smakebuf_r+0x18>
 801f5f8:	0801dc69 	.word	0x0801dc69

0801f5fc <_realloc_r>:
 801f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5fe:	4607      	mov	r7, r0
 801f600:	4614      	mov	r4, r2
 801f602:	460e      	mov	r6, r1
 801f604:	b921      	cbnz	r1, 801f610 <_realloc_r+0x14>
 801f606:	4611      	mov	r1, r2
 801f608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f60c:	f7fc b86c 	b.w	801b6e8 <_malloc_r>
 801f610:	b922      	cbnz	r2, 801f61c <_realloc_r+0x20>
 801f612:	f7fc f81b 	bl	801b64c <_free_r>
 801f616:	4625      	mov	r5, r4
 801f618:	4628      	mov	r0, r5
 801f61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f61c:	f000 f848 	bl	801f6b0 <_malloc_usable_size_r>
 801f620:	42a0      	cmp	r0, r4
 801f622:	d20f      	bcs.n	801f644 <_realloc_r+0x48>
 801f624:	4621      	mov	r1, r4
 801f626:	4638      	mov	r0, r7
 801f628:	f7fc f85e 	bl	801b6e8 <_malloc_r>
 801f62c:	4605      	mov	r5, r0
 801f62e:	2800      	cmp	r0, #0
 801f630:	d0f2      	beq.n	801f618 <_realloc_r+0x1c>
 801f632:	4631      	mov	r1, r6
 801f634:	4622      	mov	r2, r4
 801f636:	f7fb ffdc 	bl	801b5f2 <memcpy>
 801f63a:	4631      	mov	r1, r6
 801f63c:	4638      	mov	r0, r7
 801f63e:	f7fc f805 	bl	801b64c <_free_r>
 801f642:	e7e9      	b.n	801f618 <_realloc_r+0x1c>
 801f644:	4635      	mov	r5, r6
 801f646:	e7e7      	b.n	801f618 <_realloc_r+0x1c>

0801f648 <_read_r>:
 801f648:	b538      	push	{r3, r4, r5, lr}
 801f64a:	4c07      	ldr	r4, [pc, #28]	; (801f668 <_read_r+0x20>)
 801f64c:	4605      	mov	r5, r0
 801f64e:	4608      	mov	r0, r1
 801f650:	4611      	mov	r1, r2
 801f652:	2200      	movs	r2, #0
 801f654:	6022      	str	r2, [r4, #0]
 801f656:	461a      	mov	r2, r3
 801f658:	f7e4 fbe4 	bl	8003e24 <_read>
 801f65c:	1c43      	adds	r3, r0, #1
 801f65e:	d102      	bne.n	801f666 <_read_r+0x1e>
 801f660:	6823      	ldr	r3, [r4, #0]
 801f662:	b103      	cbz	r3, 801f666 <_read_r+0x1e>
 801f664:	602b      	str	r3, [r5, #0]
 801f666:	bd38      	pop	{r3, r4, r5, pc}
 801f668:	20008308 	.word	0x20008308

0801f66c <_fstat_r>:
 801f66c:	b538      	push	{r3, r4, r5, lr}
 801f66e:	4c07      	ldr	r4, [pc, #28]	; (801f68c <_fstat_r+0x20>)
 801f670:	2300      	movs	r3, #0
 801f672:	4605      	mov	r5, r0
 801f674:	4608      	mov	r0, r1
 801f676:	4611      	mov	r1, r2
 801f678:	6023      	str	r3, [r4, #0]
 801f67a:	f7e4 fc18 	bl	8003eae <_fstat>
 801f67e:	1c43      	adds	r3, r0, #1
 801f680:	d102      	bne.n	801f688 <_fstat_r+0x1c>
 801f682:	6823      	ldr	r3, [r4, #0]
 801f684:	b103      	cbz	r3, 801f688 <_fstat_r+0x1c>
 801f686:	602b      	str	r3, [r5, #0]
 801f688:	bd38      	pop	{r3, r4, r5, pc}
 801f68a:	bf00      	nop
 801f68c:	20008308 	.word	0x20008308

0801f690 <_isatty_r>:
 801f690:	b538      	push	{r3, r4, r5, lr}
 801f692:	4c06      	ldr	r4, [pc, #24]	; (801f6ac <_isatty_r+0x1c>)
 801f694:	2300      	movs	r3, #0
 801f696:	4605      	mov	r5, r0
 801f698:	4608      	mov	r0, r1
 801f69a:	6023      	str	r3, [r4, #0]
 801f69c:	f7e4 fc17 	bl	8003ece <_isatty>
 801f6a0:	1c43      	adds	r3, r0, #1
 801f6a2:	d102      	bne.n	801f6aa <_isatty_r+0x1a>
 801f6a4:	6823      	ldr	r3, [r4, #0]
 801f6a6:	b103      	cbz	r3, 801f6aa <_isatty_r+0x1a>
 801f6a8:	602b      	str	r3, [r5, #0]
 801f6aa:	bd38      	pop	{r3, r4, r5, pc}
 801f6ac:	20008308 	.word	0x20008308

0801f6b0 <_malloc_usable_size_r>:
 801f6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f6b4:	1f18      	subs	r0, r3, #4
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	bfbc      	itt	lt
 801f6ba:	580b      	ldrlt	r3, [r1, r0]
 801f6bc:	18c0      	addlt	r0, r0, r3
 801f6be:	4770      	bx	lr

0801f6c0 <pow>:
 801f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6c4:	ed2d 8b04 	vpush	{d8-d9}
 801f6c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801f99c <pow+0x2dc>
 801f6cc:	b08d      	sub	sp, #52	; 0x34
 801f6ce:	ec57 6b10 	vmov	r6, r7, d0
 801f6d2:	ec55 4b11 	vmov	r4, r5, d1
 801f6d6:	f000 f963 	bl	801f9a0 <__ieee754_pow>
 801f6da:	f999 3000 	ldrsb.w	r3, [r9]
 801f6de:	9300      	str	r3, [sp, #0]
 801f6e0:	3301      	adds	r3, #1
 801f6e2:	eeb0 8a40 	vmov.f32	s16, s0
 801f6e6:	eef0 8a60 	vmov.f32	s17, s1
 801f6ea:	46c8      	mov	r8, r9
 801f6ec:	d05f      	beq.n	801f7ae <pow+0xee>
 801f6ee:	4622      	mov	r2, r4
 801f6f0:	462b      	mov	r3, r5
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	4629      	mov	r1, r5
 801f6f6:	f7e1 fa29 	bl	8000b4c <__aeabi_dcmpun>
 801f6fa:	4683      	mov	fp, r0
 801f6fc:	2800      	cmp	r0, #0
 801f6fe:	d156      	bne.n	801f7ae <pow+0xee>
 801f700:	4632      	mov	r2, r6
 801f702:	463b      	mov	r3, r7
 801f704:	4630      	mov	r0, r6
 801f706:	4639      	mov	r1, r7
 801f708:	f7e1 fa20 	bl	8000b4c <__aeabi_dcmpun>
 801f70c:	9001      	str	r0, [sp, #4]
 801f70e:	b1e8      	cbz	r0, 801f74c <pow+0x8c>
 801f710:	2200      	movs	r2, #0
 801f712:	2300      	movs	r3, #0
 801f714:	4620      	mov	r0, r4
 801f716:	4629      	mov	r1, r5
 801f718:	f7e1 f9e6 	bl	8000ae8 <__aeabi_dcmpeq>
 801f71c:	2800      	cmp	r0, #0
 801f71e:	d046      	beq.n	801f7ae <pow+0xee>
 801f720:	2301      	movs	r3, #1
 801f722:	9302      	str	r3, [sp, #8]
 801f724:	4b96      	ldr	r3, [pc, #600]	; (801f980 <pow+0x2c0>)
 801f726:	9303      	str	r3, [sp, #12]
 801f728:	4b96      	ldr	r3, [pc, #600]	; (801f984 <pow+0x2c4>)
 801f72a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801f72e:	2200      	movs	r2, #0
 801f730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f734:	9b00      	ldr	r3, [sp, #0]
 801f736:	2b02      	cmp	r3, #2
 801f738:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f73c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f740:	d033      	beq.n	801f7aa <pow+0xea>
 801f742:	a802      	add	r0, sp, #8
 801f744:	f000 fefb 	bl	802053e <matherr>
 801f748:	bb48      	cbnz	r0, 801f79e <pow+0xde>
 801f74a:	e05d      	b.n	801f808 <pow+0x148>
 801f74c:	f04f 0a00 	mov.w	sl, #0
 801f750:	f04f 0b00 	mov.w	fp, #0
 801f754:	4652      	mov	r2, sl
 801f756:	465b      	mov	r3, fp
 801f758:	4630      	mov	r0, r6
 801f75a:	4639      	mov	r1, r7
 801f75c:	f7e1 f9c4 	bl	8000ae8 <__aeabi_dcmpeq>
 801f760:	ec4b ab19 	vmov	d9, sl, fp
 801f764:	2800      	cmp	r0, #0
 801f766:	d054      	beq.n	801f812 <pow+0x152>
 801f768:	4652      	mov	r2, sl
 801f76a:	465b      	mov	r3, fp
 801f76c:	4620      	mov	r0, r4
 801f76e:	4629      	mov	r1, r5
 801f770:	f7e1 f9ba 	bl	8000ae8 <__aeabi_dcmpeq>
 801f774:	4680      	mov	r8, r0
 801f776:	b318      	cbz	r0, 801f7c0 <pow+0x100>
 801f778:	2301      	movs	r3, #1
 801f77a:	9302      	str	r3, [sp, #8]
 801f77c:	4b80      	ldr	r3, [pc, #512]	; (801f980 <pow+0x2c0>)
 801f77e:	9303      	str	r3, [sp, #12]
 801f780:	9b01      	ldr	r3, [sp, #4]
 801f782:	930a      	str	r3, [sp, #40]	; 0x28
 801f784:	9b00      	ldr	r3, [sp, #0]
 801f786:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f78a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f78e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d0d5      	beq.n	801f742 <pow+0x82>
 801f796:	4b7b      	ldr	r3, [pc, #492]	; (801f984 <pow+0x2c4>)
 801f798:	2200      	movs	r2, #0
 801f79a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7a0:	b11b      	cbz	r3, 801f7aa <pow+0xea>
 801f7a2:	f000 ffe3 	bl	802076c <__errno>
 801f7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7a8:	6003      	str	r3, [r0, #0]
 801f7aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 801f7ae:	eeb0 0a48 	vmov.f32	s0, s16
 801f7b2:	eef0 0a68 	vmov.f32	s1, s17
 801f7b6:	b00d      	add	sp, #52	; 0x34
 801f7b8:	ecbd 8b04 	vpop	{d8-d9}
 801f7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7c0:	ec45 4b10 	vmov	d0, r4, r5
 801f7c4:	f000 feb3 	bl	802052e <finite>
 801f7c8:	2800      	cmp	r0, #0
 801f7ca:	d0f0      	beq.n	801f7ae <pow+0xee>
 801f7cc:	4652      	mov	r2, sl
 801f7ce:	465b      	mov	r3, fp
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	4629      	mov	r1, r5
 801f7d4:	f7e1 f992 	bl	8000afc <__aeabi_dcmplt>
 801f7d8:	2800      	cmp	r0, #0
 801f7da:	d0e8      	beq.n	801f7ae <pow+0xee>
 801f7dc:	2301      	movs	r3, #1
 801f7de:	9302      	str	r3, [sp, #8]
 801f7e0:	4b67      	ldr	r3, [pc, #412]	; (801f980 <pow+0x2c0>)
 801f7e2:	9303      	str	r3, [sp, #12]
 801f7e4:	f999 3000 	ldrsb.w	r3, [r9]
 801f7e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801f7ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f7f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f7f4:	b913      	cbnz	r3, 801f7fc <pow+0x13c>
 801f7f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801f7fa:	e7a2      	b.n	801f742 <pow+0x82>
 801f7fc:	4962      	ldr	r1, [pc, #392]	; (801f988 <pow+0x2c8>)
 801f7fe:	2000      	movs	r0, #0
 801f800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f804:	2b02      	cmp	r3, #2
 801f806:	d19c      	bne.n	801f742 <pow+0x82>
 801f808:	f000 ffb0 	bl	802076c <__errno>
 801f80c:	2321      	movs	r3, #33	; 0x21
 801f80e:	6003      	str	r3, [r0, #0]
 801f810:	e7c5      	b.n	801f79e <pow+0xde>
 801f812:	eeb0 0a48 	vmov.f32	s0, s16
 801f816:	eef0 0a68 	vmov.f32	s1, s17
 801f81a:	f000 fe88 	bl	802052e <finite>
 801f81e:	9000      	str	r0, [sp, #0]
 801f820:	2800      	cmp	r0, #0
 801f822:	f040 8081 	bne.w	801f928 <pow+0x268>
 801f826:	ec47 6b10 	vmov	d0, r6, r7
 801f82a:	f000 fe80 	bl	802052e <finite>
 801f82e:	2800      	cmp	r0, #0
 801f830:	d07a      	beq.n	801f928 <pow+0x268>
 801f832:	ec45 4b10 	vmov	d0, r4, r5
 801f836:	f000 fe7a 	bl	802052e <finite>
 801f83a:	2800      	cmp	r0, #0
 801f83c:	d074      	beq.n	801f928 <pow+0x268>
 801f83e:	ec53 2b18 	vmov	r2, r3, d8
 801f842:	ee18 0a10 	vmov	r0, s16
 801f846:	4619      	mov	r1, r3
 801f848:	f7e1 f980 	bl	8000b4c <__aeabi_dcmpun>
 801f84c:	f999 9000 	ldrsb.w	r9, [r9]
 801f850:	4b4b      	ldr	r3, [pc, #300]	; (801f980 <pow+0x2c0>)
 801f852:	b1b0      	cbz	r0, 801f882 <pow+0x1c2>
 801f854:	2201      	movs	r2, #1
 801f856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f85a:	9b00      	ldr	r3, [sp, #0]
 801f85c:	930a      	str	r3, [sp, #40]	; 0x28
 801f85e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f862:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f866:	f1b9 0f00 	cmp.w	r9, #0
 801f86a:	d0c4      	beq.n	801f7f6 <pow+0x136>
 801f86c:	4652      	mov	r2, sl
 801f86e:	465b      	mov	r3, fp
 801f870:	4650      	mov	r0, sl
 801f872:	4659      	mov	r1, fp
 801f874:	f7e0 fffa 	bl	800086c <__aeabi_ddiv>
 801f878:	f1b9 0f02 	cmp.w	r9, #2
 801f87c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f880:	e7c1      	b.n	801f806 <pow+0x146>
 801f882:	2203      	movs	r2, #3
 801f884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f888:	900a      	str	r0, [sp, #40]	; 0x28
 801f88a:	4629      	mov	r1, r5
 801f88c:	4620      	mov	r0, r4
 801f88e:	2200      	movs	r2, #0
 801f890:	4b3e      	ldr	r3, [pc, #248]	; (801f98c <pow+0x2cc>)
 801f892:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f896:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f89a:	f7e0 febd 	bl	8000618 <__aeabi_dmul>
 801f89e:	4604      	mov	r4, r0
 801f8a0:	460d      	mov	r5, r1
 801f8a2:	f1b9 0f00 	cmp.w	r9, #0
 801f8a6:	d124      	bne.n	801f8f2 <pow+0x232>
 801f8a8:	4b39      	ldr	r3, [pc, #228]	; (801f990 <pow+0x2d0>)
 801f8aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801f8ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8b2:	4630      	mov	r0, r6
 801f8b4:	4652      	mov	r2, sl
 801f8b6:	465b      	mov	r3, fp
 801f8b8:	4639      	mov	r1, r7
 801f8ba:	f7e1 f91f 	bl	8000afc <__aeabi_dcmplt>
 801f8be:	2800      	cmp	r0, #0
 801f8c0:	d056      	beq.n	801f970 <pow+0x2b0>
 801f8c2:	ec45 4b10 	vmov	d0, r4, r5
 801f8c6:	f000 fe47 	bl	8020558 <rint>
 801f8ca:	4622      	mov	r2, r4
 801f8cc:	462b      	mov	r3, r5
 801f8ce:	ec51 0b10 	vmov	r0, r1, d0
 801f8d2:	f7e1 f909 	bl	8000ae8 <__aeabi_dcmpeq>
 801f8d6:	b920      	cbnz	r0, 801f8e2 <pow+0x222>
 801f8d8:	4b2e      	ldr	r3, [pc, #184]	; (801f994 <pow+0x2d4>)
 801f8da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801f8de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8e2:	f998 3000 	ldrsb.w	r3, [r8]
 801f8e6:	2b02      	cmp	r3, #2
 801f8e8:	d142      	bne.n	801f970 <pow+0x2b0>
 801f8ea:	f000 ff3f 	bl	802076c <__errno>
 801f8ee:	2322      	movs	r3, #34	; 0x22
 801f8f0:	e78d      	b.n	801f80e <pow+0x14e>
 801f8f2:	4b29      	ldr	r3, [pc, #164]	; (801f998 <pow+0x2d8>)
 801f8f4:	2200      	movs	r2, #0
 801f8f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8fa:	4630      	mov	r0, r6
 801f8fc:	4652      	mov	r2, sl
 801f8fe:	465b      	mov	r3, fp
 801f900:	4639      	mov	r1, r7
 801f902:	f7e1 f8fb 	bl	8000afc <__aeabi_dcmplt>
 801f906:	2800      	cmp	r0, #0
 801f908:	d0eb      	beq.n	801f8e2 <pow+0x222>
 801f90a:	ec45 4b10 	vmov	d0, r4, r5
 801f90e:	f000 fe23 	bl	8020558 <rint>
 801f912:	4622      	mov	r2, r4
 801f914:	462b      	mov	r3, r5
 801f916:	ec51 0b10 	vmov	r0, r1, d0
 801f91a:	f7e1 f8e5 	bl	8000ae8 <__aeabi_dcmpeq>
 801f91e:	2800      	cmp	r0, #0
 801f920:	d1df      	bne.n	801f8e2 <pow+0x222>
 801f922:	2200      	movs	r2, #0
 801f924:	4b18      	ldr	r3, [pc, #96]	; (801f988 <pow+0x2c8>)
 801f926:	e7da      	b.n	801f8de <pow+0x21e>
 801f928:	2200      	movs	r2, #0
 801f92a:	2300      	movs	r3, #0
 801f92c:	ec51 0b18 	vmov	r0, r1, d8
 801f930:	f7e1 f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 801f934:	2800      	cmp	r0, #0
 801f936:	f43f af3a 	beq.w	801f7ae <pow+0xee>
 801f93a:	ec47 6b10 	vmov	d0, r6, r7
 801f93e:	f000 fdf6 	bl	802052e <finite>
 801f942:	2800      	cmp	r0, #0
 801f944:	f43f af33 	beq.w	801f7ae <pow+0xee>
 801f948:	ec45 4b10 	vmov	d0, r4, r5
 801f94c:	f000 fdef 	bl	802052e <finite>
 801f950:	2800      	cmp	r0, #0
 801f952:	f43f af2c 	beq.w	801f7ae <pow+0xee>
 801f956:	2304      	movs	r3, #4
 801f958:	9302      	str	r3, [sp, #8]
 801f95a:	4b09      	ldr	r3, [pc, #36]	; (801f980 <pow+0x2c0>)
 801f95c:	9303      	str	r3, [sp, #12]
 801f95e:	2300      	movs	r3, #0
 801f960:	930a      	str	r3, [sp, #40]	; 0x28
 801f962:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f966:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f96a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801f96e:	e7b8      	b.n	801f8e2 <pow+0x222>
 801f970:	a802      	add	r0, sp, #8
 801f972:	f000 fde4 	bl	802053e <matherr>
 801f976:	2800      	cmp	r0, #0
 801f978:	f47f af11 	bne.w	801f79e <pow+0xde>
 801f97c:	e7b5      	b.n	801f8ea <pow+0x22a>
 801f97e:	bf00      	nop
 801f980:	08024cad 	.word	0x08024cad
 801f984:	3ff00000 	.word	0x3ff00000
 801f988:	fff00000 	.word	0xfff00000
 801f98c:	3fe00000 	.word	0x3fe00000
 801f990:	47efffff 	.word	0x47efffff
 801f994:	c7efffff 	.word	0xc7efffff
 801f998:	7ff00000 	.word	0x7ff00000
 801f99c:	20000254 	.word	0x20000254

0801f9a0 <__ieee754_pow>:
 801f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a4:	b091      	sub	sp, #68	; 0x44
 801f9a6:	ed8d 1b00 	vstr	d1, [sp]
 801f9aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 801f9ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801f9b2:	ea58 0302 	orrs.w	r3, r8, r2
 801f9b6:	ec57 6b10 	vmov	r6, r7, d0
 801f9ba:	f000 84be 	beq.w	802033a <__ieee754_pow+0x99a>
 801f9be:	4b7a      	ldr	r3, [pc, #488]	; (801fba8 <__ieee754_pow+0x208>)
 801f9c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801f9c4:	429c      	cmp	r4, r3
 801f9c6:	463d      	mov	r5, r7
 801f9c8:	ee10 aa10 	vmov	sl, s0
 801f9cc:	dc09      	bgt.n	801f9e2 <__ieee754_pow+0x42>
 801f9ce:	d103      	bne.n	801f9d8 <__ieee754_pow+0x38>
 801f9d0:	b93e      	cbnz	r6, 801f9e2 <__ieee754_pow+0x42>
 801f9d2:	45a0      	cmp	r8, r4
 801f9d4:	dc0d      	bgt.n	801f9f2 <__ieee754_pow+0x52>
 801f9d6:	e001      	b.n	801f9dc <__ieee754_pow+0x3c>
 801f9d8:	4598      	cmp	r8, r3
 801f9da:	dc02      	bgt.n	801f9e2 <__ieee754_pow+0x42>
 801f9dc:	4598      	cmp	r8, r3
 801f9de:	d10e      	bne.n	801f9fe <__ieee754_pow+0x5e>
 801f9e0:	b16a      	cbz	r2, 801f9fe <__ieee754_pow+0x5e>
 801f9e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f9e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f9ea:	ea54 030a 	orrs.w	r3, r4, sl
 801f9ee:	f000 84a4 	beq.w	802033a <__ieee754_pow+0x99a>
 801f9f2:	486e      	ldr	r0, [pc, #440]	; (801fbac <__ieee754_pow+0x20c>)
 801f9f4:	b011      	add	sp, #68	; 0x44
 801f9f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9fa:	f000 bda5 	b.w	8020548 <nan>
 801f9fe:	2d00      	cmp	r5, #0
 801fa00:	da53      	bge.n	801faaa <__ieee754_pow+0x10a>
 801fa02:	4b6b      	ldr	r3, [pc, #428]	; (801fbb0 <__ieee754_pow+0x210>)
 801fa04:	4598      	cmp	r8, r3
 801fa06:	dc4d      	bgt.n	801faa4 <__ieee754_pow+0x104>
 801fa08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801fa0c:	4598      	cmp	r8, r3
 801fa0e:	dd4c      	ble.n	801faaa <__ieee754_pow+0x10a>
 801fa10:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fa14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fa18:	2b14      	cmp	r3, #20
 801fa1a:	dd26      	ble.n	801fa6a <__ieee754_pow+0xca>
 801fa1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801fa20:	fa22 f103 	lsr.w	r1, r2, r3
 801fa24:	fa01 f303 	lsl.w	r3, r1, r3
 801fa28:	4293      	cmp	r3, r2
 801fa2a:	d13e      	bne.n	801faaa <__ieee754_pow+0x10a>
 801fa2c:	f001 0101 	and.w	r1, r1, #1
 801fa30:	f1c1 0b02 	rsb	fp, r1, #2
 801fa34:	2a00      	cmp	r2, #0
 801fa36:	d15b      	bne.n	801faf0 <__ieee754_pow+0x150>
 801fa38:	4b5b      	ldr	r3, [pc, #364]	; (801fba8 <__ieee754_pow+0x208>)
 801fa3a:	4598      	cmp	r8, r3
 801fa3c:	d124      	bne.n	801fa88 <__ieee754_pow+0xe8>
 801fa3e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801fa42:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801fa46:	ea53 030a 	orrs.w	r3, r3, sl
 801fa4a:	f000 8476 	beq.w	802033a <__ieee754_pow+0x99a>
 801fa4e:	4b59      	ldr	r3, [pc, #356]	; (801fbb4 <__ieee754_pow+0x214>)
 801fa50:	429c      	cmp	r4, r3
 801fa52:	dd2d      	ble.n	801fab0 <__ieee754_pow+0x110>
 801fa54:	f1b9 0f00 	cmp.w	r9, #0
 801fa58:	f280 8473 	bge.w	8020342 <__ieee754_pow+0x9a2>
 801fa5c:	2000      	movs	r0, #0
 801fa5e:	2100      	movs	r1, #0
 801fa60:	ec41 0b10 	vmov	d0, r0, r1
 801fa64:	b011      	add	sp, #68	; 0x44
 801fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa6a:	2a00      	cmp	r2, #0
 801fa6c:	d13e      	bne.n	801faec <__ieee754_pow+0x14c>
 801fa6e:	f1c3 0314 	rsb	r3, r3, #20
 801fa72:	fa48 f103 	asr.w	r1, r8, r3
 801fa76:	fa01 f303 	lsl.w	r3, r1, r3
 801fa7a:	4543      	cmp	r3, r8
 801fa7c:	f040 8469 	bne.w	8020352 <__ieee754_pow+0x9b2>
 801fa80:	f001 0101 	and.w	r1, r1, #1
 801fa84:	f1c1 0b02 	rsb	fp, r1, #2
 801fa88:	4b4b      	ldr	r3, [pc, #300]	; (801fbb8 <__ieee754_pow+0x218>)
 801fa8a:	4598      	cmp	r8, r3
 801fa8c:	d118      	bne.n	801fac0 <__ieee754_pow+0x120>
 801fa8e:	f1b9 0f00 	cmp.w	r9, #0
 801fa92:	f280 845a 	bge.w	802034a <__ieee754_pow+0x9aa>
 801fa96:	4948      	ldr	r1, [pc, #288]	; (801fbb8 <__ieee754_pow+0x218>)
 801fa98:	4632      	mov	r2, r6
 801fa9a:	463b      	mov	r3, r7
 801fa9c:	2000      	movs	r0, #0
 801fa9e:	f7e0 fee5 	bl	800086c <__aeabi_ddiv>
 801faa2:	e7dd      	b.n	801fa60 <__ieee754_pow+0xc0>
 801faa4:	f04f 0b02 	mov.w	fp, #2
 801faa8:	e7c4      	b.n	801fa34 <__ieee754_pow+0x94>
 801faaa:	f04f 0b00 	mov.w	fp, #0
 801faae:	e7c1      	b.n	801fa34 <__ieee754_pow+0x94>
 801fab0:	f1b9 0f00 	cmp.w	r9, #0
 801fab4:	dad2      	bge.n	801fa5c <__ieee754_pow+0xbc>
 801fab6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801faba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fabe:	e7cf      	b.n	801fa60 <__ieee754_pow+0xc0>
 801fac0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801fac4:	d106      	bne.n	801fad4 <__ieee754_pow+0x134>
 801fac6:	4632      	mov	r2, r6
 801fac8:	463b      	mov	r3, r7
 801faca:	4610      	mov	r0, r2
 801facc:	4619      	mov	r1, r3
 801face:	f7e0 fda3 	bl	8000618 <__aeabi_dmul>
 801fad2:	e7c5      	b.n	801fa60 <__ieee754_pow+0xc0>
 801fad4:	4b39      	ldr	r3, [pc, #228]	; (801fbbc <__ieee754_pow+0x21c>)
 801fad6:	4599      	cmp	r9, r3
 801fad8:	d10a      	bne.n	801faf0 <__ieee754_pow+0x150>
 801fada:	2d00      	cmp	r5, #0
 801fadc:	db08      	blt.n	801faf0 <__ieee754_pow+0x150>
 801fade:	ec47 6b10 	vmov	d0, r6, r7
 801fae2:	b011      	add	sp, #68	; 0x44
 801fae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae8:	f000 bc68 	b.w	80203bc <__ieee754_sqrt>
 801faec:	f04f 0b00 	mov.w	fp, #0
 801faf0:	ec47 6b10 	vmov	d0, r6, r7
 801faf4:	f000 fd12 	bl	802051c <fabs>
 801faf8:	ec51 0b10 	vmov	r0, r1, d0
 801fafc:	f1ba 0f00 	cmp.w	sl, #0
 801fb00:	d127      	bne.n	801fb52 <__ieee754_pow+0x1b2>
 801fb02:	b124      	cbz	r4, 801fb0e <__ieee754_pow+0x16e>
 801fb04:	4b2c      	ldr	r3, [pc, #176]	; (801fbb8 <__ieee754_pow+0x218>)
 801fb06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d121      	bne.n	801fb52 <__ieee754_pow+0x1b2>
 801fb0e:	f1b9 0f00 	cmp.w	r9, #0
 801fb12:	da05      	bge.n	801fb20 <__ieee754_pow+0x180>
 801fb14:	4602      	mov	r2, r0
 801fb16:	460b      	mov	r3, r1
 801fb18:	2000      	movs	r0, #0
 801fb1a:	4927      	ldr	r1, [pc, #156]	; (801fbb8 <__ieee754_pow+0x218>)
 801fb1c:	f7e0 fea6 	bl	800086c <__aeabi_ddiv>
 801fb20:	2d00      	cmp	r5, #0
 801fb22:	da9d      	bge.n	801fa60 <__ieee754_pow+0xc0>
 801fb24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801fb28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801fb2c:	ea54 030b 	orrs.w	r3, r4, fp
 801fb30:	d108      	bne.n	801fb44 <__ieee754_pow+0x1a4>
 801fb32:	4602      	mov	r2, r0
 801fb34:	460b      	mov	r3, r1
 801fb36:	4610      	mov	r0, r2
 801fb38:	4619      	mov	r1, r3
 801fb3a:	f7e0 fbb5 	bl	80002a8 <__aeabi_dsub>
 801fb3e:	4602      	mov	r2, r0
 801fb40:	460b      	mov	r3, r1
 801fb42:	e7ac      	b.n	801fa9e <__ieee754_pow+0xfe>
 801fb44:	f1bb 0f01 	cmp.w	fp, #1
 801fb48:	d18a      	bne.n	801fa60 <__ieee754_pow+0xc0>
 801fb4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fb4e:	4619      	mov	r1, r3
 801fb50:	e786      	b.n	801fa60 <__ieee754_pow+0xc0>
 801fb52:	0fed      	lsrs	r5, r5, #31
 801fb54:	1e6b      	subs	r3, r5, #1
 801fb56:	930d      	str	r3, [sp, #52]	; 0x34
 801fb58:	ea5b 0303 	orrs.w	r3, fp, r3
 801fb5c:	d102      	bne.n	801fb64 <__ieee754_pow+0x1c4>
 801fb5e:	4632      	mov	r2, r6
 801fb60:	463b      	mov	r3, r7
 801fb62:	e7e8      	b.n	801fb36 <__ieee754_pow+0x196>
 801fb64:	4b16      	ldr	r3, [pc, #88]	; (801fbc0 <__ieee754_pow+0x220>)
 801fb66:	4598      	cmp	r8, r3
 801fb68:	f340 80fe 	ble.w	801fd68 <__ieee754_pow+0x3c8>
 801fb6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801fb70:	4598      	cmp	r8, r3
 801fb72:	dd0a      	ble.n	801fb8a <__ieee754_pow+0x1ea>
 801fb74:	4b0f      	ldr	r3, [pc, #60]	; (801fbb4 <__ieee754_pow+0x214>)
 801fb76:	429c      	cmp	r4, r3
 801fb78:	dc0d      	bgt.n	801fb96 <__ieee754_pow+0x1f6>
 801fb7a:	f1b9 0f00 	cmp.w	r9, #0
 801fb7e:	f6bf af6d 	bge.w	801fa5c <__ieee754_pow+0xbc>
 801fb82:	a307      	add	r3, pc, #28	; (adr r3, 801fba0 <__ieee754_pow+0x200>)
 801fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb88:	e79f      	b.n	801faca <__ieee754_pow+0x12a>
 801fb8a:	4b0e      	ldr	r3, [pc, #56]	; (801fbc4 <__ieee754_pow+0x224>)
 801fb8c:	429c      	cmp	r4, r3
 801fb8e:	ddf4      	ble.n	801fb7a <__ieee754_pow+0x1da>
 801fb90:	4b09      	ldr	r3, [pc, #36]	; (801fbb8 <__ieee754_pow+0x218>)
 801fb92:	429c      	cmp	r4, r3
 801fb94:	dd18      	ble.n	801fbc8 <__ieee754_pow+0x228>
 801fb96:	f1b9 0f00 	cmp.w	r9, #0
 801fb9a:	dcf2      	bgt.n	801fb82 <__ieee754_pow+0x1e2>
 801fb9c:	e75e      	b.n	801fa5c <__ieee754_pow+0xbc>
 801fb9e:	bf00      	nop
 801fba0:	8800759c 	.word	0x8800759c
 801fba4:	7e37e43c 	.word	0x7e37e43c
 801fba8:	7ff00000 	.word	0x7ff00000
 801fbac:	08024ca1 	.word	0x08024ca1
 801fbb0:	433fffff 	.word	0x433fffff
 801fbb4:	3fefffff 	.word	0x3fefffff
 801fbb8:	3ff00000 	.word	0x3ff00000
 801fbbc:	3fe00000 	.word	0x3fe00000
 801fbc0:	41e00000 	.word	0x41e00000
 801fbc4:	3feffffe 	.word	0x3feffffe
 801fbc8:	2200      	movs	r2, #0
 801fbca:	4b63      	ldr	r3, [pc, #396]	; (801fd58 <__ieee754_pow+0x3b8>)
 801fbcc:	f7e0 fb6c 	bl	80002a8 <__aeabi_dsub>
 801fbd0:	a355      	add	r3, pc, #340	; (adr r3, 801fd28 <__ieee754_pow+0x388>)
 801fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd6:	4604      	mov	r4, r0
 801fbd8:	460d      	mov	r5, r1
 801fbda:	f7e0 fd1d 	bl	8000618 <__aeabi_dmul>
 801fbde:	a354      	add	r3, pc, #336	; (adr r3, 801fd30 <__ieee754_pow+0x390>)
 801fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbe4:	4606      	mov	r6, r0
 801fbe6:	460f      	mov	r7, r1
 801fbe8:	4620      	mov	r0, r4
 801fbea:	4629      	mov	r1, r5
 801fbec:	f7e0 fd14 	bl	8000618 <__aeabi_dmul>
 801fbf0:	2200      	movs	r2, #0
 801fbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fbf6:	4b59      	ldr	r3, [pc, #356]	; (801fd5c <__ieee754_pow+0x3bc>)
 801fbf8:	4620      	mov	r0, r4
 801fbfa:	4629      	mov	r1, r5
 801fbfc:	f7e0 fd0c 	bl	8000618 <__aeabi_dmul>
 801fc00:	4602      	mov	r2, r0
 801fc02:	460b      	mov	r3, r1
 801fc04:	a14c      	add	r1, pc, #304	; (adr r1, 801fd38 <__ieee754_pow+0x398>)
 801fc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc0a:	f7e0 fb4d 	bl	80002a8 <__aeabi_dsub>
 801fc0e:	4622      	mov	r2, r4
 801fc10:	462b      	mov	r3, r5
 801fc12:	f7e0 fd01 	bl	8000618 <__aeabi_dmul>
 801fc16:	4602      	mov	r2, r0
 801fc18:	460b      	mov	r3, r1
 801fc1a:	2000      	movs	r0, #0
 801fc1c:	4950      	ldr	r1, [pc, #320]	; (801fd60 <__ieee754_pow+0x3c0>)
 801fc1e:	f7e0 fb43 	bl	80002a8 <__aeabi_dsub>
 801fc22:	4622      	mov	r2, r4
 801fc24:	462b      	mov	r3, r5
 801fc26:	4680      	mov	r8, r0
 801fc28:	4689      	mov	r9, r1
 801fc2a:	4620      	mov	r0, r4
 801fc2c:	4629      	mov	r1, r5
 801fc2e:	f7e0 fcf3 	bl	8000618 <__aeabi_dmul>
 801fc32:	4602      	mov	r2, r0
 801fc34:	460b      	mov	r3, r1
 801fc36:	4640      	mov	r0, r8
 801fc38:	4649      	mov	r1, r9
 801fc3a:	f7e0 fced 	bl	8000618 <__aeabi_dmul>
 801fc3e:	a340      	add	r3, pc, #256	; (adr r3, 801fd40 <__ieee754_pow+0x3a0>)
 801fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc44:	f7e0 fce8 	bl	8000618 <__aeabi_dmul>
 801fc48:	4602      	mov	r2, r0
 801fc4a:	460b      	mov	r3, r1
 801fc4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fc50:	f7e0 fb2a 	bl	80002a8 <__aeabi_dsub>
 801fc54:	4602      	mov	r2, r0
 801fc56:	460b      	mov	r3, r1
 801fc58:	4604      	mov	r4, r0
 801fc5a:	460d      	mov	r5, r1
 801fc5c:	4630      	mov	r0, r6
 801fc5e:	4639      	mov	r1, r7
 801fc60:	f7e0 fb24 	bl	80002ac <__adddf3>
 801fc64:	2000      	movs	r0, #0
 801fc66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fc6a:	4632      	mov	r2, r6
 801fc6c:	463b      	mov	r3, r7
 801fc6e:	f7e0 fb1b 	bl	80002a8 <__aeabi_dsub>
 801fc72:	4602      	mov	r2, r0
 801fc74:	460b      	mov	r3, r1
 801fc76:	4620      	mov	r0, r4
 801fc78:	4629      	mov	r1, r5
 801fc7a:	f7e0 fb15 	bl	80002a8 <__aeabi_dsub>
 801fc7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc80:	f10b 33ff 	add.w	r3, fp, #4294967295
 801fc84:	4313      	orrs	r3, r2
 801fc86:	4606      	mov	r6, r0
 801fc88:	460f      	mov	r7, r1
 801fc8a:	f040 81eb 	bne.w	8020064 <__ieee754_pow+0x6c4>
 801fc8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801fd48 <__ieee754_pow+0x3a8>
 801fc92:	e9dd 4500 	ldrd	r4, r5, [sp]
 801fc96:	2400      	movs	r4, #0
 801fc98:	4622      	mov	r2, r4
 801fc9a:	462b      	mov	r3, r5
 801fc9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fca0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801fca4:	f7e0 fb00 	bl	80002a8 <__aeabi_dsub>
 801fca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fcac:	f7e0 fcb4 	bl	8000618 <__aeabi_dmul>
 801fcb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fcb4:	4680      	mov	r8, r0
 801fcb6:	4689      	mov	r9, r1
 801fcb8:	4630      	mov	r0, r6
 801fcba:	4639      	mov	r1, r7
 801fcbc:	f7e0 fcac 	bl	8000618 <__aeabi_dmul>
 801fcc0:	4602      	mov	r2, r0
 801fcc2:	460b      	mov	r3, r1
 801fcc4:	4640      	mov	r0, r8
 801fcc6:	4649      	mov	r1, r9
 801fcc8:	f7e0 faf0 	bl	80002ac <__adddf3>
 801fccc:	4622      	mov	r2, r4
 801fcce:	462b      	mov	r3, r5
 801fcd0:	4680      	mov	r8, r0
 801fcd2:	4689      	mov	r9, r1
 801fcd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fcd8:	f7e0 fc9e 	bl	8000618 <__aeabi_dmul>
 801fcdc:	460b      	mov	r3, r1
 801fcde:	4604      	mov	r4, r0
 801fce0:	460d      	mov	r5, r1
 801fce2:	4602      	mov	r2, r0
 801fce4:	4649      	mov	r1, r9
 801fce6:	4640      	mov	r0, r8
 801fce8:	e9cd 4500 	strd	r4, r5, [sp]
 801fcec:	f7e0 fade 	bl	80002ac <__adddf3>
 801fcf0:	4b1c      	ldr	r3, [pc, #112]	; (801fd64 <__ieee754_pow+0x3c4>)
 801fcf2:	4299      	cmp	r1, r3
 801fcf4:	4606      	mov	r6, r0
 801fcf6:	460f      	mov	r7, r1
 801fcf8:	468b      	mov	fp, r1
 801fcfa:	f340 82f7 	ble.w	80202ec <__ieee754_pow+0x94c>
 801fcfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801fd02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801fd06:	4303      	orrs	r3, r0
 801fd08:	f000 81ea 	beq.w	80200e0 <__ieee754_pow+0x740>
 801fd0c:	a310      	add	r3, pc, #64	; (adr r3, 801fd50 <__ieee754_pow+0x3b0>)
 801fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd16:	f7e0 fc7f 	bl	8000618 <__aeabi_dmul>
 801fd1a:	a30d      	add	r3, pc, #52	; (adr r3, 801fd50 <__ieee754_pow+0x3b0>)
 801fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd20:	e6d5      	b.n	801face <__ieee754_pow+0x12e>
 801fd22:	bf00      	nop
 801fd24:	f3af 8000 	nop.w
 801fd28:	60000000 	.word	0x60000000
 801fd2c:	3ff71547 	.word	0x3ff71547
 801fd30:	f85ddf44 	.word	0xf85ddf44
 801fd34:	3e54ae0b 	.word	0x3e54ae0b
 801fd38:	55555555 	.word	0x55555555
 801fd3c:	3fd55555 	.word	0x3fd55555
 801fd40:	652b82fe 	.word	0x652b82fe
 801fd44:	3ff71547 	.word	0x3ff71547
 801fd48:	00000000 	.word	0x00000000
 801fd4c:	bff00000 	.word	0xbff00000
 801fd50:	8800759c 	.word	0x8800759c
 801fd54:	7e37e43c 	.word	0x7e37e43c
 801fd58:	3ff00000 	.word	0x3ff00000
 801fd5c:	3fd00000 	.word	0x3fd00000
 801fd60:	3fe00000 	.word	0x3fe00000
 801fd64:	408fffff 	.word	0x408fffff
 801fd68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801fd6c:	f04f 0200 	mov.w	r2, #0
 801fd70:	da05      	bge.n	801fd7e <__ieee754_pow+0x3de>
 801fd72:	4bd3      	ldr	r3, [pc, #844]	; (80200c0 <__ieee754_pow+0x720>)
 801fd74:	f7e0 fc50 	bl	8000618 <__aeabi_dmul>
 801fd78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801fd7c:	460c      	mov	r4, r1
 801fd7e:	1523      	asrs	r3, r4, #20
 801fd80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fd84:	4413      	add	r3, r2
 801fd86:	9309      	str	r3, [sp, #36]	; 0x24
 801fd88:	4bce      	ldr	r3, [pc, #824]	; (80200c4 <__ieee754_pow+0x724>)
 801fd8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801fd8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801fd92:	429c      	cmp	r4, r3
 801fd94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801fd98:	dd08      	ble.n	801fdac <__ieee754_pow+0x40c>
 801fd9a:	4bcb      	ldr	r3, [pc, #812]	; (80200c8 <__ieee754_pow+0x728>)
 801fd9c:	429c      	cmp	r4, r3
 801fd9e:	f340 815e 	ble.w	802005e <__ieee754_pow+0x6be>
 801fda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fda4:	3301      	adds	r3, #1
 801fda6:	9309      	str	r3, [sp, #36]	; 0x24
 801fda8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801fdac:	f04f 0a00 	mov.w	sl, #0
 801fdb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801fdb4:	930c      	str	r3, [sp, #48]	; 0x30
 801fdb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fdb8:	4bc4      	ldr	r3, [pc, #784]	; (80200cc <__ieee754_pow+0x72c>)
 801fdba:	4413      	add	r3, r2
 801fdbc:	ed93 7b00 	vldr	d7, [r3]
 801fdc0:	4629      	mov	r1, r5
 801fdc2:	ec53 2b17 	vmov	r2, r3, d7
 801fdc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fdca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801fdce:	f7e0 fa6b 	bl	80002a8 <__aeabi_dsub>
 801fdd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801fdd6:	4606      	mov	r6, r0
 801fdd8:	460f      	mov	r7, r1
 801fdda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fdde:	f7e0 fa65 	bl	80002ac <__adddf3>
 801fde2:	4602      	mov	r2, r0
 801fde4:	460b      	mov	r3, r1
 801fde6:	2000      	movs	r0, #0
 801fde8:	49b9      	ldr	r1, [pc, #740]	; (80200d0 <__ieee754_pow+0x730>)
 801fdea:	f7e0 fd3f 	bl	800086c <__aeabi_ddiv>
 801fdee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801fdf2:	4602      	mov	r2, r0
 801fdf4:	460b      	mov	r3, r1
 801fdf6:	4630      	mov	r0, r6
 801fdf8:	4639      	mov	r1, r7
 801fdfa:	f7e0 fc0d 	bl	8000618 <__aeabi_dmul>
 801fdfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fe02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801fe06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801fe0a:	2300      	movs	r3, #0
 801fe0c:	9302      	str	r3, [sp, #8]
 801fe0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801fe12:	106d      	asrs	r5, r5, #1
 801fe14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801fe18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801fe1c:	2200      	movs	r2, #0
 801fe1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801fe22:	4640      	mov	r0, r8
 801fe24:	4649      	mov	r1, r9
 801fe26:	4614      	mov	r4, r2
 801fe28:	461d      	mov	r5, r3
 801fe2a:	f7e0 fbf5 	bl	8000618 <__aeabi_dmul>
 801fe2e:	4602      	mov	r2, r0
 801fe30:	460b      	mov	r3, r1
 801fe32:	4630      	mov	r0, r6
 801fe34:	4639      	mov	r1, r7
 801fe36:	f7e0 fa37 	bl	80002a8 <__aeabi_dsub>
 801fe3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fe3e:	4606      	mov	r6, r0
 801fe40:	460f      	mov	r7, r1
 801fe42:	4620      	mov	r0, r4
 801fe44:	4629      	mov	r1, r5
 801fe46:	f7e0 fa2f 	bl	80002a8 <__aeabi_dsub>
 801fe4a:	4602      	mov	r2, r0
 801fe4c:	460b      	mov	r3, r1
 801fe4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fe52:	f7e0 fa29 	bl	80002a8 <__aeabi_dsub>
 801fe56:	4642      	mov	r2, r8
 801fe58:	464b      	mov	r3, r9
 801fe5a:	f7e0 fbdd 	bl	8000618 <__aeabi_dmul>
 801fe5e:	4602      	mov	r2, r0
 801fe60:	460b      	mov	r3, r1
 801fe62:	4630      	mov	r0, r6
 801fe64:	4639      	mov	r1, r7
 801fe66:	f7e0 fa1f 	bl	80002a8 <__aeabi_dsub>
 801fe6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801fe6e:	f7e0 fbd3 	bl	8000618 <__aeabi_dmul>
 801fe72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fe76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fe7a:	4610      	mov	r0, r2
 801fe7c:	4619      	mov	r1, r3
 801fe7e:	f7e0 fbcb 	bl	8000618 <__aeabi_dmul>
 801fe82:	a37b      	add	r3, pc, #492	; (adr r3, 8020070 <__ieee754_pow+0x6d0>)
 801fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe88:	4604      	mov	r4, r0
 801fe8a:	460d      	mov	r5, r1
 801fe8c:	f7e0 fbc4 	bl	8000618 <__aeabi_dmul>
 801fe90:	a379      	add	r3, pc, #484	; (adr r3, 8020078 <__ieee754_pow+0x6d8>)
 801fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe96:	f7e0 fa09 	bl	80002ac <__adddf3>
 801fe9a:	4622      	mov	r2, r4
 801fe9c:	462b      	mov	r3, r5
 801fe9e:	f7e0 fbbb 	bl	8000618 <__aeabi_dmul>
 801fea2:	a377      	add	r3, pc, #476	; (adr r3, 8020080 <__ieee754_pow+0x6e0>)
 801fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea8:	f7e0 fa00 	bl	80002ac <__adddf3>
 801feac:	4622      	mov	r2, r4
 801feae:	462b      	mov	r3, r5
 801feb0:	f7e0 fbb2 	bl	8000618 <__aeabi_dmul>
 801feb4:	a374      	add	r3, pc, #464	; (adr r3, 8020088 <__ieee754_pow+0x6e8>)
 801feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feba:	f7e0 f9f7 	bl	80002ac <__adddf3>
 801febe:	4622      	mov	r2, r4
 801fec0:	462b      	mov	r3, r5
 801fec2:	f7e0 fba9 	bl	8000618 <__aeabi_dmul>
 801fec6:	a372      	add	r3, pc, #456	; (adr r3, 8020090 <__ieee754_pow+0x6f0>)
 801fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fecc:	f7e0 f9ee 	bl	80002ac <__adddf3>
 801fed0:	4622      	mov	r2, r4
 801fed2:	462b      	mov	r3, r5
 801fed4:	f7e0 fba0 	bl	8000618 <__aeabi_dmul>
 801fed8:	a36f      	add	r3, pc, #444	; (adr r3, 8020098 <__ieee754_pow+0x6f8>)
 801feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fede:	f7e0 f9e5 	bl	80002ac <__adddf3>
 801fee2:	4622      	mov	r2, r4
 801fee4:	4606      	mov	r6, r0
 801fee6:	460f      	mov	r7, r1
 801fee8:	462b      	mov	r3, r5
 801feea:	4620      	mov	r0, r4
 801feec:	4629      	mov	r1, r5
 801feee:	f7e0 fb93 	bl	8000618 <__aeabi_dmul>
 801fef2:	4602      	mov	r2, r0
 801fef4:	460b      	mov	r3, r1
 801fef6:	4630      	mov	r0, r6
 801fef8:	4639      	mov	r1, r7
 801fefa:	f7e0 fb8d 	bl	8000618 <__aeabi_dmul>
 801fefe:	4642      	mov	r2, r8
 801ff00:	4604      	mov	r4, r0
 801ff02:	460d      	mov	r5, r1
 801ff04:	464b      	mov	r3, r9
 801ff06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ff0a:	f7e0 f9cf 	bl	80002ac <__adddf3>
 801ff0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ff12:	f7e0 fb81 	bl	8000618 <__aeabi_dmul>
 801ff16:	4622      	mov	r2, r4
 801ff18:	462b      	mov	r3, r5
 801ff1a:	f7e0 f9c7 	bl	80002ac <__adddf3>
 801ff1e:	4642      	mov	r2, r8
 801ff20:	4606      	mov	r6, r0
 801ff22:	460f      	mov	r7, r1
 801ff24:	464b      	mov	r3, r9
 801ff26:	4640      	mov	r0, r8
 801ff28:	4649      	mov	r1, r9
 801ff2a:	f7e0 fb75 	bl	8000618 <__aeabi_dmul>
 801ff2e:	2200      	movs	r2, #0
 801ff30:	4b68      	ldr	r3, [pc, #416]	; (80200d4 <__ieee754_pow+0x734>)
 801ff32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ff36:	f7e0 f9b9 	bl	80002ac <__adddf3>
 801ff3a:	4632      	mov	r2, r6
 801ff3c:	463b      	mov	r3, r7
 801ff3e:	f7e0 f9b5 	bl	80002ac <__adddf3>
 801ff42:	9802      	ldr	r0, [sp, #8]
 801ff44:	460d      	mov	r5, r1
 801ff46:	4604      	mov	r4, r0
 801ff48:	4602      	mov	r2, r0
 801ff4a:	460b      	mov	r3, r1
 801ff4c:	4640      	mov	r0, r8
 801ff4e:	4649      	mov	r1, r9
 801ff50:	f7e0 fb62 	bl	8000618 <__aeabi_dmul>
 801ff54:	2200      	movs	r2, #0
 801ff56:	4680      	mov	r8, r0
 801ff58:	4689      	mov	r9, r1
 801ff5a:	4b5e      	ldr	r3, [pc, #376]	; (80200d4 <__ieee754_pow+0x734>)
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	4629      	mov	r1, r5
 801ff60:	f7e0 f9a2 	bl	80002a8 <__aeabi_dsub>
 801ff64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ff68:	f7e0 f99e 	bl	80002a8 <__aeabi_dsub>
 801ff6c:	4602      	mov	r2, r0
 801ff6e:	460b      	mov	r3, r1
 801ff70:	4630      	mov	r0, r6
 801ff72:	4639      	mov	r1, r7
 801ff74:	f7e0 f998 	bl	80002a8 <__aeabi_dsub>
 801ff78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ff7c:	f7e0 fb4c 	bl	8000618 <__aeabi_dmul>
 801ff80:	4622      	mov	r2, r4
 801ff82:	4606      	mov	r6, r0
 801ff84:	460f      	mov	r7, r1
 801ff86:	462b      	mov	r3, r5
 801ff88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ff8c:	f7e0 fb44 	bl	8000618 <__aeabi_dmul>
 801ff90:	4602      	mov	r2, r0
 801ff92:	460b      	mov	r3, r1
 801ff94:	4630      	mov	r0, r6
 801ff96:	4639      	mov	r1, r7
 801ff98:	f7e0 f988 	bl	80002ac <__adddf3>
 801ff9c:	4606      	mov	r6, r0
 801ff9e:	460f      	mov	r7, r1
 801ffa0:	4602      	mov	r2, r0
 801ffa2:	460b      	mov	r3, r1
 801ffa4:	4640      	mov	r0, r8
 801ffa6:	4649      	mov	r1, r9
 801ffa8:	f7e0 f980 	bl	80002ac <__adddf3>
 801ffac:	9802      	ldr	r0, [sp, #8]
 801ffae:	a33c      	add	r3, pc, #240	; (adr r3, 80200a0 <__ieee754_pow+0x700>)
 801ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffb4:	4604      	mov	r4, r0
 801ffb6:	460d      	mov	r5, r1
 801ffb8:	f7e0 fb2e 	bl	8000618 <__aeabi_dmul>
 801ffbc:	4642      	mov	r2, r8
 801ffbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ffc2:	464b      	mov	r3, r9
 801ffc4:	4620      	mov	r0, r4
 801ffc6:	4629      	mov	r1, r5
 801ffc8:	f7e0 f96e 	bl	80002a8 <__aeabi_dsub>
 801ffcc:	4602      	mov	r2, r0
 801ffce:	460b      	mov	r3, r1
 801ffd0:	4630      	mov	r0, r6
 801ffd2:	4639      	mov	r1, r7
 801ffd4:	f7e0 f968 	bl	80002a8 <__aeabi_dsub>
 801ffd8:	a333      	add	r3, pc, #204	; (adr r3, 80200a8 <__ieee754_pow+0x708>)
 801ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffde:	f7e0 fb1b 	bl	8000618 <__aeabi_dmul>
 801ffe2:	a333      	add	r3, pc, #204	; (adr r3, 80200b0 <__ieee754_pow+0x710>)
 801ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffe8:	4606      	mov	r6, r0
 801ffea:	460f      	mov	r7, r1
 801ffec:	4620      	mov	r0, r4
 801ffee:	4629      	mov	r1, r5
 801fff0:	f7e0 fb12 	bl	8000618 <__aeabi_dmul>
 801fff4:	4602      	mov	r2, r0
 801fff6:	460b      	mov	r3, r1
 801fff8:	4630      	mov	r0, r6
 801fffa:	4639      	mov	r1, r7
 801fffc:	f7e0 f956 	bl	80002ac <__adddf3>
 8020000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020002:	4b35      	ldr	r3, [pc, #212]	; (80200d8 <__ieee754_pow+0x738>)
 8020004:	4413      	add	r3, r2
 8020006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802000a:	f7e0 f94f 	bl	80002ac <__adddf3>
 802000e:	4604      	mov	r4, r0
 8020010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020012:	460d      	mov	r5, r1
 8020014:	f7e0 fa96 	bl	8000544 <__aeabi_i2d>
 8020018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802001a:	4b30      	ldr	r3, [pc, #192]	; (80200dc <__ieee754_pow+0x73c>)
 802001c:	4413      	add	r3, r2
 802001e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020022:	4606      	mov	r6, r0
 8020024:	460f      	mov	r7, r1
 8020026:	4622      	mov	r2, r4
 8020028:	462b      	mov	r3, r5
 802002a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802002e:	f7e0 f93d 	bl	80002ac <__adddf3>
 8020032:	4642      	mov	r2, r8
 8020034:	464b      	mov	r3, r9
 8020036:	f7e0 f939 	bl	80002ac <__adddf3>
 802003a:	4632      	mov	r2, r6
 802003c:	463b      	mov	r3, r7
 802003e:	f7e0 f935 	bl	80002ac <__adddf3>
 8020042:	9802      	ldr	r0, [sp, #8]
 8020044:	4632      	mov	r2, r6
 8020046:	463b      	mov	r3, r7
 8020048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802004c:	f7e0 f92c 	bl	80002a8 <__aeabi_dsub>
 8020050:	4642      	mov	r2, r8
 8020052:	464b      	mov	r3, r9
 8020054:	f7e0 f928 	bl	80002a8 <__aeabi_dsub>
 8020058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802005c:	e607      	b.n	801fc6e <__ieee754_pow+0x2ce>
 802005e:	f04f 0a01 	mov.w	sl, #1
 8020062:	e6a5      	b.n	801fdb0 <__ieee754_pow+0x410>
 8020064:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80200b8 <__ieee754_pow+0x718>
 8020068:	e613      	b.n	801fc92 <__ieee754_pow+0x2f2>
 802006a:	bf00      	nop
 802006c:	f3af 8000 	nop.w
 8020070:	4a454eef 	.word	0x4a454eef
 8020074:	3fca7e28 	.word	0x3fca7e28
 8020078:	93c9db65 	.word	0x93c9db65
 802007c:	3fcd864a 	.word	0x3fcd864a
 8020080:	a91d4101 	.word	0xa91d4101
 8020084:	3fd17460 	.word	0x3fd17460
 8020088:	518f264d 	.word	0x518f264d
 802008c:	3fd55555 	.word	0x3fd55555
 8020090:	db6fabff 	.word	0xdb6fabff
 8020094:	3fdb6db6 	.word	0x3fdb6db6
 8020098:	33333303 	.word	0x33333303
 802009c:	3fe33333 	.word	0x3fe33333
 80200a0:	e0000000 	.word	0xe0000000
 80200a4:	3feec709 	.word	0x3feec709
 80200a8:	dc3a03fd 	.word	0xdc3a03fd
 80200ac:	3feec709 	.word	0x3feec709
 80200b0:	145b01f5 	.word	0x145b01f5
 80200b4:	be3e2fe0 	.word	0xbe3e2fe0
 80200b8:	00000000 	.word	0x00000000
 80200bc:	3ff00000 	.word	0x3ff00000
 80200c0:	43400000 	.word	0x43400000
 80200c4:	0003988e 	.word	0x0003988e
 80200c8:	000bb679 	.word	0x000bb679
 80200cc:	08024cb8 	.word	0x08024cb8
 80200d0:	3ff00000 	.word	0x3ff00000
 80200d4:	40080000 	.word	0x40080000
 80200d8:	08024cd8 	.word	0x08024cd8
 80200dc:	08024cc8 	.word	0x08024cc8
 80200e0:	a3b4      	add	r3, pc, #720	; (adr r3, 80203b4 <__ieee754_pow+0xa14>)
 80200e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200e6:	4640      	mov	r0, r8
 80200e8:	4649      	mov	r1, r9
 80200ea:	f7e0 f8df 	bl	80002ac <__adddf3>
 80200ee:	4622      	mov	r2, r4
 80200f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80200f4:	462b      	mov	r3, r5
 80200f6:	4630      	mov	r0, r6
 80200f8:	4639      	mov	r1, r7
 80200fa:	f7e0 f8d5 	bl	80002a8 <__aeabi_dsub>
 80200fe:	4602      	mov	r2, r0
 8020100:	460b      	mov	r3, r1
 8020102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020106:	f7e0 fd17 	bl	8000b38 <__aeabi_dcmpgt>
 802010a:	2800      	cmp	r0, #0
 802010c:	f47f adfe 	bne.w	801fd0c <__ieee754_pow+0x36c>
 8020110:	4aa3      	ldr	r2, [pc, #652]	; (80203a0 <__ieee754_pow+0xa00>)
 8020112:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020116:	4293      	cmp	r3, r2
 8020118:	f340 810a 	ble.w	8020330 <__ieee754_pow+0x990>
 802011c:	151b      	asrs	r3, r3, #20
 802011e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020122:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020126:	fa4a f303 	asr.w	r3, sl, r3
 802012a:	445b      	add	r3, fp
 802012c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020130:	4e9c      	ldr	r6, [pc, #624]	; (80203a4 <__ieee754_pow+0xa04>)
 8020132:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020136:	4116      	asrs	r6, r2
 8020138:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802013c:	2000      	movs	r0, #0
 802013e:	ea23 0106 	bic.w	r1, r3, r6
 8020142:	f1c2 0214 	rsb	r2, r2, #20
 8020146:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802014a:	fa4a fa02 	asr.w	sl, sl, r2
 802014e:	f1bb 0f00 	cmp.w	fp, #0
 8020152:	4602      	mov	r2, r0
 8020154:	460b      	mov	r3, r1
 8020156:	4620      	mov	r0, r4
 8020158:	4629      	mov	r1, r5
 802015a:	bfb8      	it	lt
 802015c:	f1ca 0a00 	rsblt	sl, sl, #0
 8020160:	f7e0 f8a2 	bl	80002a8 <__aeabi_dsub>
 8020164:	e9cd 0100 	strd	r0, r1, [sp]
 8020168:	4642      	mov	r2, r8
 802016a:	464b      	mov	r3, r9
 802016c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020170:	f7e0 f89c 	bl	80002ac <__adddf3>
 8020174:	2000      	movs	r0, #0
 8020176:	a378      	add	r3, pc, #480	; (adr r3, 8020358 <__ieee754_pow+0x9b8>)
 8020178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802017c:	4604      	mov	r4, r0
 802017e:	460d      	mov	r5, r1
 8020180:	f7e0 fa4a 	bl	8000618 <__aeabi_dmul>
 8020184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020188:	4606      	mov	r6, r0
 802018a:	460f      	mov	r7, r1
 802018c:	4620      	mov	r0, r4
 802018e:	4629      	mov	r1, r5
 8020190:	f7e0 f88a 	bl	80002a8 <__aeabi_dsub>
 8020194:	4602      	mov	r2, r0
 8020196:	460b      	mov	r3, r1
 8020198:	4640      	mov	r0, r8
 802019a:	4649      	mov	r1, r9
 802019c:	f7e0 f884 	bl	80002a8 <__aeabi_dsub>
 80201a0:	a36f      	add	r3, pc, #444	; (adr r3, 8020360 <__ieee754_pow+0x9c0>)
 80201a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a6:	f7e0 fa37 	bl	8000618 <__aeabi_dmul>
 80201aa:	a36f      	add	r3, pc, #444	; (adr r3, 8020368 <__ieee754_pow+0x9c8>)
 80201ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b0:	4680      	mov	r8, r0
 80201b2:	4689      	mov	r9, r1
 80201b4:	4620      	mov	r0, r4
 80201b6:	4629      	mov	r1, r5
 80201b8:	f7e0 fa2e 	bl	8000618 <__aeabi_dmul>
 80201bc:	4602      	mov	r2, r0
 80201be:	460b      	mov	r3, r1
 80201c0:	4640      	mov	r0, r8
 80201c2:	4649      	mov	r1, r9
 80201c4:	f7e0 f872 	bl	80002ac <__adddf3>
 80201c8:	4604      	mov	r4, r0
 80201ca:	460d      	mov	r5, r1
 80201cc:	4602      	mov	r2, r0
 80201ce:	460b      	mov	r3, r1
 80201d0:	4630      	mov	r0, r6
 80201d2:	4639      	mov	r1, r7
 80201d4:	f7e0 f86a 	bl	80002ac <__adddf3>
 80201d8:	4632      	mov	r2, r6
 80201da:	463b      	mov	r3, r7
 80201dc:	4680      	mov	r8, r0
 80201de:	4689      	mov	r9, r1
 80201e0:	f7e0 f862 	bl	80002a8 <__aeabi_dsub>
 80201e4:	4602      	mov	r2, r0
 80201e6:	460b      	mov	r3, r1
 80201e8:	4620      	mov	r0, r4
 80201ea:	4629      	mov	r1, r5
 80201ec:	f7e0 f85c 	bl	80002a8 <__aeabi_dsub>
 80201f0:	4642      	mov	r2, r8
 80201f2:	4606      	mov	r6, r0
 80201f4:	460f      	mov	r7, r1
 80201f6:	464b      	mov	r3, r9
 80201f8:	4640      	mov	r0, r8
 80201fa:	4649      	mov	r1, r9
 80201fc:	f7e0 fa0c 	bl	8000618 <__aeabi_dmul>
 8020200:	a35b      	add	r3, pc, #364	; (adr r3, 8020370 <__ieee754_pow+0x9d0>)
 8020202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020206:	4604      	mov	r4, r0
 8020208:	460d      	mov	r5, r1
 802020a:	f7e0 fa05 	bl	8000618 <__aeabi_dmul>
 802020e:	a35a      	add	r3, pc, #360	; (adr r3, 8020378 <__ieee754_pow+0x9d8>)
 8020210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020214:	f7e0 f848 	bl	80002a8 <__aeabi_dsub>
 8020218:	4622      	mov	r2, r4
 802021a:	462b      	mov	r3, r5
 802021c:	f7e0 f9fc 	bl	8000618 <__aeabi_dmul>
 8020220:	a357      	add	r3, pc, #348	; (adr r3, 8020380 <__ieee754_pow+0x9e0>)
 8020222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020226:	f7e0 f841 	bl	80002ac <__adddf3>
 802022a:	4622      	mov	r2, r4
 802022c:	462b      	mov	r3, r5
 802022e:	f7e0 f9f3 	bl	8000618 <__aeabi_dmul>
 8020232:	a355      	add	r3, pc, #340	; (adr r3, 8020388 <__ieee754_pow+0x9e8>)
 8020234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020238:	f7e0 f836 	bl	80002a8 <__aeabi_dsub>
 802023c:	4622      	mov	r2, r4
 802023e:	462b      	mov	r3, r5
 8020240:	f7e0 f9ea 	bl	8000618 <__aeabi_dmul>
 8020244:	a352      	add	r3, pc, #328	; (adr r3, 8020390 <__ieee754_pow+0x9f0>)
 8020246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802024a:	f7e0 f82f 	bl	80002ac <__adddf3>
 802024e:	4622      	mov	r2, r4
 8020250:	462b      	mov	r3, r5
 8020252:	f7e0 f9e1 	bl	8000618 <__aeabi_dmul>
 8020256:	4602      	mov	r2, r0
 8020258:	460b      	mov	r3, r1
 802025a:	4640      	mov	r0, r8
 802025c:	4649      	mov	r1, r9
 802025e:	f7e0 f823 	bl	80002a8 <__aeabi_dsub>
 8020262:	4604      	mov	r4, r0
 8020264:	460d      	mov	r5, r1
 8020266:	4602      	mov	r2, r0
 8020268:	460b      	mov	r3, r1
 802026a:	4640      	mov	r0, r8
 802026c:	4649      	mov	r1, r9
 802026e:	f7e0 f9d3 	bl	8000618 <__aeabi_dmul>
 8020272:	2200      	movs	r2, #0
 8020274:	e9cd 0100 	strd	r0, r1, [sp]
 8020278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802027c:	4620      	mov	r0, r4
 802027e:	4629      	mov	r1, r5
 8020280:	f7e0 f812 	bl	80002a8 <__aeabi_dsub>
 8020284:	4602      	mov	r2, r0
 8020286:	460b      	mov	r3, r1
 8020288:	e9dd 0100 	ldrd	r0, r1, [sp]
 802028c:	f7e0 faee 	bl	800086c <__aeabi_ddiv>
 8020290:	4632      	mov	r2, r6
 8020292:	4604      	mov	r4, r0
 8020294:	460d      	mov	r5, r1
 8020296:	463b      	mov	r3, r7
 8020298:	4640      	mov	r0, r8
 802029a:	4649      	mov	r1, r9
 802029c:	f7e0 f9bc 	bl	8000618 <__aeabi_dmul>
 80202a0:	4632      	mov	r2, r6
 80202a2:	463b      	mov	r3, r7
 80202a4:	f7e0 f802 	bl	80002ac <__adddf3>
 80202a8:	4602      	mov	r2, r0
 80202aa:	460b      	mov	r3, r1
 80202ac:	4620      	mov	r0, r4
 80202ae:	4629      	mov	r1, r5
 80202b0:	f7df fffa 	bl	80002a8 <__aeabi_dsub>
 80202b4:	4642      	mov	r2, r8
 80202b6:	464b      	mov	r3, r9
 80202b8:	f7df fff6 	bl	80002a8 <__aeabi_dsub>
 80202bc:	4602      	mov	r2, r0
 80202be:	460b      	mov	r3, r1
 80202c0:	2000      	movs	r0, #0
 80202c2:	4939      	ldr	r1, [pc, #228]	; (80203a8 <__ieee754_pow+0xa08>)
 80202c4:	f7df fff0 	bl	80002a8 <__aeabi_dsub>
 80202c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80202cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80202d0:	4602      	mov	r2, r0
 80202d2:	460b      	mov	r3, r1
 80202d4:	da2f      	bge.n	8020336 <__ieee754_pow+0x996>
 80202d6:	4650      	mov	r0, sl
 80202d8:	ec43 2b10 	vmov	d0, r2, r3
 80202dc:	f000 f9c0 	bl	8020660 <scalbn>
 80202e0:	ec51 0b10 	vmov	r0, r1, d0
 80202e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202e8:	f7ff bbf1 	b.w	801face <__ieee754_pow+0x12e>
 80202ec:	4b2f      	ldr	r3, [pc, #188]	; (80203ac <__ieee754_pow+0xa0c>)
 80202ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80202f2:	429e      	cmp	r6, r3
 80202f4:	f77f af0c 	ble.w	8020110 <__ieee754_pow+0x770>
 80202f8:	4b2d      	ldr	r3, [pc, #180]	; (80203b0 <__ieee754_pow+0xa10>)
 80202fa:	440b      	add	r3, r1
 80202fc:	4303      	orrs	r3, r0
 80202fe:	d00b      	beq.n	8020318 <__ieee754_pow+0x978>
 8020300:	a325      	add	r3, pc, #148	; (adr r3, 8020398 <__ieee754_pow+0x9f8>)
 8020302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802030a:	f7e0 f985 	bl	8000618 <__aeabi_dmul>
 802030e:	a322      	add	r3, pc, #136	; (adr r3, 8020398 <__ieee754_pow+0x9f8>)
 8020310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020314:	f7ff bbdb 	b.w	801face <__ieee754_pow+0x12e>
 8020318:	4622      	mov	r2, r4
 802031a:	462b      	mov	r3, r5
 802031c:	f7df ffc4 	bl	80002a8 <__aeabi_dsub>
 8020320:	4642      	mov	r2, r8
 8020322:	464b      	mov	r3, r9
 8020324:	f7e0 fbfe 	bl	8000b24 <__aeabi_dcmpge>
 8020328:	2800      	cmp	r0, #0
 802032a:	f43f aef1 	beq.w	8020110 <__ieee754_pow+0x770>
 802032e:	e7e7      	b.n	8020300 <__ieee754_pow+0x960>
 8020330:	f04f 0a00 	mov.w	sl, #0
 8020334:	e718      	b.n	8020168 <__ieee754_pow+0x7c8>
 8020336:	4621      	mov	r1, r4
 8020338:	e7d4      	b.n	80202e4 <__ieee754_pow+0x944>
 802033a:	2000      	movs	r0, #0
 802033c:	491a      	ldr	r1, [pc, #104]	; (80203a8 <__ieee754_pow+0xa08>)
 802033e:	f7ff bb8f 	b.w	801fa60 <__ieee754_pow+0xc0>
 8020342:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020346:	f7ff bb8b 	b.w	801fa60 <__ieee754_pow+0xc0>
 802034a:	4630      	mov	r0, r6
 802034c:	4639      	mov	r1, r7
 802034e:	f7ff bb87 	b.w	801fa60 <__ieee754_pow+0xc0>
 8020352:	4693      	mov	fp, r2
 8020354:	f7ff bb98 	b.w	801fa88 <__ieee754_pow+0xe8>
 8020358:	00000000 	.word	0x00000000
 802035c:	3fe62e43 	.word	0x3fe62e43
 8020360:	fefa39ef 	.word	0xfefa39ef
 8020364:	3fe62e42 	.word	0x3fe62e42
 8020368:	0ca86c39 	.word	0x0ca86c39
 802036c:	be205c61 	.word	0xbe205c61
 8020370:	72bea4d0 	.word	0x72bea4d0
 8020374:	3e663769 	.word	0x3e663769
 8020378:	c5d26bf1 	.word	0xc5d26bf1
 802037c:	3ebbbd41 	.word	0x3ebbbd41
 8020380:	af25de2c 	.word	0xaf25de2c
 8020384:	3f11566a 	.word	0x3f11566a
 8020388:	16bebd93 	.word	0x16bebd93
 802038c:	3f66c16c 	.word	0x3f66c16c
 8020390:	5555553e 	.word	0x5555553e
 8020394:	3fc55555 	.word	0x3fc55555
 8020398:	c2f8f359 	.word	0xc2f8f359
 802039c:	01a56e1f 	.word	0x01a56e1f
 80203a0:	3fe00000 	.word	0x3fe00000
 80203a4:	000fffff 	.word	0x000fffff
 80203a8:	3ff00000 	.word	0x3ff00000
 80203ac:	4090cbff 	.word	0x4090cbff
 80203b0:	3f6f3400 	.word	0x3f6f3400
 80203b4:	652b82fe 	.word	0x652b82fe
 80203b8:	3c971547 	.word	0x3c971547

080203bc <__ieee754_sqrt>:
 80203bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203c0:	4955      	ldr	r1, [pc, #340]	; (8020518 <__ieee754_sqrt+0x15c>)
 80203c2:	ec55 4b10 	vmov	r4, r5, d0
 80203c6:	43a9      	bics	r1, r5
 80203c8:	462b      	mov	r3, r5
 80203ca:	462a      	mov	r2, r5
 80203cc:	d112      	bne.n	80203f4 <__ieee754_sqrt+0x38>
 80203ce:	ee10 2a10 	vmov	r2, s0
 80203d2:	ee10 0a10 	vmov	r0, s0
 80203d6:	4629      	mov	r1, r5
 80203d8:	f7e0 f91e 	bl	8000618 <__aeabi_dmul>
 80203dc:	4602      	mov	r2, r0
 80203de:	460b      	mov	r3, r1
 80203e0:	4620      	mov	r0, r4
 80203e2:	4629      	mov	r1, r5
 80203e4:	f7df ff62 	bl	80002ac <__adddf3>
 80203e8:	4604      	mov	r4, r0
 80203ea:	460d      	mov	r5, r1
 80203ec:	ec45 4b10 	vmov	d0, r4, r5
 80203f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203f4:	2d00      	cmp	r5, #0
 80203f6:	ee10 0a10 	vmov	r0, s0
 80203fa:	4621      	mov	r1, r4
 80203fc:	dc0f      	bgt.n	802041e <__ieee754_sqrt+0x62>
 80203fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8020402:	4330      	orrs	r0, r6
 8020404:	d0f2      	beq.n	80203ec <__ieee754_sqrt+0x30>
 8020406:	b155      	cbz	r5, 802041e <__ieee754_sqrt+0x62>
 8020408:	ee10 2a10 	vmov	r2, s0
 802040c:	4620      	mov	r0, r4
 802040e:	4629      	mov	r1, r5
 8020410:	f7df ff4a 	bl	80002a8 <__aeabi_dsub>
 8020414:	4602      	mov	r2, r0
 8020416:	460b      	mov	r3, r1
 8020418:	f7e0 fa28 	bl	800086c <__aeabi_ddiv>
 802041c:	e7e4      	b.n	80203e8 <__ieee754_sqrt+0x2c>
 802041e:	151b      	asrs	r3, r3, #20
 8020420:	d073      	beq.n	802050a <__ieee754_sqrt+0x14e>
 8020422:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020426:	07dd      	lsls	r5, r3, #31
 8020428:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802042c:	bf48      	it	mi
 802042e:	0fc8      	lsrmi	r0, r1, #31
 8020430:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020434:	bf44      	itt	mi
 8020436:	0049      	lslmi	r1, r1, #1
 8020438:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802043c:	2500      	movs	r5, #0
 802043e:	1058      	asrs	r0, r3, #1
 8020440:	0fcb      	lsrs	r3, r1, #31
 8020442:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8020446:	0049      	lsls	r1, r1, #1
 8020448:	2316      	movs	r3, #22
 802044a:	462c      	mov	r4, r5
 802044c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8020450:	19a7      	adds	r7, r4, r6
 8020452:	4297      	cmp	r7, r2
 8020454:	bfde      	ittt	le
 8020456:	19bc      	addle	r4, r7, r6
 8020458:	1bd2      	suble	r2, r2, r7
 802045a:	19ad      	addle	r5, r5, r6
 802045c:	0fcf      	lsrs	r7, r1, #31
 802045e:	3b01      	subs	r3, #1
 8020460:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8020464:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802046c:	d1f0      	bne.n	8020450 <__ieee754_sqrt+0x94>
 802046e:	f04f 0c20 	mov.w	ip, #32
 8020472:	469e      	mov	lr, r3
 8020474:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8020478:	42a2      	cmp	r2, r4
 802047a:	eb06 070e 	add.w	r7, r6, lr
 802047e:	dc02      	bgt.n	8020486 <__ieee754_sqrt+0xca>
 8020480:	d112      	bne.n	80204a8 <__ieee754_sqrt+0xec>
 8020482:	428f      	cmp	r7, r1
 8020484:	d810      	bhi.n	80204a8 <__ieee754_sqrt+0xec>
 8020486:	2f00      	cmp	r7, #0
 8020488:	eb07 0e06 	add.w	lr, r7, r6
 802048c:	da42      	bge.n	8020514 <__ieee754_sqrt+0x158>
 802048e:	f1be 0f00 	cmp.w	lr, #0
 8020492:	db3f      	blt.n	8020514 <__ieee754_sqrt+0x158>
 8020494:	f104 0801 	add.w	r8, r4, #1
 8020498:	1b12      	subs	r2, r2, r4
 802049a:	428f      	cmp	r7, r1
 802049c:	bf88      	it	hi
 802049e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80204a2:	1bc9      	subs	r1, r1, r7
 80204a4:	4433      	add	r3, r6
 80204a6:	4644      	mov	r4, r8
 80204a8:	0052      	lsls	r2, r2, #1
 80204aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80204ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80204b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80204b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80204ba:	d1dd      	bne.n	8020478 <__ieee754_sqrt+0xbc>
 80204bc:	430a      	orrs	r2, r1
 80204be:	d006      	beq.n	80204ce <__ieee754_sqrt+0x112>
 80204c0:	1c5c      	adds	r4, r3, #1
 80204c2:	bf13      	iteet	ne
 80204c4:	3301      	addne	r3, #1
 80204c6:	3501      	addeq	r5, #1
 80204c8:	4663      	moveq	r3, ip
 80204ca:	f023 0301 	bicne.w	r3, r3, #1
 80204ce:	106a      	asrs	r2, r5, #1
 80204d0:	085b      	lsrs	r3, r3, #1
 80204d2:	07e9      	lsls	r1, r5, #31
 80204d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80204d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80204dc:	bf48      	it	mi
 80204de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80204e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80204e6:	461c      	mov	r4, r3
 80204e8:	e780      	b.n	80203ec <__ieee754_sqrt+0x30>
 80204ea:	0aca      	lsrs	r2, r1, #11
 80204ec:	3815      	subs	r0, #21
 80204ee:	0549      	lsls	r1, r1, #21
 80204f0:	2a00      	cmp	r2, #0
 80204f2:	d0fa      	beq.n	80204ea <__ieee754_sqrt+0x12e>
 80204f4:	02d6      	lsls	r6, r2, #11
 80204f6:	d50a      	bpl.n	802050e <__ieee754_sqrt+0x152>
 80204f8:	f1c3 0420 	rsb	r4, r3, #32
 80204fc:	fa21 f404 	lsr.w	r4, r1, r4
 8020500:	1e5d      	subs	r5, r3, #1
 8020502:	4099      	lsls	r1, r3
 8020504:	4322      	orrs	r2, r4
 8020506:	1b43      	subs	r3, r0, r5
 8020508:	e78b      	b.n	8020422 <__ieee754_sqrt+0x66>
 802050a:	4618      	mov	r0, r3
 802050c:	e7f0      	b.n	80204f0 <__ieee754_sqrt+0x134>
 802050e:	0052      	lsls	r2, r2, #1
 8020510:	3301      	adds	r3, #1
 8020512:	e7ef      	b.n	80204f4 <__ieee754_sqrt+0x138>
 8020514:	46a0      	mov	r8, r4
 8020516:	e7bf      	b.n	8020498 <__ieee754_sqrt+0xdc>
 8020518:	7ff00000 	.word	0x7ff00000

0802051c <fabs>:
 802051c:	ec51 0b10 	vmov	r0, r1, d0
 8020520:	ee10 2a10 	vmov	r2, s0
 8020524:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020528:	ec43 2b10 	vmov	d0, r2, r3
 802052c:	4770      	bx	lr

0802052e <finite>:
 802052e:	ee10 3a90 	vmov	r3, s1
 8020532:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8020536:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802053a:	0fc0      	lsrs	r0, r0, #31
 802053c:	4770      	bx	lr

0802053e <matherr>:
 802053e:	2000      	movs	r0, #0
 8020540:	4770      	bx	lr
 8020542:	0000      	movs	r0, r0
 8020544:	0000      	movs	r0, r0
	...

08020548 <nan>:
 8020548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020550 <nan+0x8>
 802054c:	4770      	bx	lr
 802054e:	bf00      	nop
 8020550:	00000000 	.word	0x00000000
 8020554:	7ff80000 	.word	0x7ff80000

08020558 <rint>:
 8020558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802055a:	ec51 0b10 	vmov	r0, r1, d0
 802055e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8020562:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8020566:	2e13      	cmp	r6, #19
 8020568:	460b      	mov	r3, r1
 802056a:	ee10 4a10 	vmov	r4, s0
 802056e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8020572:	dc56      	bgt.n	8020622 <rint+0xca>
 8020574:	2e00      	cmp	r6, #0
 8020576:	da2b      	bge.n	80205d0 <rint+0x78>
 8020578:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802057c:	4302      	orrs	r2, r0
 802057e:	d023      	beq.n	80205c8 <rint+0x70>
 8020580:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8020584:	4302      	orrs	r2, r0
 8020586:	4254      	negs	r4, r2
 8020588:	4314      	orrs	r4, r2
 802058a:	0c4b      	lsrs	r3, r1, #17
 802058c:	0b24      	lsrs	r4, r4, #12
 802058e:	045b      	lsls	r3, r3, #17
 8020590:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8020594:	ea44 0103 	orr.w	r1, r4, r3
 8020598:	460b      	mov	r3, r1
 802059a:	492f      	ldr	r1, [pc, #188]	; (8020658 <rint+0x100>)
 802059c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80205a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80205a4:	4602      	mov	r2, r0
 80205a6:	4639      	mov	r1, r7
 80205a8:	4630      	mov	r0, r6
 80205aa:	f7df fe7f 	bl	80002ac <__adddf3>
 80205ae:	e9cd 0100 	strd	r0, r1, [sp]
 80205b2:	463b      	mov	r3, r7
 80205b4:	4632      	mov	r2, r6
 80205b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80205ba:	f7df fe75 	bl	80002a8 <__aeabi_dsub>
 80205be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80205c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80205c6:	4639      	mov	r1, r7
 80205c8:	ec41 0b10 	vmov	d0, r0, r1
 80205cc:	b003      	add	sp, #12
 80205ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205d0:	4a22      	ldr	r2, [pc, #136]	; (802065c <rint+0x104>)
 80205d2:	4132      	asrs	r2, r6
 80205d4:	ea01 0702 	and.w	r7, r1, r2
 80205d8:	4307      	orrs	r7, r0
 80205da:	d0f5      	beq.n	80205c8 <rint+0x70>
 80205dc:	0852      	lsrs	r2, r2, #1
 80205de:	4011      	ands	r1, r2
 80205e0:	430c      	orrs	r4, r1
 80205e2:	d00b      	beq.n	80205fc <rint+0xa4>
 80205e4:	ea23 0202 	bic.w	r2, r3, r2
 80205e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80205ec:	2e13      	cmp	r6, #19
 80205ee:	fa43 f306 	asr.w	r3, r3, r6
 80205f2:	bf0c      	ite	eq
 80205f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80205f8:	2400      	movne	r4, #0
 80205fa:	4313      	orrs	r3, r2
 80205fc:	4916      	ldr	r1, [pc, #88]	; (8020658 <rint+0x100>)
 80205fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8020602:	4622      	mov	r2, r4
 8020604:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020608:	4620      	mov	r0, r4
 802060a:	4629      	mov	r1, r5
 802060c:	f7df fe4e 	bl	80002ac <__adddf3>
 8020610:	e9cd 0100 	strd	r0, r1, [sp]
 8020614:	4622      	mov	r2, r4
 8020616:	462b      	mov	r3, r5
 8020618:	e9dd 0100 	ldrd	r0, r1, [sp]
 802061c:	f7df fe44 	bl	80002a8 <__aeabi_dsub>
 8020620:	e7d2      	b.n	80205c8 <rint+0x70>
 8020622:	2e33      	cmp	r6, #51	; 0x33
 8020624:	dd07      	ble.n	8020636 <rint+0xde>
 8020626:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802062a:	d1cd      	bne.n	80205c8 <rint+0x70>
 802062c:	ee10 2a10 	vmov	r2, s0
 8020630:	f7df fe3c 	bl	80002ac <__adddf3>
 8020634:	e7c8      	b.n	80205c8 <rint+0x70>
 8020636:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802063a:	f04f 32ff 	mov.w	r2, #4294967295
 802063e:	40f2      	lsrs	r2, r6
 8020640:	4210      	tst	r0, r2
 8020642:	d0c1      	beq.n	80205c8 <rint+0x70>
 8020644:	0852      	lsrs	r2, r2, #1
 8020646:	4210      	tst	r0, r2
 8020648:	bf1f      	itttt	ne
 802064a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802064e:	ea20 0202 	bicne.w	r2, r0, r2
 8020652:	4134      	asrne	r4, r6
 8020654:	4314      	orrne	r4, r2
 8020656:	e7d1      	b.n	80205fc <rint+0xa4>
 8020658:	08024ce8 	.word	0x08024ce8
 802065c:	000fffff 	.word	0x000fffff

08020660 <scalbn>:
 8020660:	b570      	push	{r4, r5, r6, lr}
 8020662:	ec55 4b10 	vmov	r4, r5, d0
 8020666:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802066a:	4606      	mov	r6, r0
 802066c:	462b      	mov	r3, r5
 802066e:	b9aa      	cbnz	r2, 802069c <scalbn+0x3c>
 8020670:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020674:	4323      	orrs	r3, r4
 8020676:	d03b      	beq.n	80206f0 <scalbn+0x90>
 8020678:	4b31      	ldr	r3, [pc, #196]	; (8020740 <scalbn+0xe0>)
 802067a:	4629      	mov	r1, r5
 802067c:	2200      	movs	r2, #0
 802067e:	ee10 0a10 	vmov	r0, s0
 8020682:	f7df ffc9 	bl	8000618 <__aeabi_dmul>
 8020686:	4b2f      	ldr	r3, [pc, #188]	; (8020744 <scalbn+0xe4>)
 8020688:	429e      	cmp	r6, r3
 802068a:	4604      	mov	r4, r0
 802068c:	460d      	mov	r5, r1
 802068e:	da12      	bge.n	80206b6 <scalbn+0x56>
 8020690:	a327      	add	r3, pc, #156	; (adr r3, 8020730 <scalbn+0xd0>)
 8020692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020696:	f7df ffbf 	bl	8000618 <__aeabi_dmul>
 802069a:	e009      	b.n	80206b0 <scalbn+0x50>
 802069c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80206a0:	428a      	cmp	r2, r1
 80206a2:	d10c      	bne.n	80206be <scalbn+0x5e>
 80206a4:	ee10 2a10 	vmov	r2, s0
 80206a8:	4620      	mov	r0, r4
 80206aa:	4629      	mov	r1, r5
 80206ac:	f7df fdfe 	bl	80002ac <__adddf3>
 80206b0:	4604      	mov	r4, r0
 80206b2:	460d      	mov	r5, r1
 80206b4:	e01c      	b.n	80206f0 <scalbn+0x90>
 80206b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80206ba:	460b      	mov	r3, r1
 80206bc:	3a36      	subs	r2, #54	; 0x36
 80206be:	4432      	add	r2, r6
 80206c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80206c4:	428a      	cmp	r2, r1
 80206c6:	dd0b      	ble.n	80206e0 <scalbn+0x80>
 80206c8:	ec45 4b11 	vmov	d1, r4, r5
 80206cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8020738 <scalbn+0xd8>
 80206d0:	f000 f83c 	bl	802074c <copysign>
 80206d4:	a318      	add	r3, pc, #96	; (adr r3, 8020738 <scalbn+0xd8>)
 80206d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206da:	ec51 0b10 	vmov	r0, r1, d0
 80206de:	e7da      	b.n	8020696 <scalbn+0x36>
 80206e0:	2a00      	cmp	r2, #0
 80206e2:	dd08      	ble.n	80206f6 <scalbn+0x96>
 80206e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80206e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80206ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80206f0:	ec45 4b10 	vmov	d0, r4, r5
 80206f4:	bd70      	pop	{r4, r5, r6, pc}
 80206f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80206fa:	da0d      	bge.n	8020718 <scalbn+0xb8>
 80206fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020700:	429e      	cmp	r6, r3
 8020702:	ec45 4b11 	vmov	d1, r4, r5
 8020706:	dce1      	bgt.n	80206cc <scalbn+0x6c>
 8020708:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8020730 <scalbn+0xd0>
 802070c:	f000 f81e 	bl	802074c <copysign>
 8020710:	a307      	add	r3, pc, #28	; (adr r3, 8020730 <scalbn+0xd0>)
 8020712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020716:	e7e0      	b.n	80206da <scalbn+0x7a>
 8020718:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802071c:	3236      	adds	r2, #54	; 0x36
 802071e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020722:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020726:	4620      	mov	r0, r4
 8020728:	4629      	mov	r1, r5
 802072a:	2200      	movs	r2, #0
 802072c:	4b06      	ldr	r3, [pc, #24]	; (8020748 <scalbn+0xe8>)
 802072e:	e7b2      	b.n	8020696 <scalbn+0x36>
 8020730:	c2f8f359 	.word	0xc2f8f359
 8020734:	01a56e1f 	.word	0x01a56e1f
 8020738:	8800759c 	.word	0x8800759c
 802073c:	7e37e43c 	.word	0x7e37e43c
 8020740:	43500000 	.word	0x43500000
 8020744:	ffff3cb0 	.word	0xffff3cb0
 8020748:	3c900000 	.word	0x3c900000

0802074c <copysign>:
 802074c:	ec51 0b10 	vmov	r0, r1, d0
 8020750:	ee11 0a90 	vmov	r0, s3
 8020754:	ee10 2a10 	vmov	r2, s0
 8020758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802075c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8020760:	ea41 0300 	orr.w	r3, r1, r0
 8020764:	ec43 2b10 	vmov	d0, r2, r3
 8020768:	4770      	bx	lr
	...

0802076c <__errno>:
 802076c:	4b01      	ldr	r3, [pc, #4]	; (8020774 <__errno+0x8>)
 802076e:	6818      	ldr	r0, [r3, #0]
 8020770:	4770      	bx	lr
 8020772:	bf00      	nop
 8020774:	20000084 	.word	0x20000084

08020778 <_init>:
 8020778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802077a:	bf00      	nop
 802077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802077e:	bc08      	pop	{r3}
 8020780:	469e      	mov	lr, r3
 8020782:	4770      	bx	lr

08020784 <_fini>:
 8020784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020786:	bf00      	nop
 8020788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802078a:	bc08      	pop	{r3}
 802078c:	469e      	mov	lr, r3
 802078e:	4770      	bx	lr
