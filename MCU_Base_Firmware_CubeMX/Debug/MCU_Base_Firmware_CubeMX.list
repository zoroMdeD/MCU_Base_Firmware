
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000205c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004610  08020758  08020758  00030758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024d68  08024d68  00040258  2**0
                  CONTENTS
  4 .ARM          00000008  08024d68  08024d68  00034d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024d70  08024d70  00040258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024d70  08024d70  00034d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024d74  08024d74  00034d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08024d78  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080b4  20000258  08024fd0  00040258  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000830c  08024fd0  0004830c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007f4c2  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009f7b  00000000  00000000  000bf74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026c0  00000000  00000000  000c96c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002518  00000000  00000000  000cbd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003bf09  00000000  00000000  000ce2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00040932  00000000  00000000  0010a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5596  00000000  00000000  0014aadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  00240071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0a8  00000000  00000000  00240140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020740 	.word	0x08020740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08020740 	.word	0x08020740

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e055      	b.n	8001074 <cJSON_strcasecmp+0xcc>
	if (!s2)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <cJSON_strcasecmp+0x42>
		return 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e050      	b.n	8001074 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <cJSON_strcasecmp+0x36>
			return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e04a      	b.n	8001074 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <cJSON_strcasecmp+0xd8>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d103      	bne.n	800100a <cJSON_strcasecmp+0x62>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f103 0220 	add.w	r2, r3, #32
 8001008:	e000      	b.n	800100c <cJSON_strcasecmp+0x64>
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	73bb      	strb	r3, [r7, #14]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	491a      	ldr	r1, [pc, #104]	; (8001080 <cJSON_strcasecmp+0xd8>)
 8001018:	440b      	add	r3, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <cJSON_strcasecmp+0x82>
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	3320      	adds	r3, #32
 8001028:	e000      	b.n	800102c <cJSON_strcasecmp+0x84>
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	429a      	cmp	r2, r3
 800102e:	d0d0      	beq.n	8000fd2 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	737b      	strb	r3, [r7, #13]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	3301      	adds	r3, #1
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <cJSON_strcasecmp+0xd8>)
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d103      	bne.n	8001050 <cJSON_strcasecmp+0xa8>
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	f103 0220 	add.w	r2, r3, #32
 800104e:	e000      	b.n	8001052 <cJSON_strcasecmp+0xaa>
 8001050:	7b7a      	ldrb	r2, [r7, #13]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <cJSON_strcasecmp+0xd8>)
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <cJSON_strcasecmp+0xc8>
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	3320      	adds	r3, #32
 800106e:	e000      	b.n	8001072 <cJSON_strcasecmp+0xca>
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	08024a06 	.word	0x08024a06

08001084 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <cJSON_New_Item+0x2c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2028      	movs	r0, #40	; 0x28
 8001090:	4798      	blx	r3
 8001092:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <cJSON_New_Item+0x20>
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f01a fab1 	bl	801b606 <memset>
	return node;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000

080010b4 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80010bc:	e037      	b.n	800112e <cJSON_Delete+0x7a>
	{
		next=c->next;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d108      	bne.n	80010e2 <cJSON_Delete+0x2e>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <cJSON_Delete+0x2e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffe9 	bl	80010b4 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <cJSON_Delete+0x4e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <cJSON_Delete+0x4e>
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <cJSON_Delete+0x8c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6912      	ldr	r2, [r2, #16]
 80010fe:	4610      	mov	r0, r2
 8001100:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <cJSON_Delete+0x6e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <cJSON_Delete+0x6e>
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <cJSON_Delete+0x8c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6a12      	ldr	r2, [r2, #32]
 800111e:	4610      	mov	r0, r2
 8001120:	4798      	blx	r3
		cJSON_free(c);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <cJSON_Delete+0x8c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	4798      	blx	r3
		c=next;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	607b      	str	r3, [r7, #4]
	while (c)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1c4      	bne.n	80010be <cJSON_Delete+0xa>
	}
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000004 	.word	0x20000004
 8001144:	00000000 	.word	0x00000000

08001148 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b83      	ldr	r3, [pc, #524]	; (8001370 <parse_number+0x228>)
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b2d      	cmp	r3, #45	; 0x2d
 8001182:	d107      	bne.n	8001194 <parse_number+0x4c>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <parse_number+0x22c>)
 800118a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b30      	cmp	r3, #48	; 0x30
 800119a:	d102      	bne.n	80011a2 <parse_number+0x5a>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b30      	cmp	r3, #48	; 0x30
 80011a8:	d928      	bls.n	80011fc <parse_number+0xb4>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b39      	cmp	r3, #57	; 0x39
 80011b0:	d824      	bhi.n	80011fc <parse_number+0xb4>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <parse_number+0x230>)
 80011b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4614      	mov	r4, r2
 80011c6:	461d      	mov	r5, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	603a      	str	r2, [r7, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3b30      	subs	r3, #48	; 0x30
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b6 	bl	8000544 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f864 	bl	80002ac <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b2f      	cmp	r3, #47	; 0x2f
 80011f2:	d903      	bls.n	80011fc <parse_number+0xb4>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b39      	cmp	r3, #57	; 0x39
 80011fa:	d9da      	bls.n	80011b2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b2e      	cmp	r3, #46	; 0x2e
 8001202:	d13c      	bne.n	800127e <parse_number+0x136>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d937      	bls.n	800127e <parse_number+0x136>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b39      	cmp	r3, #57	; 0x39
 8001216:	d832      	bhi.n	800127e <parse_number+0x136>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b55      	ldr	r3, [pc, #340]	; (8001378 <parse_number+0x230>)
 8001224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001228:	f7ff f9f6 	bl	8000618 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4614      	mov	r4, r2
 8001232:	461d      	mov	r5, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	603a      	str	r2, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b30      	subs	r3, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f980 	bl	8000544 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f82e 	bl	80002ac <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <parse_number+0x228>)
 800125e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001262:	f7ff f821 	bl	80002a8 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d903      	bls.n	800127e <parse_number+0x136>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b39      	cmp	r3, #57	; 0x39
 800127c:	d9cf      	bls.n	800121e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b65      	cmp	r3, #101	; 0x65
 8001284:	d003      	beq.n	800128e <parse_number+0x146>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b45      	cmp	r3, #69	; 0x45
 800128c:	d12a      	bne.n	80012e4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b2b      	cmp	r3, #43	; 0x2b
 800129a:	d103      	bne.n	80012a4 <parse_number+0x15c>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	e017      	b.n	80012d4 <parse_number+0x18c>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b2d      	cmp	r3, #45	; 0x2d
 80012aa:	d113      	bne.n	80012d4 <parse_number+0x18c>
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80012b8:	e00c      	b.n	80012d4 <parse_number+0x18c>
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3b30      	subs	r3, #48	; 0x30
 80012d0:	440b      	add	r3, r1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2f      	cmp	r3, #47	; 0x2f
 80012da:	d903      	bls.n	80012e4 <parse_number+0x19c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b39      	cmp	r3, #57	; 0x39
 80012e2:	d9ea      	bls.n	80012ba <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 80012e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ec:	f7ff f994 	bl	8000618 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f91f 	bl	8000544 <__aeabi_i2d>
 8001306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130a:	f7fe ffcf 	bl	80002ac <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b17 	vmov	d7, r2, r3
 8001316:	eeb0 1a47 	vmov.f32	s2, s14
 800131a:	eef0 1a67 	vmov.f32	s3, s15
 800131e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001368 <parse_number+0x220>
 8001322:	f01e f9b1 	bl	801f688 <pow>
 8001326:	ec53 2b10 	vmov	r2, r3, d0
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f973 	bl	8000618 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001340:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8001344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001348:	f7ff fc16 	bl	8000b78 <__aeabi_d2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	60da      	str	r2, [r3, #12]
	return num;
 8001358:	683b      	ldr	r3, [r7, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40240000 	.word	0x40240000
 8001370:	3ff00000 	.word	0x3ff00000
 8001374:	bff00000 	.word	0xbff00000
 8001378:	40240000 	.word	0x40240000

0800137c <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2f      	cmp	r3, #47	; 0x2f
 800138e:	d90b      	bls.n	80013a8 <parse_hex4+0x2c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b39      	cmp	r3, #57	; 0x39
 8001396:	d807      	bhi.n	80013a8 <parse_hex4+0x2c>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	3b30      	subs	r3, #48	; 0x30
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e021      	b.n	80013ec <parse_hex4+0x70>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d90b      	bls.n	80013c8 <parse_hex4+0x4c>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b46      	cmp	r3, #70	; 0x46
 80013b6:	d807      	bhi.n	80013c8 <parse_hex4+0x4c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	3b37      	subs	r3, #55	; 0x37
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e011      	b.n	80013ec <parse_hex4+0x70>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b60      	cmp	r3, #96	; 0x60
 80013ce:	d90b      	bls.n	80013e8 <parse_hex4+0x6c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b66      	cmp	r3, #102	; 0x66
 80013d6:	d807      	bhi.n	80013e8 <parse_hex4+0x6c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b57      	subs	r3, #87	; 0x57
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e001      	b.n	80013ec <parse_hex4+0x70>
 80013e8:	2300      	movs	r3, #0
 80013ea:	e0a8      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b2f      	cmp	r3, #47	; 0x2f
 80013fe:	d90b      	bls.n	8001418 <parse_hex4+0x9c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b39      	cmp	r3, #57	; 0x39
 8001406:	d807      	bhi.n	8001418 <parse_hex4+0x9c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	3b30      	subs	r3, #48	; 0x30
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e021      	b.n	800145c <parse_hex4+0xe0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	d90b      	bls.n	8001438 <parse_hex4+0xbc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b46      	cmp	r3, #70	; 0x46
 8001426:	d807      	bhi.n	8001438 <parse_hex4+0xbc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	3b37      	subs	r3, #55	; 0x37
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e011      	b.n	800145c <parse_hex4+0xe0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d90b      	bls.n	8001458 <parse_hex4+0xdc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b66      	cmp	r3, #102	; 0x66
 8001446:	d807      	bhi.n	8001458 <parse_hex4+0xdc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b57      	subs	r3, #87	; 0x57
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e001      	b.n	800145c <parse_hex4+0xe0>
 8001458:	2300      	movs	r3, #0
 800145a:	e070      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b2f      	cmp	r3, #47	; 0x2f
 800146e:	d90b      	bls.n	8001488 <parse_hex4+0x10c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b39      	cmp	r3, #57	; 0x39
 8001476:	d807      	bhi.n	8001488 <parse_hex4+0x10c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	3b30      	subs	r3, #48	; 0x30
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e021      	b.n	80014cc <parse_hex4+0x150>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d90b      	bls.n	80014a8 <parse_hex4+0x12c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b46      	cmp	r3, #70	; 0x46
 8001496:	d807      	bhi.n	80014a8 <parse_hex4+0x12c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	3b37      	subs	r3, #55	; 0x37
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e011      	b.n	80014cc <parse_hex4+0x150>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b60      	cmp	r3, #96	; 0x60
 80014ae:	d90b      	bls.n	80014c8 <parse_hex4+0x14c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b66      	cmp	r3, #102	; 0x66
 80014b6:	d807      	bhi.n	80014c8 <parse_hex4+0x14c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3b57      	subs	r3, #87	; 0x57
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e001      	b.n	80014cc <parse_hex4+0x150>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e038      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b2f      	cmp	r3, #47	; 0x2f
 80014de:	d90b      	bls.n	80014f8 <parse_hex4+0x17c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b39      	cmp	r3, #57	; 0x39
 80014e6:	d807      	bhi.n	80014f8 <parse_hex4+0x17c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	3b30      	subs	r3, #48	; 0x30
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e021      	b.n	800153c <parse_hex4+0x1c0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d90b      	bls.n	8001518 <parse_hex4+0x19c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b46      	cmp	r3, #70	; 0x46
 8001506:	d807      	bhi.n	8001518 <parse_hex4+0x19c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	3b37      	subs	r3, #55	; 0x37
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e011      	b.n	800153c <parse_hex4+0x1c0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b60      	cmp	r3, #96	; 0x60
 800151e:	d90b      	bls.n	8001538 <parse_hex4+0x1bc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b66      	cmp	r3, #102	; 0x66
 8001526:	d807      	bhi.n	8001538 <parse_hex4+0x1bc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	3b57      	subs	r3, #87	; 0x57
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e001      	b.n	800153c <parse_hex4+0x1c0>
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <parse_hex4+0x1c2>
	return h;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b22      	cmp	r3, #34	; 0x22
 8001566:	d00d      	beq.n	8001584 <parse_string+0x38>
 8001568:	4aa3      	ldr	r2, [pc, #652]	; (80017f8 <parse_string+0x2ac>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e168      	b.n	8001844 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	61fa      	str	r2, [r7, #28]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b5c      	cmp	r3, #92	; 0x5c
 800157c:	d102      	bne.n	8001584 <parse_string+0x38>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b22      	cmp	r3, #34	; 0x22
 800158a:	d009      	beq.n	80015a0 <parse_string+0x54>
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <parse_string+0x54>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <parse_string+0x2b0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	3201      	adds	r2, #1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4798      	blx	r3
 80015ac:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <parse_string+0x6c>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e145      	b.n	8001844 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80015c2:	e125      	b.n	8001810 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b5c      	cmp	r3, #92	; 0x5c
 80015ca:	d008      	beq.n	80015de <parse_string+0x92>
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	1c53      	adds	r3, r2, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	61b9      	str	r1, [r7, #24]
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e118      	b.n	8001810 <parse_string+0x2c4>
		else
		{
			ptr++;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3b62      	subs	r3, #98	; 0x62
 80015ea:	2b13      	cmp	r3, #19
 80015ec:	f200 80fc 	bhi.w	80017e8 <parse_string+0x29c>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <parse_string+0xac>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001649 	.word	0x08001649
 80015fc:	080017e9 	.word	0x080017e9
 8001600:	080017e9 	.word	0x080017e9
 8001604:	080017e9 	.word	0x080017e9
 8001608:	08001655 	.word	0x08001655
 800160c:	080017e9 	.word	0x080017e9
 8001610:	080017e9 	.word	0x080017e9
 8001614:	080017e9 	.word	0x080017e9
 8001618:	080017e9 	.word	0x080017e9
 800161c:	080017e9 	.word	0x080017e9
 8001620:	080017e9 	.word	0x080017e9
 8001624:	080017e9 	.word	0x080017e9
 8001628:	08001661 	.word	0x08001661
 800162c:	080017e9 	.word	0x080017e9
 8001630:	080017e9 	.word	0x080017e9
 8001634:	080017e9 	.word	0x080017e9
 8001638:	0800166d 	.word	0x0800166d
 800163c:	080017e9 	.word	0x080017e9
 8001640:	08001679 	.word	0x08001679
 8001644:	08001685 	.word	0x08001685
			{
				case 'b': *ptr2++='\b';	break;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	61ba      	str	r2, [r7, #24]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e0da      	b.n	800180a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	61ba      	str	r2, [r7, #24]
 800165a:	220c      	movs	r2, #12
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e0d4      	b.n	800180a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	61ba      	str	r2, [r7, #24]
 8001666:	220a      	movs	r2, #10
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e0ce      	b.n	800180a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	61ba      	str	r2, [r7, #24]
 8001672:	220d      	movs	r2, #13
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e0c8      	b.n	800180a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	61ba      	str	r2, [r7, #24]
 800167e:	2209      	movs	r2, #9
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e0c2      	b.n	800180a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3301      	adds	r3, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe77 	bl	800137c <parse_hex4>
 800168e:	6138      	str	r0, [r7, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3304      	adds	r3, #4
 8001694:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800169c:	d304      	bcc.n	80016a8 <parse_string+0x15c>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016a4:	f0c0 80b0 	bcc.w	8001808 <parse_string+0x2bc>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80ac 	beq.w	8001808 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016b6:	d32d      	bcc.n	8001714 <parse_string+0x1c8>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016be:	d229      	bcs.n	8001714 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b5c      	cmp	r3, #92	; 0x5c
 80016c8:	f040 809e 	bne.w	8001808 <parse_string+0x2bc>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b75      	cmp	r3, #117	; 0x75
 80016d4:	f040 8098 	bne.w	8001808 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3303      	adds	r3, #3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe4d 	bl	800137c <parse_hex4>
 80016e2:	60b8      	str	r0, [r7, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3306      	adds	r3, #6
 80016e8:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016f0:	f0c0 808a 	bcc.w	8001808 <parse_string+0x2bc>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016fa:	f080 8085 	bcs.w	8001808 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	029a      	lsls	r2, r3, #10
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <parse_string+0x2b4>)
 8001704:	4013      	ands	r3, r2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800170c:	4313      	orrs	r3, r2
 800170e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001712:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001714:	2304      	movs	r3, #4
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b7f      	cmp	r3, #127	; 0x7f
 800171c:	d802      	bhi.n	8001724 <parse_string+0x1d8>
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00c      	b.n	800173e <parse_string+0x1f2>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172a:	d202      	bcs.n	8001732 <parse_string+0x1e6>
 800172c:	2302      	movs	r3, #2
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e005      	b.n	800173e <parse_string+0x1f2>
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d201      	bcs.n	800173e <parse_string+0x1f2>
 800173a:	2303      	movs	r3, #3
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3b01      	subs	r3, #1
 800174a:	2b03      	cmp	r3, #3
 800174c:	d847      	bhi.n	80017de <parse_string+0x292>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <parse_string+0x208>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017c5 	.word	0x080017c5
 8001758:	080017a5 	.word	0x080017a5
 800175c:	08001785 	.word	0x08001785
 8001760:	08001765 	.word	0x08001765
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	b2db      	uxtb	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	3a01      	subs	r2, #1
 8001772:	61ba      	str	r2, [r7, #24]
 8001774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001778:	b2da      	uxtb	r2, r3
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800178c:	b2db      	uxtb	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	3a01      	subs	r2, #1
 8001792:	61ba      	str	r2, [r7, #24]
 8001794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001798:	b2da      	uxtb	r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	61ba      	str	r2, [r7, #24]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <parse_string+0x2b8>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	3901      	subs	r1, #1
 80017d4:	61b9      	str	r1, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4413      	add	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
					break;
 80017e6:	e010      	b.n	800180a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	61ba      	str	r2, [r7, #24]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e009      	b.n	800180a <parse_string+0x2be>
 80017f6:	bf00      	nop
 80017f8:	20000274 	.word	0x20000274
 80017fc:	20000000 	.word	0x20000000
 8001800:	000ffc00 	.word	0x000ffc00
 8001804:	08024398 	.word	0x08024398
			}
			ptr++;
 8001808:	bf00      	nop
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b22      	cmp	r3, #34	; 0x22
 8001816:	d004      	beq.n	8001822 <parse_string+0x2d6>
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aed1 	bne.w	80015c4 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b22      	cmp	r3, #34	; 0x22
 800182e:	d102      	bne.n	8001836 <parse_string+0x2ea>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	60da      	str	r2, [r3, #12]
	return ptr;
 8001842:	69fb      	ldr	r3, [r7, #28]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	e002      	b.n	800185c <skip+0x10>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <skip+0x26>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <skip+0x26>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d9f1      	bls.n	8001856 <skip+0xa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	const char *end=0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001890:	f7ff fbf8 	bl	8001084 <cJSON_New_Item>
 8001894:	6138      	str	r0, [r7, #16]
	ep=0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <cJSON_ParseWithOpts+0x26>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02a      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff ffd0 	bl	800184c <skip>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	6938      	ldr	r0, [r7, #16]
 80018b2:	f000 f837 	bl	8001924 <parse_value>
 80018b6:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <cJSON_ParseWithOpts+0x48>
 80018be:	6938      	ldr	r0, [r7, #16]
 80018c0:	f7ff fbf8 	bl	80010b4 <cJSON_Delete>
 80018c4:	2300      	movs	r3, #0
 80018c6:	e019      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00f      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ffbc 	bl	800184c <skip>
 80018d4:	6178      	str	r0, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018de:	6938      	ldr	r0, [r7, #16]
 80018e0:	f7ff fbe8 	bl	80010b4 <cJSON_Delete>
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <cJSON_ParseWithOpts+0x7a>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
	return c;
 80018fa:	693b      	ldr	r3, [r7, #16]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000274 	.word	0x20000274

08001908 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffb3 	bl	8001880 <cJSON_ParseWithOpts>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <parse_value+0x14>
 8001934:	2300      	movs	r3, #0
 8001936:	e060      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001938:	2204      	movs	r2, #4
 800193a:	4932      	ldr	r1, [pc, #200]	; (8001a04 <parse_value+0xe0>)
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f01a fc1f 	bl	801c180 <strncmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <parse_value+0x30>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	e052      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001954:	2205      	movs	r2, #5
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <parse_value+0xe4>)
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f01a fc11 	bl	801c180 <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <parse_value+0x4c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3305      	adds	r3, #5
 800196e:	e044      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001970:	2204      	movs	r2, #4
 8001972:	4926      	ldr	r1, [pc, #152]	; (8001a0c <parse_value+0xe8>)
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f01a fc03 	bl	801c180 <strncmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <parse_value+0x6e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	e033      	b.n	80019fa <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b22      	cmp	r3, #34	; 0x22
 8001998:	d105      	bne.n	80019a6 <parse_value+0x82>
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fdd5 	bl	800154c <parse_string>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e029      	b.n	80019fa <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b2d      	cmp	r3, #45	; 0x2d
 80019ac:	d007      	beq.n	80019be <parse_value+0x9a>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b2f      	cmp	r3, #47	; 0x2f
 80019b4:	d909      	bls.n	80019ca <parse_value+0xa6>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b39      	cmp	r3, #57	; 0x39
 80019bc:	d805      	bhi.n	80019ca <parse_value+0xa6>
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fbc1 	bl	8001148 <parse_number>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e017      	b.n	80019fa <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b5b      	cmp	r3, #91	; 0x5b
 80019d0:	d105      	bne.n	80019de <parse_value+0xba>
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f81d 	bl	8001a14 <parse_array>
 80019da:	4603      	mov	r3, r0
 80019dc:	e00d      	b.n	80019fa <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b7b      	cmp	r3, #123	; 0x7b
 80019e4:	d105      	bne.n	80019f2 <parse_value+0xce>
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f889 	bl	8001b00 <parse_object>
 80019ee:	4603      	mov	r3, r0
 80019f0:	e003      	b.n	80019fa <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <parse_value+0xec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08020784 	.word	0x08020784
 8001a08:	0802078c 	.word	0x0802078c
 8001a0c:	08020794 	.word	0x08020794
 8001a10:	20000274 	.word	0x20000274

08001a14 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b5b      	cmp	r3, #91	; 0x5b
 8001a24:	d004      	beq.n	8001a30 <parse_array+0x1c>
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <parse_array+0xe8>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e060      	b.n	8001af2 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2205      	movs	r2, #5
 8001a34:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff06 	bl	800184c <skip>
 8001a40:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b5d      	cmp	r3, #93	; 0x5d
 8001a48:	d102      	bne.n	8001a50 <parse_array+0x3c>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e050      	b.n	8001af2 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001a50:	f7ff fb18 	bl	8001084 <cJSON_New_Item>
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <parse_array+0x54>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e044      	b.n	8001af2 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f7ff feef 	bl	800184c <skip>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ff56 	bl	8001924 <parse_value>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fee6 	bl	800184c <skip>
 8001a80:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d125      	bne.n	8001ad4 <parse_array+0xc0>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e032      	b.n	8001af2 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001a8c:	f7ff fafa 	bl	8001084 <cJSON_New_Item>
 8001a90:	60b8      	str	r0, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <parse_array+0x88>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e02a      	b.n	8001af2 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fecb 	bl	800184c <skip>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ff32 	bl	8001924 <parse_value>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fec2 	bl	800184c <skip>
 8001ac8:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <parse_array+0xc0>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e00e      	b.n	8001af2 <parse_array+0xde>
	while (*value==',')
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ada:	d0d7      	beq.n	8001a8c <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b5d      	cmp	r3, #93	; 0x5d
 8001ae2:	d102      	bne.n	8001aea <parse_array+0xd6>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	e003      	b.n	8001af2 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <parse_array+0xe8>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000274 	.word	0x20000274

08001b00 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b10:	d004      	beq.n	8001b1c <parse_object+0x1c>
 8001b12:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <parse_object+0x178>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e0a8      	b.n	8001c6e <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2206      	movs	r2, #6
 8001b20:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe90 	bl	800184c <skip>
 8001b2c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b7d      	cmp	r3, #125	; 0x7d
 8001b34:	d102      	bne.n	8001b3c <parse_object+0x3c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e098      	b.n	8001c6e <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b3c:	f7ff faa2 	bl	8001084 <cJSON_New_Item>
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <parse_object+0x54>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e08c      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff fe79 	bl	800184c <skip>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fcf4 	bl	800154c <parse_string>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe70 	bl	800184c <skip>
 8001b6c:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <parse_object+0x78>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e07a      	b.n	8001c6e <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	621a      	str	r2, [r3, #32]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b3a      	cmp	r3, #58	; 0x3a
 8001b8c:	d004      	beq.n	8001b98 <parse_object+0x98>
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <parse_object+0x178>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	e06a      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe55 	bl	800184c <skip>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff febc 	bl	8001924 <parse_value>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe4c 	bl	800184c <skip>
 8001bb4:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d149      	bne.n	8001c50 <parse_object+0x150>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e056      	b.n	8001c6e <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001bc0:	f7ff fa60 	bl	8001084 <cJSON_New_Item>
 8001bc4:	60b8      	str	r0, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <parse_object+0xd0>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e04e      	b.n	8001c6e <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe31 	bl	800184c <skip>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fcac 	bl	800154c <parse_string>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe28 	bl	800184c <skip>
 8001bfc:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <parse_object+0x108>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e032      	b.n	8001c6e <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	621a      	str	r2, [r3, #32]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c1c:	d004      	beq.n	8001c28 <parse_object+0x128>
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <parse_object+0x178>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	e022      	b.n	8001c6e <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe0d 	bl	800184c <skip>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe74 	bl	8001924 <parse_value>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe04 	bl	800184c <skip>
 8001c44:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <parse_object+0x150>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e00e      	b.n	8001c6e <parse_object+0x16e>
	while (*value==',')
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b2c      	cmp	r3, #44	; 0x2c
 8001c56:	d0b3      	beq.n	8001bc0 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c5e:	d102      	bne.n	8001c66 <parse_object+0x166>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	e003      	b.n	8001c6e <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <parse_object+0x178>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000274 	.word	0x20000274

08001c7c <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e002      	b.n	8001c94 <cJSON_GetObjectItem+0x18>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <cJSON_GetObjectItem+0x30>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f981 	bl	8000fa8 <cJSON_strcasecmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <cJSON_GetObjectItem+0x12>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e013      	b.n	8001cf2 <parseValue+0x3a>
	{
		if(i % 2)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <parseValue+0x58>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
			j++;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fa76 	bl	80001e4 <strlen>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8e4      	bhi.n	8001cca <parseValue+0x12>
		}
	}
	tmp = paramValue;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <parseValue+0x58>)
 8001d02:	60fb      	str	r3, [r7, #12]

	return tmp;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200013a0 	.word	0x200013a0

08001d14 <json_input>:
//Функция разбора полученной строки JSON
void json_input(char *text)
{
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	ed2d 8b04 	vpush	{d8-d9}
 8001d1a:	b0a7      	sub	sp, #156	; 0x9c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fdf1 	bl	8001908 <cJSON_Parse>
 8001d26:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8001d2a:	497f      	ldr	r1, [pc, #508]	; (8001f28 <json_input+0x214>)
 8001d2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d30:	f7ff ffa4 	bl	8001c7c <cJSON_GetObjectItem>
 8001d34:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	TIME = stime->valuestring;
 8001d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	; (8001f2c <json_input+0x218>)
 8001d40:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8001d42:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <json_input+0x218>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f019 fbdb 	bl	801b502 <atoi>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b78      	ldr	r3, [pc, #480]	; (8001f30 <json_input+0x21c>)
 8001d50:	601a      	str	r2, [r3, #0]
	if(Time_Server > Time_Client)
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <json_input+0x21c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <json_input+0x220>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	f340 86ca 	ble.w	8002af4 <json_input+0xde0>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 8001d60:	4975      	ldr	r1, [pc, #468]	; (8001f38 <json_input+0x224>)
 8001d62:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d66:	f7ff ff89 	bl	8001c7c <cJSON_GetObjectItem>
 8001d6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		INSTRUCTION = sInstruction->valuestring;
 8001d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a71      	ldr	r2, [pc, #452]	; (8001f3c <json_input+0x228>)
 8001d76:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <json_input+0x228>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4970      	ldr	r1, [pc, #448]	; (8001f40 <json_input+0x22c>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa26 	bl	80001d0 <strcmp>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 84d5 	bne.w	8002736 <json_input+0xa22>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8001d8c:	496d      	ldr	r1, [pc, #436]	; (8001f44 <json_input+0x230>)
 8001d8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d92:	f7ff ff73 	bl	8001c7c <cJSON_GetObjectItem>
 8001d96:	4603      	mov	r3, r0
 8001d98:	496b      	ldr	r1, [pc, #428]	; (8001f48 <json_input+0x234>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff6e 	bl	8001c7c <cJSON_GetObjectItem>
 8001da0:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8001da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a69      	ldr	r2, [pc, #420]	; (8001f4c <json_input+0x238>)
 8001da8:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8001daa:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <json_input+0x238>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4968      	ldr	r1, [pc, #416]	; (8001f50 <json_input+0x23c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fa0d 	bl	80001d0 <strcmp>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 80df 	bne.w	8001f7c <json_input+0x268>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001dbe:	4961      	ldr	r1, [pc, #388]	; (8001f44 <json_input+0x230>)
 8001dc0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dc4:	f7ff ff5a 	bl	8001c7c <cJSON_GetObjectItem>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4962      	ldr	r1, [pc, #392]	; (8001f54 <json_input+0x240>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff55 	bl	8001c7c <cJSON_GetObjectItem>
 8001dd2:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001dd4:	495b      	ldr	r1, [pc, #364]	; (8001f44 <json_input+0x230>)
 8001dd6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dda:	f7ff ff4f 	bl	8001c7c <cJSON_GetObjectItem>
 8001dde:	4603      	mov	r3, r0
 8001de0:	495d      	ldr	r1, [pc, #372]	; (8001f58 <json_input+0x244>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff4a 	bl	8001c7c <cJSON_GetObjectItem>
 8001de8:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001dea:	4956      	ldr	r1, [pc, #344]	; (8001f44 <json_input+0x230>)
 8001dec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001df0:	f7ff ff44 	bl	8001c7c <cJSON_GetObjectItem>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4959      	ldr	r1, [pc, #356]	; (8001f5c <json_input+0x248>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff3f 	bl	8001c7c <cJSON_GetObjectItem>
 8001dfe:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001e00:	4950      	ldr	r1, [pc, #320]	; (8001f44 <json_input+0x230>)
 8001e02:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e06:	f7ff ff39 	bl	8001c7c <cJSON_GetObjectItem>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4954      	ldr	r1, [pc, #336]	; (8001f60 <json_input+0x24c>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff34 	bl	8001c7c <cJSON_GetObjectItem>
 8001e14:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <json_input+0x250>)
 8001e1c:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <json_input+0x254>)
 8001e24:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <json_input+0x258>)
 8001e2c:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <json_input+0x25c>)
 8001e34:	6013      	str	r3, [r2, #0]

				save_dido(D_IN, text);
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <json_input+0x250>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 facd 	bl	80073dc <save_dido>

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <json_input+0x250>)
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <json_input+0x254>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f019 fb59 	bl	801b502 <atoi>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b2dd      	uxtb	r5, r3
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <json_input+0x258>)
 8001e56:	681e      	ldr	r6, [r3, #0]
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <json_input+0x25c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f019 fb50 	bl	801b502 <atoi>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f006 fe4c 	bl	8008b08 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8001e70:	4840      	ldr	r0, [pc, #256]	; (8001f74 <json_input+0x260>)
 8001e72:	f000 ff7b 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 8001e76:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <json_input+0x238>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 ff76 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8001e80:	483c      	ldr	r0, [pc, #240]	; (8001f74 <json_input+0x260>)
 8001e82:	f000 ff73 	bl	8002d6c <SEND_str>
				SEND_str(D_IN);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <json_input+0x250>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 ff6e 	bl	8002d6c <SEND_str>
				SEND_str(": ");
 8001e90:	4839      	ldr	r0, [pc, #228]	; (8001f78 <json_input+0x264>)
 8001e92:	f000 ff6b 	bl	8002d6c <SEND_str>
				USART_Tx(D_IN[4]);
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <json_input+0x250>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 ff4c 	bl	8002d3c <USART_Tx>
				SEND_str("\n");
 8001ea4:	4833      	ldr	r0, [pc, #204]	; (8001f74 <json_input+0x260>)
 8001ea6:	f000 ff61 	bl	8002d6c <SEND_str>
				SEND_str(VAR_IN);
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <json_input+0x254>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ff5c 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8001eb4:	482f      	ldr	r0, [pc, #188]	; (8001f74 <json_input+0x260>)
 8001eb6:	f000 ff59 	bl	8002d6c <SEND_str>
				SEND_str(D_OUT);
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <json_input+0x258>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 ff54 	bl	8002d6c <SEND_str>
				SEND_str(": ");
 8001ec4:	482c      	ldr	r0, [pc, #176]	; (8001f78 <json_input+0x264>)
 8001ec6:	f000 ff51 	bl	8002d6c <SEND_str>
				USART_Tx(D_OUT[5]);
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <json_input+0x258>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3305      	adds	r3, #5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 ff32 	bl	8002d3c <USART_Tx>
				SEND_str("\n");
 8001ed8:	4826      	ldr	r0, [pc, #152]	; (8001f74 <json_input+0x260>)
 8001eda:	f000 ff47 	bl	8002d6c <SEND_str>
				SEND_str(VAR_OUT);
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <json_input+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ff42 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8001ee8:	4822      	ldr	r0, [pc, #136]	; (8001f74 <json_input+0x260>)
 8001eea:	f000 ff3f 	bl	8002d6c <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 8001eee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ef2:	f7ff f8df 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8001ef6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001efa:	f019 fb37 	bl	801b56c <free>
				free(sInstruction);
 8001efe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f02:	f019 fb33 	bl	801b56c <free>
				free(sType);
 8001f06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f08:	f019 fb30 	bl	801b56c <free>
				free(s1);
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f019 fb2d 	bl	801b56c <free>
				free(s2);
 8001f12:	6938      	ldr	r0, [r7, #16]
 8001f14:	f019 fb2a 	bl	801b56c <free>
				free(s3);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f019 fb27 	bl	801b56c <free>
				free(s4);
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f019 fb24 	bl	801b56c <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8001f24:	f000 bdee 	b.w	8002b04 <json_input+0xdf0>
 8001f28:	080207a0 	.word	0x080207a0
 8001f2c:	20001378 	.word	0x20001378
 8001f30:	20000278 	.word	0x20000278
 8001f34:	2000027c 	.word	0x2000027c
 8001f38:	080207a8 	.word	0x080207a8
 8001f3c:	200013c4 	.word	0x200013c4
 8001f40:	080207b4 	.word	0x080207b4
 8001f44:	080207c4 	.word	0x080207c4
 8001f48:	080207cc 	.word	0x080207cc
 8001f4c:	2000136c 	.word	0x2000136c
 8001f50:	080207d4 	.word	0x080207d4
 8001f54:	080207e0 	.word	0x080207e0
 8001f58:	080207e8 	.word	0x080207e8
 8001f5c:	080207f0 	.word	0x080207f0
 8001f60:	080207f8 	.word	0x080207f8
 8001f64:	200013bc 	.word	0x200013bc
 8001f68:	2000137c 	.word	0x2000137c
 8001f6c:	200013ac 	.word	0x200013ac
 8001f70:	20001388 	.word	0x20001388
 8001f74:	08020800 	.word	0x08020800
 8001f78:	08020804 	.word	0x08020804
			else if((strcmp(TYPE, "SET_VAIDO") == 0) || strcmp(TYPE, "SET_CAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход(измерение напряжения || измерение тока) в интервале значений
 8001f7c:	4b79      	ldr	r3, [pc, #484]	; (8002164 <json_input+0x450>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4979      	ldr	r1, [pc, #484]	; (8002168 <json_input+0x454>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f924 	bl	80001d0 <strcmp>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <json_input+0x28e>
 8001f8e:	4b75      	ldr	r3, [pc, #468]	; (8002164 <json_input+0x450>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4976      	ldr	r1, [pc, #472]	; (800216c <json_input+0x458>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f91b 	bl	80001d0 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 8197 	bne.w	80022d0 <json_input+0x5bc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8001fa2:	4973      	ldr	r1, [pc, #460]	; (8002170 <json_input+0x45c>)
 8001fa4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fa8:	f7ff fe68 	bl	8001c7c <cJSON_GetObjectItem>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4971      	ldr	r1, [pc, #452]	; (8002174 <json_input+0x460>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe63 	bl	8001c7c <cJSON_GetObjectItem>
 8001fb6:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8001fb8:	496d      	ldr	r1, [pc, #436]	; (8002170 <json_input+0x45c>)
 8001fba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fbe:	f7ff fe5d 	bl	8001c7c <cJSON_GetObjectItem>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	496c      	ldr	r1, [pc, #432]	; (8002178 <json_input+0x464>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fe58 	bl	8001c7c <cJSON_GetObjectItem>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8001fce:	4968      	ldr	r1, [pc, #416]	; (8002170 <json_input+0x45c>)
 8001fd0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fd4:	f7ff fe52 	bl	8001c7c <cJSON_GetObjectItem>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4968      	ldr	r1, [pc, #416]	; (800217c <json_input+0x468>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fe4d 	bl	8001c7c <cJSON_GetObjectItem>
 8001fe2:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001fe4:	4962      	ldr	r1, [pc, #392]	; (8002170 <json_input+0x45c>)
 8001fe6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fea:	f7ff fe47 	bl	8001c7c <cJSON_GetObjectItem>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4963      	ldr	r1, [pc, #396]	; (8002180 <json_input+0x46c>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe42 	bl	8001c7c <cJSON_GetObjectItem>
 8001ff8:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001ffa:	495d      	ldr	r1, [pc, #372]	; (8002170 <json_input+0x45c>)
 8001ffc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002000:	f7ff fe3c 	bl	8001c7c <cJSON_GetObjectItem>
 8002004:	4603      	mov	r3, r0
 8002006:	495f      	ldr	r1, [pc, #380]	; (8002184 <json_input+0x470>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe37 	bl	8001c7c <cJSON_GetObjectItem>
 800200e:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <json_input+0x474>)
 8002016:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a5b      	ldr	r2, [pc, #364]	; (800218c <json_input+0x478>)
 800201e:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <json_input+0x47c>)
 8002026:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <json_input+0x480>)
 800202e:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <json_input+0x484>)
 8002036:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <json_input+0x474>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4957      	ldr	r1, [pc, #348]	; (800219c <json_input+0x488>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f8c6 	bl	80001d0 <strcmp>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d11e      	bne.n	8002088 <json_input+0x374>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <json_input+0x450>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4946      	ldr	r1, [pc, #280]	; (8002168 <json_input+0x454>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f8bd 	bl	80001d0 <strcmp>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <json_input+0x35e>
						AiDo[0].inputFlag = true;
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <json_input+0x48c>)
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206a:	484e      	ldr	r0, [pc, #312]	; (80021a4 <json_input+0x490>)
 800206c:	f00a f95c 	bl	800c328 <HAL_GPIO_WritePin>
 8002070:	e0aa      	b.n	80021c8 <json_input+0x4b4>
						AiDo[0].inputFlag = false;
 8002072:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <json_input+0x48c>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002080:	4848      	ldr	r0, [pc, #288]	; (80021a4 <json_input+0x490>)
 8002082:	f00a f951 	bl	800c328 <HAL_GPIO_WritePin>
 8002086:	e09f      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD2") == 0)
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <json_input+0x474>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4946      	ldr	r1, [pc, #280]	; (80021a8 <json_input+0x494>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f89e 	bl	80001d0 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11e      	bne.n	80020d8 <json_input+0x3c4>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <json_input+0x450>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4932      	ldr	r1, [pc, #200]	; (8002168 <json_input+0x454>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f895 	bl	80001d0 <strcmp>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <json_input+0x3ae>
						AiDo[1].inputFlag = true;
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <json_input+0x48c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ba:	483a      	ldr	r0, [pc, #232]	; (80021a4 <json_input+0x490>)
 80020bc:	f00a f934 	bl	800c328 <HAL_GPIO_WritePin>
 80020c0:	e082      	b.n	80021c8 <json_input+0x4b4>
						AiDo[1].inputFlag = false;
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <json_input+0x48c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d0:	4834      	ldr	r0, [pc, #208]	; (80021a4 <json_input+0x490>)
 80020d2:	f00a f929 	bl	800c328 <HAL_GPIO_WritePin>
 80020d6:	e077      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD3") == 0)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <json_input+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4933      	ldr	r1, [pc, #204]	; (80021ac <json_input+0x498>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f876 	bl	80001d0 <strcmp>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11e      	bne.n	8002128 <json_input+0x414>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <json_input+0x450>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	491e      	ldr	r1, [pc, #120]	; (8002168 <json_input+0x454>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f86d 	bl	80001d0 <strcmp>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <json_input+0x3fe>
						AiDo[2].inputFlag = true;
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <json_input+0x48c>)
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	4826      	ldr	r0, [pc, #152]	; (80021a4 <json_input+0x490>)
 800210c:	f00a f90c 	bl	800c328 <HAL_GPIO_WritePin>
 8002110:	e05a      	b.n	80021c8 <json_input+0x4b4>
						AiDo[2].inputFlag = false;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <json_input+0x48c>)
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <json_input+0x490>)
 8002122:	f00a f901 	bl	800c328 <HAL_GPIO_WritePin>
 8002126:	e04f      	b.n	80021c8 <json_input+0x4b4>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <json_input+0x474>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4920      	ldr	r1, [pc, #128]	; (80021b0 <json_input+0x49c>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f84e 	bl	80001d0 <strcmp>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d146      	bne.n	80021c8 <json_input+0x4b4>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <json_input+0x450>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	490a      	ldr	r1, [pc, #40]	; (8002168 <json_input+0x454>)
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f845 	bl	80001d0 <strcmp>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d133      	bne.n	80021b4 <json_input+0x4a0>
						AiDo[3].inputFlag = true;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <json_input+0x48c>)
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(SET);
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <json_input+0x490>)
 800215c:	f00a f8e4 	bl	800c328 <HAL_GPIO_WritePin>
 8002160:	e032      	b.n	80021c8 <json_input+0x4b4>
 8002162:	bf00      	nop
 8002164:	2000136c 	.word	0x2000136c
 8002168:	08020808 	.word	0x08020808
 800216c:	08020814 	.word	0x08020814
 8002170:	080207c4 	.word	0x080207c4
 8002174:	08020820 	.word	0x08020820
 8002178:	08020828 	.word	0x08020828
 800217c:	08020834 	.word	0x08020834
 8002180:	080207f0 	.word	0x080207f0
 8002184:	080207f8 	.word	0x080207f8
 8002188:	200013c0 	.word	0x200013c0
 800218c:	2000138c 	.word	0x2000138c
 8002190:	200013b0 	.word	0x200013b0
 8002194:	200013ac 	.word	0x200013ac
 8002198:	20001388 	.word	0x20001388
 800219c:	08020840 	.word	0x08020840
 80021a0:	20001228 	.word	0x20001228
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08020848 	.word	0x08020848
 80021ac:	08020850 	.word	0x08020850
 80021b0:	08020858 	.word	0x08020858
						AiDo[3].inputFlag = false;
 80021b4:	4b7b      	ldr	r3, [pc, #492]	; (80023a4 <json_input+0x690>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c2:	4879      	ldr	r0, [pc, #484]	; (80023a8 <json_input+0x694>)
 80021c4:	f00a f8b0 	bl	800c328 <HAL_GPIO_WritePin>
				save_aido(A_IN, text);
 80021c8:	4b78      	ldr	r3, [pc, #480]	; (80023ac <json_input+0x698>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 f926 	bl	8007420 <save_aido>
				set_aido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <json_input+0x698>)
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <json_input+0x69c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f019 f98d 	bl	801b4fc <atof>
 80021e2:	eeb0 8a40 	vmov.f32	s16, s0
 80021e6:	eef0 8a60 	vmov.f32	s17, s1
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <json_input+0x6a0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f019 f984 	bl	801b4fc <atof>
 80021f4:	eeb0 9a40 	vmov.f32	s18, s0
 80021f8:	eef0 9a60 	vmov.f32	s19, s1
 80021fc:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <json_input+0x6a4>)
 80021fe:	681d      	ldr	r5, [r3, #0]
 8002200:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <json_input+0x6a8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f019 f97c 	bl	801b502 <atoi>
 800220a:	4603      	mov	r3, r0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	4629      	mov	r1, r5
 8002212:	eeb0 1a49 	vmov.f32	s2, s18
 8002216:	eef0 1a69 	vmov.f32	s3, s19
 800221a:	eeb0 0a48 	vmov.f32	s0, s16
 800221e:	eef0 0a68 	vmov.f32	s1, s17
 8002222:	4620      	mov	r0, r4
 8002224:	f006 fe36 	bl	8008e94 <set_aido>
				SEND_str("\n");
 8002228:	4865      	ldr	r0, [pc, #404]	; (80023c0 <json_input+0x6ac>)
 800222a:	f000 fd9f 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <json_input+0x6b0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd9a 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002238:	4861      	ldr	r0, [pc, #388]	; (80023c0 <json_input+0x6ac>)
 800223a:	f000 fd97 	bl	8002d6c <SEND_str>
				SEND_str(A_IN);
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <json_input+0x698>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd92 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002248:	485d      	ldr	r0, [pc, #372]	; (80023c0 <json_input+0x6ac>)
 800224a:	f000 fd8f 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_LOW);
 800224e:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <json_input+0x69c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd8a 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002258:	4859      	ldr	r0, [pc, #356]	; (80023c0 <json_input+0x6ac>)
 800225a:	f000 fd87 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_HIGH);
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <json_input+0x6a0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd82 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002268:	4855      	ldr	r0, [pc, #340]	; (80023c0 <json_input+0x6ac>)
 800226a:	f000 fd7f 	bl	8002d6c <SEND_str>
				SEND_str(D_OUT);
 800226e:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <json_input+0x6a4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd7a 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002278:	4851      	ldr	r0, [pc, #324]	; (80023c0 <json_input+0x6ac>)
 800227a:	f000 fd77 	bl	8002d6c <SEND_str>
				SEND_str(VAR_OUT);
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <json_input+0x6a8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fd72 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002288:	484d      	ldr	r0, [pc, #308]	; (80023c0 <json_input+0x6ac>)
 800228a:	f000 fd6f 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 800228e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002292:	f7fe ff0f 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002296:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800229a:	f019 f967 	bl	801b56c <free>
				free(sInstruction);
 800229e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80022a2:	f019 f963 	bl	801b56c <free>
				free(sType);
 80022a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022a8:	f019 f960 	bl	801b56c <free>
				free(s1);
 80022ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ae:	f019 f95d 	bl	801b56c <free>
				free(s2);
 80022b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022b4:	f019 f95a 	bl	801b56c <free>
				free(s3);
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f019 f957 	bl	801b56c <free>
				free(s4);
 80022be:	69f8      	ldr	r0, [r7, #28]
 80022c0:	f019 f954 	bl	801b56c <free>
				free(s5);
 80022c4:	69b8      	ldr	r0, [r7, #24]
 80022c6:	f019 f951 	bl	801b56c <free>
			{
 80022ca:	bf00      	nop
}
 80022cc:	f000 bc1a 	b.w	8002b04 <json_input+0xdf0>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <json_input+0x6b0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	493c      	ldr	r1, [pc, #240]	; (80023c8 <json_input+0x6b4>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd ff7a 	bl	80001d0 <strcmp>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17e      	bne.n	80023e0 <json_input+0x6cc>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 80022e2:	493a      	ldr	r1, [pc, #232]	; (80023cc <json_input+0x6b8>)
 80022e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022e8:	f7ff fcc8 	bl	8001c7c <cJSON_GetObjectItem>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4938      	ldr	r1, [pc, #224]	; (80023d0 <json_input+0x6bc>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fcc3 	bl	8001c7c <cJSON_GetObjectItem>
 80022f6:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 80022f8:	4934      	ldr	r1, [pc, #208]	; (80023cc <json_input+0x6b8>)
 80022fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022fe:	f7ff fcbd 	bl	8001c7c <cJSON_GetObjectItem>
 8002302:	4603      	mov	r3, r0
 8002304:	4933      	ldr	r1, [pc, #204]	; (80023d4 <json_input+0x6c0>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fcb8 	bl	8001c7c <cJSON_GetObjectItem>
 800230c:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <json_input+0x6c4>)
 8002314:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <json_input+0x6c8>)
 800231c:	6013      	str	r3, [r2, #0]
				save_pwm(PWM_OUT, text);
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <json_input+0x6c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	f005 f89d 	bl	8007464 <save_pwm>
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <json_input+0x6c4>)
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <json_input+0x6c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f019 f8e5 	bl	801b502 <atoi>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	4620      	mov	r0, r4
 800233e:	f006 fef9 	bl	8009134 <set_pwm>
				SEND_str("\n");
 8002342:	481f      	ldr	r0, [pc, #124]	; (80023c0 <json_input+0x6ac>)
 8002344:	f000 fd12 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <json_input+0x6b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd0d 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002352:	481b      	ldr	r0, [pc, #108]	; (80023c0 <json_input+0x6ac>)
 8002354:	f000 fd0a 	bl	8002d6c <SEND_str>
				SEND_str(PWM_OUT);
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <json_input+0x6c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd05 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <json_input+0x6ac>)
 8002364:	f000 fd02 	bl	8002d6c <SEND_str>
				SEND_str(D_CYCLE);
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <json_input+0x6c8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fcfd 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002372:	4813      	ldr	r0, [pc, #76]	; (80023c0 <json_input+0x6ac>)
 8002374:	f000 fcfa 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 8002378:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800237c:	f7fe fe9a 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002380:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002384:	f019 f8f2 	bl	801b56c <free>
				free(sInstruction);
 8002388:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800238c:	f019 f8ee 	bl	801b56c <free>
				free(sType);
 8002390:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002392:	f019 f8eb 	bl	801b56c <free>
				free(s1);
 8002396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002398:	f019 f8e8 	bl	801b56c <free>
				free(s2);
 800239c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800239e:	f019 f8e5 	bl	801b56c <free>
}
 80023a2:	e3af      	b.n	8002b04 <json_input+0xdf0>
 80023a4:	20001228 	.word	0x20001228
 80023a8:	40021000 	.word	0x40021000
 80023ac:	200013c0 	.word	0x200013c0
 80023b0:	2000138c 	.word	0x2000138c
 80023b4:	200013b0 	.word	0x200013b0
 80023b8:	200013ac 	.word	0x200013ac
 80023bc:	20001388 	.word	0x20001388
 80023c0:	08020800 	.word	0x08020800
 80023c4:	2000136c 	.word	0x2000136c
 80023c8:	08020860 	.word	0x08020860
 80023cc:	080207c4 	.word	0x080207c4
 80023d0:	08020868 	.word	0x08020868
 80023d4:	08020870 	.word	0x08020870
 80023d8:	20001374 	.word	0x20001374
 80023dc:	200013b4 	.word	0x200013b4
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 80023e0:	4b6b      	ldr	r3, [pc, #428]	; (8002590 <json_input+0x87c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	496b      	ldr	r1, [pc, #428]	; (8002594 <json_input+0x880>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd fef2 	bl	80001d0 <strcmp>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80ea 	bne.w	80025c8 <json_input+0x8b4>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 80023f4:	4968      	ldr	r1, [pc, #416]	; (8002598 <json_input+0x884>)
 80023f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80023fa:	f7ff fc3f 	bl	8001c7c <cJSON_GetObjectItem>
 80023fe:	4603      	mov	r3, r0
 8002400:	4966      	ldr	r1, [pc, #408]	; (800259c <json_input+0x888>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fc3a 	bl	8001c7c <cJSON_GetObjectItem>
 8002408:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 800240a:	4963      	ldr	r1, [pc, #396]	; (8002598 <json_input+0x884>)
 800240c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002410:	f7ff fc34 	bl	8001c7c <cJSON_GetObjectItem>
 8002414:	4603      	mov	r3, r0
 8002416:	4962      	ldr	r1, [pc, #392]	; (80025a0 <json_input+0x88c>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc2f 	bl	8001c7c <cJSON_GetObjectItem>
 800241e:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 8002420:	495d      	ldr	r1, [pc, #372]	; (8002598 <json_input+0x884>)
 8002422:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002426:	f7ff fc29 	bl	8001c7c <cJSON_GetObjectItem>
 800242a:	4603      	mov	r3, r0
 800242c:	495d      	ldr	r1, [pc, #372]	; (80025a4 <json_input+0x890>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc24 	bl	8001c7c <cJSON_GetObjectItem>
 8002434:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002436:	4958      	ldr	r1, [pc, #352]	; (8002598 <json_input+0x884>)
 8002438:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800243c:	f7ff fc1e 	bl	8001c7c <cJSON_GetObjectItem>
 8002440:	4603      	mov	r3, r0
 8002442:	4959      	ldr	r1, [pc, #356]	; (80025a8 <json_input+0x894>)
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc19 	bl	8001c7c <cJSON_GetObjectItem>
 800244a:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800244c:	4952      	ldr	r1, [pc, #328]	; (8002598 <json_input+0x884>)
 800244e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002452:	f7ff fc13 	bl	8001c7c <cJSON_GetObjectItem>
 8002456:	4603      	mov	r3, r0
 8002458:	4954      	ldr	r1, [pc, #336]	; (80025ac <json_input+0x898>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc0e 	bl	8001c7c <cJSON_GetObjectItem>
 8002460:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <json_input+0x89c>)
 8002468:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <json_input+0x8a0>)
 8002470:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <json_input+0x8a4>)
 8002478:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <json_input+0x8a8>)
 8002480:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <json_input+0x8ac>)
 8002488:	6013      	str	r3, [r2, #0]
				save_tsido(ROM_RAW, text);
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <json_input+0x89c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	f005 f807 	bl	80074a4 <save_tsido>
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <json_input+0x89c>)
 8002498:	681c      	ldr	r4, [r3, #0]
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <json_input+0x8a0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f019 f82c 	bl	801b4fc <atof>
 80024a4:	eeb0 8a40 	vmov.f32	s16, s0
 80024a8:	eef0 8a60 	vmov.f32	s17, s1
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <json_input+0x8a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f019 f823 	bl	801b4fc <atof>
 80024b6:	eeb0 9a40 	vmov.f32	s18, s0
 80024ba:	eef0 9a60 	vmov.f32	s19, s1
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <json_input+0x8a8>)
 80024c0:	681d      	ldr	r5, [r3, #0]
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <json_input+0x8ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f019 f81b 	bl	801b502 <atoi>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4629      	mov	r1, r5
 80024d4:	eeb0 1a49 	vmov.f32	s2, s18
 80024d8:	eef0 1a69 	vmov.f32	s3, s19
 80024dc:	eeb0 0a48 	vmov.f32	s0, s16
 80024e0:	eef0 0a68 	vmov.f32	s1, s17
 80024e4:	4620      	mov	r0, r4
 80024e6:	f006 fed3 	bl	8009290 <set_temperature>
				SEND_str("\n");
 80024ea:	4836      	ldr	r0, [pc, #216]	; (80025c4 <json_input+0x8b0>)
 80024ec:	f000 fc3e 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <json_input+0x87c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fc39 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 80024fa:	4832      	ldr	r0, [pc, #200]	; (80025c4 <json_input+0x8b0>)
 80024fc:	f000 fc36 	bl	8002d6c <SEND_str>
				SEND_str(ROM_RAW);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <json_input+0x89c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fc31 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 800250a:	482e      	ldr	r0, [pc, #184]	; (80025c4 <json_input+0x8b0>)
 800250c:	f000 fc2e 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <json_input+0x8a0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fc29 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <json_input+0x8b0>)
 800251c:	f000 fc26 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <json_input+0x8a4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fc21 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 800252a:	4826      	ldr	r0, [pc, #152]	; (80025c4 <json_input+0x8b0>)
 800252c:	f000 fc1e 	bl	8002d6c <SEND_str>
				SEND_str(D_OUT);
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <json_input+0x8a8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fc19 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 800253a:	4822      	ldr	r0, [pc, #136]	; (80025c4 <json_input+0x8b0>)
 800253c:	f000 fc16 	bl	8002d6c <SEND_str>
				SEND_str(VAR_OUT);
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <json_input+0x8ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fc11 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 800254a:	481e      	ldr	r0, [pc, #120]	; (80025c4 <json_input+0x8b0>)
 800254c:	f000 fc0e 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 8002550:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002554:	f7fe fdae 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002558:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800255c:	f019 f806 	bl	801b56c <free>
				free(sInstruction);
 8002560:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002564:	f019 f802 	bl	801b56c <free>
				free(sType);
 8002568:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800256a:	f018 ffff 	bl	801b56c <free>
				free(s1);
 800256e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002570:	f018 fffc 	bl	801b56c <free>
				free(s2);
 8002574:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002576:	f018 fff9 	bl	801b56c <free>
				free(s3);
 800257a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800257c:	f018 fff6 	bl	801b56c <free>
				free(s4);
 8002580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002582:	f018 fff3 	bl	801b56c <free>
				free(s5);
 8002586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002588:	f018 fff0 	bl	801b56c <free>
}
 800258c:	e2ba      	b.n	8002b04 <json_input+0xdf0>
 800258e:	bf00      	nop
 8002590:	2000136c 	.word	0x2000136c
 8002594:	08020878 	.word	0x08020878
 8002598:	080207c4 	.word	0x080207c4
 800259c:	0802088c 	.word	0x0802088c
 80025a0:	08020894 	.word	0x08020894
 80025a4:	080208a4 	.word	0x080208a4
 80025a8:	080207f0 	.word	0x080207f0
 80025ac:	080207f8 	.word	0x080207f8
 80025b0:	200013cc 	.word	0x200013cc
 80025b4:	20001368 	.word	0x20001368
 80025b8:	200013c8 	.word	0x200013c8
 80025bc:	200013ac 	.word	0x200013ac
 80025c0:	20001388 	.word	0x20001388
 80025c4:	08020800 	.word	0x08020800
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 80025c8:	4b9f      	ldr	r3, [pc, #636]	; (8002848 <json_input+0xb34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	499f      	ldr	r1, [pc, #636]	; (800284c <json_input+0xb38>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd fdfe 	bl	80001d0 <strcmp>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 809d 	bne.w	8002716 <json_input+0xa02>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80025dc:	499c      	ldr	r1, [pc, #624]	; (8002850 <json_input+0xb3c>)
 80025de:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80025e2:	f7ff fb4b 	bl	8001c7c <cJSON_GetObjectItem>
 80025e6:	4603      	mov	r3, r0
 80025e8:	499a      	ldr	r1, [pc, #616]	; (8002854 <json_input+0xb40>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb46 	bl	8001c7c <cJSON_GetObjectItem>
 80025f0:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80025f2:	4997      	ldr	r1, [pc, #604]	; (8002850 <json_input+0xb3c>)
 80025f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80025f8:	f7ff fb40 	bl	8001c7c <cJSON_GetObjectItem>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4996      	ldr	r1, [pc, #600]	; (8002858 <json_input+0xb44>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb3b 	bl	8001c7c <cJSON_GetObjectItem>
 8002606:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002608:	4991      	ldr	r1, [pc, #580]	; (8002850 <json_input+0xb3c>)
 800260a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800260e:	f7ff fb35 	bl	8001c7c <cJSON_GetObjectItem>
 8002612:	4603      	mov	r3, r0
 8002614:	4991      	ldr	r1, [pc, #580]	; (800285c <json_input+0xb48>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb30 	bl	8001c7c <cJSON_GetObjectItem>
 800261c:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 800261e:	498c      	ldr	r1, [pc, #560]	; (8002850 <json_input+0xb3c>)
 8002620:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002624:	f7ff fb2a 	bl	8001c7c <cJSON_GetObjectItem>
 8002628:	4603      	mov	r3, r0
 800262a:	498d      	ldr	r1, [pc, #564]	; (8002860 <json_input+0xb4c>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fb25 	bl	8001c7c <cJSON_GetObjectItem>
 8002632:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002634:	4986      	ldr	r1, [pc, #536]	; (8002850 <json_input+0xb3c>)
 8002636:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800263a:	f7ff fb1f 	bl	8001c7c <cJSON_GetObjectItem>
 800263e:	4603      	mov	r3, r0
 8002640:	4988      	ldr	r1, [pc, #544]	; (8002864 <json_input+0xb50>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fb1a 	bl	8001c7c <cJSON_GetObjectItem>
 8002648:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 800264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4a86      	ldr	r2, [pc, #536]	; (8002868 <json_input+0xb54>)
 8002650:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4a85      	ldr	r2, [pc, #532]	; (800286c <json_input+0xb58>)
 8002658:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 800265a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4a84      	ldr	r2, [pc, #528]	; (8002870 <json_input+0xb5c>)
 8002660:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a83      	ldr	r2, [pc, #524]	; (8002874 <json_input+0xb60>)
 8002668:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a82      	ldr	r2, [pc, #520]	; (8002878 <json_input+0xb64>)
 8002670:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002672:	4882      	ldr	r0, [pc, #520]	; (800287c <json_input+0xb68>)
 8002674:	f000 fb7a 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <json_input+0xb34>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fb75 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002682:	487e      	ldr	r0, [pc, #504]	; (800287c <json_input+0xb68>)
 8002684:	f000 fb72 	bl	8002d6c <SEND_str>
				SEND_str(A_IN);
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <json_input+0xb54>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fb6d 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002692:	487a      	ldr	r0, [pc, #488]	; (800287c <json_input+0xb68>)
 8002694:	f000 fb6a 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_LOW);
 8002698:	4b74      	ldr	r3, [pc, #464]	; (800286c <json_input+0xb58>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fb65 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 80026a2:	4876      	ldr	r0, [pc, #472]	; (800287c <json_input+0xb68>)
 80026a4:	f000 fb62 	bl	8002d6c <SEND_str>
				SEND_str(RANGE_HIGH);
 80026a8:	4b71      	ldr	r3, [pc, #452]	; (8002870 <json_input+0xb5c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fb5d 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 80026b2:	4872      	ldr	r0, [pc, #456]	; (800287c <json_input+0xb68>)
 80026b4:	f000 fb5a 	bl	8002d6c <SEND_str>
				SEND_str(A_OUT);
 80026b8:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <json_input+0xb60>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fb55 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 80026c2:	486e      	ldr	r0, [pc, #440]	; (800287c <json_input+0xb68>)
 80026c4:	f000 fb52 	bl	8002d6c <SEND_str>
				SEND_str(VAR_OUT);
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <json_input+0xb64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fb4d 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 80026d2:	486a      	ldr	r0, [pc, #424]	; (800287c <json_input+0xb68>)
 80026d4:	f000 fb4a 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 80026d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026dc:	f7fe fcea 	bl	80010b4 <cJSON_Delete>
				free(stime);
 80026e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026e4:	f018 ff42 	bl	801b56c <free>
				free(sInstruction);
 80026e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026ec:	f018 ff3e 	bl	801b56c <free>
				free(sType);
 80026f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026f2:	f018 ff3b 	bl	801b56c <free>
				free(s1);
 80026f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026f8:	f018 ff38 	bl	801b56c <free>
				free(s2);
 80026fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026fe:	f018 ff35 	bl	801b56c <free>
				free(s3);
 8002702:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002704:	f018 ff32 	bl	801b56c <free>
				free(s4);
 8002708:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800270a:	f018 ff2f 	bl	801b56c <free>
				free(s5);
 800270e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002710:	f018 ff2c 	bl	801b56c <free>
}
 8002714:	e1f6      	b.n	8002b04 <json_input+0xdf0>
				cJSON_Delete(json);
 8002716:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800271a:	f7fe fccb 	bl	80010b4 <cJSON_Delete>
				free(stime);
 800271e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002722:	f018 ff23 	bl	801b56c <free>
				free(sInstruction);
 8002726:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800272a:	f018 ff1f 	bl	801b56c <free>
				free(sType);
 800272e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002730:	f018 ff1c 	bl	801b56c <free>
}
 8002734:	e1e6      	b.n	8002b04 <json_input+0xdf0>
		else if(strcmp(INSTRUCTION, "UPDATE_FIRMWARE") == 0)
 8002736:	4b52      	ldr	r3, [pc, #328]	; (8002880 <json_input+0xb6c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4952      	ldr	r1, [pc, #328]	; (8002884 <json_input+0xb70>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fd47 	bl	80001d0 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 80b1 	bne.w	80028ac <json_input+0xb98>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 800274a:	4941      	ldr	r1, [pc, #260]	; (8002850 <json_input+0xb3c>)
 800274c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002750:	f7ff fa94 	bl	8001c7c <cJSON_GetObjectItem>
 8002754:	4603      	mov	r3, r0
 8002756:	494c      	ldr	r1, [pc, #304]	; (8002888 <json_input+0xb74>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fa8f 	bl	8001c7c <cJSON_GetObjectItem>
 800275e:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <json_input+0xb34>)
 8002766:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "SETTING_FIRMWARE") == 0)
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <json_input+0xb34>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4947      	ldr	r1, [pc, #284]	; (800288c <json_input+0xb78>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd2e 	bl	80001d0 <strcmp>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d155      	bne.n	8002826 <json_input+0xb12>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "NAME");
 800277a:	4935      	ldr	r1, [pc, #212]	; (8002850 <json_input+0xb3c>)
 800277c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002780:	f7ff fa7c 	bl	8001c7c <cJSON_GetObjectItem>
 8002784:	4603      	mov	r3, r0
 8002786:	4942      	ldr	r1, [pc, #264]	; (8002890 <json_input+0xb7c>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fa77 	bl	8001c7c <cJSON_GetObjectItem>
 800278e:	66b8      	str	r0, [r7, #104]	; 0x68
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VERSION");
 8002790:	492f      	ldr	r1, [pc, #188]	; (8002850 <json_input+0xb3c>)
 8002792:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002796:	f7ff fa71 	bl	8001c7c <cJSON_GetObjectItem>
 800279a:	4603      	mov	r3, r0
 800279c:	493d      	ldr	r1, [pc, #244]	; (8002894 <json_input+0xb80>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fa6c 	bl	8001c7c <cJSON_GetObjectItem>
 80027a4:	6678      	str	r0, [r7, #100]	; 0x64
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SIZE");
 80027a6:	492a      	ldr	r1, [pc, #168]	; (8002850 <json_input+0xb3c>)
 80027a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027ac:	f7ff fa66 	bl	8001c7c <cJSON_GetObjectItem>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4939      	ldr	r1, [pc, #228]	; (8002898 <json_input+0xb84>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fa61 	bl	8001c7c <cJSON_GetObjectItem>
 80027ba:	6638      	str	r0, [r7, #96]	; 0x60
				NAME_FW = s1->valuestring;
 80027bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4a36      	ldr	r2, [pc, #216]	; (800289c <json_input+0xb88>)
 80027c2:	6013      	str	r3, [r2, #0]
				VERSION_FW = s2->valuestring;
 80027c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4a35      	ldr	r2, [pc, #212]	; (80028a0 <json_input+0xb8c>)
 80027ca:	6013      	str	r3, [r2, #0]
				SIZE_FW = s3->valuestring;
 80027cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <json_input+0xb90>)
 80027d2:	6013      	str	r3, [r2, #0]
				SetFW.NAME = NAME_FW;
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <json_input+0xb88>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <json_input+0xb94>)
 80027da:	6013      	str	r3, [r2, #0]
				SetFW.VERSION = VERSION_FW;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <json_input+0xb8c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a31      	ldr	r2, [pc, #196]	; (80028a8 <json_input+0xb94>)
 80027e2:	6053      	str	r3, [r2, #4]
				SetFW.SIZE = atoi(SIZE_FW);
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <json_input+0xb90>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f018 fe8a 	bl	801b502 <atoi>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <json_input+0xb94>)
 80027f2:	609a      	str	r2, [r3, #8]
				cJSON_Delete(json);
 80027f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027f8:	f7fe fc5c 	bl	80010b4 <cJSON_Delete>
				free(stime);
 80027fc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002800:	f018 feb4 	bl	801b56c <free>
				free(sInstruction);
 8002804:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002808:	f018 feb0 	bl	801b56c <free>
				free(sType);
 800280c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800280e:	f018 fead 	bl	801b56c <free>
				free(s1);
 8002812:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002814:	f018 feaa 	bl	801b56c <free>
				free(s2);
 8002818:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800281a:	f018 fea7 	bl	801b56c <free>
				free(s3);
 800281e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002820:	f018 fea4 	bl	801b56c <free>
}
 8002824:	e16e      	b.n	8002b04 <json_input+0xdf0>
				cJSON_Delete(json);
 8002826:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800282a:	f7fe fc43 	bl	80010b4 <cJSON_Delete>
				free(stime);
 800282e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002832:	f018 fe9b 	bl	801b56c <free>
				free(sInstruction);
 8002836:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800283a:	f018 fe97 	bl	801b56c <free>
				free(sType);
 800283e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002840:	f018 fe94 	bl	801b56c <free>
}
 8002844:	e15e      	b.n	8002b04 <json_input+0xdf0>
 8002846:	bf00      	nop
 8002848:	2000136c 	.word	0x2000136c
 800284c:	080208b4 	.word	0x080208b4
 8002850:	080207c4 	.word	0x080207c4
 8002854:	08020820 	.word	0x08020820
 8002858:	08020828 	.word	0x08020828
 800285c:	08020834 	.word	0x08020834
 8002860:	080208c0 	.word	0x080208c0
 8002864:	080207f8 	.word	0x080207f8
 8002868:	200013c0 	.word	0x200013c0
 800286c:	2000138c 	.word	0x2000138c
 8002870:	200013b0 	.word	0x200013b0
 8002874:	200013a8 	.word	0x200013a8
 8002878:	20001388 	.word	0x20001388
 800287c:	08020800 	.word	0x08020800
 8002880:	200013c4 	.word	0x200013c4
 8002884:	080208c8 	.word	0x080208c8
 8002888:	080207cc 	.word	0x080207cc
 800288c:	080208d8 	.word	0x080208d8
 8002890:	080208ec 	.word	0x080208ec
 8002894:	080208f4 	.word	0x080208f4
 8002898:	080208fc 	.word	0x080208fc
 800289c:	200013d4 	.word	0x200013d4
 80028a0:	2000139c 	.word	0x2000139c
 80028a4:	200013d8 	.word	0x200013d8
 80028a8:	20001188 	.word	0x20001188
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 80028ac:	4b98      	ldr	r3, [pc, #608]	; (8002b10 <json_input+0xdfc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4998      	ldr	r1, [pc, #608]	; (8002b14 <json_input+0xe00>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fc8c 	bl	80001d0 <strcmp>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8111 	bne.w	8002ae2 <json_input+0xdce>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80028c0:	4995      	ldr	r1, [pc, #596]	; (8002b18 <json_input+0xe04>)
 80028c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028c6:	f7ff f9d9 	bl	8001c7c <cJSON_GetObjectItem>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4993      	ldr	r1, [pc, #588]	; (8002b1c <json_input+0xe08>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f9d4 	bl	8001c7c <cJSON_GetObjectItem>
 80028d4:	67f8      	str	r0, [r7, #124]	; 0x7c
			TYPE = sType->valuestring;
 80028d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a91      	ldr	r2, [pc, #580]	; (8002b20 <json_input+0xe0c>)
 80028dc:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 80028de:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <json_input+0xe0c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4990      	ldr	r1, [pc, #576]	; (8002b24 <json_input+0xe10>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fc73 	bl	80001d0 <strcmp>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d14f      	bne.n	8002990 <json_input+0xc7c>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80028f0:	4989      	ldr	r1, [pc, #548]	; (8002b18 <json_input+0xe04>)
 80028f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028f6:	f7ff f9c1 	bl	8001c7c <cJSON_GetObjectItem>
 80028fa:	4603      	mov	r3, r0
 80028fc:	498a      	ldr	r1, [pc, #552]	; (8002b28 <json_input+0xe14>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f9bc 	bl	8001c7c <cJSON_GetObjectItem>
 8002904:	6738      	str	r0, [r7, #112]	; 0x70
				DigitalParamMass = s1->valuestring;
 8002906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4a88      	ldr	r2, [pc, #544]	; (8002b2c <json_input+0xe18>)
 800290c:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(DigitalParamMass);
 800290e:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <json_input+0xe18>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f9d0 	bl	8001cb8 <parseValue>
 8002918:	4602      	mov	r2, r0
 800291a:	4b85      	ldr	r3, [pc, #532]	; (8002b30 <json_input+0xe1c>)
 800291c:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002924:	e012      	b.n	800294c <json_input+0xc38>
					Status_DIN[i] = (MyFile[i] - 0x30);
 8002926:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <json_input+0xe1c>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3b30      	subs	r3, #48	; 0x30
 8002934:	b2d9      	uxtb	r1, r3
 8002936:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <json_input+0xe20>)
 8002938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800293c:	4413      	add	r3, r2
 800293e:	460a      	mov	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002946:	3301      	adds	r3, #1
 8002948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800294c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002950:	2b07      	cmp	r3, #7
 8002952:	dde8      	ble.n	8002926 <json_input+0xc12>
				SEND_str("\n");
 8002954:	4878      	ldr	r0, [pc, #480]	; (8002b38 <json_input+0xe24>)
 8002956:	f000 fa09 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 800295a:	4b71      	ldr	r3, [pc, #452]	; (8002b20 <json_input+0xe0c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa04 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002964:	4874      	ldr	r0, [pc, #464]	; (8002b38 <json_input+0xe24>)
 8002966:	f000 fa01 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 800296a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800296e:	f7fe fba1 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002972:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002976:	f018 fdf9 	bl	801b56c <free>
				free(sInstruction);
 800297a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800297e:	f018 fdf5 	bl	801b56c <free>
				free(sType);
 8002982:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002984:	f018 fdf2 	bl	801b56c <free>
				free(s1);
 8002988:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800298a:	f018 fdef 	bl	801b56c <free>
}
 800298e:	e0b9      	b.n	8002b04 <json_input+0xdf0>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002990:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <json_input+0xe0c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4969      	ldr	r1, [pc, #420]	; (8002b3c <json_input+0xe28>)
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fc1a 	bl	80001d0 <strcmp>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14f      	bne.n	8002a42 <json_input+0xd2e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80029a2:	495d      	ldr	r1, [pc, #372]	; (8002b18 <json_input+0xe04>)
 80029a4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029a8:	f7ff f968 	bl	8001c7c <cJSON_GetObjectItem>
 80029ac:	4603      	mov	r3, r0
 80029ae:	495e      	ldr	r1, [pc, #376]	; (8002b28 <json_input+0xe14>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f963 	bl	8001c7c <cJSON_GetObjectItem>
 80029b6:	6778      	str	r0, [r7, #116]	; 0x74
				AnalogParamMass = s1->valuestring;
 80029b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <json_input+0xe2c>)
 80029be:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(AnalogParamMass);
 80029c0:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <json_input+0xe2c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f977 	bl	8001cb8 <parseValue>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b58      	ldr	r3, [pc, #352]	; (8002b30 <json_input+0xe1c>)
 80029ce:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029d6:	e012      	b.n	80029fe <json_input+0xcea>
					Status_AIN[i] = (MyFile[i] - 0x30);
 80029d8:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <json_input+0xe1c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e0:	4413      	add	r3, r2
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3b30      	subs	r3, #48	; 0x30
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <json_input+0xe30>)
 80029ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ee:	4413      	add	r3, r2
 80029f0:	460a      	mov	r2, r1
 80029f2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80029f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a02:	2b07      	cmp	r3, #7
 8002a04:	dde8      	ble.n	80029d8 <json_input+0xcc4>
				SEND_str("\n");
 8002a06:	484c      	ldr	r0, [pc, #304]	; (8002b38 <json_input+0xe24>)
 8002a08:	f000 f9b0 	bl	8002d6c <SEND_str>
				SEND_str(TYPE);
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <json_input+0xe0c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f9ab 	bl	8002d6c <SEND_str>
				SEND_str("\n");
 8002a16:	4848      	ldr	r0, [pc, #288]	; (8002b38 <json_input+0xe24>)
 8002a18:	f000 f9a8 	bl	8002d6c <SEND_str>
				cJSON_Delete(json);
 8002a1c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a20:	f7fe fb48 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002a24:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a28:	f018 fda0 	bl	801b56c <free>
				free(sInstruction);
 8002a2c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a30:	f018 fd9c 	bl	801b56c <free>
				free(sType);
 8002a34:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002a36:	f018 fd99 	bl	801b56c <free>
				free(s1);
 8002a3a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a3c:	f018 fd96 	bl	801b56c <free>
}
 8002a40:	e060      	b.n	8002b04 <json_input+0xdf0>
			else if(strcmp(TYPE, "OCD") == 0)
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <json_input+0xe0c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4940      	ldr	r1, [pc, #256]	; (8002b48 <json_input+0xe34>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fbc1 	bl	80001d0 <strcmp>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d157      	bne.n	8002b04 <json_input+0xdf0>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002a54:	4930      	ldr	r1, [pc, #192]	; (8002b18 <json_input+0xe04>)
 8002a56:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a5a:	f7ff f90f 	bl	8001c7c <cJSON_GetObjectItem>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4931      	ldr	r1, [pc, #196]	; (8002b28 <json_input+0xe14>)
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f90a 	bl	8001c7c <cJSON_GetObjectItem>
 8002a68:	67b8      	str	r0, [r7, #120]	; 0x78
				OpenCollectorDrainParamMass = s1->valuestring;
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4a37      	ldr	r2, [pc, #220]	; (8002b4c <json_input+0xe38>)
 8002a70:	6013      	str	r3, [r2, #0]
				MyFile = parseValue(OpenCollectorDrainParamMass);
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <json_input+0xe38>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f91e 	bl	8001cb8 <parseValue>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <json_input+0xe1c>)
 8002a80:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a88:	e012      	b.n	8002ab0 <json_input+0xd9c>
					Status_OCD[i] = (MyFile[i] - 0x30);
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <json_input+0xe1c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3b30      	subs	r3, #48	; 0x30
 8002a98:	b2d9      	uxtb	r1, r3
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <json_input+0xe3c>)
 8002a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa0:	4413      	add	r3, r2
 8002aa2:	460a      	mov	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab4:	2b07      	cmp	r3, #7
 8002ab6:	dde8      	ble.n	8002a8a <json_input+0xd76>
				ReWriteOCD();
 8002ab8:	f005 fcde 	bl	8008478 <ReWriteOCD>
				cJSON_Delete(json);
 8002abc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002ac0:	f7fe faf8 	bl	80010b4 <cJSON_Delete>
				free(stime);
 8002ac4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ac8:	f018 fd50 	bl	801b56c <free>
				free(sInstruction);
 8002acc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002ad0:	f018 fd4c 	bl	801b56c <free>
				free(sType);
 8002ad4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002ad6:	f018 fd49 	bl	801b56c <free>
				free(s1);
 8002ada:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002adc:	f018 fd46 	bl	801b56c <free>
}
 8002ae0:	e010      	b.n	8002b04 <json_input+0xdf0>
			free(stime);
 8002ae2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ae6:	f018 fd41 	bl	801b56c <free>
			free(sInstruction);
 8002aea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002aee:	f018 fd3d 	bl	801b56c <free>
}
 8002af2:	e007      	b.n	8002b04 <json_input+0xdf0>
		cJSON_Delete(json);
 8002af4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002af8:	f7fe fadc 	bl	80010b4 <cJSON_Delete>
		free(stime);
 8002afc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b00:	f018 fd34 	bl	801b56c <free>
}
 8002b04:	bf00      	nop
 8002b06:	379c      	adds	r7, #156	; 0x9c
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	ecbd 8b04 	vpop	{d8-d9}
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b10:	200013c4 	.word	0x200013c4
 8002b14:	08020904 	.word	0x08020904
 8002b18:	080207c4 	.word	0x080207c4
 8002b1c:	080207cc 	.word	0x080207cc
 8002b20:	2000136c 	.word	0x2000136c
 8002b24:	08020914 	.word	0x08020914
 8002b28:	0802091c 	.word	0x0802091c
 8002b2c:	20001370 	.word	0x20001370
 8002b30:	200016c4 	.word	0x200016c4
 8002b34:	20000ff4 	.word	0x20000ff4
 8002b38:	08020800 	.word	0x08020800
 8002b3c:	08020920 	.word	0x08020920
 8002b40:	20001398 	.word	0x20001398
 8002b44:	20000fec 	.word	0x20000fec
 8002b48:	08020928 	.word	0x08020928
 8002b4c:	200013d0 	.word	0x200013d0
 8002b50:	20000ffc 	.word	0x20000ffc

08002b54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b68:	4a37      	ldr	r2, [pc, #220]	; (8002c48 <MX_ADC1_Init+0xf4>)
 8002b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b86:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002b98:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002bba:	f007 f89d 	bl	8009cf8 <HAL_ADC_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002bc4:	f000 fdba 	bl	800373c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	481a      	ldr	r0, [pc, #104]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002bda:	f007 f9d7 	bl	8009f8c <HAL_ADC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002be4:	f000 fdaa 	bl	800373c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002be8:	2304      	movs	r3, #4
 8002bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4813      	ldr	r0, [pc, #76]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002bf6:	f007 f9c9 	bl	8009f8c <HAL_ADC_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002c00:	f000 fd9c 	bl	800373c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c04:	2305      	movs	r3, #5
 8002c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002c12:	f007 f9bb 	bl	8009f8c <HAL_ADC_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002c1c:	f000 fd8e 	bl	800373c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c20:	2306      	movs	r3, #6
 8002c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002c24:	2304      	movs	r3, #4
 8002c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_ADC1_Init+0xf0>)
 8002c2e:	f007 f9ad 	bl	8009f8c <HAL_ADC_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002c38:	f000 fd80 	bl	800373c <Error_Handler>
  }

}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200013dc 	.word	0x200013dc
 8002c48:	40012000 	.word	0x40012000

08002c4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_ADC_MspInit+0xdc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d157      	bne.n	8002d1e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_ADC_MspInit+0xe0>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8002ca6:	2378      	movs	r3, #120	; 0x78
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002caa:	2303      	movs	r3, #3
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481d      	ldr	r0, [pc, #116]	; (8002d30 <HAL_ADC_MspInit+0xe4>)
 8002cba:	f009 f983 	bl	800bfc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_ADC_MspInit+0xec>)
 8002cc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002d04:	f007 fd2c 	bl	800a760 <HAL_DMA_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d0e:	f000 fd15 	bl	800373c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <HAL_ADC_MspInit+0xe8>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40012000 	.word	0x40012000
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	20001424 	.word	0x20001424
 8002d38:	40026410 	.word	0x40026410

08002d3c <USART_Tx>:
extern uint32_t size_of_data;

//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8002d46:	bf00      	nop
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <USART_Tx+0x2c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f9      	beq.n	8002d48 <USART_Tx+0xc>
	USART3->DR = Data;
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <USART_Tx+0x2c>)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	6053      	str	r3, [r2, #4]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40004800 	.word	0x40004800

08002d6c <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002d78:	e009      	b.n	8002d8e <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ffda 	bl	8002d3c <USART_Tx>
		i++;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ef      	bne.n	8002d7a <SEND_str+0xe>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af02      	add	r7, sp, #8
	if(dbg_available())
 8002daa:	f001 fcc7 	bl	800473c <dbg_available>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8147 	beq.w	8003044 <DEBUG_main+0x2a0>
	{
		uint16_t i = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	82fb      	strh	r3, [r7, #22]
		uint8_t fdbg = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	757b      	strb	r3, [r7, #21]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8002dbe:	f240 4206 	movw	r2, #1030	; 0x406
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	48a1      	ldr	r0, [pc, #644]	; (800304c <DEBUG_main+0x2a8>)
 8002dc6:	f018 fc1e 	bl	801b606 <memset>
		HAL_Delay(50);
 8002dca:	2032      	movs	r0, #50	; 0x32
 8002dcc:	f006 ff72 	bl	8009cb4 <HAL_Delay>

		while(dbg_available())
 8002dd0:	e012      	b.n	8002df8 <DEBUG_main+0x54>
		{
			DBG_buf[i++] = dbg_read();
 8002dd2:	f001 fcd7 	bl	8004784 <dbg_read>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	8afb      	ldrh	r3, [r7, #22]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	82fa      	strh	r2, [r7, #22]
 8002de0:	461a      	mov	r2, r3
 8002de2:	b2c9      	uxtb	r1, r1
 8002de4:	4b99      	ldr	r3, [pc, #612]	; (800304c <DEBUG_main+0x2a8>)
 8002de6:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8002de8:	8afb      	ldrh	r3, [r7, #22]
 8002dea:	f240 4205 	movw	r2, #1029	; 0x405
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d808      	bhi.n	8002e04 <DEBUG_main+0x60>
				break;
			HAL_Delay(1);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f006 ff5e 	bl	8009cb4 <HAL_Delay>
		while(dbg_available())
 8002df8:	f001 fca0 	bl	800473c <dbg_available>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e7      	bne.n	8002dd2 <DEBUG_main+0x2e>
 8002e02:	e000      	b.n	8002e06 <DEBUG_main+0x62>
				break;
 8002e04:	bf00      	nop
		}
		clear_string(DBG_buf);
 8002e06:	4891      	ldr	r0, [pc, #580]	; (800304c <DEBUG_main+0x2a8>)
 8002e08:	f005 faf6 	bl	80083f8 <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8002e0c:	4990      	ldr	r1, [pc, #576]	; (8003050 <DEBUG_main+0x2ac>)
 8002e0e:	488f      	ldr	r0, [pc, #572]	; (800304c <DEBUG_main+0x2a8>)
 8002e10:	f019 f9c8 	bl	801c1a4 <strstr>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <DEBUG_main+0x7e>
		{
			SEND_str("respone\n");
 8002e1a:	488e      	ldr	r0, [pc, #568]	; (8003054 <DEBUG_main+0x2b0>)
 8002e1c:	f7ff ffa6 	bl	8002d6c <SEND_str>
 8002e20:	e106      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "AIN") != NULL)
 8002e22:	498d      	ldr	r1, [pc, #564]	; (8003058 <DEBUG_main+0x2b4>)
 8002e24:	4889      	ldr	r0, [pc, #548]	; (800304c <DEBUG_main+0x2a8>)
 8002e26:	f019 f9bd 	bl	801c1a4 <strstr>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <DEBUG_main+0x94>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8002e30:	488a      	ldr	r0, [pc, #552]	; (800305c <DEBUG_main+0x2b8>)
 8002e32:	f7fe ff6f 	bl	8001d14 <json_input>
 8002e36:	e0fb      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8002e38:	4989      	ldr	r1, [pc, #548]	; (8003060 <DEBUG_main+0x2bc>)
 8002e3a:	4884      	ldr	r0, [pc, #528]	; (800304c <DEBUG_main+0x2a8>)
 8002e3c:	f019 f9b2 	bl	801c1a4 <strstr>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <DEBUG_main+0xaa>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8002e46:	4887      	ldr	r0, [pc, #540]	; (8003064 <DEBUG_main+0x2c0>)
 8002e48:	f7fe ff64 	bl	8001d14 <json_input>
 8002e4c:	e0f0      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8002e4e:	4986      	ldr	r1, [pc, #536]	; (8003068 <DEBUG_main+0x2c4>)
 8002e50:	487e      	ldr	r0, [pc, #504]	; (800304c <DEBUG_main+0x2a8>)
 8002e52:	f019 f9a7 	bl	801c1a4 <strstr>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <DEBUG_main+0xc0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8002e5c:	4883      	ldr	r0, [pc, #524]	; (800306c <DEBUG_main+0x2c8>)
 8002e5e:	f7fe ff59 	bl	8001d14 <json_input>
 8002e62:	e0e5      	b.n	8003030 <DEBUG_main+0x28c>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002e64:	4982      	ldr	r1, [pc, #520]	; (8003070 <DEBUG_main+0x2cc>)
 8002e66:	4879      	ldr	r0, [pc, #484]	; (800304c <DEBUG_main+0x2a8>)
 8002e68:	f019 f99c 	bl	801c1a4 <strstr>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <DEBUG_main+0xd6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD2\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002e72:	4880      	ldr	r0, [pc, #512]	; (8003074 <DEBUG_main+0x2d0>)
 8002e74:	f7fe ff4e 	bl	8001d14 <json_input>
 8002e78:	e0da      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002e7a:	497f      	ldr	r1, [pc, #508]	; (8003078 <DEBUG_main+0x2d4>)
 8002e7c:	4873      	ldr	r0, [pc, #460]	; (800304c <DEBUG_main+0x2a8>)
 8002e7e:	f019 f991 	bl	801c1a4 <strstr>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <DEBUG_main+0xec>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD2\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002e88:	487c      	ldr	r0, [pc, #496]	; (800307c <DEBUG_main+0x2d8>)
 8002e8a:	f7fe ff43 	bl	8001d14 <json_input>
 8002e8e:	e0cf      	b.n	8003030 <DEBUG_main+0x28c>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 8002e90:	497b      	ldr	r1, [pc, #492]	; (8003080 <DEBUG_main+0x2dc>)
 8002e92:	486e      	ldr	r0, [pc, #440]	; (800304c <DEBUG_main+0x2a8>)
 8002e94:	f019 f986 	bl	801c1a4 <strstr>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <DEBUG_main+0x102>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002e9e:	4879      	ldr	r0, [pc, #484]	; (8003084 <DEBUG_main+0x2e0>)
 8002ea0:	f7fe ff38 	bl	8001d14 <json_input>
 8002ea4:	e0c4      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SPVol") != NULL)		//Voltage
 8002ea6:	4978      	ldr	r1, [pc, #480]	; (8003088 <DEBUG_main+0x2e4>)
 8002ea8:	4868      	ldr	r0, [pc, #416]	; (800304c <DEBUG_main+0x2a8>)
 8002eaa:	f019 f97b 	bl	801c1a4 <strstr>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <DEBUG_main+0x118>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"1.5\",\"RANGE_HIGH\":\"2\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002eb4:	4875      	ldr	r0, [pc, #468]	; (800308c <DEBUG_main+0x2e8>)
 8002eb6:	f7fe ff2d 	bl	8001d14 <json_input>
 8002eba:	e0b9      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SPCur") != NULL)	//Current
 8002ebc:	4974      	ldr	r1, [pc, #464]	; (8003090 <DEBUG_main+0x2ec>)
 8002ebe:	4863      	ldr	r0, [pc, #396]	; (800304c <DEBUG_main+0x2a8>)
 8002ec0:	f019 f970 	bl	801c1a4 <strstr>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <DEBUG_main+0x12e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_CAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0.006\",\"RANGE_HIGH\":\"0.008\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002eca:	4872      	ldr	r0, [pc, #456]	; (8003094 <DEBUG_main+0x2f0>)
 8002ecc:	f7fe ff22 	bl	8001d14 <json_input>
 8002ed0:	e0ae      	b.n	8003030 <DEBUG_main+0x28c>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 8002ed2:	4971      	ldr	r1, [pc, #452]	; (8003098 <DEBUG_main+0x2f4>)
 8002ed4:	485d      	ldr	r0, [pc, #372]	; (800304c <DEBUG_main+0x2a8>)
 8002ed6:	f019 f965 	bl	801c1a4 <strstr>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <DEBUG_main+0x144>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002ee0:	486e      	ldr	r0, [pc, #440]	; (800309c <DEBUG_main+0x2f8>)
 8002ee2:	f7fe ff17 	bl	8001d14 <json_input>
 8002ee6:	e0a3      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002ee8:	496d      	ldr	r1, [pc, #436]	; (80030a0 <DEBUG_main+0x2fc>)
 8002eea:	4858      	ldr	r0, [pc, #352]	; (800304c <DEBUG_main+0x2a8>)
 8002eec:	f019 f95a 	bl	801c1a4 <strstr>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <DEBUG_main+0x15a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 8002ef6:	486b      	ldr	r0, [pc, #428]	; (80030a4 <DEBUG_main+0x300>)
 8002ef8:	f7fe ff0c 	bl	8001d14 <json_input>
 8002efc:	e098      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002efe:	496a      	ldr	r1, [pc, #424]	; (80030a8 <DEBUG_main+0x304>)
 8002f00:	4852      	ldr	r0, [pc, #328]	; (800304c <DEBUG_main+0x2a8>)
 8002f02:	f019 f94f 	bl	801c1a4 <strstr>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <DEBUG_main+0x170>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002f0c:	4867      	ldr	r0, [pc, #412]	; (80030ac <DEBUG_main+0x308>)
 8002f0e:	f7fe ff01 	bl	8001d14 <json_input>
 8002f12:	e08d      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 8002f14:	4966      	ldr	r1, [pc, #408]	; (80030b0 <DEBUG_main+0x30c>)
 8002f16:	484d      	ldr	r0, [pc, #308]	; (800304c <DEBUG_main+0x2a8>)
 8002f18:	f019 f944 	bl	801c1a4 <strstr>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <DEBUG_main+0x186>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 8002f22:	4864      	ldr	r0, [pc, #400]	; (80030b4 <DEBUG_main+0x310>)
 8002f24:	f7fe fef6 	bl	8001d14 <json_input>
 8002f28:	e082      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 8002f2a:	4963      	ldr	r1, [pc, #396]	; (80030b8 <DEBUG_main+0x314>)
 8002f2c:	4847      	ldr	r0, [pc, #284]	; (800304c <DEBUG_main+0x2a8>)
 8002f2e:	f019 f939 	bl	801c1a4 <strstr>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <DEBUG_main+0x19c>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002f38:	4860      	ldr	r0, [pc, #384]	; (80030bc <DEBUG_main+0x318>)
 8002f3a:	f7fe feeb 	bl	8001d14 <json_input>
 8002f3e:	e077      	b.n	8003030 <DEBUG_main+0x28c>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 8002f40:	495f      	ldr	r1, [pc, #380]	; (80030c0 <DEBUG_main+0x31c>)
 8002f42:	4842      	ldr	r0, [pc, #264]	; (800304c <DEBUG_main+0x2a8>)
 8002f44:	f019 f92e 	bl	801c1a4 <strstr>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <DEBUG_main+0x1b2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"-128\",\"RANGE_TEMP_HIGH\":\"-126\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f4e:	485d      	ldr	r0, [pc, #372]	; (80030c4 <DEBUG_main+0x320>)
 8002f50:	f7fe fee0 	bl	8001d14 <json_input>
 8002f54:	e06c      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 8002f56:	495c      	ldr	r1, [pc, #368]	; (80030c8 <DEBUG_main+0x324>)
 8002f58:	483c      	ldr	r0, [pc, #240]	; (800304c <DEBUG_main+0x2a8>)
 8002f5a:	f019 f923 	bl	801c1a4 <strstr>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <DEBUG_main+0x1c8>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002f64:	4859      	ldr	r0, [pc, #356]	; (80030cc <DEBUG_main+0x328>)
 8002f66:	f7fe fed5 	bl	8001d14 <json_input>
 8002f6a:	e061      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 8002f6c:	4958      	ldr	r1, [pc, #352]	; (80030d0 <DEBUG_main+0x32c>)
 8002f6e:	4837      	ldr	r0, [pc, #220]	; (800304c <DEBUG_main+0x2a8>)
 8002f70:	f019 f918 	bl	801c1a4 <strstr>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <DEBUG_main+0x1dc>
		{
			my_read_file();
 8002f7a:	f004 f897 	bl	80070ac <my_read_file>
 8002f7e:	e057      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8002f80:	4954      	ldr	r1, [pc, #336]	; (80030d4 <DEBUG_main+0x330>)
 8002f82:	4832      	ldr	r0, [pc, #200]	; (800304c <DEBUG_main+0x2a8>)
 8002f84:	f019 f90e 	bl	801c1a4 <strstr>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d150      	bne.n	8003030 <DEBUG_main+0x28c>
		{
//			save_periphery_data();
		}
		else if(strcmp(DBG_buf,"BeginUPD") == 0)
 8002f8e:	4952      	ldr	r1, [pc, #328]	; (80030d8 <DEBUG_main+0x334>)
 8002f90:	482e      	ldr	r0, [pc, #184]	; (800304c <DEBUG_main+0x2a8>)
 8002f92:	f7fd f91d 	bl	80001d0 <strcmp>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <DEBUG_main+0x20c>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"SETTING_FIRMWARE\",\"NAME\":\"test_firmware\",\"VERSION\":\"v.0.0.1\",\"SIZE\":\"1272\"},\"TIME\":\"1122334455\"}");
 8002f9c:	484f      	ldr	r0, [pc, #316]	; (80030dc <DEBUG_main+0x338>)
 8002f9e:	f7fe feb9 	bl	8001d14 <json_input>
			check_UPD_FW = true;
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <DEBUG_main+0x33c>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 8002fa8:	484e      	ldr	r0, [pc, #312]	; (80030e4 <DEBUG_main+0x340>)
 8002faa:	f7ff fedf 	bl	8002d6c <SEND_str>
 8002fae:	e03f      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(strcmp(DBG_buf,"EndUPD") == 0)
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <DEBUG_main+0x344>)
 8002fb2:	4826      	ldr	r0, [pc, #152]	; (800304c <DEBUG_main+0x2a8>)
 8002fb4:	f7fd f90c 	bl	80001d0 <strcmp>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <DEBUG_main+0x230>
		{
			check_UPD_FW = false;
 8002fbe:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <DEBUG_main+0x33c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
			fl_close();
 8002fc4:	f004 fa00 	bl	80073c8 <fl_close>
			SEND_str("end\n");
 8002fc8:	4848      	ldr	r0, [pc, #288]	; (80030ec <DEBUG_main+0x348>)
 8002fca:	f7ff fecf 	bl	8002d6c <SEND_str>
			HAL_NVIC_SystemReset();		//Перезапускаем контроллер
 8002fce:	f007 fb74 	bl	800a6ba <HAL_NVIC_SystemReset>
 8002fd2:	e02d      	b.n	8003030 <DEBUG_main+0x28c>
		}
		else if(check_UPD_FW)
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <DEBUG_main+0x33c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d029      	beq.n	8003030 <DEBUG_main+0x28c>
			//Запись посылки но 1024 байт, прикрепляем к концу посылки еще 4 байта контрольной суммы, итого 1028 байт в посылки каждый раз.
			//Буфер можно попробовать увеличить
			//Следующую посылку посылать с сервера только после получения обратного сообщения что контрольная сумма сошлась
			//Если посылка последнего пакета байт получается не кратная 4 то ее необходимо дополнить системными единицами памяти(FFh), до 1024 байт + 4 байта CRC = 1028 байт
			char tmp_crc32[9];
			sprintf(tmp_crc32, "%02X%02X%02X%02X", DBG_buf[1024], DBG_buf[1025], DBG_buf[1026] ,DBG_buf[1027]);	//Вытаскиваем последние 4 байта(CRC16)
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <DEBUG_main+0x2a8>)
 8002fde:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <DEBUG_main+0x2a8>)
 8002fe6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8002fea:	461c      	mov	r4, r3
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <DEBUG_main+0x2a8>)
 8002fee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <DEBUG_main+0x2a8>)
 8002ff6:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8002ffa:	1d38      	adds	r0, r7, #4
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	9200      	str	r2, [sp, #0]
 8003000:	4623      	mov	r3, r4
 8003002:	460a      	mov	r2, r1
 8003004:	493a      	ldr	r1, [pc, #232]	; (80030f0 <DEBUG_main+0x34c>)
 8003006:	f019 f89b 	bl	801c140 <siprintf>
			char *pEnd;
			uint32_t crc32 = (uint32_t)(strtol(tmp_crc32, &pEnd, 16));
 800300a:	4639      	mov	r1, r7
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2210      	movs	r2, #16
 8003010:	4618      	mov	r0, r3
 8003012:	f019 ff81 	bl	801cf18 <strtol>
 8003016:	4603      	mov	r3, r0
 8003018:	613b      	str	r3, [r7, #16]
			SEND_str(my_write_file_firmware(SetFW.NAME, DBG_buf, crc32));		//atoi(tmp_crc16)
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <DEBUG_main+0x350>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	490a      	ldr	r1, [pc, #40]	; (800304c <DEBUG_main+0x2a8>)
 8003022:	4618      	mov	r0, r3
 8003024:	f004 f936 	bl	8007294 <my_write_file_firmware>
 8003028:	4603      	mov	r3, r0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fe9e 	bl	8002d6c <SEND_str>
//			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
//			SEND_str(DBG_str);
//			json_input(DBG_str);
//		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		if(fdbg)
 8003030:	7d7b      	ldrb	r3, [r7, #21]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <DEBUG_main+0x2a0>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <DEBUG_main+0x2a8>)
 8003038:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <DEBUG_main+0x354>)
 800303a:	f240 4106 	movw	r1, #1030	; 0x406
 800303e:	482f      	ldr	r0, [pc, #188]	; (80030fc <DEBUG_main+0x358>)
 8003040:	f019 f84a 	bl	801c0d8 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000280 	.word	0x20000280
 8003050:	0802092c 	.word	0x0802092c
 8003054:	08020934 	.word	0x08020934
 8003058:	08020940 	.word	0x08020940
 800305c:	08020944 	.word	0x08020944
 8003060:	080209b0 	.word	0x080209b0
 8003064:	080209b4 	.word	0x080209b4
 8003068:	08020a24 	.word	0x08020a24
 800306c:	08020a28 	.word	0x08020a28
 8003070:	08020a94 	.word	0x08020a94
 8003074:	08020a98 	.word	0x08020a98
 8003078:	08020b24 	.word	0x08020b24
 800307c:	08020b28 	.word	0x08020b28
 8003080:	08020bb4 	.word	0x08020bb4
 8003084:	08020bb8 	.word	0x08020bb8
 8003088:	08020c60 	.word	0x08020c60
 800308c:	08020c68 	.word	0x08020c68
 8003090:	08020d0c 	.word	0x08020d0c
 8003094:	08020d14 	.word	0x08020d14
 8003098:	08020dc0 	.word	0x08020dc0
 800309c:	08020dc4 	.word	0x08020dc4
 80030a0:	08020e34 	.word	0x08020e34
 80030a4:	08020e38 	.word	0x08020e38
 80030a8:	08020ea8 	.word	0x08020ea8
 80030ac:	08020eac 	.word	0x08020eac
 80030b0:	08020f1c 	.word	0x08020f1c
 80030b4:	08020f20 	.word	0x08020f20
 80030b8:	08020f90 	.word	0x08020f90
 80030bc:	08020f94 	.word	0x08020f94
 80030c0:	08021004 	.word	0x08021004
 80030c4:	08021008 	.word	0x08021008
 80030c8:	080210d0 	.word	0x080210d0
 80030cc:	080210d4 	.word	0x080210d4
 80030d0:	08021198 	.word	0x08021198
 80030d4:	080211a0 	.word	0x080211a0
 80030d8:	080211ac 	.word	0x080211ac
 80030dc:	080211b8 	.word	0x080211b8
 80030e0:	20000f58 	.word	0x20000f58
 80030e4:	08021250 	.word	0x08021250
 80030e8:	08021258 	.word	0x08021258
 80030ec:	08021260 	.word	0x08021260
 80030f0:	08021268 	.word	0x08021268
 80030f4:	20001188 	.word	0x20001188
 80030f8:	0802127c 	.word	0x0802127c
 80030fc:	20000688 	.word	0x20000688

08003100 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_CRC_Init+0x20>)
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <MX_CRC_Init+0x24>)
 8003108:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <MX_CRC_Init+0x20>)
 800310c:	f007 fad9 	bl	800a6c2 <HAL_CRC_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003116:	f000 fb11 	bl	800373c <Error_Handler>
  }

}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20001484 	.word	0x20001484
 8003124:	40023000 	.word	0x40023000

08003128 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <HAL_CRC_MspInit+0x3c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10d      	bne.n	8003156 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_CRC_MspInit+0x40>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_CRC_MspInit+0x40>)
 8003144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_CRC_MspInit+0x40>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023000 	.word	0x40023000
 8003168:	40023800 	.word	0x40023800

0800316c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <MX_DMA_Init+0x98>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <MX_DMA_Init+0x98>)
 800317c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <MX_DMA_Init+0x98>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <MX_DMA_Init+0x98>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <MX_DMA_Init+0x98>)
 8003198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <MX_DMA_Init+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	200d      	movs	r0, #13
 80031b0:	f007 fa59 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031b4:	200d      	movs	r0, #13
 80031b6:	f007 fa72 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	200f      	movs	r0, #15
 80031c0:	f007 fa51 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031c4:	200f      	movs	r0, #15
 80031c6:	f007 fa6a 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2010      	movs	r0, #16
 80031d0:	f007 fa49 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031d4:	2010      	movs	r0, #16
 80031d6:	f007 fa62 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	202f      	movs	r0, #47	; 0x2f
 80031e0:	f007 fa41 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031e4:	202f      	movs	r0, #47	; 0x2f
 80031e6:	f007 fa5a 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2038      	movs	r0, #56	; 0x38
 80031f0:	f007 fa39 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031f4:	2038      	movs	r0, #56	; 0x38
 80031f6:	f007 fa52 	bl	800a69e <HAL_NVIC_EnableIRQ>

}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <MX_GPIO_Init+0x248>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a8a      	ldr	r2, [pc, #552]	; (8003450 <MX_GPIO_Init+0x248>)
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <MX_GPIO_Init+0x248>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	4b84      	ldr	r3, [pc, #528]	; (8003450 <MX_GPIO_Init+0x248>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a83      	ldr	r2, [pc, #524]	; (8003450 <MX_GPIO_Init+0x248>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b81      	ldr	r3, [pc, #516]	; (8003450 <MX_GPIO_Init+0x248>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b7d      	ldr	r3, [pc, #500]	; (8003450 <MX_GPIO_Init+0x248>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a7c      	ldr	r2, [pc, #496]	; (8003450 <MX_GPIO_Init+0x248>)
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b7a      	ldr	r3, [pc, #488]	; (8003450 <MX_GPIO_Init+0x248>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <MX_GPIO_Init+0x248>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <MX_GPIO_Init+0x248>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <MX_GPIO_Init+0x248>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <MX_GPIO_Init+0x248>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <MX_GPIO_Init+0x248>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b6c      	ldr	r3, [pc, #432]	; (8003450 <MX_GPIO_Init+0x248>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <MX_GPIO_Init+0x248>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a67      	ldr	r2, [pc, #412]	; (8003450 <MX_GPIO_Init+0x248>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b65      	ldr	r3, [pc, #404]	; (8003450 <MX_GPIO_Init+0x248>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FLAG_MCU_Pin|CS2__Pin, GPIO_PIN_SET);
 80032c6:	2201      	movs	r2, #1
 80032c8:	2142      	movs	r1, #66	; 0x42
 80032ca:	4862      	ldr	r0, [pc, #392]	; (8003454 <MX_GPIO_Init+0x24c>)
 80032cc:	f009 f82c 	bl	800c328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d6:	4860      	ldr	r0, [pc, #384]	; (8003458 <MX_GPIO_Init+0x250>)
 80032d8:	f009 f826 	bl	800c328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	2101      	movs	r1, #1
 80032e0:	485e      	ldr	r0, [pc, #376]	; (800345c <MX_GPIO_Init+0x254>)
 80032e2:	f009 f821 	bl	800c328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2143      	movs	r1, #67	; 0x43
 80032ea:	485d      	ldr	r0, [pc, #372]	; (8003460 <MX_GPIO_Init+0x258>)
 80032ec:	f009 f81c 	bl	800c328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 80032f0:	2200      	movs	r2, #0
 80032f2:	f64f 7181 	movw	r1, #65409	; 0xff81
 80032f6:	4857      	ldr	r0, [pc, #348]	; (8003454 <MX_GPIO_Init+0x24c>)
 80032f8:	f009 f816 	bl	800c328 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003302:	4856      	ldr	r0, [pc, #344]	; (800345c <MX_GPIO_Init+0x254>)
 8003304:	f009 f810 	bl	800c328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 8003308:	2200      	movs	r2, #0
 800330a:	219b      	movs	r1, #155	; 0x9b
 800330c:	4855      	ldr	r0, [pc, #340]	; (8003464 <MX_GPIO_Init+0x25c>)
 800330e:	f009 f80b 	bl	800c328 <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8003312:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 8003316:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003318:	2301      	movs	r3, #1
 800331a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	484a      	ldr	r0, [pc, #296]	; (8003454 <MX_GPIO_Init+0x24c>)
 800332c:	f008 fe4a 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8003330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	4843      	ldr	r0, [pc, #268]	; (8003458 <MX_GPIO_Init+0x250>)
 800334a:	f008 fe3b 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 800334e:	2301      	movs	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	4619      	mov	r1, r3
 8003360:	483d      	ldr	r0, [pc, #244]	; (8003458 <MX_GPIO_Init+0x250>)
 8003362:	f008 fe2f 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 8003366:	f640 0301 	movw	r3, #2049	; 0x801
 800336a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336c:	2301      	movs	r3, #1
 800336e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	4619      	mov	r1, r3
 800337e:	4837      	ldr	r0, [pc, #220]	; (800345c <MX_GPIO_Init+0x254>)
 8003380:	f008 fe20 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8003384:	2343      	movs	r3, #67	; 0x43
 8003386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003388:	2301      	movs	r3, #1
 800338a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	4619      	mov	r1, r3
 800339a:	4831      	ldr	r0, [pc, #196]	; (8003460 <MX_GPIO_Init+0x258>)
 800339c:	f008 fe12 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 80033a0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80033a4:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033a6:	4b30      	ldr	r3, [pc, #192]	; (8003468 <MX_GPIO_Init+0x260>)
 80033a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	482b      	ldr	r0, [pc, #172]	; (8003464 <MX_GPIO_Init+0x25c>)
 80033b6:	f008 fe05 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80033be:	2311      	movs	r3, #17
 80033c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033c6:	2302      	movs	r3, #2
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4619      	mov	r1, r3
 80033d0:	4824      	ldr	r0, [pc, #144]	; (8003464 <MX_GPIO_Init+0x25c>)
 80033d2:	f008 fdf7 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 80033d6:	239a      	movs	r3, #154	; 0x9a
 80033d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033da:	2301      	movs	r3, #1
 80033dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	481d      	ldr	r0, [pc, #116]	; (8003464 <MX_GPIO_Init+0x25c>)
 80033ee:	f008 fde9 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4619      	mov	r1, r3
 8003404:	4816      	ldr	r0, [pc, #88]	; (8003460 <MX_GPIO_Init+0x258>)
 8003406:	f008 fddd 	bl	800bfc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS2__Pin;
 800340a:	2302      	movs	r3, #2
 800340c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003412:	2301      	movs	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS2__GPIO_Port, &GPIO_InitStruct);
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	4619      	mov	r1, r3
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <MX_GPIO_Init+0x24c>)
 8003422:	f008 fdcf 	bl	800bfc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	2017      	movs	r0, #23
 800342c:	f007 f91b 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003430:	2017      	movs	r0, #23
 8003432:	f007 f934 	bl	800a69e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2028      	movs	r0, #40	; 0x28
 800343c:	f007 f913 	bl	800a666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003440:	2028      	movs	r0, #40	; 0x28
 8003442:	f007 f92c 	bl	800a69e <HAL_NVIC_EnableIRQ>

}
 8003446:	bf00      	nop
 8003448:	3730      	adds	r7, #48	; 0x30
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40021000 	.word	0x40021000
 8003458:	40020800 	.word	0x40020800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400
 8003464:	40020c00 	.word	0x40020c00
 8003468:	10310000 	.word	0x10310000

0800346c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003470:	f006 fbde 	bl	8009c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003474:	f000 f848 	bl	8003508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003478:	f7ff fec6 	bl	8003208 <MX_GPIO_Init>
  MX_DMA_Init();
 800347c:	f7ff fe76 	bl	800316c <MX_DMA_Init>
  MX_ADC1_Init();
 8003480:	f7ff fb68 	bl	8002b54 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003484:	f000 f9d2 	bl	800382c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003488:	f000 fa06 	bl	8003898 <MX_SPI2_Init>
  MX_TIM3_Init();
 800348c:	f000 fd7e 	bl	8003f8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003490:	f001 f808 	bl	80044a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003494:	f001 f830 	bl	80044f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003498:	f001 f858 	bl	800454c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800349c:	f00b ffb8 	bl	800f410 <MX_LWIP_Init>
  MX_TIM4_Init();
 80034a0:	f000 fdf0 	bl	8004084 <MX_TIM4_Init>
  MX_RTC_Init();
 80034a4:	f000 f952 	bl	800374c <MX_RTC_Init>
  MX_TIM6_Init();
 80034a8:	f000 fe42 	bl	8004130 <MX_TIM6_Init>
  MX_CRC_Init();
 80034ac:	f7ff fe28 	bl	8003100 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);	//Ждем загрузки данных на дисплее (примерная задержка)
 80034b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034b4:	f006 fbfe 	bl	8009cb4 <HAL_Delay>
	DWT_Init();		//Инициализация микросекундных задержек
 80034b8:	f001 f9ea 	bl	8004890 <DWT_Init>
	HAL_CRC_MspInit(&hcrc);		//Включаем тактирование аппаратного CRC
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <main+0x88>)
 80034be:	f7ff fe33 	bl	8003128 <HAL_CRC_MspInit>

	EN_Interrupt();		//Для дебага по USART3
 80034c2:	f001 f995 	bl	80047f0 <EN_Interrupt>

												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 80034c6:	2204      	movs	r2, #4
 80034c8:	490b      	ldr	r1, [pc, #44]	; (80034f8 <main+0x8c>)
 80034ca:	480c      	ldr	r0, [pc, #48]	; (80034fc <main+0x90>)
 80034cc:	f006 fc58 	bl	8009d80 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80034d0:	210c      	movs	r1, #12
 80034d2:	480b      	ldr	r0, [pc, #44]	; (8003500 <main+0x94>)
 80034d4:	f00a fb82 	bl	800dbdc <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 80034d8:	f006 fb06 	bl	8009ae8 <UpdateTempSens>
//	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК

	//----------------PWM_test------------------
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 80034dc:	f003 fddf 	bl	800709e <my_init_card>
	SEND_str("Init sd card -> success\n");
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <main+0x98>)
 80034e2:	f7ff fc43 	bl	8002d6c <SEND_str>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 80034e6:	f7ff fc5d 	bl	8002da4 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteAiDo();
 80034ea:	f005 f8b9 	bl	8008660 <CheckReWriteAiDo>
		//----------------------------------------
		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 80034ee:	f005 f969 	bl	80087c4 <CheckReWriteTSiDo>
		DEBUG_main();
 80034f2:	e7f8      	b.n	80034e6 <main+0x7a>
 80034f4:	20001484 	.word	0x20001484
 80034f8:	20000a90 	.word	0x20000a90
 80034fc:	200013dc 	.word	0x200013dc
 8003500:	200019fc 	.word	0x200019fc
 8003504:	08021280 	.word	0x08021280

08003508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b098      	sub	sp, #96	; 0x60
 800350c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800350e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003512:	2230      	movs	r2, #48	; 0x30
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f018 f875 	bl	801b606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <SystemClock_Config+0xfc>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a30      	ldr	r2, [pc, #192]	; (8003604 <SystemClock_Config+0xfc>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <SystemClock_Config+0xfc>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <SystemClock_Config+0x100>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <SystemClock_Config+0x100>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <SystemClock_Config+0x100>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003572:	2305      	movs	r3, #5
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800357c:	2301      	movs	r3, #1
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003580:	2302      	movs	r3, #2
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003588:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800358a:	2304      	movs	r3, #4
 800358c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800358e:	23a8      	movs	r3, #168	; 0xa8
 8003590:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003596:	2304      	movs	r3, #4
 8003598:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359e:	4618      	mov	r0, r3
 80035a0:	f008 fef4 	bl	800c38c <HAL_RCC_OscConfig>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80035aa:	f000 f8c7 	bl	800373c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ae:	230f      	movs	r3, #15
 80035b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b2:	2302      	movs	r3, #2
 80035b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	2105      	movs	r1, #5
 80035cc:	4618      	mov	r0, r3
 80035ce:	f009 f94d 	bl	800c86c <HAL_RCC_ClockConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80035d8:	f000 f8b0 	bl	800373c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035dc:	2302      	movs	r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	4618      	mov	r0, r3
 80035ec:	f009 fb62 	bl	800ccb4 <HAL_RCCEx_PeriphCLKConfig>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80035f6:	f000 f8a1 	bl	800373c <Error_Handler>
  }
}
 80035fa:	bf00      	nop
 80035fc:	3760      	adds	r7, #96	; 0x60
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000

0800360c <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 8003616:	f004 ff65 	bl	80084e4 <CheckReWriteDiDo>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_ADC_ConvCpltCallback>:
	    	flag_iput_spi2 = 1;
	    }
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d137      	bne.n	80036a6 <HAL_ADC_ConvCpltCallback+0x82>
    {
    	adcValue[0] = Conversion_ADC1((uint16_t)adc[0], 0);
 8003636:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f005 fa06 	bl	8008a50 <Conversion_ADC1>
 8003644:	eeb0 7a40 	vmov.f32	s14, s0
 8003648:	eef0 7a60 	vmov.f32	s15, s1
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_ADC_ConvCpltCallback+0x94>)
 800364e:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1], 1);
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003654:	885b      	ldrh	r3, [r3, #2]
 8003656:	b29b      	uxth	r3, r3
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f005 f9f8 	bl	8008a50 <Conversion_ADC1>
 8003660:	eeb0 7a40 	vmov.f32	s14, s0
 8003664:	eef0 7a60 	vmov.f32	s15, s1
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_ADC_ConvCpltCallback+0x94>)
 800366a:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2], 2);
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_ADC_ConvCpltCallback+0x90>)
 8003670:	889b      	ldrh	r3, [r3, #4]
 8003672:	b29b      	uxth	r3, r3
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f005 f9ea 	bl	8008a50 <Conversion_ADC1>
 800367c:	eeb0 7a40 	vmov.f32	s14, s0
 8003680:	eef0 7a60 	vmov.f32	s15, s1
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_ADC_ConvCpltCallback+0x94>)
 8003686:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3], 3);
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_ADC_ConvCpltCallback+0x90>)
 800368c:	88db      	ldrh	r3, [r3, #6]
 800368e:	b29b      	uxth	r3, r3
 8003690:	2103      	movs	r1, #3
 8003692:	4618      	mov	r0, r3
 8003694:	f005 f9dc 	bl	8008a50 <Conversion_ADC1>
 8003698:	eeb0 7a40 	vmov.f32	s14, s0
 800369c:	eef0 7a60 	vmov.f32	s15, s1
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_ADC_ConvCpltCallback+0x94>)
 80036a2:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40012000 	.word	0x40012000
 80036b4:	20000a90 	.word	0x20000a90
 80036b8:	20000a98 	.word	0x20000a98

080036bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d11f      	bne.n	800370e <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036d8:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80036e4:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)		//Запрос данных каждую ~0.8 сек (old 16: 83 to 49999)
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d102      	bne.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую ~1.6 сек (old 32: 83 to 49999))
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d108      	bne.n	800370e <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a09      	ldr	r2, [pc, #36]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 8003718:	f006 faac 	bl	8009c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40001000 	.word	0x40001000
 8003728:	20000abd 	.word	0x20000abd
 800372c:	20000abe 	.word	0x20000abe
 8003730:	20000abf 	.word	0x20000abf
 8003734:	20000ac0 	.word	0x20000ac0
 8003738:	40010000 	.word	0x40010000

0800373c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003760:	2300      	movs	r3, #0
 8003762:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <MX_RTC_Init+0xac>)
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <MX_RTC_Init+0xb0>)
 8003768:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <MX_RTC_Init+0xac>)
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <MX_RTC_Init+0xac>)
 8003772:	227f      	movs	r2, #127	; 0x7f
 8003774:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <MX_RTC_Init+0xac>)
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800377c:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <MX_RTC_Init+0xac>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <MX_RTC_Init+0xac>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <MX_RTC_Init+0xac>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800378e:	481a      	ldr	r0, [pc, #104]	; (80037f8 <MX_RTC_Init+0xac>)
 8003790:	f009 fb72 	bl	800ce78 <HAL_RTC_Init>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800379a:	f7ff ffcf 	bl	800373c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800379e:	230a      	movs	r3, #10
 80037a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 80037a2:	2322      	movs	r3, #34	; 0x22
 80037a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	2200      	movs	r2, #0
 80037b6:	4619      	mov	r1, r3
 80037b8:	480f      	ldr	r0, [pc, #60]	; (80037f8 <MX_RTC_Init+0xac>)
 80037ba:	f009 fbee 	bl	800cf9a <HAL_RTC_SetTime>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f7ff ffba 	bl	800373c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80037cc:	2304      	movs	r3, #4
 80037ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 80037d0:	2314      	movs	r3, #20
 80037d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 80037d4:	2315      	movs	r3, #21
 80037d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80037d8:	463b      	mov	r3, r7
 80037da:	2200      	movs	r2, #0
 80037dc:	4619      	mov	r1, r3
 80037de:	4806      	ldr	r0, [pc, #24]	; (80037f8 <MX_RTC_Init+0xac>)
 80037e0:	f009 fc98 	bl	800d114 <HAL_RTC_SetDate>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80037ea:	f7ff ffa7 	bl	800373c <Error_Handler>
  }

}
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200018ec 	.word	0x200018ec
 80037fc:	40002800 	.word	0x40002800

08003800 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a05      	ldr	r2, [pc, #20]	; (8003824 <HAL_RTC_MspInit+0x24>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d102      	bne.n	8003818 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RTC_MspInit+0x28>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40002800 	.word	0x40002800
 8003828:	42470e3c 	.word	0x42470e3c

0800382c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <MX_SPI1_Init+0x64>)
 8003832:	4a18      	ldr	r2, [pc, #96]	; (8003894 <MX_SPI1_Init+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <MX_SPI1_Init+0x64>)
 8003838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800383c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <MX_SPI1_Init+0x64>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <MX_SPI1_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <MX_SPI1_Init+0x64>)
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <MX_SPI1_Init+0x64>)
 8003852:	2200      	movs	r2, #0
 8003854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <MX_SPI1_Init+0x64>)
 8003858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <MX_SPI1_Init+0x64>)
 8003860:	2210      	movs	r2, #16
 8003862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <MX_SPI1_Init+0x64>)
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <MX_SPI1_Init+0x64>)
 800386c:	2200      	movs	r2, #0
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <MX_SPI1_Init+0x64>)
 8003872:	2200      	movs	r2, #0
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <MX_SPI1_Init+0x64>)
 8003878:	220a      	movs	r2, #10
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800387c:	4804      	ldr	r0, [pc, #16]	; (8003890 <MX_SPI1_Init+0x64>)
 800387e:	f009 fd62 	bl	800d346 <HAL_SPI_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003888:	f7ff ff58 	bl	800373c <Error_Handler>
  }

}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20001964 	.word	0x20001964
 8003894:	40013000 	.word	0x40013000

08003898 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <MX_SPI2_Init+0x5c>)
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <MX_SPI2_Init+0x60>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038dc:	220a      	movs	r2, #10
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038e0:	4804      	ldr	r0, [pc, #16]	; (80038f4 <MX_SPI2_Init+0x5c>)
 80038e2:	f009 fd30 	bl	800d346 <HAL_SPI_Init>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80038ec:	f7ff ff26 	bl	800373c <Error_Handler>
  }

}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000190c 	.word	0x2000190c
 80038f8:	40003800 	.word	0x40003800

080038fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a45      	ldr	r2, [pc, #276]	; (8003a30 <HAL_SPI_MspInit+0x134>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12c      	bne.n	8003978 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a3c      	ldr	r2, [pc, #240]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003956:	2338      	movs	r3, #56	; 0x38
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003966:	2305      	movs	r3, #5
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	f107 031c 	add.w	r3, r7, #28
 800396e:	4619      	mov	r1, r3
 8003970:	4831      	ldr	r0, [pc, #196]	; (8003a38 <HAL_SPI_MspInit+0x13c>)
 8003972:	f008 fb27 	bl	800bfc4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003976:	e057      	b.n	8003a28 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <HAL_SPI_MspInit+0x140>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d152      	bne.n	8003a28 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a1c      	ldr	r2, [pc, #112]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <HAL_SPI_MspInit+0x138>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 80039d6:	230c      	movs	r3, #12
 80039d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039e6:	2305      	movs	r3, #5
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	4813      	ldr	r0, [pc, #76]	; (8003a40 <HAL_SPI_MspInit+0x144>)
 80039f2:	f008 fae7 	bl	800bfc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin;
 80039f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a08:	2305      	movs	r3, #5
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_M_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	4809      	ldr	r0, [pc, #36]	; (8003a38 <HAL_SPI_MspInit+0x13c>)
 8003a14:	f008 fad6 	bl	800bfc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2024      	movs	r0, #36	; 0x24
 8003a1e:	f006 fe22 	bl	800a666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a22:	2024      	movs	r0, #36	; 0x24
 8003a24:	f006 fe3b 	bl	800a69e <HAL_NVIC_EnableIRQ>
}
 8003a28:	bf00      	nop
 8003a2a:	3730      	adds	r7, #48	; 0x30
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40013000 	.word	0x40013000
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020400 	.word	0x40020400
 8003a3c:	40003800 	.word	0x40003800
 8003a40:	40020800 	.word	0x40020800

08003a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_MspInit+0x4c>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800

08003a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	2019      	movs	r0, #25
 8003aaa:	f006 fddc 	bl	800a666 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003aae:	2019      	movs	r0, #25
 8003ab0:	f006 fdf5 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_InitTick+0xa4>)
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_InitTick+0xa4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_InitTick+0xa4>)
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad0:	f107 0210 	add.w	r2, r7, #16
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f009 f8b8 	bl	800cc50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003ae0:	f009 f8a2 	bl	800cc28 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_InitTick+0xa8>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	3b01      	subs	r3, #1
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_InitTick+0xac>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <HAL_InitTick+0xb0>)
 8003afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_InitTick+0xac>)
 8003b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <HAL_InitTick+0xac>)
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_InitTick+0xac>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_InitTick+0xac>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b18:	4809      	ldr	r0, [pc, #36]	; (8003b40 <HAL_InitTick+0xac>)
 8003b1a:	f009 ffe5 	bl	800dae8 <HAL_TIM_Base_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <HAL_InitTick+0xac>)
 8003b26:	f00a f80a 	bl	800db3e <HAL_TIM_Base_Start_IT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	e000      	b.n	8003b30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	200019bc 	.word	0x200019bc
 8003b44:	40010000 	.word	0x40010000

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <HardFault_Handler+0x4>

08003b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <MemManage_Handler+0x4>

08003b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b66:	e7fe      	b.n	8003b66 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <DMA1_Stream2_IRQHandler+0x10>)
 8003bae:	f006 feff 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001bdc 	.word	0x20001bdc

08003bbc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Stream4_IRQHandler+0x10>)
 8003bc2:	f006 fef5 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20001adc 	.word	0x20001adc

08003bd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Stream5_IRQHandler+0x10>)
 8003bd6:	f006 feeb 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20001b3c 	.word	0x20001b3c

08003be4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003be8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bec:	f008 fbb6 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003bf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003bf4:	f008 fbb2 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c02:	f00a f967 	bl	800ded4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200019bc 	.word	0x200019bc

08003c10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <SPI2_IRQHandler+0x10>)
 8003c16:	f009 fd9d 	bl	800d754 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000190c 	.word	0x2000190c

08003c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <USART1_IRQHandler+0x68>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <USART1_IRQHandler+0x5c>
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <USART1_IRQHandler+0x68>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01c      	beq.n	8003c80 <USART1_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <USART1_IRQHandler+0x68>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <USART1_IRQHandler+0x6c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c5c:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <USART1_IRQHandler+0x70>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	79ba      	ldrb	r2, [r7, #6]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d00a      	beq.n	8003c80 <USART1_IRQHandler+0x5c>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <USART1_IRQHandler+0x6c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <USART1_IRQHandler+0x74>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8003c78:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <USART1_IRQHandler+0x6c>)
 8003c7a:	79bb      	ldrb	r3, [r7, #6]
 8003c7c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20001c7c 	.word	0x20001c7c
 8003c90:	20000ac8 	.word	0x20000ac8
 8003c94:	20000ac9 	.word	0x20000ac9
 8003c98:	20000acc 	.word	0x20000acc

08003c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <USART2_IRQHandler+0x68>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <USART2_IRQHandler+0x5c>
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <USART2_IRQHandler+0x68>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01c      	beq.n	8003cf8 <USART2_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <USART2_IRQHandler+0x68>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <USART2_IRQHandler+0x6c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <USART2_IRQHandler+0x70>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	79ba      	ldrb	r2, [r7, #6]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d00a      	beq.n	8003cf8 <USART2_IRQHandler+0x5c>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <USART2_IRQHandler+0x6c>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <USART2_IRQHandler+0x74>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003cf0:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <USART2_IRQHandler+0x6c>)
 8003cf2:	79bb      	ldrb	r3, [r7, #6]
 8003cf4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20001cbc 	.word	0x20001cbc
 8003d08:	20000f16 	.word	0x20000f16
 8003d0c:	20000f17 	.word	0x20000f17
 8003d10:	20000f18 	.word	0x20000f18

08003d14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <USART3_IRQHandler+0x78>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02a      	beq.n	8003d7e <USART3_IRQHandler+0x6a>
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <USART3_IRQHandler+0x78>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <USART3_IRQHandler+0x6a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <USART3_IRQHandler+0x78>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <USART3_IRQHandler+0x7c>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <USART3_IRQHandler+0x80>)
 8003d4a:	fba2 1203 	umull	r1, r2, r2, r3
 8003d4e:	0a52      	lsrs	r2, r2, #9
 8003d50:	f240 4106 	movw	r1, #1030	; 0x406
 8003d54:	fb01 f202 	mul.w	r2, r1, r2
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <USART3_IRQHandler+0x84>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	88ba      	ldrh	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d00a      	beq.n	8003d7e <USART3_IRQHandler+0x6a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <USART3_IRQHandler+0x7c>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <USART3_IRQHandler+0x88>)
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8003d76:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <USART3_IRQHandler+0x7c>)
 8003d78:	88bb      	ldrh	r3, [r7, #4]
 8003d7a:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20001c3c 	.word	0x20001c3c
 8003d90:	20000b0c 	.word	0x20000b0c
 8003d94:	7f411e53 	.word	0x7f411e53
 8003d98:	20000b0e 	.word	0x20000b0e
 8003d9c:	20000b10 	.word	0x20000b10

08003da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003da4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003da8:	f008 fad8 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003dac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003db0:	f008 fad4 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003db4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003db8:	f008 fad0 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003dbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dc0:	f008 facc 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003dc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003dc8:	f008 fac8 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003dcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003dd0:	f008 fac4 	bl	800c35c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <DMA1_Stream7_IRQHandler+0x10>)
 8003dde:	f006 fde7 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20001a3c 	.word	0x20001a3c

08003dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <TIM6_DAC_IRQHandler+0x10>)
 8003df2:	f00a f86f 	bl	800ded4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20001b9c 	.word	0x20001b9c

08003e00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <DMA2_Stream0_IRQHandler+0x10>)
 8003e06:	f006 fdd3 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20001424 	.word	0x20001424

08003e14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e00a      	b.n	8003e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e26:	f3af 8000 	nop.w
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	60ba      	str	r2, [r7, #8]
 8003e32:	b2ca      	uxtb	r2, r1
 8003e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf0      	blt.n	8003e26 <_read+0x12>
	}

return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e009      	b.n	8003e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	60ba      	str	r2, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3301      	adds	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dbf1      	blt.n	8003e60 <_write+0x12>
	}
	return len;
 8003e7c:	687b      	ldr	r3, [r7, #4]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_close>:

int _close(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eae:	605a      	str	r2, [r3, #4]
	return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_isatty>:

int _isatty(int file)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ec6:	2301      	movs	r3, #1
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	return 0;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <_sbrk+0x5c>)
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <_sbrk+0x60>)
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <_sbrk+0x64>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <_sbrk+0x64>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <_sbrk+0x68>)
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d205      	bcs.n	8003f2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <_sbrk+0x6c>)
 8003f22:	220c      	movs	r2, #12
 8003f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e009      	b.n	8003f40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <_sbrk+0x64>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <_sbrk+0x64>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <_sbrk+0x64>)
 8003f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	20020000 	.word	0x20020000
 8003f50:	00004000 	.word	0x00004000
 8003f54:	20000ac4 	.word	0x20000ac4
 8003f58:	20008310 	.word	0x20008310
 8003f5c:	20008308 	.word	0x20008308

08003f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <SystemInit+0x28>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <SystemInit+0x28>)
 8003f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <SystemInit+0x28>)
 8003f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f7a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f92:	f107 0320 	add.w	r3, r7, #32
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	615a      	str	r2, [r3, #20]
 8003fac:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fb0:	4a33      	ldr	r2, [pc, #204]	; (8004080 <MX_TIM3_Init+0xf4>)
 8003fb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fd4:	4829      	ldr	r0, [pc, #164]	; (800407c <MX_TIM3_Init+0xf0>)
 8003fd6:	f009 fe3f 	bl	800dc58 <HAL_TIM_PWM_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003fe0:	f7ff fbac 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fec:	f107 0320 	add.w	r3, r7, #32
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4822      	ldr	r0, [pc, #136]	; (800407c <MX_TIM3_Init+0xf0>)
 8003ff4:	f00a fcd0 	bl	800e998 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003ffe:	f7ff fb9d 	bl	800373c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004002:	2360      	movs	r3, #96	; 0x60
 8004004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004010:	2304      	movs	r3, #4
 8004012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	4818      	ldr	r0, [pc, #96]	; (800407c <MX_TIM3_Init+0xf0>)
 800401c:	f00a f8c2 	bl	800e1a4 <HAL_TIM_PWM_ConfigChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004026:	f7ff fb89 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	2204      	movs	r2, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4812      	ldr	r0, [pc, #72]	; (800407c <MX_TIM3_Init+0xf0>)
 8004032:	f00a f8b7 	bl	800e1a4 <HAL_TIM_PWM_ConfigChannel>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800403c:	f7ff fb7e 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	2208      	movs	r2, #8
 8004044:	4619      	mov	r1, r3
 8004046:	480d      	ldr	r0, [pc, #52]	; (800407c <MX_TIM3_Init+0xf0>)
 8004048:	f00a f8ac 	bl	800e1a4 <HAL_TIM_PWM_ConfigChannel>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004052:	f7ff fb73 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	220c      	movs	r2, #12
 800405a:	4619      	mov	r1, r3
 800405c:	4807      	ldr	r0, [pc, #28]	; (800407c <MX_TIM3_Init+0xf0>)
 800405e:	f00a f8a1 	bl	800e1a4 <HAL_TIM_PWM_ConfigChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004068:	f7ff fb68 	bl	800373c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800406c:	4803      	ldr	r0, [pc, #12]	; (800407c <MX_TIM3_Init+0xf0>)
 800406e:	f000 f9df 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20001a9c 	.word	0x20001a9c
 8004080:	40000400 	.word	0x40000400

08004084 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408a:	f107 0320 	add.w	r3, r7, #32
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <MX_TIM4_Init+0xa8>)
 80040aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040ba:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80040be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80040cc:	4816      	ldr	r0, [pc, #88]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040ce:	f009 fd5a 	bl	800db86 <HAL_TIM_OC_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80040d8:	f7ff fb30 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040e4:	f107 0320 	add.w	r3, r7, #32
 80040e8:	4619      	mov	r1, r3
 80040ea:	480f      	ldr	r0, [pc, #60]	; (8004128 <MX_TIM4_Init+0xa4>)
 80040ec:	f00a fc54 	bl	800e998 <HAL_TIMEx_MasterConfigSynchronization>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80040f6:	f7ff fb21 	bl	800373c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80040fa:	2330      	movs	r3, #48	; 0x30
 80040fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	220c      	movs	r2, #12
 800410e:	4619      	mov	r1, r3
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <MX_TIM4_Init+0xa4>)
 8004112:	f009 ffe7 	bl	800e0e4 <HAL_TIM_OC_ConfigChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800411c:	f7ff fb0e 	bl	800373c <Error_Handler>
  }

}
 8004120:	bf00      	nop
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200019fc 	.word	0x200019fc
 800412c:	40000800 	.word	0x40000800

08004130 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004136:	463b      	mov	r3, r7
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <MX_TIM6_Init+0x64>)
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <MX_TIM6_Init+0x68>)
 8004142:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <MX_TIM6_Init+0x64>)
 8004146:	2253      	movs	r2, #83	; 0x53
 8004148:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <MX_TIM6_Init+0x64>)
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <MX_TIM6_Init+0x64>)
 8004152:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004156:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <MX_TIM6_Init+0x64>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800415e:	480d      	ldr	r0, [pc, #52]	; (8004194 <MX_TIM6_Init+0x64>)
 8004160:	f009 fcc2 	bl	800dae8 <HAL_TIM_Base_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800416a:	f7ff fae7 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004176:	463b      	mov	r3, r7
 8004178:	4619      	mov	r1, r3
 800417a:	4806      	ldr	r0, [pc, #24]	; (8004194 <MX_TIM6_Init+0x64>)
 800417c:	f00a fc0c 	bl	800e998 <HAL_TIMEx_MasterConfigSynchronization>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004186:	f7ff fad9 	bl	800373c <Error_Handler>
  }

}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20001b9c 	.word	0x20001b9c
 8004198:	40001000 	.word	0x40001000

0800419c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a72      	ldr	r2, [pc, #456]	; (8004374 <HAL_TIM_PWM_MspInit+0x1d8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f040 80de 	bne.w	800436c <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	4a6f      	ldr	r2, [pc, #444]	; (8004378 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041ba:	f043 0302 	orr.w	r3, r3, #2
 80041be:	6413      	str	r3, [r2, #64]	; 0x40
 80041c0:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_TIM_PWM_MspInit+0x1dc>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80041cc:	4b6b      	ldr	r3, [pc, #428]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041ce:	4a6c      	ldr	r2, [pc, #432]	; (8004380 <HAL_TIM_PWM_MspInit+0x1e4>)
 80041d0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80041d2:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041d4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80041d8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041da:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 80041f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004204:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8004206:	4b5d      	ldr	r3, [pc, #372]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004208:	2200      	movs	r2, #0
 800420a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 800420e:	2200      	movs	r2, #0
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8004212:	485a      	ldr	r0, [pc, #360]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004214:	f006 faa4 	bl	800a760 <HAL_DMA_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800421e:	f7ff fa8d 	bl	800373c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a55      	ldr	r2, [pc, #340]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004226:	625a      	str	r2, [r3, #36]	; 0x24
 8004228:	4a54      	ldr	r2, [pc, #336]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
 8004234:	4a51      	ldr	r2, [pc, #324]	; (800437c <HAL_TIM_PWM_MspInit+0x1e0>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_TIM_PWM_MspInit+0x1ec>)
 800423e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8004240:	4b50      	ldr	r3, [pc, #320]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004242:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004246:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004248:	4b4e      	ldr	r3, [pc, #312]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800424e:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800425c:	4b49      	ldr	r3, [pc, #292]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 800425e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004262:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004264:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800426a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800426c:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 800426e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004272:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004276:	2200      	movs	r2, #0
 8004278:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 800427c:	2200      	movs	r2, #0
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8004280:	4840      	ldr	r0, [pc, #256]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004282:	f006 fa6d 	bl	800a760 <HAL_DMA_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 800428c:	f7ff fa56 	bl	800373c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
 8004296:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <HAL_TIM_PWM_MspInit+0x1e8>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_TIM_PWM_MspInit+0x1f4>)
 80042a0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80042a2:	4b3a      	ldr	r3, [pc, #232]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042a4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80042a8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042bc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042be:	4b33      	ldr	r3, [pc, #204]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042c6:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042cc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042de:	2200      	movs	r2, #0
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80042e2:	482a      	ldr	r0, [pc, #168]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042e4:	f006 fa3c 	bl	800a760 <HAL_DMA_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 80042ee:	f7ff fa25 	bl	800373c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a25      	ldr	r2, [pc, #148]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <HAL_TIM_PWM_MspInit+0x1f0>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004300:	4a25      	ldr	r2, [pc, #148]	; (8004398 <HAL_TIM_PWM_MspInit+0x1fc>)
 8004302:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004306:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800430a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800430c:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 800430e:	2240      	movs	r2, #64	; 0x40
 8004310:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 800431a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800431e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004326:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 800432a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800432e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004336:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 800433a:	2200      	movs	r2, #0
 800433c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004340:	2200      	movs	r2, #0
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8004344:	4813      	ldr	r0, [pc, #76]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004346:	f006 fa0b 	bl	800a760 <HAL_DMA_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8004350:	f7ff f9f4 	bl	800373c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004364:	621a      	str	r2, [r3, #32]
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_TIM_PWM_MspInit+0x1f8>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40000400 	.word	0x40000400
 8004378:	40023800 	.word	0x40023800
 800437c:	20001adc 	.word	0x20001adc
 8004380:	40026070 	.word	0x40026070
 8004384:	20001b3c 	.word	0x20001b3c
 8004388:	40026088 	.word	0x40026088
 800438c:	20001a3c 	.word	0x20001a3c
 8004390:	400260b8 	.word	0x400260b8
 8004394:	20001bdc 	.word	0x20001bdc
 8004398:	40026040 	.word	0x40026040

0800439c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <HAL_TIM_OC_MspInit+0x3c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10d      	bne.n	80043ca <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_TIM_OC_MspInit+0x40>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_TIM_OC_MspInit+0x40>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_TIM_OC_MspInit+0x40>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_TIM_Base_MspInit+0x48>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d115      	bne.n	800441e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <HAL_TIM_Base_MspInit+0x4c>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a0c      	ldr	r2, [pc, #48]	; (800442c <HAL_TIM_Base_MspInit+0x4c>)
 80043fc:	f043 0310 	orr.w	r3, r3, #16
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_TIM_Base_MspInit+0x4c>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	2036      	movs	r0, #54	; 0x36
 8004414:	f006 f927 	bl	800a666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004418:	2036      	movs	r0, #54	; 0x36
 800441a:	f006 f940 	bl	800a69e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40001000 	.word	0x40001000
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <HAL_TIM_MspPostInit+0x68>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d11e      	bne.n	8004490 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_TIM_MspPostInit+0x6c>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <HAL_TIM_MspPostInit+0x6c>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <HAL_TIM_MspPostInit+0x6c>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800446e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004480:	2302      	movs	r3, #2
 8004482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	4619      	mov	r1, r3
 800448a:	4805      	ldr	r0, [pc, #20]	; (80044a0 <HAL_TIM_MspPostInit+0x70>)
 800448c:	f007 fd9a 	bl	800bfc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004490:	bf00      	nop
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40000400 	.word	0x40000400
 800449c:	40023800 	.word	0x40023800
 80044a0:	40020800 	.word	0x40020800

080044a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044aa:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <MX_USART1_UART_Init+0x50>)
 80044ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80044ae:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044b0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044be:	2200      	movs	r2, #0
 80044c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044ca:	220c      	movs	r2, #12
 80044cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044da:	4805      	ldr	r0, [pc, #20]	; (80044f0 <MX_USART1_UART_Init+0x4c>)
 80044dc:	f00a faec 	bl	800eab8 <HAL_UART_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044e6:	f7ff f929 	bl	800373c <Error_Handler>
  }

}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20001c7c 	.word	0x20001c7c
 80044f4:	40011000 	.word	0x40011000

080044f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <MX_USART2_UART_Init+0x50>)
 8004500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 8004504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 800451e:	220c      	movs	r2, #12
 8004520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800452e:	4805      	ldr	r0, [pc, #20]	; (8004544 <MX_USART2_UART_Init+0x4c>)
 8004530:	f00a fac2 	bl	800eab8 <HAL_UART_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800453a:	f7ff f8ff 	bl	800373c <Error_Handler>
  }

}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20001cbc 	.word	0x20001cbc
 8004548:	40004400 	.word	0x40004400

0800454c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <MX_USART3_UART_Init+0x50>)
 8004554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004558:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800455c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004572:	220c      	movs	r2, #12
 8004574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004582:	4805      	ldr	r0, [pc, #20]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004584:	f00a fa98 	bl	800eab8 <HAL_UART_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800458e:	f7ff f8d5 	bl	800373c <Error_Handler>
  }

}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20001c3c 	.word	0x20001c3c
 800459c:	40004800 	.word	0x40004800

080045a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_UART_MspInit+0x180>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d135      	bne.n	800462e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	4a56      	ldr	r2, [pc, #344]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	6453      	str	r3, [r2, #68]	; 0x44
 80045d2:	4b54      	ldr	r3, [pc, #336]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6313      	str	r3, [r2, #48]	; 0x30
 80045ee:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_UART_MspInit+0x184>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80045fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004600:	2302      	movs	r3, #2
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004608:	2303      	movs	r3, #3
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800460c:	2307      	movs	r3, #7
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004614:	4619      	mov	r1, r3
 8004616:	4844      	ldr	r0, [pc, #272]	; (8004728 <HAL_UART_MspInit+0x188>)
 8004618:	f007 fcd4 	bl	800bfc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800461c:	2200      	movs	r2, #0
 800461e:	2100      	movs	r1, #0
 8004620:	2025      	movs	r0, #37	; 0x25
 8004622:	f006 f820 	bl	800a666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004626:	2025      	movs	r0, #37	; 0x25
 8004628:	f006 f839 	bl	800a69e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800462c:	e073      	b.n	8004716 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <HAL_UART_MspInit+0x18c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d134      	bne.n	80046a2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_UART_MspInit+0x184>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_UART_MspInit+0x184>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	6413      	str	r3, [r2, #64]	; 0x40
 8004648:	4b36      	ldr	r3, [pc, #216]	; (8004724 <HAL_UART_MspInit+0x184>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_UART_MspInit+0x184>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	4a31      	ldr	r2, [pc, #196]	; (8004724 <HAL_UART_MspInit+0x184>)
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	6313      	str	r3, [r2, #48]	; 0x30
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <HAL_UART_MspInit+0x184>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004670:	2360      	movs	r3, #96	; 0x60
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467c:	2303      	movs	r3, #3
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004680:	2307      	movs	r3, #7
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004688:	4619      	mov	r1, r3
 800468a:	4829      	ldr	r0, [pc, #164]	; (8004730 <HAL_UART_MspInit+0x190>)
 800468c:	f007 fc9a 	bl	800bfc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004690:	2200      	movs	r2, #0
 8004692:	2100      	movs	r1, #0
 8004694:	2026      	movs	r0, #38	; 0x26
 8004696:	f005 ffe6 	bl	800a666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800469a:	2026      	movs	r0, #38	; 0x26
 800469c:	f005 ffff 	bl	800a69e <HAL_NVIC_EnableIRQ>
}
 80046a0:	e039      	b.n	8004716 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_UART_MspInit+0x194>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d134      	bne.n	8004716 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ba:	6413      	str	r3, [r2, #64]	; 0x40
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6313      	str	r3, [r2, #48]	; 0x30
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_UART_MspInit+0x184>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80046e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f2:	2303      	movs	r3, #3
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046f6:	2307      	movs	r3, #7
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fe:	4619      	mov	r1, r3
 8004700:	480d      	ldr	r0, [pc, #52]	; (8004738 <HAL_UART_MspInit+0x198>)
 8004702:	f007 fc5f 	bl	800bfc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2027      	movs	r0, #39	; 0x27
 800470c:	f005 ffab 	bl	800a666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004710:	2027      	movs	r0, #39	; 0x27
 8004712:	f005 ffc4 	bl	800a69e <HAL_NVIC_EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3738      	adds	r7, #56	; 0x38
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40011000 	.word	0x40011000
 8004724:	40023800 	.word	0x40023800
 8004728:	40020000 	.word	0x40020000
 800472c:	40004400 	.word	0x40004400
 8004730:	40020c00 	.word	0x40020c00
 8004734:	40004800 	.word	0x40004800
 8004738:	40020800 	.word	0x40020800

0800473c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <dbg_available+0x3c>)
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <dbg_available+0x40>)
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	b29b      	uxth	r3, r3
 8004750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004754:	b29b      	uxth	r3, r3
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <dbg_available+0x44>)
 8004758:	fba2 1203 	umull	r1, r2, r2, r3
 800475c:	0a52      	lsrs	r2, r2, #9
 800475e:	f240 4106 	movw	r1, #1030	; 0x406
 8004762:	fb01 f202 	mul.w	r2, r1, r2
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	b21b      	sxth	r3, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000b0c 	.word	0x20000b0c
 800477c:	20000b0e 	.word	0x20000b0e
 8004780:	7f411e53 	.word	0x7f411e53

08004784 <dbg_read>:

int16_t dbg_read(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <dbg_read+0x5c>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <dbg_read+0x60>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	429a      	cmp	r2, r3
 8004798:	d102      	bne.n	80047a0 <dbg_read+0x1c>
	{
		return -1;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	e019      	b.n	80047d4 <dbg_read+0x50>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <dbg_read+0x60>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <dbg_read+0x64>)
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <dbg_read+0x60>)
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <dbg_read+0x68>)
 80047ba:	fba2 1203 	umull	r1, r2, r2, r3
 80047be:	0a52      	lsrs	r2, r2, #9
 80047c0:	f240 4106 	movw	r1, #1030	; 0x406
 80047c4:	fb01 f202 	mul.w	r2, r1, r2
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <dbg_read+0x60>)
 80047ce:	801a      	strh	r2, [r3, #0]
		return c;
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	b21b      	sxth	r3, r3
	}
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000b0c 	.word	0x20000b0c
 80047e4:	20000b0e 	.word	0x20000b0e
 80047e8:	20000b10 	.word	0x20000b10
 80047ec:	7f411e53 	.word	0x7f411e53

080047f0 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <EN_Interrupt+0x40>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <EN_Interrupt+0x40>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0220 	orr.w	r2, r2, #32
 8004802:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <EN_Interrupt+0x44>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <EN_Interrupt+0x44>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0220 	orr.w	r2, r2, #32
 8004812:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <EN_Interrupt+0x48>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <EN_Interrupt+0x48>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0220 	orr.w	r2, r2, #32
 8004822:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20001c7c 	.word	0x20001c7c
 8004834:	20001c3c 	.word	0x20001c3c
 8004838:	20001cbc 	.word	0x20001cbc

0800483c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800483c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004842:	e003      	b.n	800484c <LoopCopyDataInit>

08004844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800484a:	3104      	adds	r1, #4

0800484c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004854:	d3f6      	bcc.n	8004844 <CopyDataInit>
  ldr  r2, =_sbss
 8004856:	4a0b      	ldr	r2, [pc, #44]	; (8004884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004858:	e002      	b.n	8004860 <LoopFillZerobss>

0800485a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800485a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800485c:	f842 3b04 	str.w	r3, [r2], #4

08004860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004864:	d3f9      	bcc.n	800485a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004866:	f7ff fb7b 	bl	8003f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800486a:	f016 fe4f 	bl	801b50c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800486e:	f7fe fdfd 	bl	800346c <main>
  bx  lr    
 8004872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004874:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004878:	08024d78 	.word	0x08024d78
  ldr  r0, =_sdata
 800487c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004880:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8004884:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8004888:	2000830c 	.word	0x2000830c

0800488c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800488c:	e7fe      	b.n	800488c <ADC_IRQHandler>
	...

08004890 <DWT_Init>:
 */
#include "main.h"

//Функция инициализации DWT таймера
void DWT_Init(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//Разрешаем использовать счётчик
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <DWT_Init+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <DWT_Init+0x28>)
 800489a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489e:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;		//Запускаем счётчик
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <DWT_Init+0x2c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a05      	ldr	r2, [pc, #20]	; (80048bc <DWT_Init+0x2c>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000edfc 	.word	0xe000edfc
 80048bc:	e0001000 	.word	0xe0001000

080048c0 <delay_micros>:
//Функция временной задержки в мкс
//Принимает "us" - значение в микросекундах
void delay_micros(uint32_t us)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);	//Получаем кол-во тактов за 1 мкс и умножаем на наше значение
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <delay_micros+0x3c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <delay_micros+0x40>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0c9a      	lsrs	r2, r3, #18
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; 											//Обнуляем счётчик
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <delay_micros+0x44>)
 80048de:	2200      	movs	r2, #0
 80048e0:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80048e2:	bf00      	nop
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <delay_micros+0x44>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d8fa      	bhi.n	80048e4 <delay_micros+0x24>
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000008 	.word	0x20000008
 8004900:	431bde83 	.word	0x431bde83
 8004904:	e0001000 	.word	0xe0001000

08004908 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	2b7f      	cmp	r3, #127	; 0x7f
 8004918:	d802      	bhi.n	8004920 <ff_convert+0x18>
		c = src;
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	81fb      	strh	r3, [r7, #14]
 800491e:	e025      	b.n	800496c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2bff      	cmp	r3, #255	; 0xff
 800492a:	d805      	bhi.n	8004938 <ff_convert+0x30>
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	3b80      	subs	r3, #128	; 0x80
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <ff_convert+0x74>)
 8004932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004936:	e000      	b.n	800493a <ff_convert+0x32>
 8004938:	2300      	movs	r3, #0
 800493a:	81fb      	strh	r3, [r7, #14]
 800493c:	e016      	b.n	800496c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800493e:	2300      	movs	r3, #0
 8004940:	81fb      	strh	r3, [r7, #14]
 8004942:	e009      	b.n	8004958 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 8004944:	89fb      	ldrh	r3, [r7, #14]
 8004946:	4a0d      	ldr	r2, [pc, #52]	; (800497c <ff_convert+0x74>)
 8004948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	429a      	cmp	r2, r3
 8004950:	d006      	beq.n	8004960 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004952:	89fb      	ldrh	r3, [r7, #14]
 8004954:	3301      	adds	r3, #1
 8004956:	81fb      	strh	r3, [r7, #14]
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	2b7f      	cmp	r3, #127	; 0x7f
 800495c:	d9f2      	bls.n	8004944 <ff_convert+0x3c>
 800495e:	e000      	b.n	8004962 <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 8004960:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	3380      	adds	r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800496c:	89fb      	ldrh	r3, [r7, #14]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	080243b8 	.word	0x080243b8

08004980 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e002      	b.n	8004996 <ff_wtoupper+0x16>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <ff_wtoupper+0x54>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <ff_wtoupper+0x30>
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <ff_wtoupper+0x54>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1ef      	bne.n	8004990 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <ff_wtoupper+0x54>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <ff_wtoupper+0x46>
 80049bc:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <ff_wtoupper+0x58>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c4:	e000      	b.n	80049c8 <ff_wtoupper+0x48>
 80049c6:	88fb      	ldrh	r3, [r7, #6]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	080244b8 	.word	0x080244b8
 80049d8:	08024698 	.word	0x08024698

080049dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80049f0:	e00c      	b.n	8004a0c <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3304      	adds	r3, #4
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3304      	adds	r3, #4
 8004a04:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d8ef      	bhi.n	80049f2 <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 8004a12:	e007      	b.n	8004a24 <mem_cpy+0x48>
		*d++ = *s++;
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	1c53      	adds	r3, r2, #1
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	6179      	str	r1, [r7, #20]
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f2      	bne.n	8004a14 <mem_cpy+0x38>
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004a4c:	e005      	b.n	8004a5a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	617a      	str	r2, [r7, #20]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f4      	bne.n	8004a4e <mem_set+0x12>
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004a72:	b480      	push	{r7}
 8004a74:	b089      	sub	sp, #36	; 0x24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004a8a:	bf00      	nop
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <mem_cmp+0x40>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	61fa      	str	r2, [r7, #28]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	61ba      	str	r2, [r7, #24]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	1acb      	subs	r3, r1, r3
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ec      	beq.n	8004a8c <mem_cmp+0x1a>
	return r;
 8004ab2:	697b      	ldr	r3, [r7, #20]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3724      	adds	r7, #36	; 0x24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004aca:	e002      	b.n	8004ad2 <chk_chr+0x12>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <chk_chr+0x26>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d1f2      	bne.n	8004acc <chk_chr+0xc>
	return *str;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	791b      	ldrb	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d038      	beq.n	8004b78 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7858      	ldrb	r0, [r3, #1]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b16:	2301      	movs	r3, #1
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f003 f9d5 	bl	8007ec8 <disk_write>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <sync_window+0x32>
			return FR_DISK_ERR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e028      	b.n	8004b7a <sync_window+0x84>
		fs->wflag = 0;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d31f      	bcc.n	8004b78 <sync_window+0x82>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4413      	add	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d217      	bcs.n	8004b78 <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	e010      	b.n	8004b72 <sync_window+0x7c>
				wsect += fs->fsize;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7858      	ldrb	r0, [r3, #1]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b64:	2301      	movs	r3, #1
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f003 f9ae 	bl	8007ec8 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d8eb      	bhi.n	8004b50 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d018      	beq.n	8004bc8 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ffad 	bl	8004af6 <sync_window>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <move_window+0x24>
			return FR_DISK_ERR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e011      	b.n	8004bca <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7858      	ldrb	r0, [r3, #1]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	f003 f920 	bl	8007df8 <disk_read>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <move_window+0x40>
			return FR_DISK_ERR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e003      	b.n	8004bca <move_window+0x48>
		fs->winsect = sector;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff8a 	bl	8004af6 <sync_window>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14a      	bne.n	8004c82 <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d13a      	bne.n	8004c6a <sync_fs+0x96>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	795b      	ldrb	r3, [r3, #5]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d036      	beq.n	8004c6a <sync_fs+0x96>
			fs->winsect = 0;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3338      	adds	r3, #56	; 0x38
 8004c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff15 	bl	8004a3c <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3338      	adds	r3, #56	; 0x38
 8004c16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c1a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004c1e:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3338      	adds	r3, #56	; 0x38
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <sync_fs+0xb8>)
 8004c26:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3338      	adds	r3, #56	; 0x38
 8004c2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c30:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <sync_fs+0xbc>)
 8004c32:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3338      	adds	r3, #56	; 0x38
 8004c38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6912      	ldr	r2, [r2, #16]
 8004c40:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3338      	adds	r3, #56	; 0x38
 8004c46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7858      	ldrb	r0, [r3, #1]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f003 f932 	bl	8007ec8 <disk_write>
			fs->fsi_flag = 0;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	785b      	ldrb	r3, [r3, #1]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f003 f9a8 	bl	8007fc8 <disk_ioctl>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <sync_fs+0xae>
			res = FR_DISK_ERR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	41615252 	.word	0x41615252
 8004c90:	61417272 	.word	0x61417272

08004c94 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	3b02      	subs	r3, #2
 8004ca2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	3b02      	subs	r3, #2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d301      	bcc.n	8004cb4 <clust2sect+0x20>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e008      	b.n	8004cc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	789b      	ldrb	r3, [r3, #2]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	fb03 f202 	mul.w	r2, r3, r2
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4413      	add	r3, r2
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d904      	bls.n	8004cec <get_fat+0x1a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d301      	bcc.n	8004cf0 <get_fat+0x1e>
		return 1;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e085      	b.n	8004dfc <get_fat+0x12a>

	switch (fs->fs_type) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d05f      	beq.n	8004db8 <get_fat+0xe6>
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	dc7d      	bgt.n	8004df8 <get_fat+0x126>
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <get_fat+0x34>
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d042      	beq.n	8004d8a <get_fat+0xb8>
 8004d04:	e078      	b.n	8004df8 <get_fat+0x126>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	0a5b      	lsrs	r3, r3, #9
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ff2e 	bl	8004b82 <move_window>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d15e      	bne.n	8004dea <get_fat+0x118>
		wc = fs->win[bc % SS(fs)]; bc++;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	0a5b      	lsrs	r3, r3, #9
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff17 	bl	8004b82 <move_window>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d149      	bne.n	8004dee <get_fat+0x11c>
		wc |= fs->win[bc % SS(fs)] << 8;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <get_fat+0xb0>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	e03c      	b.n	8004dfc <get_fat+0x12a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d88:	e038      	b.n	8004dfc <get_fat+0x12a>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	4413      	add	r3, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fef3 	bl	8004b82 <move_window>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d127      	bne.n	8004df2 <get_fat+0x120>
		p = &fs->win[clst * 2 % SS(fs)];
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004daa:	3338      	adds	r3, #56	; 0x38
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	e021      	b.n	8004dfc <get_fat+0x12a>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	09db      	lsrs	r3, r3, #7
 8004dc0:	4413      	add	r3, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fedc 	bl	8004b82 <move_window>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d112      	bne.n	8004df6 <get_fat+0x124>
		p = &fs->win[clst * 4 % SS(fs)];
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004dd8:	3338      	adds	r3, #56	; 0x38
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de8:	e008      	b.n	8004dfc <get_fat+0x12a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004dea:	bf00      	nop
 8004dec:	e004      	b.n	8004df8 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004df6:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d904      	bls.n	8004e20 <put_fat+0x1c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <put_fat+0x22>
		res = FR_INT_ERR;
 8004e20:	2302      	movs	r3, #2
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e0bf      	b.n	8004fa6 <put_fat+0x1a2>

	} else {
		switch (fs->fs_type) {
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f000 808d 	beq.w	8004f4a <put_fat+0x146>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	f300 80ab 	bgt.w	8004f8c <put_fat+0x188>
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d002      	beq.n	8004e40 <put_fat+0x3c>
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d06a      	beq.n	8004f14 <put_fat+0x110>
 8004e3e:	e0a5      	b.n	8004f8c <put_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	0a5b      	lsrs	r3, r3, #9
 8004e56:	4413      	add	r3, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fe91 	bl	8004b82 <move_window>
 8004e60:	4603      	mov	r3, r0
 8004e62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e64:	7ffb      	ldrb	r3, [r7, #31]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 8093 	bne.w	8004f92 <put_fat+0x18e>
			p = &fs->win[bc % SS(fs)];
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	3338      	adds	r3, #56	; 0x38
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <put_fat+0x9c>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	b25a      	sxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e001      	b.n	8004ea4 <put_fat+0xa0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	7013      	strb	r3, [r2, #0]
			bc++;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff fe5e 	bl	8004b82 <move_window>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d162      	bne.n	8004f96 <put_fat+0x192>
			p = &fs->win[bc % SS(fs)];
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed6:	3338      	adds	r3, #56	; 0x38
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <put_fat+0xec>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e00e      	b.n	8004f0e <put_fat+0x10a>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	f023 030f 	bic.w	r3, r3, #15
 8004efa:	b25a      	sxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	7013      	strb	r3, [r2, #0]
			break;
 8004f12:	e045      	b.n	8004fa0 <put_fat+0x19c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fe2e 	bl	8004b82 <move_window>
 8004f26:	4603      	mov	r3, r0
 8004f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d134      	bne.n	8004f9a <put_fat+0x196>
			p = &fs->win[clst * 2 % SS(fs)];
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004f38:	3338      	adds	r3, #56	; 0x38
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	801a      	strh	r2, [r3, #0]
			break;
 8004f48:	e02a      	b.n	8004fa0 <put_fat+0x19c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	09db      	lsrs	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fe13 	bl	8004b82 <move_window>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11b      	bne.n	8004f9e <put_fat+0x19a>
			p = &fs->win[clst * 4 % SS(fs)];
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f6e:	3338      	adds	r3, #56	; 0x38
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
			break;
 8004f8a:	e009      	b.n	8004fa0 <put_fat+0x19c>

		default :
			res = FR_INT_ERR;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e006      	b.n	8004fa0 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004f92:	bf00      	nop
 8004f94:	e004      	b.n	8004fa0 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004f96:	bf00      	nop
 8004f98:	e002      	b.n	8004fa0 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004f9e:	bf00      	nop
		}
		fs->wflag = 1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d904      	bls.n	8004fca <remove_chain+0x1a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <remove_chain+0x20>
		res = FR_INT_ERR;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e039      	b.n	8005044 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004fd4:	e02d      	b.n	8005032 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fe7a 	bl	8004cd2 <get_fat>
 8004fde:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02b      	beq.n	800503e <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <remove_chain+0x42>
 8004fec:	2302      	movs	r3, #2
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e028      	b.n	8005044 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d102      	bne.n	8005000 <remove_chain+0x50>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	e021      	b.n	8005044 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005000:	2200      	movs	r2, #0
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fefd 	bl	8004e04 <put_fat>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d007      	beq.n	800502e <remove_chain+0x7e>
				fs->free_clust++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d3cc      	bcc.n	8004fd6 <remove_chain+0x26>
 800503c:	e002      	b.n	8005044 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <remove_chain+0x94>
			if (res != FR_OK) break;
 8005042:	bf00      	nop
		}
	}

	return res;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <create_chain+0x26>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d315      	bcc.n	80050a0 <create_chain+0x52>
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e012      	b.n	80050a0 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fe28 	bl	8004cd2 <get_fat>
 8005082:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d801      	bhi.n	800508e <create_chain+0x40>
 800508a:	2301      	movs	r3, #1
 800508c:	e064      	b.n	8005158 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d201      	bcs.n	800509c <create_chain+0x4e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	e05d      	b.n	8005158 <create_chain+0x10a>
		scl = clst;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d307      	bcc.n	80050c4 <create_chain+0x76>
			ncl = 2;
 80050b4:	2302      	movs	r3, #2
 80050b6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d901      	bls.n	80050c4 <create_chain+0x76>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e049      	b.n	8005158 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fe03 	bl	8004cd2 <get_fat>
 80050cc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d002      	beq.n	80050e2 <create_chain+0x94>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <create_chain+0x98>
			return cs;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	e038      	b.n	8005158 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d1da      	bne.n	80050a4 <create_chain+0x56>
 80050ee:	2300      	movs	r3, #0
 80050f0:	e032      	b.n	8005158 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 80050f2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80050f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fe82 	bl	8004e04 <put_fat>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <create_chain+0xd0>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fe75 	bl	8004e04 <put_fat>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d110      	bne.n	8005146 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d010      	beq.n	8005156 <create_chain+0x108>
			fs->free_clust--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	715a      	strb	r2, [r3, #5]
 8005144:	e007      	b.n	8005156 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <create_chain+0x104>
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e000      	b.n	8005154 <create_chain+0x106>
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005156:	697b      	ldr	r3, [r7, #20]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d005      	beq.n	800518a <dir_sdi+0x2a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d301      	bcc.n	800518e <dir_sdi+0x2e>
		return FR_INT_ERR;
 800518a:	2302      	movs	r3, #2
 800518c:	e066      	b.n	800525c <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <dir_sdi+0x46>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d103      	bne.n	80051a6 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d114      	bne.n	80051d6 <dir_sdi+0x76>
		dj->clust = clst;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	891b      	ldrh	r3, [r3, #8]
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d301      	bcc.n	80051c2 <dir_sdi+0x62>
			return FR_INT_ERR;
 80051be:	2302      	movs	r3, #2
 80051c0:	e04c      	b.n	800525c <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	0912      	lsrs	r2, r2, #4
 80051cc:	b292      	uxth	r2, r2
 80051ce:	441a      	add	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	611a      	str	r2, [r3, #16]
 80051d4:	e036      	b.n	8005244 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	789b      	ldrb	r3, [r3, #2]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 80051e2:	e01b      	b.n	800521c <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fd71 	bl	8004cd2 <get_fat>
 80051f0:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d101      	bne.n	80051fe <dir_sdi+0x9e>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e02e      	b.n	800525c <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d905      	bls.n	8005210 <dir_sdi+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	429a      	cmp	r2, r3
 800520e:	d301      	bcc.n	8005214 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8005210:	2302      	movs	r3, #2
 8005212:	e023      	b.n	800525c <dir_sdi+0xfc>
			idx -= ic;
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 800521c:	887a      	ldrh	r2, [r7, #2]
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	429a      	cmp	r2, r3
 8005222:	d2df      	bcs.n	80051e4 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fd2f 	bl	8004c94 <clust2sect>
 8005236:	4602      	mov	r2, r0
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	b29b      	uxth	r3, r3
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800524c:	887b      	ldrh	r3, [r7, #2]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	88db      	ldrh	r3, [r3, #6]
 8005272:	3301      	adds	r3, #1
 8005274:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <dir_next+0x20>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <dir_next+0x24>
		return FR_NO_FILE;
 8005284:	2304      	movs	r3, #4
 8005286:	e0bb      	b.n	8005400 <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 80a6 	bne.w	80053e2 <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	891b      	ldrh	r3, [r3, #8]
 80052ae:	893a      	ldrh	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f0c0 8096 	bcc.w	80053e2 <dir_next+0x17e>
				return FR_NO_FILE;
 80052b6:	2304      	movs	r3, #4
 80052b8:	e0a2      	b.n	8005400 <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80052ba:	893b      	ldrh	r3, [r7, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	789b      	ldrb	r3, [r3, #2]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8088 	bne.w	80053e2 <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7ff fcf8 	bl	8004cd2 <get_fat>
 80052e2:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d801      	bhi.n	80052ee <dir_next+0x8a>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e088      	b.n	8005400 <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d101      	bne.n	80052fa <dir_next+0x96>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e082      	b.n	8005400 <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	429a      	cmp	r2, r3
 8005304:	d361      	bcc.n	80053ca <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <dir_next+0xac>
 800530c:	2304      	movs	r3, #4
 800530e:	e077      	b.n	8005400 <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7ff fe97 	bl	800504e <create_chain>
 8005320:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <dir_next+0xc8>
 8005328:	2307      	movs	r3, #7
 800532a:	e069      	b.n	8005400 <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <dir_next+0xd2>
 8005332:	2302      	movs	r3, #2
 8005334:	e064      	b.n	8005400 <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d101      	bne.n	8005342 <dir_next+0xde>
 800533e:	2301      	movs	r3, #1
 8005340:	e05e      	b.n	8005400 <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fbd5 	bl	8004af6 <sync_window>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <dir_next+0xf2>
 8005352:	2301      	movs	r3, #1
 8005354:	e054      	b.n	8005400 <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3338      	adds	r3, #56	; 0x38
 800535c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fb6a 	bl	8004a3c <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681c      	ldr	r4, [r3, #0]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	4610      	mov	r0, r2
 8005374:	f7ff fc8e 	bl	8004c94 <clust2sect>
 8005378:	4603      	mov	r3, r0
 800537a:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800537c:	2300      	movs	r3, #0
 800537e:	72fb      	strb	r3, [r7, #11]
 8005380:	e015      	b.n	80053ae <dir_next+0x14a>
						dj->fs->wflag = 1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fbb1 	bl	8004af6 <sync_window>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <dir_next+0x13a>
 800539a:	2301      	movs	r3, #1
 800539c:	e030      	b.n	8005400 <dir_next+0x19c>
						dj->fs->winsect++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a4:	3201      	adds	r2, #1
 80053a6:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	3301      	adds	r3, #1
 80053ac:	72fb      	strb	r3, [r7, #11]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	789b      	ldrb	r3, [r3, #2]
 80053b4:	7afa      	ldrb	r2, [r7, #11]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3e3      	bcc.n	8005382 <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053c0:	7afa      	ldrb	r2, [r7, #11]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	1a8a      	subs	r2, r1, r2
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fc5c 	bl	8004c94 <clust2sect>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	893a      	ldrh	r2, [r7, #8]
 80053e6:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}

08005408 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8005412:	2100      	movs	r1, #0
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fea3 	bl	8005160 <dir_sdi>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d12d      	bne.n	8005480 <dir_alloc+0x78>
		n = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7ff fba5 	bl	8004b82 <move_window>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2be5      	cmp	r3, #229	; 0xe5
 800544a:	d004      	beq.n	8005456 <dir_alloc+0x4e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d107      	bne.n	8005466 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3301      	adds	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d102      	bne.n	800546a <dir_alloc+0x62>
 8005464:	e00c      	b.n	8005480 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 800546a:	2101      	movs	r1, #1
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fef9 	bl	8005264 <dir_next>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0d5      	beq.n	8005428 <dir_alloc+0x20>
 800547c:	e000      	b.n	8005480 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800547e:	bf00      	nop
	}
	return res;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	331a      	adds	r3, #26
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d106      	bne.n	80054b2 <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

	return cl;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	331a      	adds	r3, #26
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	b292      	uxth	r2, r2
 80054d2:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	0c1a      	lsrs	r2, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3314      	adds	r3, #20
 80054dc:	b292      	uxth	r2, r2
 80054de:	801a      	strh	r2, [r3, #0]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	2301      	movs	r3, #1
 8005512:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <cmp_lfn+0xbc>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 8005526:	89fb      	ldrh	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d019      	beq.n	8005560 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800552c:	89bb      	ldrh	r3, [r7, #12]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fa26 	bl	8004980 <ff_wtoupper>
 8005534:	4603      	mov	r3, r0
 8005536:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b13      	cmp	r3, #19
 800553c:	d80e      	bhi.n	800555c <cmp_lfn+0x70>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	617a      	str	r2, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fa17 	bl	8004980 <ff_wtoupper>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	89fb      	ldrh	r3, [r7, #14]
 8005558:	4293      	cmp	r3, r2
 800555a:	d008      	beq.n	800556e <cmp_lfn+0x82>
				return 0;				/* Not matched */
 800555c:	2300      	movs	r3, #0
 800555e:	e01f      	b.n	80055a0 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005560:	89bb      	ldrh	r3, [r7, #12]
 8005562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005566:	4293      	cmp	r3, r2
 8005568:	d001      	beq.n	800556e <cmp_lfn+0x82>
 800556a:	2300      	movs	r3, #0
 800556c:	e018      	b.n	80055a0 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d9cc      	bls.n	8005514 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <cmp_lfn+0xb2>
 8005586:	89fb      	ldrh	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <cmp_lfn+0xb2>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <cmp_lfn+0xb2>
		return 0;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800559e:	2301      	movs	r3, #1
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	080248f8 	.word	0x080248f8

080055ac <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	460b      	mov	r3, r1
 80055bc:	71fb      	strb	r3, [r7, #7]
 80055be:	4613      	mov	r3, r2
 80055c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	330d      	adds	r3, #13
 80055c6:	79ba      	ldrb	r2, [r7, #6]
 80055c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	330b      	adds	r3, #11
 80055ce:	220f      	movs	r2, #15
 80055d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	330c      	adds	r3, #12
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	331a      	adds	r3, #26
 80055de:	2200      	movs	r2, #0
 80055e0:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	82fb      	strh	r3, [r7, #22]
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80055fa:	8afb      	ldrh	r3, [r7, #22]
 80055fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <fit_lfn+0x68>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <fit_lfn+0xc4>)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	8afa      	ldrh	r2, [r7, #22]
 8005624:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <fit_lfn+0x86>
 800562c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005630:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	3301      	adds	r3, #1
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d9dd      	bls.n	80055fa <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 800563e:	8afb      	ldrh	r3, [r7, #22]
 8005640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005644:	4293      	cmp	r3, r2
 8005646:	d006      	beq.n	8005656 <fit_lfn+0xaa>
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <fit_lfn+0xb2>
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565c:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	79fa      	ldrb	r2, [r7, #7]
 8005662:	701a      	strb	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3724      	adds	r7, #36	; 0x24
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	080248f8 	.word	0x080248f8

08005674 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 8005682:	220b      	movs	r2, #11
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff f9a8 	bl	80049dc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	2b05      	cmp	r3, #5
 8005690:	d90f      	bls.n	80056b2 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	b29a      	uxth	r2, r3
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	03db      	lsls	r3, r3, #15
 800569a:	4313      	orrs	r3, r2
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1c99      	adds	r1, r3, #2
 80056a2:	6079      	str	r1, [r7, #4]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	807b      	strh	r3, [r7, #2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ef      	bne.n	8005692 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 80056b2:	2307      	movs	r3, #7
 80056b4:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3330      	adds	r3, #48	; 0x30
 80056c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 80056c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ca:	2b39      	cmp	r3, #57	; 0x39
 80056cc:	d904      	bls.n	80056d8 <gen_numname+0x64>
 80056ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d2:	3307      	adds	r3, #7
 80056d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056e2:	4413      	add	r3, r2
 80056e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056e8:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	807b      	strh	r3, [r7, #2]
	} while (seq);
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1de      	bne.n	80056b6 <gen_numname+0x42>
	ns[i] = '~';
 80056f8:	f107 0214 	add.w	r2, r7, #20
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	4413      	add	r3, r2
 8005700:	227e      	movs	r2, #126	; 0x7e
 8005702:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e002      	b.n	8005710 <gen_numname+0x9c>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d205      	bcs.n	8005724 <gen_numname+0xb0>
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b20      	cmp	r3, #32
 8005722:	d1f2      	bne.n	800570a <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b07      	cmp	r3, #7
 8005728:	d808      	bhi.n	800573c <gen_numname+0xc8>
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	623a      	str	r2, [r7, #32]
 8005730:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005734:	4413      	add	r3, r2
 8005736:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800573a:	e000      	b.n	800573e <gen_numname+0xca>
 800573c:	2120      	movs	r1, #32
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	460a      	mov	r2, r1
 800574a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b07      	cmp	r3, #7
 8005750:	d9e8      	bls.n	8005724 <gen_numname+0xb0>
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005768:	230b      	movs	r3, #11
 800576a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	0852      	lsrs	r2, r2, #1
 8005772:	01db      	lsls	r3, r3, #7
 8005774:	4313      	orrs	r3, r2
 8005776:	b2da      	uxtb	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	6079      	str	r1, [r7, #4]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	4413      	add	r3, r2
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3b01      	subs	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ed      	bne.n	800576c <sum_sfn+0x10>
	return sum;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 80057a6:	2100      	movs	r1, #0
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fcd9 	bl	8005160 <dir_sdi>
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <dir_find+0x1e>
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	e098      	b.n	80058ee <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 80057bc:	23ff      	movs	r3, #255	; 0xff
 80057be:	753b      	strb	r3, [r7, #20]
 80057c0:	7d3b      	ldrb	r3, [r7, #20]
 80057c2:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7ff f9d7 	bl	8004b82 <move_window>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 8081 	bne.w	80058e2 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057ec:	7dbb      	ldrb	r3, [r7, #22]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <dir_find+0x5a>
 80057f2:	2304      	movs	r3, #4
 80057f4:	75fb      	strb	r3, [r7, #23]
 80057f6:	e079      	b.n	80058ec <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	330b      	adds	r3, #11
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005802:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005804:	7dbb      	ldrb	r3, [r7, #22]
 8005806:	2be5      	cmp	r3, #229	; 0xe5
 8005808:	d007      	beq.n	800581a <dir_find+0x7c>
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <dir_find+0x82>
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d002      	beq.n	8005820 <dir_find+0x82>
			ord = 0xFF;
 800581a:	23ff      	movs	r3, #255	; 0xff
 800581c:	757b      	strb	r3, [r7, #21]
 800581e:	e055      	b.n	80058cc <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d12f      	bne.n	8005886 <dir_find+0xe8>
				if (dj->lfn) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d04e      	beq.n	80058cc <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 800582e:	7dbb      	ldrb	r3, [r7, #22]
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	7b5b      	ldrb	r3, [r3, #13]
 800583c:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 800583e:	7dbb      	ldrb	r3, [r7, #22]
 8005840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005844:	75bb      	strb	r3, [r7, #22]
 8005846:	7dbb      	ldrb	r3, [r7, #22]
 8005848:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	88da      	ldrh	r2, [r3, #6]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8005852:	7dba      	ldrb	r2, [r7, #22]
 8005854:	7d7b      	ldrb	r3, [r7, #21]
 8005856:	429a      	cmp	r2, r3
 8005858:	d112      	bne.n	8005880 <dir_find+0xe2>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	330d      	adds	r3, #13
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	7d3a      	ldrb	r2, [r7, #20]
 8005862:	429a      	cmp	r2, r3
 8005864:	d10c      	bne.n	8005880 <dir_find+0xe2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	6939      	ldr	r1, [r7, #16]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fe3d 	bl	80054ec <cmp_lfn>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <dir_find+0xe2>
 8005878:	7d7b      	ldrb	r3, [r7, #21]
 800587a:	3b01      	subs	r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e000      	b.n	8005882 <dir_find+0xe4>
 8005880:	23ff      	movs	r3, #255	; 0xff
 8005882:	757b      	strb	r3, [r7, #21]
 8005884:	e022      	b.n	80058cc <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005886:	7d7b      	ldrb	r3, [r7, #21]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <dir_find+0xfe>
 800588c:	6938      	ldr	r0, [r7, #16]
 800588e:	f7ff ff65 	bl	800575c <sum_sfn>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	7d3b      	ldrb	r3, [r7, #20]
 8005898:	4293      	cmp	r3, r2
 800589a:	d024      	beq.n	80058e6 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800589c:	23ff      	movs	r3, #255	; 0xff
 800589e:	757b      	strb	r3, [r7, #21]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	330b      	adds	r3, #11
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <dir_find+0x12e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	220b      	movs	r2, #11
 80058be:	4619      	mov	r1, r3
 80058c0:	6938      	ldr	r0, [r7, #16]
 80058c2:	f7ff f8d6 	bl	8004a72 <mem_cmp>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 80058cc:	2100      	movs	r1, #0
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff fcc8 	bl	8005264 <dir_next>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f43f af72 	beq.w	80057c4 <dir_find+0x26>
 80058e0:	e004      	b.n	80058ec <dir_find+0x14e>
		if (res != FR_OK) break;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80058ea:	bf00      	nop

	return res;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	220c      	movs	r2, #12
 8005912:	69f9      	ldr	r1, [r7, #28]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff f861 	bl	80049dc <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <dir_register+0x30>
		return FR_INVALID_NAME;
 8005924:	2306      	movs	r3, #6
 8005926:	e0e3      	b.n	8005af0 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d035      	beq.n	800599e <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	330b      	adds	r3, #11
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8005940:	2301      	movs	r3, #1
 8005942:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005944:	e013      	b.n	800596e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005948:	f107 0108 	add.w	r1, r7, #8
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	69f8      	ldr	r0, [r7, #28]
 8005950:	f7ff fe90 	bl	8005674 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ff22 	bl	800579e <dir_find>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 8005960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596a:	3301      	adds	r3, #1
 800596c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800596e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005970:	2b63      	cmp	r3, #99	; 0x63
 8005972:	d9e8      	bls.n	8005946 <dir_register+0x4e>
 8005974:	e000      	b.n	8005978 <dir_register+0x80>
			if (res != FR_OK) break;
 8005976:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d101      	bne.n	8005982 <dir_register+0x8a>
 800597e:	2307      	movs	r3, #7
 8005980:	e0b6      	b.n	8005af0 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005986:	2b04      	cmp	r3, #4
 8005988:	d002      	beq.n	8005990 <dir_register+0x98>
 800598a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800598e:	e0af      	b.n	8005af0 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	330b      	adds	r3, #11
 8005994:	7cfa      	ldrb	r2, [r7, #19]
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80059a8:	2300      	movs	r3, #0
 80059aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059ac:	e002      	b.n	80059b4 <dir_register+0xbc>
 80059ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f5      	bne.n	80059ae <dir_register+0xb6>
		ne = (n + 25) / 13;
 80059c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c4:	3319      	adds	r3, #25
 80059c6:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <dir_register+0x200>)
 80059c8:	fb82 1203 	smull	r1, r2, r2, r3
 80059cc:	1092      	asrs	r2, r2, #2
 80059ce:	17db      	asrs	r3, r3, #31
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80059d4:	e001      	b.n	80059da <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 80059da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fd12 	bl	8005408 <dir_alloc>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 80059ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d14b      	bne.n	8005a8a <dir_register+0x192>
 80059f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f4:	3b01      	subs	r3, #1
 80059f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80059f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d045      	beq.n	8005a8a <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	88da      	ldrh	r2, [r3, #6]
 8005a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fba8 	bl	8005160 <dir_sdi>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8005a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d135      	bne.n	8005a8a <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fe9a 	bl	800575c <sum_sfn>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7ff f8a3 	bl	8004b82 <move_window>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 8005a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11e      	bne.n	8005a88 <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69d8      	ldr	r0, [r3, #28]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6959      	ldr	r1, [r3, #20]
 8005a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	f7ff fda8 	bl	80055ac <fit_lfn>
				dj->fs->wflag = 1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 8005a64:	2100      	movs	r1, #0
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fbfc 	bl	8005264 <dir_next>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <dir_register+0x192>
 8005a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1d2      	bne.n	8005a2c <dir_register+0x134>
 8005a86:	e000      	b.n	8005a8a <dir_register+0x192>
				if (res != FR_OK) break;
 8005a88:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d12c      	bne.n	8005aec <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f7ff f870 	bl	8004b82 <move_window>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8005aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d11d      	bne.n	8005aec <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe ffbf 	bl	8004a3c <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6958      	ldr	r0, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	220b      	movs	r2, #11
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fe ff87 	bl	80049dc <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	330b      	adds	r3, #11
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f002 0218 	and.w	r2, r2, #24
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	4ec4ec4f 	.word	0x4ec4ec4f

08005afc <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e002      	b.n	8005b14 <create_name+0x18>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b2f      	cmp	r3, #47	; 0x2f
 8005b1a:	d0f8      	beq.n	8005b0e <create_name+0x12>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b5c      	cmp	r3, #92	; 0x5c
 8005b22:	d0f4      	beq.n	8005b0e <create_name+0x12>
	lfn = dj->lfn;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	61ba      	str	r2, [r7, #24]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b42:	2b1f      	cmp	r3, #31
 8005b44:	d92f      	bls.n	8005ba6 <create_name+0xaa>
 8005b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b48:	2b2f      	cmp	r3, #47	; 0x2f
 8005b4a:	d02c      	beq.n	8005ba6 <create_name+0xaa>
 8005b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b4e:	2b5c      	cmp	r3, #92	; 0x5c
 8005b50:	d029      	beq.n	8005ba6 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b13      	cmp	r3, #19
 8005b56:	d901      	bls.n	8005b5c <create_name+0x60>
			return FR_INVALID_NAME;
 8005b58:	2306      	movs	r3, #6
 8005b5a:	e1c7      	b.n	8005eec <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b64:	2101      	movs	r1, #1
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fece 	bl	8004908 <ff_convert>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <create_name+0x7e>
 8005b76:	2306      	movs	r3, #6
 8005b78:	e1b8      	b.n	8005eec <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7e:	d809      	bhi.n	8005b94 <create_name+0x98>
 8005b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b82:	4619      	mov	r1, r3
 8005b84:	48a4      	ldr	r0, [pc, #656]	; (8005e18 <create_name+0x31c>)
 8005b86:	f7fe ff9b 	bl	8004ac0 <chk_chr>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <create_name+0x98>
			return FR_INVALID_NAME;
 8005b90:	2306      	movs	r3, #6
 8005b92:	e1ab      	b.n	8005eec <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode char */
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	617a      	str	r2, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ba2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005ba4:	e7c5      	b.n	8005b32 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	441a      	add	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb2:	2b1f      	cmp	r3, #31
 8005bb4:	d801      	bhi.n	8005bba <create_name+0xbe>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e000      	b.n	8005bbc <create_name+0xc0>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d109      	bne.n	8005bda <create_name+0xde>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd8:	d016      	beq.n	8005c08 <create_name+0x10c>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d14d      	bne.n	8005c7c <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005be6:	3b01      	subs	r3, #1
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8005bf2:	d143      	bne.n	8005c7c <create_name+0x180>
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	3b02      	subs	r3, #2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	2b2e      	cmp	r3, #46	; 0x2e
 8005c06:	d139      	bne.n	8005c7c <create_name+0x180>
		lfn[di] = 0;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	2200      	movs	r2, #0
 8005c12:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	e00f      	b.n	8005c3a <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d201      	bcs.n	8005c26 <create_name+0x12a>
 8005c22:	212e      	movs	r1, #46	; 0x2e
 8005c24:	e000      	b.n	8005c28 <create_name+0x12c>
 8005c26:	2120      	movs	r1, #32
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	4413      	add	r3, r2
 8005c30:	460a      	mov	r2, r1
 8005c32:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	3301      	adds	r3, #1
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b0a      	cmp	r3, #10
 8005c3e:	d9ec      	bls.n	8005c1a <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	4413      	add	r3, r2
 8005c48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c4c:	f042 0220 	orr.w	r2, r2, #32
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e149      	b.n	8005eec <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d002      	beq.n	8005c76 <create_name+0x17a>
 8005c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c72:	2b2e      	cmp	r3, #46	; 0x2e
 8005c74:	d106      	bne.n	8005c84 <create_name+0x188>
		di--;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ea      	bne.n	8005c58 <create_name+0x15c>
 8005c82:	e000      	b.n	8005c86 <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 8005c84:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <create_name+0x194>
 8005c8c:	2306      	movs	r3, #6
 8005c8e:	e12d      	b.n	8005eec <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	2200      	movs	r2, #0
 8005c9a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	220b      	movs	r2, #11
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fec9 	bl	8004a3c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e002      	b.n	8005cb6 <create_name+0x1ba>
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d0f5      	beq.n	8005cb0 <create_name+0x1b4>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	2b2e      	cmp	r3, #46	; 0x2e
 8005cd0:	d0ee      	beq.n	8005cb0 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <create_name+0x1f0>
 8005cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cdc:	f043 0303 	orr.w	r3, r3, #3
 8005ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005ce4:	e002      	b.n	8005cec <create_name+0x1f0>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <create_name+0x20a>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2b2e      	cmp	r3, #46	; 0x2e
 8005d04:	d1ef      	bne.n	8005ce6 <create_name+0x1ea>

	b = i = 0; ni = 8;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d10:	2308      	movs	r3, #8
 8005d12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	61ba      	str	r2, [r7, #24]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 8095 	beq.w	8005e56 <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d006      	beq.n	8005d40 <create_name+0x244>
 8005d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d34:	2b2e      	cmp	r3, #46	; 0x2e
 8005d36:	d10a      	bne.n	8005d4e <create_name+0x252>
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d006      	beq.n	8005d4e <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8005d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d44:	f043 0303 	orr.w	r3, r3, #3
 8005d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d4c:	e082      	b.n	8005e54 <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d203      	bcs.n	8005d5e <create_name+0x262>
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d123      	bne.n	8005da6 <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b0b      	cmp	r3, #11
 8005d62:	d106      	bne.n	8005d72 <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8005d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d68:	f043 0303 	orr.w	r3, r3, #3
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d70:	e074      	b.n	8005e5c <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d005      	beq.n	8005d86 <create_name+0x28a>
 8005d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7e:	f043 0303 	orr.w	r3, r3, #3
 8005d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d865      	bhi.n	8005e5a <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	2308      	movs	r3, #8
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	230b      	movs	r3, #11
 8005d98:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005da4:	e056      	b.n	8005e54 <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8005da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da8:	2b7f      	cmp	r3, #127	; 0x7f
 8005daa:	d914      	bls.n	8005dd6 <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fda9 	bl	8004908 <ff_convert>
 8005db6:	4603      	mov	r3, r0
 8005db8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8005dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <create_name+0x2ce>
 8005dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dc2:	3b80      	subs	r3, #128	; 0x80
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <create_name+0x320>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dce:	f043 0302 	orr.w	r3, r3, #2
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8005dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <create_name+0x2f0>
 8005ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dde:	4619      	mov	r1, r3
 8005de0:	480f      	ldr	r0, [pc, #60]	; (8005e20 <create_name+0x324>)
 8005de2:	f7fe fe6d 	bl	8004ac0 <chk_chr>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005dec:	235f      	movs	r3, #95	; 0x5f
 8005dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df4:	f043 0303 	orr.w	r3, r3, #3
 8005df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dfc:	e021      	b.n	8005e42 <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d90f      	bls.n	8005e24 <create_name+0x328>
 8005e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e06:	2b5a      	cmp	r3, #90	; 0x5a
 8005e08:	d80c      	bhi.n	8005e24 <create_name+0x328>
					b |= 2;
 8005e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e0e:	f043 0302 	orr.w	r3, r3, #2
 8005e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e16:	e014      	b.n	8005e42 <create_name+0x346>
 8005e18:	0802129c 	.word	0x0802129c
 8005e1c:	08024878 	.word	0x08024878
 8005e20:	080212a8 	.word	0x080212a8
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e26:	2b60      	cmp	r3, #96	; 0x60
 8005e28:	d90b      	bls.n	8005e42 <create_name+0x346>
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2c:	2b7a      	cmp	r3, #122	; 0x7a
 8005e2e:	d808      	bhi.n	8005e42 <create_name+0x346>
						b |= 1; w -= 0x20;
 8005e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e3e:	3b20      	subs	r3, #32
 8005e40:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	6239      	str	r1, [r7, #32]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8005e54:	e75e      	b.n	8005d14 <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <create_name+0x360>
			if (si > di) break;			/* No extension */
 8005e5a:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2be5      	cmp	r3, #229	; 0xe5
 8005e64:	d103      	bne.n	8005e6e <create_name+0x372>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d104      	bne.n	8005e7e <create_name+0x382>
 8005e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d005      	beq.n	8005e96 <create_name+0x39a>
 8005e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d105      	bne.n	8005ea2 <create_name+0x3a6>
		cf |= NS_LFN;
 8005e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e9a:	f043 0302 	orr.w	r3, r3, #2
 8005e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8005ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d117      	bne.n	8005ede <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <create_name+0x3ca>
 8005eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ebe:	f043 0310 	orr.w	r3, r3, #16
 8005ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d105      	bne.n	8005ede <create_name+0x3e2>
 8005ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed6:	f043 0308 	orr.w	r3, r3, #8
 8005eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	330b      	adds	r3, #11
 8005ee4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ee8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005eea:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3728      	adds	r7, #40	; 0x28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b2f      	cmp	r3, #47	; 0x2f
 8005f04:	d003      	beq.n	8005f0e <follow_path+0x1a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b5c      	cmp	r3, #92	; 0x5c
 8005f0c:	d106      	bne.n	8005f1c <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
 8005f1a:	e004      	b.n	8005f26 <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b1f      	cmp	r3, #31
 8005f2c:	d809      	bhi.n	8005f42 <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff f915 	bl	8005160 <dir_sdi>
 8005f36:	4603      	mov	r3, r0
 8005f38:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	615a      	str	r2, [r3, #20]
 8005f40:	e056      	b.n	8005ff0 <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8005f42:	463b      	mov	r3, r7
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fdd8 	bl	8005afc <create_name>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d145      	bne.n	8005fe2 <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fc21 	bl	800579e <dir_find>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	7adb      	ldrb	r3, [r3, #11]
 8005f66:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01d      	beq.n	8005faa <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d138      	bne.n	8005fe6 <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	609a      	str	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d128      	bne.n	8005fea <follow_path+0xf6>
 8005f98:	e022      	b.n	8005fe0 <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d122      	bne.n	8005fea <follow_path+0xf6>
 8005fa4:	2305      	movs	r3, #5
 8005fa6:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005fa8:	e01f      	b.n	8005fea <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11c      	bne.n	8005fee <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	330b      	adds	r3, #11
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005fc8:	2305      	movs	r3, #5
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	e010      	b.n	8005ff0 <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fa58 	bl	800548a <ld_clust>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8005fe0:	e7af      	b.n	8005f42 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005fe2:	bf00      	nop
 8005fe4:	e004      	b.n	8005ff0 <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <follow_path+0xfc>
				break;
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005fee:	bf00      	nop
		}
	}

	return res;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7858      	ldrb	r0, [r3, #1]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006010:	2301      	movs	r3, #1
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	f001 fef0 	bl	8007df8 <disk_read>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <check_fs+0x26>
		return 3;
 800601e:	2303      	movs	r3, #3
 8006020:	e01e      	b.n	8006060 <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f203 2336 	addw	r3, r3, #566	; 0x236
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800602e:	4293      	cmp	r3, r2
 8006030:	d001      	beq.n	8006036 <check_fs+0x3a>
		return 2;
 8006032:	2302      	movs	r3, #2
 8006034:	e014      	b.n	8006060 <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	336e      	adds	r3, #110	; 0x6e
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006040:	4a09      	ldr	r2, [pc, #36]	; (8006068 <check_fs+0x6c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <check_fs+0x4e>
		return 0;
 8006046:	2300      	movs	r3, #0
 8006048:	e00a      	b.n	8006060 <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	338a      	adds	r3, #138	; 0x8a
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <check_fs+0x6c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <check_fs+0x62>
		return 0;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <check_fs+0x64>

	return 1;
 800605e:	2301      	movs	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	00544146 	.word	0x00544146

0800606c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b092      	sub	sp, #72	; 0x48
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	3b30      	subs	r3, #48	; 0x30
 8006086:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	2b09      	cmp	r3, #9
 800608c:	d80b      	bhi.n	80060a6 <chk_mounted+0x3a>
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	3301      	adds	r3, #1
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b3a      	cmp	r3, #58	; 0x3a
 8006096:	d106      	bne.n	80060a6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	3302      	adds	r3, #2
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e002      	b.n	80060ac <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 80060a6:	4ba8      	ldr	r3, [pc, #672]	; (8006348 <chk_mounted+0x2dc>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 80060b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 80060b8:	230b      	movs	r3, #11
 80060ba:	e1d4      	b.n	8006466 <chk_mounted+0x3fa>
	fs = FatFs[vol];					/* Get corresponding file system object */
 80060bc:	4aa3      	ldr	r2, [pc, #652]	; (800634c <chk_mounted+0x2e0>)
 80060be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <chk_mounted+0x64>
 80060cc:	230c      	movs	r3, #12
 80060ce:	e1ca      	b.n	8006466 <chk_mounted+0x3fa>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d4:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01a      	beq.n	8006114 <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fe72 	bl	8007dcc <disk_status>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80060ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <chk_mounted+0xa4>
 8006100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 800610c:	230a      	movs	r3, #10
 800610e:	e1aa      	b.n	8006466 <chk_mounted+0x3fa>
			return FR_OK;				/* The file system object is valid */
 8006110:	2300      	movs	r3, #0
 8006112:	e1a8      	b.n	8006466 <chk_mounted+0x3fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800611a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611c:	b2da      	uxtb	r2, r3
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fd70 	bl	8007c0c <disk_initialize>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800613e:	2303      	movs	r3, #3
 8006140:	e191      	b.n	8006466 <chk_mounted+0x3fa>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <chk_mounted+0xec>
 8006148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8006154:	230a      	movs	r3, #10
 8006156:	e186      	b.n	8006466 <chk_mounted+0x3fa>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800615e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006160:	f7ff ff4c 	bl	8005ffc <check_fs>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 800616a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800616e:	2b01      	cmp	r3, #1
 8006170:	d124      	bne.n	80061bc <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 8006172:	2300      	movs	r3, #0
 8006174:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8006178:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <chk_mounted+0x11e>
 8006180:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006184:	3b01      	subs	r3, #1
 8006186:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 800618a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006194:	3338      	adds	r3, #56	; 0x38
 8006196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006198:	4413      	add	r3, r2
 800619a:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	3304      	adds	r3, #4
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	3308      	adds	r3, #8
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 80061ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b2:	f7ff ff23 	bl	8005ffc <check_fs>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 80061bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d101      	bne.n	80061c8 <chk_mounted+0x15c>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e14e      	b.n	8006466 <chk_mounted+0x3fa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80061c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <chk_mounted+0x168>
 80061d0:	230d      	movs	r3, #13
 80061d2:	e148      	b.n	8006466 <chk_mounted+0x3fa>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	3338      	adds	r3, #56	; 0x38
 80061d8:	330b      	adds	r3, #11
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e0:	d001      	beq.n	80061e6 <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 80061e2:	230d      	movs	r3, #13
 80061e4:	e13f      	b.n	8006466 <chk_mounted+0x3fa>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	3338      	adds	r3, #56	; 0x38
 80061ea:	3316      	adds	r3, #22
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <chk_mounted+0x194>
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	3338      	adds	r3, #56	; 0x38
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006204:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	7ffa      	ldrb	r2, [r7, #31]
 8006212:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8006214:	7ffb      	ldrb	r3, [r7, #31]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d004      	beq.n	8006224 <chk_mounted+0x1b8>
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d001      	beq.n	8006224 <chk_mounted+0x1b8>
 8006220:	230d      	movs	r3, #13
 8006222:	e120      	b.n	8006466 <chk_mounted+0x3fa>
	fasize *= b;										/* Number of sectors for FAT area */
 8006224:	7ffa      	ldrb	r2, [r7, #31]
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	7ffa      	ldrb	r2, [r7, #31]
 800623a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <chk_mounted+0x1e2>
 8006242:	7ffa      	ldrb	r2, [r7, #31]
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	3b01      	subs	r3, #1
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <chk_mounted+0x1e6>
 800624e:	230d      	movs	r3, #13
 8006250:	e109      	b.n	8006466 <chk_mounted+0x3fa>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	3338      	adds	r3, #56	; 0x38
 8006256:	3311      	adds	r3, #17
 8006258:	881a      	ldrh	r2, [r3, #0]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	891b      	ldrh	r3, [r3, #8]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <chk_mounted+0x204>
 800626c:	230d      	movs	r3, #13
 800626e:	e0fa      	b.n	8006466 <chk_mounted+0x3fa>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	3313      	adds	r3, #19
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <chk_mounted+0x21e>
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	3338      	adds	r3, #56	; 0x38
 8006284:	3320      	adds	r3, #32
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	3338      	adds	r3, #56	; 0x38
 800628e:	330e      	adds	r3, #14
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8006294:	8bbb      	ldrh	r3, [r7, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <chk_mounted+0x232>
 800629a:	230d      	movs	r3, #13
 800629c:	e0e3      	b.n	8006466 <chk_mounted+0x3fa>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800629e:	8bba      	ldrh	r2, [r7, #28]
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	4413      	add	r3, r2
 80062a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a6:	8912      	ldrh	r2, [r2, #8]
 80062a8:	0912      	lsrs	r2, r2, #4
 80062aa:	b292      	uxth	r2, r2
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80062b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d201      	bcs.n	80062bc <chk_mounted+0x250>
 80062b8:	230d      	movs	r3, #13
 80062ba:	e0d4      	b.n	8006466 <chk_mounted+0x3fa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80062bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	7892      	ldrb	r2, [r2, #2]
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <chk_mounted+0x26a>
 80062d2:	230d      	movs	r3, #13
 80062d4:	e0c7      	b.n	8006466 <chk_mounted+0x3fa>
	fmt = FS_FAT12;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d902      	bls.n	80062ec <chk_mounted+0x280>
 80062e6:	2302      	movs	r3, #2
 80062e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d902      	bls.n	80062fc <chk_mounted+0x290>
 80062f6:	2303      	movs	r3, #3
 80062f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800630a:	8bba      	ldrh	r2, [r7, #28]
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	441a      	add	r2, r3
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8006314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	441a      	add	r2, r3
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 800631e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006322:	2b03      	cmp	r3, #3
 8006324:	d114      	bne.n	8006350 <chk_mounted+0x2e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	891b      	ldrh	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <chk_mounted+0x2c6>
 800632e:	230d      	movs	r3, #13
 8006330:	e099      	b.n	8006466 <chk_mounted+0x3fa>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	3338      	adds	r3, #56	; 0x38
 8006336:	332c      	adds	r3, #44	; 0x2c
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	633b      	str	r3, [r7, #48]	; 0x30
 8006346:	e023      	b.n	8006390 <chk_mounted+0x324>
 8006348:	20000f62 	.word	0x20000f62
 800634c:	20000f5c 	.word	0x20000f5c
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	891b      	ldrh	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <chk_mounted+0x2f0>
 8006358:	230d      	movs	r3, #13
 800635a:	e084      	b.n	8006466 <chk_mounted+0x3fa>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	441a      	add	r2, r3
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800636c:	2b02      	cmp	r3, #2
 800636e:	d103      	bne.n	8006378 <chk_mounted+0x30c>
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	e00a      	b.n	800638e <chk_mounted+0x322>
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	085a      	lsrs	r2, r3, #1
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800639a:	0a5b      	lsrs	r3, r3, #9
 800639c:	429a      	cmp	r2, r3
 800639e:	d201      	bcs.n	80063a4 <chk_mounted+0x338>
		return FR_NO_FILESYSTEM;
 80063a0:	230d      	movs	r3, #13
 80063a2:	e060      	b.n	8006466 <chk_mounted+0x3fa>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295
 80063aa:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	2200      	movs	r2, #0
 80063b0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80063b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d13d      	bne.n	8006436 <chk_mounted+0x3ca>
	 	fs->fsi_flag = 0;
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	2200      	movs	r2, #0
 80063be:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	3338      	adds	r3, #56	; 0x38
 80063c4:	3330      	adds	r3, #48	; 0x30
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063cc:	441a      	add	r2, r3
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	7858      	ldrb	r0, [r3, #1]
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	2301      	movs	r3, #1
 80063e2:	f001 fd09 	bl	8007df8 <disk_read>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d124      	bne.n	8006436 <chk_mounted+0x3ca>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	3338      	adds	r3, #56	; 0x38
 80063f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063f4:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80063f6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d11b      	bne.n	8006436 <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	3338      	adds	r3, #56	; 0x38
 8006402:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8006404:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <chk_mounted+0x404>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d115      	bne.n	8006436 <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	3338      	adds	r3, #56	; 0x38
 800640e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006412:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <chk_mounted+0x408>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <chk_mounted+0x3ca>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	3338      	adds	r3, #56	; 0x38
 800641e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	3338      	adds	r3, #56	; 0x38
 800642c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800643c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800643e:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <chk_mounted+0x40c>)
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <chk_mounted+0x40c>)
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <chk_mounted+0x40c>)
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	2200      	movs	r2, #0
 8006456:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2200      	movs	r2, #0
 800645c:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2200      	movs	r2, #0
 8006462:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3748      	adds	r7, #72	; 0x48
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	41615252 	.word	0x41615252
 8006474:	61417272 	.word	0x61417272
 8006478:	20000f60 	.word	0x20000f60

0800647c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <validate+0x32>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <validate+0x32>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d006      	beq.n	80064ae <validate+0x32>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	88da      	ldrh	r2, [r3, #6]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	889b      	ldrh	r3, [r3, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d001      	beq.n	80064b2 <validate+0x36>
		return FR_INVALID_OBJECT;
 80064ae:	2309      	movs	r3, #9
 80064b0:	e00d      	b.n	80064ce <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fc87 	bl	8007dcc <disk_status>
 80064be:	4603      	mov	r3, r0
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <validate+0x50>
		return FR_NOT_READY;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e000      	b.n	80064ce <validate+0x52>

	return FR_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	6039      	str	r1, [r7, #0]
 80064e2:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80064ea:	230b      	movs	r3, #11
 80064ec:	e016      	b.n	800651c <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	4a0d      	ldr	r2, [pc, #52]	; (8006528 <f_mount+0x50>)
 80064f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f6:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	4905      	ldr	r1, [pc, #20]	; (8006528 <f_mount+0x50>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	20000f5c 	.word	0x20000f5c

0800652c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b094      	sub	sp, #80	; 0x50
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <f_open+0x18>
 8006540:	2309      	movs	r3, #9
 8006542:	e0fc      	b.n	800673e <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	f107 011c 	add.w	r1, r7, #28
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fd82 	bl	800606c <chk_mounted>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 800656e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80e1 	bne.w	800673a <f_open+0x20e>
		INIT_BUF(dj);
 8006578:	f107 0310 	add.w	r3, r7, #16
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
 800657e:	4b72      	ldr	r3, [pc, #456]	; (8006748 <f_open+0x21c>)
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	f107 031c 	add.w	r3, r7, #28
 8006588:	4611      	mov	r1, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fcb2 	bl	8005ef4 <follow_path>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800659a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <f_open+0x82>
			if (!dir)	/* Current dir itself */
 80065a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <f_open+0x82>
				res = FR_INVALID_NAME;
 80065a8:	2306      	movs	r3, #6
 80065aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f003 031c 	and.w	r3, r3, #28
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d06d      	beq.n	8006694 <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 80065b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d012      	beq.n	80065e6 <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80065c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d107      	bne.n	80065d8 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80065c8:	f107 031c 	add.w	r3, r7, #28
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff f993 	bl	80058f8 <dir_register>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	f043 0308 	orr.w	r3, r3, #8
 80065de:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e4:	e012      	b.n	800660c <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	330b      	adds	r3, #11
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 0311 	and.w	r3, r3, #17
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <f_open+0xd0>
					res = FR_DENIED;
 80065f4:	2307      	movs	r3, #7
 80065f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80065fa:	e007      	b.n	800660c <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <f_open+0xe0>
						res = FR_EXIST;
 8006606:	2308      	movs	r3, #8
 8006608:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800660c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006610:	2b00      	cmp	r3, #0
 8006612:	d15d      	bne.n	80066d0 <f_open+0x1a4>
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d058      	beq.n	80066d0 <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 800661e:	f001 fee1 	bl	80083e4 <get_fattime>
 8006622:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	330e      	adds	r3, #14
 8006628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800662a:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	330b      	adds	r3, #11
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	331c      	adds	r3, #28
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe ff22 	bl	800548a <ld_clust>
 8006646:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 8006648:	2100      	movs	r1, #0
 800664a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800664c:	f7fe ff38 	bl	80054c0 <st_clust>
				dj.fs->wflag = 1;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2201      	movs	r2, #1
 8006654:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d039      	beq.n	80066d0 <f_open+0x1a4>
					dw = dj.fs->winsect;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fca2 	bl	8004fb0 <remove_chain>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 8006672:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d12a      	bne.n	80066d0 <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800667e:	3a01      	subs	r2, #1
 8006680:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fa7b 	bl	8004b82 <move_window>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006692:	e01d      	b.n	80066d0 <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 8006694:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d119      	bne.n	80066d0 <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 800669c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669e:	330b      	adds	r3, #11
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <f_open+0x186>
					res = FR_NO_FILE;
 80066aa:	2304      	movs	r3, #4
 80066ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80066b0:	e00e      	b.n	80066d0 <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <f_open+0x1a4>
 80066bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066be:	330b      	adds	r3, #11
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <f_open+0x1a4>
						res = FR_DENIED;
 80066ca:	2307      	movs	r3, #7
 80066cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 80066d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10f      	bne.n	80066f8 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <f_open+0x1be>
				mode |= FA__WRITTEN;
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	f043 0320 	orr.w	r3, r3, #32
 80066e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f6:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80066f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11c      	bne.n	800673a <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	79fa      	ldrb	r2, [r7, #7]
 8006704:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe febd 	bl	800548a <ld_clust>
 8006710:	4602      	mov	r2, r0
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8006716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006718:	331c      	adds	r3, #28
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	88da      	ldrh	r2, [r3, #6]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800673a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800673e:	4618      	mov	r0, r3
 8006740:	3750      	adds	r7, #80	; 0x50
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000f64 	.word	0x20000f64

0800674c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08c      	sub	sp, #48	; 0x30
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fe89 	bl	800647c <validate>
 800676a:	4603      	mov	r3, r0
 800676c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800676e:	7ffb      	ldrb	r3, [r7, #31]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <f_read+0x2c>
 8006774:	7ffb      	ldrb	r3, [r7, #31]
 8006776:	e135      	b.n	80069e4 <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	799b      	ldrb	r3, [r3, #6]
 800677c:	b25b      	sxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	da01      	bge.n	8006786 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006782:	2302      	movs	r3, #2
 8006784:	e12e      	b.n	80069e4 <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	799b      	ldrb	r3, [r3, #6]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006792:	2307      	movs	r3, #7
 8006794:	e126      	b.n	80069e4 <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	f240 8117 	bls.w	80069da <f_read+0x28e>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80067b0:	e113      	b.n	80069da <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 80df 	bne.w	800697e <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	0a5b      	lsrs	r3, r3, #9
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	4013      	ands	r3, r2
 80067d4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d12c      	bne.n	8006836 <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ea:	e008      	b.n	80067fe <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f7fe fa6b 	bl	8004cd2 <get_fat>
 80067fc:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d808      	bhi.n	8006816 <f_read+0xca>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	799b      	ldrb	r3, [r3, #6]
 8006808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	719a      	strb	r2, [r3, #6]
 8006812:	2302      	movs	r3, #2
 8006814:	e0e6      	b.n	80069e4 <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d108      	bne.n	8006830 <f_read+0xe4>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	799b      	ldrb	r3, [r3, #6]
 8006822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006826:	b2da      	uxtb	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	719a      	strb	r2, [r3, #6]
 800682c:	2301      	movs	r3, #1
 800682e:	e0d9      	b.n	80069e4 <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006834:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe fa27 	bl	8004c94 <clust2sect>
 8006846:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <f_read+0x114>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	799b      	ldrb	r3, [r3, #6]
 8006852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	719a      	strb	r2, [r3, #6]
 800685c:	2302      	movs	r3, #2
 800685e:	e0c1      	b.n	80069e4 <f_read+0x298>
			sect += csect;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	0a5b      	lsrs	r3, r3, #9
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d042      	beq.n	80068fa <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006874:	7dfa      	ldrb	r2, [r7, #23]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	4413      	add	r3, r2
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	7892      	ldrb	r2, [r2, #2]
 8006880:	4293      	cmp	r3, r2
 8006882:	d906      	bls.n	8006892 <f_read+0x146>
					cc = fp->fs->csize - csect;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	789b      	ldrb	r3, [r3, #2]
 800688a:	461a      	mov	r2, r3
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	7858      	ldrb	r0, [r3, #1]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	b2db      	uxtb	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	6a39      	ldr	r1, [r7, #32]
 80068a0:	f001 faaa 	bl	8007df8 <disk_read>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	799b      	ldrb	r3, [r3, #6]
 80068ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	719a      	strb	r2, [r3, #6]
 80068b8:	2301      	movs	r3, #1
 80068ba:	e093      	b.n	80069e4 <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	799b      	ldrb	r3, [r3, #6]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d014      	beq.n	80068f2 <f_read+0x1a6>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d90d      	bls.n	80068f2 <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	025b      	lsls	r3, r3, #9
 80068e0:	6a3a      	ldr	r2, [r7, #32]
 80068e2:	18d0      	adds	r0, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ec:	4619      	mov	r1, r3
 80068ee:	f7fe f875 	bl	80049dc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80068f8:	e05b      	b.n	80069b2 <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d039      	beq.n	8006978 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	799b      	ldrb	r3, [r3, #6]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01d      	beq.n	800694c <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	7858      	ldrb	r0, [r3, #1]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	2301      	movs	r3, #1
 8006922:	f001 fad1 	bl	8007ec8 <disk_write>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	799b      	ldrb	r3, [r3, #6]
 8006930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	719a      	strb	r2, [r3, #6]
 800693a:	2301      	movs	r3, #1
 800693c:	e052      	b.n	80069e4 <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	799b      	ldrb	r3, [r3, #6]
 8006942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	7858      	ldrb	r0, [r3, #1]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006958:	2301      	movs	r3, #1
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	f001 fa4c 	bl	8007df8 <disk_read>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	799b      	ldrb	r3, [r3, #6]
 800696a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	719a      	strb	r2, [r3, #6]
 8006974:	2301      	movs	r3, #1
 8006976:	e035      	b.n	80069e4 <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800698c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d901      	bls.n	8006998 <f_read+0x24c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	3320      	adds	r3, #32
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	3304      	adds	r3, #4
 80069a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069aa:	4619      	mov	r1, r3
 80069ac:	6a38      	ldr	r0, [r7, #32]
 80069ae:	f7fe f815 	bl	80049dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	4413      	add	r3, r2
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	441a      	add	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	441a      	add	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f47f aee8 	bne.w	80067b2 <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3730      	adds	r7, #48	; 0x30
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff fd39 	bl	800647c <validate>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <f_write+0x2c>
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	e166      	b.n	8006ce6 <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	799b      	ldrb	r3, [r3, #6]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da01      	bge.n	8006a26 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006a22:	2302      	movs	r3, #2
 8006a24:	e15f      	b.n	8006ce6 <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	799b      	ldrb	r3, [r3, #6]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006a32:	2307      	movs	r3, #7
 8006a34:	e157      	b.n	8006ce6 <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f080 8137 	bcs.w	8006cb6 <f_write+0x2ca>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006a4c:	e133      	b.n	8006cb6 <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f040 80f8 	bne.w	8006c4c <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	0a5b      	lsrs	r3, r3, #9
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	789b      	ldrb	r3, [r3, #2]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4013      	ands	r3, r2
 8006a70:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006a72:	7dbb      	ldrb	r3, [r7, #22]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d13d      	bne.n	8006af4 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d110      	bne.n	8006aa2 <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fadb 	bl	800504e <create_chain>
 8006a98:	6278      	str	r0, [r7, #36]	; 0x24
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9e:	611a      	str	r2, [r3, #16]
 8006aa0:	e008      	b.n	8006ab4 <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7fe face 	bl	800504e <create_chain>
 8006ab2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8102 	beq.w	8006cc0 <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d108      	bne.n	8006ad4 <f_write+0xe8>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	799b      	ldrb	r3, [r3, #6]
 8006ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	719a      	strb	r2, [r3, #6]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e108      	b.n	8006ce6 <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d108      	bne.n	8006aee <f_write+0x102>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	799b      	ldrb	r3, [r3, #6]
 8006ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	719a      	strb	r2, [r3, #6]
 8006aea:	2301      	movs	r3, #1
 8006aec:	e0fb      	b.n	8006ce6 <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	799b      	ldrb	r3, [r3, #6]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01d      	beq.n	8006b3c <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	7858      	ldrb	r0, [r3, #1]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	2301      	movs	r3, #1
 8006b12:	f001 f9d9 	bl	8007ec8 <disk_write>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	799b      	ldrb	r3, [r3, #6]
 8006b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	719a      	strb	r2, [r3, #6]
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e0db      	b.n	8006ce6 <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	799b      	ldrb	r3, [r3, #6]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe f8a4 	bl	8004c94 <clust2sect>
 8006b4c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d108      	bne.n	8006b66 <f_write+0x17a>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	799b      	ldrb	r3, [r3, #6]
 8006b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	719a      	strb	r2, [r3, #6]
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0bf      	b.n	8006ce6 <f_write+0x2fa>
			sect += csect;
 8006b66:	7dbb      	ldrb	r3, [r7, #22]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d044      	beq.n	8006c04 <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006b7a:	7dba      	ldrb	r2, [r7, #22]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	7892      	ldrb	r2, [r2, #2]
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d906      	bls.n	8006b98 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	789b      	ldrb	r3, [r3, #2]
 8006b90:	461a      	mov	r2, r3
 8006b92:	7dbb      	ldrb	r3, [r7, #22]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	7858      	ldrb	r0, [r3, #1]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	69b9      	ldr	r1, [r7, #24]
 8006ba6:	f001 f98f 	bl	8007ec8 <disk_write>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	799b      	ldrb	r3, [r3, #6]
 8006bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	719a      	strb	r2, [r3, #6]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e091      	b.n	8006ce6 <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d915      	bls.n	8006bfc <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	025b      	lsls	r3, r3, #9
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4413      	add	r3, r2
 8006be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be8:	4619      	mov	r1, r3
 8006bea:	f7fd fef7 	bl	80049dc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	799b      	ldrb	r3, [r3, #6]
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	025b      	lsls	r3, r3, #9
 8006c00:	623b      	str	r3, [r7, #32]
				continue;
 8006c02:	e044      	b.n	8006c8e <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d01b      	beq.n	8006c46 <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d215      	bcs.n	8006c46 <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	7858      	ldrb	r0, [r3, #1]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006c26:	2301      	movs	r3, #1
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	f001 f8e5 	bl	8007df8 <disk_read>
 8006c2e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	799b      	ldrb	r3, [r3, #6]
 8006c38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	719a      	strb	r2, [r3, #6]
 8006c42:	2301      	movs	r3, #1
 8006c44:	e04f      	b.n	8006ce6 <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006c58:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d901      	bls.n	8006c66 <f_write+0x27a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	3320      	adds	r3, #32
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	3304      	adds	r3, #4
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	69b9      	ldr	r1, [r7, #24]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fd feae 	bl	80049dc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	799b      	ldrb	r3, [r3, #6]
 8006c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	4413      	add	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	609a      	str	r2, [r3, #8]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	441a      	add	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f47f aec8 	bne.w	8006a4e <f_write+0x62>
 8006cbe:	e000      	b.n	8006cc2 <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006cc0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d903      	bls.n	8006cd6 <f_write+0x2ea>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	799b      	ldrb	r3, [r3, #6]
 8006cda:	f043 0320 	orr.w	r3, r3, #32
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3728      	adds	r7, #40	; 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b086      	sub	sp, #24
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fbc0 	bl	800647c <validate>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d163      	bne.n	8006dce <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	799b      	ldrb	r3, [r3, #6]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d05d      	beq.n	8006dce <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	799b      	ldrb	r3, [r3, #6]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d016      	beq.n	8006d4c <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	7858      	ldrb	r0, [r3, #1]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f001 f8ca 	bl	8007ec8 <disk_write>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e048      	b.n	8006dd0 <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	799b      	ldrb	r3, [r3, #6]
 8006d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fd ff13 	bl	8004b82 <move_window>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d133      	bne.n	8006dce <f_sync+0xe0>
				dir = fp->dir_ptr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	330b      	adds	r3, #11
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	330b      	adds	r3, #11
 8006d76:	f042 0220 	orr.w	r2, r2, #32
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	331c      	adds	r3, #28
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68d2      	ldr	r2, [r2, #12]
 8006d86:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6938      	ldr	r0, [r7, #16]
 8006d90:	f7fe fb96 	bl	80054c0 <st_clust>
				tm = get_fattime();							/* Update updated time */
 8006d94:	f001 fb26 	bl	80083e4 <get_fattime>
 8006d98:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3316      	adds	r3, #22
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	3312      	adds	r3, #18
 8006da6:	2200      	movs	r2, #0
 8006da8:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	799b      	ldrb	r3, [r3, #6]
 8006dae:	f023 0320 	bic.w	r3, r3, #32
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd ff05 	bl	8004bd4 <sync_fs>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ff84 	bl	8006cee <f_sync>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <f_close+0x1e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
	return res;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fb36 	bl	800647c <validate>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <f_lseek+0x1e>
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	e13b      	b.n	8007096 <f_lseek+0x296>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	799b      	ldrb	r3, [r3, #6]
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da01      	bge.n	8006e2c <f_lseek+0x2c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e134      	b.n	8007096 <f_lseek+0x296>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d908      	bls.n	8006e48 <f_lseek+0x48>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	799b      	ldrb	r3, [r3, #6]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <f_lseek+0x48>
#endif
			) ofs = fp->fsize;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	609a      	str	r2, [r3, #8]
		if (ofs) {
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80c1 	beq.w	8006fe2 <f_lseek+0x1e2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	025b      	lsls	r3, r3, #9
 8006e68:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <f_lseek+0xa8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1e59      	subs	r1, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d30f      	bcc.n	8006ea8 <f_lseek+0xa8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1e5a      	subs	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	425b      	negs	r3, r3
 8006e90:	401a      	ands	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	e02b      	b.n	8006f00 <f_lseek+0x100>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d122      	bne.n	8006efa <f_lseek+0xfa>
					clst = create_chain(fp->fs, 0);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f8c7 	bl	800504e <create_chain>
 8006ec0:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d108      	bne.n	8006eda <f_lseek+0xda>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	799b      	ldrb	r3, [r3, #6]
 8006ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	719a      	strb	r2, [r3, #6]
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e0dd      	b.n	8007096 <f_lseek+0x296>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d108      	bne.n	8006ef4 <f_lseek+0xf4>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	799b      	ldrb	r3, [r3, #6]
 8006ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	719a      	strb	r2, [r3, #6]
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0d0      	b.n	8007096 <f_lseek+0x296>
					fp->sclust = clst;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d06d      	beq.n	8006fe2 <f_lseek+0x1e2>
				while (ofs > bcs) {						/* Cluster following loop */
 8006f06:	e045      	b.n	8006f94 <f_lseek+0x194>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <f_lseek+0x12e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe f897 	bl	800504e <create_chain>
 8006f20:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <f_lseek+0x13c>
							ofs = bcs; break;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	e036      	b.n	8006f9c <f_lseek+0x19c>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69f9      	ldr	r1, [r7, #28]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fecc 	bl	8004cd2 <get_fat>
 8006f3a:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d108      	bne.n	8006f56 <f_lseek+0x156>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	799b      	ldrb	r3, [r3, #6]
 8006f48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	719a      	strb	r2, [r3, #6]
 8006f52:	2301      	movs	r3, #1
 8006f54:	e09f      	b.n	8007096 <f_lseek+0x296>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d905      	bls.n	8006f68 <f_lseek+0x168>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d308      	bcc.n	8006f7a <f_lseek+0x17a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	799b      	ldrb	r3, [r3, #6]
 8006f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	719a      	strb	r2, [r3, #6]
 8006f76:	2302      	movs	r3, #2
 8006f78:	e08d      	b.n	8007096 <f_lseek+0x296>
					fp->clust = clst;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	441a      	add	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d8b5      	bhi.n	8006f08 <f_lseek+0x108>
				}
				fp->fptr += ofs;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d017      	beq.n	8006fe2 <f_lseek+0x1e2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd fe6b 	bl	8004c94 <clust2sect>
 8006fbe:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d108      	bne.n	8006fd8 <f_lseek+0x1d8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	799b      	ldrb	r3, [r3, #6]
 8006fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	719a      	strb	r2, [r3, #6]
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e05e      	b.n	8007096 <f_lseek+0x296>
					nsect += ofs / SS(fp->fs);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	0a5b      	lsrs	r3, r3, #9
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4413      	add	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d041      	beq.n	8007072 <f_lseek+0x272>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d03c      	beq.n	8007072 <f_lseek+0x272>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	799b      	ldrb	r3, [r3, #6]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01d      	beq.n	8007040 <f_lseek+0x240>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	7858      	ldrb	r0, [r3, #1]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	2301      	movs	r3, #1
 8007016:	f000 ff57 	bl	8007ec8 <disk_write>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <f_lseek+0x232>
					ABORT(fp->fs, FR_DISK_ERR);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	799b      	ldrb	r3, [r3, #6]
 8007024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007028:	b2da      	uxtb	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	719a      	strb	r2, [r3, #6]
 800702e:	2301      	movs	r3, #1
 8007030:	e031      	b.n	8007096 <f_lseek+0x296>
				fp->flag &= ~FA__DIRTY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	799b      	ldrb	r3, [r3, #6]
 8007036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703a:	b2da      	uxtb	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	7858      	ldrb	r0, [r3, #1]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800704c:	2301      	movs	r3, #1
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	f000 fed2 	bl	8007df8 <disk_read>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <f_lseek+0x26c>
				ABORT(fp->fs, FR_DISK_ERR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	799b      	ldrb	r3, [r3, #6]
 800705e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007062:	b2da      	uxtb	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	719a      	strb	r2, [r3, #6]
 8007068:	2301      	movs	r3, #1
 800706a:	e014      	b.n	8007096 <f_lseek+0x296>
#endif
			fp->dsect = nsect;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d90a      	bls.n	8007094 <f_lseek+0x294>
			fp->fsize = fp->fptr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	799b      	ldrb	r3, [r3, #6]
 800708a:	f043 0320 	orr.w	r3, r3, #32
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007094:	7dfb      	ldrb	r3, [r7, #23]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 80070a2:	f000 fad7 	bl	8007654 <sd_ini>
}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b092      	sub	sp, #72	; 0x48
 80070b0:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 80070b2:	4940      	ldr	r1, [pc, #256]	; (80071b4 <my_read_file+0x108>)
 80070b4:	2000      	movs	r0, #0
 80070b6:	f7ff fa0f 	bl	80064d8 <f_mount>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d175      	bne.n	80071ac <my_read_file+0x100>
	{
		SEND_str("f_mount -> success\n");
 80070c0:	483d      	ldr	r0, [pc, #244]	; (80071b8 <my_read_file+0x10c>)
 80070c2:	f7fb fe53 	bl	8002d6c <SEND_str>

		uint8_t path[10]="test.json";
 80070c6:	4a3d      	ldr	r2, [pc, #244]	; (80071bc <my_read_file+0x110>)
 80070c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80070ce:	c303      	stmia	r3!, {r0, r1}
 80070d0:	801a      	strh	r2, [r3, #0]
		path[9] = '\0';
 80070d2:	2300      	movs	r3, #0
 80070d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		result = f_open(&MyFile, (char*)path, FA_READ);
 80070d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070dc:	2201      	movs	r2, #1
 80070de:	4619      	mov	r1, r3
 80070e0:	4837      	ldr	r0, [pc, #220]	; (80071c0 <my_read_file+0x114>)
 80070e2:	f7ff fa23 	bl	800652c <f_open>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <my_read_file+0x118>)
 80070ec:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 80070ee:	4b35      	ldr	r3, [pc, #212]	; (80071c4 <my_read_file+0x118>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d15a      	bne.n	80071ac <my_read_file+0x100>
		{
			SEND_str("f_open -> success\n");
 80070f6:	4834      	ldr	r0, [pc, #208]	; (80071c8 <my_read_file+0x11c>)
 80070f8:	f7fb fe38 	bl	8002d6c <SEND_str>

			BytesToRead = MyFile.fsize;
 80070fc:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <my_read_file+0x114>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4a32      	ldr	r2, [pc, #200]	; (80071cc <my_read_file+0x120>)
 8007102:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8007104:	4b31      	ldr	r3, [pc, #196]	; (80071cc <my_read_file+0x120>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	463b      	mov	r3, r7
 800710a:	4931      	ldr	r1, [pc, #196]	; (80071d0 <my_read_file+0x124>)
 800710c:	4618      	mov	r0, r3
 800710e:	f015 f817 	bl	801c140 <siprintf>
			SEND_str(str1);
 8007112:	463b      	mov	r3, r7
 8007114:	4618      	mov	r0, r3
 8007116:	f7fb fe29 	bl	8002d6c <SEND_str>

			BytesCounter = 0;
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <my_read_file+0x128>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8007120:	e017      	b.n	8007152 <my_read_file+0xa6>
		    {
		       	f_read(&MyFile, readBuffer, 512, &readBytes);
 8007122:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <my_read_file+0x12c>)
 8007124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007128:	492c      	ldr	r1, [pc, #176]	; (80071dc <my_read_file+0x130>)
 800712a:	4825      	ldr	r0, [pc, #148]	; (80071c0 <my_read_file+0x114>)
 800712c:	f7ff fb0e 	bl	800674c <f_read>
		       	BytesCounter += 512;
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <my_read_file+0x128>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <my_read_file+0x128>)
 800713a:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 800713c:	4827      	ldr	r0, [pc, #156]	; (80071dc <my_read_file+0x130>)
 800713e:	f7f9 f851 	bl	80001e4 <strlen>
 8007142:	4603      	mov	r3, r0
 8007144:	b29a      	uxth	r2, r3
 8007146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800714a:	4924      	ldr	r1, [pc, #144]	; (80071dc <my_read_file+0x130>)
 800714c:	4824      	ldr	r0, [pc, #144]	; (80071e0 <my_read_file+0x134>)
 800714e:	f007 fd00 	bl	800eb52 <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8007152:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <my_read_file+0x120>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <my_read_file+0x128>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007160:	d2df      	bcs.n	8007122 <my_read_file+0x76>
		    }
		    if (BytesToRead != BytesCounter)
 8007162:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <my_read_file+0x120>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <my_read_file+0x128>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d01b      	beq.n	80071a6 <my_read_file+0xfa>
		    {
	        	f_read(&MyFile, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 800716e:	4b17      	ldr	r3, [pc, #92]	; (80071cc <my_read_file+0x120>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <my_read_file+0x128>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <my_read_file+0x12c>)
 800717a:	4918      	ldr	r1, [pc, #96]	; (80071dc <my_read_file+0x130>)
 800717c:	4810      	ldr	r0, [pc, #64]	; (80071c0 <my_read_file+0x114>)
 800717e:	f7ff fae5 	bl	800674c <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8007182:	4b12      	ldr	r3, [pc, #72]	; (80071cc <my_read_file+0x120>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	b29a      	uxth	r2, r3
 8007188:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <my_read_file+0x128>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	b29a      	uxth	r2, r3
 8007192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007196:	4911      	ldr	r1, [pc, #68]	; (80071dc <my_read_file+0x130>)
 8007198:	4811      	ldr	r0, [pc, #68]	; (80071e0 <my_read_file+0x134>)
 800719a:	f007 fcda 	bl	800eb52 <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <my_read_file+0x120>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <my_read_file+0x128>)
 80071a4:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&MyFile);
 80071a6:	4806      	ldr	r0, [pc, #24]	; (80071c0 <my_read_file+0x114>)
 80071a8:	f7ff fe16 	bl	8006dd8 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 80071ac:	bf00      	nop
 80071ae:	3748      	adds	r7, #72	; 0x48
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	2000148c 	.word	0x2000148c
 80071b8:	080212e4 	.word	0x080212e4
 80071bc:	08021320 	.word	0x08021320
 80071c0:	200016c4 	.word	0x200016c4
 80071c4:	200018e8 	.word	0x200018e8
 80071c8:	080212f8 	.word	0x080212f8
 80071cc:	20000f90 	.word	0x20000f90
 80071d0:	0802130c 	.word	0x0802130c
 80071d4:	20000f94 	.word	0x20000f94
 80071d8:	20000f98 	.word	0x20000f98
 80071dc:	20001df4 	.word	0x20001df4
 80071e0:	20001c3c 	.word	0x20001c3c

080071e4 <my_write_file_json>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file_json(char *path, char *text)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b092      	sub	sp, #72	; 0x48
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 80071ee:	4921      	ldr	r1, [pc, #132]	; (8007274 <my_write_file_json+0x90>)
 80071f0:	2000      	movs	r0, #0
 80071f2:	f7ff f971 	bl	80064d8 <f_mount>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d136      	bne.n	800726a <my_write_file_json+0x86>
	{
		SEND_str("f_mount -> success\n");
 80071fc:	481e      	ldr	r0, [pc, #120]	; (8007278 <my_write_file_json+0x94>)
 80071fe:	f7fb fdb5 	bl	8002d6c <SEND_str>

		result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8007202:	220a      	movs	r2, #10
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	481d      	ldr	r0, [pc, #116]	; (800727c <my_write_file_json+0x98>)
 8007208:	f7ff f990 	bl	800652c <f_open>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <my_write_file_json+0x9c>)
 8007212:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8007214:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <my_write_file_json+0x9c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d126      	bne.n	800726a <my_write_file_json+0x86>
		{
			SEND_str("f_open -> success\n");
 800721c:	4819      	ldr	r0, [pc, #100]	; (8007284 <my_write_file_json+0xa0>)
 800721e:	f7fb fda5 	bl	8002d6c <SEND_str>

			result = f_write(&MyFile, text, strlen(text), &WriteBytes);
 8007222:	6838      	ldr	r0, [r7, #0]
 8007224:	f7f8 ffde 	bl	80001e4 <strlen>
 8007228:	4602      	mov	r2, r0
 800722a:	4b17      	ldr	r3, [pc, #92]	; (8007288 <my_write_file_json+0xa4>)
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	4813      	ldr	r0, [pc, #76]	; (800727c <my_write_file_json+0x98>)
 8007230:	f7ff fbdc 	bl	80069ec <f_write>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <my_write_file_json+0x9c>)
 800723a:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <my_write_file_json+0x9c>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10f      	bne.n	8007264 <my_write_file_json+0x80>
			{
				SEND_str("f_write -> success\n");
 8007244:	4811      	ldr	r0, [pc, #68]	; (800728c <my_write_file_json+0xa8>)
 8007246:	f7fb fd91 	bl	8002d6c <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <my_write_file_json+0xa4>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	490f      	ldr	r1, [pc, #60]	; (8007290 <my_write_file_json+0xac>)
 8007254:	4618      	mov	r0, r3
 8007256:	f014 ff73 	bl	801c140 <siprintf>
				SEND_str(str1);
 800725a:	f107 030c 	add.w	r3, r7, #12
 800725e:	4618      	mov	r0, r3
 8007260:	f7fb fd84 	bl	8002d6c <SEND_str>
			}
		    f_close(&MyFile);
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <my_write_file_json+0x98>)
 8007266:	f7ff fdb7 	bl	8006dd8 <f_close>
		}
	}
}
 800726a:	bf00      	nop
 800726c:	3748      	adds	r7, #72	; 0x48
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	2000148c 	.word	0x2000148c
 8007278:	080212e4 	.word	0x080212e4
 800727c:	200016c4 	.word	0x200016c4
 8007280:	200018e8 	.word	0x200018e8
 8007284:	080212f8 	.word	0x080212f8
 8007288:	20000f9c 	.word	0x20000f9c
 800728c:	0802132c 	.word	0x0802132c
 8007290:	08021340 	.word	0x08021340

08007294 <my_write_file_firmware>:
//Принимает "path" - указатель на имя файла
//Принимает "data_bytes" - указатель на буффер данных, которые нужно сохранить
//Принимает "crc32" - контрольную сумму принимаемого пакеда данных
//Возвращает статус контроля целостности данных
char *my_write_file_firmware(char *path, char *data_bytes, uint32_t crc32)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
	if(!check_init)
 80072a0:	4b3e      	ldr	r3, [pc, #248]	; (800739c <my_write_file_firmware+0x108>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f083 0301 	eor.w	r3, r3, #1
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d019      	beq.n	80072e2 <my_write_file_firmware+0x4e>
	{
		if (f_mount(0, &FATFS_Obj) == FR_OK)
 80072ae:	493c      	ldr	r1, [pc, #240]	; (80073a0 <my_write_file_firmware+0x10c>)
 80072b0:	2000      	movs	r0, #0
 80072b2:	f7ff f911 	bl	80064d8 <f_mount>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d112      	bne.n	80072e2 <my_write_file_firmware+0x4e>
		{
			result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS | FA_WRITE);
 80072bc:	220a      	movs	r2, #10
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	4838      	ldr	r0, [pc, #224]	; (80073a4 <my_write_file_firmware+0x110>)
 80072c2:	f7ff f933 	bl	800652c <f_open>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	4b37      	ldr	r3, [pc, #220]	; (80073a8 <my_write_file_firmware+0x114>)
 80072cc:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 80072ce:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <my_write_file_firmware+0x114>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <my_write_file_firmware+0x4e>
			{
				check_init = true;
 80072d6:	4b31      	ldr	r3, [pc, #196]	; (800739c <my_write_file_firmware+0x108>)
 80072d8:	2201      	movs	r2, #1
 80072da:	701a      	strb	r2, [r3, #0]
				firmwareBytesCounter = 0;
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <my_write_file_firmware+0x118>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(check_init)
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <my_write_file_firmware+0x108>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d052      	beq.n	8007390 <my_write_file_firmware+0xfc>
	{
		result = f_lseek(&MyFile, MyFile.fsize);	//Поиск конца файла
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <my_write_file_firmware+0x110>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	4619      	mov	r1, r3
 80072f0:	482c      	ldr	r0, [pc, #176]	; (80073a4 <my_write_file_firmware+0x110>)
 80072f2:	f7ff fd85 	bl	8006e00 <f_lseek>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b2b      	ldr	r3, [pc, #172]	; (80073a8 <my_write_file_firmware+0x114>)
 80072fc:	701a      	strb	r2, [r3, #0]
		if(result == FR_OK)
 80072fe:	4b2a      	ldr	r3, [pc, #168]	; (80073a8 <my_write_file_firmware+0x114>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d144      	bne.n	8007390 <my_write_file_firmware+0xfc>
		{
			uint32_t crc32_t = HAL_CRC_Calculate(&hcrc, (uint32_t *)(data_bytes), 256);	//3-й параметр - указываем количество полных слов(0xFFFFFF)
 8007306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4828      	ldr	r0, [pc, #160]	; (80073b0 <my_write_file_firmware+0x11c>)
 800730e:	f003 f9f4 	bl	800a6fa <HAL_CRC_Calculate>
 8007312:	6178      	str	r0, [r7, #20]
			if(crc32 == crc32_t)
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d137      	bne.n	800738c <my_write_file_firmware+0xf8>
			{
				if((SetFW.SIZE - firmwareBytesCounter) >= 1024)	//default: 248
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <my_write_file_firmware+0x120>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	461a      	mov	r2, r3
 8007322:	4b22      	ldr	r3, [pc, #136]	; (80073ac <my_write_file_firmware+0x118>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800732c:	d311      	bcc.n	8007352 <my_write_file_firmware+0xbe>
				{
					result = f_write(&MyFile, data_bytes, 1024, &WriteBytes);
 800732e:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <my_write_file_firmware+0x124>)
 8007330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	481b      	ldr	r0, [pc, #108]	; (80073a4 <my_write_file_firmware+0x110>)
 8007338:	f7ff fb58 	bl	80069ec <f_write>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <my_write_file_firmware+0x114>)
 8007342:	701a      	strb	r2, [r3, #0]
					firmwareBytesCounter += 1024;
 8007344:	4b19      	ldr	r3, [pc, #100]	; (80073ac <my_write_file_firmware+0x118>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <my_write_file_firmware+0x118>)
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e01a      	b.n	8007388 <my_write_file_firmware+0xf4>
				}
				else if (SetFW.SIZE != firmwareBytesCounter)
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <my_write_file_firmware+0x120>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	461a      	mov	r2, r3
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <my_write_file_firmware+0x118>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d013      	beq.n	8007388 <my_write_file_firmware+0xf4>
				{
					result = f_write(&MyFile, data_bytes, (SetFW.SIZE - firmwareBytesCounter) , &WriteBytes);
 8007360:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <my_write_file_firmware+0x120>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	461a      	mov	r2, r3
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <my_write_file_firmware+0x118>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <my_write_file_firmware+0x124>)
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	480c      	ldr	r0, [pc, #48]	; (80073a4 <my_write_file_firmware+0x110>)
 8007372:	f7ff fb3b 	bl	80069ec <f_write>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <my_write_file_firmware+0x114>)
 800737c:	701a      	strb	r2, [r3, #0]
					firmwareBytesCounter = SetFW.SIZE;
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <my_write_file_firmware+0x120>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	461a      	mov	r2, r3
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <my_write_file_firmware+0x118>)
 8007386:	601a      	str	r2, [r3, #0]
				}
				return FW_CRC32_OK;
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <my_write_file_firmware+0x128>)
 800738a:	e002      	b.n	8007392 <my_write_file_firmware+0xfe>
			}
			return FW_CRC32_ERR;
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <my_write_file_firmware+0x12c>)
 800738e:	e000      	b.n	8007392 <my_write_file_firmware+0xfe>
		}
	}
	return FW_UPD_ERROR;
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <my_write_file_firmware+0x130>)
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000abc 	.word	0x20000abc
 80073a0:	2000148c 	.word	0x2000148c
 80073a4:	200016c4 	.word	0x200016c4
 80073a8:	200018e8 	.word	0x200018e8
 80073ac:	20000ab8 	.word	0x20000ab8
 80073b0:	20001484 	.word	0x20001484
 80073b4:	20001188 	.word	0x20001188
 80073b8:	20000f9c 	.word	0x20000f9c
 80073bc:	08021358 	.word	0x08021358
 80073c0:	0802135c 	.word	0x0802135c
 80073c4:	08021364 	.word	0x08021364

080073c8 <fl_close>:
//Функция закрытия файла
void fl_close(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
    f_close(&MyFile);
 80073cc:	4802      	ldr	r0, [pc, #8]	; (80073d8 <fl_close+0x10>)
 80073ce:	f7ff fd03 	bl	8006dd8 <f_close>
}
 80073d2:	bf00      	nop
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200016c4 	.word	0x200016c4

080073dc <save_dido>:
}
//Функция сохраниения конфигурационных данных (Включить/выключить цифровой выход(Открытый коллектор) если цифровой вход = значение(уровень))
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "text" - указатель на строку JSON
void save_dido(char *D_IN, char *text)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	; 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 80073e6:	6838      	ldr	r0, [r7, #0]
 80073e8:	f7fb fcc0 	bl	8002d6c <SEND_str>
	sprintf(name_FIL,"%s%s.json", D_IN, "(DiDo)");
 80073ec:	f107 0008 	add.w	r0, r7, #8
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <save_dido+0x3c>)
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4909      	ldr	r1, [pc, #36]	; (800741c <save_dido+0x40>)
 80073f6:	f014 fea3 	bl	801c140 <siprintf>
	SEND_str(name_FIL);
 80073fa:	f107 0308 	add.w	r3, r7, #8
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fb fcb4 	bl	8002d6c <SEND_str>
	my_write_file_json(name_FIL, text);
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff feea 	bl	80071e4 <my_write_file_json>
}
 8007410:	bf00      	nop
 8007412:	3728      	adds	r7, #40	; 0x28
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08021378 	.word	0x08021378
 800741c:	08021380 	.word	0x08021380

08007420 <save_aido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если аналоговый вход в интервале значений)
//Принимает "A_IN" - строку с номером аналогового входа
//Принимает "text" - указатель на строку JSON
void save_aido(char *A_IN, char *text)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 800742a:	6838      	ldr	r0, [r7, #0]
 800742c:	f7fb fc9e 	bl	8002d6c <SEND_str>
	sprintf(name_FIL,"%s%s.json", A_IN, "(AiDo)");
 8007430:	f107 0008 	add.w	r0, r7, #8
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <save_aido+0x3c>)
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4909      	ldr	r1, [pc, #36]	; (8007460 <save_aido+0x40>)
 800743a:	f014 fe81 	bl	801c140 <siprintf>
	SEND_str(name_FIL);
 800743e:	f107 0308 	add.w	r3, r7, #8
 8007442:	4618      	mov	r0, r3
 8007444:	f7fb fc92 	bl	8002d6c <SEND_str>
	my_write_file_json(name_FIL, text);
 8007448:	f107 0308 	add.w	r3, r7, #8
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fec8 	bl	80071e4 <my_write_file_json>
}
 8007454:	bf00      	nop
 8007456:	3728      	adds	r7, #40	; 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	0802138c 	.word	0x0802138c
 8007460:	08021380 	.word	0x08021380

08007464 <save_pwm>:
//Функция сохраниения конфигурационных данных (Задать сигнал ШИМ на одном выходе)
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "text" - указатель на строку JSON
void save_pwm(char *PWM_OUT, char *text)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f7fb fc7c 	bl	8002d6c <SEND_str>
	sprintf(name_FIL,"%s.json", PWM_OUT);
 8007474:	f107 0308 	add.w	r3, r7, #8
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4909      	ldr	r1, [pc, #36]	; (80074a0 <save_pwm+0x3c>)
 800747c:	4618      	mov	r0, r3
 800747e:	f014 fe5f 	bl	801c140 <siprintf>
	SEND_str(name_FIL);
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	4618      	mov	r0, r3
 8007488:	f7fb fc70 	bl	8002d6c <SEND_str>
	my_write_file_json(name_FIL, text);
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fea6 	bl	80071e4 <my_write_file_json>
}
 8007498:	bf00      	nop
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	08021394 	.word	0x08021394

080074a4 <save_tsido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если температура датчика в интервале значений)
//Принимает "ROM_RAW" - строку с уникальным идентификатором температурного датчика
//Принимает "text" - указатель на строку JSON
void save_tsido(char *ROM_RAW, char *text)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 80074ae:	6838      	ldr	r0, [r7, #0]
 80074b0:	f7fb fc5c 	bl	8002d6c <SEND_str>
	sprintf(name_FIL,"%s%s.json", ROM_RAW, "(TSiDo)");
 80074b4:	f107 0008 	add.w	r0, r7, #8
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <save_tsido+0x3c>)
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4909      	ldr	r1, [pc, #36]	; (80074e4 <save_tsido+0x40>)
 80074be:	f014 fe3f 	bl	801c140 <siprintf>
	SEND_str(name_FIL);
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fb fc50 	bl	8002d6c <SEND_str>
	my_write_file_json(name_FIL, text);
 80074cc:	f107 0308 	add.w	r3, r7, #8
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fe86 	bl	80071e4 <my_write_file_json>
}
 80074d8:	bf00      	nop
 80074da:	3728      	adds	r7, #40	; 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	0802139c 	.word	0x0802139c
 80074e4:	08021380 	.word	0x08021380

080074e8 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
	LD_ON;
 80074ec:	2200      	movs	r2, #0
 80074ee:	2101      	movs	r1, #1
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <Error+0x14>)
 80074f2:	f004 ff19 	bl	800c328 <HAL_GPIO_WritePin>
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40020000 	.word	0x40020000

08007500 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 800750e:	f107 020f 	add.w	r2, r7, #15
 8007512:	1df9      	adds	r1, r7, #7
 8007514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2301      	movs	r3, #1
 800751c:	4806      	ldr	r0, [pc, #24]	; (8007538 <SPIx_WriteRead+0x38>)
 800751e:	f005 ff76 	bl	800d40e <HAL_SPI_TransmitReceive>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <SPIx_WriteRead+0x2c>
	{
		Error();
 8007528:	f7ff ffde 	bl	80074e8 <Error>
  	}
  	return receivedbyte;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001964 	.word	0x20001964

0800753c <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff ffd9 	bl	8007500 <SPIx_WriteRead>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 800755c:	20ff      	movs	r0, #255	; 0xff
 800755e:	f7ff ffcf 	bl	8007500 <SPIx_WriteRead>
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
	return bt;
 8007566:	79fb      	ldrb	r3, [r7, #7]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8007574:	20ff      	movs	r0, #255	; 0xff
 8007576:	f7ff ffc3 	bl	8007500 <SPIx_WriteRead>
}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 800758c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da0e      	bge.n	80075b2 <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 800759c:	2100      	movs	r1, #0
 800759e:	2077      	movs	r0, #119	; 0x77
 80075a0:	f7ff ffee 	bl	8007580 <SD_cmd>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d901      	bls.n	80075b2 <SD_cmd+0x32>
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	e049      	b.n	8007646 <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 80075b2:	2201      	movs	r2, #1
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	4826      	ldr	r0, [pc, #152]	; (8007650 <SD_cmd+0xd0>)
 80075b8:	f004 feb6 	bl	800c328 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80075bc:	f7ff ffcb 	bl	8007556 <SPI_ReceiveByte>
	SS_SD_SELECT();
 80075c0:	2200      	movs	r2, #0
 80075c2:	2140      	movs	r1, #64	; 0x40
 80075c4:	4822      	ldr	r0, [pc, #136]	; (8007650 <SD_cmd+0xd0>)
 80075c6:	f004 feaf 	bl	800c328 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80075ca:	f7ff ffc4 	bl	8007556 <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ffb3 	bl	800753c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ffad 	bl	800753c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ffa7 	bl	800753c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	0a1b      	lsrs	r3, r3, #8
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff ffa1 	bl	800753c <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ff9c 	bl	800753c <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d101      	bne.n	8007612 <SD_cmd+0x92>
 800760e:	2395      	movs	r3, #149	; 0x95
 8007610:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	2b48      	cmp	r3, #72	; 0x48
 8007616:	d101      	bne.n	800761c <SD_cmd+0x9c>
 8007618:	2387      	movs	r3, #135	; 0x87
 800761a:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff ff8c 	bl	800753c <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 8007624:	230a      	movs	r3, #10
 8007626:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8007628:	f7ff ff95 	bl	8007556 <SPI_ReceiveByte>
 800762c:	4603      	mov	r3, r0
 800762e:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8007630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da05      	bge.n	8007644 <SD_cmd+0xc4>
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	3b01      	subs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f1      	bne.n	8007628 <SD_cmd+0xa8>

	return res;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40020400 	.word	0x40020400

08007654 <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b087      	sub	sp, #28
 8007658:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 800765a:	2201      	movs	r2, #1
 800765c:	2101      	movs	r1, #1
 800765e:	4881      	ldr	r0, [pc, #516]	; (8007864 <sd_ini+0x210>)
 8007660:	f004 fe62 	bl	800c328 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8007664:	4b80      	ldr	r3, [pc, #512]	; (8007868 <sd_ini+0x214>)
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 800766a:	4b80      	ldr	r3, [pc, #512]	; (800786c <sd_ini+0x218>)
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8007670:	4b7e      	ldr	r3, [pc, #504]	; (800786c <sd_ini+0x218>)
 8007672:	2238      	movs	r2, #56	; 0x38
 8007674:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8007676:	487d      	ldr	r0, [pc, #500]	; (800786c <sd_ini+0x218>)
 8007678:	f005 fe65 	bl	800d346 <HAL_SPI_Init>
	SS_SD_DESELECT();
 800767c:	2201      	movs	r2, #1
 800767e:	2140      	movs	r1, #64	; 0x40
 8007680:	487b      	ldr	r0, [pc, #492]	; (8007870 <sd_ini+0x21c>)
 8007682:	f004 fe51 	bl	800c328 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
 800768a:	e004      	b.n	8007696 <sd_ini+0x42>
		SPI_Release();
 800768c:	f7ff ff70 	bl	8007570 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	3301      	adds	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	2b09      	cmp	r3, #9
 800769a:	d9f7      	bls.n	800768c <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 800769c:	4a73      	ldr	r2, [pc, #460]	; (800786c <sd_ini+0x218>)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 80076a2:	4872      	ldr	r0, [pc, #456]	; (800786c <sd_ini+0x218>)
 80076a4:	f005 fe4f 	bl	800d346 <HAL_SPI_Init>
	SS_SD_SELECT();
 80076a8:	2200      	movs	r2, #0
 80076aa:	2140      	movs	r1, #64	; 0x40
 80076ac:	4870      	ldr	r0, [pc, #448]	; (8007870 <sd_ini+0x21c>)
 80076ae:	f004 fe3b 	bl	800c328 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80076b2:	2100      	movs	r1, #0
 80076b4:	2040      	movs	r0, #64	; 0x40
 80076b6:	f7ff ff63 	bl	8007580 <SD_cmd>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b01      	cmp	r3, #1
 80076be:	f040 80be 	bne.w	800783e <sd_ini+0x1ea>
	{
		SPI_Release();
 80076c2:	f7ff ff55 	bl	8007570 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 80076c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076ca:	2048      	movs	r0, #72	; 0x48
 80076cc:	f7ff ff58 	bl	8007580 <SD_cmd>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d17b      	bne.n	80077ce <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e00c      	b.n	80076f6 <sd_ini+0xa2>
 80076dc:	7bfc      	ldrb	r4, [r7, #15]
 80076de:	f7ff ff3a 	bl	8007556 <SPI_ReceiveByte>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	f107 0310 	add.w	r3, r7, #16
 80076ea:	4423      	add	r3, r4
 80076ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	3301      	adds	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d9ef      	bls.n	80076dc <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 80076fc:	793b      	ldrb	r3, [r7, #4]
 80076fe:	4619      	mov	r1, r3
 8007700:	797b      	ldrb	r3, [r7, #5]
 8007702:	4618      	mov	r0, r3
 8007704:	79bb      	ldrb	r3, [r7, #6]
 8007706:	79fa      	ldrb	r2, [r7, #7]
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	460a      	mov	r2, r1
 8007710:	4958      	ldr	r1, [pc, #352]	; (8007874 <sd_ini+0x220>)
 8007712:	4859      	ldr	r0, [pc, #356]	; (8007878 <sd_ini+0x224>)
 8007714:	f014 fd14 	bl	801c140 <siprintf>
			SEND_str(str1);
 8007718:	4857      	ldr	r0, [pc, #348]	; (8007878 <sd_ini+0x224>)
 800771a:	f7fb fb27 	bl	8002d6c <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800771e:	79bb      	ldrb	r3, [r7, #6]
 8007720:	2b01      	cmp	r3, #1
 8007722:	f040 808e 	bne.w	8007842 <sd_ini+0x1ee>
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	2baa      	cmp	r3, #170	; 0xaa
 800772a:	f040 808a 	bne.w	8007842 <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 800772e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8007732:	81bb      	strh	r3, [r7, #12]
 8007734:	e005      	b.n	8007742 <sd_ini+0xee>
 8007736:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	81bb      	strh	r3, [r7, #12]
 8007742:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <sd_ini+0x106>
 800774a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800774e:	20e9      	movs	r0, #233	; 0xe9
 8007750:	f7ff ff16 	bl	8007580 <SD_cmd>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1ed      	bne.n	8007736 <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 800775a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d06f      	beq.n	8007842 <sd_ini+0x1ee>
 8007762:	2100      	movs	r1, #0
 8007764:	207a      	movs	r0, #122	; 0x7a
 8007766:	f7ff ff0b 	bl	8007580 <SD_cmd>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d168      	bne.n	8007842 <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	e00c      	b.n	8007790 <sd_ini+0x13c>
 8007776:	7bfc      	ldrb	r4, [r7, #15]
 8007778:	f7ff feed 	bl	8007556 <SPI_ReceiveByte>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	f107 0310 	add.w	r3, r7, #16
 8007784:	4423      	add	r3, r4
 8007786:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	3301      	adds	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b03      	cmp	r3, #3
 8007794:	d9ef      	bls.n	8007776 <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8007796:	793b      	ldrb	r3, [r7, #4]
 8007798:	4619      	mov	r1, r3
 800779a:	797b      	ldrb	r3, [r7, #5]
 800779c:	4618      	mov	r0, r3
 800779e:	79bb      	ldrb	r3, [r7, #6]
 80077a0:	79fa      	ldrb	r2, [r7, #7]
 80077a2:	9201      	str	r2, [sp, #4]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	4603      	mov	r3, r0
 80077a8:	460a      	mov	r2, r1
 80077aa:	4932      	ldr	r1, [pc, #200]	; (8007874 <sd_ini+0x220>)
 80077ac:	4832      	ldr	r0, [pc, #200]	; (8007878 <sd_ini+0x224>)
 80077ae:	f014 fcc7 	bl	801c140 <siprintf>
				SEND_str(str1);
 80077b2:	4831      	ldr	r0, [pc, #196]	; (8007878 <sd_ini+0x224>)
 80077b4:	f7fb fada 	bl	8002d6c <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80077b8:	793b      	ldrb	r3, [r7, #4]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <sd_ini+0x172>
 80077c2:	220c      	movs	r2, #12
 80077c4:	e000      	b.n	80077c8 <sd_ini+0x174>
 80077c6:	2204      	movs	r2, #4
 80077c8:	4b27      	ldr	r3, [pc, #156]	; (8007868 <sd_ini+0x214>)
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e039      	b.n	8007842 <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 80077ce:	2100      	movs	r1, #0
 80077d0:	20e9      	movs	r0, #233	; 0xe9
 80077d2:	f7ff fed5 	bl	8007580 <SD_cmd>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d805      	bhi.n	80077e8 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 80077dc:	4b22      	ldr	r3, [pc, #136]	; (8007868 <sd_ini+0x214>)
 80077de:	2202      	movs	r2, #2
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	23e9      	movs	r3, #233	; 0xe9
 80077e4:	73bb      	strb	r3, [r7, #14]
 80077e6:	e004      	b.n	80077f2 <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 80077e8:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <sd_ini+0x214>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	2341      	movs	r3, #65	; 0x41
 80077f0:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 80077f2:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80077f6:	81bb      	strh	r3, [r7, #12]
 80077f8:	e005      	b.n	8007806 <sd_ini+0x1b2>
 80077fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29b      	uxth	r3, r3
 8007804:	81bb      	strh	r3, [r7, #12]
 8007806:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <sd_ini+0x1ca>
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff feb4 	bl	8007580 <SD_cmd>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1ed      	bne.n	80077fa <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 800781e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <sd_ini+0x1e2>
 8007826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800782a:	2050      	movs	r0, #80	; 0x50
 800782c:	f7ff fea8 	bl	8007580 <SD_cmd>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <sd_ini+0x1ee>
				sdinfo.type = 0;
 8007836:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <sd_ini+0x214>)
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e001      	b.n	8007842 <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 800783e:	2301      	movs	r3, #1
 8007840:	e00b      	b.n	800785a <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <sd_ini+0x214>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	490c      	ldr	r1, [pc, #48]	; (800787c <sd_ini+0x228>)
 800784c:	480a      	ldr	r0, [pc, #40]	; (8007878 <sd_ini+0x224>)
 800784e:	f014 fc77 	bl	801c140 <siprintf>
	SEND_str(str1);
 8007852:	4809      	ldr	r0, [pc, #36]	; (8007878 <sd_ini+0x224>)
 8007854:	f7fb fa8a 	bl	8002d6c <SEND_str>
	return 0;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
 8007862:	bf00      	nop
 8007864:	40020000 	.word	0x40020000
 8007868:	20001ff4 	.word	0x20001ff4
 800786c:	20001964 	.word	0x20001964
 8007870:	40020400 	.word	0x40020400
 8007874:	080213a4 	.word	0x080213a4
 8007878:	20000fa0 	.word	0x20000fa0
 800787c:	080213c8 	.word	0x080213c8

08007880 <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <FCLK_SLOW+0x28>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8007892:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 8007894:	4a04      	ldr	r2, [pc, #16]	; (80078a8 <FCLK_SLOW+0x28>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6013      	str	r3, [r2, #0]
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40013000 	.word	0x40013000

080078ac <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <FCLK_FAST+0x2c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80078be:	f043 0310 	orr.w	r3, r3, #16
 80078c2:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <FCLK_FAST+0x2c>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6013      	str	r3, [r2, #0]
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40013000 	.word	0x40013000

080078dc <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 80078e6:	bf00      	nop
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <xmit_spi+0x40>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f9      	beq.n	80078e8 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 80078f4:	4a09      	ldr	r2, [pc, #36]	; (800791c <xmit_spi+0x40>)
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 80078fa:	bf00      	nop
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <xmit_spi+0x40>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f9      	beq.n	80078fc <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <xmit_spi+0x40>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	b2db      	uxtb	r3, r3
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40013000 	.word	0x40013000

08007920 <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 8007924:	20ff      	movs	r0, #255	; 0xff
 8007926:	f7ff ffd9 	bl	80078dc <xmit_spi>
 800792a:	4603      	mov	r3, r0
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}

08007930 <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <wait_ready+0x34>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 800793e:	f7ff ffef 	bl	8007920 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 8007942:	f7ff ffed 	bl	8007920 <rcvr_spi>
 8007946:	4603      	mov	r3, r0
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d101      	bne.n	8007950 <wait_ready+0x20>
 800794c:	2301      	movs	r3, #1
 800794e:	e004      	b.n	800795a <wait_ready+0x2a>
	while (Timer2);
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <wait_ready+0x34>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f4      	bne.n	8007942 <wait_ready+0x12>

	return 0;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000fe4 	.word	0x20000fe4

08007968 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	CS_HIGH();
 800796c:	2201      	movs	r2, #1
 800796e:	2140      	movs	r1, #64	; 0x40
 8007970:	4803      	ldr	r0, [pc, #12]	; (8007980 <deselect+0x18>)
 8007972:	f004 fcd9 	bl	800c328 <HAL_GPIO_WritePin>
	rcvr_spi();
 8007976:	f7ff ffd3 	bl	8007920 <rcvr_spi>
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40020400 	.word	0x40020400

08007984 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
	CS_LOW();
 8007988:	2200      	movs	r2, #0
 800798a:	2140      	movs	r1, #64	; 0x40
 800798c:	4807      	ldr	r0, [pc, #28]	; (80079ac <selecting+0x28>)
 800798e:	f004 fccb 	bl	800c328 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 8007992:	2032      	movs	r0, #50	; 0x32
 8007994:	f7ff ffcc 	bl	8007930 <wait_ready>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <selecting+0x22>
		deselect();
 800799e:	f7ff ffe3 	bl	8007968 <deselect>
		return 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <selecting+0x24>
	}
	return 1;
 80079a6:	2301      	movs	r3, #1
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40020400 	.word	0x40020400

080079b0 <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80079b4:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <power_status+0x14>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000fdc 	.word	0x20000fdc

080079c8 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 80079ce:	2201      	movs	r2, #1
 80079d0:	2140      	movs	r1, #64	; 0x40
 80079d2:	480b      	ldr	r0, [pc, #44]	; (8007a00 <power_on+0x38>)
 80079d4:	f004 fca8 	bl	800c328 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 80079d8:	2300      	movs	r3, #0
 80079da:	71fb      	strb	r3, [r7, #7]
 80079dc:	e005      	b.n	80079ea <power_on+0x22>
		xmit_spi(0xFF);
 80079de:	20ff      	movs	r0, #255	; 0xff
 80079e0:	f7ff ff7c 	bl	80078dc <xmit_spi>
	for (i = 0; i < 10; i++)
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	3301      	adds	r3, #1
 80079e8:	71fb      	strb	r3, [r7, #7]
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	2b09      	cmp	r3, #9
 80079ee:	d9f6      	bls.n	80079de <power_on+0x16>

	PowerFlag = 1;
 80079f0:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <power_on+0x3c>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]

}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40020400 	.word	0x40020400
 8007a04:	20000fdc 	.word	0x20000fdc

08007a08 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8007a0c:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <power_off+0x14>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000fdc 	.word	0x20000fdc

08007a20 <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8007a2a:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <rcvr_datablock+0x90>)
 8007a2c:	2214      	movs	r2, #20
 8007a2e:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 8007a30:	f7ff ff76 	bl	8007920 <rcvr_spi>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d103      	bne.n	8007a46 <rcvr_datablock+0x26>
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	; (8007ab0 <rcvr_datablock+0x90>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f4      	bne.n	8007a30 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2bfe      	cmp	r3, #254	; 0xfe
 8007a4a:	d001      	beq.n	8007a50 <rcvr_datablock+0x30>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e02a      	b.n	8007aa6 <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8007a50:	687c      	ldr	r4, [r7, #4]
 8007a52:	1c63      	adds	r3, r4, #1
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	20ff      	movs	r0, #255	; 0xff
 8007a58:	f7ff ff40 	bl	80078dc <xmit_spi>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a60:	687c      	ldr	r4, [r7, #4]
 8007a62:	1c63      	adds	r3, r4, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	20ff      	movs	r0, #255	; 0xff
 8007a68:	f7ff ff38 	bl	80078dc <xmit_spi>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a70:	687c      	ldr	r4, [r7, #4]
 8007a72:	1c63      	adds	r3, r4, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	20ff      	movs	r0, #255	; 0xff
 8007a78:	f7ff ff30 	bl	80078dc <xmit_spi>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007a80:	687c      	ldr	r4, [r7, #4]
 8007a82:	1c63      	adds	r3, r4, #1
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	20ff      	movs	r0, #255	; 0xff
 8007a88:	f7ff ff28 	bl	80078dc <xmit_spi>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	3b04      	subs	r3, #4
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1d9      	bne.n	8007a50 <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 8007a9c:	f7ff ff40 	bl	8007920 <rcvr_spi>
	rcvr_spi();
 8007aa0:	f7ff ff3e 	bl	8007920 <rcvr_spi>

	return 1;						/* Return with success */
 8007aa4:	2301      	movs	r3, #1
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd90      	pop	{r4, r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000fe0 	.word	0x20000fe0

08007ab4 <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 8007ac0:	2032      	movs	r0, #50	; 0x32
 8007ac2:	f7ff ff35 	bl	8007930 <wait_ready>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <xmit_datablock+0x1c>
 8007acc:	2300      	movs	r3, #0
 8007ace:	e02e      	b.n	8007b2e <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff ff02 	bl	80078dc <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	2bfd      	cmp	r3, #253	; 0xfd
 8007adc:	d026      	beq.n	8007b2c <xmit_datablock+0x78>
		wc = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fef6 	bl	80078dc <xmit_spi>
			xmit_spi(*buff++);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff feef 	bl	80078dc <xmit_spi>
		} while (--wc);
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1eb      	bne.n	8007ae2 <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 8007b0a:	20ff      	movs	r0, #255	; 0xff
 8007b0c:	f7ff fee6 	bl	80078dc <xmit_spi>
		xmit_spi(0xFF);
 8007b10:	20ff      	movs	r0, #255	; 0xff
 8007b12:	f7ff fee3 	bl	80078dc <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 8007b16:	f7ff ff03 	bl	8007920 <rcvr_spi>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	2b05      	cmp	r3, #5
 8007b26:	d001      	beq.n	8007b2c <xmit_datablock+0x78>
			return 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e000      	b.n	8007b2e <xmit_datablock+0x7a>
	}

	return 1;
 8007b2c:	2301      	movs	r3, #1
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	6039      	str	r1, [r7, #0]
 8007b40:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 8007b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da0e      	bge.n	8007b68 <send_cmd+0x32>
		cmd &= 0x7F;
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007b52:	2100      	movs	r1, #0
 8007b54:	2037      	movs	r0, #55	; 0x37
 8007b56:	f7ff ffee 	bl	8007b36 <send_cmd>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d901      	bls.n	8007b68 <send_cmd+0x32>
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	e04c      	b.n	8007c02 <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8007b68:	f7ff fefe 	bl	8007968 <deselect>
	if (!selecting()) return 0xFF;
 8007b6c:	f7ff ff0a 	bl	8007984 <selecting>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <send_cmd+0x44>
 8007b76:	23ff      	movs	r3, #255	; 0xff
 8007b78:	e043      	b.n	8007c02 <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff feaa 	bl	80078dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	0e1b      	lsrs	r3, r3, #24
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fea4 	bl	80078dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	0c1b      	lsrs	r3, r3, #16
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fe9e 	bl	80078dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fe98 	bl	80078dc <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fe93 	bl	80078dc <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <send_cmd+0x8e>
 8007bc0:	2395      	movs	r3, #149	; 0x95
 8007bc2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d101      	bne.n	8007bce <send_cmd+0x98>
 8007bca:	2387      	movs	r3, #135	; 0x87
 8007bcc:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fe83 	bl	80078dc <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d101      	bne.n	8007be0 <send_cmd+0xaa>
 8007bdc:	f7ff fea0 	bl	8007920 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 8007be0:	230a      	movs	r3, #10
 8007be2:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8007be4:	f7ff fe9c 	bl	8007920 <rcvr_spi>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8007bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da05      	bge.n	8007c00 <send_cmd+0xca>
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f1      	bne.n	8007be4 <send_cmd+0xae>

	return res;			/* Return with the response value */
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <disk_initialize+0x14>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0c9      	b.n	8007db4 <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8007c20:	4b66      	ldr	r3, [pc, #408]	; (8007dbc <disk_initialize+0x1b0>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <disk_initialize+0x2a>
 8007c2e:	4b63      	ldr	r3, [pc, #396]	; (8007dbc <disk_initialize+0x1b0>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	e0be      	b.n	8007db4 <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 8007c36:	2201      	movs	r2, #1
 8007c38:	2140      	movs	r1, #64	; 0x40
 8007c3a:	4861      	ldr	r0, [pc, #388]	; (8007dc0 <disk_initialize+0x1b4>)
 8007c3c:	f004 fb74 	bl	800c328 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 8007c40:	f7ff fec2 	bl	80079c8 <power_on>
	FCLK_SLOW();
 8007c44:	f7ff fe1c 	bl	8007880 <FCLK_SLOW>
	CS_LOW();
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2140      	movs	r1, #64	; 0x40
 8007c4c:	485c      	ldr	r0, [pc, #368]	; (8007dc0 <disk_initialize+0x1b4>)
 8007c4e:	f004 fb6b 	bl	800c328 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 8007c52:	230a      	movs	r3, #10
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e004      	b.n	8007c62 <disk_initialize+0x56>
 8007c58:	f7ff fe62 	bl	8007920 <rcvr_spi>
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f7      	bne.n	8007c58 <disk_initialize+0x4c>

	ty = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f7ff ff61 	bl	8007b36 <send_cmd>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f040 8084 	bne.w	8007d84 <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 8007c7c:	4b51      	ldr	r3, [pc, #324]	; (8007dc4 <disk_initialize+0x1b8>)
 8007c7e:	2264      	movs	r2, #100	; 0x64
 8007c80:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007c82:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c86:	2008      	movs	r0, #8
 8007c88:	f7ff ff55 	bl	8007b36 <send_cmd>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d14d      	bne.n	8007d2e <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	e00c      	b.n	8007cb2 <disk_initialize+0xa6>
 8007c98:	7bfc      	ldrb	r4, [r7, #15]
 8007c9a:	f7ff fe41 	bl	8007920 <rcvr_spi>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f107 0310 	add.w	r3, r7, #16
 8007ca6:	4423      	add	r3, r4
 8007ca8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d9ef      	bls.n	8007c98 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8007cb8:	7abb      	ldrb	r3, [r7, #10]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d162      	bne.n	8007d84 <disk_initialize+0x178>
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
 8007cc0:	2baa      	cmp	r3, #170	; 0xaa
 8007cc2:	d15f      	bne.n	8007d84 <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8007cc4:	bf00      	nop
 8007cc6:	4b3f      	ldr	r3, [pc, #252]	; (8007dc4 <disk_initialize+0x1b8>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <disk_initialize+0xd2>
 8007cce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cd2:	20a9      	movs	r0, #169	; 0xa9
 8007cd4:	f7ff ff2f 	bl	8007b36 <send_cmd>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f3      	bne.n	8007cc6 <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007cde:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <disk_initialize+0x1b8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d04e      	beq.n	8007d84 <disk_initialize+0x178>
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	203a      	movs	r0, #58	; 0x3a
 8007cea:	f7ff ff24 	bl	8007b36 <send_cmd>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d147      	bne.n	8007d84 <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e00c      	b.n	8007d14 <disk_initialize+0x108>
 8007cfa:	7bfc      	ldrb	r4, [r7, #15]
 8007cfc:	f7ff fe10 	bl	8007920 <rcvr_spi>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	f107 0310 	add.w	r3, r7, #16
 8007d08:	4423      	add	r3, r4
 8007d0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3301      	adds	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d9ef      	bls.n	8007cfa <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8007d1a:	7a3b      	ldrb	r3, [r7, #8]
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <disk_initialize+0x11c>
 8007d24:	230c      	movs	r3, #12
 8007d26:	e000      	b.n	8007d2a <disk_initialize+0x11e>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	737b      	strb	r3, [r7, #13]
 8007d2c:	e02a      	b.n	8007d84 <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8007d2e:	2100      	movs	r1, #0
 8007d30:	20a9      	movs	r0, #169	; 0xa9
 8007d32:	f7ff ff00 	bl	8007b36 <send_cmd>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d804      	bhi.n	8007d46 <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	737b      	strb	r3, [r7, #13]
 8007d40:	23a9      	movs	r3, #169	; 0xa9
 8007d42:	73bb      	strb	r3, [r7, #14]
 8007d44:	e003      	b.n	8007d4e <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8007d46:	2301      	movs	r3, #1
 8007d48:	737b      	strb	r3, [r7, #13]
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 8007d4e:	bf00      	nop
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <disk_initialize+0x1b8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <disk_initialize+0x15c>
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff feea 	bl	8007b36 <send_cmd>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f3      	bne.n	8007d50 <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8007d68:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <disk_initialize+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <disk_initialize+0x174>
 8007d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d74:	2010      	movs	r0, #16
 8007d76:	f7ff fede 	bl	8007b36 <send_cmd>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <disk_initialize+0x178>
				ty = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 8007d84:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <disk_initialize+0x1bc>)
 8007d86:	7b7b      	ldrb	r3, [r7, #13]
 8007d88:	7013      	strb	r3, [r2, #0]
	deselect();
 8007d8a:	f7ff fded 	bl	8007968 <deselect>

	if (ty) {						/* Initialization succeded */
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 8007d94:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <disk_initialize+0x1b0>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <disk_initialize+0x1b0>)
 8007da2:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 8007da4:	f7ff fd82 	bl	80078ac <FCLK_FAST>
 8007da8:	e001      	b.n	8007dae <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 8007daa:	f7ff fe2d 	bl	8007a08 <power_off>
	}

	return Stat;
 8007dae:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <disk_initialize+0x1b0>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b2db      	uxtb	r3, r3
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd90      	pop	{r4, r7, pc}
 8007dbc:	2000000c 	.word	0x2000000c
 8007dc0:	40020400 	.word	0x40020400
 8007dc4:	20000fe0 	.word	0x20000fe0
 8007dc8:	20000fe8 	.word	0x20000fe8

08007dcc <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <disk_status+0x14>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e002      	b.n	8007de6 <disk_status+0x1a>
	return Stat;
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <disk_status+0x28>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	2000000c 	.word	0x2000000c

08007df8 <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	461a      	mov	r2, r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <disk_read+0x20>
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <disk_read+0x24>
 8007e18:	2304      	movs	r3, #4
 8007e1a:	e04d      	b.n	8007eb8 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e1c:	4b28      	ldr	r3, [pc, #160]	; (8007ec0 <disk_read+0xc8>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <disk_read+0x36>
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e044      	b.n	8007eb8 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8007e2e:	4b25      	ldr	r3, [pc, #148]	; (8007ec4 <disk_read+0xcc>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <disk_read+0x48>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	025b      	lsls	r3, r3, #9
 8007e3e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d111      	bne.n	8007e6a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	2011      	movs	r0, #17
 8007e4a:	f7ff fe74 	bl	8007b36 <send_cmd>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d129      	bne.n	8007ea8 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8007e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e58:	68b8      	ldr	r0, [r7, #8]
 8007e5a:	f7ff fde1 	bl	8007a20 <rcvr_datablock>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d021      	beq.n	8007ea8 <disk_read+0xb0>
			count = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]
 8007e68:	e01e      	b.n	8007ea8 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	2012      	movs	r0, #18
 8007e6e:	f7ff fe62 	bl	8007b36 <send_cmd>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d117      	bne.n	8007ea8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e7c:	68b8      	ldr	r0, [r7, #8]
 8007e7e:	f7ff fdcf 	bl	8007a20 <rcvr_datablock>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <disk_read+0xa6>
				buff += 512;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007e8e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	73bb      	strb	r3, [r7, #14]
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ed      	bne.n	8007e78 <disk_read+0x80>
 8007e9c:	e000      	b.n	8007ea0 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8007e9e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	200c      	movs	r0, #12
 8007ea4:	f7ff fe47 	bl	8007b36 <send_cmd>
		}
	}
	deselect();
 8007ea8:	f7ff fd5e 	bl	8007968 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bf14      	ite	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	2300      	moveq	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	2000000c 	.word	0x2000000c
 8007ec4:	20000fe8 	.word	0x20000fe8

08007ec8 <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <disk_write+0x20>
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <disk_write+0x24>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	e064      	b.n	8007fb6 <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007eec:	4b34      	ldr	r3, [pc, #208]	; (8007fc0 <disk_write+0xf8>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <disk_write+0x36>
 8007efa:	2303      	movs	r3, #3
 8007efc:	e05b      	b.n	8007fb6 <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8007efe:	4b30      	ldr	r3, [pc, #192]	; (8007fc0 <disk_write+0xf8>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <disk_write+0x48>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e052      	b.n	8007fb6 <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8007f10:	4b2c      	ldr	r3, [pc, #176]	; (8007fc4 <disk_write+0xfc>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <disk_write+0x5a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	025b      	lsls	r3, r3, #9
 8007f20:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d110      	bne.n	8007f4a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	2018      	movs	r0, #24
 8007f2c:	f7ff fe03 	bl	8007b36 <send_cmd>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d137      	bne.n	8007fa6 <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 8007f36:	21fe      	movs	r1, #254	; 0xfe
 8007f38:	68b8      	ldr	r0, [r7, #8]
 8007f3a:	f7ff fdbb 	bl	8007ab4 <xmit_datablock>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d030      	beq.n	8007fa6 <disk_write+0xde>
			count = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]
 8007f48:	e02d      	b.n	8007fa6 <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <disk_write+0xfc>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f003 0306 	and.w	r3, r3, #6
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <disk_write+0x98>
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	2097      	movs	r0, #151	; 0x97
 8007f5c:	f7ff fdeb 	bl	8007b36 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	2019      	movs	r0, #25
 8007f64:	f7ff fde7 	bl	8007b36 <send_cmd>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d11b      	bne.n	8007fa6 <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007f6e:	21fc      	movs	r1, #252	; 0xfc
 8007f70:	68b8      	ldr	r0, [r7, #8]
 8007f72:	f7ff fd9f 	bl	8007ab4 <xmit_datablock>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <disk_write+0xca>
				buff += 512;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007f82:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	73bb      	strb	r3, [r7, #14]
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ee      	bne.n	8007f6e <disk_write+0xa6>
 8007f90:	e000      	b.n	8007f94 <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007f92:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8007f94:	21fd      	movs	r1, #253	; 0xfd
 8007f96:	2000      	movs	r0, #0
 8007f98:	f7ff fd8c 	bl	8007ab4 <xmit_datablock>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <disk_write+0xde>
				count = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 8007fa6:	f7ff fcdf 	bl	8007968 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bf14      	ite	ne
 8007fb0:	2301      	movne	r3, #1
 8007fb2:	2300      	moveq	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	2000000c 	.word	0x2000000c
 8007fc4:	20000fe8 	.word	0x20000fe8

08007fc8 <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b089      	sub	sp, #36	; 0x24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	603a      	str	r2, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <disk_ioctl+0x1e>
 8007fe2:	2304      	movs	r3, #4
 8007fe4:	e1f6      	b.n	80083d4 <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007fe6:	4b97      	ldr	r3, [pc, #604]	; (8008244 <disk_ioctl+0x27c>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <disk_ioctl+0x30>
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e1ed      	b.n	80083d4 <disk_ioctl+0x40c>

	res = RES_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 8007ffc:	79bb      	ldrb	r3, [r7, #6]
 8007ffe:	2b0e      	cmp	r3, #14
 8008000:	f200 81cd 	bhi.w	800839e <disk_ioctl+0x3d6>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <disk_ioctl+0x44>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	0800807d 	.word	0x0800807d
 8008010:	08008093 	.word	0x08008093
 8008014:	08008149 	.word	0x08008149
 8008018:	08008157 	.word	0x08008157
 800801c:	08008251 	.word	0x08008251
 8008020:	08008049 	.word	0x08008049
 8008024:	0800839f 	.word	0x0800839f
 8008028:	0800839f 	.word	0x0800839f
 800802c:	0800839f 	.word	0x0800839f
 8008030:	0800839f 	.word	0x0800839f
 8008034:	080082f3 	.word	0x080082f3
 8008038:	08008301 	.word	0x08008301
 800803c:	08008323 	.word	0x08008323
 8008040:	08008345 	.word	0x08008345
 8008044:	08008379 	.word	0x08008379

	case CTRL_POWER :
		switch (ptr[0]) {
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <disk_ioctl+0x8e>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d005      	beq.n	8008060 <disk_ioctl+0x98>
 8008054:	e00e      	b.n	8008074 <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 8008056:	f7ff fcd7 	bl	8007a08 <power_off>
			res = RES_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	77fb      	strb	r3, [r7, #31]
			break;
 800805e:	e00c      	b.n	800807a <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 8008060:	f7ff fca6 	bl	80079b0 <power_status>
 8008064:	4602      	mov	r2, r0
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	77fb      	strb	r3, [r7, #31]
			break;
 8008072:	e002      	b.n	800807a <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 8008074:	2304      	movs	r3, #4
 8008076:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8008078:	e1a9      	b.n	80083ce <disk_ioctl+0x406>
 800807a:	e1a8      	b.n	80083ce <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 800807c:	f7ff fc82 	bl	8007984 <selecting>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 818e 	beq.w	80083a4 <disk_ioctl+0x3dc>
			deselect();
 8008088:	f7ff fc6e 	bl	8007968 <deselect>
			res = RES_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8008090:	e188      	b.n	80083a4 <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008092:	2100      	movs	r1, #0
 8008094:	2009      	movs	r0, #9
 8008096:	f7ff fd4e 	bl	8007b36 <send_cmd>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8183 	bne.w	80083a8 <disk_ioctl+0x3e0>
 80080a2:	2110      	movs	r1, #16
 80080a4:	4868      	ldr	r0, [pc, #416]	; (8008248 <disk_ioctl+0x280>)
 80080a6:	f7ff fcbb 	bl	8007a20 <rcvr_datablock>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 817b 	beq.w	80083a8 <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80080b2:	4b65      	ldr	r3, [pc, #404]	; (8008248 <disk_ioctl+0x280>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	099b      	lsrs	r3, r3, #6
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d114      	bne.n	80080e8 <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 80080be:	4b62      	ldr	r3, [pc, #392]	; (8008248 <disk_ioctl+0x280>)
 80080c0:	7a5b      	ldrb	r3, [r3, #9]
 80080c2:	461a      	mov	r2, r3
 80080c4:	4b60      	ldr	r3, [pc, #384]	; (8008248 <disk_ioctl+0x280>)
 80080c6:	7a1b      	ldrb	r3, [r3, #8]
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	4413      	add	r3, r2
 80080cc:	461a      	mov	r2, r3
 80080ce:	4b5e      	ldr	r3, [pc, #376]	; (8008248 <disk_ioctl+0x280>)
 80080d0:	79db      	ldrb	r3, [r3, #7]
 80080d2:	041b      	lsls	r3, r3, #16
 80080d4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80080d8:	4413      	add	r3, r2
 80080da:	3301      	adds	r3, #1
 80080dc:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	029a      	lsls	r2, r3, #10
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e02c      	b.n	8008142 <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80080e8:	4b57      	ldr	r3, [pc, #348]	; (8008248 <disk_ioctl+0x280>)
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	4b55      	ldr	r3, [pc, #340]	; (8008248 <disk_ioctl+0x280>)
 80080f4:	7a9b      	ldrb	r3, [r3, #10]
 80080f6:	09db      	lsrs	r3, r3, #7
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4413      	add	r3, r2
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	4b52      	ldr	r3, [pc, #328]	; (8008248 <disk_ioctl+0x280>)
 8008100:	7a5b      	ldrb	r3, [r3, #9]
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	f003 0306 	and.w	r3, r3, #6
 800810a:	b2db      	uxtb	r3, r3
 800810c:	4413      	add	r3, r2
 800810e:	b2db      	uxtb	r3, r3
 8008110:	3302      	adds	r3, #2
 8008112:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8008114:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <disk_ioctl+0x280>)
 8008116:	7a1b      	ldrb	r3, [r3, #8]
 8008118:	099b      	lsrs	r3, r3, #6
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	4b4a      	ldr	r3, [pc, #296]	; (8008248 <disk_ioctl+0x280>)
 8008120:	79db      	ldrb	r3, [r3, #7]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	4b48      	ldr	r3, [pc, #288]	; (8008248 <disk_ioctl+0x280>)
 8008128:	799b      	ldrb	r3, [r3, #6]
 800812a:	029b      	lsls	r3, r3, #10
 800812c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008130:	4413      	add	r3, r2
 8008132:	3301      	adds	r3, #1
 8008134:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 8008136:	7fbb      	ldrb	r3, [r7, #30]
 8008138:	3b09      	subs	r3, #9
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	409a      	lsls	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8008146:	e12f      	b.n	80083a8 <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800814e:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	77fb      	strb	r3, [r7, #31]
		break;
 8008154:	e13b      	b.n	80083ce <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008156:	4b3d      	ldr	r3, [pc, #244]	; (800824c <disk_ioctl+0x284>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d029      	beq.n	80081b6 <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008162:	2100      	movs	r1, #0
 8008164:	208d      	movs	r0, #141	; 0x8d
 8008166:	f7ff fce6 	bl	8007b36 <send_cmd>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 811d 	bne.w	80083ac <disk_ioctl+0x3e4>
				rcvr_spi();
 8008172:	f7ff fbd5 	bl	8007920 <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008176:	2110      	movs	r1, #16
 8008178:	4833      	ldr	r0, [pc, #204]	; (8008248 <disk_ioctl+0x280>)
 800817a:	f7ff fc51 	bl	8007a20 <rcvr_datablock>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8113 	beq.w	80083ac <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8008186:	2330      	movs	r3, #48	; 0x30
 8008188:	77bb      	strb	r3, [r7, #30]
 800818a:	e004      	b.n	8008196 <disk_ioctl+0x1ce>
 800818c:	f7ff fbc8 	bl	8007920 <rcvr_spi>
 8008190:	7fbb      	ldrb	r3, [r7, #30]
 8008192:	3b01      	subs	r3, #1
 8008194:	77bb      	strb	r3, [r7, #30]
 8008196:	7fbb      	ldrb	r3, [r7, #30]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f7      	bne.n	800818c <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 800819c:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <disk_ioctl+0x280>)
 800819e:	7a9b      	ldrb	r3, [r3, #10]
 80081a0:	091b      	lsrs	r3, r3, #4
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	2310      	movs	r3, #16
 80081a8:	fa03 f202 	lsl.w	r2, r3, r2
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80081b4:	e0fa      	b.n	80083ac <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80081b6:	2100      	movs	r1, #0
 80081b8:	2009      	movs	r0, #9
 80081ba:	f7ff fcbc 	bl	8007b36 <send_cmd>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 80f3 	bne.w	80083ac <disk_ioctl+0x3e4>
 80081c6:	2110      	movs	r1, #16
 80081c8:	481f      	ldr	r0, [pc, #124]	; (8008248 <disk_ioctl+0x280>)
 80081ca:	f7ff fc29 	bl	8007a20 <rcvr_datablock>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80eb 	beq.w	80083ac <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80081d6:	4b1d      	ldr	r3, [pc, #116]	; (800824c <disk_ioctl+0x284>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d015      	beq.n	800820e <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80081e2:	4b19      	ldr	r3, [pc, #100]	; (8008248 <disk_ioctl+0x280>)
 80081e4:	7a9b      	ldrb	r3, [r3, #10]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80081ec:	4a16      	ldr	r2, [pc, #88]	; (8008248 <disk_ioctl+0x280>)
 80081ee:	7ad2      	ldrb	r2, [r2, #11]
 80081f0:	09d2      	lsrs	r2, r2, #7
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	4413      	add	r3, r2
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <disk_ioctl+0x280>)
 80081fa:	7b5b      	ldrb	r3, [r3, #13]
 80081fc:	099b      	lsrs	r3, r3, #6
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	461a      	mov	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	e016      	b.n	800823c <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800820e:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <disk_ioctl+0x280>)
 8008210:	7a9b      	ldrb	r3, [r3, #10]
 8008212:	109b      	asrs	r3, r3, #2
 8008214:	b29b      	uxth	r3, r3
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	3301      	adds	r3, #1
 800821c:	4a0a      	ldr	r2, [pc, #40]	; (8008248 <disk_ioctl+0x280>)
 800821e:	7ad2      	ldrb	r2, [r2, #11]
 8008220:	00d2      	lsls	r2, r2, #3
 8008222:	f002 0218 	and.w	r2, r2, #24
 8008226:	4908      	ldr	r1, [pc, #32]	; (8008248 <disk_ioctl+0x280>)
 8008228:	7ac9      	ldrb	r1, [r1, #11]
 800822a:	0949      	lsrs	r1, r1, #5
 800822c:	b2c9      	uxtb	r1, r1
 800822e:	440a      	add	r2, r1
 8008230:	3201      	adds	r2, #1
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	461a      	mov	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	77fb      	strb	r3, [r7, #31]
		break;
 8008240:	e0b4      	b.n	80083ac <disk_ioctl+0x3e4>
 8008242:	bf00      	nop
 8008244:	2000000c 	.word	0x2000000c
 8008248:	20001ff8 	.word	0x20001ff8
 800824c:	20000fe8 	.word	0x20000fe8

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008250:	4b62      	ldr	r3, [pc, #392]	; (80083dc <disk_ioctl+0x414>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f003 0306 	and.w	r3, r3, #6
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80a9 	beq.w	80083b0 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	4a5f      	ldr	r2, [pc, #380]	; (80083e0 <disk_ioctl+0x418>)
 8008262:	210b      	movs	r1, #11
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff feaf 	bl	8007fc8 <disk_ioctl>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 80a1 	bne.w	80083b4 <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008272:	4b5b      	ldr	r3, [pc, #364]	; (80083e0 <disk_ioctl+0x418>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	099b      	lsrs	r3, r3, #6
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <disk_ioctl+0x2c4>
 800827e:	4b58      	ldr	r3, [pc, #352]	; (80083e0 <disk_ioctl+0x418>)
 8008280:	7a9b      	ldrb	r3, [r3, #10]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8096 	beq.w	80083b8 <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 800829c:	4b4f      	ldr	r3, [pc, #316]	; (80083dc <disk_ioctl+0x414>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	025b      	lsls	r3, r3, #9
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	025b      	lsls	r3, r3, #9
 80082b2:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 80082b4:	6979      	ldr	r1, [r7, #20]
 80082b6:	2020      	movs	r0, #32
 80082b8:	f7ff fc3d 	bl	8007b36 <send_cmd>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d17c      	bne.n	80083bc <disk_ioctl+0x3f4>
 80082c2:	6939      	ldr	r1, [r7, #16]
 80082c4:	2021      	movs	r0, #33	; 0x21
 80082c6:	f7ff fc36 	bl	8007b36 <send_cmd>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d175      	bne.n	80083bc <disk_ioctl+0x3f4>
 80082d0:	2100      	movs	r1, #0
 80082d2:	2026      	movs	r0, #38	; 0x26
 80082d4:	f7ff fc2f 	bl	8007b36 <send_cmd>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d16e      	bne.n	80083bc <disk_ioctl+0x3f4>
 80082de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082e2:	f7ff fb25 	bl	8007930 <wait_ready>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d067      	beq.n	80083bc <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 80082ec:	2300      	movs	r3, #0
 80082ee:	77fb      	strb	r3, [r7, #31]
		break;
 80082f0:	e064      	b.n	80083bc <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 80082f2:	4b3a      	ldr	r3, [pc, #232]	; (80083dc <disk_ioctl+0x414>)
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	77fb      	strb	r3, [r7, #31]
		break;
 80082fe:	e066      	b.n	80083ce <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8008300:	2100      	movs	r1, #0
 8008302:	2009      	movs	r0, #9
 8008304:	f7ff fc17 	bl	8007b36 <send_cmd>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d158      	bne.n	80083c0 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 800830e:	2110      	movs	r1, #16
 8008310:	69b8      	ldr	r0, [r7, #24]
 8008312:	f7ff fb85 	bl	8007a20 <rcvr_datablock>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d051      	beq.n	80083c0 <disk_ioctl+0x3f8>
			res = RES_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	77fb      	strb	r3, [r7, #31]
		break;
 8008320:	e04e      	b.n	80083c0 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8008322:	2100      	movs	r1, #0
 8008324:	200a      	movs	r0, #10
 8008326:	f7ff fc06 	bl	8007b36 <send_cmd>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d149      	bne.n	80083c4 <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8008330:	2110      	movs	r1, #16
 8008332:	69b8      	ldr	r0, [r7, #24]
 8008334:	f7ff fb74 	bl	8007a20 <rcvr_datablock>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d042      	beq.n	80083c4 <disk_ioctl+0x3fc>
			res = RES_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	77fb      	strb	r3, [r7, #31]
		break;
 8008342:	e03f      	b.n	80083c4 <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8008344:	2100      	movs	r1, #0
 8008346:	203a      	movs	r0, #58	; 0x3a
 8008348:	f7ff fbf5 	bl	8007b36 <send_cmd>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d13a      	bne.n	80083c8 <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8008352:	2304      	movs	r3, #4
 8008354:	77bb      	strb	r3, [r7, #30]
 8008356:	e009      	b.n	800836c <disk_ioctl+0x3a4>
 8008358:	69bc      	ldr	r4, [r7, #24]
 800835a:	1c63      	adds	r3, r4, #1
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	f7ff fadf 	bl	8007920 <rcvr_spi>
 8008362:	4603      	mov	r3, r0
 8008364:	7023      	strb	r3, [r4, #0]
 8008366:	7fbb      	ldrb	r3, [r7, #30]
 8008368:	3b01      	subs	r3, #1
 800836a:	77bb      	strb	r3, [r7, #30]
 800836c:	7fbb      	ldrb	r3, [r7, #30]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f2      	bne.n	8008358 <disk_ioctl+0x390>
			res = RES_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8008376:	e027      	b.n	80083c8 <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8008378:	2100      	movs	r1, #0
 800837a:	208d      	movs	r0, #141	; 0x8d
 800837c:	f7ff fbdb 	bl	8007b36 <send_cmd>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d122      	bne.n	80083cc <disk_ioctl+0x404>
			rcvr_spi();
 8008386:	f7ff facb 	bl	8007920 <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 800838a:	2140      	movs	r1, #64	; 0x40
 800838c:	69b8      	ldr	r0, [r7, #24]
 800838e:	f7ff fb47 	bl	8007a20 <rcvr_datablock>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d019      	beq.n	80083cc <disk_ioctl+0x404>
				res = RES_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800839c:	e016      	b.n	80083cc <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 800839e:	2304      	movs	r3, #4
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e014      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083a4:	bf00      	nop
 80083a6:	e012      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083a8:	bf00      	nop
 80083aa:	e010      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083ac:	bf00      	nop
 80083ae:	e00e      	b.n	80083ce <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80083b0:	bf00      	nop
 80083b2:	e00c      	b.n	80083ce <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80083b4:	bf00      	nop
 80083b6:	e00a      	b.n	80083ce <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80083b8:	bf00      	nop
 80083ba:	e008      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083bc:	bf00      	nop
 80083be:	e006      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083c0:	bf00      	nop
 80083c2:	e004      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083c4:	bf00      	nop
 80083c6:	e002      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083c8:	bf00      	nop
 80083ca:	e000      	b.n	80083ce <disk_ioctl+0x406>
		break;
 80083cc:	bf00      	nop
	}

	deselect();
 80083ce:	f7ff facb 	bl	8007968 <deselect>

	return res;
 80083d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3724      	adds	r7, #36	; 0x24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	20000fe8 	.word	0x20000fe8
 80083e0:	20001ff8 	.word	0x20001ff8

080083e4 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 80083ea:	4618      	mov	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	3e216000 	.word	0x3e216000

080083f8 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d02f      	beq.n	800846a <clear_string+0x72>
	uint8_t i = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e022      	b.n	800845a <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d80b      	bhi.n	8008432 <clear_string+0x3a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b0a      	cmp	r3, #10
 8008420:	d003      	beq.n	800842a <clear_string+0x32>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b0d      	cmp	r3, #13
 8008428:	d103      	bne.n	8008432 <clear_string+0x3a>
		{
			i++;
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	3301      	adds	r3, #1
 800842e:	72fb      	strb	r3, [r7, #11]
			continue;
 8008430:	e010      	b.n	8008454 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b0a      	cmp	r3, #10
 8008438:	d003      	beq.n	8008442 <clear_string+0x4a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b0d      	cmp	r3, #13
 8008440:	d102      	bne.n	8008448 <clear_string+0x50>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	60fa      	str	r2, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3301      	adds	r3, #1
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1d8      	bne.n	8008414 <clear_string+0x1c>
	}

	*dst = 0;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e000      	b.n	800846c <clear_string+0x74>
	if(!src) return;
 800846a:	bf00      	nop
}
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 800847e:	2300      	movs	r3, #0
 8008480:	607b      	str	r3, [r7, #4]
 8008482:	e021      	b.n	80084c8 <ReWriteOCD+0x50>
		(Status_OCD[i]) ? (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], SET)) : (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], RESET));
 8008484:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <ReWriteOCD+0x60>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <ReWriteOCD+0x32>
 8008490:	4a12      	ldr	r2, [pc, #72]	; (80084dc <ReWriteOCD+0x64>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008498:	4a11      	ldr	r2, [pc, #68]	; (80084e0 <ReWriteOCD+0x68>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a0:	2201      	movs	r2, #1
 80084a2:	4619      	mov	r1, r3
 80084a4:	f003 ff40 	bl	800c328 <HAL_GPIO_WritePin>
 80084a8:	e00b      	b.n	80084c2 <ReWriteOCD+0x4a>
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <ReWriteOCD+0x64>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80084b2:	4a0b      	ldr	r2, [pc, #44]	; (80084e0 <ReWriteOCD+0x68>)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ba:	2200      	movs	r2, #0
 80084bc:	4619      	mov	r1, r3
 80084be:	f003 ff33 	bl	800c328 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3301      	adds	r3, #1
 80084c6:	607b      	str	r3, [r7, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	ddda      	ble.n	8008484 <ReWriteOCD+0xc>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000ffc 	.word	0x20000ffc
 80084dc:	20000030 	.word	0x20000030
 80084e0:	20000060 	.word	0x20000060

080084e4 <CheckReWriteDiDo>:
uint16_t OW_Pin[2] = {WR0_Pin, WR1_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	e0aa      	b.n	8008646 <CheckReWriteDiDo+0x162>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 80084f0:	4959      	ldr	r1, [pc, #356]	; (8008658 <CheckReWriteDiDo+0x174>)
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	4955      	ldr	r1, [pc, #340]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	440b      	add	r3, r1
 800850e:	3306      	adds	r3, #6
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	f003 fef0 	bl	800c2f8 <HAL_GPIO_ReadPin>
 8008518:	4603      	mov	r3, r0
 800851a:	4618      	mov	r0, r3
 800851c:	494e      	ldr	r1, [pc, #312]	; (8008658 <CheckReWriteDiDo+0x174>)
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3304      	adds	r3, #4
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	4298      	cmp	r0, r3
 8008530:	d02d      	beq.n	800858e <CheckReWriteDiDo+0xaa>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 8008532:	4949      	ldr	r1, [pc, #292]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	330c      	adds	r3, #12
 8008542:	7819      	ldrb	r1, [r3, #0]
 8008544:	4a45      	ldr	r2, [pc, #276]	; (800865c <CheckReWriteDiDo+0x178>)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	460a      	mov	r2, r1
 800854c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 800854e:	4942      	ldr	r1, [pc, #264]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	3308      	adds	r3, #8
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	493d      	ldr	r1, [pc, #244]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	330e      	adds	r3, #14
 8008570:	881c      	ldrh	r4, [r3, #0]
 8008572:	4939      	ldr	r1, [pc, #228]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	330c      	adds	r3, #12
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	4621      	mov	r1, r4
 8008588:	f003 fece 	bl	800c328 <HAL_GPIO_WritePin>
 800858c:	e058      	b.n	8008640 <CheckReWriteDiDo+0x15c>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 800858e:	4932      	ldr	r1, [pc, #200]	; (8008658 <CheckReWriteDiDo+0x174>)
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	492e      	ldr	r1, [pc, #184]	; (8008658 <CheckReWriteDiDo+0x174>)
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	3306      	adds	r3, #6
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	f003 fea1 	bl	800c2f8 <HAL_GPIO_ReadPin>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4618      	mov	r0, r3
 80085ba:	4927      	ldr	r1, [pc, #156]	; (8008658 <CheckReWriteDiDo+0x174>)
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3304      	adds	r3, #4
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	4298      	cmp	r0, r3
 80085ce:	d137      	bne.n	8008640 <CheckReWriteDiDo+0x15c>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 80085d0:	4921      	ldr	r1, [pc, #132]	; (8008658 <CheckReWriteDiDo+0x174>)
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	330c      	adds	r3, #12
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf0c      	ite	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	2300      	movne	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	4619      	mov	r1, r3
 80085ee:	4a1b      	ldr	r2, [pc, #108]	; (800865c <CheckReWriteDiDo+0x178>)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	460a      	mov	r2, r1
 80085f6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 80085f8:	4917      	ldr	r1, [pc, #92]	; (8008658 <CheckReWriteDiDo+0x174>)
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3308      	adds	r3, #8
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	4913      	ldr	r1, [pc, #76]	; (8008658 <CheckReWriteDiDo+0x174>)
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	330e      	adds	r3, #14
 800861a:	881c      	ldrh	r4, [r3, #0]
 800861c:	490e      	ldr	r1, [pc, #56]	; (8008658 <CheckReWriteDiDo+0x174>)
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	330c      	adds	r3, #12
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bf0c      	ite	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	2300      	movne	r3, #0
 8008636:	b2db      	uxtb	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	4621      	mov	r1, r4
 800863c:	f003 fe74 	bl	800c328 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3301      	adds	r3, #1
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b07      	cmp	r3, #7
 800864a:	f77f af51 	ble.w	80084f0 <CheckReWriteDiDo+0xc>
		}
	}
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop
 8008658:	200012c8 	.word	0x200012c8
 800865c:	20000ffc 	.word	0x20000ffc

08008660 <CheckReWriteAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteAiDo(void)
{
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	e09b      	b.n	80087a4 <CheckReWriteAiDo+0x144>
	{
		for(int j = 0; j < 8; j++)
 800866c:	2300      	movs	r3, #0
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	e091      	b.n	8008796 <CheckReWriteAiDo+0x136>
		{
			if(AiDo[i].OCD_Pin == OCD_Pin[j])
 8008672:	4950      	ldr	r1, [pc, #320]	; (80087b4 <CheckReWriteAiDo+0x154>)
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	440b      	add	r3, r1
 8008680:	331e      	adds	r3, #30
 8008682:	881a      	ldrh	r2, [r3, #0]
 8008684:	494c      	ldr	r1, [pc, #304]	; (80087b8 <CheckReWriteAiDo+0x158>)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800868c:	429a      	cmp	r2, r3
 800868e:	d17f      	bne.n	8008790 <CheckReWriteAiDo+0x130>
			{
				if((adcValue[i] >= AiDo[i].RANGE_LOW) && (AiDo[i].RANGE_HIGH >= adcValue[i]))
 8008690:	4a4a      	ldr	r2, [pc, #296]	; (80087bc <CheckReWriteAiDo+0x15c>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4413      	add	r3, r2
 8008698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800869c:	4c45      	ldr	r4, [pc, #276]	; (80087b4 <CheckReWriteAiDo+0x154>)
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4423      	add	r3, r4
 80086aa:	3308      	adds	r3, #8
 80086ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086b0:	461a      	mov	r2, r3
 80086b2:	4623      	mov	r3, r4
 80086b4:	f7f8 fa36 	bl	8000b24 <__aeabi_dcmpge>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d044      	beq.n	8008748 <CheckReWriteAiDo+0xe8>
 80086be:	493d      	ldr	r1, [pc, #244]	; (80087b4 <CheckReWriteAiDo+0x154>)
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	440b      	add	r3, r1
 80086cc:	3310      	adds	r3, #16
 80086ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086d2:	4a3a      	ldr	r2, [pc, #232]	; (80087bc <CheckReWriteAiDo+0x15c>)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086de:	461a      	mov	r2, r3
 80086e0:	4623      	mov	r3, r4
 80086e2:	f7f8 fa1f 	bl	8000b24 <__aeabi_dcmpge>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02d      	beq.n	8008748 <CheckReWriteAiDo+0xe8>
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 80086ec:	4931      	ldr	r1, [pc, #196]	; (80087b4 <CheckReWriteAiDo+0x154>)
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	440b      	add	r3, r1
 80086fa:	331c      	adds	r3, #28
 80086fc:	7819      	ldrb	r1, [r3, #0]
 80086fe:	4a30      	ldr	r2, [pc, #192]	; (80087c0 <CheckReWriteAiDo+0x160>)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	4413      	add	r3, r2
 8008704:	460a      	mov	r2, r1
 8008706:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, AiDo[i].VAR_OUT);
 8008708:	492a      	ldr	r1, [pc, #168]	; (80087b4 <CheckReWriteAiDo+0x154>)
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	440b      	add	r3, r1
 8008716:	3318      	adds	r3, #24
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	4926      	ldr	r1, [pc, #152]	; (80087b4 <CheckReWriteAiDo+0x154>)
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	440b      	add	r3, r1
 8008728:	331e      	adds	r3, #30
 800872a:	881c      	ldrh	r4, [r3, #0]
 800872c:	4921      	ldr	r1, [pc, #132]	; (80087b4 <CheckReWriteAiDo+0x154>)
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	440b      	add	r3, r1
 800873a:	331c      	adds	r3, #28
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	4621      	mov	r1, r4
 8008742:	f003 fdf1 	bl	800c328 <HAL_GPIO_WritePin>
 8008746:	e023      	b.n	8008790 <CheckReWriteAiDo+0x130>
				}
				else
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8008748:	491a      	ldr	r1, [pc, #104]	; (80087b4 <CheckReWriteAiDo+0x154>)
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	440b      	add	r3, r1
 8008756:	331c      	adds	r3, #28
 8008758:	7819      	ldrb	r1, [r3, #0]
 800875a:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <CheckReWriteAiDo+0x160>)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	4413      	add	r3, r2
 8008760:	460a      	mov	r2, r1
 8008762:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);	//!AiDo[i].VAR_OUT - вариант инверсии выхода по отношении ко входу
 8008764:	4913      	ldr	r1, [pc, #76]	; (80087b4 <CheckReWriteAiDo+0x154>)
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	440b      	add	r3, r1
 8008772:	3318      	adds	r3, #24
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	490f      	ldr	r1, [pc, #60]	; (80087b4 <CheckReWriteAiDo+0x154>)
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	331e      	adds	r3, #30
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	4619      	mov	r1, r3
 800878c:	f003 fdcc 	bl	800c328 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b07      	cmp	r3, #7
 800879a:	f77f af6a 	ble.w	8008672 <CheckReWriteAiDo+0x12>
	for(int i = 0; i < 4; i++)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3301      	adds	r3, #1
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f77f af60 	ble.w	800866c <CheckReWriteAiDo+0xc>
				}
			}
		}
	}
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd90      	pop	{r4, r7, pc}
 80087b4:	20001228 	.word	0x20001228
 80087b8:	20000060 	.word	0x20000060
 80087bc:	20000a98 	.word	0x20000a98
 80087c0:	20000ffc 	.word	0x20000ffc

080087c4 <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 80087c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 80087ca:	4b93      	ldr	r3, [pc, #588]	; (8008a18 <CheckReWriteTSiDo+0x254>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d012      	beq.n	80087f8 <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 80087d2:	4b91      	ldr	r3, [pc, #580]	; (8008a18 <CheckReWriteTSiDo+0x254>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80087d8:	2301      	movs	r3, #1
 80087da:	71fb      	strb	r3, [r7, #7]
 80087dc:	e007      	b.n	80087ee <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	4619      	mov	r1, r3
 80087e2:	2001      	movs	r0, #1
 80087e4:	f001 f8cc 	bl	8009980 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	3301      	adds	r3, #1
 80087ec:	71fb      	strb	r3, [r7, #7]
 80087ee:	4b8b      	ldr	r3, [pc, #556]	; (8008a1c <CheckReWriteTSiDo+0x258>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	79fa      	ldrb	r2, [r7, #7]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d9f2      	bls.n	80087de <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 80087f8:	4b89      	ldr	r3, [pc, #548]	; (8008a20 <CheckReWriteTSiDo+0x25c>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8106 	beq.w	8008a0e <CheckReWriteTSiDo+0x24a>
	{
		OneWire_Test_Flag_Read = false;
 8008802:	4b87      	ldr	r3, [pc, #540]	; (8008a20 <CheckReWriteTSiDo+0x25c>)
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8008808:	2301      	movs	r3, #1
 800880a:	71bb      	strb	r3, [r7, #6]
 800880c:	e0f9      	b.n	8008a02 <CheckReWriteTSiDo+0x23e>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 800880e:	2300      	movs	r3, #0
 8008810:	717b      	strb	r3, [r7, #5]
 8008812:	e0ef      	b.n	80089f4 <CheckReWriteTSiDo+0x230>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 8008814:	79bb      	ldrb	r3, [r7, #6]
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	4982      	ldr	r1, [pc, #520]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 800881a:	4613      	mov	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	332e      	adds	r3, #46	; 0x2e
 8008826:	881a      	ldrh	r2, [r3, #0]
 8008828:	797b      	ldrb	r3, [r7, #5]
 800882a:	497f      	ldr	r1, [pc, #508]	; (8008a28 <CheckReWriteTSiDo+0x264>)
 800882c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008830:	429a      	cmp	r2, r3
 8008832:	f040 80dc 	bne.w	80089ee <CheckReWriteTSiDo+0x22a>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 8008836:	79bb      	ldrb	r3, [r7, #6]
 8008838:	461a      	mov	r2, r3
 800883a:	497c      	ldr	r1, [pc, #496]	; (8008a2c <CheckReWriteTSiDo+0x268>)
 800883c:	2001      	movs	r0, #1
 800883e:	f001 f8d3 	bl	80099e8 <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 8008842:	4b7a      	ldr	r3, [pc, #488]	; (8008a2c <CheckReWriteTSiDo+0x268>)
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	b21a      	sxth	r2, r3
 800884a:	4b78      	ldr	r3, [pc, #480]	; (8008a2c <CheckReWriteTSiDo+0x268>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b21b      	sxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b21b      	sxth	r3, r3
 8008854:	b29a      	uxth	r2, r3
 8008856:	4b76      	ldr	r3, [pc, #472]	; (8008a30 <CheckReWriteTSiDo+0x26c>)
 8008858:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 800885a:	4b75      	ldr	r3, [pc, #468]	; (8008a30 <CheckReWriteTSiDo+0x26c>)
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f001 f904 	bl	8009a6c <sensors_GetSign>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <CheckReWriteTSiDo+0xae>
    					c='-';
 800886a:	4b72      	ldr	r3, [pc, #456]	; (8008a34 <CheckReWriteTSiDo+0x270>)
 800886c:	222d      	movs	r2, #45	; 0x2d
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e002      	b.n	8008878 <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 8008872:	4b70      	ldr	r3, [pc, #448]	; (8008a34 <CheckReWriteTSiDo+0x270>)
 8008874:	222b      	movs	r2, #43	; 0x2b
 8008876:	701a      	strb	r2, [r3, #0]
    				temper = sensors_Convert(raw_temper);
 8008878:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <CheckReWriteTSiDo+0x26c>)
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f001 f908 	bl	8009a92 <sensors_Convert>
 8008882:	eef0 7a40 	vmov.f32	s15, s0
 8008886:	4b6c      	ldr	r3, [pc, #432]	; (8008a38 <CheckReWriteTSiDo+0x274>)
 8008888:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(sign_temper, "%c%.2f", c, temper);
 800888c:	4b69      	ldr	r3, [pc, #420]	; (8008a34 <CheckReWriteTSiDo+0x270>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	461d      	mov	r5, r3
 8008892:	4b69      	ldr	r3, [pc, #420]	; (8008a38 <CheckReWriteTSiDo+0x274>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f7 fe66 	bl	8000568 <__aeabi_f2d>
 800889c:	4603      	mov	r3, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	e9cd 3400 	strd	r3, r4, [sp]
 80088a4:	462a      	mov	r2, r5
 80088a6:	4965      	ldr	r1, [pc, #404]	; (8008a3c <CheckReWriteTSiDo+0x278>)
 80088a8:	4865      	ldr	r0, [pc, #404]	; (8008a40 <CheckReWriteTSiDo+0x27c>)
 80088aa:	f013 fc49 	bl	801c140 <siprintf>
    				temper = atof(sign_temper);
 80088ae:	4864      	ldr	r0, [pc, #400]	; (8008a40 <CheckReWriteTSiDo+0x27c>)
 80088b0:	f012 fe24 	bl	801b4fc <atof>
 80088b4:	ec54 3b10 	vmov	r3, r4, d0
 80088b8:	4618      	mov	r0, r3
 80088ba:	4621      	mov	r1, r4
 80088bc:	f7f8 f9a4 	bl	8000c08 <__aeabi_d2f>
 80088c0:	4602      	mov	r2, r0
 80088c2:	4b5d      	ldr	r3, [pc, #372]	; (8008a38 <CheckReWriteTSiDo+0x274>)
 80088c4:	601a      	str	r2, [r3, #0]
    				//--------------------from debug--------------------------
    				HAL_UART_Transmit(&huart3, (uint8_t*)sign_temper, strlen(sign_temper), 0x1000);
 80088c6:	485e      	ldr	r0, [pc, #376]	; (8008a40 <CheckReWriteTSiDo+0x27c>)
 80088c8:	f7f7 fc8c 	bl	80001e4 <strlen>
 80088cc:	4603      	mov	r3, r0
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088d4:	495a      	ldr	r1, [pc, #360]	; (8008a40 <CheckReWriteTSiDo+0x27c>)
 80088d6:	485b      	ldr	r0, [pc, #364]	; (8008a44 <CheckReWriteTSiDo+0x280>)
 80088d8:	f006 f93b 	bl	800eb52 <HAL_UART_Transmit>
    				//--------------------------------------------------------
					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 80088dc:	4b56      	ldr	r3, [pc, #344]	; (8008a38 <CheckReWriteTSiDo+0x274>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7f7 fe41 	bl	8000568 <__aeabi_f2d>
 80088e6:	4605      	mov	r5, r0
 80088e8:	460e      	mov	r6, r1
 80088ea:	79bb      	ldrb	r3, [r7, #6]
 80088ec:	1e5a      	subs	r2, r3, #1
 80088ee:	494d      	ldr	r1, [pc, #308]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	3318      	adds	r3, #24
 80088fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008900:	461a      	mov	r2, r3
 8008902:	4623      	mov	r3, r4
 8008904:	4628      	mov	r0, r5
 8008906:	4631      	mov	r1, r6
 8008908:	f7f8 f90c 	bl	8000b24 <__aeabi_dcmpge>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d048      	beq.n	80089a4 <CheckReWriteTSiDo+0x1e0>
 8008912:	79bb      	ldrb	r3, [r7, #6]
 8008914:	1e5a      	subs	r2, r3, #1
 8008916:	4943      	ldr	r1, [pc, #268]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 8008918:	4613      	mov	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	440b      	add	r3, r1
 8008922:	3320      	adds	r3, #32
 8008924:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008928:	4b43      	ldr	r3, [pc, #268]	; (8008a38 <CheckReWriteTSiDo+0x274>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7f7 fe1b 	bl	8000568 <__aeabi_f2d>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4620      	mov	r0, r4
 8008938:	4629      	mov	r1, r5
 800893a:	f7f8 f8f3 	bl	8000b24 <__aeabi_dcmpge>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02f      	beq.n	80089a4 <CheckReWriteTSiDo+0x1e0>
					{
						Status_OCD[j] = TSiDo[i-1].VAR_OUT;
 8008944:	79bb      	ldrb	r3, [r7, #6]
 8008946:	1e5a      	subs	r2, r3, #1
 8008948:	7979      	ldrb	r1, [r7, #5]
 800894a:	4836      	ldr	r0, [pc, #216]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	4403      	add	r3, r0
 8008956:	332c      	adds	r3, #44	; 0x2c
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	4b3b      	ldr	r3, [pc, #236]	; (8008a48 <CheckReWriteTSiDo+0x284>)
 800895c:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, TSiDo[i-1].VAR_OUT);
 800895e:	79bb      	ldrb	r3, [r7, #6]
 8008960:	1e5a      	subs	r2, r3, #1
 8008962:	4930      	ldr	r1, [pc, #192]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	440b      	add	r3, r1
 800896e:	3328      	adds	r3, #40	; 0x28
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	79bb      	ldrb	r3, [r7, #6]
 8008974:	1e5a      	subs	r2, r3, #1
 8008976:	492b      	ldr	r1, [pc, #172]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	440b      	add	r3, r1
 8008982:	332e      	adds	r3, #46	; 0x2e
 8008984:	881c      	ldrh	r4, [r3, #0]
 8008986:	79bb      	ldrb	r3, [r7, #6]
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	4926      	ldr	r1, [pc, #152]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 800898c:	4613      	mov	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	440b      	add	r3, r1
 8008996:	332c      	adds	r3, #44	; 0x2c
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	4621      	mov	r1, r4
 800899e:	f003 fcc3 	bl	800c328 <HAL_GPIO_WritePin>
 80089a2:	e024      	b.n	80089ee <CheckReWriteTSiDo+0x22a>
					}
					else
					{
						Status_OCD[j] =  TSiDo[i-1].VAR_OUT;
 80089a4:	79bb      	ldrb	r3, [r7, #6]
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	7979      	ldrb	r1, [r7, #5]
 80089aa:	481e      	ldr	r0, [pc, #120]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 80089ac:	4613      	mov	r3, r2
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	4403      	add	r3, r0
 80089b6:	332c      	adds	r3, #44	; 0x2c
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <CheckReWriteTSiDo+0x284>)
 80089bc:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 80089be:	79bb      	ldrb	r3, [r7, #6]
 80089c0:	1e5a      	subs	r2, r3, #1
 80089c2:	4918      	ldr	r1, [pc, #96]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 80089c4:	4613      	mov	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	440b      	add	r3, r1
 80089ce:	3328      	adds	r3, #40	; 0x28
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	79bb      	ldrb	r3, [r7, #6]
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	4913      	ldr	r1, [pc, #76]	; (8008a24 <CheckReWriteTSiDo+0x260>)
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	440b      	add	r3, r1
 80089e2:	332e      	adds	r3, #46	; 0x2e
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	4619      	mov	r1, r3
 80089ea:	f003 fc9d 	bl	800c328 <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 80089ee:	797b      	ldrb	r3, [r7, #5]
 80089f0:	3301      	adds	r3, #1
 80089f2:	717b      	strb	r3, [r7, #5]
 80089f4:	797b      	ldrb	r3, [r7, #5]
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	f67f af0c 	bls.w	8008814 <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80089fc:	79bb      	ldrb	r3, [r7, #6]
 80089fe:	3301      	adds	r3, #1
 8008a00:	71bb      	strb	r3, [r7, #6]
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <CheckReWriteTSiDo+0x258>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	79ba      	ldrb	r2, [r7, #6]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f67f af00 	bls.w	800880e <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000abf 	.word	0x20000abf
 8008a1c:	20002044 	.word	0x20002044
 8008a20:	20000ac0 	.word	0x20000ac0
 8008a24:	20001198 	.word	0x20001198
 8008a28:	20000060 	.word	0x20000060
 8008a2c:	20002020 	.word	0x20002020
 8008a30:	20002008 	.word	0x20002008
 8008a34:	2000201c 	.word	0x2000201c
 8008a38:	20002038 	.word	0x20002038
 8008a3c:	080213dc 	.word	0x080213dc
 8008a40:	2000200c 	.word	0x2000200c
 8008a44:	20001c3c 	.word	0x20001c3c
 8008a48:	20000ffc 	.word	0x20000ffc
 8008a4c:	00000000 	.word	0x00000000

08008a50 <Conversion_ADC1>:
//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Принимает "item" - номер аналогового входа АЦП
//Возвращает преобразованное значение в зависимости от конфигурации аналогового входа
double Conversion_ADC1(uint16_t ADC_value, uint8_t item)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	460a      	mov	r2, r1
 8008a5a:	80fb      	strh	r3, [r7, #6]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	717b      	strb	r3, [r7, #5]
	double Value = 0;
 8008a60:	f04f 0300 	mov.w	r3, #0
 8008a64:	f04f 0400 	mov.w	r4, #0
 8008a68:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const double Resolution = 0.0008056640625;
 8008a6c:	a424      	add	r4, pc, #144	; (adr r4, 8008b00 <Conversion_ADC1+0xb0>)
 8008a6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a72:	e9c7 3402 	strd	r3, r4, [r7, #8]
	Value = (ADC_value * Resolution);
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7f7 fd63 	bl	8000544 <__aeabi_i2d>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	461a      	mov	r2, r3
 8008a84:	4623      	mov	r3, r4
 8008a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a8a:	f7f7 fdc5 	bl	8000618 <__aeabi_dmul>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	e9c7 3404 	strd	r3, r4, [r7, #16]
	(AiDo[item].inputFlag == true) ? (Value = (Value * 3.2323232323232)) : (Value = (Value / 60));
 8008a96:	797a      	ldrb	r2, [r7, #5]
 8008a98:	4917      	ldr	r1, [pc, #92]	; (8008af8 <Conversion_ADC1+0xa8>)
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	440b      	add	r3, r1
 8008aa4:	3320      	adds	r3, #32
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <Conversion_ADC1+0x74>
 8008aac:	a310      	add	r3, pc, #64	; (adr r3, 8008af0 <Conversion_ADC1+0xa0>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ab6:	f7f7 fdaf 	bl	8000618 <__aeabi_dmul>
 8008aba:	4603      	mov	r3, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008ac2:	e00a      	b.n	8008ada <Conversion_ADC1+0x8a>
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <Conversion_ADC1+0xac>)
 8008aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ace:	f7f7 fecd 	bl	800086c <__aeabi_ddiv>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return Value;
 8008ada:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008ade:	ec44 3b17 	vmov	d7, r3, r4
}
 8008ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8008ae6:	eef0 0a67 	vmov.f32	s1, s15
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}
 8008af0:	48676ee8 	.word	0x48676ee8
 8008af4:	4009dbcc 	.word	0x4009dbcc
 8008af8:	20001228 	.word	0x20001228
 8008afc:	404e0000 	.word	0x404e0000
 8008b00:	66666666 	.word	0x66666666
 8008b04:	3f4a6666 	.word	0x3f4a6666

08008b08 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b0ae      	sub	sp, #184	; 0xb8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	461a      	mov	r2, r3
 8008b14:	460b      	mov	r3, r1
 8008b16:	72fb      	strb	r3, [r7, #11]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 8008b1c:	4acd      	ldr	r2, [pc, #820]	; (8008e54 <set_dido+0x34c>)
 8008b1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008b22:	4611      	mov	r1, r2
 8008b24:	2250      	movs	r2, #80	; 0x50
 8008b26:	4618      	mov	r0, r3
 8008b28:	f012 fd49 	bl	801b5be <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008b2c:	4aca      	ldr	r2, [pc, #808]	; (8008e58 <set_dido+0x350>)
 8008b2e:	f107 0310 	add.w	r3, r7, #16
 8008b32:	4611      	mov	r1, r2
 8008b34:	2250      	movs	r2, #80	; 0x50
 8008b36:	4618      	mov	r0, r3
 8008b38:	f012 fd41 	bl	801b5be <memcpy>

	for(int i = 0; i < 8; i++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b42:	e17e      	b.n	8008e42 <set_dido+0x33a>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 8008b44:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	440b      	add	r3, r1
 8008b56:	4619      	mov	r1, r3
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7f7 fb39 	bl	80001d0 <strcmp>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f040 8169 	bne.w	8008e38 <set_dido+0x330>
		{
			if(DiDo[i].clrFlag != false)
 8008b66:	49bd      	ldr	r1, [pc, #756]	; (8008e5c <set_dido+0x354>)
 8008b68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3310      	adds	r3, #16
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d017      	beq.n	8008bae <set_dido+0xa6>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8008b7e:	49b7      	ldr	r1, [pc, #732]	; (8008e5c <set_dido+0x354>)
 8008b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	49b2      	ldr	r1, [pc, #712]	; (8008e5c <set_dido+0x354>)
 8008b94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	330e      	adds	r3, #14
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f003 fbbd 	bl	800c328 <HAL_GPIO_WritePin>
			DiDo[i].clrFlag = true;
 8008bae:	49ab      	ldr	r1, [pc, #684]	; (8008e5c <set_dido+0x354>)
 8008bb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	3310      	adds	r3, #16
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 8008bc4:	4aa6      	ldr	r2, [pc, #664]	; (8008e60 <set_dido+0x358>)
 8008bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bce:	48a3      	ldr	r0, [pc, #652]	; (8008e5c <set_dido+0x354>)
 8008bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4403      	add	r3, r0
 8008bde:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 8008be0:	499e      	ldr	r1, [pc, #632]	; (8008e5c <set_dido+0x354>)
 8008be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	7afa      	ldrb	r2, [r7, #11]
 8008bf4:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 8008bf6:	4a9b      	ldr	r2, [pc, #620]	; (8008e64 <set_dido+0x35c>)
 8008bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bfc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008c00:	4996      	ldr	r1, [pc, #600]	; (8008e5c <set_dido+0x354>)
 8008c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	3306      	adds	r3, #6
 8008c12:	4602      	mov	r2, r0
 8008c14:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8008c16:	2300      	movs	r3, #0
 8008c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c1c:	e104      	b.n	8008e28 <set_dido+0x320>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008c1e:	f107 0110 	add.w	r1, r7, #16
 8008c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	440b      	add	r3, r1
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7f7 facc 	bl	80001d0 <strcmp>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80ef 	bne.w	8008e1e <set_dido+0x316>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 8008c40:	4a89      	ldr	r2, [pc, #548]	; (8008e68 <set_dido+0x360>)
 8008c42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c4a:	4884      	ldr	r0, [pc, #528]	; (8008e5c <set_dido+0x354>)
 8008c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4403      	add	r3, r0
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8008c5e:	497f      	ldr	r1, [pc, #508]	; (8008e5c <set_dido+0x354>)
 8008c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	330c      	adds	r3, #12
 8008c70:	7aba      	ldrb	r2, [r7, #10]
 8008c72:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8008c74:	4a7d      	ldr	r2, [pc, #500]	; (8008e6c <set_dido+0x364>)
 8008c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c7a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008c7e:	4977      	ldr	r1, [pc, #476]	; (8008e5c <set_dido+0x354>)
 8008c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	330e      	adds	r3, #14
 8008c90:	4602      	mov	r2, r0
 8008c92:	801a      	strh	r2, [r3, #0]
					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8008c94:	4971      	ldr	r1, [pc, #452]	; (8008e5c <set_dido+0x354>)
 8008c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	496d      	ldr	r1, [pc, #436]	; (8008e5c <set_dido+0x354>)
 8008ca8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3306      	adds	r3, #6
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f003 fb1c 	bl	800c2f8 <HAL_GPIO_ReadPin>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d021      	beq.n	8008d0e <set_dido+0x206>
					{
						Status_OCD[j] = VAR_OUT;
 8008cca:	4a69      	ldr	r2, [pc, #420]	; (8008e70 <set_dido+0x368>)
 8008ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008cd0:	4413      	add	r3, r2
 8008cd2:	7aba      	ldrb	r2, [r7, #10]
 8008cd4:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 8008cd6:	4961      	ldr	r1, [pc, #388]	; (8008e5c <set_dido+0x354>)
 8008cd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	495c      	ldr	r1, [pc, #368]	; (8008e5c <set_dido+0x354>)
 8008cec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	330e      	adds	r3, #14
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	7aba      	ldrb	r2, [r7, #10]
 8008d00:	4619      	mov	r1, r3
 8008d02:	f003 fb11 	bl	800c328 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8008d06:	485b      	ldr	r0, [pc, #364]	; (8008e74 <set_dido+0x36c>)
 8008d08:	f7fa f830 	bl	8002d6c <SEND_str>
 8008d0c:	e047      	b.n	8008d9e <set_dido+0x296>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 8008d0e:	4953      	ldr	r1, [pc, #332]	; (8008e5c <set_dido+0x354>)
 8008d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	494e      	ldr	r1, [pc, #312]	; (8008e5c <set_dido+0x354>)
 8008d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	3306      	adds	r3, #6
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	f003 fadf 	bl	800c2f8 <HAL_GPIO_ReadPin>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d12c      	bne.n	8008d9e <set_dido+0x296>
					{
						Status_OCD[j] = !VAR_OUT;
 8008d44:	7abb      	ldrb	r3, [r7, #10]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf0c      	ite	eq
 8008d4a:	2301      	moveq	r3, #1
 8008d4c:	2300      	movne	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	4a47      	ldr	r2, [pc, #284]	; (8008e70 <set_dido+0x368>)
 8008d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d58:	4413      	add	r3, r2
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8008d5e:	493f      	ldr	r1, [pc, #252]	; (8008e5c <set_dido+0x354>)
 8008d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3308      	adds	r3, #8
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	493a      	ldr	r1, [pc, #232]	; (8008e5c <set_dido+0x354>)
 8008d74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	330e      	adds	r3, #14
 8008d84:	8819      	ldrh	r1, [r3, #0]
 8008d86:	7abb      	ldrb	r3, [r7, #10]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	f003 fac8 	bl	800c328 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8008d98:	4837      	ldr	r0, [pc, #220]	; (8008e78 <set_dido+0x370>)
 8008d9a:	f7f9 ffe7 	bl	8002d6c <SEND_str>
					}

					//For Debug:
					//------------------------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8008d9e:	492f      	ldr	r1, [pc, #188]	; (8008e5c <set_dido+0x354>)
 8008da0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	440b      	add	r3, r1
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a32      	ldr	r2, [pc, #200]	; (8008e7c <set_dido+0x374>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d102      	bne.n	8008dbc <set_dido+0x2b4>
						SEND_str("1 - success...\n");
 8008db6:	4832      	ldr	r0, [pc, #200]	; (8008e80 <set_dido+0x378>)
 8008db8:	f7f9 ffd8 	bl	8002d6c <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 8008dbc:	4927      	ldr	r1, [pc, #156]	; (8008e5c <set_dido+0x354>)
 8008dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	3304      	adds	r3, #4
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	7afa      	ldrb	r2, [r7, #11]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d102      	bne.n	8008ddc <set_dido+0x2d4>
						SEND_str("2 - success...\n");
 8008dd6:	482b      	ldr	r0, [pc, #172]	; (8008e84 <set_dido+0x37c>)
 8008dd8:	f7f9 ffc8 	bl	8002d6c <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 8008ddc:	491f      	ldr	r1, [pc, #124]	; (8008e5c <set_dido+0x354>)
 8008dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	3308      	adds	r3, #8
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a25      	ldr	r2, [pc, #148]	; (8008e88 <set_dido+0x380>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d102      	bne.n	8008dfc <set_dido+0x2f4>
						SEND_str("3 - success...\n");
 8008df6:	4825      	ldr	r0, [pc, #148]	; (8008e8c <set_dido+0x384>)
 8008df8:	f7f9 ffb8 	bl	8002d6c <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 8008dfc:	4917      	ldr	r1, [pc, #92]	; (8008e5c <set_dido+0x354>)
 8008dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	7aba      	ldrb	r2, [r7, #10]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d10e      	bne.n	8008e34 <set_dido+0x32c>
						SEND_str("4 - success...\n");
 8008e16:	481e      	ldr	r0, [pc, #120]	; (8008e90 <set_dido+0x388>)
 8008e18:	f7f9 ffa8 	bl	8002d6c <SEND_str>
					//------------------------------------------------

					break;
 8008e1c:	e00a      	b.n	8008e34 <set_dido+0x32c>
			for(int j = 0; j < 8; j++)
 8008e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e22:	3301      	adds	r3, #1
 8008e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e2c:	2b07      	cmp	r3, #7
 8008e2e:	f77f aef6 	ble.w	8008c1e <set_dido+0x116>
				}
			}
			break;
 8008e32:	e00b      	b.n	8008e4c <set_dido+0x344>
					break;
 8008e34:	bf00      	nop
			break;
 8008e36:	e009      	b.n	8008e4c <set_dido+0x344>
	for(int i = 0; i < 8; i++)
 8008e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e46:	2b07      	cmp	r3, #7
 8008e48:	f77f ae7c 	ble.w	8008b44 <set_dido+0x3c>
		}
	}
}
 8008e4c:	bf00      	nop
 8008e4e:	37b8      	adds	r7, #184	; 0xb8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	0802143c 	.word	0x0802143c
 8008e58:	0802148c 	.word	0x0802148c
 8008e5c:	200012c8 	.word	0x200012c8
 8008e60:	20000010 	.word	0x20000010
 8008e64:	20000050 	.word	0x20000050
 8008e68:	20000030 	.word	0x20000030
 8008e6c:	20000060 	.word	0x20000060
 8008e70:	20000ffc 	.word	0x20000ffc
 8008e74:	080213e4 	.word	0x080213e4
 8008e78:	080213f0 	.word	0x080213f0
 8008e7c:	40020c00 	.word	0x40020c00
 8008e80:	080213fc 	.word	0x080213fc
 8008e84:	0802140c 	.word	0x0802140c
 8008e88:	40020400 	.word	0x40020400
 8008e8c:	0802141c 	.word	0x0802141c
 8008e90:	0802142c 	.word	0x0802142c

08008e94 <set_aido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_aido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b0b2      	sub	sp, #200	; 0xc8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	61f8      	str	r0, [r7, #28]
 8008e9c:	ed87 0b04 	vstr	d0, [r7, #16]
 8008ea0:	ed87 1b02 	vstr	d1, [r7, #8]
 8008ea4:	61b9      	str	r1, [r7, #24]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 8008eaa:	4b96      	ldr	r3, [pc, #600]	; (8009104 <set_aido+0x270>)
 8008eac:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ebe:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008ec2:	4a91      	ldr	r2, [pc, #580]	; (8009108 <set_aido+0x274>)
 8008ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2250      	movs	r2, #80	; 0x50
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f012 fb76 	bl	801b5be <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 8008ed2:	4b8e      	ldr	r3, [pc, #568]	; (800910c <set_aido+0x278>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ede:	e108      	b.n	80090f2 <set_aido+0x25e>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 8008ee0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008ee4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	440b      	add	r3, r1
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	69f8      	ldr	r0, [r7, #28]
 8008ef6:	f7f7 f96b 	bl	80001d0 <strcmp>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 80f3 	bne.w	80090e8 <set_aido+0x254>
		{
			if(AiDo[i].clrFlag != false)
 8008f02:	4983      	ldr	r1, [pc, #524]	; (8009110 <set_aido+0x27c>)
 8008f04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	440b      	add	r3, r1
 8008f12:	3321      	adds	r3, #33	; 0x21
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d017      	beq.n	8008f4a <set_aido+0xb6>
				HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);
 8008f1a:	497d      	ldr	r1, [pc, #500]	; (8009110 <set_aido+0x27c>)
 8008f1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	440b      	add	r3, r1
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	4978      	ldr	r1, [pc, #480]	; (8009110 <set_aido+0x27c>)
 8008f30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	440b      	add	r3, r1
 8008f3e:	331e      	adds	r3, #30
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	4619      	mov	r1, r3
 8008f46:	f003 f9ef 	bl	800c328 <HAL_GPIO_WritePin>

			AiDo[i].clrFlag = true;
 8008f4a:	4971      	ldr	r1, [pc, #452]	; (8009110 <set_aido+0x27c>)
 8008f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	440b      	add	r3, r1
 8008f5a:	3321      	adds	r3, #33	; 0x21
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
			AiDo[i].A_IN = pVHOD[i];
 8008f60:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f68:	4413      	add	r3, r2
 8008f6a:	7818      	ldrb	r0, [r3, #0]
 8008f6c:	4968      	ldr	r1, [pc, #416]	; (8009110 <set_aido+0x27c>)
 8008f6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	701a      	strb	r2, [r3, #0]
			AiDo[i].RANGE_LOW = RANGE_LOW;
 8008f80:	4963      	ldr	r1, [pc, #396]	; (8009110 <set_aido+0x27c>)
 8008f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	440b      	add	r3, r1
 8008f90:	f103 0208 	add.w	r2, r3, #8
 8008f94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008f98:	e9c2 3400 	strd	r3, r4, [r2]
			AiDo[i].RANGE_HIGH = RANGE_HIGH;
 8008f9c:	495c      	ldr	r1, [pc, #368]	; (8009110 <set_aido+0x27c>)
 8008f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	440b      	add	r3, r1
 8008fac:	f103 0210 	add.w	r2, r3, #16
 8008fb0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008fb4:	e9c2 3400 	strd	r3, r4, [r2]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fbe:	e08d      	b.n	80090dc <set_aido+0x248>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008fc0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008fc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	440b      	add	r3, r1
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f7f7 f8fb 	bl	80001d0 <strcmp>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d178      	bne.n	80090d2 <set_aido+0x23e>
				{
					AiDo[i].D_OUT = pVIHOD[j];
 8008fe0:	4a4c      	ldr	r2, [pc, #304]	; (8009114 <set_aido+0x280>)
 8008fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fe6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fea:	4849      	ldr	r0, [pc, #292]	; (8009110 <set_aido+0x27c>)
 8008fec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	4403      	add	r3, r0
 8008ffa:	3318      	adds	r3, #24
 8008ffc:	6019      	str	r1, [r3, #0]
					AiDo[i].VAR_OUT = VAR_OUT;
 8008ffe:	4944      	ldr	r1, [pc, #272]	; (8009110 <set_aido+0x27c>)
 8009000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	440b      	add	r3, r1
 800900e:	331c      	adds	r3, #28
 8009010:	79fa      	ldrb	r2, [r7, #7]
 8009012:	701a      	strb	r2, [r3, #0]
					AiDo[i].OCD_Pin = OCD_Pin[j];
 8009014:	4a40      	ldr	r2, [pc, #256]	; (8009118 <set_aido+0x284>)
 8009016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800901a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800901e:	493c      	ldr	r1, [pc, #240]	; (8009110 <set_aido+0x27c>)
 8009020:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	440b      	add	r3, r1
 800902e:	331e      	adds	r3, #30
 8009030:	4602      	mov	r2, r0
 8009032:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 8009034:	4839      	ldr	r0, [pc, #228]	; (800911c <set_aido+0x288>)
 8009036:	f7f9 fe99 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 800903a:	4a39      	ldr	r2, [pc, #228]	; (8009120 <set_aido+0x28c>)
 800903c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	4413      	add	r3, r2
 8009044:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009048:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800904c:	461a      	mov	r2, r3
 800904e:	4623      	mov	r3, r4
 8009050:	4934      	ldr	r1, [pc, #208]	; (8009124 <set_aido+0x290>)
 8009052:	f013 f875 	bl	801c140 <siprintf>
					SEND_str(Buff);
 8009056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905a:	4618      	mov	r0, r3
 800905c:	f7f9 fe86 	bl	8002d6c <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 8009060:	4831      	ldr	r0, [pc, #196]	; (8009128 <set_aido+0x294>)
 8009062:	f7f9 fe83 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_LOW);
 8009066:	492a      	ldr	r1, [pc, #168]	; (8009110 <set_aido+0x27c>)
 8009068:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	3308      	adds	r3, #8
 8009078:	e9d3 3400 	ldrd	r3, r4, [r3]
 800907c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009080:	461a      	mov	r2, r3
 8009082:	4623      	mov	r3, r4
 8009084:	4927      	ldr	r1, [pc, #156]	; (8009124 <set_aido+0x290>)
 8009086:	f013 f85b 	bl	801c140 <siprintf>
					SEND_str(Buff);
 800908a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800908e:	4618      	mov	r0, r3
 8009090:	f7f9 fe6c 	bl	8002d6c <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 8009094:	4825      	ldr	r0, [pc, #148]	; (800912c <set_aido+0x298>)
 8009096:	f7f9 fe69 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_HIGH);
 800909a:	491d      	ldr	r1, [pc, #116]	; (8009110 <set_aido+0x27c>)
 800909c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	440b      	add	r3, r1
 80090aa:	3310      	adds	r3, #16
 80090ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090b4:	461a      	mov	r2, r3
 80090b6:	4623      	mov	r3, r4
 80090b8:	491a      	ldr	r1, [pc, #104]	; (8009124 <set_aido+0x290>)
 80090ba:	f013 f841 	bl	801c140 <siprintf>
					SEND_str(Buff);
 80090be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f9 fe52 	bl	8002d6c <SEND_str>
					SEND_str("\n");
 80090c8:	4819      	ldr	r0, [pc, #100]	; (8009130 <set_aido+0x29c>)
 80090ca:	f7f9 fe4f 	bl	8002d6c <SEND_str>
					//------------------------------------------------

					break;
 80090ce:	bf00      	nop
				}
			}
			break;
 80090d0:	e014      	b.n	80090fc <set_aido+0x268>
			for(int j = 0; j < 8; j++)
 80090d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090d6:	3301      	adds	r3, #1
 80090d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090e0:	2b07      	cmp	r3, #7
 80090e2:	f77f af6d 	ble.w	8008fc0 <set_aido+0x12c>
			break;
 80090e6:	e009      	b.n	80090fc <set_aido+0x268>
	for(int i = 0; i < 4; i++)
 80090e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80090ec:	3301      	adds	r3, #1
 80090ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	f77f aef2 	ble.w	8008ee0 <set_aido+0x4c>
		}
	}
}
 80090fc:	bf00      	nop
 80090fe:	37c8      	adds	r7, #200	; 0xc8
 8009100:	46bd      	mov	sp, r7
 8009102:	bdb0      	pop	{r4, r5, r7, pc}
 8009104:	08021514 	.word	0x08021514
 8009108:	0802148c 	.word	0x0802148c
 800910c:	0802153c 	.word	0x0802153c
 8009110:	20001228 	.word	0x20001228
 8009114:	20000030 	.word	0x20000030
 8009118:	20000060 	.word	0x20000060
 800911c:	080214dc 	.word	0x080214dc
 8009120:	20000a98 	.word	0x20000a98
 8009124:	080214e8 	.word	0x080214e8
 8009128:	080214f0 	.word	0x080214f0
 800912c:	08021500 	.word	0x08021500
 8009130:	08021510 	.word	0x08021510

08009134 <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b094      	sub	sp, #80	; 0x50
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 800913e:	4b4b      	ldr	r3, [pc, #300]	; (800926c <set_pwm+0x138>)
 8009140:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8009144:	461d      	mov	r5, r3
 8009146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 800914e:	4b48      	ldr	r3, [pc, #288]	; (8009270 <set_pwm+0x13c>)
 8009150:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 800915a:	2300      	movs	r3, #0
 800915c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800915e:	e07d      	b.n	800925c <set_pwm+0x128>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8009160:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	440b      	add	r3, r1
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7f7 f82d 	bl	80001d0 <strcmp>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d16c      	bne.n	8009256 <set_pwm+0x122>
		{
			if(PWM[i].clrFlag != false)
 800917c:	4a3d      	ldr	r2, [pc, #244]	; (8009274 <set_pwm+0x140>)
 800917e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	4413      	add	r3, r2
 8009184:	799b      	ldrb	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 800918a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009192:	4413      	add	r3, r2
 8009194:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8009198:	2301      	movs	r3, #1
 800919a:	2200      	movs	r2, #0
 800919c:	4836      	ldr	r0, [pc, #216]	; (8009278 <set_pwm+0x144>)
 800919e:	f004 fd87 	bl	800dcb0 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 80091a2:	4a34      	ldr	r2, [pc, #208]	; (8009274 <set_pwm+0x140>)
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	2201      	movs	r2, #1
 80091ac:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 80091ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091b6:	4413      	add	r3, r2
 80091b8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80091bc:	492d      	ldr	r1, [pc, #180]	; (8009274 <set_pwm+0x140>)
 80091be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	0092      	lsls	r2, r2, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	461a      	mov	r2, r3
 80091d0:	0091      	lsls	r1, r2, #2
 80091d2:	461a      	mov	r2, r3
 80091d4:	460b      	mov	r3, r1
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	b299      	uxth	r1, r3
 80091dc:	4a25      	ldr	r2, [pc, #148]	; (8009274 <set_pwm+0x140>)
 80091de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4413      	add	r3, r2
 80091e4:	460a      	mov	r2, r1
 80091e6:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 80091e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091f0:	4413      	add	r3, r2
 80091f2:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80091f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	4a1e      	ldr	r2, [pc, #120]	; (8009274 <set_pwm+0x140>)
 80091fc:	4413      	add	r3, r2
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	2301      	movs	r3, #1
 8009202:	481d      	ldr	r0, [pc, #116]	; (8009278 <set_pwm+0x144>)
 8009204:	f004 fd54 	bl	800dcb0 <HAL_TIM_PWM_Start_DMA>

			//For Debug:
			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8009208:	481c      	ldr	r0, [pc, #112]	; (800927c <set_pwm+0x148>)
 800920a:	f7f9 fdaf 	bl	8002d6c <SEND_str>
			SEND_str(PVIHOD[i]);
 800920e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	440b      	add	r3, r1
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 fda5 	bl	8002d6c <SEND_str>
			SEND_str("\n");
 8009222:	4817      	ldr	r0, [pc, #92]	; (8009280 <set_pwm+0x14c>)
 8009224:	f7f9 fda2 	bl	8002d6c <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8009228:	4816      	ldr	r0, [pc, #88]	; (8009284 <set_pwm+0x150>)
 800922a:	f7f9 fd9f 	bl	8002d6c <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4914      	ldr	r1, [pc, #80]	; (8009288 <set_pwm+0x154>)
 8009236:	4618      	mov	r0, r3
 8009238:	f012 ff82 	bl	801c140 <siprintf>
			SEND_str(Buff);
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	4618      	mov	r0, r3
 8009242:	f7f9 fd93 	bl	8002d6c <SEND_str>
			SEND_str("%");
 8009246:	4811      	ldr	r0, [pc, #68]	; (800928c <set_pwm+0x158>)
 8009248:	f7f9 fd90 	bl	8002d6c <SEND_str>
			SEND_str("\n");
 800924c:	480c      	ldr	r0, [pc, #48]	; (8009280 <set_pwm+0x14c>)
 800924e:	f7f9 fd8d 	bl	8002d6c <SEND_str>
			//------------------------------------------------

			break;
 8009252:	bf00      	nop
 8009254:	e006      	b.n	8009264 <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 8009256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009258:	3301      	adds	r3, #1
 800925a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800925e:	2b03      	cmp	r3, #3
 8009260:	f77f af7e 	ble.w	8009160 <set_pwm+0x2c>
		}
	}
}
 8009264:	bf00      	nop
 8009266:	3750      	adds	r7, #80	; 0x50
 8009268:	46bd      	mov	sp, r7
 800926a:	bdb0      	pop	{r4, r5, r7, pc}
 800926c:	08021564 	.word	0x08021564
 8009270:	08021578 	.word	0x08021578
 8009274:	20001208 	.word	0x20001208
 8009278:	20001a9c 	.word	0x20001a9c
 800927c:	08021540 	.word	0x08021540
 8009280:	08021510 	.word	0x08021510
 8009284:	0802154c 	.word	0x0802154c
 8009288:	0802155c 	.word	0x0802155c
 800928c:	08021560 	.word	0x08021560

08009290 <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b0a9      	sub	sp, #164	; 0xa4
 8009294:	af00      	add	r7, sp, #0
 8009296:	61f8      	str	r0, [r7, #28]
 8009298:	ed87 0b04 	vstr	d0, [r7, #16]
 800929c:	ed87 1b02 	vstr	d1, [r7, #8]
 80092a0:	61b9      	str	r1, [r7, #24]
 80092a2:	4613      	mov	r3, r2
 80092a4:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80092a6:	4aa5      	ldr	r2, [pc, #660]	; (800953c <set_temperature+0x2ac>)
 80092a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092ac:	4611      	mov	r1, r2
 80092ae:	2250      	movs	r2, #80	; 0x50
 80092b0:	4618      	mov	r0, r3
 80092b2:	f012 f984 	bl	801b5be <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092bc:	e134      	b.n	8009528 <set_temperature+0x298>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 80092be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4a9d      	ldr	r2, [pc, #628]	; (8009540 <set_temperature+0x2b0>)
 80092cc:	4413      	add	r3, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	69f8      	ldr	r0, [r7, #28]
 80092d2:	f7f6 ff7d 	bl	80001d0 <strcmp>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 8120 	bne.w	800951e <set_temperature+0x28e>
		{
			if(TSiDo[i].clrFlag != false)
 80092de:	4999      	ldr	r1, [pc, #612]	; (8009544 <set_temperature+0x2b4>)
 80092e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	440b      	add	r3, r1
 80092ee:	3330      	adds	r3, #48	; 0x30
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 80092f6:	4993      	ldr	r1, [pc, #588]	; (8009544 <set_temperature+0x2b4>)
 80092f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	440b      	add	r3, r1
 8009306:	3328      	adds	r3, #40	; 0x28
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	498e      	ldr	r1, [pc, #568]	; (8009544 <set_temperature+0x2b4>)
 800930c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009310:	4613      	mov	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	440b      	add	r3, r1
 800931a:	332e      	adds	r3, #46	; 0x2e
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	4619      	mov	r1, r3
 8009322:	f003 f801 	bl	800c328 <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 8009326:	4987      	ldr	r1, [pc, #540]	; (8009544 <set_temperature+0x2b4>)
 8009328:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800932c:	4613      	mov	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	1a9b      	subs	r3, r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	440b      	add	r3, r1
 8009336:	3330      	adds	r3, #48	; 0x30
 8009338:	2201      	movs	r2, #1
 800933a:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 800933c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009340:	b2db      	uxtb	r3, r3
 8009342:	3301      	adds	r3, #1
 8009344:	b2d8      	uxtb	r0, r3
 8009346:	497f      	ldr	r1, [pc, #508]	; (8009544 <set_temperature+0x2b4>)
 8009348:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	440b      	add	r3, r1
 8009356:	4602      	mov	r2, r0
 8009358:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 800935a:	2300      	movs	r3, #0
 800935c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009360:	e01e      	b.n	80093a0 <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 8009362:	4977      	ldr	r1, [pc, #476]	; (8009540 <set_temperature+0x2b0>)
 8009364:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	18ca      	adds	r2, r1, r3
 8009372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009376:	4413      	add	r3, r2
 8009378:	7818      	ldrb	r0, [r3, #0]
 800937a:	4972      	ldr	r1, [pc, #456]	; (8009544 <set_temperature+0x2b4>)
 800937c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009380:	4613      	mov	r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	18ca      	adds	r2, r1, r3
 800938a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800938e:	4413      	add	r3, r2
 8009390:	3301      	adds	r3, #1
 8009392:	4602      	mov	r2, r0
 8009394:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8009396:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800939a:	3301      	adds	r3, #1
 800939c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a4:	2b0f      	cmp	r3, #15
 80093a6:	dddc      	ble.n	8009362 <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 80093a8:	4966      	ldr	r1, [pc, #408]	; (8009544 <set_temperature+0x2b4>)
 80093aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80093ae:	4613      	mov	r3, r2
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	440b      	add	r3, r1
 80093b8:	f103 0218 	add.w	r2, r3, #24
 80093bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093c0:	e9c2 3400 	strd	r3, r4, [r2]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 80093c4:	495f      	ldr	r1, [pc, #380]	; (8009544 <set_temperature+0x2b4>)
 80093c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80093ca:	4613      	mov	r3, r2
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	440b      	add	r3, r1
 80093d4:	f103 0220 	add.w	r2, r3, #32
 80093d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80093dc:	e9c2 3400 	strd	r3, r4, [r2]
			for(int j = 0; j < 8; j++)
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093e6:	e094      	b.n	8009512 <set_temperature+0x282>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 80093e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80093ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	440b      	add	r3, r1
 80093fa:	4619      	mov	r1, r3
 80093fc:	69b8      	ldr	r0, [r7, #24]
 80093fe:	f7f6 fee7 	bl	80001d0 <strcmp>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d17f      	bne.n	8009508 <set_temperature+0x278>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8009408:	4a4f      	ldr	r2, [pc, #316]	; (8009548 <set_temperature+0x2b8>)
 800940a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800940e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009412:	484c      	ldr	r0, [pc, #304]	; (8009544 <set_temperature+0x2b4>)
 8009414:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	4403      	add	r3, r0
 8009422:	3328      	adds	r3, #40	; 0x28
 8009424:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 8009426:	4947      	ldr	r1, [pc, #284]	; (8009544 <set_temperature+0x2b4>)
 8009428:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800942c:	4613      	mov	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	440b      	add	r3, r1
 8009436:	332c      	adds	r3, #44	; 0x2c
 8009438:	79fa      	ldrb	r2, [r7, #7]
 800943a:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 800943c:	4a43      	ldr	r2, [pc, #268]	; (800954c <set_temperature+0x2bc>)
 800943e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009442:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8009446:	493f      	ldr	r1, [pc, #252]	; (8009544 <set_temperature+0x2b4>)
 8009448:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800944c:	4613      	mov	r3, r2
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	440b      	add	r3, r1
 8009456:	332e      	adds	r3, #46	; 0x2e
 8009458:	4602      	mov	r2, r0
 800945a:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 800945c:	483c      	ldr	r0, [pc, #240]	; (8009550 <set_temperature+0x2c0>)
 800945e:	f7f9 fc85 	bl	8002d6c <SEND_str>
					SEND_str(ROM_RAW);
 8009462:	69f8      	ldr	r0, [r7, #28]
 8009464:	f7f9 fc82 	bl	8002d6c <SEND_str>
					SEND_str("\n");
 8009468:	483a      	ldr	r0, [pc, #232]	; (8009554 <set_temperature+0x2c4>)
 800946a:	f7f9 fc7f 	bl	8002d6c <SEND_str>
					SEND_str("SET VALUE: ");
 800946e:	483a      	ldr	r0, [pc, #232]	; (8009558 <set_temperature+0x2c8>)
 8009470:	f7f9 fc7c 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.2f", atof(sign_temper));
 8009474:	4839      	ldr	r0, [pc, #228]	; (800955c <set_temperature+0x2cc>)
 8009476:	f012 f841 	bl	801b4fc <atof>
 800947a:	ec54 3b10 	vmov	r3, r4, d0
 800947e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009482:	461a      	mov	r2, r3
 8009484:	4623      	mov	r3, r4
 8009486:	4936      	ldr	r1, [pc, #216]	; (8009560 <set_temperature+0x2d0>)
 8009488:	f012 fe5a 	bl	801c140 <siprintf>
					SEND_str(Buff);
 800948c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009490:	4618      	mov	r0, r3
 8009492:	f7f9 fc6b 	bl	8002d6c <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 8009496:	4833      	ldr	r0, [pc, #204]	; (8009564 <set_temperature+0x2d4>)
 8009498:	f7f9 fc68 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 800949c:	4929      	ldr	r1, [pc, #164]	; (8009544 <set_temperature+0x2b4>)
 800949e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	3318      	adds	r3, #24
 80094ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094b6:	461a      	mov	r2, r3
 80094b8:	4623      	mov	r3, r4
 80094ba:	4929      	ldr	r1, [pc, #164]	; (8009560 <set_temperature+0x2d0>)
 80094bc:	f012 fe40 	bl	801c140 <siprintf>
					SEND_str(Buff);
 80094c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f9 fc51 	bl	8002d6c <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 80094ca:	4827      	ldr	r0, [pc, #156]	; (8009568 <set_temperature+0x2d8>)
 80094cc:	f7f9 fc4e 	bl	8002d6c <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 80094d0:	491c      	ldr	r1, [pc, #112]	; (8009544 <set_temperature+0x2b4>)
 80094d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094d6:	4613      	mov	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	1a9b      	subs	r3, r3, r2
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	440b      	add	r3, r1
 80094e0:	3320      	adds	r3, #32
 80094e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094ea:	461a      	mov	r2, r3
 80094ec:	4623      	mov	r3, r4
 80094ee:	491c      	ldr	r1, [pc, #112]	; (8009560 <set_temperature+0x2d0>)
 80094f0:	f012 fe26 	bl	801c140 <siprintf>
					SEND_str(Buff);
 80094f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f9 fc37 	bl	8002d6c <SEND_str>
					SEND_str("\n");
 80094fe:	4815      	ldr	r0, [pc, #84]	; (8009554 <set_temperature+0x2c4>)
 8009500:	f7f9 fc34 	bl	8002d6c <SEND_str>
					//------------------------------------------------

					break;
 8009504:	bf00      	nop
				}
			}
			break;
 8009506:	e014      	b.n	8009532 <set_temperature+0x2a2>
			for(int j = 0; j < 8; j++)
 8009508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800950c:	3301      	adds	r3, #1
 800950e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009516:	2b07      	cmp	r3, #7
 8009518:	f77f af66 	ble.w	80093e8 <set_temperature+0x158>
			break;
 800951c:	e009      	b.n	8009532 <set_temperature+0x2a2>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 800951e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009522:	3301      	adds	r3, #1
 8009524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800952c:	2b01      	cmp	r3, #1
 800952e:	f77f aec6 	ble.w	80092be <set_temperature+0x2e>
		}
	}
}
 8009532:	bf00      	nop
 8009534:	37a4      	adds	r7, #164	; 0xa4
 8009536:	46bd      	mov	sp, r7
 8009538:	bd90      	pop	{r4, r7, pc}
 800953a:	bf00      	nop
 800953c:	0802148c 	.word	0x0802148c
 8009540:	20002048 	.word	0x20002048
 8009544:	20001198 	.word	0x20001198
 8009548:	20000030 	.word	0x20000030
 800954c:	20000060 	.word	0x20000060
 8009550:	08021588 	.word	0x08021588
 8009554:	08021510 	.word	0x08021510
 8009558:	080214dc 	.word	0x080214dc
 800955c:	2000200c 	.word	0x2000200c
 8009560:	08021594 	.word	0x08021594
 8009564:	0802159c 	.word	0x0802159c
 8009568:	080215b0 	.word	0x080215b0

0800956c <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <sensors_Reset+0x54>)
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	4a12      	ldr	r2, [pc, #72]	; (80095c0 <sensors_Reset+0x54>)
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 800957e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009582:	f7fb f99d 	bl	80048c0 <delay_micros>
	SET_HIGH;					//высокий уровень
 8009586:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <sensors_Reset+0x54>)
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	4a0d      	ldr	r2, [pc, #52]	; (80095c0 <sensors_Reset+0x54>)
 800958c:	f043 0301 	orr.w	r3, r3, #1
 8009590:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 8009592:	203c      	movs	r0, #60	; 0x3c
 8009594:	f7fb f994 	bl	80048c0 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <sensors_Reset+0x54>)
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 80095a4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80095a8:	f7fb f98a 	bl	80048c0 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	2300      	moveq	r3, #0
 80095b6:	b2db      	uxtb	r3, r3
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	40020c00 	.word	0x40020c00

080095c4 <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <sensors_ReadBit+0x54>)
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	4a11      	ldr	r2, [pc, #68]	; (8009618 <sensors_ReadBit+0x54>)
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 80095da:	2001      	movs	r0, #1
 80095dc:	f7fb f970 	bl	80048c0 <delay_micros>
	SET_HIGH;							//высокий уровень
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <sensors_ReadBit+0x54>)
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <sensors_ReadBit+0x54>)
 80095e6:	f043 0301 	orr.w	r3, r3, #1
 80095ea:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 80095ec:	200e      	movs	r0, #14
 80095ee:	f7fb f967 	bl	80048c0 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 80095f2:	4b09      	ldr	r3, [pc, #36]	; (8009618 <sensors_ReadBit+0x54>)
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	2300      	moveq	r3, #0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 8009606:	202d      	movs	r0, #45	; 0x2d
 8009608:	f7fb f95a 	bl	80048c0 <delay_micros>

	return bit;
 800960c:	79fb      	ldrb	r3, [r7, #7]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40020c00 	.word	0x40020c00

0800961c <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 8009626:	2300      	movs	r3, #0
 8009628:	71bb      	strb	r3, [r7, #6]
 800962a:	e00d      	b.n	8009648 <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 800962c:	f7ff ffca 	bl	80095c4 <sensors_ReadBit>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	79bb      	ldrb	r3, [r7, #6]
 8009636:	fa02 f303 	lsl.w	r3, r2, r3
 800963a:	b2da      	uxtb	r2, r3
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	4413      	add	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 8009642:	79bb      	ldrb	r3, [r7, #6]
 8009644:	3301      	adds	r3, #1
 8009646:	71bb      	strb	r3, [r7, #6]
 8009648:	79bb      	ldrb	r3, [r7, #6]
 800964a:	2b07      	cmp	r3, #7
 800964c:	d9ee      	bls.n	800962c <sensors_ReadByte+0x10>

	return data;
 800964e:	79fb      	ldrb	r3, [r7, #7]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 8009662:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <sensors_WriteBit+0x50>)
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	4a10      	ldr	r2, [pc, #64]	; (80096a8 <sensors_WriteBit+0x50>)
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <sensors_WriteBit+0x20>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <sensors_WriteBit+0x22>
 8009678:	233c      	movs	r3, #60	; 0x3c
 800967a:	4618      	mov	r0, r3
 800967c:	f7fb f920 	bl	80048c0 <delay_micros>
	SET_HIGH;
 8009680:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <sensors_WriteBit+0x50>)
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <sensors_WriteBit+0x50>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <sensors_WriteBit+0x3e>
 8009692:	233c      	movs	r3, #60	; 0x3c
 8009694:	e000      	b.n	8009698 <sensors_WriteBit+0x40>
 8009696:	2301      	movs	r3, #1
 8009698:	4618      	mov	r0, r3
 800969a:	f7fb f911 	bl	80048c0 <delay_micros>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40020c00 	.word	0x40020c00

080096ac <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e010      	b.n	80096de <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 80096bc:	79fa      	ldrb	r2, [r7, #7]
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	fa42 f303 	asr.w	r3, r2, r3
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff ffc3 	bl	8009658 <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 80096d2:	2005      	movs	r0, #5
 80096d4:	f7fb f8f4 	bl	80048c0 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	3301      	adds	r3, #1
 80096dc:	73fb      	strb	r3, [r7, #15]
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	d9eb      	bls.n	80096bc <sensors_WriteByte+0x10>
	}
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 8009700:	2301      	movs	r3, #1
 8009702:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 8009708:	4b55      	ldr	r3, [pc, #340]	; (8009860 <sensors_SearchRom+0x174>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d104      	bne.n	800971a <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 8009710:	f7ff ff2c 	bl	800956c <sensors_Reset>
		sensors_WriteByte(0xF0);
 8009714:	20f0      	movs	r0, #240	; 0xf0
 8009716:	f7ff ffc9 	bl	80096ac <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 800971a:	f7ff ff53 	bl	80095c4 <sensors_ReadBit>
 800971e:	4603      	mov	r3, r0
 8009720:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 8009722:	f7ff ff4f 	bl	80095c4 <sensors_ReadBit>
 8009726:	4603      	mov	r3, r0
 8009728:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d102      	bne.n	8009736 <sensors_SearchRom+0x4a>
 8009730:	7abb      	ldrb	r3, [r7, #10]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d05c      	beq.n	80097f0 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 8009736:	7afa      	ldrb	r2, [r7, #11]
 8009738:	7abb      	ldrb	r3, [r7, #10]
 800973a:	429a      	cmp	r2, r3
 800973c:	d002      	beq.n	8009744 <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	74bb      	strb	r3, [r7, #18]
 8009742:	e025      	b.n	8009790 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 8009744:	4b47      	ldr	r3, [pc, #284]	; (8009864 <sensors_SearchRom+0x178>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	7dfa      	ldrb	r2, [r7, #23]
 800974a:	429a      	cmp	r2, r3
 800974c:	d20c      	bcs.n	8009768 <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800974e:	7d7b      	ldrb	r3, [r7, #21]
 8009750:	4a45      	ldr	r2, [pc, #276]	; (8009868 <sensors_SearchRom+0x17c>)
 8009752:	5cd2      	ldrb	r2, [r2, r3]
 8009754:	7cfb      	ldrb	r3, [r7, #19]
 8009756:	4013      	ands	r3, r2
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	bf14      	ite	ne
 800975e:	2301      	movne	r3, #1
 8009760:	2300      	moveq	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	74bb      	strb	r3, [r7, #18]
 8009766:	e008      	b.n	800977a <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 8009768:	4b3e      	ldr	r3, [pc, #248]	; (8009864 <sensors_SearchRom+0x178>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	7dfa      	ldrb	r2, [r7, #23]
 800976e:	429a      	cmp	r2, r3
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 800977a:	7cbb      	ldrb	r3, [r7, #18]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 8009784:	7dbb      	ldrb	r3, [r7, #22]
 8009786:	2b08      	cmp	r3, #8
 8009788:	d802      	bhi.n	8009790 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 800978a:	4a38      	ldr	r2, [pc, #224]	; (800986c <sensors_SearchRom+0x180>)
 800978c:	7dbb      	ldrb	r3, [r7, #22]
 800978e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 8009790:	7cbb      	ldrb	r3, [r7, #18]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d109      	bne.n	80097aa <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 8009796:	7d7b      	ldrb	r3, [r7, #21]
 8009798:	4a33      	ldr	r2, [pc, #204]	; (8009868 <sensors_SearchRom+0x17c>)
 800979a:	5cd1      	ldrb	r1, [r2, r3]
 800979c:	7d7b      	ldrb	r3, [r7, #21]
 800979e:	7cfa      	ldrb	r2, [r7, #19]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	b2d1      	uxtb	r1, r2
 80097a4:	4a30      	ldr	r2, [pc, #192]	; (8009868 <sensors_SearchRom+0x17c>)
 80097a6:	54d1      	strb	r1, [r2, r3]
 80097a8:	e00d      	b.n	80097c6 <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80097aa:	7d7b      	ldrb	r3, [r7, #21]
 80097ac:	4a2e      	ldr	r2, [pc, #184]	; (8009868 <sensors_SearchRom+0x17c>)
 80097ae:	5cd3      	ldrb	r3, [r2, r3]
 80097b0:	b25a      	sxtb	r2, r3
 80097b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097b6:	43db      	mvns	r3, r3
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	4013      	ands	r3, r2
 80097bc:	b25a      	sxtb	r2, r3
 80097be:	7d7b      	ldrb	r3, [r7, #21]
 80097c0:	b2d1      	uxtb	r1, r2
 80097c2:	4a29      	ldr	r2, [pc, #164]	; (8009868 <sensors_SearchRom+0x17c>)
 80097c4:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 80097c6:	7cbb      	ldrb	r3, [r7, #18]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff ff45 	bl	8009658 <sensors_WriteBit>
			id_bit_number++;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	3301      	adds	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 80097d4:	7cfb      	ldrb	r3, [r7, #19]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 80097da:	7cfb      	ldrb	r3, [r7, #19]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 80097e0:	7d7b      	ldrb	r3, [r7, #21]
 80097e2:	3301      	adds	r3, #1
 80097e4:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 80097e6:	2301      	movs	r3, #1
 80097e8:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 80097ea:	7d7b      	ldrb	r3, [r7, #21]
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d994      	bls.n	800971a <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	2b40      	cmp	r3, #64	; 0x40
 80097f4:	d90b      	bls.n	800980e <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 80097f6:	4a1b      	ldr	r2, [pc, #108]	; (8009864 <sensors_SearchRom+0x178>)
 80097f8:	7dbb      	ldrb	r3, [r7, #22]
 80097fa:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <sensors_SearchRom+0x178>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 8009804:	4b16      	ldr	r3, [pc, #88]	; (8009860 <sensors_SearchRom+0x174>)
 8009806:	2201      	movs	r2, #1
 8009808:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 800980a:	2301      	movs	r3, #1
 800980c:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 800980e:	7d3b      	ldrb	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <sensors_SearchRom+0x130>
 8009814:	4b14      	ldr	r3, [pc, #80]	; (8009868 <sensors_SearchRom+0x17c>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10b      	bne.n	8009834 <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <sensors_SearchRom+0x178>)
 800981e:	2200      	movs	r2, #0
 8009820:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <sensors_SearchRom+0x174>)
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 8009828:	4b10      	ldr	r3, [pc, #64]	; (800986c <sensors_SearchRom+0x180>)
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	753b      	strb	r3, [r7, #20]
 8009832:	e010      	b.n	8009856 <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	e00a      	b.n	8009850 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	4909      	ldr	r1, [pc, #36]	; (8009868 <sensors_SearchRom+0x17c>)
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	440a      	add	r2, r1
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b07      	cmp	r3, #7
 8009854:	ddf1      	ble.n	800983a <sensors_SearchRom+0x14e>
	}
	return search_result;
 8009856:	7d3b      	ldrb	r3, [r7, #20]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20002046 	.word	0x20002046
 8009864:	20002047 	.word	0x20002047
 8009868:	2000203c 	.word	0x2000203c
 800986c:	20002045 	.word	0x20002045

08009870 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	2300      	movs	r3, #0
 8009880:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d116      	bne.n	80098b6 <sensors_init+0x46>
	{
		if(sensors_Reset())
 8009888:	f7ff fe70 	bl	800956c <sensors_Reset>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <sensors_init+0x26>
			return 1;
 8009892:	2301      	movs	r3, #1
 8009894:	e06b      	b.n	800996e <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8009896:	20cc      	movs	r0, #204	; 0xcc
 8009898:	f7ff ff08 	bl	80096ac <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 800989c:	204e      	movs	r0, #78	; 0x4e
 800989e:	f7ff ff05 	bl	80096ac <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 80098a2:	2064      	movs	r0, #100	; 0x64
 80098a4:	f7ff ff02 	bl	80096ac <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 80098a8:	209e      	movs	r0, #158	; 0x9e
 80098aa:	f7ff feff 	bl	80096ac <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 80098ae:	207f      	movs	r0, #127	; 0x7f
 80098b0:	f7ff fefc 	bl	80096ac <sensors_WriteByte>
 80098b4:	e05a      	b.n	800996c <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e01c      	b.n	80098f6 <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff ff13 	bl	80096ec <sensors_SearchRom>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d018      	beq.n	80098fe <sensors_init+0x8e>
			{
				Dev_Cnt++;
 80098cc:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <sensors_init+0x108>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	3301      	adds	r3, #1
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	4b28      	ldr	r3, [pc, #160]	; (8009978 <sensors_init+0x108>)
 80098d6:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 80098d8:	4b27      	ldr	r3, [pc, #156]	; (8009978 <sensors_init+0x108>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	3b01      	subs	r3, #1
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <sensors_init+0x10c>)
 80098e2:	4413      	add	r3, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	cb03      	ldmia	r3!, {r0, r1}
 80098ec:	6010      	str	r0, [r2, #0]
 80098ee:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	3301      	adds	r3, #1
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	dddf      	ble.n	80098bc <sensors_init+0x4c>
 80098fc:	e000      	b.n	8009900 <sensors_init+0x90>
			}
			else break;
 80098fe:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e02c      	b.n	8009960 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 8009906:	f7ff fe31 	bl	800956c <sensors_Reset>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <sensors_init+0xa4>
				return 1;
 8009910:	2301      	movs	r3, #1
 8009912:	e02c      	b.n	800996e <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 8009914:	2055      	movs	r0, #85	; 0x55
 8009916:	f7ff fec9 	bl	80096ac <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800991a:	2300      	movs	r3, #0
 800991c:	613b      	str	r3, [r7, #16]
 800991e:	e00d      	b.n	800993c <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	3b01      	subs	r3, #1
 8009924:	4a15      	ldr	r2, [pc, #84]	; (800997c <sensors_init+0x10c>)
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	441a      	add	r2, r3
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	4413      	add	r3, r2
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff febb 	bl	80096ac <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	3301      	adds	r3, #1
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2b07      	cmp	r3, #7
 8009940:	ddee      	ble.n	8009920 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 8009942:	204e      	movs	r0, #78	; 0x4e
 8009944:	f7ff feb2 	bl	80096ac <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 8009948:	2064      	movs	r0, #100	; 0x64
 800994a:	f7ff feaf 	bl	80096ac <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 800994e:	209e      	movs	r0, #158	; 0x9e
 8009950:	f7ff feac 	bl	80096ac <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 8009954:	207f      	movs	r0, #127	; 0x7f
 8009956:	f7ff fea9 	bl	80096ac <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	3301      	adds	r3, #1
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <sensors_init+0x108>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4293      	cmp	r3, r2
 800996a:	ddcc      	ble.n	8009906 <sensors_init+0x96>
		}
	}
	return 0;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20002044 	.word	0x20002044
 800997c:	20002028 	.word	0x20002028

08009980 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	460a      	mov	r2, r1
 800998a:	71fb      	strb	r3, [r7, #7]
 800998c:	4613      	mov	r3, r2
 800998e:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 8009994:	f7ff fdea 	bl	800956c <sensors_Reset>
	if(mode == SKIP_ROM)
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d103      	bne.n	80099a6 <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 800999e:	20cc      	movs	r0, #204	; 0xcc
 80099a0:	f7ff fe84 	bl	80096ac <sensors_WriteByte>
 80099a4:	e016      	b.n	80099d4 <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 80099a6:	2055      	movs	r0, #85	; 0x55
 80099a8:	f7ff fe80 	bl	80096ac <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e00d      	b.n	80099ce <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 80099b2:	79bb      	ldrb	r3, [r7, #6]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	4a0b      	ldr	r2, [pc, #44]	; (80099e4 <sensors_MeasureTemperCmd+0x64>)
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	441a      	add	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fe72 	bl	80096ac <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	ddee      	ble.n	80099b2 <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 80099d4:	2044      	movs	r0, #68	; 0x44
 80099d6:	f7ff fe69 	bl	80096ac <sensors_WriteByte>
}
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20002028 	.word	0x20002028

080099e8 <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
 80099f4:	4613      	mov	r3, r2
 80099f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 80099f8:	f7ff fdb8 	bl	800956c <sensors_Reset>
	if(mode == SKIP_ROM)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8009a02:	20cc      	movs	r0, #204	; 0xcc
 8009a04:	f7ff fe52 	bl	80096ac <sensors_WriteByte>
 8009a08:	e016      	b.n	8009a38 <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8009a0a:	2055      	movs	r0, #85	; 0x55
 8009a0c:	f7ff fe4e 	bl	80096ac <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	e00d      	b.n	8009a32 <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8009a16:	79bb      	ldrb	r3, [r7, #6]
 8009a18:	1e5a      	subs	r2, r3, #1
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	4912      	ldr	r1, [pc, #72]	; (8009a68 <sensors_ReadStratcpad+0x80>)
 8009a1e:	00d2      	lsls	r2, r2, #3
 8009a20:	440a      	add	r2, r1
 8009a22:	4413      	add	r3, r2
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fe40 	bl	80096ac <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	2b07      	cmp	r3, #7
 8009a36:	d9ee      	bls.n	8009a16 <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 8009a38:	20be      	movs	r0, #190	; 0xbe
 8009a3a:	f7ff fe37 	bl	80096ac <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
 8009a42:	e009      	b.n	8009a58 <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	18d4      	adds	r4, r2, r3
 8009a4a:	f7ff fde7 	bl	800961c <sensors_ReadByte>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	3301      	adds	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b07      	cmp	r3, #7
 8009a5c:	d9f2      	bls.n	8009a44 <sensors_ReadStratcpad+0x5c>
	}
}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd90      	pop	{r4, r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20002028 	.word	0x20002028

08009a6c <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <sensors_GetSign+0x18>
		return 1;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <sensors_GetSign+0x1a>
	else
		return 0;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	4603      	mov	r3, r0
 8009a9a:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	111b      	asrs	r3, r3, #4
 8009aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aac:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	f003 030f 	and.w	r3, r3, #15
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009abe:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8009ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8009aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ace:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	ee07 3a90 	vmov	s15, r3
}
 8009ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 8009ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aea:	b08b      	sub	sp, #44	; 0x2c
 8009aec:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 8009aee:	2001      	movs	r0, #1
 8009af0:	f7ff febe 	bl	8009870 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
 8009af8:	e079      	b.n	8009bee <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 8009afa:	7bfa      	ldrb	r2, [r7, #15]
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4a42      	ldr	r2, [pc, #264]	; (8009c10 <UpdateTempSens+0x128>)
 8009b06:	1898      	adds	r0, r3, r2
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4a42      	ldr	r2, [pc, #264]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b0c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009b10:	469c      	mov	ip, r3
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	4a3f      	ldr	r2, [pc, #252]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4413      	add	r3, r2
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	4a3c      	ldr	r2, [pc, #240]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4413      	add	r3, r2
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	4a39      	ldr	r2, [pc, #228]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	78db      	ldrb	r3, [r3, #3]
 8009b34:	461c      	mov	r4, r3
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4a36      	ldr	r2, [pc, #216]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	791b      	ldrb	r3, [r3, #4]
 8009b40:	461d      	mov	r5, r3
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4a33      	ldr	r2, [pc, #204]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	4413      	add	r3, r2
 8009b4a:	795b      	ldrb	r3, [r3, #5]
 8009b4c:	461e      	mov	r6, r3
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	4a30      	ldr	r2, [pc, #192]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	799b      	ldrb	r3, [r3, #6]
 8009b58:	607b      	str	r3, [r7, #4]
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4a2d      	ldr	r2, [pc, #180]	; (8009c14 <UpdateTempSens+0x12c>)
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	4413      	add	r3, r2
 8009b62:	79db      	ldrb	r3, [r3, #7]
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	9603      	str	r6, [sp, #12]
 8009b6c:	9502      	str	r5, [sp, #8]
 8009b6e:	9401      	str	r4, [sp, #4]
 8009b70:	9100      	str	r1, [sp, #0]
 8009b72:	4673      	mov	r3, lr
 8009b74:	4662      	mov	r2, ip
 8009b76:	4928      	ldr	r1, [pc, #160]	; (8009c18 <UpdateTempSens+0x130>)
 8009b78:	f012 fae2 	bl	801c140 <siprintf>
		//----------------------from debug---------------------------
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 8009b7c:	7bfa      	ldrb	r2, [r7, #15]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4a22      	ldr	r2, [pc, #136]	; (8009c10 <UpdateTempSens+0x128>)
 8009b88:	4413      	add	r3, r2
 8009b8a:	4924      	ldr	r1, [pc, #144]	; (8009c1c <UpdateTempSens+0x134>)
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7f6 fb1f 	bl	80001d0 <strcmp>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10c      	bne.n	8009bb2 <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009b98:	7bfa      	ldrb	r2, [r7, #15]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4a1b      	ldr	r2, [pc, #108]	; (8009c10 <UpdateTempSens+0x128>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f9 f8e0 	bl	8002d6c <SEND_str>
			SEND_str(" - YES\n");
 8009bac:	481c      	ldr	r0, [pc, #112]	; (8009c20 <UpdateTempSens+0x138>)
 8009bae:	f7f9 f8dd 	bl	8002d6c <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 8009bb2:	7bfa      	ldrb	r2, [r7, #15]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <UpdateTempSens+0x128>)
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4918      	ldr	r1, [pc, #96]	; (8009c24 <UpdateTempSens+0x13c>)
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7f6 fb04 	bl	80001d0 <strcmp>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10c      	bne.n	8009be8 <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009bce:	7bfa      	ldrb	r2, [r7, #15]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4a0d      	ldr	r2, [pc, #52]	; (8009c10 <UpdateTempSens+0x128>)
 8009bda:	4413      	add	r3, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7f9 f8c5 	bl	8002d6c <SEND_str>
			SEND_str(" - YES\n");
 8009be2:	480f      	ldr	r0, [pc, #60]	; (8009c20 <UpdateTempSens+0x138>)
 8009be4:	f7f9 f8c2 	bl	8002d6c <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	3301      	adds	r3, #1
 8009bec:	73fb      	strb	r3, [r7, #15]
 8009bee:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <UpdateTempSens+0x140>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	7bfa      	ldrb	r2, [r7, #15]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d380      	bcc.n	8009afa <UpdateTempSens+0x12>
		}
		//-----------------------------------------------------------
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <UpdateTempSens+0x144>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f06f 0201 	mvn.w	r2, #1
 8009c00:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 8009c02:	480a      	ldr	r0, [pc, #40]	; (8009c2c <UpdateTempSens+0x144>)
 8009c04:	f003 ff9b 	bl	800db3e <HAL_TIM_Base_Start_IT>
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c10:	20002048 	.word	0x20002048
 8009c14:	20002028 	.word	0x20002028
 8009c18:	080215c4 	.word	0x080215c4
 8009c1c:	080215e8 	.word	0x080215e8
 8009c20:	080215fc 	.word	0x080215fc
 8009c24:	08021604 	.word	0x08021604
 8009c28:	20002044 	.word	0x20002044
 8009c2c:	20001b9c 	.word	0x20001b9c

08009c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <HAL_Init+0x40>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a0d      	ldr	r2, [pc, #52]	; (8009c70 <HAL_Init+0x40>)
 8009c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c40:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <HAL_Init+0x40>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a0a      	ldr	r2, [pc, #40]	; (8009c70 <HAL_Init+0x40>)
 8009c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c4c:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <HAL_Init+0x40>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a07      	ldr	r2, [pc, #28]	; (8009c70 <HAL_Init+0x40>)
 8009c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c58:	2003      	movs	r0, #3
 8009c5a:	f000 fcf9 	bl	800a650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f7f9 ff18 	bl	8003a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c64:	f7f9 feee 	bl	8003a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40023c00 	.word	0x40023c00

08009c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <HAL_IncTick+0x20>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <HAL_IncTick+0x24>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4413      	add	r3, r2
 8009c84:	4a04      	ldr	r2, [pc, #16]	; (8009c98 <HAL_IncTick+0x24>)
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000074 	.word	0x20000074
 8009c98:	20002070 	.word	0x20002070

08009c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8009ca0:	4b03      	ldr	r3, [pc, #12]	; (8009cb0 <HAL_GetTick+0x14>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20002070 	.word	0x20002070

08009cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cbc:	f7ff ffee 	bl	8009c9c <HAL_GetTick>
 8009cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d005      	beq.n	8009cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_Delay+0x40>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009cda:	bf00      	nop
 8009cdc:	f7ff ffde 	bl	8009c9c <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d8f7      	bhi.n	8009cdc <HAL_Delay+0x28>
  {
  }
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20000074 	.word	0x20000074

08009cf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e033      	b.n	8009d76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d109      	bne.n	8009d2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7f8 ff98 	bl	8002c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d118      	bne.n	8009d68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d3e:	f023 0302 	bic.w	r3, r3, #2
 8009d42:	f043 0202 	orr.w	r2, r3, #2
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa40 	bl	800a1d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	f043 0201 	orr.w	r2, r3, #1
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40
 8009d66:	e001      	b.n	8009d6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_ADC_Start_DMA+0x1e>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e0cc      	b.n	8009f38 <HAL_ADC_Start_DMA+0x1b8>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d018      	beq.n	8009de6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0201 	orr.w	r2, r2, #1
 8009dc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009dc4:	4b5e      	ldr	r3, [pc, #376]	; (8009f40 <HAL_ADC_Start_DMA+0x1c0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a5e      	ldr	r2, [pc, #376]	; (8009f44 <HAL_ADC_Start_DMA+0x1c4>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	0c9a      	lsrs	r2, r3, #18
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	4413      	add	r3, r2
 8009dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009dd8:	e002      	b.n	8009de0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f9      	bne.n	8009dda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	f040 80a0 	bne.w	8009f36 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009dfe:	f023 0301 	bic.w	r3, r3, #1
 8009e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d007      	beq.n	8009e28 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e34:	d106      	bne.n	8009e44 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3a:	f023 0206 	bic.w	r2, r3, #6
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	645a      	str	r2, [r3, #68]	; 0x44
 8009e42:	e002      	b.n	8009e4a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e52:	4b3d      	ldr	r3, [pc, #244]	; (8009f48 <HAL_ADC_Start_DMA+0x1c8>)
 8009e54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	4a3c      	ldr	r2, [pc, #240]	; (8009f4c <HAL_ADC_Start_DMA+0x1cc>)
 8009e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	4a3b      	ldr	r2, [pc, #236]	; (8009f50 <HAL_ADC_Start_DMA+0x1d0>)
 8009e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	4a3a      	ldr	r2, [pc, #232]	; (8009f54 <HAL_ADC_Start_DMA+0x1d4>)
 8009e6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	334c      	adds	r3, #76	; 0x4c
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f000 fd08 	bl	800a8bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 031f 	and.w	r3, r3, #31
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d12a      	bne.n	8009f0e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <HAL_ADC_Start_DMA+0x1d8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d015      	beq.n	8009eee <HAL_ADC_Start_DMA+0x16e>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a25      	ldr	r2, [pc, #148]	; (8009f5c <HAL_ADC_Start_DMA+0x1dc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d105      	bne.n	8009ed8 <HAL_ADC_Start_DMA+0x158>
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <HAL_ADC_Start_DMA+0x1c8>)
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f003 031f 	and.w	r3, r3, #31
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a20      	ldr	r2, [pc, #128]	; (8009f60 <HAL_ADC_Start_DMA+0x1e0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d129      	bne.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <HAL_ADC_Start_DMA+0x1c8>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f003 031f 	and.w	r3, r3, #31
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d823      	bhi.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11c      	bne.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f0a:	609a      	str	r2, [r3, #8]
 8009f0c:	e013      	b.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <HAL_ADC_Start_DMA+0x1d8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d10e      	bne.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d107      	bne.n	8009f36 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f34:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000008 	.word	0x20000008
 8009f44:	431bde83 	.word	0x431bde83
 8009f48:	40012300 	.word	0x40012300
 8009f4c:	0800a3c9 	.word	0x0800a3c9
 8009f50:	0800a483 	.word	0x0800a483
 8009f54:	0800a49f 	.word	0x0800a49f
 8009f58:	40012000 	.word	0x40012000
 8009f5c:	40012100 	.word	0x40012100
 8009f60:	40012200 	.word	0x40012200

08009f64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_ADC_ConfigChannel+0x1c>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e105      	b.n	800a1b4 <HAL_ADC_ConfigChannel+0x228>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d925      	bls.n	800a004 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68d9      	ldr	r1, [r3, #12]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	4413      	add	r3, r2
 8009fcc:	3b1e      	subs	r3, #30
 8009fce:	2207      	movs	r2, #7
 8009fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd4:	43da      	mvns	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	400a      	ands	r2, r1
 8009fdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68d9      	ldr	r1, [r3, #12]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4618      	mov	r0, r3
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	4403      	add	r3, r0
 8009ff6:	3b1e      	subs	r3, #30
 8009ff8:	409a      	lsls	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	e022      	b.n	800a04a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6919      	ldr	r1, [r3, #16]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	4613      	mov	r3, r2
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	4413      	add	r3, r2
 800a018:	2207      	movs	r2, #7
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	400a      	ands	r2, r1
 800a026:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6919      	ldr	r1, [r3, #16]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	4618      	mov	r0, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4403      	add	r3, r0
 800a040:	409a      	lsls	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d824      	bhi.n	800a09c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	3b05      	subs	r3, #5
 800a064:	221f      	movs	r2, #31
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	43da      	mvns	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	400a      	ands	r2, r1
 800a072:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	3b05      	subs	r3, #5
 800a08e:	fa00 f203 	lsl.w	r2, r0, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	635a      	str	r2, [r3, #52]	; 0x34
 800a09a:	e04c      	b.n	800a136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	d824      	bhi.n	800a0ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3b23      	subs	r3, #35	; 0x23
 800a0b6:	221f      	movs	r2, #31
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43da      	mvns	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	400a      	ands	r2, r1
 800a0c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	3b23      	subs	r3, #35	; 0x23
 800a0e0:	fa00 f203 	lsl.w	r2, r0, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ec:	e023      	b.n	800a136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3b41      	subs	r3, #65	; 0x41
 800a100:	221f      	movs	r2, #31
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	43da      	mvns	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	400a      	ands	r2, r1
 800a10e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4618      	mov	r0, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	3b41      	subs	r3, #65	; 0x41
 800a12a:	fa00 f203 	lsl.w	r2, r0, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a136:	4b22      	ldr	r3, [pc, #136]	; (800a1c0 <HAL_ADC_ConfigChannel+0x234>)
 800a138:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a21      	ldr	r2, [pc, #132]	; (800a1c4 <HAL_ADC_ConfigChannel+0x238>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d109      	bne.n	800a158 <HAL_ADC_ConfigChannel+0x1cc>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b12      	cmp	r3, #18
 800a14a:	d105      	bne.n	800a158 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <HAL_ADC_ConfigChannel+0x238>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d123      	bne.n	800a1aa <HAL_ADC_ConfigChannel+0x21e>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b10      	cmp	r3, #16
 800a168:	d003      	beq.n	800a172 <HAL_ADC_ConfigChannel+0x1e6>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b11      	cmp	r3, #17
 800a170:	d11b      	bne.n	800a1aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b10      	cmp	r3, #16
 800a184:	d111      	bne.n	800a1aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <HAL_ADC_ConfigChannel+0x23c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <HAL_ADC_ConfigChannel+0x240>)
 800a18c:	fba2 2303 	umull	r2, r3, r2, r3
 800a190:	0c9a      	lsrs	r2, r3, #18
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a19c:	e002      	b.n	800a1a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f9      	bne.n	800a19e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40012300 	.word	0x40012300
 800a1c4:	40012000 	.word	0x40012000
 800a1c8:	20000008 	.word	0x20000008
 800a1cc:	431bde83 	.word	0x431bde83

0800a1d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a1d8:	4b79      	ldr	r3, [pc, #484]	; (800a3c0 <ADC_Init+0x1f0>)
 800a1da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6859      	ldr	r1, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	021a      	lsls	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6859      	ldr	r1, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a24a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6899      	ldr	r1, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a262:	4a58      	ldr	r2, [pc, #352]	; (800a3c4 <ADC_Init+0x1f4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d022      	beq.n	800a2ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6899      	ldr	r1, [r3, #8]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6899      	ldr	r1, [r3, #8]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	609a      	str	r2, [r3, #8]
 800a2ac:	e00f      	b.n	800a2ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0202 	bic.w	r2, r2, #2
 800a2dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6899      	ldr	r1, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7e1b      	ldrb	r3, [r3, #24]
 800a2e8:	005a      	lsls	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01b      	beq.n	800a334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a30a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a31a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6859      	ldr	r1, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	3b01      	subs	r3, #1
 800a328:	035a      	lsls	r2, r3, #13
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	e007      	b.n	800a344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	3b01      	subs	r3, #1
 800a360:	051a      	lsls	r2, r3, #20
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6899      	ldr	r1, [r3, #8]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a386:	025a      	lsls	r2, r3, #9
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6899      	ldr	r1, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	029a      	lsls	r2, r3, #10
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	609a      	str	r2, [r3, #8]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	40012300 	.word	0x40012300
 800a3c4:	0f000001 	.word	0x0f000001

0800a3c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d13c      	bne.n	800a45c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d12b      	bne.n	800a454 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a400:	2b00      	cmp	r3, #0
 800a402:	d127      	bne.n	800a454 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d006      	beq.n	800a420 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d119      	bne.n	800a454 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0220 	bic.w	r2, r2, #32
 800a42e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	f043 0201 	orr.w	r2, r3, #1
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7f9 f8e5 	bl	8003624 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a45a:	e00e      	b.n	800a47a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a460:	f003 0310 	and.w	r3, r3, #16
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fd85 	bl	8009f78 <HAL_ADC_ErrorCallback>
}
 800a46e:	e004      	b.n	800a47a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fd67 	bl	8009f64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2240      	movs	r2, #64	; 0x40
 800a4b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	f043 0204 	orr.w	r2, r3, #4
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fd5a 	bl	8009f78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <__NVIC_SetPriorityGrouping+0x44>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4fe:	4a04      	ldr	r2, [pc, #16]	; (800a510 <__NVIC_SetPriorityGrouping+0x44>)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	60d3      	str	r3, [r2, #12]
}
 800a504:	bf00      	nop
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	e000ed00 	.word	0xe000ed00

0800a514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <__NVIC_GetPriorityGrouping+0x18>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	0a1b      	lsrs	r3, r3, #8
 800a51e:	f003 0307 	and.w	r3, r3, #7
}
 800a522:	4618      	mov	r0, r3
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	e000ed00 	.word	0xe000ed00

0800a530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a53a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	db0b      	blt.n	800a55a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	f003 021f 	and.w	r2, r3, #31
 800a548:	4907      	ldr	r1, [pc, #28]	; (800a568 <__NVIC_EnableIRQ+0x38>)
 800a54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a54e:	095b      	lsrs	r3, r3, #5
 800a550:	2001      	movs	r0, #1
 800a552:	fa00 f202 	lsl.w	r2, r0, r2
 800a556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	e000e100 	.word	0xe000e100

0800a56c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	db0a      	blt.n	800a596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	b2da      	uxtb	r2, r3
 800a584:	490c      	ldr	r1, [pc, #48]	; (800a5b8 <__NVIC_SetPriority+0x4c>)
 800a586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a58a:	0112      	lsls	r2, r2, #4
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	440b      	add	r3, r1
 800a590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a594:	e00a      	b.n	800a5ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	4908      	ldr	r1, [pc, #32]	; (800a5bc <__NVIC_SetPriority+0x50>)
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	3b04      	subs	r3, #4
 800a5a4:	0112      	lsls	r2, r2, #4
 800a5a6:	b2d2      	uxtb	r2, r2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	761a      	strb	r2, [r3, #24]
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	e000e100 	.word	0xe000e100
 800a5bc:	e000ed00 	.word	0xe000ed00

0800a5c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b089      	sub	sp, #36	; 0x24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f1c3 0307 	rsb	r3, r3, #7
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	bf28      	it	cs
 800a5de:	2304      	movcs	r3, #4
 800a5e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	2b06      	cmp	r3, #6
 800a5e8:	d902      	bls.n	800a5f0 <NVIC_EncodePriority+0x30>
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	3b03      	subs	r3, #3
 800a5ee:	e000      	b.n	800a5f2 <NVIC_EncodePriority+0x32>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fe:	43da      	mvns	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	401a      	ands	r2, r3
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a608:	f04f 31ff 	mov.w	r1, #4294967295
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	fa01 f303 	lsl.w	r3, r1, r3
 800a612:	43d9      	mvns	r1, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a618:	4313      	orrs	r3, r2
         );
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3724      	adds	r7, #36	; 0x24
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a62c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <__NVIC_SystemReset+0x20>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a638:	4903      	ldr	r1, [pc, #12]	; (800a648 <__NVIC_SystemReset+0x20>)
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <__NVIC_SystemReset+0x24>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60cb      	str	r3, [r1, #12]
 800a640:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a644:	bf00      	nop
 800a646:	e7fd      	b.n	800a644 <__NVIC_SystemReset+0x1c>
 800a648:	e000ed00 	.word	0xe000ed00
 800a64c:	05fa0004 	.word	0x05fa0004

0800a650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ff37 	bl	800a4cc <__NVIC_SetPriorityGrouping>
}
 800a65e:	bf00      	nop
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	4603      	mov	r3, r0
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a678:	f7ff ff4c 	bl	800a514 <__NVIC_GetPriorityGrouping>
 800a67c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	6978      	ldr	r0, [r7, #20]
 800a684:	f7ff ff9c 	bl	800a5c0 <NVIC_EncodePriority>
 800a688:	4602      	mov	r2, r0
 800a68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff ff6b 	bl	800a56c <__NVIC_SetPriority>
}
 800a696:	bf00      	nop
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff ff3f 	bl	800a530 <__NVIC_EnableIRQ>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a6be:	f7ff ffb3 	bl	800a628 <__NVIC_SystemReset>

0800a6c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e00e      	b.n	800a6f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	795b      	ldrb	r3, [r3, #5]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7f8 fd1f 	bl	8003128 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800a706:	2300      	movs	r3, #0
 800a708:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2202      	movs	r2, #2
 800a70e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0201 	orr.w	r2, r2, #1
 800a71e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	e00a      	b.n	800a73c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6812      	ldr	r2, [r2, #0]
 800a734:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	3301      	adds	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d3f0      	bcc.n	800a726 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2201      	movs	r2, #1
 800a750:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800a752:	693b      	ldr	r3, [r7, #16]
}
 800a754:	4618      	mov	r0, r3
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a76c:	f7ff fa96 	bl	8009c9c <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e099      	b.n	800a8b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a79c:	e00f      	b.n	800a7be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a79e:	f7ff fa7d 	bl	8009c9c <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d908      	bls.n	800a7be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e078      	b.n	800a8b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e8      	bne.n	800a79e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4b38      	ldr	r3, [pc, #224]	; (800a8b8 <HAL_DMA_Init+0x158>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b04      	cmp	r3, #4
 800a816:	d107      	bne.n	800a828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a820:	4313      	orrs	r3, r2
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d117      	bne.n	800a882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4313      	orrs	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00e      	beq.n	800a882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fa91 	bl	800ad8c <DMA_CheckFifoParam>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d008      	beq.n	800a882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2240      	movs	r2, #64	; 0x40
 800a874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a87e:	2301      	movs	r3, #1
 800a880:	e016      	b.n	800a8b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa48 	bl	800ad20 <DMA_CalcBaseAndBitshift>
 800a890:	4603      	mov	r3, r0
 800a892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a898:	223f      	movs	r2, #63	; 0x3f
 800a89a:	409a      	lsls	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	f010803f 	.word	0xf010803f

0800a8bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <HAL_DMA_Start_IT+0x26>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e040      	b.n	800a964 <HAL_DMA_Start_IT+0xa8>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d12f      	bne.n	800a956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f9da 	bl	800acc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a914:	223f      	movs	r2, #63	; 0x3f
 800a916:	409a      	lsls	r2, r3
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f042 0216 	orr.w	r2, r2, #22
 800a92a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0208 	orr.w	r2, r2, #8
 800a942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0201 	orr.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e005      	b.n	800a962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a95e:	2302      	movs	r3, #2
 800a960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d004      	beq.n	800a98a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2280      	movs	r2, #128	; 0x80
 800a984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e00c      	b.n	800a9a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2205      	movs	r2, #5
 800a98e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a9bc:	4b92      	ldr	r3, [pc, #584]	; (800ac08 <HAL_DMA_IRQHandler+0x258>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a92      	ldr	r2, [pc, #584]	; (800ac0c <HAL_DMA_IRQHandler+0x25c>)
 800a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c6:	0a9b      	lsrs	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	2208      	movs	r2, #8
 800a9dc:	409a      	lsls	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01a      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d013      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0204 	bic.w	r2, r2, #4
 800aa02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa08:	2208      	movs	r2, #8
 800aa0a:	409a      	lsls	r2, r3
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	2201      	movs	r2, #1
 800aa22:	409a      	lsls	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4013      	ands	r3, r2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d012      	beq.n	800aa52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00b      	beq.n	800aa52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3e:	2201      	movs	r2, #1
 800aa40:	409a      	lsls	r2, r3
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4a:	f043 0202 	orr.w	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	2204      	movs	r2, #4
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d012      	beq.n	800aa88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa74:	2204      	movs	r2, #4
 800aa76:	409a      	lsls	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa80:	f043 0204 	orr.w	r2, r3, #4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	2210      	movs	r2, #16
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d043      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d03c      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaaa:	2210      	movs	r2, #16
 800aaac:	409a      	lsls	r2, r3
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d018      	beq.n	800aaf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d108      	bne.n	800aae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d024      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
 800aade:	e01f      	b.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01b      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
 800aaf0:	e016      	b.n	800ab20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d107      	bne.n	800ab10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0208 	bic.w	r2, r2, #8
 800ab0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	2220      	movs	r2, #32
 800ab26:	409a      	lsls	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 808e 	beq.w	800ac4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8086 	beq.w	800ac4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	2220      	movs	r2, #32
 800ab48:	409a      	lsls	r2, r3
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d136      	bne.n	800abc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0216 	bic.w	r2, r2, #22
 800ab68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <HAL_DMA_IRQHandler+0x1da>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0208 	bic.w	r2, r2, #8
 800ab98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9e:	223f      	movs	r2, #63	; 0x3f
 800aba0:	409a      	lsls	r2, r3
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d07d      	beq.n	800acba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
        }
        return;
 800abc6:	e078      	b.n	800acba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01c      	beq.n	800ac10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d108      	bne.n	800abf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d030      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	4798      	blx	r3
 800abf4:	e02b      	b.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d027      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
 800ac06:	e022      	b.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
 800ac08:	20000008 	.word	0x20000008
 800ac0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10f      	bne.n	800ac3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f022 0210 	bic.w	r2, r2, #16
 800ac2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d032      	beq.n	800acbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d022      	beq.n	800aca8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2205      	movs	r2, #5
 800ac66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d307      	bcc.n	800ac96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f2      	bne.n	800ac7a <HAL_DMA_IRQHandler+0x2ca>
 800ac94:	e000      	b.n	800ac98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ac96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
 800acb8:	e000      	b.n	800acbc <HAL_DMA_IRQHandler+0x30c>
        return;
 800acba:	bf00      	nop
    }
  }
}
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop

0800acc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ace0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	2b40      	cmp	r3, #64	; 0x40
 800acf0:	d108      	bne.n	800ad04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad02:	e007      	b.n	800ad14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	60da      	str	r2, [r3, #12]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	3b10      	subs	r3, #16
 800ad30:	4a14      	ldr	r2, [pc, #80]	; (800ad84 <DMA_CalcBaseAndBitshift+0x64>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	091b      	lsrs	r3, r3, #4
 800ad38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad3a:	4a13      	ldr	r2, [pc, #76]	; (800ad88 <DMA_CalcBaseAndBitshift+0x68>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d909      	bls.n	800ad62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	1d1a      	adds	r2, r3, #4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	659a      	str	r2, [r3, #88]	; 0x58
 800ad60:	e007      	b.n	800ad72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad6a:	f023 0303 	bic.w	r3, r3, #3
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	aaaaaaab 	.word	0xaaaaaaab
 800ad88:	08024908 	.word	0x08024908

0800ad8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d11f      	bne.n	800ade6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d855      	bhi.n	800ae58 <DMA_CheckFifoParam+0xcc>
 800adac:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <DMA_CheckFifoParam+0x28>)
 800adae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb2:	bf00      	nop
 800adb4:	0800adc5 	.word	0x0800adc5
 800adb8:	0800add7 	.word	0x0800add7
 800adbc:	0800adc5 	.word	0x0800adc5
 800adc0:	0800ae59 	.word	0x0800ae59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d045      	beq.n	800ae5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800add4:	e042      	b.n	800ae5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adde:	d13f      	bne.n	800ae60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ade4:	e03c      	b.n	800ae60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adee:	d121      	bne.n	800ae34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d836      	bhi.n	800ae64 <DMA_CheckFifoParam+0xd8>
 800adf6:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <DMA_CheckFifoParam+0x70>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae0d 	.word	0x0800ae0d
 800ae00:	0800ae13 	.word	0x0800ae13
 800ae04:	0800ae0d 	.word	0x0800ae0d
 800ae08:	0800ae25 	.word	0x0800ae25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae10:	e02f      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d024      	beq.n	800ae68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae22:	e021      	b.n	800ae68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae2c:	d11e      	bne.n	800ae6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae32:	e01b      	b.n	800ae6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d902      	bls.n	800ae40 <DMA_CheckFifoParam+0xb4>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d003      	beq.n	800ae46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae3e:	e018      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
      break;
 800ae44:	e015      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00e      	beq.n	800ae70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	73fb      	strb	r3, [r7, #15]
      break;
 800ae56:	e00b      	b.n	800ae70 <DMA_CheckFifoParam+0xe4>
      break;
 800ae58:	bf00      	nop
 800ae5a:	e00a      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;
 800ae5c:	bf00      	nop
 800ae5e:	e008      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;
 800ae60:	bf00      	nop
 800ae62:	e006      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;
 800ae64:	bf00      	nop
 800ae66:	e004      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;
 800ae68:	bf00      	nop
 800ae6a:	e002      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;   
 800ae6c:	bf00      	nop
 800ae6e:	e000      	b.n	800ae72 <DMA_CheckFifoParam+0xe6>
      break;
 800ae70:	bf00      	nop
    }
  } 
  
  return status; 
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800ae90:	4baa      	ldr	r3, [pc, #680]	; (800b13c <HAL_ETH_Init+0x2bc>)
 800ae92:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e185      	b.n	800b1b2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f004 faee 	bl	800f49c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aec0:	2300      	movs	r3, #0
 800aec2:	60bb      	str	r3, [r7, #8]
 800aec4:	4b9e      	ldr	r3, [pc, #632]	; (800b140 <HAL_ETH_Init+0x2c0>)
 800aec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec8:	4a9d      	ldr	r2, [pc, #628]	; (800b140 <HAL_ETH_Init+0x2c0>)
 800aeca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aece:	6453      	str	r3, [r2, #68]	; 0x44
 800aed0:	4b9b      	ldr	r3, [pc, #620]	; (800b140 <HAL_ETH_Init+0x2c0>)
 800aed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aed8:	60bb      	str	r3, [r7, #8]
 800aeda:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800aedc:	4b99      	ldr	r3, [pc, #612]	; (800b144 <HAL_ETH_Init+0x2c4>)
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a98      	ldr	r2, [pc, #608]	; (800b144 <HAL_ETH_Init+0x2c4>)
 800aee2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aee6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800aee8:	4b96      	ldr	r3, [pc, #600]	; (800b144 <HAL_ETH_Init+0x2c4>)
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	4994      	ldr	r1, [pc, #592]	; (800b144 <HAL_ETH_Init+0x2c4>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f042 0201 	orr.w	r2, r2, #1
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800af0e:	f7fe fec5 	bl	8009c9c <HAL_GetTick>
 800af12:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800af14:	e011      	b.n	800af3a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800af16:	f7fe fec1 	bl	8009c9c <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800af24:	d909      	bls.n	800af3a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2203      	movs	r2, #3
 800af2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e13b      	b.n	800b1b2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e4      	bne.n	800af16 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	f023 031c 	bic.w	r3, r3, #28
 800af5a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800af5c:	f001 fe44 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800af60:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	4a78      	ldr	r2, [pc, #480]	; (800b148 <HAL_ETH_Init+0x2c8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d908      	bls.n	800af7c <HAL_ETH_Init+0xfc>
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	4a77      	ldr	r2, [pc, #476]	; (800b14c <HAL_ETH_Init+0x2cc>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d804      	bhi.n	800af7c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	f043 0308 	orr.w	r3, r3, #8
 800af78:	61fb      	str	r3, [r7, #28]
 800af7a:	e027      	b.n	800afcc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	4a73      	ldr	r2, [pc, #460]	; (800b14c <HAL_ETH_Init+0x2cc>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d908      	bls.n	800af96 <HAL_ETH_Init+0x116>
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	4a72      	ldr	r2, [pc, #456]	; (800b150 <HAL_ETH_Init+0x2d0>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d804      	bhi.n	800af96 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	f043 030c 	orr.w	r3, r3, #12
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e01a      	b.n	800afcc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	4a6d      	ldr	r2, [pc, #436]	; (800b150 <HAL_ETH_Init+0x2d0>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d903      	bls.n	800afa6 <HAL_ETH_Init+0x126>
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	4a6c      	ldr	r2, [pc, #432]	; (800b154 <HAL_ETH_Init+0x2d4>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d911      	bls.n	800afca <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	4a6a      	ldr	r2, [pc, #424]	; (800b154 <HAL_ETH_Init+0x2d4>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d908      	bls.n	800afc0 <HAL_ETH_Init+0x140>
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	4a69      	ldr	r2, [pc, #420]	; (800b158 <HAL_ETH_Init+0x2d8>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d804      	bhi.n	800afc0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	f043 0304 	orr.w	r3, r3, #4
 800afbc:	61fb      	str	r3, [r7, #28]
 800afbe:	e005      	b.n	800afcc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	f043 0310 	orr.w	r3, r3, #16
 800afc6:	61fb      	str	r3, [r7, #28]
 800afc8:	e000      	b.n	800afcc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800afca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800afd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800afd8:	2100      	movs	r1, #0
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fb16 	bl	800b60c <HAL_ETH_WritePHYRegister>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fccb 	bl	800b988 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e0d9      	b.n	800b1b2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800affe:	20ff      	movs	r0, #255	; 0xff
 800b000:	f7fe fe58 	bl	8009cb4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80a7 	beq.w	800b15c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b00e:	f7fe fe45 	bl	8009c9c <HAL_GetTick>
 800b012:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b014:	f107 030c 	add.w	r3, r7, #12
 800b018:	461a      	mov	r2, r3
 800b01a:	2101      	movs	r1, #1
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fa8d 	bl	800b53c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b022:	f7fe fe3b 	bl	8009c9c <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b030:	4293      	cmp	r3, r2
 800b032:	d90f      	bls.n	800b054 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b038:	6939      	ldr	r1, [r7, #16]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fca4 	bl	800b988 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e0ae      	b.n	800b1b2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0304 	and.w	r3, r3, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0da      	beq.n	800b014 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800b05e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b062:	2100      	movs	r1, #0
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fad1 	bl	800b60c <HAL_ETH_WritePHYRegister>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fc86 	bl	800b988 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b084:	2301      	movs	r3, #1
 800b086:	e094      	b.n	800b1b2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800b088:	f7fe fe08 	bl	8009c9c <HAL_GetTick>
 800b08c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	461a      	mov	r2, r3
 800b094:	2101      	movs	r1, #1
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa50 	bl	800b53c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b09c:	f7fe fdfe 	bl	8009c9c <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d90f      	bls.n	800b0ce <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b0b2:	6939      	ldr	r1, [r7, #16]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fc67 	bl	800b988 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e071      	b.n	800b1b2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f003 0320 	and.w	r3, r3, #32
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0da      	beq.n	800b08e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800b0d8:	f107 030c 	add.w	r3, r7, #12
 800b0dc:	461a      	mov	r2, r3
 800b0de:	211f      	movs	r1, #31
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa2b 	bl	800b53c <HAL_ETH_ReadPHYRegister>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b0f0:	6939      	ldr	r1, [r7, #16]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fc48 	bl	800b988 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b100:	2301      	movs	r3, #1
 800b102:	e056      	b.n	800b1b2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f003 0310 	and.w	r3, r3, #16
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b114:	60da      	str	r2, [r3, #12]
 800b116:	e002      	b.n	800b11e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f003 0304 	and.w	r3, r3, #4
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	609a      	str	r2, [r3, #8]
 800b12e:	e037      	b.n	800b1a0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b136:	609a      	str	r2, [r3, #8]
 800b138:	e032      	b.n	800b1a0 <HAL_ETH_Init+0x320>
 800b13a:	bf00      	nop
 800b13c:	03938700 	.word	0x03938700
 800b140:	40023800 	.word	0x40023800
 800b144:	40013800 	.word	0x40013800
 800b148:	01312cff 	.word	0x01312cff
 800b14c:	02160ebf 	.word	0x02160ebf
 800b150:	039386ff 	.word	0x039386ff
 800b154:	05f5e0ff 	.word	0x05f5e0ff
 800b158:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	08db      	lsrs	r3, r3, #3
 800b162:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	085b      	lsrs	r3, r3, #1
 800b16a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b16c:	4313      	orrs	r3, r2
 800b16e:	b29b      	uxth	r3, r3
 800b170:	461a      	mov	r2, r3
 800b172:	2100      	movs	r1, #0
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa49 	bl	800b60c <HAL_ETH_WritePHYRegister>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b184:	6939      	ldr	r1, [r7, #16]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fbfe 	bl	800b988 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e00c      	b.n	800b1b2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800b198:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b19c:	f7fe fd8a 	bl	8009cb4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800b1a0:	6939      	ldr	r1, [r7, #16]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fbf0 	bl	800b988 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop

0800b1bc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_ETH_DMATxDescListInit+0x20>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e052      	b.n	800b282 <HAL_ETH_DMATxDescListInit+0xc6>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	e030      	b.n	800b25a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	015b      	lsls	r3, r3, #5
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	4413      	add	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b208:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b210:	fb02 f303 	mul.w	r3, r2, r3
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	4413      	add	r3, r2
 800b218:	461a      	mov	r2, r3
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d105      	bne.n	800b232 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	3b01      	subs	r3, #1
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d208      	bcs.n	800b24e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	3301      	adds	r3, #1
 800b240:	015b      	lsls	r3, r3, #5
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	4413      	add	r3, r2
 800b246:	461a      	mov	r2, r3
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	60da      	str	r2, [r3, #12]
 800b24c:	e002      	b.n	800b254 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	3301      	adds	r3, #1
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d3ca      	bcc.n	800b1f8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b26c:	3310      	adds	r3, #16
 800b26e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800b28e:	b480      	push	{r7}
 800b290:	b087      	sub	sp, #28
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d101      	bne.n	800b2ae <HAL_ETH_DMARxDescListInit+0x20>
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e056      	b.n	800b35c <HAL_ETH_DMARxDescListInit+0xce>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	e034      	b.n	800b334 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	015b      	lsls	r3, r3, #5
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2da:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800b2e2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d105      	bne.n	800b30c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	3b01      	subs	r3, #1
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	429a      	cmp	r2, r3
 800b314:	d208      	bcs.n	800b328 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	3301      	adds	r3, #1
 800b31a:	015b      	lsls	r3, r3, #5
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	4413      	add	r3, r2
 800b320:	461a      	mov	r2, r3
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	60da      	str	r2, [r3, #12]
 800b326:	e002      	b.n	800b32e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	3301      	adds	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d3c6      	bcc.n	800b2ca <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b346:	330c      	adds	r3, #12
 800b348:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	2300      	movs	r3, #0
 800b37c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_ETH_TransmitFrame+0x24>
 800b388:	2302      	movs	r3, #2
 800b38a:	e0cd      	b.n	800b528 <HAL_ETH_TransmitFrame+0x1c0>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e0b8      	b.n	800b528 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da09      	bge.n	800b3d4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2212      	movs	r2, #18
 800b3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e0a9      	b.n	800b528 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d915      	bls.n	800b40a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	4a54      	ldr	r2, [pc, #336]	; (800b534 <HAL_ETH_TransmitFrame+0x1cc>)
 800b3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e6:	0a9b      	lsrs	r3, r3, #10
 800b3e8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	4b51      	ldr	r3, [pc, #324]	; (800b534 <HAL_ETH_TransmitFrame+0x1cc>)
 800b3ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b3f2:	0a9b      	lsrs	r3, r3, #10
 800b3f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800b3f8:	fb01 f303 	mul.w	r3, r1, r3
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3301      	adds	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	e001      	b.n	800b40e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800b40a:	2301      	movs	r3, #1
 800b40c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d11c      	bne.n	800b44e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800b422:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b42e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b43e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c
 800b44c:	e04b      	b.n	800b4e6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800b44e:	2300      	movs	r3, #0
 800b450:	613b      	str	r3, [r7, #16]
 800b452:	e044      	b.n	800b4de <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b462:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d107      	bne.n	800b47a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b482:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	3b01      	subs	r3, #1
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d116      	bne.n	800b4bc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b498:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b49c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	4a25      	ldr	r2, [pc, #148]	; (800b538 <HAL_ETH_TransmitFrame+0x1d0>)
 800b4a2:	fb02 f203 	mul.w	r2, r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b4ae:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b4ba:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b4ca:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d3b6      	bcc.n	800b454 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ee:	3314      	adds	r3, #20
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0304 	and.w	r3, r3, #4
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b502:	3314      	adds	r3, #20
 800b504:	2204      	movs	r2, #4
 800b506:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b510:	3304      	adds	r3, #4
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	ac02b00b 	.word	0xac02b00b
 800b538:	fffffa0c 	.word	0xfffffa0c

0800b53c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	460b      	mov	r3, r1
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b82      	cmp	r3, #130	; 0x82
 800b55c:	d101      	bne.n	800b562 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800b55e:	2302      	movs	r3, #2
 800b560:	e050      	b.n	800b604 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2282      	movs	r2, #130	; 0x82
 800b566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f003 031c 	and.w	r3, r3, #28
 800b578:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8a1b      	ldrh	r3, [r3, #16]
 800b57e:	02db      	lsls	r3, r3, #11
 800b580:	b29b      	uxth	r3, r3
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	4313      	orrs	r3, r2
 800b586:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b588:	897b      	ldrh	r3, [r7, #10]
 800b58a:	019b      	lsls	r3, r3, #6
 800b58c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	4313      	orrs	r3, r2
 800b594:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f023 0302 	bic.w	r3, r3, #2
 800b59c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f043 0301 	orr.w	r3, r3, #1
 800b5a4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b5ae:	f7fe fb75 	bl	8009c9c <HAL_GetTick>
 800b5b2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b5b4:	e015      	b.n	800b5e2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b5b6:	f7fe fb71 	bl	8009c9c <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c4:	d309      	bcc.n	800b5da <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e014      	b.n	800b604 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e4      	bne.n	800b5b6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	460b      	mov	r3, r1
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b42      	cmp	r3, #66	; 0x42
 800b62c:	d101      	bne.n	800b632 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800b62e:	2302      	movs	r3, #2
 800b630:	e04e      	b.n	800b6d0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2242      	movs	r2, #66	; 0x42
 800b636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f003 031c 	and.w	r3, r3, #28
 800b648:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8a1b      	ldrh	r3, [r3, #16]
 800b64e:	02db      	lsls	r3, r3, #11
 800b650:	b29b      	uxth	r3, r3
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	4313      	orrs	r3, r2
 800b656:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b658:	897b      	ldrh	r3, [r7, #10]
 800b65a:	019b      	lsls	r3, r3, #6
 800b65c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	4313      	orrs	r3, r2
 800b664:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f043 0302 	orr.w	r3, r3, #2
 800b66c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f043 0301 	orr.w	r3, r3, #1
 800b674:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b688:	f7fe fb08 	bl	8009c9c <HAL_GetTick>
 800b68c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b68e:	e015      	b.n	800b6bc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b690:	f7fe fb04 	bl	8009c9c <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69e:	d309      	bcc.n	800b6b4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e00d      	b.n	800b6d0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e4      	bne.n	800b690 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <HAL_ETH_Start+0x16>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e01f      	b.n	800b72e <HAL_ETH_Start+0x56>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fb44 	bl	800bd8c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fb7b 	bl	800be00 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fc12 	bl	800bf34 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fbaf 	bl	800be74 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fbdc 	bl	800bed4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b744:	2b01      	cmp	r3, #1
 800b746:	d101      	bne.n	800b74c <HAL_ETH_Stop+0x16>
 800b748:	2302      	movs	r3, #2
 800b74a:	e01f      	b.n	800b78c <HAL_ETH_Stop+0x56>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2202      	movs	r2, #2
 800b758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fba1 	bl	800bea4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fbce 	bl	800bf04 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb66 	bl	800be3a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fbe0 	bl	800bf34 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb26 	bl	800bdc6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d101      	bne.n	800b7b0 <HAL_ETH_ConfigMAC+0x1c>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e0e4      	b.n	800b97a <HAL_ETH_ConfigMAC+0x1e6>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 80b1 	beq.w	800b92a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	4b6c      	ldr	r3, [pc, #432]	; (800b984 <HAL_ETH_ConfigMAC+0x1f0>)
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b7e0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800b7e6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800b7ec:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800b7f2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800b7f8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800b7fe:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800b804:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800b80a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800b810:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800b816:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800b81c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800b822:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b83a:	2001      	movs	r0, #1
 800b83c:	f7fe fa3a 	bl	8009cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b850:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800b856:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800b85c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800b862:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800b868:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800b86e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800b87a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b87c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b886:	2001      	movs	r0, #1
 800b888:	f7fe fa14 	bl	8009cb4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b89c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b8a6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8c4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800b8ca:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800b8d0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800b8d6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800b8dc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	f7fe f9dd 	bl	8009cb4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800b91a:	2001      	movs	r0, #1
 800b91c:	f7fe f9ca 	bl	8009cb4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	61da      	str	r2, [r3, #28]
 800b928:	e01e      	b.n	800b968 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b938:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b95a:	2001      	movs	r0, #1
 800b95c:	f7fe f9aa 	bl	8009cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	ff20810f 	.word	0xff20810f

0800b988 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b0b0      	sub	sp, #192	; 0xc0
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d007      	beq.n	800b9ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b9ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d103      	bne.n	800b9d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9d2:	663b      	str	r3, [r7, #96]	; 0x60
 800b9d4:	e001      	b.n	800b9da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800b9da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800ba10:	2300      	movs	r3, #0
 800ba12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800ba28:	2380      	movs	r3, #128	; 0x80
 800ba2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800ba5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba60:	4bac      	ldr	r3, [pc, #688]	; (800bd14 <ETH_MACDMAConfig+0x38c>)
 800ba62:	4013      	ands	r3, r2
 800ba64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800ba68:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800ba6c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800ba6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800ba70:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800ba72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800ba74:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800ba7a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800ba7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800ba7e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800ba80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800ba82:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800ba88:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800ba8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800ba8c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800ba8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800ba90:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800ba92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800ba94:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800ba96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800ba98:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800ba9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800ba9c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800ba9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800baa2:	4313      	orrs	r3, r2
 800baa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bab0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800babc:	2001      	movs	r0, #1
 800babe:	f7fe f8f9 	bl	8009cb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800baca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bacc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800bace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bad0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800bad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800bad4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800bad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800bada:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800badc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800bae0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800bae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800bae6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800bae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800baec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800baf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800baf8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800bafa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb06:	2001      	movs	r0, #1
 800bb08:	f7fe f8d4 	bl	8009cb4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb14:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb1e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bb28:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800bb34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb38:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb46:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800bb48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb4c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800bb4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800bb52:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800bb54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800bb58:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800bb5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800bb5e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800bb60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800bb64:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800bb66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb78:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb84:	2001      	movs	r0, #1
 800bb86:	f7fe f895 	bl	8009cb4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb92:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800bb94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800bb98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbae:	2001      	movs	r0, #1
 800bbb0:	f7fe f880 	bl	8009cb4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bbbc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800bbc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbc6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800bbcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbd0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800bbe2:	2304      	movs	r3, #4
 800bbe4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800bbe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800bbec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bbf0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800bbf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800bbf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800bbfe:	2380      	movs	r3, #128	; 0x80
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800bc06:	2300      	movs	r3, #0
 800bc08:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc12:	3318      	adds	r3, #24
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bc1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc1e:	4b3e      	ldr	r3, [pc, #248]	; (800bd18 <ETH_MACDMAConfig+0x390>)
 800bc20:	4013      	ands	r3, r2
 800bc22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc26:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800bc28:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc2a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800bc2c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800bc2e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800bc30:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800bc32:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800bc34:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800bc36:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800bc38:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800bc3a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800bc3e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800bc42:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800bc46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bc48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5a:	3318      	adds	r3, #24
 800bc5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc6a:	3318      	adds	r3, #24
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc72:	2001      	movs	r0, #1
 800bc74:	f7fe f81e 	bl	8009cb4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc80:	3318      	adds	r3, #24
 800bc82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bc86:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bc8c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800bc90:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bc94:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800bc98:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800bc9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800bc9e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800bca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800bca2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bcac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	f7fd fff7 	bl	8009cb4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bcd2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d10f      	bne.n	800bcfc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce4:	331c      	adds	r3, #28
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bcf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf8:	331c      	adds	r3, #28
 800bcfa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	461a      	mov	r2, r3
 800bd02:	2100      	movs	r1, #0
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f809 	bl	800bd1c <ETH_MACAddressConfig>
}
 800bd0a:	bf00      	nop
 800bd0c:	37c0      	adds	r7, #192	; 0xc0
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	ff20810f 	.word	0xff20810f
 800bd18:	f8de3f23 	.word	0xf8de3f23

0800bd1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3305      	adds	r3, #5
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	021b      	lsls	r3, r3, #8
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	3204      	adds	r2, #4
 800bd34:	7812      	ldrb	r2, [r2, #0]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	4b11      	ldr	r3, [pc, #68]	; (800bd84 <ETH_MACAddressConfig+0x68>)
 800bd3e:	4413      	add	r3, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3303      	adds	r3, #3
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	061a      	lsls	r2, r3, #24
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3302      	adds	r3, #2
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	041b      	lsls	r3, r3, #16
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	4313      	orrs	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	7812      	ldrb	r2, [r2, #0]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <ETH_MACAddressConfig+0x6c>)
 800bd6e:	4413      	add	r3, r2
 800bd70:	461a      	mov	r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	6013      	str	r3, [r2, #0]
}
 800bd76:	bf00      	nop
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	40028040 	.word	0x40028040
 800bd88:	40028044 	.word	0x40028044

0800bd8c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f042 0208 	orr.w	r2, r2, #8
 800bda6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	f000 f8e9 	bl	800bf88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	601a      	str	r2, [r3, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0208 	bic.w	r2, r2, #8
 800bde0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800bdea:	2001      	movs	r0, #1
 800bdec:	f000 f8cc 	bl	800bf88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	601a      	str	r2, [r3, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0204 	orr.w	r2, r2, #4
 800be1a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800be24:	2001      	movs	r0, #1
 800be26:	f000 f8af 	bl	800bf88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]
}
 800be32:	bf00      	nop
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 0204 	bic.w	r2, r2, #4
 800be54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800be5e:	2001      	movs	r0, #1
 800be60:	f000 f892 	bl	800bf88 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	601a      	str	r2, [r3, #0]
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be84:	3318      	adds	r3, #24
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be94:	3318      	adds	r3, #24
 800be96:	601a      	str	r2, [r3, #0]
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb4:	3318      	adds	r3, #24
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec4:	3318      	adds	r3, #24
 800bec6:	601a      	str	r2, [r3, #0]
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee4:	3318      	adds	r3, #24
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f042 0202 	orr.w	r2, r2, #2
 800bef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef4:	3318      	adds	r3, #24
 800bef6:	601a      	str	r2, [r3, #0]
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf14:	3318      	adds	r3, #24
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f022 0202 	bic.w	r2, r2, #2
 800bf20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf24:	3318      	adds	r3, #24
 800bf26:	601a      	str	r2, [r3, #0]
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf48:	3318      	adds	r3, #24
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf58:	3318      	adds	r3, #24
 800bf5a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf64:	3318      	adds	r3, #24
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f000 f80c 	bl	800bf88 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf7a:	3318      	adds	r3, #24
 800bf7c:	601a      	str	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <ETH_Delay+0x34>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a0a      	ldr	r2, [pc, #40]	; (800bfc0 <ETH_Delay+0x38>)
 800bf96:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9a:	0a5b      	lsrs	r3, r3, #9
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	fb02 f303 	mul.w	r3, r2, r3
 800bfa2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800bfa4:	bf00      	nop
  } 
  while (Delay --);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	1e5a      	subs	r2, r3, #1
 800bfaa:	60fa      	str	r2, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1f9      	bne.n	800bfa4 <ETH_Delay+0x1c>
}
 800bfb0:	bf00      	nop
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20000008 	.word	0x20000008
 800bfc0:	10624dd3 	.word	0x10624dd3

0800bfc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b089      	sub	sp, #36	; 0x24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e16b      	b.n	800c2b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	4013      	ands	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	f040 815a 	bne.w	800c2b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d00b      	beq.n	800c01e <HAL_GPIO_Init+0x5a>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d007      	beq.n	800c01e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c012:	2b11      	cmp	r3, #17
 800c014:	d003      	beq.n	800c01e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	2b12      	cmp	r3, #18
 800c01c:	d130      	bne.n	800c080 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	2203      	movs	r2, #3
 800c02a:	fa02 f303 	lsl.w	r3, r2, r3
 800c02e:	43db      	mvns	r3, r3
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	4013      	ands	r3, r2
 800c034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	fa02 f303 	lsl.w	r3, r2, r3
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	4313      	orrs	r3, r2
 800c046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c054:	2201      	movs	r2, #1
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	fa02 f303 	lsl.w	r3, r2, r3
 800c05c:	43db      	mvns	r3, r3
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	4013      	ands	r3, r2
 800c062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	091b      	lsrs	r3, r3, #4
 800c06a:	f003 0201 	and.w	r2, r3, #1
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	fa02 f303 	lsl.w	r3, r2, r3
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	4313      	orrs	r3, r2
 800c078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	2203      	movs	r2, #3
 800c08c:	fa02 f303 	lsl.w	r3, r2, r3
 800c090:	43db      	mvns	r3, r3
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	4013      	ands	r3, r2
 800c096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69ba      	ldr	r2, [r7, #24]
 800c0ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d003      	beq.n	800c0c0 <HAL_GPIO_Init+0xfc>
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2b12      	cmp	r3, #18
 800c0be:	d123      	bne.n	800c108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	08da      	lsrs	r2, r3, #3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3208      	adds	r2, #8
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	220f      	movs	r2, #15
 800c0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	691a      	ldr	r2, [r3, #16]
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	f003 0307 	and.w	r3, r3, #7
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	08da      	lsrs	r2, r3, #3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3208      	adds	r2, #8
 800c102:	69b9      	ldr	r1, [r7, #24]
 800c104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	2203      	movs	r2, #3
 800c114:	fa02 f303 	lsl.w	r3, r2, r3
 800c118:	43db      	mvns	r3, r3
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	4013      	ands	r3, r2
 800c11e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f003 0203 	and.w	r2, r3, #3
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	4313      	orrs	r3, r2
 800c134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c144:	2b00      	cmp	r3, #0
 800c146:	f000 80b4 	beq.w	800c2b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	4b5f      	ldr	r3, [pc, #380]	; (800c2cc <HAL_GPIO_Init+0x308>)
 800c150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c152:	4a5e      	ldr	r2, [pc, #376]	; (800c2cc <HAL_GPIO_Init+0x308>)
 800c154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c158:	6453      	str	r3, [r2, #68]	; 0x44
 800c15a:	4b5c      	ldr	r3, [pc, #368]	; (800c2cc <HAL_GPIO_Init+0x308>)
 800c15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c166:	4a5a      	ldr	r2, [pc, #360]	; (800c2d0 <HAL_GPIO_Init+0x30c>)
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	089b      	lsrs	r3, r3, #2
 800c16c:	3302      	adds	r3, #2
 800c16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	f003 0303 	and.w	r3, r3, #3
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	220f      	movs	r2, #15
 800c17e:	fa02 f303 	lsl.w	r3, r2, r3
 800c182:	43db      	mvns	r3, r3
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	4013      	ands	r3, r2
 800c188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a51      	ldr	r2, [pc, #324]	; (800c2d4 <HAL_GPIO_Init+0x310>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d02b      	beq.n	800c1ea <HAL_GPIO_Init+0x226>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a50      	ldr	r2, [pc, #320]	; (800c2d8 <HAL_GPIO_Init+0x314>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d025      	beq.n	800c1e6 <HAL_GPIO_Init+0x222>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a4f      	ldr	r2, [pc, #316]	; (800c2dc <HAL_GPIO_Init+0x318>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d01f      	beq.n	800c1e2 <HAL_GPIO_Init+0x21e>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a4e      	ldr	r2, [pc, #312]	; (800c2e0 <HAL_GPIO_Init+0x31c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d019      	beq.n	800c1de <HAL_GPIO_Init+0x21a>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a4d      	ldr	r2, [pc, #308]	; (800c2e4 <HAL_GPIO_Init+0x320>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d013      	beq.n	800c1da <HAL_GPIO_Init+0x216>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a4c      	ldr	r2, [pc, #304]	; (800c2e8 <HAL_GPIO_Init+0x324>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d00d      	beq.n	800c1d6 <HAL_GPIO_Init+0x212>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a4b      	ldr	r2, [pc, #300]	; (800c2ec <HAL_GPIO_Init+0x328>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d007      	beq.n	800c1d2 <HAL_GPIO_Init+0x20e>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a4a      	ldr	r2, [pc, #296]	; (800c2f0 <HAL_GPIO_Init+0x32c>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d101      	bne.n	800c1ce <HAL_GPIO_Init+0x20a>
 800c1ca:	2307      	movs	r3, #7
 800c1cc:	e00e      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1ce:	2308      	movs	r3, #8
 800c1d0:	e00c      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1d2:	2306      	movs	r3, #6
 800c1d4:	e00a      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1d6:	2305      	movs	r3, #5
 800c1d8:	e008      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1da:	2304      	movs	r3, #4
 800c1dc:	e006      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e004      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	e002      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <HAL_GPIO_Init+0x228>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	f002 0203 	and.w	r2, r2, #3
 800c1f2:	0092      	lsls	r2, r2, #2
 800c1f4:	4093      	lsls	r3, r2
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c1fc:	4934      	ldr	r1, [pc, #208]	; (800c2d0 <HAL_GPIO_Init+0x30c>)
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	089b      	lsrs	r3, r3, #2
 800c202:	3302      	adds	r3, #2
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c20a:	4b3a      	ldr	r3, [pc, #232]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	43db      	mvns	r3, r3
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	4013      	ands	r3, r2
 800c218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c226:	69ba      	ldr	r2, [r7, #24]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c22e:	4a31      	ldr	r2, [pc, #196]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c234:	4b2f      	ldr	r3, [pc, #188]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	43db      	mvns	r3, r3
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	4013      	ands	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	4313      	orrs	r3, r2
 800c256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c258:	4a26      	ldr	r2, [pc, #152]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c25e:	4b25      	ldr	r3, [pc, #148]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	43db      	mvns	r3, r3
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	4013      	ands	r3, r2
 800c26c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c27a:	69ba      	ldr	r2, [r7, #24]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	4313      	orrs	r3, r2
 800c280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c282:	4a1c      	ldr	r2, [pc, #112]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c288:	4b1a      	ldr	r3, [pc, #104]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	43db      	mvns	r3, r3
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	4013      	ands	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d003      	beq.n	800c2ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2ac:	4a11      	ldr	r2, [pc, #68]	; (800c2f4 <HAL_GPIO_Init+0x330>)
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	61fb      	str	r3, [r7, #28]
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2b0f      	cmp	r3, #15
 800c2bc:	f67f ae90 	bls.w	800bfe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2c0:	bf00      	nop
 800c2c2:	3724      	adds	r7, #36	; 0x24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	40023800 	.word	0x40023800
 800c2d0:	40013800 	.word	0x40013800
 800c2d4:	40020000 	.word	0x40020000
 800c2d8:	40020400 	.word	0x40020400
 800c2dc:	40020800 	.word	0x40020800
 800c2e0:	40020c00 	.word	0x40020c00
 800c2e4:	40021000 	.word	0x40021000
 800c2e8:	40021400 	.word	0x40021400
 800c2ec:	40021800 	.word	0x40021800
 800c2f0:	40021c00 	.word	0x40021c00
 800c2f4:	40013c00 	.word	0x40013c00

0800c2f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	691a      	ldr	r2, [r3, #16]
 800c308:	887b      	ldrh	r3, [r7, #2]
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c310:	2301      	movs	r3, #1
 800c312:	73fb      	strb	r3, [r7, #15]
 800c314:	e001      	b.n	800c31a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	807b      	strh	r3, [r7, #2]
 800c334:	4613      	mov	r3, r2
 800c336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c338:	787b      	ldrb	r3, [r7, #1]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c33e:	887a      	ldrh	r2, [r7, #2]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c344:	e003      	b.n	800c34e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c346:	887b      	ldrh	r3, [r7, #2]
 800c348:	041a      	lsls	r2, r3, #16
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	619a      	str	r2, [r3, #24]
}
 800c34e:	bf00      	nop
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
	...

0800c35c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c366:	4b08      	ldr	r3, [pc, #32]	; (800c388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c368:	695a      	ldr	r2, [r3, #20]
 800c36a:	88fb      	ldrh	r3, [r7, #6]
 800c36c:	4013      	ands	r3, r2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c372:	4a05      	ldr	r2, [pc, #20]	; (800c388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c378:	88fb      	ldrh	r3, [r7, #6]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7f7 f946 	bl	800360c <HAL_GPIO_EXTI_Callback>
  }
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	40013c00 	.word	0x40013c00

0800c38c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e25b      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d075      	beq.n	800c496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3aa:	4ba3      	ldr	r3, [pc, #652]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	f003 030c 	and.w	r3, r3, #12
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d00c      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3b6:	4ba0      	ldr	r3, [pc, #640]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c3be:	2b08      	cmp	r3, #8
 800c3c0:	d112      	bne.n	800c3e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3c2:	4b9d      	ldr	r3, [pc, #628]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3ce:	d10b      	bne.n	800c3e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3d0:	4b99      	ldr	r3, [pc, #612]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d05b      	beq.n	800c494 <HAL_RCC_OscConfig+0x108>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d157      	bne.n	800c494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e236      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f0:	d106      	bne.n	800c400 <HAL_RCC_OscConfig+0x74>
 800c3f2:	4b91      	ldr	r3, [pc, #580]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a90      	ldr	r2, [pc, #576]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c3f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	e01d      	b.n	800c43c <HAL_RCC_OscConfig+0xb0>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c408:	d10c      	bne.n	800c424 <HAL_RCC_OscConfig+0x98>
 800c40a:	4b8b      	ldr	r3, [pc, #556]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a8a      	ldr	r2, [pc, #552]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	4b88      	ldr	r3, [pc, #544]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a87      	ldr	r2, [pc, #540]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c41c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	e00b      	b.n	800c43c <HAL_RCC_OscConfig+0xb0>
 800c424:	4b84      	ldr	r3, [pc, #528]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a83      	ldr	r2, [pc, #524]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c42a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	4b81      	ldr	r3, [pc, #516]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a80      	ldr	r2, [pc, #512]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c43a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d013      	beq.n	800c46c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c444:	f7fd fc2a 	bl	8009c9c <HAL_GetTick>
 800c448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c44a:	e008      	b.n	800c45e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c44c:	f7fd fc26 	bl	8009c9c <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	2b64      	cmp	r3, #100	; 0x64
 800c458:	d901      	bls.n	800c45e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e1fb      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c45e:	4b76      	ldr	r3, [pc, #472]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0f0      	beq.n	800c44c <HAL_RCC_OscConfig+0xc0>
 800c46a:	e014      	b.n	800c496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c46c:	f7fd fc16 	bl	8009c9c <HAL_GetTick>
 800c470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c472:	e008      	b.n	800c486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c474:	f7fd fc12 	bl	8009c9c <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b64      	cmp	r3, #100	; 0x64
 800c480:	d901      	bls.n	800c486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e1e7      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c486:	4b6c      	ldr	r3, [pc, #432]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1f0      	bne.n	800c474 <HAL_RCC_OscConfig+0xe8>
 800c492:	e000      	b.n	800c496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d063      	beq.n	800c56a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4a2:	4b65      	ldr	r3, [pc, #404]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f003 030c 	and.w	r3, r3, #12
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00b      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4ae:	4b62      	ldr	r3, [pc, #392]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c4b6:	2b08      	cmp	r3, #8
 800c4b8:	d11c      	bne.n	800c4f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4ba:	4b5f      	ldr	r3, [pc, #380]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d116      	bne.n	800c4f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4c6:	4b5c      	ldr	r3, [pc, #368]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <HAL_RCC_OscConfig+0x152>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d001      	beq.n	800c4de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e1bb      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4de:	4b56      	ldr	r3, [pc, #344]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	4952      	ldr	r1, [pc, #328]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4f2:	e03a      	b.n	800c56a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d020      	beq.n	800c53e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4fc:	4b4f      	ldr	r3, [pc, #316]	; (800c63c <HAL_RCC_OscConfig+0x2b0>)
 800c4fe:	2201      	movs	r2, #1
 800c500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c502:	f7fd fbcb 	bl	8009c9c <HAL_GetTick>
 800c506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c508:	e008      	b.n	800c51c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c50a:	f7fd fbc7 	bl	8009c9c <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	2b02      	cmp	r3, #2
 800c516:	d901      	bls.n	800c51c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e19c      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c51c:	4b46      	ldr	r3, [pc, #280]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0f0      	beq.n	800c50a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c528:	4b43      	ldr	r3, [pc, #268]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4940      	ldr	r1, [pc, #256]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	600b      	str	r3, [r1, #0]
 800c53c:	e015      	b.n	800c56a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c53e:	4b3f      	ldr	r3, [pc, #252]	; (800c63c <HAL_RCC_OscConfig+0x2b0>)
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c544:	f7fd fbaa 	bl	8009c9c <HAL_GetTick>
 800c548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c54a:	e008      	b.n	800c55e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c54c:	f7fd fba6 	bl	8009c9c <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b02      	cmp	r3, #2
 800c558:	d901      	bls.n	800c55e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e17b      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c55e:	4b36      	ldr	r3, [pc, #216]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0302 	and.w	r3, r3, #2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1f0      	bne.n	800c54c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d030      	beq.n	800c5d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d016      	beq.n	800c5ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c57e:	4b30      	ldr	r3, [pc, #192]	; (800c640 <HAL_RCC_OscConfig+0x2b4>)
 800c580:	2201      	movs	r2, #1
 800c582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c584:	f7fd fb8a 	bl	8009c9c <HAL_GetTick>
 800c588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c58a:	e008      	b.n	800c59e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c58c:	f7fd fb86 	bl	8009c9c <HAL_GetTick>
 800c590:	4602      	mov	r2, r0
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	2b02      	cmp	r3, #2
 800c598:	d901      	bls.n	800c59e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c59a:	2303      	movs	r3, #3
 800c59c:	e15b      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c59e:	4b26      	ldr	r3, [pc, #152]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d0f0      	beq.n	800c58c <HAL_RCC_OscConfig+0x200>
 800c5aa:	e015      	b.n	800c5d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5ac:	4b24      	ldr	r3, [pc, #144]	; (800c640 <HAL_RCC_OscConfig+0x2b4>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5b2:	f7fd fb73 	bl	8009c9c <HAL_GetTick>
 800c5b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5b8:	e008      	b.n	800c5cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5ba:	f7fd fb6f 	bl	8009c9c <HAL_GetTick>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d901      	bls.n	800c5cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e144      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5cc:	4b1a      	ldr	r3, [pc, #104]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d0:	f003 0302 	and.w	r3, r3, #2
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1f0      	bne.n	800c5ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0304 	and.w	r3, r3, #4
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80a0 	beq.w	800c726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5ea:	4b13      	ldr	r3, [pc, #76]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10f      	bne.n	800c616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	4a0e      	ldr	r2, [pc, #56]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c604:	6413      	str	r3, [r2, #64]	; 0x40
 800c606:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <HAL_RCC_OscConfig+0x2ac>)
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c60e:	60bb      	str	r3, [r7, #8]
 800c610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c612:	2301      	movs	r3, #1
 800c614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c616:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <HAL_RCC_OscConfig+0x2b8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d121      	bne.n	800c666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c622:	4b08      	ldr	r3, [pc, #32]	; (800c644 <HAL_RCC_OscConfig+0x2b8>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a07      	ldr	r2, [pc, #28]	; (800c644 <HAL_RCC_OscConfig+0x2b8>)
 800c628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c62c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c62e:	f7fd fb35 	bl	8009c9c <HAL_GetTick>
 800c632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c634:	e011      	b.n	800c65a <HAL_RCC_OscConfig+0x2ce>
 800c636:	bf00      	nop
 800c638:	40023800 	.word	0x40023800
 800c63c:	42470000 	.word	0x42470000
 800c640:	42470e80 	.word	0x42470e80
 800c644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c648:	f7fd fb28 	bl	8009c9c <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b02      	cmp	r3, #2
 800c654:	d901      	bls.n	800c65a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e0fd      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c65a:	4b81      	ldr	r3, [pc, #516]	; (800c860 <HAL_RCC_OscConfig+0x4d4>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0f0      	beq.n	800c648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d106      	bne.n	800c67c <HAL_RCC_OscConfig+0x2f0>
 800c66e:	4b7d      	ldr	r3, [pc, #500]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c672:	4a7c      	ldr	r2, [pc, #496]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c674:	f043 0301 	orr.w	r3, r3, #1
 800c678:	6713      	str	r3, [r2, #112]	; 0x70
 800c67a:	e01c      	b.n	800c6b6 <HAL_RCC_OscConfig+0x32a>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	2b05      	cmp	r3, #5
 800c682:	d10c      	bne.n	800c69e <HAL_RCC_OscConfig+0x312>
 800c684:	4b77      	ldr	r3, [pc, #476]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c688:	4a76      	ldr	r2, [pc, #472]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c68a:	f043 0304 	orr.w	r3, r3, #4
 800c68e:	6713      	str	r3, [r2, #112]	; 0x70
 800c690:	4b74      	ldr	r3, [pc, #464]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c694:	4a73      	ldr	r2, [pc, #460]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	6713      	str	r3, [r2, #112]	; 0x70
 800c69c:	e00b      	b.n	800c6b6 <HAL_RCC_OscConfig+0x32a>
 800c69e:	4b71      	ldr	r3, [pc, #452]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	4a70      	ldr	r2, [pc, #448]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c6a4:	f023 0301 	bic.w	r3, r3, #1
 800c6a8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6aa:	4b6e      	ldr	r3, [pc, #440]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ae:	4a6d      	ldr	r2, [pc, #436]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c6b0:	f023 0304 	bic.w	r3, r3, #4
 800c6b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d015      	beq.n	800c6ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6be:	f7fd faed 	bl	8009c9c <HAL_GetTick>
 800c6c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6c4:	e00a      	b.n	800c6dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6c6:	f7fd fae9 	bl	8009c9c <HAL_GetTick>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d901      	bls.n	800c6dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	e0bc      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6dc:	4b61      	ldr	r3, [pc, #388]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0ee      	beq.n	800c6c6 <HAL_RCC_OscConfig+0x33a>
 800c6e8:	e014      	b.n	800c714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c6ea:	f7fd fad7 	bl	8009c9c <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6f0:	e00a      	b.n	800c708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6f2:	f7fd fad3 	bl	8009c9c <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c700:	4293      	cmp	r3, r2
 800c702:	d901      	bls.n	800c708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e0a6      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c708:	4b56      	ldr	r3, [pc, #344]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1ee      	bne.n	800c6f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c714:	7dfb      	ldrb	r3, [r7, #23]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d105      	bne.n	800c726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c71a:	4b52      	ldr	r3, [pc, #328]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71e:	4a51      	ldr	r2, [pc, #324]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f000 8092 	beq.w	800c854 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c730:	4b4c      	ldr	r3, [pc, #304]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f003 030c 	and.w	r3, r3, #12
 800c738:	2b08      	cmp	r3, #8
 800c73a:	d05c      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d141      	bne.n	800c7c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c744:	4b48      	ldr	r3, [pc, #288]	; (800c868 <HAL_RCC_OscConfig+0x4dc>)
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c74a:	f7fd faa7 	bl	8009c9c <HAL_GetTick>
 800c74e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c750:	e008      	b.n	800c764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c752:	f7fd faa3 	bl	8009c9c <HAL_GetTick>
 800c756:	4602      	mov	r2, r0
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d901      	bls.n	800c764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c760:	2303      	movs	r3, #3
 800c762:	e078      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c764:	4b3f      	ldr	r3, [pc, #252]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1f0      	bne.n	800c752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	69da      	ldr	r2, [r3, #28]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a1b      	ldr	r3, [r3, #32]
 800c778:	431a      	orrs	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	019b      	lsls	r3, r3, #6
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c786:	085b      	lsrs	r3, r3, #1
 800c788:	3b01      	subs	r3, #1
 800c78a:	041b      	lsls	r3, r3, #16
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c792:	061b      	lsls	r3, r3, #24
 800c794:	4933      	ldr	r1, [pc, #204]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c796:	4313      	orrs	r3, r2
 800c798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c79a:	4b33      	ldr	r3, [pc, #204]	; (800c868 <HAL_RCC_OscConfig+0x4dc>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7a0:	f7fd fa7c 	bl	8009c9c <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7a6:	e008      	b.n	800c7ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7a8:	f7fd fa78 	bl	8009c9c <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d901      	bls.n	800c7ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e04d      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7ba:	4b2a      	ldr	r3, [pc, #168]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0f0      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x41c>
 800c7c6:	e045      	b.n	800c854 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7c8:	4b27      	ldr	r3, [pc, #156]	; (800c868 <HAL_RCC_OscConfig+0x4dc>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7ce:	f7fd fa65 	bl	8009c9c <HAL_GetTick>
 800c7d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7d4:	e008      	b.n	800c7e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7d6:	f7fd fa61 	bl	8009c9c <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d901      	bls.n	800c7e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e036      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1f0      	bne.n	800c7d6 <HAL_RCC_OscConfig+0x44a>
 800c7f4:	e02e      	b.n	800c854 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d101      	bne.n	800c802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e029      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c802:	4b18      	ldr	r3, [pc, #96]	; (800c864 <HAL_RCC_OscConfig+0x4d8>)
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	429a      	cmp	r2, r3
 800c814:	d11c      	bne.n	800c850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c820:	429a      	cmp	r2, r3
 800c822:	d115      	bne.n	800c850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c82a:	4013      	ands	r3, r2
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c830:	4293      	cmp	r3, r2
 800c832:	d10d      	bne.n	800c850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c83e:	429a      	cmp	r2, r3
 800c840:	d106      	bne.n	800c850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d001      	beq.n	800c854 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	e000      	b.n	800c856 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	40007000 	.word	0x40007000
 800c864:	40023800 	.word	0x40023800
 800c868:	42470060 	.word	0x42470060

0800c86c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d101      	bne.n	800c880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e0cc      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c880:	4b68      	ldr	r3, [pc, #416]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 030f 	and.w	r3, r3, #15
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d90c      	bls.n	800c8a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c88e:	4b65      	ldr	r3, [pc, #404]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c896:	4b63      	ldr	r3, [pc, #396]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d001      	beq.n	800c8a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0b8      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d020      	beq.n	800c8f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8c0:	4b59      	ldr	r3, [pc, #356]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	4a58      	ldr	r2, [pc, #352]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c8ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0308 	and.w	r3, r3, #8
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c8d8:	4b53      	ldr	r3, [pc, #332]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	4a52      	ldr	r2, [pc, #328]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c8e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8e4:	4b50      	ldr	r3, [pc, #320]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	494d      	ldr	r1, [pc, #308]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d044      	beq.n	800c98c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d107      	bne.n	800c91a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c90a:	4b47      	ldr	r3, [pc, #284]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c912:	2b00      	cmp	r3, #0
 800c914:	d119      	bne.n	800c94a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e07f      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d003      	beq.n	800c92a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c926:	2b03      	cmp	r3, #3
 800c928:	d107      	bne.n	800c93a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c92a:	4b3f      	ldr	r3, [pc, #252]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c932:	2b00      	cmp	r3, #0
 800c934:	d109      	bne.n	800c94a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e06f      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c93a:	4b3b      	ldr	r3, [pc, #236]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 0302 	and.w	r3, r3, #2
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e067      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c94a:	4b37      	ldr	r3, [pc, #220]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f023 0203 	bic.w	r2, r3, #3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	4934      	ldr	r1, [pc, #208]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c95c:	f7fd f99e 	bl	8009c9c <HAL_GetTick>
 800c960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c962:	e00a      	b.n	800c97a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c964:	f7fd f99a 	bl	8009c9c <HAL_GetTick>
 800c968:	4602      	mov	r2, r0
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c972:	4293      	cmp	r3, r2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e04f      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c97a:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f003 020c 	and.w	r2, r3, #12
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	429a      	cmp	r2, r3
 800c98a:	d1eb      	bne.n	800c964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c98c:	4b25      	ldr	r3, [pc, #148]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 030f 	and.w	r3, r3, #15
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d20c      	bcs.n	800c9b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c99a:	4b22      	ldr	r3, [pc, #136]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9a2:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <HAL_RCC_ClockConfig+0x1b8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 030f 	and.w	r3, r3, #15
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d001      	beq.n	800c9b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e032      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d008      	beq.n	800c9d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9c0:	4b19      	ldr	r3, [pc, #100]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	4916      	ldr	r1, [pc, #88]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0308 	and.w	r3, r3, #8
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c9de:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	490e      	ldr	r1, [pc, #56]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c9f2:	f000 f821 	bl	800ca38 <HAL_RCC_GetSysClockFreq>
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <HAL_RCC_ClockConfig+0x1bc>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	091b      	lsrs	r3, r3, #4
 800c9fe:	f003 030f 	and.w	r3, r3, #15
 800ca02:	4a0a      	ldr	r2, [pc, #40]	; (800ca2c <HAL_RCC_ClockConfig+0x1c0>)
 800ca04:	5cd3      	ldrb	r3, [r2, r3]
 800ca06:	fa21 f303 	lsr.w	r3, r1, r3
 800ca0a:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <HAL_RCC_ClockConfig+0x1c4>)
 800ca0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <HAL_RCC_ClockConfig+0x1c8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f7 f83e 	bl	8003a94 <HAL_InitTick>

  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	40023c00 	.word	0x40023c00
 800ca28:	40023800 	.word	0x40023800
 800ca2c:	080243a0 	.word	0x080243a0
 800ca30:	20000008 	.word	0x20000008
 800ca34:	20000070 	.word	0x20000070

0800ca38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	607b      	str	r3, [r7, #4]
 800ca42:	2300      	movs	r3, #0
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	2300      	movs	r3, #0
 800ca48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca4e:	4b63      	ldr	r3, [pc, #396]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f003 030c 	and.w	r3, r3, #12
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	d007      	beq.n	800ca6a <HAL_RCC_GetSysClockFreq+0x32>
 800ca5a:	2b08      	cmp	r3, #8
 800ca5c:	d008      	beq.n	800ca70 <HAL_RCC_GetSysClockFreq+0x38>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f040 80b4 	bne.w	800cbcc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ca64:	4b5e      	ldr	r3, [pc, #376]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ca66:	60bb      	str	r3, [r7, #8]
       break;
 800ca68:	e0b3      	b.n	800cbd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ca6a:	4b5e      	ldr	r3, [pc, #376]	; (800cbe4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ca6c:	60bb      	str	r3, [r7, #8]
      break;
 800ca6e:	e0b0      	b.n	800cbd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca70:	4b5a      	ldr	r3, [pc, #360]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ca7a:	4b58      	ldr	r3, [pc, #352]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d04a      	beq.n	800cb1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca86:	4b55      	ldr	r3, [pc, #340]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	099b      	lsrs	r3, r3, #6
 800ca8c:	f04f 0400 	mov.w	r4, #0
 800ca90:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ca94:	f04f 0200 	mov.w	r2, #0
 800ca98:	ea03 0501 	and.w	r5, r3, r1
 800ca9c:	ea04 0602 	and.w	r6, r4, r2
 800caa0:	4629      	mov	r1, r5
 800caa2:	4632      	mov	r2, r6
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	f04f 0400 	mov.w	r4, #0
 800caac:	0154      	lsls	r4, r2, #5
 800caae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cab2:	014b      	lsls	r3, r1, #5
 800cab4:	4619      	mov	r1, r3
 800cab6:	4622      	mov	r2, r4
 800cab8:	1b49      	subs	r1, r1, r5
 800caba:	eb62 0206 	sbc.w	r2, r2, r6
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	f04f 0400 	mov.w	r4, #0
 800cac6:	0194      	lsls	r4, r2, #6
 800cac8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cacc:	018b      	lsls	r3, r1, #6
 800cace:	1a5b      	subs	r3, r3, r1
 800cad0:	eb64 0402 	sbc.w	r4, r4, r2
 800cad4:	f04f 0100 	mov.w	r1, #0
 800cad8:	f04f 0200 	mov.w	r2, #0
 800cadc:	00e2      	lsls	r2, r4, #3
 800cade:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cae2:	00d9      	lsls	r1, r3, #3
 800cae4:	460b      	mov	r3, r1
 800cae6:	4614      	mov	r4, r2
 800cae8:	195b      	adds	r3, r3, r5
 800caea:	eb44 0406 	adc.w	r4, r4, r6
 800caee:	f04f 0100 	mov.w	r1, #0
 800caf2:	f04f 0200 	mov.w	r2, #0
 800caf6:	0262      	lsls	r2, r4, #9
 800caf8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800cafc:	0259      	lsls	r1, r3, #9
 800cafe:	460b      	mov	r3, r1
 800cb00:	4614      	mov	r4, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	4621      	mov	r1, r4
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f04f 0400 	mov.w	r4, #0
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4623      	mov	r3, r4
 800cb10:	f7f4 f8ca 	bl	8000ca8 <__aeabi_uldivmod>
 800cb14:	4603      	mov	r3, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e049      	b.n	800cbb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb1c:	4b2f      	ldr	r3, [pc, #188]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	099b      	lsrs	r3, r3, #6
 800cb22:	f04f 0400 	mov.w	r4, #0
 800cb26:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb2a:	f04f 0200 	mov.w	r2, #0
 800cb2e:	ea03 0501 	and.w	r5, r3, r1
 800cb32:	ea04 0602 	and.w	r6, r4, r2
 800cb36:	4629      	mov	r1, r5
 800cb38:	4632      	mov	r2, r6
 800cb3a:	f04f 0300 	mov.w	r3, #0
 800cb3e:	f04f 0400 	mov.w	r4, #0
 800cb42:	0154      	lsls	r4, r2, #5
 800cb44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cb48:	014b      	lsls	r3, r1, #5
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	1b49      	subs	r1, r1, r5
 800cb50:	eb62 0206 	sbc.w	r2, r2, r6
 800cb54:	f04f 0300 	mov.w	r3, #0
 800cb58:	f04f 0400 	mov.w	r4, #0
 800cb5c:	0194      	lsls	r4, r2, #6
 800cb5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cb62:	018b      	lsls	r3, r1, #6
 800cb64:	1a5b      	subs	r3, r3, r1
 800cb66:	eb64 0402 	sbc.w	r4, r4, r2
 800cb6a:	f04f 0100 	mov.w	r1, #0
 800cb6e:	f04f 0200 	mov.w	r2, #0
 800cb72:	00e2      	lsls	r2, r4, #3
 800cb74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cb78:	00d9      	lsls	r1, r3, #3
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	195b      	adds	r3, r3, r5
 800cb80:	eb44 0406 	adc.w	r4, r4, r6
 800cb84:	f04f 0100 	mov.w	r1, #0
 800cb88:	f04f 0200 	mov.w	r2, #0
 800cb8c:	02a2      	lsls	r2, r4, #10
 800cb8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cb92:	0299      	lsls	r1, r3, #10
 800cb94:	460b      	mov	r3, r1
 800cb96:	4614      	mov	r4, r2
 800cb98:	4618      	mov	r0, r3
 800cb9a:	4621      	mov	r1, r4
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f04f 0400 	mov.w	r4, #0
 800cba2:	461a      	mov	r2, r3
 800cba4:	4623      	mov	r3, r4
 800cba6:	f7f4 f87f 	bl	8000ca8 <__aeabi_uldivmod>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	0c1b      	lsrs	r3, r3, #16
 800cbb6:	f003 0303 	and.w	r3, r3, #3
 800cbba:	3301      	adds	r3, #1
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc8:	60bb      	str	r3, [r7, #8]
      break;
 800cbca:	e002      	b.n	800cbd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cbcc:	4b04      	ldr	r3, [pc, #16]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cbce:	60bb      	str	r3, [r7, #8]
      break;
 800cbd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cbd2:	68bb      	ldr	r3, [r7, #8]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbdc:	40023800 	.word	0x40023800
 800cbe0:	00f42400 	.word	0x00f42400
 800cbe4:	007a1200 	.word	0x007a1200

0800cbe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbec:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <HAL_RCC_GetHCLKFreq+0x14>)
 800cbee:	681b      	ldr	r3, [r3, #0]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20000008 	.word	0x20000008

0800cc00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cc04:	f7ff fff0 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc08:	4601      	mov	r1, r0
 800cc0a:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	0a9b      	lsrs	r3, r3, #10
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	4a03      	ldr	r2, [pc, #12]	; (800cc24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc16:	5cd3      	ldrb	r3, [r2, r3]
 800cc18:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	40023800 	.word	0x40023800
 800cc24:	080243b0 	.word	0x080243b0

0800cc28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cc2c:	f7ff ffdc 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc30:	4601      	mov	r1, r0
 800cc32:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	0b5b      	lsrs	r3, r3, #13
 800cc38:	f003 0307 	and.w	r3, r3, #7
 800cc3c:	4a03      	ldr	r2, [pc, #12]	; (800cc4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc3e:	5cd3      	ldrb	r3, [r2, r3]
 800cc40:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	40023800 	.word	0x40023800
 800cc4c:	080243b0 	.word	0x080243b0

0800cc50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	220f      	movs	r2, #15
 800cc5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cc60:	4b12      	ldr	r3, [pc, #72]	; (800ccac <HAL_RCC_GetClockConfig+0x5c>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f003 0203 	and.w	r2, r3, #3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <HAL_RCC_GetClockConfig+0x5c>)
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <HAL_RCC_GetClockConfig+0x5c>)
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cc84:	4b09      	ldr	r3, [pc, #36]	; (800ccac <HAL_RCC_GetClockConfig+0x5c>)
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	08db      	lsrs	r3, r3, #3
 800cc8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <HAL_RCC_GetClockConfig+0x60>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 020f 	and.w	r2, r3, #15
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	601a      	str	r2, [r3, #0]
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	40023800 	.word	0x40023800
 800ccb0:	40023c00 	.word	0x40023c00

0800ccb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0301 	and.w	r3, r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d105      	bne.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d035      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ccdc:	4b62      	ldr	r3, [pc, #392]	; (800ce68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cce2:	f7fc ffdb 	bl	8009c9c <HAL_GetTick>
 800cce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cce8:	e008      	b.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ccea:	f7fc ffd7 	bl	8009c9c <HAL_GetTick>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d901      	bls.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e0b0      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ccfc:	4b5b      	ldr	r3, [pc, #364]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1f0      	bne.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	019a      	lsls	r2, r3, #6
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	071b      	lsls	r3, r3, #28
 800cd14:	4955      	ldr	r1, [pc, #340]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cd1c:	4b52      	ldr	r3, [pc, #328]	; (800ce68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cd1e:	2201      	movs	r2, #1
 800cd20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cd22:	f7fc ffbb 	bl	8009c9c <HAL_GetTick>
 800cd26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd28:	e008      	b.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cd2a:	f7fc ffb7 	bl	8009c9c <HAL_GetTick>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d901      	bls.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	e090      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd3c:	4b4b      	ldr	r3, [pc, #300]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0f0      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0302 	and.w	r3, r3, #2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 8083 	beq.w	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd56:	2300      	movs	r3, #0
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	4b44      	ldr	r3, [pc, #272]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	4a43      	ldr	r2, [pc, #268]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd64:	6413      	str	r3, [r2, #64]	; 0x40
 800cd66:	4b41      	ldr	r3, [pc, #260]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cd72:	4b3f      	ldr	r3, [pc, #252]	; (800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a3e      	ldr	r2, [pc, #248]	; (800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd7e:	f7fc ff8d 	bl	8009c9c <HAL_GetTick>
 800cd82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cd84:	e008      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cd86:	f7fc ff89 	bl	8009c9c <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d901      	bls.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e062      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cd98:	4b35      	ldr	r3, [pc, #212]	; (800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d0f0      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cda4:	4b31      	ldr	r3, [pc, #196]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d02f      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d028      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cdc2:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cdcc:	4b29      	ldr	r3, [pc, #164]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cdd2:	4b28      	ldr	r3, [pc, #160]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cdd8:	4a24      	ldr	r2, [pc, #144]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cdde:	4b23      	ldr	r3, [pc, #140]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d114      	bne.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cdea:	f7fc ff57 	bl	8009c9c <HAL_GetTick>
 800cdee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdf0:	e00a      	b.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdf2:	f7fc ff53 	bl	8009c9c <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d901      	bls.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e02a      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce08:	4b18      	ldr	r3, [pc, #96]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0ee      	beq.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce20:	d10d      	bne.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ce22:	4b12      	ldr	r3, [pc, #72]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce36:	490d      	ldr	r1, [pc, #52]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	608b      	str	r3, [r1, #8]
 800ce3c:	e005      	b.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ce3e:	4b0b      	ldr	r3, [pc, #44]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ce48:	6093      	str	r3, [r2, #8]
 800ce4a:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce56:	4905      	ldr	r1, [pc, #20]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	42470068 	.word	0x42470068
 800ce6c:	40023800 	.word	0x40023800
 800ce70:	40007000 	.word	0x40007000
 800ce74:	42470e40 	.word	0x42470e40

0800ce78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e083      	b.n	800cf92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7f5b      	ldrb	r3, [r3, #29]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d105      	bne.n	800cea0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7f6 fcb0 	bl	8003800 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	22ca      	movs	r2, #202	; 0xca
 800ceac:	625a      	str	r2, [r3, #36]	; 0x24
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2253      	movs	r2, #83	; 0x53
 800ceb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f9fb 	bl	800d2b2 <RTC_EnterInitMode>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d008      	beq.n	800ced4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	22ff      	movs	r2, #255	; 0xff
 800cec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2204      	movs	r2, #4
 800cece:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	e05e      	b.n	800cf92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	6812      	ldr	r2, [r2, #0]
 800cede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cee6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6899      	ldr	r1, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685a      	ldr	r2, [r3, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	431a      	orrs	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	68d2      	ldr	r2, [r2, #12]
 800cf0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6919      	ldr	r1, [r3, #16]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	041a      	lsls	r2, r3, #16
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	430a      	orrs	r2, r1
 800cf22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68da      	ldr	r2, [r3, #12]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	f003 0320 	and.w	r3, r3, #32
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10e      	bne.n	800cf60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f98d 	bl	800d262 <HAL_RTC_WaitForSynchro>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d008      	beq.n	800cf60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	22ff      	movs	r2, #255	; 0xff
 800cf54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e018      	b.n	800cf92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cf6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	699a      	ldr	r2, [r3, #24]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	430a      	orrs	r2, r1
 800cf80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	22ff      	movs	r2, #255	; 0xff
 800cf88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cf90:	2300      	movs	r3, #0
  }
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cf9a:	b590      	push	{r4, r7, lr}
 800cf9c:	b087      	sub	sp, #28
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	60f8      	str	r0, [r7, #12]
 800cfa2:	60b9      	str	r1, [r7, #8]
 800cfa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	7f1b      	ldrb	r3, [r3, #28]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <HAL_RTC_SetTime+0x1c>
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e0aa      	b.n	800d10c <HAL_RTC_SetTime+0x172>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d126      	bne.n	800d016 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d102      	bne.n	800cfdc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 f992 	bl	800d30a <RTC_ByteToBcd2>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	785b      	ldrb	r3, [r3, #1]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f000 f98b 	bl	800d30a <RTC_ByteToBcd2>
 800cff4:	4603      	mov	r3, r0
 800cff6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cff8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	789b      	ldrb	r3, [r3, #2]
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 f983 	bl	800d30a <RTC_ByteToBcd2>
 800d004:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d006:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	78db      	ldrb	r3, [r3, #3]
 800d00e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	e018      	b.n	800d048 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d020:	2b00      	cmp	r3, #0
 800d022:	d102      	bne.n	800d02a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2200      	movs	r2, #0
 800d028:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	785b      	ldrb	r3, [r3, #1]
 800d034:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d036:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d03c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	78db      	ldrb	r3, [r3, #3]
 800d042:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d044:	4313      	orrs	r3, r2
 800d046:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	22ca      	movs	r2, #202	; 0xca
 800d04e:	625a      	str	r2, [r3, #36]	; 0x24
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2253      	movs	r2, #83	; 0x53
 800d056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 f92a 	bl	800d2b2 <RTC_EnterInitMode>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00b      	beq.n	800d07c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	22ff      	movs	r2, #255	; 0xff
 800d06a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2204      	movs	r2, #4
 800d070:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	e047      	b.n	800d10c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d08a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d09a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6899      	ldr	r1, [r3, #8]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	68da      	ldr	r2, [r3, #12]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f003 0320 	and.w	r3, r3, #32
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d111      	bne.n	800d0f6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f000 f8c5 	bl	800d262 <HAL_RTC_WaitForSynchro>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00b      	beq.n	800d0f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	22ff      	movs	r2, #255	; 0xff
 800d0e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2204      	movs	r2, #4
 800d0ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e00a      	b.n	800d10c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	22ff      	movs	r2, #255	; 0xff
 800d0fc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2201      	movs	r2, #1
 800d102:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d10a:	2300      	movs	r3, #0
  }
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	371c      	adds	r7, #28
 800d110:	46bd      	mov	sp, r7
 800d112:	bd90      	pop	{r4, r7, pc}

0800d114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d114:	b590      	push	{r4, r7, lr}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	7f1b      	ldrb	r3, [r3, #28]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d101      	bne.n	800d130 <HAL_RTC_SetDate+0x1c>
 800d12c:	2302      	movs	r3, #2
 800d12e:	e094      	b.n	800d25a <HAL_RTC_SetDate+0x146>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2201      	movs	r2, #1
 800d134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2202      	movs	r2, #2
 800d13a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10e      	bne.n	800d160 <HAL_RTC_SetDate+0x4c>
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	785b      	ldrb	r3, [r3, #1]
 800d146:	f003 0310 	and.w	r3, r3, #16
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d008      	beq.n	800d160 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	785b      	ldrb	r3, [r3, #1]
 800d152:	f023 0310 	bic.w	r3, r3, #16
 800d156:	b2db      	uxtb	r3, r3
 800d158:	330a      	adds	r3, #10
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d11c      	bne.n	800d1a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	78db      	ldrb	r3, [r3, #3]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f8cd 	bl	800d30a <RTC_ByteToBcd2>
 800d170:	4603      	mov	r3, r0
 800d172:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 f8c6 	bl	800d30a <RTC_ByteToBcd2>
 800d17e:	4603      	mov	r3, r0
 800d180:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d182:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	789b      	ldrb	r3, [r3, #2]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 f8be 	bl	800d30a <RTC_ByteToBcd2>
 800d18e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d190:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d19a:	4313      	orrs	r3, r2
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e00e      	b.n	800d1be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	78db      	ldrb	r3, [r3, #3]
 800d1a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	785b      	ldrb	r3, [r3, #1]
 800d1aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d1b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	22ca      	movs	r2, #202	; 0xca
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2253      	movs	r2, #83	; 0x53
 800d1cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 f86f 	bl	800d2b2 <RTC_EnterInitMode>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	22ff      	movs	r2, #255	; 0xff
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e033      	b.n	800d25a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d1fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68da      	ldr	r2, [r3, #12]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d210:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	f003 0320 	and.w	r3, r3, #32
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d111      	bne.n	800d244 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 f81e 	bl	800d262 <HAL_RTC_WaitForSynchro>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	22ff      	movs	r2, #255	; 0xff
 800d232:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2204      	movs	r2, #4
 800d238:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e00a      	b.n	800d25a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	22ff      	movs	r2, #255	; 0xff
 800d24a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d258:	2300      	movs	r3, #0
  }
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}

0800d262 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b084      	sub	sp, #16
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68da      	ldr	r2, [r3, #12]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d27c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d27e:	f7fc fd0d 	bl	8009c9c <HAL_GetTick>
 800d282:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d284:	e009      	b.n	800d29a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d286:	f7fc fd09 	bl	8009c9c <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d294:	d901      	bls.n	800d29a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d296:	2303      	movs	r3, #3
 800d298:	e007      	b.n	800d2aa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	f003 0320 	and.w	r3, r3, #32
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d0ee      	beq.n	800d286 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d119      	bne.n	800d300 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d2d6:	f7fc fce1 	bl	8009c9c <HAL_GetTick>
 800d2da:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2dc:	e009      	b.n	800d2f2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d2de:	f7fc fcdd 	bl	8009c9c <HAL_GetTick>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ec:	d901      	bls.n	800d2f2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e007      	b.n	800d302 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d0ee      	beq.n	800d2de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af00      	add	r7, sp, #0
 800d310:	4603      	mov	r3, r0
 800d312:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d318:	e005      	b.n	800d326 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	3b0a      	subs	r3, #10
 800d324:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d326:	79fb      	ldrb	r3, [r7, #7]
 800d328:	2b09      	cmp	r3, #9
 800d32a:	d8f6      	bhi.n	800d31a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	011b      	lsls	r3, r3, #4
 800d332:	b2da      	uxtb	r2, r3
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	4313      	orrs	r3, r2
 800d338:	b2db      	uxtb	r3, r3
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	e056      	b.n	800d406 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d106      	bne.n	800d378 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7f6 fac2 	bl	80038fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2202      	movs	r2, #2
 800d37c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d38e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	431a      	orrs	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3b4:	431a      	orrs	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	431a      	orrs	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a1b      	ldr	r3, [r3, #32]
 800d3c0:	ea42 0103 	orr.w	r1, r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	699b      	ldr	r3, [r3, #24]
 800d3d4:	0c1b      	lsrs	r3, r3, #16
 800d3d6:	f003 0104 	and.w	r1, r3, #4
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	69da      	ldr	r2, [r3, #28]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b08c      	sub	sp, #48	; 0x30
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d41c:	2301      	movs	r3, #1
 800d41e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d101      	bne.n	800d434 <HAL_SPI_TransmitReceive+0x26>
 800d430:	2302      	movs	r3, #2
 800d432:	e18a      	b.n	800d74a <HAL_SPI_TransmitReceive+0x33c>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d43c:	f7fc fc2e 	bl	8009c9c <HAL_GetTick>
 800d440:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d452:	887b      	ldrh	r3, [r7, #2]
 800d454:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d00f      	beq.n	800d47e <HAL_SPI_TransmitReceive+0x70>
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d464:	d107      	bne.n	800d476 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d103      	bne.n	800d476 <HAL_SPI_TransmitReceive+0x68>
 800d46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d472:	2b04      	cmp	r3, #4
 800d474:	d003      	beq.n	800d47e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d476:	2302      	movs	r3, #2
 800d478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d47c:	e15b      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d005      	beq.n	800d490 <HAL_SPI_TransmitReceive+0x82>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <HAL_SPI_TransmitReceive+0x82>
 800d48a:	887b      	ldrh	r3, [r7, #2]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d103      	bne.n	800d498 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d496:	e14e      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b04      	cmp	r3, #4
 800d4a2:	d003      	beq.n	800d4ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2205      	movs	r2, #5
 800d4a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	887a      	ldrh	r2, [r7, #2]
 800d4bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	887a      	ldrh	r2, [r7, #2]
 800d4c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	68ba      	ldr	r2, [r7, #8]
 800d4c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	887a      	ldrh	r2, [r7, #2]
 800d4ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	887a      	ldrh	r2, [r7, #2]
 800d4d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ec:	2b40      	cmp	r3, #64	; 0x40
 800d4ee:	d007      	beq.n	800d500 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d508:	d178      	bne.n	800d5fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <HAL_SPI_TransmitReceive+0x10a>
 800d512:	8b7b      	ldrh	r3, [r7, #26]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d166      	bne.n	800d5e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51c:	881a      	ldrh	r2, [r3, #0]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d528:	1c9a      	adds	r2, r3, #2
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d532:	b29b      	uxth	r3, r3
 800d534:	3b01      	subs	r3, #1
 800d536:	b29a      	uxth	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d53c:	e053      	b.n	800d5e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d11b      	bne.n	800d584 <HAL_SPI_TransmitReceive+0x176>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d550:	b29b      	uxth	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d016      	beq.n	800d584 <HAL_SPI_TransmitReceive+0x176>
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d113      	bne.n	800d584 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d560:	881a      	ldrh	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56c:	1c9a      	adds	r2, r3, #2
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d576:	b29b      	uxth	r3, r3
 800d578:	3b01      	subs	r3, #1
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d119      	bne.n	800d5c6 <HAL_SPI_TransmitReceive+0x1b8>
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d596:	b29b      	uxth	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d014      	beq.n	800d5c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	1c9a      	adds	r2, r3, #2
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d5c6:	f7fc fb69 	bl	8009c9c <HAL_GetTick>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d807      	bhi.n	800d5e6 <HAL_SPI_TransmitReceive+0x1d8>
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5dc:	d003      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d5e4:	e0a7      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1a6      	bne.n	800d53e <HAL_SPI_TransmitReceive+0x130>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1a1      	bne.n	800d53e <HAL_SPI_TransmitReceive+0x130>
 800d5fa:	e07c      	b.n	800d6f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <HAL_SPI_TransmitReceive+0x1fc>
 800d604:	8b7b      	ldrh	r3, [r7, #26]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d16b      	bne.n	800d6e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	330c      	adds	r3, #12
 800d614:	7812      	ldrb	r2, [r2, #0]
 800d616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d626:	b29b      	uxth	r3, r3
 800d628:	3b01      	subs	r3, #1
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d630:	e057      	b.n	800d6e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d11c      	bne.n	800d67a <HAL_SPI_TransmitReceive+0x26c>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d644:	b29b      	uxth	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <HAL_SPI_TransmitReceive+0x26c>
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d114      	bne.n	800d67a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	330c      	adds	r3, #12
 800d65a:	7812      	ldrb	r2, [r2, #0]
 800d65c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	3b01      	subs	r3, #1
 800d670:	b29a      	uxth	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	2b01      	cmp	r3, #1
 800d686:	d119      	bne.n	800d6bc <HAL_SPI_TransmitReceive+0x2ae>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d014      	beq.n	800d6bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68da      	ldr	r2, [r3, #12]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69c:	b2d2      	uxtb	r2, r2
 800d69e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d6bc:	f7fc faee 	bl	8009c9c <HAL_GetTick>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	1ad3      	subs	r3, r2, r3
 800d6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d803      	bhi.n	800d6d4 <HAL_SPI_TransmitReceive+0x2c6>
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d2:	d102      	bne.n	800d6da <HAL_SPI_TransmitReceive+0x2cc>
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d6e0:	e029      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1a2      	bne.n	800d632 <HAL_SPI_TransmitReceive+0x224>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d19d      	bne.n	800d632 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f000 f9b2 	bl	800da64 <SPI_EndRxTxTransaction>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d006      	beq.n	800d714 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2220      	movs	r2, #32
 800d710:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d712:	e010      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10b      	bne.n	800d734 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d71c:	2300      	movs	r3, #0
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	617b      	str	r3, [r7, #20]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	e000      	b.n	800d736 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3730      	adds	r7, #48	; 0x30
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	099b      	lsrs	r3, r3, #6
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10f      	bne.n	800d798 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00a      	beq.n	800d798 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	099b      	lsrs	r3, r3, #6
 800d786:	f003 0301 	and.w	r3, r3, #1
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d004      	beq.n	800d798 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	4798      	blx	r3
    return;
 800d796:	e0d8      	b.n	800d94a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	085b      	lsrs	r3, r3, #1
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00a      	beq.n	800d7ba <HAL_SPI_IRQHandler+0x66>
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	09db      	lsrs	r3, r3, #7
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d004      	beq.n	800d7ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	4798      	blx	r3
    return;
 800d7b8:	e0c7      	b.n	800d94a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	095b      	lsrs	r3, r3, #5
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10c      	bne.n	800d7e0 <HAL_SPI_IRQHandler+0x8c>
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	099b      	lsrs	r3, r3, #6
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	0a1b      	lsrs	r3, r3, #8
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 80b5 	beq.w	800d94a <HAL_SPI_IRQHandler+0x1f6>
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	095b      	lsrs	r3, r3, #5
 800d7e4:	f003 0301 	and.w	r3, r3, #1
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 80ae 	beq.w	800d94a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	099b      	lsrs	r3, r3, #6
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d023      	beq.n	800d842 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b03      	cmp	r3, #3
 800d804:	d011      	beq.n	800d82a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80a:	f043 0204 	orr.w	r2, r3, #4
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	e00b      	b.n	800d842 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d82a:	2300      	movs	r3, #0
 800d82c:	613b      	str	r3, [r7, #16]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	613b      	str	r3, [r7, #16]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	613b      	str	r3, [r7, #16]
 800d83e:	693b      	ldr	r3, [r7, #16]
        return;
 800d840:	e083      	b.n	800d94a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	095b      	lsrs	r3, r3, #5
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d014      	beq.n	800d878 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d852:	f043 0201 	orr.w	r2, r3, #1
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00c      	beq.n	800d89e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d888:	f043 0208 	orr.w	r2, r3, #8
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d890:	2300      	movs	r3, #0
 800d892:	60bb      	str	r3, [r7, #8]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	60bb      	str	r3, [r7, #8]
 800d89c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d050      	beq.n	800d948 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d8b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d104      	bne.n	800d8d2 <HAL_SPI_IRQHandler+0x17e>
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d034      	beq.n	800d93c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f022 0203 	bic.w	r2, r2, #3
 800d8e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d011      	beq.n	800d90e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ee:	4a18      	ldr	r2, [pc, #96]	; (800d950 <HAL_SPI_IRQHandler+0x1fc>)
 800d8f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fd f838 	bl	800a96c <HAL_DMA_Abort_IT>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d005      	beq.n	800d90e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d912:	2b00      	cmp	r3, #0
 800d914:	d016      	beq.n	800d944 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d91a:	4a0d      	ldr	r2, [pc, #52]	; (800d950 <HAL_SPI_IRQHandler+0x1fc>)
 800d91c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d922:	4618      	mov	r0, r3
 800d924:	f7fd f822 	bl	800a96c <HAL_DMA_Abort_IT>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d93a:	e003      	b.n	800d944 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f809 	bl	800d954 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d942:	e000      	b.n	800d946 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d944:	bf00      	nop
    return;
 800d946:	bf00      	nop
 800d948:	bf00      	nop
  }
}
 800d94a:	3720      	adds	r7, #32
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	0800d969 	.word	0x0800d969

0800d954 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d974:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f7ff ffe6 	bl	800d954 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	603b      	str	r3, [r7, #0]
 800d99c:	4613      	mov	r3, r2
 800d99e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d9a0:	e04c      	b.n	800da3c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a8:	d048      	beq.n	800da3c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d9aa:	f7fc f977 	bl	8009c9c <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d902      	bls.n	800d9c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d13d      	bne.n	800da3c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d9ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9d8:	d111      	bne.n	800d9fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9e2:	d004      	beq.n	800d9ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9ec:	d107      	bne.n	800d9fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da06:	d10f      	bne.n	800da28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da16:	601a      	str	r2, [r3, #0]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800da38:	2303      	movs	r3, #3
 800da3a:	e00f      	b.n	800da5c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	4013      	ands	r3, r2
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	429a      	cmp	r2, r3
 800da4a:	bf0c      	ite	eq
 800da4c:	2301      	moveq	r3, #1
 800da4e:	2300      	movne	r3, #0
 800da50:	b2db      	uxtb	r3, r3
 800da52:	461a      	mov	r2, r3
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	429a      	cmp	r2, r3
 800da58:	d1a3      	bne.n	800d9a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af02      	add	r7, sp, #8
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da70:	4b1b      	ldr	r3, [pc, #108]	; (800dae0 <SPI_EndRxTxTransaction+0x7c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a1b      	ldr	r2, [pc, #108]	; (800dae4 <SPI_EndRxTxTransaction+0x80>)
 800da76:	fba2 2303 	umull	r2, r3, r2, r3
 800da7a:	0d5b      	lsrs	r3, r3, #21
 800da7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da80:	fb02 f303 	mul.w	r3, r2, r3
 800da84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da8e:	d112      	bne.n	800dab6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2200      	movs	r2, #0
 800da98:	2180      	movs	r1, #128	; 0x80
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f7ff ff78 	bl	800d990 <SPI_WaitFlagStateUntilTimeout>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d016      	beq.n	800dad4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daaa:	f043 0220 	orr.w	r2, r3, #32
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e00f      	b.n	800dad6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00a      	beq.n	800dad2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	3b01      	subs	r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dacc:	2b80      	cmp	r3, #128	; 0x80
 800dace:	d0f2      	beq.n	800dab6 <SPI_EndRxTxTransaction+0x52>
 800dad0:	e000      	b.n	800dad4 <SPI_EndRxTxTransaction+0x70>
        break;
 800dad2:	bf00      	nop
  }

  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	20000008 	.word	0x20000008
 800dae4:	165e9f81 	.word	0x165e9f81

0800dae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e01d      	b.n	800db36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7f6 fc66 	bl	80043e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2202      	movs	r2, #2
 800db18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f000 fcc0 	bl	800e4ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db3e:	b480      	push	{r7}
 800db40:	b085      	sub	sp, #20
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68da      	ldr	r2, [r3, #12]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f042 0201 	orr.w	r2, r2, #1
 800db54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	f003 0307 	and.w	r3, r3, #7
 800db60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b06      	cmp	r3, #6
 800db66:	d007      	beq.n	800db78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 0201 	orr.w	r2, r2, #1
 800db76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e01d      	b.n	800dbd4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7f6 fbf5 	bl	800439c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2202      	movs	r2, #2
 800dbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	f000 fc71 	bl	800e4ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2201      	movs	r2, #1
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 feac 	bl	800e94c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <HAL_TIM_OC_Start+0x74>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d004      	beq.n	800dc08 <HAL_TIM_OC_Start+0x2c>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a14      	ldr	r2, [pc, #80]	; (800dc54 <HAL_TIM_OC_Start+0x78>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d101      	bne.n	800dc0c <HAL_TIM_OC_Start+0x30>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e000      	b.n	800dc0e <HAL_TIM_OC_Start+0x32>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d007      	beq.n	800dc22 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f003 0307 	and.w	r3, r3, #7
 800dc2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b06      	cmp	r3, #6
 800dc32:	d007      	beq.n	800dc44 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f042 0201 	orr.w	r2, r2, #1
 800dc42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	40010000 	.word	0x40010000
 800dc54:	40010400 	.word	0x40010400

0800dc58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e01d      	b.n	800dca6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d106      	bne.n	800dc84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7f6 fa8c 	bl	800419c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2202      	movs	r2, #2
 800dc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3304      	adds	r3, #4
 800dc94:	4619      	mov	r1, r3
 800dc96:	4610      	mov	r0, r2
 800dc98:	f000 fc08 	bl	800e4ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d101      	bne.n	800dcce <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800dcca:	2302      	movs	r3, #2
 800dccc:	e0f3      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10b      	bne.n	800dcf2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d104      	bne.n	800dcea <HAL_TIM_PWM_Start_DMA+0x3a>
 800dce0:	887b      	ldrh	r3, [r7, #2]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d001      	beq.n	800dcea <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e0e5      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2202      	movs	r2, #2
 800dcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b0c      	cmp	r3, #12
 800dcf6:	f200 80ad 	bhi.w	800de54 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800dcfa:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <HAL_TIM_PWM_Start_DMA+0x50>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd35 	.word	0x0800dd35
 800dd04:	0800de55 	.word	0x0800de55
 800dd08:	0800de55 	.word	0x0800de55
 800dd0c:	0800de55 	.word	0x0800de55
 800dd10:	0800dd7d 	.word	0x0800dd7d
 800dd14:	0800de55 	.word	0x0800de55
 800dd18:	0800de55 	.word	0x0800de55
 800dd1c:	0800de55 	.word	0x0800de55
 800dd20:	0800ddc5 	.word	0x0800ddc5
 800dd24:	0800de55 	.word	0x0800de55
 800dd28:	0800de55 	.word	0x0800de55
 800dd2c:	0800de55 	.word	0x0800de55
 800dd30:	0800de0d 	.word	0x0800de0d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	4a61      	ldr	r2, [pc, #388]	; (800dec0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800dd3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	4a60      	ldr	r2, [pc, #384]	; (800dec4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800dd42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	4a5f      	ldr	r2, [pc, #380]	; (800dec8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800dd4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3334      	adds	r3, #52	; 0x34
 800dd58:	461a      	mov	r2, r3
 800dd5a:	887b      	ldrh	r3, [r7, #2]
 800dd5c:	f7fc fdae 	bl	800a8bc <HAL_DMA_Start_IT>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e0a5      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd78:	60da      	str	r2, [r3, #12]
      break;
 800dd7a:	e06c      	b.n	800de56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd80:	4a4f      	ldr	r2, [pc, #316]	; (800dec0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800dd82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd88:	4a4e      	ldr	r2, [pc, #312]	; (800dec4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800dd8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd90:	4a4d      	ldr	r2, [pc, #308]	; (800dec8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800dd92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dd98:	6879      	ldr	r1, [r7, #4]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3338      	adds	r3, #56	; 0x38
 800dda0:	461a      	mov	r2, r3
 800dda2:	887b      	ldrh	r3, [r7, #2]
 800dda4:	f7fc fd8a 	bl	800a8bc <HAL_DMA_Start_IT>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e081      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68da      	ldr	r2, [r3, #12]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddc0:	60da      	str	r2, [r3, #12]
      break;
 800ddc2:	e048      	b.n	800de56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc8:	4a3d      	ldr	r2, [pc, #244]	; (800dec0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800ddca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd0:	4a3c      	ldr	r2, [pc, #240]	; (800dec4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800ddd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd8:	4a3b      	ldr	r2, [pc, #236]	; (800dec8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800ddda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	333c      	adds	r3, #60	; 0x3c
 800dde8:	461a      	mov	r2, r3
 800ddea:	887b      	ldrh	r3, [r7, #2]
 800ddec:	f7fc fd66 	bl	800a8bc <HAL_DMA_Start_IT>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e05d      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68da      	ldr	r2, [r3, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de08:	60da      	str	r2, [r3, #12]
      break;
 800de0a:	e024      	b.n	800de56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de10:	4a2b      	ldr	r2, [pc, #172]	; (800dec0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800de12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de18:	4a2a      	ldr	r2, [pc, #168]	; (800dec4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800de1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de20:	4a29      	ldr	r2, [pc, #164]	; (800dec8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800de22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3340      	adds	r3, #64	; 0x40
 800de30:	461a      	mov	r2, r3
 800de32:	887b      	ldrh	r3, [r7, #2]
 800de34:	f7fc fd42 	bl	800a8bc <HAL_DMA_Start_IT>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e039      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68da      	ldr	r2, [r3, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de50:	60da      	str	r2, [r3, #12]
      break;
 800de52:	e000      	b.n	800de56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800de54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2201      	movs	r2, #1
 800de5c:	68b9      	ldr	r1, [r7, #8]
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 fd74 	bl	800e94c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a18      	ldr	r2, [pc, #96]	; (800decc <HAL_TIM_PWM_Start_DMA+0x21c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d004      	beq.n	800de78 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a17      	ldr	r2, [pc, #92]	; (800ded0 <HAL_TIM_PWM_Start_DMA+0x220>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d101      	bne.n	800de7c <HAL_TIM_PWM_Start_DMA+0x1cc>
 800de78:	2301      	movs	r3, #1
 800de7a:	e000      	b.n	800de7e <HAL_TIM_PWM_Start_DMA+0x1ce>
 800de7c:	2300      	movs	r3, #0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d007      	beq.n	800de92 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d007      	beq.n	800deb4 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0201 	orr.w	r2, r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	0800e3cd 	.word	0x0800e3cd
 800dec4:	0800e43d 	.word	0x0800e43d
 800dec8:	0800e3a9 	.word	0x0800e3a9
 800decc:	40010000 	.word	0x40010000
 800ded0:	40010400 	.word	0x40010400

0800ded4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	f003 0302 	and.w	r3, r3, #2
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d122      	bne.n	800df30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	f003 0302 	and.w	r3, r3, #2
 800def4:	2b02      	cmp	r3, #2
 800def6:	d11b      	bne.n	800df30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f06f 0202 	mvn.w	r2, #2
 800df00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2201      	movs	r2, #1
 800df06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	699b      	ldr	r3, [r3, #24]
 800df0e:	f003 0303 	and.w	r3, r3, #3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d003      	beq.n	800df1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fa14 	bl	800e344 <HAL_TIM_IC_CaptureCallback>
 800df1c:	e005      	b.n	800df2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 fa06 	bl	800e330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fa17 	bl	800e358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f003 0304 	and.w	r3, r3, #4
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d122      	bne.n	800df84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	2b04      	cmp	r3, #4
 800df4a:	d11b      	bne.n	800df84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f06f 0204 	mvn.w	r2, #4
 800df54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2202      	movs	r2, #2
 800df5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f9ea 	bl	800e344 <HAL_TIM_IC_CaptureCallback>
 800df70:	e005      	b.n	800df7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f9dc 	bl	800e330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f9ed 	bl	800e358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	f003 0308 	and.w	r3, r3, #8
 800df8e:	2b08      	cmp	r3, #8
 800df90:	d122      	bne.n	800dfd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	f003 0308 	and.w	r3, r3, #8
 800df9c:	2b08      	cmp	r3, #8
 800df9e:	d11b      	bne.n	800dfd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f06f 0208 	mvn.w	r2, #8
 800dfa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2204      	movs	r2, #4
 800dfae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	69db      	ldr	r3, [r3, #28]
 800dfb6:	f003 0303 	and.w	r3, r3, #3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f9c0 	bl	800e344 <HAL_TIM_IC_CaptureCallback>
 800dfc4:	e005      	b.n	800dfd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f9b2 	bl	800e330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f9c3 	bl	800e358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	f003 0310 	and.w	r3, r3, #16
 800dfe2:	2b10      	cmp	r3, #16
 800dfe4:	d122      	bne.n	800e02c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f003 0310 	and.w	r3, r3, #16
 800dff0:	2b10      	cmp	r3, #16
 800dff2:	d11b      	bne.n	800e02c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f06f 0210 	mvn.w	r2, #16
 800dffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2208      	movs	r2, #8
 800e002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d003      	beq.n	800e01a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f996 	bl	800e344 <HAL_TIM_IC_CaptureCallback>
 800e018:	e005      	b.n	800e026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f988 	bl	800e330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f999 	bl	800e358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	2b01      	cmp	r3, #1
 800e038:	d10e      	bne.n	800e058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b01      	cmp	r3, #1
 800e046:	d107      	bne.n	800e058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f06f 0201 	mvn.w	r2, #1
 800e050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7f5 fb32 	bl	80036bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e062:	2b80      	cmp	r3, #128	; 0x80
 800e064:	d10e      	bne.n	800e084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e070:	2b80      	cmp	r3, #128	; 0x80
 800e072:	d107      	bne.n	800e084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fd10 	bl	800eaa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08e:	2b40      	cmp	r3, #64	; 0x40
 800e090:	d10e      	bne.n	800e0b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09c:	2b40      	cmp	r3, #64	; 0x40
 800e09e:	d107      	bne.n	800e0b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f968 	bl	800e380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	f003 0320 	and.w	r3, r3, #32
 800e0ba:	2b20      	cmp	r3, #32
 800e0bc:	d10e      	bne.n	800e0dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	d107      	bne.n	800e0dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f06f 0220 	mvn.w	r2, #32
 800e0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fcda 	bl	800ea90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <HAL_TIM_OC_ConfigChannel+0x1a>
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e04e      	b.n	800e19c <HAL_TIM_OC_ConfigChannel+0xb8>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2202      	movs	r2, #2
 800e10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b0c      	cmp	r3, #12
 800e112:	d839      	bhi.n	800e188 <HAL_TIM_OC_ConfigChannel+0xa4>
 800e114:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <HAL_TIM_OC_ConfigChannel+0x38>)
 800e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11a:	bf00      	nop
 800e11c:	0800e151 	.word	0x0800e151
 800e120:	0800e189 	.word	0x0800e189
 800e124:	0800e189 	.word	0x0800e189
 800e128:	0800e189 	.word	0x0800e189
 800e12c:	0800e15f 	.word	0x0800e15f
 800e130:	0800e189 	.word	0x0800e189
 800e134:	0800e189 	.word	0x0800e189
 800e138:	0800e189 	.word	0x0800e189
 800e13c:	0800e16d 	.word	0x0800e16d
 800e140:	0800e189 	.word	0x0800e189
 800e144:	0800e189 	.word	0x0800e189
 800e148:	0800e189 	.word	0x0800e189
 800e14c:	0800e17b 	.word	0x0800e17b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68b9      	ldr	r1, [r7, #8]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 fa48 	bl	800e5ec <TIM_OC1_SetConfig>
      break;
 800e15c:	e015      	b.n	800e18a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68b9      	ldr	r1, [r7, #8]
 800e164:	4618      	mov	r0, r3
 800e166:	f000 fab1 	bl	800e6cc <TIM_OC2_SetConfig>
      break;
 800e16a:	e00e      	b.n	800e18a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	4618      	mov	r0, r3
 800e174:	f000 fb20 	bl	800e7b8 <TIM_OC3_SetConfig>
      break;
 800e178:	e007      	b.n	800e18a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	4618      	mov	r0, r3
 800e182:	f000 fb8d 	bl	800e8a0 <TIM_OC4_SetConfig>
      break;
 800e186:	e000      	b.n	800e18a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800e188:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d101      	bne.n	800e1be <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	e0b4      	b.n	800e328 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b0c      	cmp	r3, #12
 800e1d2:	f200 809f 	bhi.w	800e314 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e211 	.word	0x0800e211
 800e1e0:	0800e315 	.word	0x0800e315
 800e1e4:	0800e315 	.word	0x0800e315
 800e1e8:	0800e315 	.word	0x0800e315
 800e1ec:	0800e251 	.word	0x0800e251
 800e1f0:	0800e315 	.word	0x0800e315
 800e1f4:	0800e315 	.word	0x0800e315
 800e1f8:	0800e315 	.word	0x0800e315
 800e1fc:	0800e293 	.word	0x0800e293
 800e200:	0800e315 	.word	0x0800e315
 800e204:	0800e315 	.word	0x0800e315
 800e208:	0800e315 	.word	0x0800e315
 800e20c:	0800e2d3 	.word	0x0800e2d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f9e8 	bl	800e5ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f042 0208 	orr.w	r2, r2, #8
 800e22a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	699a      	ldr	r2, [r3, #24]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f022 0204 	bic.w	r2, r2, #4
 800e23a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	6999      	ldr	r1, [r3, #24]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	691a      	ldr	r2, [r3, #16]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	430a      	orrs	r2, r1
 800e24c:	619a      	str	r2, [r3, #24]
      break;
 800e24e:	e062      	b.n	800e316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68b9      	ldr	r1, [r7, #8]
 800e256:	4618      	mov	r0, r3
 800e258:	f000 fa38 	bl	800e6cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	699a      	ldr	r2, [r3, #24]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e26a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e27a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6999      	ldr	r1, [r3, #24]
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	021a      	lsls	r2, r3, #8
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	619a      	str	r2, [r3, #24]
      break;
 800e290:	e041      	b.n	800e316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 fa8d 	bl	800e7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69da      	ldr	r2, [r3, #28]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f042 0208 	orr.w	r2, r2, #8
 800e2ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69da      	ldr	r2, [r3, #28]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f022 0204 	bic.w	r2, r2, #4
 800e2bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	69d9      	ldr	r1, [r3, #28]
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	691a      	ldr	r2, [r3, #16]
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	61da      	str	r2, [r3, #28]
      break;
 800e2d0:	e021      	b.n	800e316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68b9      	ldr	r1, [r7, #8]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 fae1 	bl	800e8a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	69da      	ldr	r2, [r3, #28]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69d9      	ldr	r1, [r3, #28]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	021a      	lsls	r2, r3, #8
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	61da      	str	r2, [r3, #28]
      break;
 800e312:	e000      	b.n	800e316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e314:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff ffe8 	bl	800e394 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d103      	bne.n	800e3f4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	771a      	strb	r2, [r3, #28]
 800e3f2:	e019      	b.n	800e428 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d103      	bne.n	800e406 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2202      	movs	r2, #2
 800e402:	771a      	strb	r2, [r3, #28]
 800e404:	e010      	b.n	800e428 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d103      	bne.n	800e418 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2204      	movs	r2, #4
 800e414:	771a      	strb	r2, [r3, #28]
 800e416:	e007      	b.n	800e428 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d102      	bne.n	800e428 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2208      	movs	r2, #8
 800e426:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff ff95 	bl	800e358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	771a      	strb	r2, [r3, #28]
}
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e448:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2201      	movs	r2, #1
 800e44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d103      	bne.n	800e464 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2201      	movs	r2, #1
 800e460:	771a      	strb	r2, [r3, #28]
 800e462:	e019      	b.n	800e498 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d103      	bne.n	800e476 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2202      	movs	r2, #2
 800e472:	771a      	strb	r2, [r3, #28]
 800e474:	e010      	b.n	800e498 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d103      	bne.n	800e488 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2204      	movs	r2, #4
 800e484:	771a      	strb	r2, [r3, #28]
 800e486:	e007      	b.n	800e498 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d102      	bne.n	800e498 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2208      	movs	r2, #8
 800e496:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7ff ff67 	bl	800e36c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	771a      	strb	r2, [r3, #28]
}
 800e4a4:	bf00      	nop
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a40      	ldr	r2, [pc, #256]	; (800e5c0 <TIM_Base_SetConfig+0x114>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d013      	beq.n	800e4ec <TIM_Base_SetConfig+0x40>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4ca:	d00f      	beq.n	800e4ec <TIM_Base_SetConfig+0x40>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4a3d      	ldr	r2, [pc, #244]	; (800e5c4 <TIM_Base_SetConfig+0x118>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d00b      	beq.n	800e4ec <TIM_Base_SetConfig+0x40>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a3c      	ldr	r2, [pc, #240]	; (800e5c8 <TIM_Base_SetConfig+0x11c>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d007      	beq.n	800e4ec <TIM_Base_SetConfig+0x40>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4a3b      	ldr	r2, [pc, #236]	; (800e5cc <TIM_Base_SetConfig+0x120>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d003      	beq.n	800e4ec <TIM_Base_SetConfig+0x40>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a3a      	ldr	r2, [pc, #232]	; (800e5d0 <TIM_Base_SetConfig+0x124>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d108      	bne.n	800e4fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a2f      	ldr	r2, [pc, #188]	; (800e5c0 <TIM_Base_SetConfig+0x114>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d02b      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e50c:	d027      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4a2c      	ldr	r2, [pc, #176]	; (800e5c4 <TIM_Base_SetConfig+0x118>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d023      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a2b      	ldr	r2, [pc, #172]	; (800e5c8 <TIM_Base_SetConfig+0x11c>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d01f      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4a2a      	ldr	r2, [pc, #168]	; (800e5cc <TIM_Base_SetConfig+0x120>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d01b      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a29      	ldr	r2, [pc, #164]	; (800e5d0 <TIM_Base_SetConfig+0x124>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d017      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a28      	ldr	r2, [pc, #160]	; (800e5d4 <TIM_Base_SetConfig+0x128>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d013      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a27      	ldr	r2, [pc, #156]	; (800e5d8 <TIM_Base_SetConfig+0x12c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00f      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a26      	ldr	r2, [pc, #152]	; (800e5dc <TIM_Base_SetConfig+0x130>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d00b      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a25      	ldr	r2, [pc, #148]	; (800e5e0 <TIM_Base_SetConfig+0x134>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d007      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a24      	ldr	r2, [pc, #144]	; (800e5e4 <TIM_Base_SetConfig+0x138>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d003      	beq.n	800e55e <TIM_Base_SetConfig+0xb2>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a23      	ldr	r2, [pc, #140]	; (800e5e8 <TIM_Base_SetConfig+0x13c>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d108      	bne.n	800e570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	689a      	ldr	r2, [r3, #8]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a0a      	ldr	r2, [pc, #40]	; (800e5c0 <TIM_Base_SetConfig+0x114>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d003      	beq.n	800e5a4 <TIM_Base_SetConfig+0xf8>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a0c      	ldr	r2, [pc, #48]	; (800e5d0 <TIM_Base_SetConfig+0x124>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d103      	bne.n	800e5ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	691a      	ldr	r2, [r3, #16]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	615a      	str	r2, [r3, #20]
}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	40010000 	.word	0x40010000
 800e5c4:	40000400 	.word	0x40000400
 800e5c8:	40000800 	.word	0x40000800
 800e5cc:	40000c00 	.word	0x40000c00
 800e5d0:	40010400 	.word	0x40010400
 800e5d4:	40014000 	.word	0x40014000
 800e5d8:	40014400 	.word	0x40014400
 800e5dc:	40014800 	.word	0x40014800
 800e5e0:	40001800 	.word	0x40001800
 800e5e4:	40001c00 	.word	0x40001c00
 800e5e8:	40002000 	.word	0x40002000

0800e5ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6a1b      	ldr	r3, [r3, #32]
 800e5fa:	f023 0201 	bic.w	r2, r3, #1
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f023 0303 	bic.w	r3, r3, #3
 800e622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	f023 0302 	bic.w	r3, r3, #2
 800e634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a20      	ldr	r2, [pc, #128]	; (800e6c4 <TIM_OC1_SetConfig+0xd8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d003      	beq.n	800e650 <TIM_OC1_SetConfig+0x64>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a1f      	ldr	r2, [pc, #124]	; (800e6c8 <TIM_OC1_SetConfig+0xdc>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d10c      	bne.n	800e66a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f023 0308 	bic.w	r3, r3, #8
 800e656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	697a      	ldr	r2, [r7, #20]
 800e65e:	4313      	orrs	r3, r2
 800e660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f023 0304 	bic.w	r3, r3, #4
 800e668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a15      	ldr	r2, [pc, #84]	; (800e6c4 <TIM_OC1_SetConfig+0xd8>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d003      	beq.n	800e67a <TIM_OC1_SetConfig+0x8e>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a14      	ldr	r2, [pc, #80]	; (800e6c8 <TIM_OC1_SetConfig+0xdc>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d111      	bne.n	800e69e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	4313      	orrs	r3, r2
 800e692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	693a      	ldr	r2, [r7, #16]
 800e6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	697a      	ldr	r2, [r7, #20]
 800e6b6:	621a      	str	r2, [r3, #32]
}
 800e6b8:	bf00      	nop
 800e6ba:	371c      	adds	r7, #28
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	40010000 	.word	0x40010000
 800e6c8:	40010400 	.word	0x40010400

0800e6cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	f023 0210 	bic.w	r2, r3, #16
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	699b      	ldr	r3, [r3, #24]
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	021b      	lsls	r3, r3, #8
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f023 0320 	bic.w	r3, r3, #32
 800e716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	4313      	orrs	r3, r2
 800e722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a22      	ldr	r2, [pc, #136]	; (800e7b0 <TIM_OC2_SetConfig+0xe4>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d003      	beq.n	800e734 <TIM_OC2_SetConfig+0x68>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a21      	ldr	r2, [pc, #132]	; (800e7b4 <TIM_OC2_SetConfig+0xe8>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d10d      	bne.n	800e750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e73a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	011b      	lsls	r3, r3, #4
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	4313      	orrs	r3, r2
 800e746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e74e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a17      	ldr	r2, [pc, #92]	; (800e7b0 <TIM_OC2_SetConfig+0xe4>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d003      	beq.n	800e760 <TIM_OC2_SetConfig+0x94>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a16      	ldr	r2, [pc, #88]	; (800e7b4 <TIM_OC2_SetConfig+0xe8>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d113      	bne.n	800e788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e76e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	4313      	orrs	r3, r2
 800e77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	4313      	orrs	r3, r2
 800e786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	697a      	ldr	r2, [r7, #20]
 800e7a0:	621a      	str	r2, [r3, #32]
}
 800e7a2:	bf00      	nop
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	40010000 	.word	0x40010000
 800e7b4:	40010400 	.word	0x40010400

0800e7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
 800e7c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	69db      	ldr	r3, [r3, #28]
 800e7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f023 0303 	bic.w	r3, r3, #3
 800e7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	021b      	lsls	r3, r3, #8
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a21      	ldr	r2, [pc, #132]	; (800e898 <TIM_OC3_SetConfig+0xe0>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d003      	beq.n	800e81e <TIM_OC3_SetConfig+0x66>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4a20      	ldr	r2, [pc, #128]	; (800e89c <TIM_OC3_SetConfig+0xe4>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d10d      	bne.n	800e83a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	021b      	lsls	r3, r3, #8
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	4313      	orrs	r3, r2
 800e830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a16      	ldr	r2, [pc, #88]	; (800e898 <TIM_OC3_SetConfig+0xe0>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d003      	beq.n	800e84a <TIM_OC3_SetConfig+0x92>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a15      	ldr	r2, [pc, #84]	; (800e89c <TIM_OC3_SetConfig+0xe4>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d113      	bne.n	800e872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	695b      	ldr	r3, [r3, #20]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	693a      	ldr	r2, [r7, #16]
 800e862:	4313      	orrs	r3, r2
 800e864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	011b      	lsls	r3, r3, #4
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	4313      	orrs	r3, r2
 800e870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	685a      	ldr	r2, [r3, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	697a      	ldr	r2, [r7, #20]
 800e88a:	621a      	str	r2, [r3, #32]
}
 800e88c:	bf00      	nop
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	40010000 	.word	0x40010000
 800e89c:	40010400 	.word	0x40010400

0800e8a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a1b      	ldr	r3, [r3, #32]
 800e8ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a1b      	ldr	r3, [r3, #32]
 800e8ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	031b      	lsls	r3, r3, #12
 800e8f2:	693a      	ldr	r2, [r7, #16]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a12      	ldr	r2, [pc, #72]	; (800e944 <TIM_OC4_SetConfig+0xa4>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d003      	beq.n	800e908 <TIM_OC4_SetConfig+0x68>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a11      	ldr	r2, [pc, #68]	; (800e948 <TIM_OC4_SetConfig+0xa8>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d109      	bne.n	800e91c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e90e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	019b      	lsls	r3, r3, #6
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	4313      	orrs	r3, r2
 800e91a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	693a      	ldr	r2, [r7, #16]
 800e934:	621a      	str	r2, [r3, #32]
}
 800e936:	bf00      	nop
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	40010000 	.word	0x40010000
 800e948:	40010400 	.word	0x40010400

0800e94c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	f003 031f 	and.w	r3, r3, #31
 800e95e:	2201      	movs	r2, #1
 800e960:	fa02 f303 	lsl.w	r3, r2, r3
 800e964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6a1a      	ldr	r2, [r3, #32]
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	43db      	mvns	r3, r3
 800e96e:	401a      	ands	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6a1a      	ldr	r2, [r3, #32]
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f003 031f 	and.w	r3, r3, #31
 800e97e:	6879      	ldr	r1, [r7, #4]
 800e980:	fa01 f303 	lsl.w	r3, r1, r3
 800e984:	431a      	orrs	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	621a      	str	r2, [r3, #32]
}
 800e98a:	bf00      	nop
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
	...

0800e998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d101      	bne.n	800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	e05a      	b.n	800ea66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a21      	ldr	r2, [pc, #132]	; (800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d022      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fc:	d01d      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a1d      	ldr	r2, [pc, #116]	; (800ea78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d018      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a1b      	ldr	r2, [pc, #108]	; (800ea7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d013      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a1a      	ldr	r2, [pc, #104]	; (800ea80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d00e      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a18      	ldr	r2, [pc, #96]	; (800ea84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d009      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d004      	beq.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a15      	ldr	r2, [pc, #84]	; (800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d10c      	bne.n	800ea54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	40010000 	.word	0x40010000
 800ea78:	40000400 	.word	0x40000400
 800ea7c:	40000800 	.word	0x40000800
 800ea80:	40000c00 	.word	0x40000c00
 800ea84:	40010400 	.word	0x40010400
 800ea88:	40014000 	.word	0x40014000
 800ea8c:	40001800 	.word	0x40001800

0800ea90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e03f      	b.n	800eb4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d106      	bne.n	800eae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7f5 fd5e 	bl	80045a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2224      	movs	r2, #36	; 0x24
 800eae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68da      	ldr	r2, [r3, #12]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eafa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 f90b 	bl	800ed18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	691a      	ldr	r2, [r3, #16]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	695a      	ldr	r2, [r3, #20]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68da      	ldr	r2, [r3, #12]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2220      	movs	r2, #32
 800eb3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2220      	movs	r2, #32
 800eb44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b088      	sub	sp, #32
 800eb56:	af02      	add	r7, sp, #8
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	60b9      	str	r1, [r7, #8]
 800eb5c:	603b      	str	r3, [r7, #0]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800eb62:	2300      	movs	r3, #0
 800eb64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	f040 8083 	bne.w	800ec7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <HAL_UART_Transmit+0x2e>
 800eb7a:	88fb      	ldrh	r3, [r7, #6]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	e07b      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d101      	bne.n	800eb92 <HAL_UART_Transmit+0x40>
 800eb8e:	2302      	movs	r3, #2
 800eb90:	e074      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2201      	movs	r2, #1
 800eb96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2221      	movs	r2, #33	; 0x21
 800eba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800eba8:	f7fb f878 	bl	8009c9c <HAL_GetTick>
 800ebac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	88fa      	ldrh	r2, [r7, #6]
 800ebb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	88fa      	ldrh	r2, [r7, #6]
 800ebb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ebc2:	e042      	b.n	800ec4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebda:	d122      	bne.n	800ec22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	2180      	movs	r1, #128	; 0x80
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f000 f84c 	bl	800ec84 <UART_WaitOnFlagUntilTimeout>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	e042      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d103      	bne.n	800ec1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	3302      	adds	r3, #2
 800ec16:	60bb      	str	r3, [r7, #8]
 800ec18:	e017      	b.n	800ec4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	60bb      	str	r3, [r7, #8]
 800ec20:	e013      	b.n	800ec4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2180      	movs	r1, #128	; 0x80
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f000 f829 	bl	800ec84 <UART_WaitOnFlagUntilTimeout>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d001      	beq.n	800ec3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e01f      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	60ba      	str	r2, [r7, #8]
 800ec42:	781a      	ldrb	r2, [r3, #0]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1b7      	bne.n	800ebc4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	2140      	movs	r1, #64	; 0x40
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f000 f810 	bl	800ec84 <UART_WaitOnFlagUntilTimeout>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e006      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2220      	movs	r2, #32
 800ec72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e000      	b.n	800ec7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ec7a:	2302      	movs	r3, #2
  }
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	4613      	mov	r3, r2
 800ec92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec94:	e02c      	b.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9c:	d028      	beq.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800eca4:	f7fa fffa 	bl	8009c9c <HAL_GetTick>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	69ba      	ldr	r2, [r7, #24]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d21d      	bcs.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68da      	ldr	r2, [r3, #12]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ecc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	695a      	ldr	r2, [r3, #20]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0201 	bic.w	r2, r2, #1
 800ecd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ecec:	2303      	movs	r3, #3
 800ecee:	e00f      	b.n	800ed10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	bf0c      	ite	eq
 800ed00:	2301      	moveq	r3, #1
 800ed02:	2300      	movne	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d0c3      	beq.n	800ec96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ed0e:	2300      	movs	r3, #0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	b085      	sub	sp, #20
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	431a      	orrs	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	695b      	ldr	r3, [r3, #20]
 800ed46:	431a      	orrs	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	69db      	ldr	r3, [r3, #28]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ed5a:	f023 030c 	bic.w	r3, r3, #12
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	68f9      	ldr	r1, [r7, #12]
 800ed64:	430b      	orrs	r3, r1
 800ed66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	699a      	ldr	r2, [r3, #24]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed86:	f040 818b 	bne.w	800f0a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4ac1      	ldr	r2, [pc, #772]	; (800f094 <UART_SetConfig+0x37c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d005      	beq.n	800eda0 <UART_SetConfig+0x88>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4abf      	ldr	r2, [pc, #764]	; (800f098 <UART_SetConfig+0x380>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	f040 80bd 	bne.w	800ef1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eda0:	f7fd ff42 	bl	800cc28 <HAL_RCC_GetPCLK2Freq>
 800eda4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	461d      	mov	r5, r3
 800edaa:	f04f 0600 	mov.w	r6, #0
 800edae:	46a8      	mov	r8, r5
 800edb0:	46b1      	mov	r9, r6
 800edb2:	eb18 0308 	adds.w	r3, r8, r8
 800edb6:	eb49 0409 	adc.w	r4, r9, r9
 800edba:	4698      	mov	r8, r3
 800edbc:	46a1      	mov	r9, r4
 800edbe:	eb18 0805 	adds.w	r8, r8, r5
 800edc2:	eb49 0906 	adc.w	r9, r9, r6
 800edc6:	f04f 0100 	mov.w	r1, #0
 800edca:	f04f 0200 	mov.w	r2, #0
 800edce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800edd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800edd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800edda:	4688      	mov	r8, r1
 800eddc:	4691      	mov	r9, r2
 800edde:	eb18 0005 	adds.w	r0, r8, r5
 800ede2:	eb49 0106 	adc.w	r1, r9, r6
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	461d      	mov	r5, r3
 800edec:	f04f 0600 	mov.w	r6, #0
 800edf0:	196b      	adds	r3, r5, r5
 800edf2:	eb46 0406 	adc.w	r4, r6, r6
 800edf6:	461a      	mov	r2, r3
 800edf8:	4623      	mov	r3, r4
 800edfa:	f7f1 ff55 	bl	8000ca8 <__aeabi_uldivmod>
 800edfe:	4603      	mov	r3, r0
 800ee00:	460c      	mov	r4, r1
 800ee02:	461a      	mov	r2, r3
 800ee04:	4ba5      	ldr	r3, [pc, #660]	; (800f09c <UART_SetConfig+0x384>)
 800ee06:	fba3 2302 	umull	r2, r3, r3, r2
 800ee0a:	095b      	lsrs	r3, r3, #5
 800ee0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	461d      	mov	r5, r3
 800ee14:	f04f 0600 	mov.w	r6, #0
 800ee18:	46a9      	mov	r9, r5
 800ee1a:	46b2      	mov	sl, r6
 800ee1c:	eb19 0309 	adds.w	r3, r9, r9
 800ee20:	eb4a 040a 	adc.w	r4, sl, sl
 800ee24:	4699      	mov	r9, r3
 800ee26:	46a2      	mov	sl, r4
 800ee28:	eb19 0905 	adds.w	r9, r9, r5
 800ee2c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ee30:	f04f 0100 	mov.w	r1, #0
 800ee34:	f04f 0200 	mov.w	r2, #0
 800ee38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee44:	4689      	mov	r9, r1
 800ee46:	4692      	mov	sl, r2
 800ee48:	eb19 0005 	adds.w	r0, r9, r5
 800ee4c:	eb4a 0106 	adc.w	r1, sl, r6
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	461d      	mov	r5, r3
 800ee56:	f04f 0600 	mov.w	r6, #0
 800ee5a:	196b      	adds	r3, r5, r5
 800ee5c:	eb46 0406 	adc.w	r4, r6, r6
 800ee60:	461a      	mov	r2, r3
 800ee62:	4623      	mov	r3, r4
 800ee64:	f7f1 ff20 	bl	8000ca8 <__aeabi_uldivmod>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4b8b      	ldr	r3, [pc, #556]	; (800f09c <UART_SetConfig+0x384>)
 800ee70:	fba3 1302 	umull	r1, r3, r3, r2
 800ee74:	095b      	lsrs	r3, r3, #5
 800ee76:	2164      	movs	r1, #100	; 0x64
 800ee78:	fb01 f303 	mul.w	r3, r1, r3
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	3332      	adds	r3, #50	; 0x32
 800ee82:	4a86      	ldr	r2, [pc, #536]	; (800f09c <UART_SetConfig+0x384>)
 800ee84:	fba2 2303 	umull	r2, r3, r2, r3
 800ee88:	095b      	lsrs	r3, r3, #5
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee90:	4498      	add	r8, r3
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	461d      	mov	r5, r3
 800ee96:	f04f 0600 	mov.w	r6, #0
 800ee9a:	46a9      	mov	r9, r5
 800ee9c:	46b2      	mov	sl, r6
 800ee9e:	eb19 0309 	adds.w	r3, r9, r9
 800eea2:	eb4a 040a 	adc.w	r4, sl, sl
 800eea6:	4699      	mov	r9, r3
 800eea8:	46a2      	mov	sl, r4
 800eeaa:	eb19 0905 	adds.w	r9, r9, r5
 800eeae:	eb4a 0a06 	adc.w	sl, sl, r6
 800eeb2:	f04f 0100 	mov.w	r1, #0
 800eeb6:	f04f 0200 	mov.w	r2, #0
 800eeba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eebe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eec2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eec6:	4689      	mov	r9, r1
 800eec8:	4692      	mov	sl, r2
 800eeca:	eb19 0005 	adds.w	r0, r9, r5
 800eece:	eb4a 0106 	adc.w	r1, sl, r6
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	685b      	ldr	r3, [r3, #4]
 800eed6:	461d      	mov	r5, r3
 800eed8:	f04f 0600 	mov.w	r6, #0
 800eedc:	196b      	adds	r3, r5, r5
 800eede:	eb46 0406 	adc.w	r4, r6, r6
 800eee2:	461a      	mov	r2, r3
 800eee4:	4623      	mov	r3, r4
 800eee6:	f7f1 fedf 	bl	8000ca8 <__aeabi_uldivmod>
 800eeea:	4603      	mov	r3, r0
 800eeec:	460c      	mov	r4, r1
 800eeee:	461a      	mov	r2, r3
 800eef0:	4b6a      	ldr	r3, [pc, #424]	; (800f09c <UART_SetConfig+0x384>)
 800eef2:	fba3 1302 	umull	r1, r3, r3, r2
 800eef6:	095b      	lsrs	r3, r3, #5
 800eef8:	2164      	movs	r1, #100	; 0x64
 800eefa:	fb01 f303 	mul.w	r3, r1, r3
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	3332      	adds	r3, #50	; 0x32
 800ef04:	4a65      	ldr	r2, [pc, #404]	; (800f09c <UART_SetConfig+0x384>)
 800ef06:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0a:	095b      	lsrs	r3, r3, #5
 800ef0c:	f003 0207 	and.w	r2, r3, #7
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4442      	add	r2, r8
 800ef16:	609a      	str	r2, [r3, #8]
 800ef18:	e26f      	b.n	800f3fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ef1a:	f7fd fe71 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 800ef1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	461d      	mov	r5, r3
 800ef24:	f04f 0600 	mov.w	r6, #0
 800ef28:	46a8      	mov	r8, r5
 800ef2a:	46b1      	mov	r9, r6
 800ef2c:	eb18 0308 	adds.w	r3, r8, r8
 800ef30:	eb49 0409 	adc.w	r4, r9, r9
 800ef34:	4698      	mov	r8, r3
 800ef36:	46a1      	mov	r9, r4
 800ef38:	eb18 0805 	adds.w	r8, r8, r5
 800ef3c:	eb49 0906 	adc.w	r9, r9, r6
 800ef40:	f04f 0100 	mov.w	r1, #0
 800ef44:	f04f 0200 	mov.w	r2, #0
 800ef48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef54:	4688      	mov	r8, r1
 800ef56:	4691      	mov	r9, r2
 800ef58:	eb18 0005 	adds.w	r0, r8, r5
 800ef5c:	eb49 0106 	adc.w	r1, r9, r6
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	461d      	mov	r5, r3
 800ef66:	f04f 0600 	mov.w	r6, #0
 800ef6a:	196b      	adds	r3, r5, r5
 800ef6c:	eb46 0406 	adc.w	r4, r6, r6
 800ef70:	461a      	mov	r2, r3
 800ef72:	4623      	mov	r3, r4
 800ef74:	f7f1 fe98 	bl	8000ca8 <__aeabi_uldivmod>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4b47      	ldr	r3, [pc, #284]	; (800f09c <UART_SetConfig+0x384>)
 800ef80:	fba3 2302 	umull	r2, r3, r3, r2
 800ef84:	095b      	lsrs	r3, r3, #5
 800ef86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	461d      	mov	r5, r3
 800ef8e:	f04f 0600 	mov.w	r6, #0
 800ef92:	46a9      	mov	r9, r5
 800ef94:	46b2      	mov	sl, r6
 800ef96:	eb19 0309 	adds.w	r3, r9, r9
 800ef9a:	eb4a 040a 	adc.w	r4, sl, sl
 800ef9e:	4699      	mov	r9, r3
 800efa0:	46a2      	mov	sl, r4
 800efa2:	eb19 0905 	adds.w	r9, r9, r5
 800efa6:	eb4a 0a06 	adc.w	sl, sl, r6
 800efaa:	f04f 0100 	mov.w	r1, #0
 800efae:	f04f 0200 	mov.w	r2, #0
 800efb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efbe:	4689      	mov	r9, r1
 800efc0:	4692      	mov	sl, r2
 800efc2:	eb19 0005 	adds.w	r0, r9, r5
 800efc6:	eb4a 0106 	adc.w	r1, sl, r6
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	461d      	mov	r5, r3
 800efd0:	f04f 0600 	mov.w	r6, #0
 800efd4:	196b      	adds	r3, r5, r5
 800efd6:	eb46 0406 	adc.w	r4, r6, r6
 800efda:	461a      	mov	r2, r3
 800efdc:	4623      	mov	r3, r4
 800efde:	f7f1 fe63 	bl	8000ca8 <__aeabi_uldivmod>
 800efe2:	4603      	mov	r3, r0
 800efe4:	460c      	mov	r4, r1
 800efe6:	461a      	mov	r2, r3
 800efe8:	4b2c      	ldr	r3, [pc, #176]	; (800f09c <UART_SetConfig+0x384>)
 800efea:	fba3 1302 	umull	r1, r3, r3, r2
 800efee:	095b      	lsrs	r3, r3, #5
 800eff0:	2164      	movs	r1, #100	; 0x64
 800eff2:	fb01 f303 	mul.w	r3, r1, r3
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	3332      	adds	r3, #50	; 0x32
 800effc:	4a27      	ldr	r2, [pc, #156]	; (800f09c <UART_SetConfig+0x384>)
 800effe:	fba2 2303 	umull	r2, r3, r2, r3
 800f002:	095b      	lsrs	r3, r3, #5
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f00a:	4498      	add	r8, r3
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	461d      	mov	r5, r3
 800f010:	f04f 0600 	mov.w	r6, #0
 800f014:	46a9      	mov	r9, r5
 800f016:	46b2      	mov	sl, r6
 800f018:	eb19 0309 	adds.w	r3, r9, r9
 800f01c:	eb4a 040a 	adc.w	r4, sl, sl
 800f020:	4699      	mov	r9, r3
 800f022:	46a2      	mov	sl, r4
 800f024:	eb19 0905 	adds.w	r9, r9, r5
 800f028:	eb4a 0a06 	adc.w	sl, sl, r6
 800f02c:	f04f 0100 	mov.w	r1, #0
 800f030:	f04f 0200 	mov.w	r2, #0
 800f034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f03c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f040:	4689      	mov	r9, r1
 800f042:	4692      	mov	sl, r2
 800f044:	eb19 0005 	adds.w	r0, r9, r5
 800f048:	eb4a 0106 	adc.w	r1, sl, r6
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	461d      	mov	r5, r3
 800f052:	f04f 0600 	mov.w	r6, #0
 800f056:	196b      	adds	r3, r5, r5
 800f058:	eb46 0406 	adc.w	r4, r6, r6
 800f05c:	461a      	mov	r2, r3
 800f05e:	4623      	mov	r3, r4
 800f060:	f7f1 fe22 	bl	8000ca8 <__aeabi_uldivmod>
 800f064:	4603      	mov	r3, r0
 800f066:	460c      	mov	r4, r1
 800f068:	461a      	mov	r2, r3
 800f06a:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <UART_SetConfig+0x384>)
 800f06c:	fba3 1302 	umull	r1, r3, r3, r2
 800f070:	095b      	lsrs	r3, r3, #5
 800f072:	2164      	movs	r1, #100	; 0x64
 800f074:	fb01 f303 	mul.w	r3, r1, r3
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	3332      	adds	r3, #50	; 0x32
 800f07e:	4a07      	ldr	r2, [pc, #28]	; (800f09c <UART_SetConfig+0x384>)
 800f080:	fba2 2303 	umull	r2, r3, r2, r3
 800f084:	095b      	lsrs	r3, r3, #5
 800f086:	f003 0207 	and.w	r2, r3, #7
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4442      	add	r2, r8
 800f090:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f092:	e1b2      	b.n	800f3fa <UART_SetConfig+0x6e2>
 800f094:	40011000 	.word	0x40011000
 800f098:	40011400 	.word	0x40011400
 800f09c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4ad7      	ldr	r2, [pc, #860]	; (800f404 <UART_SetConfig+0x6ec>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d005      	beq.n	800f0b6 <UART_SetConfig+0x39e>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4ad6      	ldr	r2, [pc, #856]	; (800f408 <UART_SetConfig+0x6f0>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	f040 80d1 	bne.w	800f258 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f0b6:	f7fd fdb7 	bl	800cc28 <HAL_RCC_GetPCLK2Freq>
 800f0ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	469a      	mov	sl, r3
 800f0c0:	f04f 0b00 	mov.w	fp, #0
 800f0c4:	46d0      	mov	r8, sl
 800f0c6:	46d9      	mov	r9, fp
 800f0c8:	eb18 0308 	adds.w	r3, r8, r8
 800f0cc:	eb49 0409 	adc.w	r4, r9, r9
 800f0d0:	4698      	mov	r8, r3
 800f0d2:	46a1      	mov	r9, r4
 800f0d4:	eb18 080a 	adds.w	r8, r8, sl
 800f0d8:	eb49 090b 	adc.w	r9, r9, fp
 800f0dc:	f04f 0100 	mov.w	r1, #0
 800f0e0:	f04f 0200 	mov.w	r2, #0
 800f0e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f0f0:	4688      	mov	r8, r1
 800f0f2:	4691      	mov	r9, r2
 800f0f4:	eb1a 0508 	adds.w	r5, sl, r8
 800f0f8:	eb4b 0609 	adc.w	r6, fp, r9
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	4619      	mov	r1, r3
 800f102:	f04f 0200 	mov.w	r2, #0
 800f106:	f04f 0300 	mov.w	r3, #0
 800f10a:	f04f 0400 	mov.w	r4, #0
 800f10e:	0094      	lsls	r4, r2, #2
 800f110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f114:	008b      	lsls	r3, r1, #2
 800f116:	461a      	mov	r2, r3
 800f118:	4623      	mov	r3, r4
 800f11a:	4628      	mov	r0, r5
 800f11c:	4631      	mov	r1, r6
 800f11e:	f7f1 fdc3 	bl	8000ca8 <__aeabi_uldivmod>
 800f122:	4603      	mov	r3, r0
 800f124:	460c      	mov	r4, r1
 800f126:	461a      	mov	r2, r3
 800f128:	4bb8      	ldr	r3, [pc, #736]	; (800f40c <UART_SetConfig+0x6f4>)
 800f12a:	fba3 2302 	umull	r2, r3, r3, r2
 800f12e:	095b      	lsrs	r3, r3, #5
 800f130:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	469b      	mov	fp, r3
 800f138:	f04f 0c00 	mov.w	ip, #0
 800f13c:	46d9      	mov	r9, fp
 800f13e:	46e2      	mov	sl, ip
 800f140:	eb19 0309 	adds.w	r3, r9, r9
 800f144:	eb4a 040a 	adc.w	r4, sl, sl
 800f148:	4699      	mov	r9, r3
 800f14a:	46a2      	mov	sl, r4
 800f14c:	eb19 090b 	adds.w	r9, r9, fp
 800f150:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f154:	f04f 0100 	mov.w	r1, #0
 800f158:	f04f 0200 	mov.w	r2, #0
 800f15c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f168:	4689      	mov	r9, r1
 800f16a:	4692      	mov	sl, r2
 800f16c:	eb1b 0509 	adds.w	r5, fp, r9
 800f170:	eb4c 060a 	adc.w	r6, ip, sl
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	4619      	mov	r1, r3
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	f04f 0300 	mov.w	r3, #0
 800f182:	f04f 0400 	mov.w	r4, #0
 800f186:	0094      	lsls	r4, r2, #2
 800f188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f18c:	008b      	lsls	r3, r1, #2
 800f18e:	461a      	mov	r2, r3
 800f190:	4623      	mov	r3, r4
 800f192:	4628      	mov	r0, r5
 800f194:	4631      	mov	r1, r6
 800f196:	f7f1 fd87 	bl	8000ca8 <__aeabi_uldivmod>
 800f19a:	4603      	mov	r3, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4b9a      	ldr	r3, [pc, #616]	; (800f40c <UART_SetConfig+0x6f4>)
 800f1a2:	fba3 1302 	umull	r1, r3, r3, r2
 800f1a6:	095b      	lsrs	r3, r3, #5
 800f1a8:	2164      	movs	r1, #100	; 0x64
 800f1aa:	fb01 f303 	mul.w	r3, r1, r3
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	011b      	lsls	r3, r3, #4
 800f1b2:	3332      	adds	r3, #50	; 0x32
 800f1b4:	4a95      	ldr	r2, [pc, #596]	; (800f40c <UART_SetConfig+0x6f4>)
 800f1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ba:	095b      	lsrs	r3, r3, #5
 800f1bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1c0:	4498      	add	r8, r3
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	469b      	mov	fp, r3
 800f1c6:	f04f 0c00 	mov.w	ip, #0
 800f1ca:	46d9      	mov	r9, fp
 800f1cc:	46e2      	mov	sl, ip
 800f1ce:	eb19 0309 	adds.w	r3, r9, r9
 800f1d2:	eb4a 040a 	adc.w	r4, sl, sl
 800f1d6:	4699      	mov	r9, r3
 800f1d8:	46a2      	mov	sl, r4
 800f1da:	eb19 090b 	adds.w	r9, r9, fp
 800f1de:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1e2:	f04f 0100 	mov.w	r1, #0
 800f1e6:	f04f 0200 	mov.w	r2, #0
 800f1ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1f6:	4689      	mov	r9, r1
 800f1f8:	4692      	mov	sl, r2
 800f1fa:	eb1b 0509 	adds.w	r5, fp, r9
 800f1fe:	eb4c 060a 	adc.w	r6, ip, sl
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	4619      	mov	r1, r3
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	f04f 0300 	mov.w	r3, #0
 800f210:	f04f 0400 	mov.w	r4, #0
 800f214:	0094      	lsls	r4, r2, #2
 800f216:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f21a:	008b      	lsls	r3, r1, #2
 800f21c:	461a      	mov	r2, r3
 800f21e:	4623      	mov	r3, r4
 800f220:	4628      	mov	r0, r5
 800f222:	4631      	mov	r1, r6
 800f224:	f7f1 fd40 	bl	8000ca8 <__aeabi_uldivmod>
 800f228:	4603      	mov	r3, r0
 800f22a:	460c      	mov	r4, r1
 800f22c:	461a      	mov	r2, r3
 800f22e:	4b77      	ldr	r3, [pc, #476]	; (800f40c <UART_SetConfig+0x6f4>)
 800f230:	fba3 1302 	umull	r1, r3, r3, r2
 800f234:	095b      	lsrs	r3, r3, #5
 800f236:	2164      	movs	r1, #100	; 0x64
 800f238:	fb01 f303 	mul.w	r3, r1, r3
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	011b      	lsls	r3, r3, #4
 800f240:	3332      	adds	r3, #50	; 0x32
 800f242:	4a72      	ldr	r2, [pc, #456]	; (800f40c <UART_SetConfig+0x6f4>)
 800f244:	fba2 2303 	umull	r2, r3, r2, r3
 800f248:	095b      	lsrs	r3, r3, #5
 800f24a:	f003 020f 	and.w	r2, r3, #15
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4442      	add	r2, r8
 800f254:	609a      	str	r2, [r3, #8]
 800f256:	e0d0      	b.n	800f3fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f258:	f7fd fcd2 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 800f25c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	469a      	mov	sl, r3
 800f262:	f04f 0b00 	mov.w	fp, #0
 800f266:	46d0      	mov	r8, sl
 800f268:	46d9      	mov	r9, fp
 800f26a:	eb18 0308 	adds.w	r3, r8, r8
 800f26e:	eb49 0409 	adc.w	r4, r9, r9
 800f272:	4698      	mov	r8, r3
 800f274:	46a1      	mov	r9, r4
 800f276:	eb18 080a 	adds.w	r8, r8, sl
 800f27a:	eb49 090b 	adc.w	r9, r9, fp
 800f27e:	f04f 0100 	mov.w	r1, #0
 800f282:	f04f 0200 	mov.w	r2, #0
 800f286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f28a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f28e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f292:	4688      	mov	r8, r1
 800f294:	4691      	mov	r9, r2
 800f296:	eb1a 0508 	adds.w	r5, sl, r8
 800f29a:	eb4b 0609 	adc.w	r6, fp, r9
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	f04f 0200 	mov.w	r2, #0
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	f04f 0400 	mov.w	r4, #0
 800f2b0:	0094      	lsls	r4, r2, #2
 800f2b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2b6:	008b      	lsls	r3, r1, #2
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4623      	mov	r3, r4
 800f2bc:	4628      	mov	r0, r5
 800f2be:	4631      	mov	r1, r6
 800f2c0:	f7f1 fcf2 	bl	8000ca8 <__aeabi_uldivmod>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4b50      	ldr	r3, [pc, #320]	; (800f40c <UART_SetConfig+0x6f4>)
 800f2cc:	fba3 2302 	umull	r2, r3, r3, r2
 800f2d0:	095b      	lsrs	r3, r3, #5
 800f2d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	469b      	mov	fp, r3
 800f2da:	f04f 0c00 	mov.w	ip, #0
 800f2de:	46d9      	mov	r9, fp
 800f2e0:	46e2      	mov	sl, ip
 800f2e2:	eb19 0309 	adds.w	r3, r9, r9
 800f2e6:	eb4a 040a 	adc.w	r4, sl, sl
 800f2ea:	4699      	mov	r9, r3
 800f2ec:	46a2      	mov	sl, r4
 800f2ee:	eb19 090b 	adds.w	r9, r9, fp
 800f2f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f2f6:	f04f 0100 	mov.w	r1, #0
 800f2fa:	f04f 0200 	mov.w	r2, #0
 800f2fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f30a:	4689      	mov	r9, r1
 800f30c:	4692      	mov	sl, r2
 800f30e:	eb1b 0509 	adds.w	r5, fp, r9
 800f312:	eb4c 060a 	adc.w	r6, ip, sl
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f04f 0200 	mov.w	r2, #0
 800f320:	f04f 0300 	mov.w	r3, #0
 800f324:	f04f 0400 	mov.w	r4, #0
 800f328:	0094      	lsls	r4, r2, #2
 800f32a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f32e:	008b      	lsls	r3, r1, #2
 800f330:	461a      	mov	r2, r3
 800f332:	4623      	mov	r3, r4
 800f334:	4628      	mov	r0, r5
 800f336:	4631      	mov	r1, r6
 800f338:	f7f1 fcb6 	bl	8000ca8 <__aeabi_uldivmod>
 800f33c:	4603      	mov	r3, r0
 800f33e:	460c      	mov	r4, r1
 800f340:	461a      	mov	r2, r3
 800f342:	4b32      	ldr	r3, [pc, #200]	; (800f40c <UART_SetConfig+0x6f4>)
 800f344:	fba3 1302 	umull	r1, r3, r3, r2
 800f348:	095b      	lsrs	r3, r3, #5
 800f34a:	2164      	movs	r1, #100	; 0x64
 800f34c:	fb01 f303 	mul.w	r3, r1, r3
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	3332      	adds	r3, #50	; 0x32
 800f356:	4a2d      	ldr	r2, [pc, #180]	; (800f40c <UART_SetConfig+0x6f4>)
 800f358:	fba2 2303 	umull	r2, r3, r2, r3
 800f35c:	095b      	lsrs	r3, r3, #5
 800f35e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f362:	4498      	add	r8, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	469b      	mov	fp, r3
 800f368:	f04f 0c00 	mov.w	ip, #0
 800f36c:	46d9      	mov	r9, fp
 800f36e:	46e2      	mov	sl, ip
 800f370:	eb19 0309 	adds.w	r3, r9, r9
 800f374:	eb4a 040a 	adc.w	r4, sl, sl
 800f378:	4699      	mov	r9, r3
 800f37a:	46a2      	mov	sl, r4
 800f37c:	eb19 090b 	adds.w	r9, r9, fp
 800f380:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f384:	f04f 0100 	mov.w	r1, #0
 800f388:	f04f 0200 	mov.w	r2, #0
 800f38c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f398:	4689      	mov	r9, r1
 800f39a:	4692      	mov	sl, r2
 800f39c:	eb1b 0509 	adds.w	r5, fp, r9
 800f3a0:	eb4c 060a 	adc.w	r6, ip, sl
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	f04f 0200 	mov.w	r2, #0
 800f3ae:	f04f 0300 	mov.w	r3, #0
 800f3b2:	f04f 0400 	mov.w	r4, #0
 800f3b6:	0094      	lsls	r4, r2, #2
 800f3b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3bc:	008b      	lsls	r3, r1, #2
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4623      	mov	r3, r4
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	f7f1 fc6f 	bl	8000ca8 <__aeabi_uldivmod>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	460c      	mov	r4, r1
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <UART_SetConfig+0x6f4>)
 800f3d2:	fba3 1302 	umull	r1, r3, r3, r2
 800f3d6:	095b      	lsrs	r3, r3, #5
 800f3d8:	2164      	movs	r1, #100	; 0x64
 800f3da:	fb01 f303 	mul.w	r3, r1, r3
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	011b      	lsls	r3, r3, #4
 800f3e2:	3332      	adds	r3, #50	; 0x32
 800f3e4:	4a09      	ldr	r2, [pc, #36]	; (800f40c <UART_SetConfig+0x6f4>)
 800f3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ea:	095b      	lsrs	r3, r3, #5
 800f3ec:	f003 020f 	and.w	r2, r3, #15
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4442      	add	r2, r8
 800f3f6:	609a      	str	r2, [r3, #8]
}
 800f3f8:	e7ff      	b.n	800f3fa <UART_SetConfig+0x6e2>
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f404:	40011000 	.word	0x40011000
 800f408:	40011400 	.word	0x40011400
 800f40c:	51eb851f 	.word	0x51eb851f

0800f410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f416:	f000 fb1f 	bl	800fa58 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800f41a:	4b19      	ldr	r3, [pc, #100]	; (800f480 <MX_LWIP_Init+0x70>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800f420:	4b18      	ldr	r3, [pc, #96]	; (800f484 <MX_LWIP_Init+0x74>)
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800f426:	4b18      	ldr	r3, [pc, #96]	; (800f488 <MX_LWIP_Init+0x78>)
 800f428:	2200      	movs	r2, #0
 800f42a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f42c:	4b17      	ldr	r3, [pc, #92]	; (800f48c <MX_LWIP_Init+0x7c>)
 800f42e:	9302      	str	r3, [sp, #8]
 800f430:	4b17      	ldr	r3, [pc, #92]	; (800f490 <MX_LWIP_Init+0x80>)
 800f432:	9301      	str	r3, [sp, #4]
 800f434:	2300      	movs	r3, #0
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	4b13      	ldr	r3, [pc, #76]	; (800f488 <MX_LWIP_Init+0x78>)
 800f43a:	4a12      	ldr	r2, [pc, #72]	; (800f484 <MX_LWIP_Init+0x74>)
 800f43c:	4910      	ldr	r1, [pc, #64]	; (800f480 <MX_LWIP_Init+0x70>)
 800f43e:	4815      	ldr	r0, [pc, #84]	; (800f494 <MX_LWIP_Init+0x84>)
 800f440:	f000 ffb0 	bl	80103a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f444:	4813      	ldr	r0, [pc, #76]	; (800f494 <MX_LWIP_Init+0x84>)
 800f446:	f001 f967 	bl	8010718 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f44a:	4b12      	ldr	r3, [pc, #72]	; (800f494 <MX_LWIP_Init+0x84>)
 800f44c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f450:	089b      	lsrs	r3, r3, #2
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d003      	beq.n	800f464 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f45c:	480d      	ldr	r0, [pc, #52]	; (800f494 <MX_LWIP_Init+0x84>)
 800f45e:	f001 f96b 	bl	8010738 <netif_set_up>
 800f462:	e002      	b.n	800f46a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f464:	480b      	ldr	r0, [pc, #44]	; (800f494 <MX_LWIP_Init+0x84>)
 800f466:	f001 f9d3 	bl	8010810 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800f46a:	490b      	ldr	r1, [pc, #44]	; (800f498 <MX_LWIP_Init+0x88>)
 800f46c:	4809      	ldr	r0, [pc, #36]	; (800f494 <MX_LWIP_Init+0x84>)
 800f46e:	f001 fa01 	bl	8010874 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800f472:	4808      	ldr	r0, [pc, #32]	; (800f494 <MX_LWIP_Init+0x84>)
 800f474:	f008 fa8e 	bl	8017994 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	200020ac 	.word	0x200020ac
 800f484:	200020b0 	.word	0x200020b0
 800f488:	200020b4 	.word	0x200020b4
 800f48c:	0801b351 	.word	0x0801b351
 800f490:	0800f885 	.word	0x0800f885
 800f494:	20002074 	.word	0x20002074
 800f498:	0800f8f1 	.word	0x0800f8f1

0800f49c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08e      	sub	sp, #56	; 0x38
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]
 800f4ac:	605a      	str	r2, [r3, #4]
 800f4ae:	609a      	str	r2, [r3, #8]
 800f4b0:	60da      	str	r2, [r3, #12]
 800f4b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a46      	ldr	r2, [pc, #280]	; (800f5d4 <HAL_ETH_MspInit+0x138>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	f040 8085 	bne.w	800f5ca <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	623b      	str	r3, [r7, #32]
 800f4c4:	4b44      	ldr	r3, [pc, #272]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4c8:	4a43      	ldr	r2, [pc, #268]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800f4d0:	4b41      	ldr	r3, [pc, #260]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4d8:	623b      	str	r3, [r7, #32]
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61fb      	str	r3, [r7, #28]
 800f4e0:	4b3d      	ldr	r3, [pc, #244]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e4:	4a3c      	ldr	r2, [pc, #240]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f4ea:	6313      	str	r3, [r2, #48]	; 0x30
 800f4ec:	4b3a      	ldr	r3, [pc, #232]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f4f4:	61fb      	str	r3, [r7, #28]
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	61bb      	str	r3, [r7, #24]
 800f4fc:	4b36      	ldr	r3, [pc, #216]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f500:	4a35      	ldr	r2, [pc, #212]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f506:	6313      	str	r3, [r2, #48]	; 0x30
 800f508:	4b33      	ldr	r3, [pc, #204]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f50c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f510:	61bb      	str	r3, [r7, #24]
 800f512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f514:	2300      	movs	r3, #0
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	4b2f      	ldr	r3, [pc, #188]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51c:	4a2e      	ldr	r2, [pc, #184]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f51e:	f043 0304 	orr.w	r3, r3, #4
 800f522:	6313      	str	r3, [r2, #48]	; 0x30
 800f524:	4b2c      	ldr	r3, [pc, #176]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	617b      	str	r3, [r7, #20]
 800f52e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f530:	2300      	movs	r3, #0
 800f532:	613b      	str	r3, [r7, #16]
 800f534:	4b28      	ldr	r3, [pc, #160]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f538:	4a27      	ldr	r2, [pc, #156]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f53a:	f043 0301 	orr.w	r3, r3, #1
 800f53e:	6313      	str	r3, [r2, #48]	; 0x30
 800f540:	4b25      	ldr	r3, [pc, #148]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	613b      	str	r3, [r7, #16]
 800f54a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	4b21      	ldr	r3, [pc, #132]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f554:	4a20      	ldr	r2, [pc, #128]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f556:	f043 0302 	orr.w	r3, r3, #2
 800f55a:	6313      	str	r3, [r2, #48]	; 0x30
 800f55c:	4b1e      	ldr	r3, [pc, #120]	; (800f5d8 <HAL_ETH_MspInit+0x13c>)
 800f55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f560:	f003 0302 	and.w	r3, r3, #2
 800f564:	60fb      	str	r3, [r7, #12]
 800f566:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f568:	2332      	movs	r3, #50	; 0x32
 800f56a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f56c:	2302      	movs	r3, #2
 800f56e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f570:	2300      	movs	r3, #0
 800f572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f574:	2303      	movs	r3, #3
 800f576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f578:	230b      	movs	r3, #11
 800f57a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f57c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f580:	4619      	mov	r1, r3
 800f582:	4816      	ldr	r0, [pc, #88]	; (800f5dc <HAL_ETH_MspInit+0x140>)
 800f584:	f7fc fd1e 	bl	800bfc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f588:	2386      	movs	r3, #134	; 0x86
 800f58a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f58c:	2302      	movs	r3, #2
 800f58e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f590:	2300      	movs	r3, #0
 800f592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f594:	2303      	movs	r3, #3
 800f596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f598:	230b      	movs	r3, #11
 800f59a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	480f      	ldr	r0, [pc, #60]	; (800f5e0 <HAL_ETH_MspInit+0x144>)
 800f5a4:	f7fc fd0e 	bl	800bfc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800f5a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f5ba:	230b      	movs	r3, #11
 800f5bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	4807      	ldr	r0, [pc, #28]	; (800f5e4 <HAL_ETH_MspInit+0x148>)
 800f5c6:	f7fc fcfd 	bl	800bfc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f5ca:	bf00      	nop
 800f5cc:	3738      	adds	r7, #56	; 0x38
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	40028000 	.word	0x40028000
 800f5d8:	40023800 	.word	0x40023800
 800f5dc:	40020800 	.word	0x40020800
 800f5e0:	40020000 	.word	0x40020000
 800f5e4:	40020400 	.word	0x40020400

0800f5e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f5f4:	4b4e      	ldr	r3, [pc, #312]	; (800f730 <low_level_init+0x148>)
 800f5f6:	4a4f      	ldr	r2, [pc, #316]	; (800f734 <low_level_init+0x14c>)
 800f5f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f5fa:	4b4d      	ldr	r3, [pc, #308]	; (800f730 <low_level_init+0x148>)
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800f600:	4b4b      	ldr	r3, [pc, #300]	; (800f730 <low_level_init+0x148>)
 800f602:	2201      	movs	r2, #1
 800f604:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800f606:	2302      	movs	r3, #2
 800f608:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800f60a:	2300      	movs	r3, #0
 800f60c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800f60e:	2300      	movs	r3, #0
 800f610:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f612:	2300      	movs	r3, #0
 800f614:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f616:	2300      	movs	r3, #0
 800f618:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f61a:	2300      	movs	r3, #0
 800f61c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f61e:	4a44      	ldr	r2, [pc, #272]	; (800f730 <low_level_init+0x148>)
 800f620:	f107 0308 	add.w	r3, r7, #8
 800f624:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800f626:	4b42      	ldr	r3, [pc, #264]	; (800f730 <low_level_init+0x148>)
 800f628:	2200      	movs	r2, #0
 800f62a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800f62c:	4b40      	ldr	r3, [pc, #256]	; (800f730 <low_level_init+0x148>)
 800f62e:	2200      	movs	r2, #0
 800f630:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f632:	4b3f      	ldr	r3, [pc, #252]	; (800f730 <low_level_init+0x148>)
 800f634:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f638:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f63a:	483d      	ldr	r0, [pc, #244]	; (800f730 <low_level_init+0x148>)
 800f63c:	f7fb fc20 	bl	800ae80 <HAL_ETH_Init>
 800f640:	4603      	mov	r3, r0
 800f642:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800f644:	7dfb      	ldrb	r3, [r7, #23]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d108      	bne.n	800f65c <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f650:	f043 0304 	orr.w	r3, r3, #4
 800f654:	b2da      	uxtb	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f65c:	2304      	movs	r3, #4
 800f65e:	4a36      	ldr	r2, [pc, #216]	; (800f738 <low_level_init+0x150>)
 800f660:	4936      	ldr	r1, [pc, #216]	; (800f73c <low_level_init+0x154>)
 800f662:	4833      	ldr	r0, [pc, #204]	; (800f730 <low_level_init+0x148>)
 800f664:	f7fb fdaa 	bl	800b1bc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800f668:	2304      	movs	r3, #4
 800f66a:	4a35      	ldr	r2, [pc, #212]	; (800f740 <low_level_init+0x158>)
 800f66c:	4935      	ldr	r1, [pc, #212]	; (800f744 <low_level_init+0x15c>)
 800f66e:	4830      	ldr	r0, [pc, #192]	; (800f730 <low_level_init+0x148>)
 800f670:	f7fb fe0d 	bl	800b28e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2206      	movs	r2, #6
 800f678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f67c:	4b2c      	ldr	r3, [pc, #176]	; (800f730 <low_level_init+0x148>)
 800f67e:	695b      	ldr	r3, [r3, #20]
 800f680:	781a      	ldrb	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f688:	4b29      	ldr	r3, [pc, #164]	; (800f730 <low_level_init+0x148>)
 800f68a:	695b      	ldr	r3, [r3, #20]
 800f68c:	785a      	ldrb	r2, [r3, #1]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f694:	4b26      	ldr	r3, [pc, #152]	; (800f730 <low_level_init+0x148>)
 800f696:	695b      	ldr	r3, [r3, #20]
 800f698:	789a      	ldrb	r2, [r3, #2]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f6a0:	4b23      	ldr	r3, [pc, #140]	; (800f730 <low_level_init+0x148>)
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	78da      	ldrb	r2, [r3, #3]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f6ac:	4b20      	ldr	r3, [pc, #128]	; (800f730 <low_level_init+0x148>)
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	791a      	ldrb	r2, [r3, #4]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f6b8:	4b1d      	ldr	r3, [pc, #116]	; (800f730 <low_level_init+0x148>)
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	795a      	ldrb	r2, [r3, #5]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f6ca:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f6d2:	f043 030a 	orr.w	r3, r3, #10
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800f6de:	4814      	ldr	r0, [pc, #80]	; (800f730 <low_level_init+0x148>)
 800f6e0:	f7fb fffa 	bl	800b6d8 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800f6e4:	f107 0310 	add.w	r3, r7, #16
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	2111      	movs	r1, #17
 800f6ec:	4810      	ldr	r0, [pc, #64]	; (800f730 <low_level_init+0x148>)
 800f6ee:	f7fb ff25 	bl	800b53c <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f043 0303 	orr.w	r3, r3, #3
 800f6f8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	2111      	movs	r1, #17
 800f700:	480b      	ldr	r0, [pc, #44]	; (800f730 <low_level_init+0x148>)
 800f702:	f7fb ff83 	bl	800b60c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800f706:	f107 0310 	add.w	r3, r7, #16
 800f70a:	461a      	mov	r2, r3
 800f70c:	2112      	movs	r1, #18
 800f70e:	4808      	ldr	r0, [pc, #32]	; (800f730 <low_level_init+0x148>)
 800f710:	f7fb ff14 	bl	800b53c <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	f043 0320 	orr.w	r3, r3, #32
 800f71a:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	461a      	mov	r2, r3
 800f720:	2112      	movs	r1, #18
 800f722:	4803      	ldr	r0, [pc, #12]	; (800f730 <low_level_init+0x148>)
 800f724:	f7fb ff72 	bl	800b60c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f728:	bf00      	nop
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	20003988 	.word	0x20003988
 800f734:	40028000 	.word	0x40028000
 800f738:	200039d0 	.word	0x200039d0
 800f73c:	200020b8 	.word	0x200020b8
 800f740:	20002138 	.word	0x20002138
 800f744:	20003908 	.word	0x20003908

0800f748 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08a      	sub	sp, #40	; 0x28
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f752:	4b4b      	ldr	r3, [pc, #300]	; (800f880 <low_level_output+0x138>)
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800f76a:	4b45      	ldr	r3, [pc, #276]	; (800f880 <low_level_output+0x138>)
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	623b      	str	r3, [r7, #32]
 800f778:	e05a      	b.n	800f830 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	da03      	bge.n	800f78a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800f782:	23f8      	movs	r3, #248	; 0xf8
 800f784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800f788:	e05c      	b.n	800f844 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	895b      	ldrh	r3, [r3, #10]
 800f78e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800f790:	2300      	movs	r3, #0
 800f792:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f794:	e02f      	b.n	800f7f6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f796:	69fa      	ldr	r2, [r7, #28]
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	18d0      	adds	r0, r2, r3
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	685a      	ldr	r2, [r3, #4]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	18d1      	adds	r1, r2, r3
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	f00b ff06 	bl	801b5be <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da03      	bge.n	800f7c8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800f7c0:	23f8      	movs	r3, #248	; 0xf8
 800f7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800f7c6:	e03d      	b.n	800f844 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f7ce:	693a      	ldr	r2, [r7, #16]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f7d8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f7e4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f7e6:	697a      	ldr	r2, [r7, #20]
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f7f0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f800:	4293      	cmp	r3, r2
 800f802:	d8c8      	bhi.n	800f796 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f804:	69fa      	ldr	r2, [r7, #28]
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	18d0      	adds	r0, r2, r3
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	4413      	add	r3, r2
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	4619      	mov	r1, r3
 800f816:	f00b fed2 	bl	801b5be <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	4413      	add	r3, r2
 800f820:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	623b      	str	r3, [r7, #32]
 800f830:	6a3b      	ldr	r3, [r7, #32]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1a1      	bne.n	800f77a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f836:	6979      	ldr	r1, [r7, #20]
 800f838:	4811      	ldr	r0, [pc, #68]	; (800f880 <low_level_output+0x138>)
 800f83a:	f7fb fd95 	bl	800b368 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f844:	4b0e      	ldr	r3, [pc, #56]	; (800f880 <low_level_output+0x138>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f84c:	3314      	adds	r3, #20
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f003 0320 	and.w	r3, r3, #32
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00d      	beq.n	800f874 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f858:	4b09      	ldr	r3, [pc, #36]	; (800f880 <low_level_output+0x138>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f860:	3314      	adds	r3, #20
 800f862:	2220      	movs	r2, #32
 800f864:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f866:	4b06      	ldr	r3, [pc, #24]	; (800f880 <low_level_output+0x138>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f86e:	3304      	adds	r3, #4
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800f874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3728      	adds	r7, #40	; 0x28
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	20003988 	.word	0x20003988

0800f884 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <ethernetif_init+0x1c>
 800f892:	4b0e      	ldr	r3, [pc, #56]	; (800f8cc <ethernetif_init+0x48>)
 800f894:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f898:	490d      	ldr	r1, [pc, #52]	; (800f8d0 <ethernetif_init+0x4c>)
 800f89a:	480e      	ldr	r0, [pc, #56]	; (800f8d4 <ethernetif_init+0x50>)
 800f89c:	f00c fbc0 	bl	801c020 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2273      	movs	r2, #115	; 0x73
 800f8a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2274      	movs	r2, #116	; 0x74
 800f8ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a09      	ldr	r2, [pc, #36]	; (800f8d8 <ethernetif_init+0x54>)
 800f8b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a08      	ldr	r2, [pc, #32]	; (800f8dc <ethernetif_init+0x58>)
 800f8ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7ff fe93 	bl	800f5e8 <low_level_init>

  return ERR_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	08021618 	.word	0x08021618
 800f8d0:	08021634 	.word	0x08021634
 800f8d4:	08021644 	.word	0x08021644
 800f8d8:	080197e5 	.word	0x080197e5
 800f8dc:	0800f749 	.word	0x0800f749

0800f8e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f8e4:	f7fa f9da 	bl	8009c9c <HAL_GetTick>
 800f8e8:	4603      	mov	r3, r0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f906:	089b      	lsrs	r3, r3, #2
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d05d      	beq.n	800f9ce <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800f912:	4b34      	ldr	r3, [pc, #208]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d03f      	beq.n	800f99a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800f91a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f91e:	2100      	movs	r1, #0
 800f920:	4830      	ldr	r0, [pc, #192]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f922:	f7fb fe73 	bl	800b60c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800f926:	f7fa f9b9 	bl	8009c9c <HAL_GetTick>
 800f92a:	4603      	mov	r3, r0
 800f92c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800f92e:	f107 0308 	add.w	r3, r7, #8
 800f932:	461a      	mov	r2, r3
 800f934:	2101      	movs	r1, #1
 800f936:	482b      	ldr	r0, [pc, #172]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f938:	f7fb fe00 	bl	800b53c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800f93c:	f7fa f9ae 	bl	8009c9c <HAL_GetTick>
 800f940:	4602      	mov	r2, r0
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	1ad3      	subs	r3, r2, r3
 800f946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f94a:	d828      	bhi.n	800f99e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	f003 0320 	and.w	r3, r3, #32
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0eb      	beq.n	800f92e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800f956:	f107 0308 	add.w	r3, r7, #8
 800f95a:	461a      	mov	r2, r3
 800f95c:	211f      	movs	r1, #31
 800f95e:	4821      	ldr	r0, [pc, #132]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f960:	f7fb fdec 	bl	800b53c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	f003 0310 	and.w	r3, r3, #16
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d004      	beq.n	800f978 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800f96e:	4b1d      	ldr	r3, [pc, #116]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f974:	60da      	str	r2, [r3, #12]
 800f976:	e002      	b.n	800f97e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800f978:	4b1a      	ldr	r3, [pc, #104]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	f003 0304 	and.w	r3, r3, #4
 800f984:	2b00      	cmp	r3, #0
 800f986:	d003      	beq.n	800f990 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800f988:	4b16      	ldr	r3, [pc, #88]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	609a      	str	r2, [r3, #8]
 800f98e:	e016      	b.n	800f9be <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800f990:	4b14      	ldr	r3, [pc, #80]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f996:	609a      	str	r2, [r3, #8]
 800f998:	e011      	b.n	800f9be <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800f99a:	bf00      	nop
 800f99c:	e000      	b.n	800f9a0 <ethernetif_update_config+0xb0>
          goto error;
 800f99e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f9a0:	4b10      	ldr	r3, [pc, #64]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	08db      	lsrs	r3, r3, #3
 800f9a6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800f9a8:	4b0e      	ldr	r3, [pc, #56]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	085b      	lsrs	r3, r3, #1
 800f9ae:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	480a      	ldr	r0, [pc, #40]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9ba:	f7fb fe27 	bl	800b60c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4808      	ldr	r0, [pc, #32]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9c2:	f7fb fee7 	bl	800b794 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800f9c6:	4807      	ldr	r0, [pc, #28]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9c8:	f7fb fe86 	bl	800b6d8 <HAL_ETH_Start>
 800f9cc:	e002      	b.n	800f9d4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800f9ce:	4805      	ldr	r0, [pc, #20]	; (800f9e4 <ethernetif_update_config+0xf4>)
 800f9d0:	f7fb feb1 	bl	800b736 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 f807 	bl	800f9e8 <ethernetif_notify_conn_changed>
}
 800f9da:	bf00      	nop
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20003988 	.word	0x20003988

0800f9e8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	4603      	mov	r3, r0
 800fa04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fa06:	88fb      	ldrh	r3, [r7, #6]
 800fa08:	021b      	lsls	r3, r3, #8
 800fa0a:	b21a      	sxth	r2, r3
 800fa0c:	88fb      	ldrh	r3, [r7, #6]
 800fa0e:	0a1b      	lsrs	r3, r3, #8
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	b21b      	sxth	r3, r3
 800fa14:	4313      	orrs	r3, r2
 800fa16:	b21b      	sxth	r3, r3
 800fa18:	b29b      	uxth	r3, r3
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	370c      	adds	r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr

0800fa26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fa26:	b480      	push	{r7}
 800fa28:	b083      	sub	sp, #12
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	061a      	lsls	r2, r3, #24
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa3a:	431a      	orrs	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	0a1b      	lsrs	r3, r3, #8
 800fa40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fa44:	431a      	orrs	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	0e1b      	lsrs	r3, r3, #24
 800fa4a:	4313      	orrs	r3, r2
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fa62:	f000 f8d5 	bl	800fc10 <mem_init>
  memp_init();
 800fa66:	f000 fbdb 	bl	8010220 <memp_init>
  pbuf_init();
  netif_init();
 800fa6a:	f000 fc93 	bl	8010394 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa6e:	f006 ff59 	bl	8016924 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa72:	f001 fcf9 	bl	8011468 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa76:	f006 ff0f 	bl	8016898 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa8e:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <ptr_to_mem+0x20>)
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	88fb      	ldrh	r3, [r7, #6]
 800fa94:	4413      	add	r3, r2
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	20001004 	.word	0x20001004

0800faa8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4a05      	ldr	r2, [pc, #20]	; (800fac8 <mem_to_ptr+0x20>)
 800fab4:	6812      	ldr	r2, [r2, #0]
 800fab6:	1a9b      	subs	r3, r3, r2
 800fab8:	b29b      	uxth	r3, r3
}
 800faba:	4618      	mov	r0, r3
 800fabc:	370c      	adds	r7, #12
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	20001004 	.word	0x20001004

0800facc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800facc:	b590      	push	{r4, r7, lr}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fad4:	4b45      	ldr	r3, [pc, #276]	; (800fbec <plug_holes+0x120>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d206      	bcs.n	800faec <plug_holes+0x20>
 800fade:	4b44      	ldr	r3, [pc, #272]	; (800fbf0 <plug_holes+0x124>)
 800fae0:	f240 12df 	movw	r2, #479	; 0x1df
 800fae4:	4943      	ldr	r1, [pc, #268]	; (800fbf4 <plug_holes+0x128>)
 800fae6:	4844      	ldr	r0, [pc, #272]	; (800fbf8 <plug_holes+0x12c>)
 800fae8:	f00c fa9a 	bl	801c020 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800faec:	4b43      	ldr	r3, [pc, #268]	; (800fbfc <plug_holes+0x130>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d306      	bcc.n	800fb04 <plug_holes+0x38>
 800faf6:	4b3e      	ldr	r3, [pc, #248]	; (800fbf0 <plug_holes+0x124>)
 800faf8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fafc:	4940      	ldr	r1, [pc, #256]	; (800fc00 <plug_holes+0x134>)
 800fafe:	483e      	ldr	r0, [pc, #248]	; (800fbf8 <plug_holes+0x12c>)
 800fb00:	f00c fa8e 	bl	801c020 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	791b      	ldrb	r3, [r3, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d006      	beq.n	800fb1a <plug_holes+0x4e>
 800fb0c:	4b38      	ldr	r3, [pc, #224]	; (800fbf0 <plug_holes+0x124>)
 800fb0e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb12:	493c      	ldr	r1, [pc, #240]	; (800fc04 <plug_holes+0x138>)
 800fb14:	4838      	ldr	r0, [pc, #224]	; (800fbf8 <plug_holes+0x12c>)
 800fb16:	f00c fa83 	bl	801c020 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb22:	d906      	bls.n	800fb32 <plug_holes+0x66>
 800fb24:	4b32      	ldr	r3, [pc, #200]	; (800fbf0 <plug_holes+0x124>)
 800fb26:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fb2a:	4937      	ldr	r1, [pc, #220]	; (800fc08 <plug_holes+0x13c>)
 800fb2c:	4832      	ldr	r0, [pc, #200]	; (800fbf8 <plug_holes+0x12c>)
 800fb2e:	f00c fa77 	bl	801c020 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7ff ffa4 	bl	800fa84 <ptr_to_mem>
 800fb3c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d024      	beq.n	800fb90 <plug_holes+0xc4>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	791b      	ldrb	r3, [r3, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d120      	bne.n	800fb90 <plug_holes+0xc4>
 800fb4e:	4b2b      	ldr	r3, [pc, #172]	; (800fbfc <plug_holes+0x130>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d01b      	beq.n	800fb90 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb58:	4b2c      	ldr	r3, [pc, #176]	; (800fc0c <plug_holes+0x140>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d102      	bne.n	800fb68 <plug_holes+0x9c>
      lfree = mem;
 800fb62:	4a2a      	ldr	r2, [pc, #168]	; (800fc0c <plug_holes+0x140>)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	881a      	ldrh	r2, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb78:	d00a      	beq.n	800fb90 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff ff80 	bl	800fa84 <ptr_to_mem>
 800fb84:	4604      	mov	r4, r0
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff8e 	bl	800faa8 <mem_to_ptr>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	885b      	ldrh	r3, [r3, #2]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff ff75 	bl	800fa84 <ptr_to_mem>
 800fb9a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d01f      	beq.n	800fbe4 <plug_holes+0x118>
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	791b      	ldrb	r3, [r3, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d11b      	bne.n	800fbe4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fbac:	4b17      	ldr	r3, [pc, #92]	; (800fc0c <plug_holes+0x140>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d102      	bne.n	800fbbc <plug_holes+0xf0>
      lfree = pmem;
 800fbb6:	4a15      	ldr	r2, [pc, #84]	; (800fc0c <plug_holes+0x140>)
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	881a      	ldrh	r2, [r3, #0]
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbcc:	d00a      	beq.n	800fbe4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff ff56 	bl	800fa84 <ptr_to_mem>
 800fbd8:	4604      	mov	r4, r0
 800fbda:	68b8      	ldr	r0, [r7, #8]
 800fbdc:	f7ff ff64 	bl	800faa8 <mem_to_ptr>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbe4:	bf00      	nop
 800fbe6:	3714      	adds	r7, #20
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd90      	pop	{r4, r7, pc}
 800fbec:	20001004 	.word	0x20001004
 800fbf0:	0802166c 	.word	0x0802166c
 800fbf4:	0802169c 	.word	0x0802169c
 800fbf8:	080216b4 	.word	0x080216b4
 800fbfc:	20001008 	.word	0x20001008
 800fc00:	080216dc 	.word	0x080216dc
 800fc04:	080216f8 	.word	0x080216f8
 800fc08:	08021714 	.word	0x08021714
 800fc0c:	2000100c 	.word	0x2000100c

0800fc10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc16:	4b18      	ldr	r3, [pc, #96]	; (800fc78 <mem_init+0x68>)
 800fc18:	3303      	adds	r3, #3
 800fc1a:	f023 0303 	bic.w	r3, r3, #3
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4b16      	ldr	r3, [pc, #88]	; (800fc7c <mem_init+0x6c>)
 800fc22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc24:	4b15      	ldr	r3, [pc, #84]	; (800fc7c <mem_init+0x6c>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc3e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fc42:	f7ff ff1f 	bl	800fa84 <ptr_to_mem>
 800fc46:	4602      	mov	r2, r0
 800fc48:	4b0d      	ldr	r3, [pc, #52]	; (800fc80 <mem_init+0x70>)
 800fc4a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800fc4c:	4b0c      	ldr	r3, [pc, #48]	; (800fc80 <mem_init+0x70>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2201      	movs	r2, #1
 800fc52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc54:	4b0a      	ldr	r3, [pc, #40]	; (800fc80 <mem_init+0x70>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc5e:	4b08      	ldr	r3, [pc, #32]	; (800fc80 <mem_init+0x70>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc68:	4b04      	ldr	r3, [pc, #16]	; (800fc7c <mem_init+0x6c>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a05      	ldr	r2, [pc, #20]	; (800fc84 <mem_init+0x74>)
 800fc6e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	200051b8 	.word	0x200051b8
 800fc7c:	20001004 	.word	0x20001004
 800fc80:	20001008 	.word	0x20001008
 800fc84:	2000100c 	.word	0x2000100c

0800fc88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b086      	sub	sp, #24
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff ff09 	bl	800faa8 <mem_to_ptr>
 800fc96:	4603      	mov	r3, r0
 800fc98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff fef0 	bl	800fa84 <ptr_to_mem>
 800fca4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	885b      	ldrh	r3, [r3, #2]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7ff feea 	bl	800fa84 <ptr_to_mem>
 800fcb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcba:	d818      	bhi.n	800fcee <mem_link_valid+0x66>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	885b      	ldrh	r3, [r3, #2]
 800fcc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcc4:	d813      	bhi.n	800fcee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcca:	8afa      	ldrh	r2, [r7, #22]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d004      	beq.n	800fcda <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	8afa      	ldrh	r2, [r7, #22]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d109      	bne.n	800fcee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcda:	4b08      	ldr	r3, [pc, #32]	; (800fcfc <mem_link_valid+0x74>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d006      	beq.n	800fcf2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	885b      	ldrh	r3, [r3, #2]
 800fce8:	8afa      	ldrh	r2, [r7, #22]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d001      	beq.n	800fcf2 <mem_link_valid+0x6a>
    return 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e000      	b.n	800fcf4 <mem_link_valid+0x6c>
  }
  return 1;
 800fcf2:	2301      	movs	r3, #1
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	20001008 	.word	0x20001008

0800fd00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d04c      	beq.n	800fda8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f003 0303 	and.w	r3, r3, #3
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d007      	beq.n	800fd28 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd18:	4b25      	ldr	r3, [pc, #148]	; (800fdb0 <mem_free+0xb0>)
 800fd1a:	f240 2273 	movw	r2, #627	; 0x273
 800fd1e:	4925      	ldr	r1, [pc, #148]	; (800fdb4 <mem_free+0xb4>)
 800fd20:	4825      	ldr	r0, [pc, #148]	; (800fdb8 <mem_free+0xb8>)
 800fd22:	f00c f97d 	bl	801c020 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd26:	e040      	b.n	800fdaa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3b08      	subs	r3, #8
 800fd2c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd2e:	4b23      	ldr	r3, [pc, #140]	; (800fdbc <mem_free+0xbc>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d306      	bcc.n	800fd46 <mem_free+0x46>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f103 020c 	add.w	r2, r3, #12
 800fd3e:	4b20      	ldr	r3, [pc, #128]	; (800fdc0 <mem_free+0xc0>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d907      	bls.n	800fd56 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd46:	4b1a      	ldr	r3, [pc, #104]	; (800fdb0 <mem_free+0xb0>)
 800fd48:	f240 227f 	movw	r2, #639	; 0x27f
 800fd4c:	491d      	ldr	r1, [pc, #116]	; (800fdc4 <mem_free+0xc4>)
 800fd4e:	481a      	ldr	r0, [pc, #104]	; (800fdb8 <mem_free+0xb8>)
 800fd50:	f00c f966 	bl	801c020 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd54:	e029      	b.n	800fdaa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	791b      	ldrb	r3, [r3, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d107      	bne.n	800fd6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fd5e:	4b14      	ldr	r3, [pc, #80]	; (800fdb0 <mem_free+0xb0>)
 800fd60:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fd64:	4918      	ldr	r1, [pc, #96]	; (800fdc8 <mem_free+0xc8>)
 800fd66:	4814      	ldr	r0, [pc, #80]	; (800fdb8 <mem_free+0xb8>)
 800fd68:	f00c f95a 	bl	801c020 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd6c:	e01d      	b.n	800fdaa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f7ff ff8a 	bl	800fc88 <mem_link_valid>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d107      	bne.n	800fd8a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <mem_free+0xb0>)
 800fd7c:	f240 2295 	movw	r2, #661	; 0x295
 800fd80:	4912      	ldr	r1, [pc, #72]	; (800fdcc <mem_free+0xcc>)
 800fd82:	480d      	ldr	r0, [pc, #52]	; (800fdb8 <mem_free+0xb8>)
 800fd84:	f00c f94c 	bl	801c020 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd88:	e00f      	b.n	800fdaa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fd90:	4b0f      	ldr	r3, [pc, #60]	; (800fdd0 <mem_free+0xd0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d202      	bcs.n	800fda0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fd9a:	4a0d      	ldr	r2, [pc, #52]	; (800fdd0 <mem_free+0xd0>)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f7ff fe93 	bl	800facc <plug_holes>
 800fda6:	e000      	b.n	800fdaa <mem_free+0xaa>
    return;
 800fda8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	0802166c 	.word	0x0802166c
 800fdb4:	08021740 	.word	0x08021740
 800fdb8:	080216b4 	.word	0x080216b4
 800fdbc:	20001004 	.word	0x20001004
 800fdc0:	20001008 	.word	0x20001008
 800fdc4:	08021764 	.word	0x08021764
 800fdc8:	08021780 	.word	0x08021780
 800fdcc:	080217a8 	.word	0x080217a8
 800fdd0:	2000100c 	.word	0x2000100c

0800fdd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b088      	sub	sp, #32
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	460b      	mov	r3, r1
 800fdde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fde0:	887b      	ldrh	r3, [r7, #2]
 800fde2:	3303      	adds	r3, #3
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	f023 0303 	bic.w	r3, r3, #3
 800fdea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fdec:	8bfb      	ldrh	r3, [r7, #30]
 800fdee:	2b0b      	cmp	r3, #11
 800fdf0:	d801      	bhi.n	800fdf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fdf2:	230c      	movs	r3, #12
 800fdf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fdf6:	8bfb      	ldrh	r3, [r7, #30]
 800fdf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fdfc:	d803      	bhi.n	800fe06 <mem_trim+0x32>
 800fdfe:	8bfa      	ldrh	r2, [r7, #30]
 800fe00:	887b      	ldrh	r3, [r7, #2]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d201      	bcs.n	800fe0a <mem_trim+0x36>
    return NULL;
 800fe06:	2300      	movs	r3, #0
 800fe08:	e0cc      	b.n	800ffa4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe0a:	4b68      	ldr	r3, [pc, #416]	; (800ffac <mem_trim+0x1d8>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d304      	bcc.n	800fe1e <mem_trim+0x4a>
 800fe14:	4b66      	ldr	r3, [pc, #408]	; (800ffb0 <mem_trim+0x1dc>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d306      	bcc.n	800fe2c <mem_trim+0x58>
 800fe1e:	4b65      	ldr	r3, [pc, #404]	; (800ffb4 <mem_trim+0x1e0>)
 800fe20:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fe24:	4964      	ldr	r1, [pc, #400]	; (800ffb8 <mem_trim+0x1e4>)
 800fe26:	4865      	ldr	r0, [pc, #404]	; (800ffbc <mem_trim+0x1e8>)
 800fe28:	f00c f8fa 	bl	801c020 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe2c:	4b5f      	ldr	r3, [pc, #380]	; (800ffac <mem_trim+0x1d8>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d304      	bcc.n	800fe40 <mem_trim+0x6c>
 800fe36:	4b5e      	ldr	r3, [pc, #376]	; (800ffb0 <mem_trim+0x1dc>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d301      	bcc.n	800fe44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	e0af      	b.n	800ffa4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3b08      	subs	r3, #8
 800fe48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fe4a:	69b8      	ldr	r0, [r7, #24]
 800fe4c:	f7ff fe2c 	bl	800faa8 <mem_to_ptr>
 800fe50:	4603      	mov	r3, r0
 800fe52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	881a      	ldrh	r2, [r3, #0]
 800fe58:	8afb      	ldrh	r3, [r7, #22]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	3b08      	subs	r3, #8
 800fe60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fe62:	8bfa      	ldrh	r2, [r7, #30]
 800fe64:	8abb      	ldrh	r3, [r7, #20]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d906      	bls.n	800fe78 <mem_trim+0xa4>
 800fe6a:	4b52      	ldr	r3, [pc, #328]	; (800ffb4 <mem_trim+0x1e0>)
 800fe6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fe70:	4953      	ldr	r1, [pc, #332]	; (800ffc0 <mem_trim+0x1ec>)
 800fe72:	4852      	ldr	r0, [pc, #328]	; (800ffbc <mem_trim+0x1e8>)
 800fe74:	f00c f8d4 	bl	801c020 <iprintf>
  if (newsize > size) {
 800fe78:	8bfa      	ldrh	r2, [r7, #30]
 800fe7a:	8abb      	ldrh	r3, [r7, #20]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d901      	bls.n	800fe84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800fe80:	2300      	movs	r3, #0
 800fe82:	e08f      	b.n	800ffa4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800fe84:	8bfa      	ldrh	r2, [r7, #30]
 800fe86:	8abb      	ldrh	r3, [r7, #20]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d101      	bne.n	800fe90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	e089      	b.n	800ffa4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	881b      	ldrh	r3, [r3, #0]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff fdf5 	bl	800fa84 <ptr_to_mem>
 800fe9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	791b      	ldrb	r3, [r3, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d13f      	bne.n	800ff24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	881b      	ldrh	r3, [r3, #0]
 800fea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800feac:	d106      	bne.n	800febc <mem_trim+0xe8>
 800feae:	4b41      	ldr	r3, [pc, #260]	; (800ffb4 <mem_trim+0x1e0>)
 800feb0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800feb4:	4943      	ldr	r1, [pc, #268]	; (800ffc4 <mem_trim+0x1f0>)
 800feb6:	4841      	ldr	r0, [pc, #260]	; (800ffbc <mem_trim+0x1e8>)
 800feb8:	f00c f8b2 	bl	801c020 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fec2:	8afa      	ldrh	r2, [r7, #22]
 800fec4:	8bfb      	ldrh	r3, [r7, #30]
 800fec6:	4413      	add	r3, r2
 800fec8:	b29b      	uxth	r3, r3
 800feca:	3308      	adds	r3, #8
 800fecc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fece:	4b3e      	ldr	r3, [pc, #248]	; (800ffc8 <mem_trim+0x1f4>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d106      	bne.n	800fee6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800fed8:	89fb      	ldrh	r3, [r7, #14]
 800feda:	4618      	mov	r0, r3
 800fedc:	f7ff fdd2 	bl	800fa84 <ptr_to_mem>
 800fee0:	4602      	mov	r2, r0
 800fee2:	4b39      	ldr	r3, [pc, #228]	; (800ffc8 <mem_trim+0x1f4>)
 800fee4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fee6:	89fb      	ldrh	r3, [r7, #14]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff fdcb 	bl	800fa84 <ptr_to_mem>
 800feee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	2200      	movs	r2, #0
 800fef4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	89ba      	ldrh	r2, [r7, #12]
 800fefa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	8afa      	ldrh	r2, [r7, #22]
 800ff00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	89fa      	ldrh	r2, [r7, #14]
 800ff06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff10:	d047      	beq.n	800ffa2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7ff fdb4 	bl	800fa84 <ptr_to_mem>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	89fb      	ldrh	r3, [r7, #14]
 800ff20:	8053      	strh	r3, [r2, #2]
 800ff22:	e03e      	b.n	800ffa2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ff24:	8bfb      	ldrh	r3, [r7, #30]
 800ff26:	f103 0214 	add.w	r2, r3, #20
 800ff2a:	8abb      	ldrh	r3, [r7, #20]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d838      	bhi.n	800ffa2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff30:	8afa      	ldrh	r2, [r7, #22]
 800ff32:	8bfb      	ldrh	r3, [r7, #30]
 800ff34:	4413      	add	r3, r2
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	3308      	adds	r3, #8
 800ff3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff44:	d106      	bne.n	800ff54 <mem_trim+0x180>
 800ff46:	4b1b      	ldr	r3, [pc, #108]	; (800ffb4 <mem_trim+0x1e0>)
 800ff48:	f240 3216 	movw	r2, #790	; 0x316
 800ff4c:	491d      	ldr	r1, [pc, #116]	; (800ffc4 <mem_trim+0x1f0>)
 800ff4e:	481b      	ldr	r0, [pc, #108]	; (800ffbc <mem_trim+0x1e8>)
 800ff50:	f00c f866 	bl	801c020 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ff54:	89fb      	ldrh	r3, [r7, #14]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fd94 	bl	800fa84 <ptr_to_mem>
 800ff5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ff5e:	4b1a      	ldr	r3, [pc, #104]	; (800ffc8 <mem_trim+0x1f4>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	693a      	ldr	r2, [r7, #16]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d202      	bcs.n	800ff6e <mem_trim+0x19a>
      lfree = mem2;
 800ff68:	4a17      	ldr	r2, [pc, #92]	; (800ffc8 <mem_trim+0x1f4>)
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	2200      	movs	r2, #0
 800ff72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	881a      	ldrh	r2, [r3, #0]
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	8afa      	ldrh	r2, [r7, #22]
 800ff80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	89fa      	ldrh	r2, [r7, #14]
 800ff86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	881b      	ldrh	r3, [r3, #0]
 800ff8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff90:	d007      	beq.n	800ffa2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	881b      	ldrh	r3, [r3, #0]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff fd74 	bl	800fa84 <ptr_to_mem>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	89fb      	ldrh	r3, [r7, #14]
 800ffa0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ffa2:	687b      	ldr	r3, [r7, #4]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3720      	adds	r7, #32
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	20001004 	.word	0x20001004
 800ffb0:	20001008 	.word	0x20001008
 800ffb4:	0802166c 	.word	0x0802166c
 800ffb8:	080217dc 	.word	0x080217dc
 800ffbc:	080216b4 	.word	0x080216b4
 800ffc0:	080217f4 	.word	0x080217f4
 800ffc4:	08021814 	.word	0x08021814
 800ffc8:	2000100c 	.word	0x2000100c

0800ffcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b088      	sub	sp, #32
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ffd6:	88fb      	ldrh	r3, [r7, #6]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <mem_malloc+0x14>
    return NULL;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	e0d9      	b.n	8010194 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ffe0:	88fb      	ldrh	r3, [r7, #6]
 800ffe2:	3303      	adds	r3, #3
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	f023 0303 	bic.w	r3, r3, #3
 800ffea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ffec:	8bbb      	ldrh	r3, [r7, #28]
 800ffee:	2b0b      	cmp	r3, #11
 800fff0:	d801      	bhi.n	800fff6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fff2:	230c      	movs	r3, #12
 800fff4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fff6:	8bbb      	ldrh	r3, [r7, #28]
 800fff8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fffc:	d803      	bhi.n	8010006 <mem_malloc+0x3a>
 800fffe:	8bba      	ldrh	r2, [r7, #28]
 8010000:	88fb      	ldrh	r3, [r7, #6]
 8010002:	429a      	cmp	r2, r3
 8010004:	d201      	bcs.n	801000a <mem_malloc+0x3e>
    return NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	e0c4      	b.n	8010194 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801000a:	4b64      	ldr	r3, [pc, #400]	; (801019c <mem_malloc+0x1d0>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff fd4a 	bl	800faa8 <mem_to_ptr>
 8010014:	4603      	mov	r3, r0
 8010016:	83fb      	strh	r3, [r7, #30]
 8010018:	e0b4      	b.n	8010184 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801001a:	8bfb      	ldrh	r3, [r7, #30]
 801001c:	4618      	mov	r0, r3
 801001e:	f7ff fd31 	bl	800fa84 <ptr_to_mem>
 8010022:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	791b      	ldrb	r3, [r3, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f040 80a4 	bne.w	8010176 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	461a      	mov	r2, r3
 8010034:	8bfb      	ldrh	r3, [r7, #30]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	f1a3 0208 	sub.w	r2, r3, #8
 801003c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801003e:	429a      	cmp	r2, r3
 8010040:	f0c0 8099 	bcc.w	8010176 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	881b      	ldrh	r3, [r3, #0]
 8010048:	461a      	mov	r2, r3
 801004a:	8bfb      	ldrh	r3, [r7, #30]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	f1a3 0208 	sub.w	r2, r3, #8
 8010052:	8bbb      	ldrh	r3, [r7, #28]
 8010054:	3314      	adds	r3, #20
 8010056:	429a      	cmp	r2, r3
 8010058:	d333      	bcc.n	80100c2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801005a:	8bfa      	ldrh	r2, [r7, #30]
 801005c:	8bbb      	ldrh	r3, [r7, #28]
 801005e:	4413      	add	r3, r2
 8010060:	b29b      	uxth	r3, r3
 8010062:	3308      	adds	r3, #8
 8010064:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010066:	8a7b      	ldrh	r3, [r7, #18]
 8010068:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801006c:	d106      	bne.n	801007c <mem_malloc+0xb0>
 801006e:	4b4c      	ldr	r3, [pc, #304]	; (80101a0 <mem_malloc+0x1d4>)
 8010070:	f240 3287 	movw	r2, #903	; 0x387
 8010074:	494b      	ldr	r1, [pc, #300]	; (80101a4 <mem_malloc+0x1d8>)
 8010076:	484c      	ldr	r0, [pc, #304]	; (80101a8 <mem_malloc+0x1dc>)
 8010078:	f00b ffd2 	bl	801c020 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801007c:	8a7b      	ldrh	r3, [r7, #18]
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff fd00 	bl	800fa84 <ptr_to_mem>
 8010084:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	881a      	ldrh	r2, [r3, #0]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	8bfa      	ldrh	r2, [r7, #30]
 8010098:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	8a7a      	ldrh	r2, [r7, #18]
 801009e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2201      	movs	r2, #1
 80100a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	881b      	ldrh	r3, [r3, #0]
 80100aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100ae:	d00b      	beq.n	80100c8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7ff fce5 	bl	800fa84 <ptr_to_mem>
 80100ba:	4602      	mov	r2, r0
 80100bc:	8a7b      	ldrh	r3, [r7, #18]
 80100be:	8053      	strh	r3, [r2, #2]
 80100c0:	e002      	b.n	80100c8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2201      	movs	r2, #1
 80100c6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80100c8:	4b34      	ldr	r3, [pc, #208]	; (801019c <mem_malloc+0x1d0>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	697a      	ldr	r2, [r7, #20]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d127      	bne.n	8010122 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80100d2:	4b32      	ldr	r3, [pc, #200]	; (801019c <mem_malloc+0x1d0>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80100d8:	e005      	b.n	80100e6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fcd0 	bl	800fa84 <ptr_to_mem>
 80100e4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	791b      	ldrb	r3, [r3, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <mem_malloc+0x12c>
 80100ee:	4b2f      	ldr	r3, [pc, #188]	; (80101ac <mem_malloc+0x1e0>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	69ba      	ldr	r2, [r7, #24]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d1f0      	bne.n	80100da <mem_malloc+0x10e>
          }
          lfree = cur;
 80100f8:	4a28      	ldr	r2, [pc, #160]	; (801019c <mem_malloc+0x1d0>)
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80100fe:	4b27      	ldr	r3, [pc, #156]	; (801019c <mem_malloc+0x1d0>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	4b2a      	ldr	r3, [pc, #168]	; (80101ac <mem_malloc+0x1e0>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	429a      	cmp	r2, r3
 8010108:	d00b      	beq.n	8010122 <mem_malloc+0x156>
 801010a:	4b24      	ldr	r3, [pc, #144]	; (801019c <mem_malloc+0x1d0>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	791b      	ldrb	r3, [r3, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d006      	beq.n	8010122 <mem_malloc+0x156>
 8010114:	4b22      	ldr	r3, [pc, #136]	; (80101a0 <mem_malloc+0x1d4>)
 8010116:	f240 32b5 	movw	r2, #949	; 0x3b5
 801011a:	4925      	ldr	r1, [pc, #148]	; (80101b0 <mem_malloc+0x1e4>)
 801011c:	4822      	ldr	r0, [pc, #136]	; (80101a8 <mem_malloc+0x1dc>)
 801011e:	f00b ff7f 	bl	801c020 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010122:	8bba      	ldrh	r2, [r7, #28]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	4413      	add	r3, r2
 8010128:	3308      	adds	r3, #8
 801012a:	4a20      	ldr	r2, [pc, #128]	; (80101ac <mem_malloc+0x1e0>)
 801012c:	6812      	ldr	r2, [r2, #0]
 801012e:	4293      	cmp	r3, r2
 8010130:	d906      	bls.n	8010140 <mem_malloc+0x174>
 8010132:	4b1b      	ldr	r3, [pc, #108]	; (80101a0 <mem_malloc+0x1d4>)
 8010134:	f240 32ba 	movw	r2, #954	; 0x3ba
 8010138:	491e      	ldr	r1, [pc, #120]	; (80101b4 <mem_malloc+0x1e8>)
 801013a:	481b      	ldr	r0, [pc, #108]	; (80101a8 <mem_malloc+0x1dc>)
 801013c:	f00b ff70 	bl	801c020 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	f003 0303 	and.w	r3, r3, #3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d006      	beq.n	8010158 <mem_malloc+0x18c>
 801014a:	4b15      	ldr	r3, [pc, #84]	; (80101a0 <mem_malloc+0x1d4>)
 801014c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8010150:	4919      	ldr	r1, [pc, #100]	; (80101b8 <mem_malloc+0x1ec>)
 8010152:	4815      	ldr	r0, [pc, #84]	; (80101a8 <mem_malloc+0x1dc>)
 8010154:	f00b ff64 	bl	801c020 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d006      	beq.n	8010170 <mem_malloc+0x1a4>
 8010162:	4b0f      	ldr	r3, [pc, #60]	; (80101a0 <mem_malloc+0x1d4>)
 8010164:	f240 32be 	movw	r2, #958	; 0x3be
 8010168:	4914      	ldr	r1, [pc, #80]	; (80101bc <mem_malloc+0x1f0>)
 801016a:	480f      	ldr	r0, [pc, #60]	; (80101a8 <mem_malloc+0x1dc>)
 801016c:	f00b ff58 	bl	801c020 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	3308      	adds	r3, #8
 8010174:	e00e      	b.n	8010194 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8010176:	8bfb      	ldrh	r3, [r7, #30]
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fc83 	bl	800fa84 <ptr_to_mem>
 801017e:	4603      	mov	r3, r0
 8010180:	881b      	ldrh	r3, [r3, #0]
 8010182:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010184:	8bfa      	ldrh	r2, [r7, #30]
 8010186:	8bbb      	ldrh	r3, [r7, #28]
 8010188:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801018c:	429a      	cmp	r2, r3
 801018e:	f4ff af44 	bcc.w	801001a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3720      	adds	r7, #32
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	2000100c 	.word	0x2000100c
 80101a0:	0802166c 	.word	0x0802166c
 80101a4:	08021814 	.word	0x08021814
 80101a8:	080216b4 	.word	0x080216b4
 80101ac:	20001008 	.word	0x20001008
 80101b0:	08021828 	.word	0x08021828
 80101b4:	08021844 	.word	0x08021844
 80101b8:	08021874 	.word	0x08021874
 80101bc:	080218a4 	.word	0x080218a4

080101c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	2200      	movs	r2, #0
 80101ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	3303      	adds	r3, #3
 80101d6:	f023 0303 	bic.w	r3, r3, #3
 80101da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80101dc:	2300      	movs	r3, #0
 80101de:	60fb      	str	r3, [r7, #12]
 80101e0:	e011      	b.n	8010206 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	461a      	mov	r2, r3
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	4413      	add	r3, r2
 80101fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	3301      	adds	r3, #1
 8010204:	60fb      	str	r3, [r7, #12]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	885b      	ldrh	r3, [r3, #2]
 801020a:	461a      	mov	r2, r3
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	4293      	cmp	r3, r2
 8010210:	dbe7      	blt.n	80101e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010212:	bf00      	nop
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
	...

08010220 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010226:	2300      	movs	r3, #0
 8010228:	80fb      	strh	r3, [r7, #6]
 801022a:	e009      	b.n	8010240 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801022c:	88fb      	ldrh	r3, [r7, #6]
 801022e:	4a08      	ldr	r2, [pc, #32]	; (8010250 <memp_init+0x30>)
 8010230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010234:	4618      	mov	r0, r3
 8010236:	f7ff ffc3 	bl	80101c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801023a:	88fb      	ldrh	r3, [r7, #6]
 801023c:	3301      	adds	r3, #1
 801023e:	80fb      	strh	r3, [r7, #6]
 8010240:	88fb      	ldrh	r3, [r7, #6]
 8010242:	2b08      	cmp	r3, #8
 8010244:	d9f2      	bls.n	801022c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010246:	bf00      	nop
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	0802497c 	.word	0x0802497c

08010254 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d012      	beq.n	8010290 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	6812      	ldr	r2, [r2, #0]
 8010272:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f003 0303 	and.w	r3, r3, #3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d006      	beq.n	801028c <do_memp_malloc_pool+0x38>
 801027e:	4b07      	ldr	r3, [pc, #28]	; (801029c <do_memp_malloc_pool+0x48>)
 8010280:	f240 1219 	movw	r2, #281	; 0x119
 8010284:	4906      	ldr	r1, [pc, #24]	; (80102a0 <do_memp_malloc_pool+0x4c>)
 8010286:	4807      	ldr	r0, [pc, #28]	; (80102a4 <do_memp_malloc_pool+0x50>)
 8010288:	f00b feca 	bl	801c020 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	e000      	b.n	8010292 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	080218c8 	.word	0x080218c8
 80102a0:	080218f8 	.word	0x080218f8
 80102a4:	0802191c 	.word	0x0802191c

080102a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	2b08      	cmp	r3, #8
 80102b6:	d908      	bls.n	80102ca <memp_malloc+0x22>
 80102b8:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <memp_malloc+0x3c>)
 80102ba:	f240 1257 	movw	r2, #343	; 0x157
 80102be:	490a      	ldr	r1, [pc, #40]	; (80102e8 <memp_malloc+0x40>)
 80102c0:	480a      	ldr	r0, [pc, #40]	; (80102ec <memp_malloc+0x44>)
 80102c2:	f00b fead 	bl	801c020 <iprintf>
 80102c6:	2300      	movs	r3, #0
 80102c8:	e008      	b.n	80102dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	4a08      	ldr	r2, [pc, #32]	; (80102f0 <memp_malloc+0x48>)
 80102ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff ffbe 	bl	8010254 <do_memp_malloc_pool>
 80102d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80102da:	68fb      	ldr	r3, [r7, #12]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	080218c8 	.word	0x080218c8
 80102e8:	08021958 	.word	0x08021958
 80102ec:	0802191c 	.word	0x0802191c
 80102f0:	0802497c 	.word	0x0802497c

080102f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	f003 0303 	and.w	r3, r3, #3
 8010304:	2b00      	cmp	r3, #0
 8010306:	d006      	beq.n	8010316 <do_memp_free_pool+0x22>
 8010308:	4b0a      	ldr	r3, [pc, #40]	; (8010334 <do_memp_free_pool+0x40>)
 801030a:	f240 126d 	movw	r2, #365	; 0x16d
 801030e:	490a      	ldr	r1, [pc, #40]	; (8010338 <do_memp_free_pool+0x44>)
 8010310:	480a      	ldr	r0, [pc, #40]	; (801033c <do_memp_free_pool+0x48>)
 8010312:	f00b fe85 	bl	801c020 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801032c:	bf00      	nop
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	080218c8 	.word	0x080218c8
 8010338:	08021978 	.word	0x08021978
 801033c:	0802191c 	.word	0x0802191c

08010340 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	4603      	mov	r3, r0
 8010348:	6039      	str	r1, [r7, #0]
 801034a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	2b08      	cmp	r3, #8
 8010350:	d907      	bls.n	8010362 <memp_free+0x22>
 8010352:	4b0c      	ldr	r3, [pc, #48]	; (8010384 <memp_free+0x44>)
 8010354:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010358:	490b      	ldr	r1, [pc, #44]	; (8010388 <memp_free+0x48>)
 801035a:	480c      	ldr	r0, [pc, #48]	; (801038c <memp_free+0x4c>)
 801035c:	f00b fe60 	bl	801c020 <iprintf>
 8010360:	e00c      	b.n	801037c <memp_free+0x3c>

  if (mem == NULL) {
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d008      	beq.n	801037a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010368:	79fb      	ldrb	r3, [r7, #7]
 801036a:	4a09      	ldr	r2, [pc, #36]	; (8010390 <memp_free+0x50>)
 801036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010370:	6839      	ldr	r1, [r7, #0]
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff ffbe 	bl	80102f4 <do_memp_free_pool>
 8010378:	e000      	b.n	801037c <memp_free+0x3c>
    return;
 801037a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	080218c8 	.word	0x080218c8
 8010388:	08021998 	.word	0x08021998
 801038c:	0802191c 	.word	0x0802191c
 8010390:	0802497c 	.word	0x0802497c

08010394 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010394:	b480      	push	{r7}
 8010396:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010398:	bf00      	nop
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
	...

080103a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b086      	sub	sp, #24
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
 80103b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d108      	bne.n	80103ca <netif_add+0x26>
 80103b8:	4b5b      	ldr	r3, [pc, #364]	; (8010528 <netif_add+0x184>)
 80103ba:	f240 1227 	movw	r2, #295	; 0x127
 80103be:	495b      	ldr	r1, [pc, #364]	; (801052c <netif_add+0x188>)
 80103c0:	485b      	ldr	r0, [pc, #364]	; (8010530 <netif_add+0x18c>)
 80103c2:	f00b fe2d 	bl	801c020 <iprintf>
 80103c6:	2300      	movs	r3, #0
 80103c8:	e0a9      	b.n	801051e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80103ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d108      	bne.n	80103e2 <netif_add+0x3e>
 80103d0:	4b55      	ldr	r3, [pc, #340]	; (8010528 <netif_add+0x184>)
 80103d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80103d6:	4957      	ldr	r1, [pc, #348]	; (8010534 <netif_add+0x190>)
 80103d8:	4855      	ldr	r0, [pc, #340]	; (8010530 <netif_add+0x18c>)
 80103da:	f00b fe21 	bl	801c020 <iprintf>
 80103de:	2300      	movs	r3, #0
 80103e0:	e09d      	b.n	801051e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d101      	bne.n	80103ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80103e8:	4b53      	ldr	r3, [pc, #332]	; (8010538 <netif_add+0x194>)
 80103ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80103f2:	4b51      	ldr	r3, [pc, #324]	; (8010538 <netif_add+0x194>)
 80103f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80103fc:	4b4e      	ldr	r3, [pc, #312]	; (8010538 <netif_add+0x194>)
 80103fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2200      	movs	r2, #0
 8010404:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	4a49      	ldr	r2, [pc, #292]	; (801053c <netif_add+0x198>)
 8010416:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2200      	movs	r2, #0
 801041c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	3324      	adds	r3, #36	; 0x24
 801042a:	2204      	movs	r2, #4
 801042c:	2100      	movs	r1, #0
 801042e:	4618      	mov	r0, r3
 8010430:	f00b f8e9 	bl	801b606 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2200      	movs	r2, #0
 8010438:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6a3a      	ldr	r2, [r7, #32]
 801043e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010440:	4b3f      	ldr	r3, [pc, #252]	; (8010540 <netif_add+0x19c>)
 8010442:	781a      	ldrb	r2, [r3, #0]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801044e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	68b9      	ldr	r1, [r7, #8]
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 f914 	bl	8010684 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	4798      	blx	r3
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d001      	beq.n	801046c <netif_add+0xc8>
    return NULL;
 8010468:	2300      	movs	r3, #0
 801046a:	e058      	b.n	801051e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010472:	2bff      	cmp	r3, #255	; 0xff
 8010474:	d103      	bne.n	801047e <netif_add+0xda>
        netif->num = 0;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010482:	4b30      	ldr	r3, [pc, #192]	; (8010544 <netif_add+0x1a0>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	617b      	str	r3, [r7, #20]
 8010488:	e02b      	b.n	80104e2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801048a:	697a      	ldr	r2, [r7, #20]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	429a      	cmp	r2, r3
 8010490:	d106      	bne.n	80104a0 <netif_add+0xfc>
 8010492:	4b25      	ldr	r3, [pc, #148]	; (8010528 <netif_add+0x184>)
 8010494:	f240 128b 	movw	r2, #395	; 0x18b
 8010498:	492b      	ldr	r1, [pc, #172]	; (8010548 <netif_add+0x1a4>)
 801049a:	4825      	ldr	r0, [pc, #148]	; (8010530 <netif_add+0x18c>)
 801049c:	f00b fdc0 	bl	801c020 <iprintf>
        num_netifs++;
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	3301      	adds	r3, #1
 80104a4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2bff      	cmp	r3, #255	; 0xff
 80104aa:	dd06      	ble.n	80104ba <netif_add+0x116>
 80104ac:	4b1e      	ldr	r3, [pc, #120]	; (8010528 <netif_add+0x184>)
 80104ae:	f240 128d 	movw	r2, #397	; 0x18d
 80104b2:	4926      	ldr	r1, [pc, #152]	; (801054c <netif_add+0x1a8>)
 80104b4:	481e      	ldr	r0, [pc, #120]	; (8010530 <netif_add+0x18c>)
 80104b6:	f00b fdb3 	bl	801c020 <iprintf>
        if (netif2->num == netif->num) {
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d108      	bne.n	80104dc <netif_add+0x138>
          netif->num++;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104d0:	3301      	adds	r3, #1
 80104d2:	b2da      	uxtb	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80104da:	e005      	b.n	80104e8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	617b      	str	r3, [r7, #20]
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1d0      	bne.n	801048a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1be      	bne.n	801046c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104f4:	2bfe      	cmp	r3, #254	; 0xfe
 80104f6:	d103      	bne.n	8010500 <netif_add+0x15c>
    netif_num = 0;
 80104f8:	4b11      	ldr	r3, [pc, #68]	; (8010540 <netif_add+0x19c>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	701a      	strb	r2, [r3, #0]
 80104fe:	e006      	b.n	801050e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010506:	3301      	adds	r3, #1
 8010508:	b2da      	uxtb	r2, r3
 801050a:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <netif_add+0x19c>)
 801050c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801050e:	4b0d      	ldr	r3, [pc, #52]	; (8010544 <netif_add+0x1a0>)
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010516:	4a0b      	ldr	r2, [pc, #44]	; (8010544 <netif_add+0x1a0>)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801051c:	68fb      	ldr	r3, [r7, #12]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3718      	adds	r7, #24
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	080219b4 	.word	0x080219b4
 801052c:	08021a48 	.word	0x08021a48
 8010530:	08021a04 	.word	0x08021a04
 8010534:	08021a64 	.word	0x08021a64
 8010538:	080249f0 	.word	0x080249f0
 801053c:	08010897 	.word	0x08010897
 8010540:	20001034 	.word	0x20001034
 8010544:	200082b4 	.word	0x200082b4
 8010548:	08021a88 	.word	0x08021a88
 801054c:	08021a9c 	.word	0x08021a9c

08010550 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f002 fabf 	bl	8012ae0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010562:	6839      	ldr	r1, [r7, #0]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f006 fe69 	bl	801723c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801056a:	bf00      	nop
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b086      	sub	sp, #24
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d106      	bne.n	8010594 <netif_do_set_ipaddr+0x20>
 8010586:	4b1d      	ldr	r3, [pc, #116]	; (80105fc <netif_do_set_ipaddr+0x88>)
 8010588:	f240 12cb 	movw	r2, #459	; 0x1cb
 801058c:	491c      	ldr	r1, [pc, #112]	; (8010600 <netif_do_set_ipaddr+0x8c>)
 801058e:	481d      	ldr	r0, [pc, #116]	; (8010604 <netif_do_set_ipaddr+0x90>)
 8010590:	f00b fd46 	bl	801c020 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d106      	bne.n	80105a8 <netif_do_set_ipaddr+0x34>
 801059a:	4b18      	ldr	r3, [pc, #96]	; (80105fc <netif_do_set_ipaddr+0x88>)
 801059c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80105a0:	4917      	ldr	r1, [pc, #92]	; (8010600 <netif_do_set_ipaddr+0x8c>)
 80105a2:	4818      	ldr	r0, [pc, #96]	; (8010604 <netif_do_set_ipaddr+0x90>)
 80105a4:	f00b fd3c 	bl	801c020 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	3304      	adds	r3, #4
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d01c      	beq.n	80105f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	3304      	adds	r3, #4
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80105c6:	f107 0314 	add.w	r3, r7, #20
 80105ca:	4619      	mov	r1, r3
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff ffbf 	bl	8010550 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <netif_do_set_ipaddr+0x6a>
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	e000      	b.n	80105e0 <netif_do_set_ipaddr+0x6c>
 80105de:	2300      	movs	r3, #0
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80105e4:	2101      	movs	r1, #1
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f000 f8d2 	bl	8010790 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80105ec:	2301      	movs	r3, #1
 80105ee:	e000      	b.n	80105f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3718      	adds	r7, #24
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	080219b4 	.word	0x080219b4
 8010600:	08021acc 	.word	0x08021acc
 8010604:	08021a04 	.word	0x08021a04

08010608 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	3308      	adds	r3, #8
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	429a      	cmp	r2, r3
 8010620:	d00a      	beq.n	8010638 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <netif_do_set_netmask+0x26>
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	e000      	b.n	8010630 <netif_do_set_netmask+0x28>
 801062e:	2300      	movs	r3, #0
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010634:	2301      	movs	r3, #1
 8010636:	e000      	b.n	801063a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010646:	b480      	push	{r7}
 8010648:	b085      	sub	sp, #20
 801064a:	af00      	add	r7, sp, #0
 801064c:	60f8      	str	r0, [r7, #12]
 801064e:	60b9      	str	r1, [r7, #8]
 8010650:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	330c      	adds	r3, #12
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	429a      	cmp	r2, r3
 801065e:	d00a      	beq.n	8010676 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d002      	beq.n	801066c <netif_do_set_gw+0x26>
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	e000      	b.n	801066e <netif_do_set_gw+0x28>
 801066c:	2300      	movs	r3, #0
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010672:	2301      	movs	r3, #1
 8010674:	e000      	b.n	8010678 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b088      	sub	sp, #32
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010692:	2300      	movs	r3, #0
 8010694:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010696:	2300      	movs	r3, #0
 8010698:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d101      	bne.n	80106a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80106a0:	4b1c      	ldr	r3, [pc, #112]	; (8010714 <netif_set_addr+0x90>)
 80106a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d101      	bne.n	80106ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <netif_set_addr+0x90>)
 80106ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80106b4:	4b17      	ldr	r3, [pc, #92]	; (8010714 <netif_set_addr+0x90>)
 80106b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d003      	beq.n	80106c6 <netif_set_addr+0x42>
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d101      	bne.n	80106ca <netif_set_addr+0x46>
 80106c6:	2301      	movs	r3, #1
 80106c8:	e000      	b.n	80106cc <netif_set_addr+0x48>
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106d4:	f107 0310 	add.w	r3, r7, #16
 80106d8:	461a      	mov	r2, r3
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f7ff ff49 	bl	8010574 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	6879      	ldr	r1, [r7, #4]
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f7ff ff8e 	bl	8010608 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80106ec:	69ba      	ldr	r2, [r7, #24]
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f7ff ffa8 	bl	8010646 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106fc:	f107 0310 	add.w	r3, r7, #16
 8010700:	461a      	mov	r2, r3
 8010702:	68b9      	ldr	r1, [r7, #8]
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7ff ff35 	bl	8010574 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801070a:	bf00      	nop
 801070c:	3720      	adds	r7, #32
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	080249f0 	.word	0x080249f0

08010718 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010720:	4a04      	ldr	r2, [pc, #16]	; (8010734 <netif_set_default+0x1c>)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010726:	bf00      	nop
 8010728:	370c      	adds	r7, #12
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	200082b8 	.word	0x200082b8

08010738 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d107      	bne.n	8010756 <netif_set_up+0x1e>
 8010746:	4b0f      	ldr	r3, [pc, #60]	; (8010784 <netif_set_up+0x4c>)
 8010748:	f44f 7254 	mov.w	r2, #848	; 0x350
 801074c:	490e      	ldr	r1, [pc, #56]	; (8010788 <netif_set_up+0x50>)
 801074e:	480f      	ldr	r0, [pc, #60]	; (801078c <netif_set_up+0x54>)
 8010750:	f00b fc66 	bl	801c020 <iprintf>
 8010754:	e013      	b.n	801077e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d10c      	bne.n	801077e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801076a:	f043 0301 	orr.w	r3, r3, #1
 801076e:	b2da      	uxtb	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010776:	2103      	movs	r1, #3
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f809 	bl	8010790 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	080219b4 	.word	0x080219b4
 8010788:	08021b3c 	.word	0x08021b3c
 801078c:	08021a04 	.word	0x08021a04

08010790 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	460b      	mov	r3, r1
 801079a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <netif_issue_reports+0x20>
 80107a2:	4b18      	ldr	r3, [pc, #96]	; (8010804 <netif_issue_reports+0x74>)
 80107a4:	f240 326d 	movw	r2, #877	; 0x36d
 80107a8:	4917      	ldr	r1, [pc, #92]	; (8010808 <netif_issue_reports+0x78>)
 80107aa:	4818      	ldr	r0, [pc, #96]	; (801080c <netif_issue_reports+0x7c>)
 80107ac:	f00b fc38 	bl	801c020 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107b6:	f003 0304 	and.w	r3, r3, #4
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d01e      	beq.n	80107fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d017      	beq.n	80107fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107cc:	78fb      	ldrb	r3, [r7, #3]
 80107ce:	f003 0301 	and.w	r3, r3, #1
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d013      	beq.n	80107fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	3304      	adds	r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00e      	beq.n	80107fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107e6:	f003 0308 	and.w	r3, r3, #8
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d007      	beq.n	80107fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3304      	adds	r3, #4
 80107f2:	4619      	mov	r1, r3
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f009 fae3 	bl	8019dc0 <etharp_request>
 80107fa:	e000      	b.n	80107fe <netif_issue_reports+0x6e>
    return;
 80107fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	080219b4 	.word	0x080219b4
 8010808:	08021b58 	.word	0x08021b58
 801080c:	08021a04 	.word	0x08021a04

08010810 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d107      	bne.n	801082e <netif_set_down+0x1e>
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <netif_set_down+0x58>)
 8010820:	f240 329b 	movw	r2, #923	; 0x39b
 8010824:	4911      	ldr	r1, [pc, #68]	; (801086c <netif_set_down+0x5c>)
 8010826:	4812      	ldr	r0, [pc, #72]	; (8010870 <netif_set_down+0x60>)
 8010828:	f00b fbfa 	bl	801c020 <iprintf>
 801082c:	e019      	b.n	8010862 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010834:	f003 0301 	and.w	r3, r3, #1
 8010838:	2b00      	cmp	r3, #0
 801083a:	d012      	beq.n	8010862 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010842:	f023 0301 	bic.w	r3, r3, #1
 8010846:	b2da      	uxtb	r2, r3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010854:	f003 0308 	and.w	r3, r3, #8
 8010858:	2b00      	cmp	r3, #0
 801085a:	d002      	beq.n	8010862 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f008 fe69 	bl	8019534 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	080219b4 	.word	0x080219b4
 801086c:	08021b7c 	.word	0x08021b7c
 8010870:	08021a04 	.word	0x08021a04

08010874 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	61da      	str	r2, [r3, #28]
  }
}
 801088a:	bf00      	nop
 801088c:	370c      	adds	r7, #12
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr

08010896 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010896:	b480      	push	{r7}
 8010898:	b085      	sub	sp, #20
 801089a:	af00      	add	r7, sp, #0
 801089c:	60f8      	str	r0, [r7, #12]
 801089e:	60b9      	str	r1, [r7, #8]
 80108a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80108a2:	f06f 030b 	mvn.w	r3, #11
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
	...

080108b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	4603      	mov	r3, r0
 80108bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80108be:	79fb      	ldrb	r3, [r7, #7]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d013      	beq.n	80108ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80108c4:	4b0d      	ldr	r3, [pc, #52]	; (80108fc <netif_get_by_index+0x48>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	e00c      	b.n	80108e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108d2:	3301      	adds	r3, #1
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	79fa      	ldrb	r2, [r7, #7]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d101      	bne.n	80108e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	e006      	b.n	80108ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	60fb      	str	r3, [r7, #12]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1ef      	bne.n	80108cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3714      	adds	r7, #20
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	200082b4 	.word	0x200082b4

08010900 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010904:	4b03      	ldr	r3, [pc, #12]	; (8010914 <pbuf_pool_is_empty+0x14>)
 8010906:	2201      	movs	r2, #1
 8010908:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801090a:	bf00      	nop
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr
 8010914:	200082bc 	.word	0x200082bc

08010918 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	4611      	mov	r1, r2
 8010924:	461a      	mov	r2, r3
 8010926:	460b      	mov	r3, r1
 8010928:	80fb      	strh	r3, [r7, #6]
 801092a:	4613      	mov	r3, r2
 801092c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2200      	movs	r2, #0
 8010932:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	88fa      	ldrh	r2, [r7, #6]
 801093e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	88ba      	ldrh	r2, [r7, #4]
 8010944:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010946:	8b3b      	ldrh	r3, [r7, #24]
 8010948:	b2da      	uxtb	r2, r3
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	7f3a      	ldrb	r2, [r7, #28]
 8010952:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2201      	movs	r2, #1
 8010958:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	73da      	strb	r2, [r3, #15]
}
 8010960:	bf00      	nop
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b08c      	sub	sp, #48	; 0x30
 8010970:	af02      	add	r7, sp, #8
 8010972:	4603      	mov	r3, r0
 8010974:	71fb      	strb	r3, [r7, #7]
 8010976:	460b      	mov	r3, r1
 8010978:	80bb      	strh	r3, [r7, #4]
 801097a:	4613      	mov	r3, r2
 801097c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801097e:	79fb      	ldrb	r3, [r7, #7]
 8010980:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010982:	887b      	ldrh	r3, [r7, #2]
 8010984:	2b41      	cmp	r3, #65	; 0x41
 8010986:	d00b      	beq.n	80109a0 <pbuf_alloc+0x34>
 8010988:	2b41      	cmp	r3, #65	; 0x41
 801098a:	dc02      	bgt.n	8010992 <pbuf_alloc+0x26>
 801098c:	2b01      	cmp	r3, #1
 801098e:	d007      	beq.n	80109a0 <pbuf_alloc+0x34>
 8010990:	e0c2      	b.n	8010b18 <pbuf_alloc+0x1ac>
 8010992:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010996:	d00b      	beq.n	80109b0 <pbuf_alloc+0x44>
 8010998:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801099c:	d070      	beq.n	8010a80 <pbuf_alloc+0x114>
 801099e:	e0bb      	b.n	8010b18 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80109a0:	887a      	ldrh	r2, [r7, #2]
 80109a2:	88bb      	ldrh	r3, [r7, #4]
 80109a4:	4619      	mov	r1, r3
 80109a6:	2000      	movs	r0, #0
 80109a8:	f000 f8d2 	bl	8010b50 <pbuf_alloc_reference>
 80109ac:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80109ae:	e0bd      	b.n	8010b2c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80109b4:	2300      	movs	r3, #0
 80109b6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80109b8:	88bb      	ldrh	r3, [r7, #4]
 80109ba:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80109bc:	2008      	movs	r0, #8
 80109be:	f7ff fc73 	bl	80102a8 <memp_malloc>
 80109c2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d109      	bne.n	80109de <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80109ca:	f7ff ff99 	bl	8010900 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80109ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d002      	beq.n	80109da <pbuf_alloc+0x6e>
            pbuf_free(p);
 80109d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109d6:	f000 faa9 	bl	8010f2c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80109da:	2300      	movs	r3, #0
 80109dc:	e0a7      	b.n	8010b2e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80109de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109e0:	3303      	adds	r3, #3
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	f023 0303 	bic.w	r3, r3, #3
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	8b7a      	ldrh	r2, [r7, #26]
 80109f2:	4293      	cmp	r3, r2
 80109f4:	bf28      	it	cs
 80109f6:	4613      	movcs	r3, r2
 80109f8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80109fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109fc:	3310      	adds	r3, #16
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	4413      	add	r3, r2
 8010a02:	3303      	adds	r3, #3
 8010a04:	f023 0303 	bic.w	r3, r3, #3
 8010a08:	4618      	mov	r0, r3
 8010a0a:	89f9      	ldrh	r1, [r7, #14]
 8010a0c:	8b7a      	ldrh	r2, [r7, #26]
 8010a0e:	2300      	movs	r3, #0
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	887b      	ldrh	r3, [r7, #2]
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	460b      	mov	r3, r1
 8010a18:	4601      	mov	r1, r0
 8010a1a:	6938      	ldr	r0, [r7, #16]
 8010a1c:	f7ff ff7c 	bl	8010918 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	f003 0303 	and.w	r3, r3, #3
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d006      	beq.n	8010a3a <pbuf_alloc+0xce>
 8010a2c:	4b42      	ldr	r3, [pc, #264]	; (8010b38 <pbuf_alloc+0x1cc>)
 8010a2e:	f240 1201 	movw	r2, #257	; 0x101
 8010a32:	4942      	ldr	r1, [pc, #264]	; (8010b3c <pbuf_alloc+0x1d0>)
 8010a34:	4842      	ldr	r0, [pc, #264]	; (8010b40 <pbuf_alloc+0x1d4>)
 8010a36:	f00b faf3 	bl	801c020 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a3c:	3303      	adds	r3, #3
 8010a3e:	f023 0303 	bic.w	r3, r3, #3
 8010a42:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010a46:	d106      	bne.n	8010a56 <pbuf_alloc+0xea>
 8010a48:	4b3b      	ldr	r3, [pc, #236]	; (8010b38 <pbuf_alloc+0x1cc>)
 8010a4a:	f240 1203 	movw	r2, #259	; 0x103
 8010a4e:	493d      	ldr	r1, [pc, #244]	; (8010b44 <pbuf_alloc+0x1d8>)
 8010a50:	483b      	ldr	r0, [pc, #236]	; (8010b40 <pbuf_alloc+0x1d4>)
 8010a52:	f00b fae5 	bl	801c020 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d102      	bne.n	8010a62 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010a60:	e002      	b.n	8010a68 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	693a      	ldr	r2, [r7, #16]
 8010a66:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010a6c:	8b7a      	ldrh	r2, [r7, #26]
 8010a6e:	89fb      	ldrh	r3, [r7, #14]
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010a78:	8b7b      	ldrh	r3, [r7, #26]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d19e      	bne.n	80109bc <pbuf_alloc+0x50>
      break;
 8010a7e:	e055      	b.n	8010b2c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a82:	3303      	adds	r3, #3
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	88bb      	ldrh	r3, [r7, #4]
 8010a8e:	3303      	adds	r3, #3
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	f023 0303 	bic.w	r3, r3, #3
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	4413      	add	r3, r2
 8010a9a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010a9c:	8b3b      	ldrh	r3, [r7, #24]
 8010a9e:	3310      	adds	r3, #16
 8010aa0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010aa2:	8b3a      	ldrh	r2, [r7, #24]
 8010aa4:	88bb      	ldrh	r3, [r7, #4]
 8010aa6:	3303      	adds	r3, #3
 8010aa8:	f023 0303 	bic.w	r3, r3, #3
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d306      	bcc.n	8010abe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010ab0:	8afa      	ldrh	r2, [r7, #22]
 8010ab2:	88bb      	ldrh	r3, [r7, #4]
 8010ab4:	3303      	adds	r3, #3
 8010ab6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d201      	bcs.n	8010ac2 <pbuf_alloc+0x156>
        return NULL;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e035      	b.n	8010b2e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010ac2:	8afb      	ldrh	r3, [r7, #22]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7ff fa81 	bl	800ffcc <mem_malloc>
 8010aca:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <pbuf_alloc+0x16a>
        return NULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e02b      	b.n	8010b2e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ad8:	3310      	adds	r3, #16
 8010ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010adc:	4413      	add	r3, r2
 8010ade:	3303      	adds	r3, #3
 8010ae0:	f023 0303 	bic.w	r3, r3, #3
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	88b9      	ldrh	r1, [r7, #4]
 8010ae8:	88ba      	ldrh	r2, [r7, #4]
 8010aea:	2300      	movs	r3, #0
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	887b      	ldrh	r3, [r7, #2]
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	460b      	mov	r3, r1
 8010af4:	4601      	mov	r1, r0
 8010af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010af8:	f7ff ff0e 	bl	8010918 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f003 0303 	and.w	r3, r3, #3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d010      	beq.n	8010b2a <pbuf_alloc+0x1be>
 8010b08:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <pbuf_alloc+0x1cc>)
 8010b0a:	f240 1223 	movw	r2, #291	; 0x123
 8010b0e:	490e      	ldr	r1, [pc, #56]	; (8010b48 <pbuf_alloc+0x1dc>)
 8010b10:	480b      	ldr	r0, [pc, #44]	; (8010b40 <pbuf_alloc+0x1d4>)
 8010b12:	f00b fa85 	bl	801c020 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010b16:	e008      	b.n	8010b2a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010b18:	4b07      	ldr	r3, [pc, #28]	; (8010b38 <pbuf_alloc+0x1cc>)
 8010b1a:	f240 1227 	movw	r2, #295	; 0x127
 8010b1e:	490b      	ldr	r1, [pc, #44]	; (8010b4c <pbuf_alloc+0x1e0>)
 8010b20:	4807      	ldr	r0, [pc, #28]	; (8010b40 <pbuf_alloc+0x1d4>)
 8010b22:	f00b fa7d 	bl	801c020 <iprintf>
      return NULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e001      	b.n	8010b2e <pbuf_alloc+0x1c2>
      break;
 8010b2a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3728      	adds	r7, #40	; 0x28
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	08021be4 	.word	0x08021be4
 8010b3c:	08021c14 	.word	0x08021c14
 8010b40:	08021c44 	.word	0x08021c44
 8010b44:	08021c6c 	.word	0x08021c6c
 8010b48:	08021ca0 	.word	0x08021ca0
 8010b4c:	08021ccc 	.word	0x08021ccc

08010b50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af02      	add	r7, sp, #8
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	460b      	mov	r3, r1
 8010b5a:	807b      	strh	r3, [r7, #2]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010b60:	883b      	ldrh	r3, [r7, #0]
 8010b62:	2b41      	cmp	r3, #65	; 0x41
 8010b64:	d009      	beq.n	8010b7a <pbuf_alloc_reference+0x2a>
 8010b66:	883b      	ldrh	r3, [r7, #0]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d006      	beq.n	8010b7a <pbuf_alloc_reference+0x2a>
 8010b6c:	4b0f      	ldr	r3, [pc, #60]	; (8010bac <pbuf_alloc_reference+0x5c>)
 8010b6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010b72:	490f      	ldr	r1, [pc, #60]	; (8010bb0 <pbuf_alloc_reference+0x60>)
 8010b74:	480f      	ldr	r0, [pc, #60]	; (8010bb4 <pbuf_alloc_reference+0x64>)
 8010b76:	f00b fa53 	bl	801c020 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010b7a:	2007      	movs	r0, #7
 8010b7c:	f7ff fb94 	bl	80102a8 <memp_malloc>
 8010b80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e00b      	b.n	8010ba4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010b8c:	8879      	ldrh	r1, [r7, #2]
 8010b8e:	887a      	ldrh	r2, [r7, #2]
 8010b90:	2300      	movs	r3, #0
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	883b      	ldrh	r3, [r7, #0]
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	6879      	ldr	r1, [r7, #4]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7ff febb 	bl	8010918 <pbuf_init_alloced_pbuf>
  return p;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	08021be4 	.word	0x08021be4
 8010bb0:	08021ce8 	.word	0x08021ce8
 8010bb4:	08021c44 	.word	0x08021c44

08010bb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b088      	sub	sp, #32
 8010bbc:	af02      	add	r7, sp, #8
 8010bbe:	607b      	str	r3, [r7, #4]
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73fb      	strb	r3, [r7, #15]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	81bb      	strh	r3, [r7, #12]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010bd0:	8a7b      	ldrh	r3, [r7, #18]
 8010bd2:	3303      	adds	r3, #3
 8010bd4:	f023 0203 	bic.w	r2, r3, #3
 8010bd8:	89bb      	ldrh	r3, [r7, #12]
 8010bda:	441a      	add	r2, r3
 8010bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d901      	bls.n	8010be6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e018      	b.n	8010c18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010be6:	6a3b      	ldr	r3, [r7, #32]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d007      	beq.n	8010bfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010bec:	8a7b      	ldrh	r3, [r7, #18]
 8010bee:	3303      	adds	r3, #3
 8010bf0:	f023 0303 	bic.w	r3, r3, #3
 8010bf4:	6a3a      	ldr	r2, [r7, #32]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	617b      	str	r3, [r7, #20]
 8010bfa:	e001      	b.n	8010c00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	89b9      	ldrh	r1, [r7, #12]
 8010c04:	89ba      	ldrh	r2, [r7, #12]
 8010c06:	2302      	movs	r3, #2
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	897b      	ldrh	r3, [r7, #10]
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	460b      	mov	r3, r1
 8010c10:	6979      	ldr	r1, [r7, #20]
 8010c12:	f7ff fe81 	bl	8010918 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010c16:	687b      	ldr	r3, [r7, #4]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3718      	adds	r7, #24
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <pbuf_realloc+0x20>
 8010c32:	4b3a      	ldr	r3, [pc, #232]	; (8010d1c <pbuf_realloc+0xfc>)
 8010c34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010c38:	4939      	ldr	r1, [pc, #228]	; (8010d20 <pbuf_realloc+0x100>)
 8010c3a:	483a      	ldr	r0, [pc, #232]	; (8010d24 <pbuf_realloc+0x104>)
 8010c3c:	f00b f9f0 	bl	801c020 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	891b      	ldrh	r3, [r3, #8]
 8010c44:	887a      	ldrh	r2, [r7, #2]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d264      	bcs.n	8010d14 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	891a      	ldrh	r2, [r3, #8]
 8010c4e:	887b      	ldrh	r3, [r7, #2]
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010c54:	887b      	ldrh	r3, [r7, #2]
 8010c56:	817b      	strh	r3, [r7, #10]
  q = p;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010c5c:	e018      	b.n	8010c90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	895b      	ldrh	r3, [r3, #10]
 8010c62:	897a      	ldrh	r2, [r7, #10]
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	891a      	ldrh	r2, [r3, #8]
 8010c6c:	893b      	ldrh	r3, [r7, #8]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <pbuf_realloc+0x70>
 8010c82:	4b26      	ldr	r3, [pc, #152]	; (8010d1c <pbuf_realloc+0xfc>)
 8010c84:	f240 12af 	movw	r2, #431	; 0x1af
 8010c88:	4927      	ldr	r1, [pc, #156]	; (8010d28 <pbuf_realloc+0x108>)
 8010c8a:	4826      	ldr	r0, [pc, #152]	; (8010d24 <pbuf_realloc+0x104>)
 8010c8c:	f00b f9c8 	bl	801c020 <iprintf>
  while (rem_len > q->len) {
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	895b      	ldrh	r3, [r3, #10]
 8010c94:	897a      	ldrh	r2, [r7, #10]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d8e1      	bhi.n	8010c5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	7b1b      	ldrb	r3, [r3, #12]
 8010c9e:	f003 030f 	and.w	r3, r3, #15
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d122      	bne.n	8010cec <pbuf_realloc+0xcc>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	895b      	ldrh	r3, [r3, #10]
 8010caa:	897a      	ldrh	r2, [r7, #10]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d01d      	beq.n	8010cec <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	7b5b      	ldrb	r3, [r3, #13]
 8010cb4:	f003 0302 	and.w	r3, r3, #2
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d117      	bne.n	8010cec <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	897b      	ldrh	r3, [r7, #10]
 8010cca:	4413      	add	r3, r2
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	4619      	mov	r1, r3
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f7ff f87f 	bl	800fdd4 <mem_trim>
 8010cd6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d106      	bne.n	8010cec <pbuf_realloc+0xcc>
 8010cde:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <pbuf_realloc+0xfc>)
 8010ce0:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010ce4:	4911      	ldr	r1, [pc, #68]	; (8010d2c <pbuf_realloc+0x10c>)
 8010ce6:	480f      	ldr	r0, [pc, #60]	; (8010d24 <pbuf_realloc+0x104>)
 8010ce8:	f00b f99a 	bl	801c020 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	897a      	ldrh	r2, [r7, #10]
 8010cf0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	895a      	ldrh	r2, [r3, #10]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 f910 	bl	8010f2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	e000      	b.n	8010d16 <pbuf_realloc+0xf6>
    return;
 8010d14:	bf00      	nop

}
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	08021be4 	.word	0x08021be4
 8010d20:	08021cfc 	.word	0x08021cfc
 8010d24:	08021c44 	.word	0x08021c44
 8010d28:	08021d14 	.word	0x08021d14
 8010d2c:	08021d2c 	.word	0x08021d2c

08010d30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b086      	sub	sp, #24
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d106      	bne.n	8010d52 <pbuf_add_header_impl+0x22>
 8010d44:	4b2b      	ldr	r3, [pc, #172]	; (8010df4 <pbuf_add_header_impl+0xc4>)
 8010d46:	f240 12df 	movw	r2, #479	; 0x1df
 8010d4a:	492b      	ldr	r1, [pc, #172]	; (8010df8 <pbuf_add_header_impl+0xc8>)
 8010d4c:	482b      	ldr	r0, [pc, #172]	; (8010dfc <pbuf_add_header_impl+0xcc>)
 8010d4e:	f00b f967 	bl	801c020 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d003      	beq.n	8010d60 <pbuf_add_header_impl+0x30>
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d5e:	d301      	bcc.n	8010d64 <pbuf_add_header_impl+0x34>
    return 1;
 8010d60:	2301      	movs	r3, #1
 8010d62:	e043      	b.n	8010dec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <pbuf_add_header_impl+0x3e>
    return 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e03e      	b.n	8010dec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	891a      	ldrh	r2, [r3, #8]
 8010d76:	8a7b      	ldrh	r3, [r7, #18]
 8010d78:	4413      	add	r3, r2
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	8a7a      	ldrh	r2, [r7, #18]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d901      	bls.n	8010d86 <pbuf_add_header_impl+0x56>
    return 1;
 8010d82:	2301      	movs	r3, #1
 8010d84:	e032      	b.n	8010dec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	7b1b      	ldrb	r3, [r3, #12]
 8010d8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010d8c:	8a3b      	ldrh	r3, [r7, #16]
 8010d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00c      	beq.n	8010db0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	685a      	ldr	r2, [r3, #4]
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	425b      	negs	r3, r3
 8010d9e:	4413      	add	r3, r2
 8010da0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	3310      	adds	r3, #16
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d20d      	bcs.n	8010dc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e01d      	b.n	8010dec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010db0:	79fb      	ldrb	r3, [r7, #7]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d006      	beq.n	8010dc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	685a      	ldr	r2, [r3, #4]
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	425b      	negs	r3, r3
 8010dbe:	4413      	add	r3, r2
 8010dc0:	617b      	str	r3, [r7, #20]
 8010dc2:	e001      	b.n	8010dc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e011      	b.n	8010dec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	895a      	ldrh	r2, [r3, #10]
 8010dd2:	8a7b      	ldrh	r3, [r7, #18]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	891a      	ldrh	r2, [r3, #8]
 8010de0:	8a7b      	ldrh	r3, [r7, #18]
 8010de2:	4413      	add	r3, r2
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	811a      	strh	r2, [r3, #8]


  return 0;
 8010dea:	2300      	movs	r3, #0
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	08021be4 	.word	0x08021be4
 8010df8:	08021d48 	.word	0x08021d48
 8010dfc:	08021c44 	.word	0x08021c44

08010e00 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff ff8e 	bl	8010d30 <pbuf_add_header_impl>
 8010e14:	4603      	mov	r3, r0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d106      	bne.n	8010e3e <pbuf_remove_header+0x1e>
 8010e30:	4b20      	ldr	r3, [pc, #128]	; (8010eb4 <pbuf_remove_header+0x94>)
 8010e32:	f240 224b 	movw	r2, #587	; 0x24b
 8010e36:	4920      	ldr	r1, [pc, #128]	; (8010eb8 <pbuf_remove_header+0x98>)
 8010e38:	4820      	ldr	r0, [pc, #128]	; (8010ebc <pbuf_remove_header+0x9c>)
 8010e3a:	f00b f8f1 	bl	801c020 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d003      	beq.n	8010e4c <pbuf_remove_header+0x2c>
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e4a:	d301      	bcc.n	8010e50 <pbuf_remove_header+0x30>
    return 1;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e02c      	b.n	8010eaa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <pbuf_remove_header+0x3a>
    return 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e027      	b.n	8010eaa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	895b      	ldrh	r3, [r3, #10]
 8010e62:	89fa      	ldrh	r2, [r7, #14]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d908      	bls.n	8010e7a <pbuf_remove_header+0x5a>
 8010e68:	4b12      	ldr	r3, [pc, #72]	; (8010eb4 <pbuf_remove_header+0x94>)
 8010e6a:	f240 2255 	movw	r2, #597	; 0x255
 8010e6e:	4914      	ldr	r1, [pc, #80]	; (8010ec0 <pbuf_remove_header+0xa0>)
 8010e70:	4812      	ldr	r0, [pc, #72]	; (8010ebc <pbuf_remove_header+0x9c>)
 8010e72:	f00b f8d5 	bl	801c020 <iprintf>
 8010e76:	2301      	movs	r3, #1
 8010e78:	e017      	b.n	8010eaa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	685a      	ldr	r2, [r3, #4]
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	441a      	add	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	895a      	ldrh	r2, [r3, #10]
 8010e90:	89fb      	ldrh	r3, [r7, #14]
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	891a      	ldrh	r2, [r3, #8]
 8010e9e:	89fb      	ldrh	r3, [r7, #14]
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	08021be4 	.word	0x08021be4
 8010eb8:	08021d48 	.word	0x08021d48
 8010ebc:	08021c44 	.word	0x08021c44
 8010ec0:	08021d54 	.word	0x08021d54

08010ec4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	807b      	strh	r3, [r7, #2]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010ed4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	da08      	bge.n	8010eee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ee0:	425b      	negs	r3, r3
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7ff ff9b 	bl	8010e20 <pbuf_remove_header>
 8010eea:	4603      	mov	r3, r0
 8010eec:	e007      	b.n	8010efe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010eee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ef2:	787a      	ldrb	r2, [r7, #1]
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7ff ff1a 	bl	8010d30 <pbuf_add_header_impl>
 8010efc:	4603      	mov	r3, r0
  }
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	460b      	mov	r3, r1
 8010f10:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f16:	2201      	movs	r2, #1
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7ff ffd2 	bl	8010ec4 <pbuf_header_impl>
 8010f20:	4603      	mov	r3, r0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
	...

08010f2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b086      	sub	sp, #24
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d10b      	bne.n	8010f52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d106      	bne.n	8010f4e <pbuf_free+0x22>
 8010f40:	4b38      	ldr	r3, [pc, #224]	; (8011024 <pbuf_free+0xf8>)
 8010f42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010f46:	4938      	ldr	r1, [pc, #224]	; (8011028 <pbuf_free+0xfc>)
 8010f48:	4838      	ldr	r0, [pc, #224]	; (801102c <pbuf_free+0x100>)
 8010f4a:	f00b f869 	bl	801c020 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	e063      	b.n	801101a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010f56:	e05c      	b.n	8011012 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	7b9b      	ldrb	r3, [r3, #14]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d106      	bne.n	8010f6e <pbuf_free+0x42>
 8010f60:	4b30      	ldr	r3, [pc, #192]	; (8011024 <pbuf_free+0xf8>)
 8010f62:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010f66:	4932      	ldr	r1, [pc, #200]	; (8011030 <pbuf_free+0x104>)
 8010f68:	4830      	ldr	r0, [pc, #192]	; (801102c <pbuf_free+0x100>)
 8010f6a:	f00b f859 	bl	801c020 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	7b9b      	ldrb	r3, [r3, #14]
 8010f72:	3b01      	subs	r3, #1
 8010f74:	b2da      	uxtb	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	739a      	strb	r2, [r3, #14]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	7b9b      	ldrb	r3, [r3, #14]
 8010f7e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010f80:	7dbb      	ldrb	r3, [r7, #22]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d143      	bne.n	801100e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7b1b      	ldrb	r3, [r3, #12]
 8010f90:	f003 030f 	and.w	r3, r3, #15
 8010f94:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	7b5b      	ldrb	r3, [r3, #13]
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d011      	beq.n	8010fc6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d106      	bne.n	8010fbc <pbuf_free+0x90>
 8010fae:	4b1d      	ldr	r3, [pc, #116]	; (8011024 <pbuf_free+0xf8>)
 8010fb0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010fb4:	491f      	ldr	r1, [pc, #124]	; (8011034 <pbuf_free+0x108>)
 8010fb6:	481d      	ldr	r0, [pc, #116]	; (801102c <pbuf_free+0x100>)
 8010fb8:	f00b f832 	bl	801c020 <iprintf>
        pc->custom_free_function(p);
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	691b      	ldr	r3, [r3, #16]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	4798      	blx	r3
 8010fc4:	e01d      	b.n	8011002 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010fc6:	7bfb      	ldrb	r3, [r7, #15]
 8010fc8:	2b02      	cmp	r3, #2
 8010fca:	d104      	bne.n	8010fd6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010fcc:	6879      	ldr	r1, [r7, #4]
 8010fce:	2008      	movs	r0, #8
 8010fd0:	f7ff f9b6 	bl	8010340 <memp_free>
 8010fd4:	e015      	b.n	8011002 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010fd6:	7bfb      	ldrb	r3, [r7, #15]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d104      	bne.n	8010fe6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010fdc:	6879      	ldr	r1, [r7, #4]
 8010fde:	2007      	movs	r0, #7
 8010fe0:	f7ff f9ae 	bl	8010340 <memp_free>
 8010fe4:	e00d      	b.n	8011002 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010fe6:	7bfb      	ldrb	r3, [r7, #15]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d103      	bne.n	8010ff4 <pbuf_free+0xc8>
          mem_free(p);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7fe fe87 	bl	800fd00 <mem_free>
 8010ff2:	e006      	b.n	8011002 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010ff4:	4b0b      	ldr	r3, [pc, #44]	; (8011024 <pbuf_free+0xf8>)
 8010ff6:	f240 320f 	movw	r2, #783	; 0x30f
 8010ffa:	490f      	ldr	r1, [pc, #60]	; (8011038 <pbuf_free+0x10c>)
 8010ffc:	480b      	ldr	r0, [pc, #44]	; (801102c <pbuf_free+0x100>)
 8010ffe:	f00b f80f 	bl	801c020 <iprintf>
        }
      }
      count++;
 8011002:	7dfb      	ldrb	r3, [r7, #23]
 8011004:	3301      	adds	r3, #1
 8011006:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	607b      	str	r3, [r7, #4]
 801100c:	e001      	b.n	8011012 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d19f      	bne.n	8010f58 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011018:	7dfb      	ldrb	r3, [r7, #23]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3718      	adds	r7, #24
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	08021be4 	.word	0x08021be4
 8011028:	08021d48 	.word	0x08021d48
 801102c:	08021c44 	.word	0x08021c44
 8011030:	08021d74 	.word	0x08021d74
 8011034:	08021d8c 	.word	0x08021d8c
 8011038:	08021db0 	.word	0x08021db0

0801103c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801103c:	b480      	push	{r7}
 801103e:	b085      	sub	sp, #20
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011044:	2300      	movs	r3, #0
 8011046:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011048:	e005      	b.n	8011056 <pbuf_clen+0x1a>
    ++len;
 801104a:	89fb      	ldrh	r3, [r7, #14]
 801104c:	3301      	adds	r3, #1
 801104e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1f6      	bne.n	801104a <pbuf_clen+0xe>
  }
  return len;
 801105c:	89fb      	ldrh	r3, [r7, #14]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
	...

0801106c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d010      	beq.n	801109c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7b9b      	ldrb	r3, [r3, #14]
 801107e:	3301      	adds	r3, #1
 8011080:	b2da      	uxtb	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	7b9b      	ldrb	r3, [r3, #14]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d106      	bne.n	801109c <pbuf_ref+0x30>
 801108e:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <pbuf_ref+0x38>)
 8011090:	f240 3242 	movw	r2, #834	; 0x342
 8011094:	4904      	ldr	r1, [pc, #16]	; (80110a8 <pbuf_ref+0x3c>)
 8011096:	4805      	ldr	r0, [pc, #20]	; (80110ac <pbuf_ref+0x40>)
 8011098:	f00a ffc2 	bl	801c020 <iprintf>
  }
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	08021be4 	.word	0x08021be4
 80110a8:	08021dc4 	.word	0x08021dc4
 80110ac:	08021c44 	.word	0x08021c44

080110b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <pbuf_cat+0x16>
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d107      	bne.n	80110d6 <pbuf_cat+0x26>
 80110c6:	4b20      	ldr	r3, [pc, #128]	; (8011148 <pbuf_cat+0x98>)
 80110c8:	f240 325a 	movw	r2, #858	; 0x35a
 80110cc:	491f      	ldr	r1, [pc, #124]	; (801114c <pbuf_cat+0x9c>)
 80110ce:	4820      	ldr	r0, [pc, #128]	; (8011150 <pbuf_cat+0xa0>)
 80110d0:	f00a ffa6 	bl	801c020 <iprintf>
 80110d4:	e034      	b.n	8011140 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	60fb      	str	r3, [r7, #12]
 80110da:	e00a      	b.n	80110f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	891a      	ldrh	r2, [r3, #8]
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	891b      	ldrh	r3, [r3, #8]
 80110e4:	4413      	add	r3, r2
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	60fb      	str	r3, [r7, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1f0      	bne.n	80110dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	891a      	ldrh	r2, [r3, #8]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	895b      	ldrh	r3, [r3, #10]
 8011102:	429a      	cmp	r2, r3
 8011104:	d006      	beq.n	8011114 <pbuf_cat+0x64>
 8011106:	4b10      	ldr	r3, [pc, #64]	; (8011148 <pbuf_cat+0x98>)
 8011108:	f240 3262 	movw	r2, #866	; 0x362
 801110c:	4911      	ldr	r1, [pc, #68]	; (8011154 <pbuf_cat+0xa4>)
 801110e:	4810      	ldr	r0, [pc, #64]	; (8011150 <pbuf_cat+0xa0>)
 8011110:	f00a ff86 	bl	801c020 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d006      	beq.n	801112a <pbuf_cat+0x7a>
 801111c:	4b0a      	ldr	r3, [pc, #40]	; (8011148 <pbuf_cat+0x98>)
 801111e:	f240 3263 	movw	r2, #867	; 0x363
 8011122:	490d      	ldr	r1, [pc, #52]	; (8011158 <pbuf_cat+0xa8>)
 8011124:	480a      	ldr	r0, [pc, #40]	; (8011150 <pbuf_cat+0xa0>)
 8011126:	f00a ff7b 	bl	801c020 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	891a      	ldrh	r2, [r3, #8]
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	891b      	ldrh	r3, [r3, #8]
 8011132:	4413      	add	r3, r2
 8011134:	b29a      	uxth	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	08021be4 	.word	0x08021be4
 801114c:	08021dd8 	.word	0x08021dd8
 8011150:	08021c44 	.word	0x08021c44
 8011154:	08021e10 	.word	0x08021e10
 8011158:	08021e40 	.word	0x08021e40

0801115c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f7ff ffa1 	bl	80110b0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801116e:	6838      	ldr	r0, [r7, #0]
 8011170:	f7ff ff7c 	bl	801106c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]
 801118a:	2300      	movs	r3, #0
 801118c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d008      	beq.n	80111a6 <pbuf_copy+0x2a>
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d005      	beq.n	80111a6 <pbuf_copy+0x2a>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	891a      	ldrh	r2, [r3, #8]
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	891b      	ldrh	r3, [r3, #8]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d209      	bcs.n	80111ba <pbuf_copy+0x3e>
 80111a6:	4b57      	ldr	r3, [pc, #348]	; (8011304 <pbuf_copy+0x188>)
 80111a8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80111ac:	4956      	ldr	r1, [pc, #344]	; (8011308 <pbuf_copy+0x18c>)
 80111ae:	4857      	ldr	r0, [pc, #348]	; (801130c <pbuf_copy+0x190>)
 80111b0:	f00a ff36 	bl	801c020 <iprintf>
 80111b4:	f06f 030f 	mvn.w	r3, #15
 80111b8:	e09f      	b.n	80112fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	895b      	ldrh	r3, [r3, #10]
 80111be:	461a      	mov	r2, r3
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	1ad2      	subs	r2, r2, r3
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	895b      	ldrh	r3, [r3, #10]
 80111c8:	4619      	mov	r1, r3
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	1acb      	subs	r3, r1, r3
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d306      	bcc.n	80111e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	461a      	mov	r2, r3
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	60fb      	str	r3, [r7, #12]
 80111de:	e005      	b.n	80111ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	895b      	ldrh	r3, [r3, #10]
 80111e4:	461a      	mov	r2, r3
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685a      	ldr	r2, [r3, #4]
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	18d0      	adds	r0, r2, r3
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	685a      	ldr	r2, [r3, #4]
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	4413      	add	r3, r2
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	4619      	mov	r1, r3
 8011200:	f00a f9dd 	bl	801b5be <memcpy>
    offset_to += len;
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	4413      	add	r3, r2
 801120a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801120c:	693a      	ldr	r2, [r7, #16]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	4413      	add	r3, r2
 8011212:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	895b      	ldrh	r3, [r3, #10]
 8011218:	461a      	mov	r2, r3
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	4293      	cmp	r3, r2
 801121e:	d906      	bls.n	801122e <pbuf_copy+0xb2>
 8011220:	4b38      	ldr	r3, [pc, #224]	; (8011304 <pbuf_copy+0x188>)
 8011222:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011226:	493a      	ldr	r1, [pc, #232]	; (8011310 <pbuf_copy+0x194>)
 8011228:	4838      	ldr	r0, [pc, #224]	; (801130c <pbuf_copy+0x190>)
 801122a:	f00a fef9 	bl	801c020 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	895b      	ldrh	r3, [r3, #10]
 8011232:	461a      	mov	r2, r3
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	4293      	cmp	r3, r2
 8011238:	d906      	bls.n	8011248 <pbuf_copy+0xcc>
 801123a:	4b32      	ldr	r3, [pc, #200]	; (8011304 <pbuf_copy+0x188>)
 801123c:	f240 32da 	movw	r2, #986	; 0x3da
 8011240:	4934      	ldr	r1, [pc, #208]	; (8011314 <pbuf_copy+0x198>)
 8011242:	4832      	ldr	r0, [pc, #200]	; (801130c <pbuf_copy+0x190>)
 8011244:	f00a feec 	bl	801c020 <iprintf>
    if (offset_from >= p_from->len) {
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	895b      	ldrh	r3, [r3, #10]
 801124c:	461a      	mov	r2, r3
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	4293      	cmp	r3, r2
 8011252:	d304      	bcc.n	801125e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	895b      	ldrh	r3, [r3, #10]
 8011262:	461a      	mov	r2, r3
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	4293      	cmp	r3, r2
 8011268:	d114      	bne.n	8011294 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10c      	bne.n	8011294 <pbuf_copy+0x118>
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d009      	beq.n	8011294 <pbuf_copy+0x118>
 8011280:	4b20      	ldr	r3, [pc, #128]	; (8011304 <pbuf_copy+0x188>)
 8011282:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011286:	4924      	ldr	r1, [pc, #144]	; (8011318 <pbuf_copy+0x19c>)
 8011288:	4820      	ldr	r0, [pc, #128]	; (801130c <pbuf_copy+0x190>)
 801128a:	f00a fec9 	bl	801c020 <iprintf>
 801128e:	f06f 030f 	mvn.w	r3, #15
 8011292:	e032      	b.n	80112fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d013      	beq.n	80112c2 <pbuf_copy+0x146>
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	895a      	ldrh	r2, [r3, #10]
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	891b      	ldrh	r3, [r3, #8]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d10d      	bne.n	80112c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d009      	beq.n	80112c2 <pbuf_copy+0x146>
 80112ae:	4b15      	ldr	r3, [pc, #84]	; (8011304 <pbuf_copy+0x188>)
 80112b0:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80112b4:	4919      	ldr	r1, [pc, #100]	; (801131c <pbuf_copy+0x1a0>)
 80112b6:	4815      	ldr	r0, [pc, #84]	; (801130c <pbuf_copy+0x190>)
 80112b8:	f00a feb2 	bl	801c020 <iprintf>
 80112bc:	f06f 0305 	mvn.w	r3, #5
 80112c0:	e01b      	b.n	80112fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d013      	beq.n	80112f0 <pbuf_copy+0x174>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	895a      	ldrh	r2, [r3, #10]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	891b      	ldrh	r3, [r3, #8]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d10d      	bne.n	80112f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d009      	beq.n	80112f0 <pbuf_copy+0x174>
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <pbuf_copy+0x188>)
 80112de:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80112e2:	490e      	ldr	r1, [pc, #56]	; (801131c <pbuf_copy+0x1a0>)
 80112e4:	4809      	ldr	r0, [pc, #36]	; (801130c <pbuf_copy+0x190>)
 80112e6:	f00a fe9b 	bl	801c020 <iprintf>
 80112ea:	f06f 0305 	mvn.w	r3, #5
 80112ee:	e004      	b.n	80112fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f47f af61 	bne.w	80111ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	08021be4 	.word	0x08021be4
 8011308:	08021e8c 	.word	0x08021e8c
 801130c:	08021c44 	.word	0x08021c44
 8011310:	08021ebc 	.word	0x08021ebc
 8011314:	08021ed4 	.word	0x08021ed4
 8011318:	08021ef0 	.word	0x08021ef0
 801131c:	08021f00 	.word	0x08021f00

08011320 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b088      	sub	sp, #32
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	4611      	mov	r1, r2
 801132c:	461a      	mov	r2, r3
 801132e:	460b      	mov	r3, r1
 8011330:	80fb      	strh	r3, [r7, #6]
 8011332:	4613      	mov	r3, r2
 8011334:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011336:	2300      	movs	r3, #0
 8011338:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801133a:	2300      	movs	r3, #0
 801133c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d108      	bne.n	8011356 <pbuf_copy_partial+0x36>
 8011344:	4b2b      	ldr	r3, [pc, #172]	; (80113f4 <pbuf_copy_partial+0xd4>)
 8011346:	f240 420a 	movw	r2, #1034	; 0x40a
 801134a:	492b      	ldr	r1, [pc, #172]	; (80113f8 <pbuf_copy_partial+0xd8>)
 801134c:	482b      	ldr	r0, [pc, #172]	; (80113fc <pbuf_copy_partial+0xdc>)
 801134e:	f00a fe67 	bl	801c020 <iprintf>
 8011352:	2300      	movs	r3, #0
 8011354:	e04a      	b.n	80113ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d108      	bne.n	801136e <pbuf_copy_partial+0x4e>
 801135c:	4b25      	ldr	r3, [pc, #148]	; (80113f4 <pbuf_copy_partial+0xd4>)
 801135e:	f240 420b 	movw	r2, #1035	; 0x40b
 8011362:	4927      	ldr	r1, [pc, #156]	; (8011400 <pbuf_copy_partial+0xe0>)
 8011364:	4825      	ldr	r0, [pc, #148]	; (80113fc <pbuf_copy_partial+0xdc>)
 8011366:	f00a fe5b 	bl	801c020 <iprintf>
 801136a:	2300      	movs	r3, #0
 801136c:	e03e      	b.n	80113ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	61fb      	str	r3, [r7, #28]
 8011372:	e034      	b.n	80113de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011374:	88bb      	ldrh	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00a      	beq.n	8011390 <pbuf_copy_partial+0x70>
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	88ba      	ldrh	r2, [r7, #4]
 8011380:	429a      	cmp	r2, r3
 8011382:	d305      	bcc.n	8011390 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	895b      	ldrh	r3, [r3, #10]
 8011388:	88ba      	ldrh	r2, [r7, #4]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	80bb      	strh	r3, [r7, #4]
 801138e:	e023      	b.n	80113d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	895a      	ldrh	r2, [r3, #10]
 8011394:	88bb      	ldrh	r3, [r7, #4]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801139a:	8b3a      	ldrh	r2, [r7, #24]
 801139c:	88fb      	ldrh	r3, [r7, #6]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d901      	bls.n	80113a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80113a2:	88fb      	ldrh	r3, [r7, #6]
 80113a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80113a6:	8b7b      	ldrh	r3, [r7, #26]
 80113a8:	68ba      	ldr	r2, [r7, #8]
 80113aa:	18d0      	adds	r0, r2, r3
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	685a      	ldr	r2, [r3, #4]
 80113b0:	88bb      	ldrh	r3, [r7, #4]
 80113b2:	4413      	add	r3, r2
 80113b4:	8b3a      	ldrh	r2, [r7, #24]
 80113b6:	4619      	mov	r1, r3
 80113b8:	f00a f901 	bl	801b5be <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80113bc:	8afa      	ldrh	r2, [r7, #22]
 80113be:	8b3b      	ldrh	r3, [r7, #24]
 80113c0:	4413      	add	r3, r2
 80113c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80113c4:	8b7a      	ldrh	r2, [r7, #26]
 80113c6:	8b3b      	ldrh	r3, [r7, #24]
 80113c8:	4413      	add	r3, r2
 80113ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80113cc:	88fa      	ldrh	r2, [r7, #6]
 80113ce:	8b3b      	ldrh	r3, [r7, #24]
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80113d4:	2300      	movs	r3, #0
 80113d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	61fb      	str	r3, [r7, #28]
 80113de:	88fb      	ldrh	r3, [r7, #6]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <pbuf_copy_partial+0xca>
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1c4      	bne.n	8011374 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80113ea:	8afb      	ldrh	r3, [r7, #22]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3720      	adds	r7, #32
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	08021be4 	.word	0x08021be4
 80113f8:	08021f2c 	.word	0x08021f2c
 80113fc:	08021c44 	.word	0x08021c44
 8011400:	08021f4c 	.word	0x08021f4c

08011404 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	4603      	mov	r3, r0
 801140c:	603a      	str	r2, [r7, #0]
 801140e:	71fb      	strb	r3, [r7, #7]
 8011410:	460b      	mov	r3, r1
 8011412:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	8919      	ldrh	r1, [r3, #8]
 8011418:	88ba      	ldrh	r2, [r7, #4]
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff faa5 	bl	801096c <pbuf_alloc>
 8011422:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d101      	bne.n	801142e <pbuf_clone+0x2a>
    return NULL;
 801142a:	2300      	movs	r3, #0
 801142c:	e011      	b.n	8011452 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f7ff fea3 	bl	801117c <pbuf_copy>
 8011436:	4603      	mov	r3, r0
 8011438:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801143a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d006      	beq.n	8011450 <pbuf_clone+0x4c>
 8011442:	4b06      	ldr	r3, [pc, #24]	; (801145c <pbuf_clone+0x58>)
 8011444:	f240 5224 	movw	r2, #1316	; 0x524
 8011448:	4905      	ldr	r1, [pc, #20]	; (8011460 <pbuf_clone+0x5c>)
 801144a:	4806      	ldr	r0, [pc, #24]	; (8011464 <pbuf_clone+0x60>)
 801144c:	f00a fde8 	bl	801c020 <iprintf>
  return q;
 8011450:	68fb      	ldr	r3, [r7, #12]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	08021be4 	.word	0x08021be4
 8011460:	08022058 	.word	0x08022058
 8011464:	08021c44 	.word	0x08021c44

08011468 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801146c:	f00a fdf0 	bl	801c050 <rand>
 8011470:	4603      	mov	r3, r0
 8011472:	b29b      	uxth	r3, r3
 8011474:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011478:	b29b      	uxth	r3, r3
 801147a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b01      	ldr	r3, [pc, #4]	; (8011488 <tcp_init+0x20>)
 8011482:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011484:	bf00      	nop
 8011486:	bd80      	pop	{r7, pc}
 8011488:	20000076 	.word	0x20000076

0801148c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d105      	bne.n	80114a8 <tcp_free+0x1c>
 801149c:	4b06      	ldr	r3, [pc, #24]	; (80114b8 <tcp_free+0x2c>)
 801149e:	22d4      	movs	r2, #212	; 0xd4
 80114a0:	4906      	ldr	r1, [pc, #24]	; (80114bc <tcp_free+0x30>)
 80114a2:	4807      	ldr	r0, [pc, #28]	; (80114c0 <tcp_free+0x34>)
 80114a4:	f00a fdbc 	bl	801c020 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80114a8:	6879      	ldr	r1, [r7, #4]
 80114aa:	2001      	movs	r0, #1
 80114ac:	f7fe ff48 	bl	8010340 <memp_free>
}
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	080220e4 	.word	0x080220e4
 80114bc:	08022114 	.word	0x08022114
 80114c0:	08022128 	.word	0x08022128

080114c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7d1b      	ldrb	r3, [r3, #20]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d105      	bne.n	80114e0 <tcp_free_listen+0x1c>
 80114d4:	4b06      	ldr	r3, [pc, #24]	; (80114f0 <tcp_free_listen+0x2c>)
 80114d6:	22df      	movs	r2, #223	; 0xdf
 80114d8:	4906      	ldr	r1, [pc, #24]	; (80114f4 <tcp_free_listen+0x30>)
 80114da:	4807      	ldr	r0, [pc, #28]	; (80114f8 <tcp_free_listen+0x34>)
 80114dc:	f00a fda0 	bl	801c020 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	2002      	movs	r0, #2
 80114e4:	f7fe ff2c 	bl	8010340 <memp_free>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	080220e4 	.word	0x080220e4
 80114f4:	08022150 	.word	0x08022150
 80114f8:	08022128 	.word	0x08022128

080114fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011500:	f000 fe98 	bl	8012234 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011504:	4b07      	ldr	r3, [pc, #28]	; (8011524 <tcp_tmr+0x28>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	3301      	adds	r3, #1
 801150a:	b2da      	uxtb	r2, r3
 801150c:	4b05      	ldr	r3, [pc, #20]	; (8011524 <tcp_tmr+0x28>)
 801150e:	701a      	strb	r2, [r3, #0]
 8011510:	4b04      	ldr	r3, [pc, #16]	; (8011524 <tcp_tmr+0x28>)
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801151c:	f000 fb4c 	bl	8011bb8 <tcp_slowtmr>
  }
}
 8011520:	bf00      	nop
 8011522:	bd80      	pop	{r7, pc}
 8011524:	20001035 	.word	0x20001035

08011528 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d105      	bne.n	8011544 <tcp_remove_listener+0x1c>
 8011538:	4b0d      	ldr	r3, [pc, #52]	; (8011570 <tcp_remove_listener+0x48>)
 801153a:	22ff      	movs	r2, #255	; 0xff
 801153c:	490d      	ldr	r1, [pc, #52]	; (8011574 <tcp_remove_listener+0x4c>)
 801153e:	480e      	ldr	r0, [pc, #56]	; (8011578 <tcp_remove_listener+0x50>)
 8011540:	f00a fd6e 	bl	801c020 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e00a      	b.n	8011560 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801154e:	683a      	ldr	r2, [r7, #0]
 8011550:	429a      	cmp	r2, r3
 8011552:	d102      	bne.n	801155a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2200      	movs	r2, #0
 8011558:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d1f1      	bne.n	801154a <tcp_remove_listener+0x22>
    }
  }
}
 8011566:	bf00      	nop
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	080220e4 	.word	0x080220e4
 8011574:	0802216c 	.word	0x0802216c
 8011578:	08022128 	.word	0x08022128

0801157c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d106      	bne.n	8011598 <tcp_listen_closed+0x1c>
 801158a:	4b14      	ldr	r3, [pc, #80]	; (80115dc <tcp_listen_closed+0x60>)
 801158c:	f240 1211 	movw	r2, #273	; 0x111
 8011590:	4913      	ldr	r1, [pc, #76]	; (80115e0 <tcp_listen_closed+0x64>)
 8011592:	4814      	ldr	r0, [pc, #80]	; (80115e4 <tcp_listen_closed+0x68>)
 8011594:	f00a fd44 	bl	801c020 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7d1b      	ldrb	r3, [r3, #20]
 801159c:	2b01      	cmp	r3, #1
 801159e:	d006      	beq.n	80115ae <tcp_listen_closed+0x32>
 80115a0:	4b0e      	ldr	r3, [pc, #56]	; (80115dc <tcp_listen_closed+0x60>)
 80115a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80115a6:	4910      	ldr	r1, [pc, #64]	; (80115e8 <tcp_listen_closed+0x6c>)
 80115a8:	480e      	ldr	r0, [pc, #56]	; (80115e4 <tcp_listen_closed+0x68>)
 80115aa:	f00a fd39 	bl	801c020 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80115ae:	2301      	movs	r3, #1
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	e00b      	b.n	80115cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80115b4:	4a0d      	ldr	r2, [pc, #52]	; (80115ec <tcp_listen_closed+0x70>)
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	6879      	ldr	r1, [r7, #4]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff ffb1 	bl	8011528 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	3301      	adds	r3, #1
 80115ca:	60fb      	str	r3, [r7, #12]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2b03      	cmp	r3, #3
 80115d0:	d9f0      	bls.n	80115b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80115d2:	bf00      	nop
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	080220e4 	.word	0x080220e4
 80115e0:	08022194 	.word	0x08022194
 80115e4:	08022128 	.word	0x08022128
 80115e8:	080221a0 	.word	0x080221a0
 80115ec:	080249b8 	.word	0x080249b8

080115f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80115f0:	b5b0      	push	{r4, r5, r7, lr}
 80115f2:	b088      	sub	sp, #32
 80115f4:	af04      	add	r7, sp, #16
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	460b      	mov	r3, r1
 80115fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <tcp_close_shutdown+0x20>
 8011602:	4b61      	ldr	r3, [pc, #388]	; (8011788 <tcp_close_shutdown+0x198>)
 8011604:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011608:	4960      	ldr	r1, [pc, #384]	; (801178c <tcp_close_shutdown+0x19c>)
 801160a:	4861      	ldr	r0, [pc, #388]	; (8011790 <tcp_close_shutdown+0x1a0>)
 801160c:	f00a fd08 	bl	801c020 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011610:	78fb      	ldrb	r3, [r7, #3]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d066      	beq.n	80116e4 <tcp_close_shutdown+0xf4>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	7d1b      	ldrb	r3, [r3, #20]
 801161a:	2b04      	cmp	r3, #4
 801161c:	d003      	beq.n	8011626 <tcp_close_shutdown+0x36>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	7d1b      	ldrb	r3, [r3, #20]
 8011622:	2b07      	cmp	r3, #7
 8011624:	d15e      	bne.n	80116e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801162a:	2b00      	cmp	r3, #0
 801162c:	d104      	bne.n	8011638 <tcp_close_shutdown+0x48>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011636:	d055      	beq.n	80116e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	8b5b      	ldrh	r3, [r3, #26]
 801163c:	f003 0310 	and.w	r3, r3, #16
 8011640:	2b00      	cmp	r3, #0
 8011642:	d106      	bne.n	8011652 <tcp_close_shutdown+0x62>
 8011644:	4b50      	ldr	r3, [pc, #320]	; (8011788 <tcp_close_shutdown+0x198>)
 8011646:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801164a:	4952      	ldr	r1, [pc, #328]	; (8011794 <tcp_close_shutdown+0x1a4>)
 801164c:	4850      	ldr	r0, [pc, #320]	; (8011790 <tcp_close_shutdown+0x1a0>)
 801164e:	f00a fce7 	bl	801c020 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801165a:	687d      	ldr	r5, [r7, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	3304      	adds	r3, #4
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	8ad2      	ldrh	r2, [r2, #22]
 8011664:	6879      	ldr	r1, [r7, #4]
 8011666:	8b09      	ldrh	r1, [r1, #24]
 8011668:	9102      	str	r1, [sp, #8]
 801166a:	9201      	str	r2, [sp, #4]
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	462b      	mov	r3, r5
 8011670:	4622      	mov	r2, r4
 8011672:	4601      	mov	r1, r0
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f004 fe8f 	bl	8016398 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f001 f8ba 	bl	80127f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011680:	4b45      	ldr	r3, [pc, #276]	; (8011798 <tcp_close_shutdown+0x1a8>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d105      	bne.n	8011696 <tcp_close_shutdown+0xa6>
 801168a:	4b43      	ldr	r3, [pc, #268]	; (8011798 <tcp_close_shutdown+0x1a8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	4a41      	ldr	r2, [pc, #260]	; (8011798 <tcp_close_shutdown+0x1a8>)
 8011692:	6013      	str	r3, [r2, #0]
 8011694:	e013      	b.n	80116be <tcp_close_shutdown+0xce>
 8011696:	4b40      	ldr	r3, [pc, #256]	; (8011798 <tcp_close_shutdown+0x1a8>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	e00c      	b.n	80116b8 <tcp_close_shutdown+0xc8>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d104      	bne.n	80116b2 <tcp_close_shutdown+0xc2>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	68da      	ldr	r2, [r3, #12]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	60da      	str	r2, [r3, #12]
 80116b0:	e005      	b.n	80116be <tcp_close_shutdown+0xce>
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	60fb      	str	r3, [r7, #12]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1ef      	bne.n	801169e <tcp_close_shutdown+0xae>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	60da      	str	r2, [r3, #12]
 80116c4:	4b35      	ldr	r3, [pc, #212]	; (801179c <tcp_close_shutdown+0x1ac>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80116ca:	4b35      	ldr	r3, [pc, #212]	; (80117a0 <tcp_close_shutdown+0x1b0>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d102      	bne.n	80116da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80116d4:	f003 fd4c 	bl	8015170 <tcp_trigger_input_pcb_close>
 80116d8:	e002      	b.n	80116e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f7ff fed6 	bl	801148c <tcp_free>
      }
      return ERR_OK;
 80116e0:	2300      	movs	r3, #0
 80116e2:	e04d      	b.n	8011780 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	7d1b      	ldrb	r3, [r3, #20]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d02d      	beq.n	8011748 <tcp_close_shutdown+0x158>
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	d036      	beq.n	801175e <tcp_close_shutdown+0x16e>
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d13f      	bne.n	8011774 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	8adb      	ldrh	r3, [r3, #22]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d021      	beq.n	8011740 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80116fc:	4b29      	ldr	r3, [pc, #164]	; (80117a4 <tcp_close_shutdown+0x1b4>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	429a      	cmp	r2, r3
 8011704:	d105      	bne.n	8011712 <tcp_close_shutdown+0x122>
 8011706:	4b27      	ldr	r3, [pc, #156]	; (80117a4 <tcp_close_shutdown+0x1b4>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	4a25      	ldr	r2, [pc, #148]	; (80117a4 <tcp_close_shutdown+0x1b4>)
 801170e:	6013      	str	r3, [r2, #0]
 8011710:	e013      	b.n	801173a <tcp_close_shutdown+0x14a>
 8011712:	4b24      	ldr	r3, [pc, #144]	; (80117a4 <tcp_close_shutdown+0x1b4>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	60bb      	str	r3, [r7, #8]
 8011718:	e00c      	b.n	8011734 <tcp_close_shutdown+0x144>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	429a      	cmp	r2, r3
 8011722:	d104      	bne.n	801172e <tcp_close_shutdown+0x13e>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68da      	ldr	r2, [r3, #12]
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	60da      	str	r2, [r3, #12]
 801172c:	e005      	b.n	801173a <tcp_close_shutdown+0x14a>
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	60bb      	str	r3, [r7, #8]
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d1ef      	bne.n	801171a <tcp_close_shutdown+0x12a>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2200      	movs	r2, #0
 801173e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff fea3 	bl	801148c <tcp_free>
      break;
 8011746:	e01a      	b.n	801177e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff ff17 	bl	801157c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801174e:	6879      	ldr	r1, [r7, #4]
 8011750:	4815      	ldr	r0, [pc, #84]	; (80117a8 <tcp_close_shutdown+0x1b8>)
 8011752:	f001 f89f 	bl	8012894 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff feb4 	bl	80114c4 <tcp_free_listen>
      break;
 801175c:	e00f      	b.n	801177e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801175e:	6879      	ldr	r1, [r7, #4]
 8011760:	480d      	ldr	r0, [pc, #52]	; (8011798 <tcp_close_shutdown+0x1a8>)
 8011762:	f001 f897 	bl	8012894 <tcp_pcb_remove>
 8011766:	4b0d      	ldr	r3, [pc, #52]	; (801179c <tcp_close_shutdown+0x1ac>)
 8011768:	2201      	movs	r2, #1
 801176a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7ff fe8d 	bl	801148c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011772:	e004      	b.n	801177e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 f819 	bl	80117ac <tcp_close_shutdown_fin>
 801177a:	4603      	mov	r3, r0
 801177c:	e000      	b.n	8011780 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 801177e:	2300      	movs	r3, #0
}
 8011780:	4618      	mov	r0, r3
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bdb0      	pop	{r4, r5, r7, pc}
 8011788:	080220e4 	.word	0x080220e4
 801178c:	080221b8 	.word	0x080221b8
 8011790:	08022128 	.word	0x08022128
 8011794:	080221d8 	.word	0x080221d8
 8011798:	200082c4 	.word	0x200082c4
 801179c:	200082c0 	.word	0x200082c0
 80117a0:	200082d8 	.word	0x200082d8
 80117a4:	200082d0 	.word	0x200082d0
 80117a8:	200082cc 	.word	0x200082cc

080117ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d106      	bne.n	80117c8 <tcp_close_shutdown_fin+0x1c>
 80117ba:	4b2c      	ldr	r3, [pc, #176]	; (801186c <tcp_close_shutdown_fin+0xc0>)
 80117bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80117c0:	492b      	ldr	r1, [pc, #172]	; (8011870 <tcp_close_shutdown_fin+0xc4>)
 80117c2:	482c      	ldr	r0, [pc, #176]	; (8011874 <tcp_close_shutdown_fin+0xc8>)
 80117c4:	f00a fc2c 	bl	801c020 <iprintf>

  switch (pcb->state) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7d1b      	ldrb	r3, [r3, #20]
 80117cc:	2b04      	cmp	r3, #4
 80117ce:	d010      	beq.n	80117f2 <tcp_close_shutdown_fin+0x46>
 80117d0:	2b07      	cmp	r3, #7
 80117d2:	d01b      	beq.n	801180c <tcp_close_shutdown_fin+0x60>
 80117d4:	2b03      	cmp	r3, #3
 80117d6:	d126      	bne.n	8011826 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f003 fedb 	bl	8015594 <tcp_send_fin>
 80117de:	4603      	mov	r3, r0
 80117e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80117e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d11f      	bne.n	801182a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2205      	movs	r2, #5
 80117ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80117f0:	e01b      	b.n	801182a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f003 fece 	bl	8015594 <tcp_send_fin>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80117fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d114      	bne.n	801182e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2205      	movs	r2, #5
 8011808:	751a      	strb	r2, [r3, #20]
      }
      break;
 801180a:	e010      	b.n	801182e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f003 fec1 	bl	8015594 <tcp_send_fin>
 8011812:	4603      	mov	r3, r0
 8011814:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d109      	bne.n	8011832 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2209      	movs	r2, #9
 8011822:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011824:	e005      	b.n	8011832 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011826:	2300      	movs	r3, #0
 8011828:	e01c      	b.n	8011864 <tcp_close_shutdown_fin+0xb8>
      break;
 801182a:	bf00      	nop
 801182c:	e002      	b.n	8011834 <tcp_close_shutdown_fin+0x88>
      break;
 801182e:	bf00      	nop
 8011830:	e000      	b.n	8011834 <tcp_close_shutdown_fin+0x88>
      break;
 8011832:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d103      	bne.n	8011844 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f003 ffe7 	bl	8015810 <tcp_output>
 8011842:	e00d      	b.n	8011860 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8011844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184c:	d108      	bne.n	8011860 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8b5b      	ldrh	r3, [r3, #26]
 8011852:	f043 0308 	orr.w	r3, r3, #8
 8011856:	b29a      	uxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	e001      	b.n	8011864 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	080220e4 	.word	0x080220e4
 8011870:	08022194 	.word	0x08022194
 8011874:	08022128 	.word	0x08022128

08011878 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d109      	bne.n	801189a <tcp_close+0x22>
 8011886:	4b0f      	ldr	r3, [pc, #60]	; (80118c4 <tcp_close+0x4c>)
 8011888:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801188c:	490e      	ldr	r1, [pc, #56]	; (80118c8 <tcp_close+0x50>)
 801188e:	480f      	ldr	r0, [pc, #60]	; (80118cc <tcp_close+0x54>)
 8011890:	f00a fbc6 	bl	801c020 <iprintf>
 8011894:	f06f 030f 	mvn.w	r3, #15
 8011898:	e00f      	b.n	80118ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	7d1b      	ldrb	r3, [r3, #20]
 801189e:	2b01      	cmp	r3, #1
 80118a0:	d006      	beq.n	80118b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8b5b      	ldrh	r3, [r3, #26]
 80118a6:	f043 0310 	orr.w	r3, r3, #16
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80118b0:	2101      	movs	r1, #1
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff fe9c 	bl	80115f0 <tcp_close_shutdown>
 80118b8:	4603      	mov	r3, r0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3708      	adds	r7, #8
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop
 80118c4:	080220e4 	.word	0x080220e4
 80118c8:	080221f4 	.word	0x080221f4
 80118cc:	08022128 	.word	0x08022128

080118d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b08e      	sub	sp, #56	; 0x38
 80118d4:	af04      	add	r7, sp, #16
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d107      	bne.n	80118f0 <tcp_abandon+0x20>
 80118e0:	4b52      	ldr	r3, [pc, #328]	; (8011a2c <tcp_abandon+0x15c>)
 80118e2:	f240 223d 	movw	r2, #573	; 0x23d
 80118e6:	4952      	ldr	r1, [pc, #328]	; (8011a30 <tcp_abandon+0x160>)
 80118e8:	4852      	ldr	r0, [pc, #328]	; (8011a34 <tcp_abandon+0x164>)
 80118ea:	f00a fb99 	bl	801c020 <iprintf>
 80118ee:	e099      	b.n	8011a24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7d1b      	ldrb	r3, [r3, #20]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d106      	bne.n	8011906 <tcp_abandon+0x36>
 80118f8:	4b4c      	ldr	r3, [pc, #304]	; (8011a2c <tcp_abandon+0x15c>)
 80118fa:	f240 2241 	movw	r2, #577	; 0x241
 80118fe:	494e      	ldr	r1, [pc, #312]	; (8011a38 <tcp_abandon+0x168>)
 8011900:	484c      	ldr	r0, [pc, #304]	; (8011a34 <tcp_abandon+0x164>)
 8011902:	f00a fb8d 	bl	801c020 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	7d1b      	ldrb	r3, [r3, #20]
 801190a:	2b0a      	cmp	r3, #10
 801190c:	d107      	bne.n	801191e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801190e:	6879      	ldr	r1, [r7, #4]
 8011910:	484a      	ldr	r0, [pc, #296]	; (8011a3c <tcp_abandon+0x16c>)
 8011912:	f000 ffbf 	bl	8012894 <tcp_pcb_remove>
    tcp_free(pcb);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7ff fdb8 	bl	801148c <tcp_free>
 801191c:	e082      	b.n	8011a24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801191e:	2300      	movs	r3, #0
 8011920:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011922:	2300      	movs	r3, #0
 8011924:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801192a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011930:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011938:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d126      	bne.n	8011996 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	8adb      	ldrh	r3, [r3, #22]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d02e      	beq.n	80119ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011950:	4b3b      	ldr	r3, [pc, #236]	; (8011a40 <tcp_abandon+0x170>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	429a      	cmp	r2, r3
 8011958:	d105      	bne.n	8011966 <tcp_abandon+0x96>
 801195a:	4b39      	ldr	r3, [pc, #228]	; (8011a40 <tcp_abandon+0x170>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	4a37      	ldr	r2, [pc, #220]	; (8011a40 <tcp_abandon+0x170>)
 8011962:	6013      	str	r3, [r2, #0]
 8011964:	e013      	b.n	801198e <tcp_abandon+0xbe>
 8011966:	4b36      	ldr	r3, [pc, #216]	; (8011a40 <tcp_abandon+0x170>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	61fb      	str	r3, [r7, #28]
 801196c:	e00c      	b.n	8011988 <tcp_abandon+0xb8>
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	429a      	cmp	r2, r3
 8011976:	d104      	bne.n	8011982 <tcp_abandon+0xb2>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68da      	ldr	r2, [r3, #12]
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	60da      	str	r2, [r3, #12]
 8011980:	e005      	b.n	801198e <tcp_abandon+0xbe>
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	61fb      	str	r3, [r7, #28]
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1ef      	bne.n	801196e <tcp_abandon+0x9e>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2200      	movs	r2, #0
 8011992:	60da      	str	r2, [r3, #12]
 8011994:	e00b      	b.n	80119ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8adb      	ldrh	r3, [r3, #22]
 801199e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80119a0:	6879      	ldr	r1, [r7, #4]
 80119a2:	4828      	ldr	r0, [pc, #160]	; (8011a44 <tcp_abandon+0x174>)
 80119a4:	f000 ff76 	bl	8012894 <tcp_pcb_remove>
 80119a8:	4b27      	ldr	r3, [pc, #156]	; (8011a48 <tcp_abandon+0x178>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d004      	beq.n	80119c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ba:	4618      	mov	r0, r3
 80119bc:	f000 fd1a 	bl	80123f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d004      	beq.n	80119d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119cc:	4618      	mov	r0, r3
 80119ce:	f000 fd11 	bl	80123f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d004      	beq.n	80119e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119de:	4618      	mov	r0, r3
 80119e0:	f000 fd08 	bl	80123f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00e      	beq.n	8011a08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80119ea:	6879      	ldr	r1, [r7, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	3304      	adds	r3, #4
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	8b12      	ldrh	r2, [r2, #24]
 80119f4:	9202      	str	r2, [sp, #8]
 80119f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80119f8:	9201      	str	r2, [sp, #4]
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	460b      	mov	r3, r1
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	69b9      	ldr	r1, [r7, #24]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f004 fcc8 	bl	8016398 <tcp_rst>
    }
    last_state = pcb->state;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff fd3c 	bl	801148c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d004      	beq.n	8011a24 <tcp_abandon+0x154>
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f06f 010c 	mvn.w	r1, #12
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	4798      	blx	r3
  }
}
 8011a24:	3728      	adds	r7, #40	; 0x28
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	080220e4 	.word	0x080220e4
 8011a30:	08022228 	.word	0x08022228
 8011a34:	08022128 	.word	0x08022128
 8011a38:	08022244 	.word	0x08022244
 8011a3c:	200082d4 	.word	0x200082d4
 8011a40:	200082d0 	.word	0x200082d0
 8011a44:	200082c4 	.word	0x200082c4
 8011a48:	200082c0 	.word	0x200082c0

08011a4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011a54:	2101      	movs	r1, #1
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7ff ff3a 	bl	80118d0 <tcp_abandon>
}
 8011a5c:	bf00      	nop
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d106      	bne.n	8011a80 <tcp_update_rcv_ann_wnd+0x1c>
 8011a72:	4b25      	ldr	r3, [pc, #148]	; (8011b08 <tcp_update_rcv_ann_wnd+0xa4>)
 8011a74:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011a78:	4924      	ldr	r1, [pc, #144]	; (8011b0c <tcp_update_rcv_ann_wnd+0xa8>)
 8011a7a:	4825      	ldr	r0, [pc, #148]	; (8011b10 <tcp_update_rcv_ann_wnd+0xac>)
 8011a7c:	f00a fad0 	bl	801c020 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011a88:	4413      	add	r3, r2
 8011a8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011a94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8011a98:	bf28      	it	cs
 8011a9a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8011a9e:	b292      	uxth	r2, r2
 8011aa0:	4413      	add	r3, r2
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	db08      	blt.n	8011abc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	1ad3      	subs	r3, r2, r3
 8011aba:	e020      	b.n	8011afe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac4:	1ad3      	subs	r3, r2, r3
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dd03      	ble.n	8011ad2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ad0:	e014      	b.n	8011afc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ae4:	d306      	bcc.n	8011af4 <tcp_update_rcv_ann_wnd+0x90>
 8011ae6:	4b08      	ldr	r3, [pc, #32]	; (8011b08 <tcp_update_rcv_ann_wnd+0xa4>)
 8011ae8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011aec:	4909      	ldr	r1, [pc, #36]	; (8011b14 <tcp_update_rcv_ann_wnd+0xb0>)
 8011aee:	4808      	ldr	r0, [pc, #32]	; (8011b10 <tcp_update_rcv_ann_wnd+0xac>)
 8011af0:	f00a fa96 	bl	801c020 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011afc:	2300      	movs	r3, #0
  }
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	080220e4 	.word	0x080220e4
 8011b0c:	08022340 	.word	0x08022340
 8011b10:	08022128 	.word	0x08022128
 8011b14:	08022364 	.word	0x08022364

08011b18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	460b      	mov	r3, r1
 8011b22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d107      	bne.n	8011b3a <tcp_recved+0x22>
 8011b2a:	4b1f      	ldr	r3, [pc, #124]	; (8011ba8 <tcp_recved+0x90>)
 8011b2c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011b30:	491e      	ldr	r1, [pc, #120]	; (8011bac <tcp_recved+0x94>)
 8011b32:	481f      	ldr	r0, [pc, #124]	; (8011bb0 <tcp_recved+0x98>)
 8011b34:	f00a fa74 	bl	801c020 <iprintf>
 8011b38:	e032      	b.n	8011ba0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	7d1b      	ldrb	r3, [r3, #20]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d106      	bne.n	8011b50 <tcp_recved+0x38>
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <tcp_recved+0x90>)
 8011b44:	f240 32d3 	movw	r2, #979	; 0x3d3
 8011b48:	491a      	ldr	r1, [pc, #104]	; (8011bb4 <tcp_recved+0x9c>)
 8011b4a:	4819      	ldr	r0, [pc, #100]	; (8011bb0 <tcp_recved+0x98>)
 8011b4c:	f00a fa68 	bl	801c020 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b54:	887b      	ldrh	r3, [r7, #2]
 8011b56:	4413      	add	r3, r2
 8011b58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011b5a:	89fb      	ldrh	r3, [r7, #14]
 8011b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b60:	d804      	bhi.n	8011b6c <tcp_recved+0x54>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b66:	89fa      	ldrh	r2, [r7, #14]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d204      	bcs.n	8011b76 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b72:	851a      	strh	r2, [r3, #40]	; 0x28
 8011b74:	e002      	b.n	8011b7c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	89fa      	ldrh	r2, [r7, #14]
 8011b7a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7ff ff71 	bl	8011a64 <tcp_update_rcv_ann_wnd>
 8011b82:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b8a:	d309      	bcc.n	8011ba0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	8b5b      	ldrh	r3, [r3, #26]
 8011b90:	f043 0302 	orr.w	r3, r3, #2
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f003 fe38 	bl	8015810 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	080220e4 	.word	0x080220e4
 8011bac:	08022380 	.word	0x08022380
 8011bb0:	08022128 	.word	0x08022128
 8011bb4:	08022398 	.word	0x08022398

08011bb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011bb8:	b5b0      	push	{r4, r5, r7, lr}
 8011bba:	b090      	sub	sp, #64	; 0x40
 8011bbc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011bc4:	4b94      	ldr	r3, [pc, #592]	; (8011e18 <tcp_slowtmr+0x260>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	4a93      	ldr	r2, [pc, #588]	; (8011e18 <tcp_slowtmr+0x260>)
 8011bcc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011bce:	4b93      	ldr	r3, [pc, #588]	; (8011e1c <tcp_slowtmr+0x264>)
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	4b91      	ldr	r3, [pc, #580]	; (8011e1c <tcp_slowtmr+0x264>)
 8011bd8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011bde:	4b90      	ldr	r3, [pc, #576]	; (8011e20 <tcp_slowtmr+0x268>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011be4:	e29f      	b.n	8012126 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be8:	7d1b      	ldrb	r3, [r3, #20]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d106      	bne.n	8011bfc <tcp_slowtmr+0x44>
 8011bee:	4b8d      	ldr	r3, [pc, #564]	; (8011e24 <tcp_slowtmr+0x26c>)
 8011bf0:	f240 42be 	movw	r2, #1214	; 0x4be
 8011bf4:	498c      	ldr	r1, [pc, #560]	; (8011e28 <tcp_slowtmr+0x270>)
 8011bf6:	488d      	ldr	r0, [pc, #564]	; (8011e2c <tcp_slowtmr+0x274>)
 8011bf8:	f00a fa12 	bl	801c020 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	7d1b      	ldrb	r3, [r3, #20]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d106      	bne.n	8011c12 <tcp_slowtmr+0x5a>
 8011c04:	4b87      	ldr	r3, [pc, #540]	; (8011e24 <tcp_slowtmr+0x26c>)
 8011c06:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011c0a:	4989      	ldr	r1, [pc, #548]	; (8011e30 <tcp_slowtmr+0x278>)
 8011c0c:	4887      	ldr	r0, [pc, #540]	; (8011e2c <tcp_slowtmr+0x274>)
 8011c0e:	f00a fa07 	bl	801c020 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c14:	7d1b      	ldrb	r3, [r3, #20]
 8011c16:	2b0a      	cmp	r3, #10
 8011c18:	d106      	bne.n	8011c28 <tcp_slowtmr+0x70>
 8011c1a:	4b82      	ldr	r3, [pc, #520]	; (8011e24 <tcp_slowtmr+0x26c>)
 8011c1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011c20:	4984      	ldr	r1, [pc, #528]	; (8011e34 <tcp_slowtmr+0x27c>)
 8011c22:	4882      	ldr	r0, [pc, #520]	; (8011e2c <tcp_slowtmr+0x274>)
 8011c24:	f00a f9fc 	bl	801c020 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2a:	7f9a      	ldrb	r2, [r3, #30]
 8011c2c:	4b7b      	ldr	r3, [pc, #492]	; (8011e1c <tcp_slowtmr+0x264>)
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d105      	bne.n	8011c40 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011c3e:	e272      	b.n	8012126 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011c40:	4b76      	ldr	r3, [pc, #472]	; (8011e1c <tcp_slowtmr+0x264>)
 8011c42:	781a      	ldrb	r2, [r3, #0]
 8011c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c46:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	7d1b      	ldrb	r3, [r3, #20]
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d10a      	bne.n	8011c72 <tcp_slowtmr+0xba>
 8011c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c62:	2b05      	cmp	r3, #5
 8011c64:	d905      	bls.n	8011c72 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c70:	e11e      	b.n	8011eb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c78:	2b0b      	cmp	r3, #11
 8011c7a:	d905      	bls.n	8011c88 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c80:	3301      	adds	r3, #1
 8011c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c86:	e113      	b.n	8011eb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d075      	beq.n	8011d7e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d006      	beq.n	8011ca8 <tcp_slowtmr+0xf0>
 8011c9a:	4b62      	ldr	r3, [pc, #392]	; (8011e24 <tcp_slowtmr+0x26c>)
 8011c9c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011ca0:	4965      	ldr	r1, [pc, #404]	; (8011e38 <tcp_slowtmr+0x280>)
 8011ca2:	4862      	ldr	r0, [pc, #392]	; (8011e2c <tcp_slowtmr+0x274>)
 8011ca4:	f00a f9bc 	bl	801c020 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d106      	bne.n	8011cbe <tcp_slowtmr+0x106>
 8011cb0:	4b5c      	ldr	r3, [pc, #368]	; (8011e24 <tcp_slowtmr+0x26c>)
 8011cb2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011cb6:	4961      	ldr	r1, [pc, #388]	; (8011e3c <tcp_slowtmr+0x284>)
 8011cb8:	485c      	ldr	r0, [pc, #368]	; (8011e2c <tcp_slowtmr+0x274>)
 8011cba:	f00a f9b1 	bl	801c020 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011cc4:	2b0b      	cmp	r3, #11
 8011cc6:	d905      	bls.n	8011cd4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ccc:	3301      	adds	r3, #1
 8011cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cd2:	e0ed      	b.n	8011eb0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	4a58      	ldr	r2, [pc, #352]	; (8011e40 <tcp_slowtmr+0x288>)
 8011cde:	5cd3      	ldrb	r3, [r2, r3]
 8011ce0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011ce8:	7c7a      	ldrb	r2, [r7, #17]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d907      	bls.n	8011cfe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d04:	7c7a      	ldrb	r2, [r7, #17]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	f200 80d2 	bhi.w	8011eb0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d108      	bne.n	8011d2c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d1c:	f004 fc2e 	bl	801657c <tcp_zero_window_probe>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d014      	beq.n	8011d50 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011d26:	2300      	movs	r3, #0
 8011d28:	623b      	str	r3, [r7, #32]
 8011d2a:	e011      	b.n	8011d50 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d32:	4619      	mov	r1, r3
 8011d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d36:	f003 fae5 	bl	8015304 <tcp_split_unsent_seg>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d107      	bne.n	8011d50 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d42:	f003 fd65 	bl	8015810 <tcp_output>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011d50:	6a3b      	ldr	r3, [r7, #32]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80ac 	beq.w	8011eb0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d66:	2b06      	cmp	r3, #6
 8011d68:	f200 80a2 	bhi.w	8011eb0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d72:	3301      	adds	r3, #1
 8011d74:	b2da      	uxtb	r2, r3
 8011d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011d7c:	e098      	b.n	8011eb0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	db0f      	blt.n	8011da8 <tcp_slowtmr+0x1f0>
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d008      	beq.n	8011da8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	3301      	adds	r3, #1
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	b21a      	sxth	r2, r3
 8011da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011daa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011db4:	429a      	cmp	r2, r3
 8011db6:	db7b      	blt.n	8011eb0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dba:	f004 f821 	bl	8015e00 <tcp_rexmit_rto_prepare>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d007      	beq.n	8011dd4 <tcp_slowtmr+0x21c>
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d171      	bne.n	8011eb0 <tcp_slowtmr+0x2f8>
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d06d      	beq.n	8011eb0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d03a      	beq.n	8011e52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011de2:	2b0c      	cmp	r3, #12
 8011de4:	bf28      	it	cs
 8011de6:	230c      	movcs	r3, #12
 8011de8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011df0:	10db      	asrs	r3, r3, #3
 8011df2:	b21b      	sxth	r3, r3
 8011df4:	461a      	mov	r2, r3
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011dfc:	4413      	add	r3, r2
 8011dfe:	7efa      	ldrb	r2, [r7, #27]
 8011e00:	4910      	ldr	r1, [pc, #64]	; (8011e44 <tcp_slowtmr+0x28c>)
 8011e02:	5c8a      	ldrb	r2, [r1, r2]
 8011e04:	4093      	lsls	r3, r2
 8011e06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	dc1a      	bgt.n	8011e48 <tcp_slowtmr+0x290>
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	b21a      	sxth	r2, r3
 8011e16:	e019      	b.n	8011e4c <tcp_slowtmr+0x294>
 8011e18:	200082c8 	.word	0x200082c8
 8011e1c:	20001036 	.word	0x20001036
 8011e20:	200082c4 	.word	0x200082c4
 8011e24:	080220e4 	.word	0x080220e4
 8011e28:	08022428 	.word	0x08022428
 8011e2c:	08022128 	.word	0x08022128
 8011e30:	08022454 	.word	0x08022454
 8011e34:	08022480 	.word	0x08022480
 8011e38:	080224b0 	.word	0x080224b0
 8011e3c:	080224e4 	.word	0x080224e4
 8011e40:	080249b0 	.word	0x080249b0
 8011e44:	080249a0 	.word	0x080249a0
 8011e48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e54:	2200      	movs	r2, #0
 8011e56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e64:	4293      	cmp	r3, r2
 8011e66:	bf28      	it	cs
 8011e68:	4613      	movcs	r3, r2
 8011e6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011e6c:	8a7b      	ldrh	r3, [r7, #18]
 8011e6e:	085b      	lsrs	r3, r3, #1
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d206      	bcs.n	8011e98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e8e:	005b      	lsls	r3, r3, #1
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011eac:	f004 f818 	bl	8015ee0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	7d1b      	ldrb	r3, [r3, #20]
 8011eb4:	2b06      	cmp	r3, #6
 8011eb6:	d111      	bne.n	8011edc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eba:	8b5b      	ldrh	r3, [r3, #26]
 8011ebc:	f003 0310 	and.w	r3, r3, #16
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00b      	beq.n	8011edc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ec4:	4b9d      	ldr	r3, [pc, #628]	; (801213c <tcp_slowtmr+0x584>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eca:	6a1b      	ldr	r3, [r3, #32]
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	2b28      	cmp	r3, #40	; 0x28
 8011ed0:	d904      	bls.n	8011edc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ede:	7a5b      	ldrb	r3, [r3, #9]
 8011ee0:	f003 0308 	and.w	r3, r3, #8
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d04c      	beq.n	8011f82 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	d003      	beq.n	8011ef8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011ef4:	2b07      	cmp	r3, #7
 8011ef6:	d144      	bne.n	8011f82 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ef8:	4b90      	ldr	r3, [pc, #576]	; (801213c <tcp_slowtmr+0x584>)
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	6a1b      	ldr	r3, [r3, #32]
 8011f00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f08:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011f0c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011f10:	498b      	ldr	r1, [pc, #556]	; (8012140 <tcp_slowtmr+0x588>)
 8011f12:	fba1 1303 	umull	r1, r3, r1, r3
 8011f16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d90a      	bls.n	8011f32 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f20:	3301      	adds	r3, #1
 8011f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f30:	e027      	b.n	8011f82 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f32:	4b82      	ldr	r3, [pc, #520]	; (801213c <tcp_slowtmr+0x584>)
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	6a1b      	ldr	r3, [r3, #32]
 8011f3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f48:	4618      	mov	r0, r3
 8011f4a:	4b7e      	ldr	r3, [pc, #504]	; (8012144 <tcp_slowtmr+0x58c>)
 8011f4c:	fb03 f300 	mul.w	r3, r3, r0
 8011f50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011f52:	497b      	ldr	r1, [pc, #492]	; (8012140 <tcp_slowtmr+0x588>)
 8011f54:	fba1 1303 	umull	r1, r3, r1, r3
 8011f58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d911      	bls.n	8011f82 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011f5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f60:	f004 facc 	bl	80164fc <tcp_keepalive>
 8011f64:	4603      	mov	r3, r0
 8011f66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011f6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d107      	bne.n	8011f82 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f78:	3301      	adds	r3, #1
 8011f7a:	b2da      	uxtb	r2, r3
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d011      	beq.n	8011fae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011f8a:	4b6c      	ldr	r3, [pc, #432]	; (801213c <tcp_slowtmr+0x584>)
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f90:	6a1b      	ldr	r3, [r3, #32]
 8011f92:	1ad2      	subs	r2, r2, r3
 8011f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	005b      	lsls	r3, r3, #1
 8011fa0:	440b      	add	r3, r1
 8011fa2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d302      	bcc.n	8011fae <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011faa:	f000 fdd7 	bl	8012b5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb0:	7d1b      	ldrb	r3, [r3, #20]
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d10b      	bne.n	8011fce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011fb6:	4b61      	ldr	r3, [pc, #388]	; (801213c <tcp_slowtmr+0x584>)
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	6a1b      	ldr	r3, [r3, #32]
 8011fbe:	1ad3      	subs	r3, r2, r3
 8011fc0:	2b28      	cmp	r3, #40	; 0x28
 8011fc2:	d904      	bls.n	8011fce <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fc8:	3301      	adds	r3, #1
 8011fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd0:	7d1b      	ldrb	r3, [r3, #20]
 8011fd2:	2b09      	cmp	r3, #9
 8011fd4:	d10b      	bne.n	8011fee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011fd6:	4b59      	ldr	r3, [pc, #356]	; (801213c <tcp_slowtmr+0x584>)
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fdc:	6a1b      	ldr	r3, [r3, #32]
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	2bf0      	cmp	r3, #240	; 0xf0
 8011fe2:	d904      	bls.n	8011fee <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe8:	3301      	adds	r3, #1
 8011fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d060      	beq.n	80120b8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ffc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012000:	f000 fbf8 	bl	80127f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012006:	2b00      	cmp	r3, #0
 8012008:	d010      	beq.n	801202c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801200a:	4b4f      	ldr	r3, [pc, #316]	; (8012148 <tcp_slowtmr+0x590>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012010:	429a      	cmp	r2, r3
 8012012:	d106      	bne.n	8012022 <tcp_slowtmr+0x46a>
 8012014:	4b4d      	ldr	r3, [pc, #308]	; (801214c <tcp_slowtmr+0x594>)
 8012016:	f240 526d 	movw	r2, #1389	; 0x56d
 801201a:	494d      	ldr	r1, [pc, #308]	; (8012150 <tcp_slowtmr+0x598>)
 801201c:	484d      	ldr	r0, [pc, #308]	; (8012154 <tcp_slowtmr+0x59c>)
 801201e:	f009 ffff 	bl	801c020 <iprintf>
        prev->next = pcb->next;
 8012022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012024:	68da      	ldr	r2, [r3, #12]
 8012026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012028:	60da      	str	r2, [r3, #12]
 801202a:	e00f      	b.n	801204c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801202c:	4b46      	ldr	r3, [pc, #280]	; (8012148 <tcp_slowtmr+0x590>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012032:	429a      	cmp	r2, r3
 8012034:	d006      	beq.n	8012044 <tcp_slowtmr+0x48c>
 8012036:	4b45      	ldr	r3, [pc, #276]	; (801214c <tcp_slowtmr+0x594>)
 8012038:	f240 5271 	movw	r2, #1393	; 0x571
 801203c:	4946      	ldr	r1, [pc, #280]	; (8012158 <tcp_slowtmr+0x5a0>)
 801203e:	4845      	ldr	r0, [pc, #276]	; (8012154 <tcp_slowtmr+0x59c>)
 8012040:	f009 ffee 	bl	801c020 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	4a3f      	ldr	r2, [pc, #252]	; (8012148 <tcp_slowtmr+0x590>)
 801204a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801204c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012050:	2b00      	cmp	r3, #0
 8012052:	d013      	beq.n	801207c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012056:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801205c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012060:	3304      	adds	r3, #4
 8012062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012064:	8ad2      	ldrh	r2, [r2, #22]
 8012066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012068:	8b09      	ldrh	r1, [r1, #24]
 801206a:	9102      	str	r1, [sp, #8]
 801206c:	9201      	str	r2, [sp, #4]
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	462b      	mov	r3, r5
 8012072:	4622      	mov	r2, r4
 8012074:	4601      	mov	r1, r0
 8012076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012078:	f004 f98e 	bl	8016398 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	691b      	ldr	r3, [r3, #16]
 8012080:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012084:	7d1b      	ldrb	r3, [r3, #20]
 8012086:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012092:	6838      	ldr	r0, [r7, #0]
 8012094:	f7ff f9fa 	bl	801148c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012098:	4b30      	ldr	r3, [pc, #192]	; (801215c <tcp_slowtmr+0x5a4>)
 801209a:	2200      	movs	r2, #0
 801209c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d004      	beq.n	80120ae <tcp_slowtmr+0x4f6>
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f06f 010c 	mvn.w	r1, #12
 80120aa:	68b8      	ldr	r0, [r7, #8]
 80120ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80120ae:	4b2b      	ldr	r3, [pc, #172]	; (801215c <tcp_slowtmr+0x5a4>)
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d037      	beq.n	8012126 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80120b6:	e590      	b.n	8011bda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80120b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80120c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c4:	7f1b      	ldrb	r3, [r3, #28]
 80120c6:	3301      	adds	r3, #1
 80120c8:	b2da      	uxtb	r2, r3
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	7f1a      	ldrb	r2, [r3, #28]
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	7f5b      	ldrb	r3, [r3, #29]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d325      	bcc.n	8012126 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	2200      	movs	r2, #0
 80120de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80120e0:	4b1e      	ldr	r3, [pc, #120]	; (801215c <tcp_slowtmr+0x5a4>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80120e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <tcp_slowtmr+0x550>
 80120f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120f8:	6912      	ldr	r2, [r2, #16]
 80120fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120fc:	4610      	mov	r0, r2
 80120fe:	4798      	blx	r3
 8012100:	4603      	mov	r3, r0
 8012102:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012106:	e002      	b.n	801210e <tcp_slowtmr+0x556>
 8012108:	2300      	movs	r3, #0
 801210a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801210e:	4b13      	ldr	r3, [pc, #76]	; (801215c <tcp_slowtmr+0x5a4>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d000      	beq.n	8012118 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012116:	e560      	b.n	8011bda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012118:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801211c:	2b00      	cmp	r3, #0
 801211e:	d102      	bne.n	8012126 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012122:	f003 fb75 	bl	8015810 <tcp_output>
  while (pcb != NULL) {
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	2b00      	cmp	r3, #0
 801212a:	f47f ad5c 	bne.w	8011be6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012132:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <tcp_slowtmr+0x5a8>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012138:	e067      	b.n	801220a <tcp_slowtmr+0x652>
 801213a:	bf00      	nop
 801213c:	200082c8 	.word	0x200082c8
 8012140:	10624dd3 	.word	0x10624dd3
 8012144:	000124f8 	.word	0x000124f8
 8012148:	200082c4 	.word	0x200082c4
 801214c:	080220e4 	.word	0x080220e4
 8012150:	0802251c 	.word	0x0802251c
 8012154:	08022128 	.word	0x08022128
 8012158:	08022548 	.word	0x08022548
 801215c:	200082c0 	.word	0x200082c0
 8012160:	200082d4 	.word	0x200082d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	2b0a      	cmp	r3, #10
 801216a:	d006      	beq.n	801217a <tcp_slowtmr+0x5c2>
 801216c:	4b2a      	ldr	r3, [pc, #168]	; (8012218 <tcp_slowtmr+0x660>)
 801216e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012172:	492a      	ldr	r1, [pc, #168]	; (801221c <tcp_slowtmr+0x664>)
 8012174:	482a      	ldr	r0, [pc, #168]	; (8012220 <tcp_slowtmr+0x668>)
 8012176:	f009 ff53 	bl	801c020 <iprintf>
    pcb_remove = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012180:	4b28      	ldr	r3, [pc, #160]	; (8012224 <tcp_slowtmr+0x66c>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012186:	6a1b      	ldr	r3, [r3, #32]
 8012188:	1ad3      	subs	r3, r2, r3
 801218a:	2bf0      	cmp	r3, #240	; 0xf0
 801218c:	d904      	bls.n	8012198 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801218e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012192:	3301      	adds	r3, #1
 8012194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801219c:	2b00      	cmp	r3, #0
 801219e:	d02f      	beq.n	8012200 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80121a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121a2:	f000 fb27 	bl	80127f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80121a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d010      	beq.n	80121ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80121ac:	4b1e      	ldr	r3, [pc, #120]	; (8012228 <tcp_slowtmr+0x670>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d106      	bne.n	80121c4 <tcp_slowtmr+0x60c>
 80121b6:	4b18      	ldr	r3, [pc, #96]	; (8012218 <tcp_slowtmr+0x660>)
 80121b8:	f240 52af 	movw	r2, #1455	; 0x5af
 80121bc:	491b      	ldr	r1, [pc, #108]	; (801222c <tcp_slowtmr+0x674>)
 80121be:	4818      	ldr	r0, [pc, #96]	; (8012220 <tcp_slowtmr+0x668>)
 80121c0:	f009 ff2e 	bl	801c020 <iprintf>
        prev->next = pcb->next;
 80121c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c6:	68da      	ldr	r2, [r3, #12]
 80121c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ca:	60da      	str	r2, [r3, #12]
 80121cc:	e00f      	b.n	80121ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80121ce:	4b16      	ldr	r3, [pc, #88]	; (8012228 <tcp_slowtmr+0x670>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d006      	beq.n	80121e6 <tcp_slowtmr+0x62e>
 80121d8:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <tcp_slowtmr+0x660>)
 80121da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80121de:	4914      	ldr	r1, [pc, #80]	; (8012230 <tcp_slowtmr+0x678>)
 80121e0:	480f      	ldr	r0, [pc, #60]	; (8012220 <tcp_slowtmr+0x668>)
 80121e2:	f009 ff1d 	bl	801c020 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80121e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	4a0f      	ldr	r2, [pc, #60]	; (8012228 <tcp_slowtmr+0x670>)
 80121ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80121ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80121f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80121f8:	69f8      	ldr	r0, [r7, #28]
 80121fa:	f7ff f947 	bl	801148c <tcp_free>
 80121fe:	e004      	b.n	801220a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1a9      	bne.n	8012164 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012210:	bf00      	nop
 8012212:	3730      	adds	r7, #48	; 0x30
 8012214:	46bd      	mov	sp, r7
 8012216:	bdb0      	pop	{r4, r5, r7, pc}
 8012218:	080220e4 	.word	0x080220e4
 801221c:	08022574 	.word	0x08022574
 8012220:	08022128 	.word	0x08022128
 8012224:	200082c8 	.word	0x200082c8
 8012228:	200082d4 	.word	0x200082d4
 801222c:	080225a4 	.word	0x080225a4
 8012230:	080225cc 	.word	0x080225cc

08012234 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801223a:	4b2d      	ldr	r3, [pc, #180]	; (80122f0 <tcp_fasttmr+0xbc>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	3301      	adds	r3, #1
 8012240:	b2da      	uxtb	r2, r3
 8012242:	4b2b      	ldr	r3, [pc, #172]	; (80122f0 <tcp_fasttmr+0xbc>)
 8012244:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012246:	4b2b      	ldr	r3, [pc, #172]	; (80122f4 <tcp_fasttmr+0xc0>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801224c:	e048      	b.n	80122e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	7f9a      	ldrb	r2, [r3, #30]
 8012252:	4b27      	ldr	r3, [pc, #156]	; (80122f0 <tcp_fasttmr+0xbc>)
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	429a      	cmp	r2, r3
 8012258:	d03f      	beq.n	80122da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801225a:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <tcp_fasttmr+0xbc>)
 801225c:	781a      	ldrb	r2, [r3, #0]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	8b5b      	ldrh	r3, [r3, #26]
 8012266:	f003 0301 	and.w	r3, r3, #1
 801226a:	2b00      	cmp	r3, #0
 801226c:	d010      	beq.n	8012290 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	8b5b      	ldrh	r3, [r3, #26]
 8012272:	f043 0302 	orr.w	r3, r3, #2
 8012276:	b29a      	uxth	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f003 fac7 	bl	8015810 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8b5b      	ldrh	r3, [r3, #26]
 8012286:	f023 0303 	bic.w	r3, r3, #3
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	8b5b      	ldrh	r3, [r3, #26]
 8012294:	f003 0308 	and.w	r3, r3, #8
 8012298:	2b00      	cmp	r3, #0
 801229a:	d009      	beq.n	80122b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	8b5b      	ldrh	r3, [r3, #26]
 80122a0:	f023 0308 	bic.w	r3, r3, #8
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7ff fa7e 	bl	80117ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00a      	beq.n	80122d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80122be:	4b0e      	ldr	r3, [pc, #56]	; (80122f8 <tcp_fasttmr+0xc4>)
 80122c0:	2200      	movs	r2, #0
 80122c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 f819 	bl	80122fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80122ca:	4b0b      	ldr	r3, [pc, #44]	; (80122f8 <tcp_fasttmr+0xc4>)
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d000      	beq.n	80122d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80122d2:	e7b8      	b.n	8012246 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	607b      	str	r3, [r7, #4]
 80122d8:	e002      	b.n	80122e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1b3      	bne.n	801224e <tcp_fasttmr+0x1a>
    }
  }
}
 80122e6:	bf00      	nop
 80122e8:	3708      	adds	r7, #8
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	20001036 	.word	0x20001036
 80122f4:	200082c4 	.word	0x200082c4
 80122f8:	200082c0 	.word	0x200082c0

080122fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80122fc:	b590      	push	{r4, r7, lr}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d109      	bne.n	801231e <tcp_process_refused_data+0x22>
 801230a:	4b37      	ldr	r3, [pc, #220]	; (80123e8 <tcp_process_refused_data+0xec>)
 801230c:	f240 6209 	movw	r2, #1545	; 0x609
 8012310:	4936      	ldr	r1, [pc, #216]	; (80123ec <tcp_process_refused_data+0xf0>)
 8012312:	4837      	ldr	r0, [pc, #220]	; (80123f0 <tcp_process_refused_data+0xf4>)
 8012314:	f009 fe84 	bl	801c020 <iprintf>
 8012318:	f06f 030f 	mvn.w	r3, #15
 801231c:	e060      	b.n	80123e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012322:	7b5b      	ldrb	r3, [r3, #13]
 8012324:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801232a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2200      	movs	r2, #0
 8012330:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012338:	2b00      	cmp	r3, #0
 801233a:	d00b      	beq.n	8012354 <tcp_process_refused_data+0x58>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6918      	ldr	r0, [r3, #16]
 8012346:	2300      	movs	r3, #0
 8012348:	68ba      	ldr	r2, [r7, #8]
 801234a:	6879      	ldr	r1, [r7, #4]
 801234c:	47a0      	blx	r4
 801234e:	4603      	mov	r3, r0
 8012350:	73fb      	strb	r3, [r7, #15]
 8012352:	e007      	b.n	8012364 <tcp_process_refused_data+0x68>
 8012354:	2300      	movs	r3, #0
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	6879      	ldr	r1, [r7, #4]
 801235a:	2000      	movs	r0, #0
 801235c:	f000 f8a2 	bl	80124a4 <tcp_recv_null>
 8012360:	4603      	mov	r3, r0
 8012362:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d12a      	bne.n	80123c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801236c:	7bbb      	ldrb	r3, [r7, #14]
 801236e:	f003 0320 	and.w	r3, r3, #32
 8012372:	2b00      	cmp	r3, #0
 8012374:	d033      	beq.n	80123de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801237a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801237e:	d005      	beq.n	801238c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012384:	3301      	adds	r3, #1
 8012386:	b29a      	uxth	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00b      	beq.n	80123ae <tcp_process_refused_data+0xb2>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6918      	ldr	r0, [r3, #16]
 80123a0:	2300      	movs	r3, #0
 80123a2:	2200      	movs	r2, #0
 80123a4:	6879      	ldr	r1, [r7, #4]
 80123a6:	47a0      	blx	r4
 80123a8:	4603      	mov	r3, r0
 80123aa:	73fb      	strb	r3, [r7, #15]
 80123ac:	e001      	b.n	80123b2 <tcp_process_refused_data+0xb6>
 80123ae:	2300      	movs	r3, #0
 80123b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80123b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123b6:	f113 0f0d 	cmn.w	r3, #13
 80123ba:	d110      	bne.n	80123de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80123bc:	f06f 030c 	mvn.w	r3, #12
 80123c0:	e00e      	b.n	80123e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80123c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123c6:	f113 0f0d 	cmn.w	r3, #13
 80123ca:	d102      	bne.n	80123d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80123cc:	f06f 030c 	mvn.w	r3, #12
 80123d0:	e006      	b.n	80123e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	68ba      	ldr	r2, [r7, #8]
 80123d6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80123d8:	f06f 0304 	mvn.w	r3, #4
 80123dc:	e000      	b.n	80123e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd90      	pop	{r4, r7, pc}
 80123e8:	080220e4 	.word	0x080220e4
 80123ec:	080225f4 	.word	0x080225f4
 80123f0:	08022128 	.word	0x08022128

080123f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80123fc:	e007      	b.n	801240e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 f809 	bl	801241c <tcp_seg_free>
    seg = next;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d1f4      	bne.n	80123fe <tcp_segs_free+0xa>
  }
}
 8012414:	bf00      	nop
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00c      	beq.n	8012444 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d004      	beq.n	801243c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f7fe fd78 	bl	8010f2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	2003      	movs	r0, #3
 8012440:	f7fd ff7e 	bl	8010340 <memp_free>
  }
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d106      	bne.n	8012468 <tcp_seg_copy+0x1c>
 801245a:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <tcp_seg_copy+0x4c>)
 801245c:	f240 6282 	movw	r2, #1666	; 0x682
 8012460:	490e      	ldr	r1, [pc, #56]	; (801249c <tcp_seg_copy+0x50>)
 8012462:	480f      	ldr	r0, [pc, #60]	; (80124a0 <tcp_seg_copy+0x54>)
 8012464:	f009 fddc 	bl	801c020 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012468:	2003      	movs	r0, #3
 801246a:	f7fd ff1d 	bl	80102a8 <memp_malloc>
 801246e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <tcp_seg_copy+0x2e>
    return NULL;
 8012476:	2300      	movs	r3, #0
 8012478:	e00a      	b.n	8012490 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801247a:	2210      	movs	r2, #16
 801247c:	6879      	ldr	r1, [r7, #4]
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f009 f89d 	bl	801b5be <memcpy>
  pbuf_ref(cseg->p);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	4618      	mov	r0, r3
 801248a:	f7fe fdef 	bl	801106c <pbuf_ref>
  return cseg;
 801248e:	68fb      	ldr	r3, [r7, #12]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	080220e4 	.word	0x080220e4
 801249c:	08022638 	.word	0x08022638
 80124a0:	08022128 	.word	0x08022128

080124a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	607a      	str	r2, [r7, #4]
 80124b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d109      	bne.n	80124cc <tcp_recv_null+0x28>
 80124b8:	4b12      	ldr	r3, [pc, #72]	; (8012504 <tcp_recv_null+0x60>)
 80124ba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80124be:	4912      	ldr	r1, [pc, #72]	; (8012508 <tcp_recv_null+0x64>)
 80124c0:	4812      	ldr	r0, [pc, #72]	; (801250c <tcp_recv_null+0x68>)
 80124c2:	f009 fdad 	bl	801c020 <iprintf>
 80124c6:	f06f 030f 	mvn.w	r3, #15
 80124ca:	e016      	b.n	80124fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d009      	beq.n	80124e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	891b      	ldrh	r3, [r3, #8]
 80124d6:	4619      	mov	r1, r3
 80124d8:	68b8      	ldr	r0, [r7, #8]
 80124da:	f7ff fb1d 	bl	8011b18 <tcp_recved>
    pbuf_free(p);
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f7fe fd24 	bl	8010f2c <pbuf_free>
 80124e4:	e008      	b.n	80124f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80124e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d104      	bne.n	80124f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80124ee:	68b8      	ldr	r0, [r7, #8]
 80124f0:	f7ff f9c2 	bl	8011878 <tcp_close>
 80124f4:	4603      	mov	r3, r0
 80124f6:	e000      	b.n	80124fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80124f8:	2300      	movs	r3, #0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
 8012502:	bf00      	nop
 8012504:	080220e4 	.word	0x080220e4
 8012508:	08022654 	.word	0x08022654
 801250c:	08022128 	.word	0x08022128

08012510 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801251e:	2b00      	cmp	r3, #0
 8012520:	db01      	blt.n	8012526 <tcp_kill_prio+0x16>
 8012522:	79fb      	ldrb	r3, [r7, #7]
 8012524:	e000      	b.n	8012528 <tcp_kill_prio+0x18>
 8012526:	237f      	movs	r3, #127	; 0x7f
 8012528:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801252a:	7afb      	ldrb	r3, [r7, #11]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d034      	beq.n	801259a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012530:	7afb      	ldrb	r3, [r7, #11]
 8012532:	3b01      	subs	r3, #1
 8012534:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801253a:	2300      	movs	r3, #0
 801253c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801253e:	4b19      	ldr	r3, [pc, #100]	; (80125a4 <tcp_kill_prio+0x94>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	617b      	str	r3, [r7, #20]
 8012544:	e01f      	b.n	8012586 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	7d5b      	ldrb	r3, [r3, #21]
 801254a:	7afa      	ldrb	r2, [r7, #11]
 801254c:	429a      	cmp	r2, r3
 801254e:	d80c      	bhi.n	801256a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012554:	7afa      	ldrb	r2, [r7, #11]
 8012556:	429a      	cmp	r2, r3
 8012558:	d112      	bne.n	8012580 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801255a:	4b13      	ldr	r3, [pc, #76]	; (80125a8 <tcp_kill_prio+0x98>)
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	1ad3      	subs	r3, r2, r3
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	429a      	cmp	r2, r3
 8012568:	d80a      	bhi.n	8012580 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801256a:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <tcp_kill_prio+0x98>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	6a1b      	ldr	r3, [r3, #32]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	7d5b      	ldrb	r3, [r3, #21]
 801257e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	617b      	str	r3, [r7, #20]
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1dc      	bne.n	8012546 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d004      	beq.n	801259c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012592:	6938      	ldr	r0, [r7, #16]
 8012594:	f7ff fa5a 	bl	8011a4c <tcp_abort>
 8012598:	e000      	b.n	801259c <tcp_kill_prio+0x8c>
    return;
 801259a:	bf00      	nop
  }
}
 801259c:	3718      	adds	r7, #24
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	200082c4 	.word	0x200082c4
 80125a8:	200082c8 	.word	0x200082c8

080125ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b086      	sub	sp, #24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	4603      	mov	r3, r0
 80125b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80125b6:	79fb      	ldrb	r3, [r7, #7]
 80125b8:	2b08      	cmp	r3, #8
 80125ba:	d009      	beq.n	80125d0 <tcp_kill_state+0x24>
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	2b09      	cmp	r3, #9
 80125c0:	d006      	beq.n	80125d0 <tcp_kill_state+0x24>
 80125c2:	4b1a      	ldr	r3, [pc, #104]	; (801262c <tcp_kill_state+0x80>)
 80125c4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80125c8:	4919      	ldr	r1, [pc, #100]	; (8012630 <tcp_kill_state+0x84>)
 80125ca:	481a      	ldr	r0, [pc, #104]	; (8012634 <tcp_kill_state+0x88>)
 80125cc:	f009 fd28 	bl	801c020 <iprintf>

  inactivity = 0;
 80125d0:	2300      	movs	r3, #0
 80125d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80125d4:	2300      	movs	r3, #0
 80125d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125d8:	4b17      	ldr	r3, [pc, #92]	; (8012638 <tcp_kill_state+0x8c>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	617b      	str	r3, [r7, #20]
 80125de:	e017      	b.n	8012610 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	7d1b      	ldrb	r3, [r3, #20]
 80125e4:	79fa      	ldrb	r2, [r7, #7]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d10f      	bne.n	801260a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80125ea:	4b14      	ldr	r3, [pc, #80]	; (801263c <tcp_kill_state+0x90>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	6a1b      	ldr	r3, [r3, #32]
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d807      	bhi.n	801260a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80125fa:	4b10      	ldr	r3, [pc, #64]	; (801263c <tcp_kill_state+0x90>)
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	6a1b      	ldr	r3, [r3, #32]
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	617b      	str	r3, [r7, #20]
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1e4      	bne.n	80125e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d003      	beq.n	8012624 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801261c:	2100      	movs	r1, #0
 801261e:	6938      	ldr	r0, [r7, #16]
 8012620:	f7ff f956 	bl	80118d0 <tcp_abandon>
  }
}
 8012624:	bf00      	nop
 8012626:	3718      	adds	r7, #24
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	080220e4 	.word	0x080220e4
 8012630:	08022670 	.word	0x08022670
 8012634:	08022128 	.word	0x08022128
 8012638:	200082c4 	.word	0x200082c4
 801263c:	200082c8 	.word	0x200082c8

08012640 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012646:	2300      	movs	r3, #0
 8012648:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801264e:	4b12      	ldr	r3, [pc, #72]	; (8012698 <tcp_kill_timewait+0x58>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]
 8012654:	e012      	b.n	801267c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012656:	4b11      	ldr	r3, [pc, #68]	; (801269c <tcp_kill_timewait+0x5c>)
 8012658:	681a      	ldr	r2, [r3, #0]
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	1ad3      	subs	r3, r2, r3
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	429a      	cmp	r2, r3
 8012664:	d807      	bhi.n	8012676 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012666:	4b0d      	ldr	r3, [pc, #52]	; (801269c <tcp_kill_timewait+0x5c>)
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	6a1b      	ldr	r3, [r3, #32]
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	60fb      	str	r3, [r7, #12]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1e9      	bne.n	8012656 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d002      	beq.n	801268e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012688:	68b8      	ldr	r0, [r7, #8]
 801268a:	f7ff f9df 	bl	8011a4c <tcp_abort>
  }
}
 801268e:	bf00      	nop
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	200082d4 	.word	0x200082d4
 801269c:	200082c8 	.word	0x200082c8

080126a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80126a6:	4b10      	ldr	r3, [pc, #64]	; (80126e8 <tcp_handle_closepend+0x48>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80126ac:	e014      	b.n	80126d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	8b5b      	ldrh	r3, [r3, #26]
 80126b8:	f003 0308 	and.w	r3, r3, #8
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d009      	beq.n	80126d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	8b5b      	ldrh	r3, [r3, #26]
 80126c4:	f023 0308 	bic.w	r3, r3, #8
 80126c8:	b29a      	uxth	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ff f86c 	bl	80117ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d1e7      	bne.n	80126ae <tcp_handle_closepend+0xe>
  }
}
 80126de:	bf00      	nop
 80126e0:	3708      	adds	r7, #8
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	bf00      	nop
 80126e8:	200082c4 	.word	0x200082c4

080126ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	4603      	mov	r3, r0
 80126f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126f6:	2001      	movs	r0, #1
 80126f8:	f7fd fdd6 	bl	80102a8 <memp_malloc>
 80126fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d126      	bne.n	8012752 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012704:	f7ff ffcc 	bl	80126a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012708:	f7ff ff9a 	bl	8012640 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801270c:	2001      	movs	r0, #1
 801270e:	f7fd fdcb 	bl	80102a8 <memp_malloc>
 8012712:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d11b      	bne.n	8012752 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801271a:	2009      	movs	r0, #9
 801271c:	f7ff ff46 	bl	80125ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012720:	2001      	movs	r0, #1
 8012722:	f7fd fdc1 	bl	80102a8 <memp_malloc>
 8012726:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d111      	bne.n	8012752 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801272e:	2008      	movs	r0, #8
 8012730:	f7ff ff3c 	bl	80125ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012734:	2001      	movs	r0, #1
 8012736:	f7fd fdb7 	bl	80102a8 <memp_malloc>
 801273a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d107      	bne.n	8012752 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fee3 	bl	8012510 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801274a:	2001      	movs	r0, #1
 801274c:	f7fd fdac 	bl	80102a8 <memp_malloc>
 8012750:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d03f      	beq.n	80127d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012758:	229c      	movs	r2, #156	; 0x9c
 801275a:	2100      	movs	r1, #0
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f008 ff52 	bl	801b606 <memset>
    pcb->prio = prio;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	79fa      	ldrb	r2, [r7, #7]
 8012766:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801276e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012778:	855a      	strh	r2, [r3, #42]	; 0x2a
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	22ff      	movs	r2, #255	; 0xff
 8012786:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801278e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2206      	movs	r2, #6
 8012794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2206      	movs	r2, #6
 801279c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127a4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2201      	movs	r2, #1
 80127aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80127ae:	4b0d      	ldr	r3, [pc, #52]	; (80127e4 <tcp_alloc+0xf8>)
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80127b6:	4b0c      	ldr	r3, [pc, #48]	; (80127e8 <tcp_alloc+0xfc>)
 80127b8:	781a      	ldrb	r2, [r3, #0]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 80127c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	4a08      	ldr	r2, [pc, #32]	; (80127ec <tcp_alloc+0x100>)
 80127cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	4a07      	ldr	r2, [pc, #28]	; (80127f0 <tcp_alloc+0x104>)
 80127d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80127d8:	68fb      	ldr	r3, [r7, #12]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	200082c8 	.word	0x200082c8
 80127e8:	20001036 	.word	0x20001036
 80127ec:	080124a5 	.word	0x080124a5
 80127f0:	006ddd00 	.word	0x006ddd00

080127f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d107      	bne.n	8012812 <tcp_pcb_purge+0x1e>
 8012802:	4b21      	ldr	r3, [pc, #132]	; (8012888 <tcp_pcb_purge+0x94>)
 8012804:	f640 0251 	movw	r2, #2129	; 0x851
 8012808:	4920      	ldr	r1, [pc, #128]	; (801288c <tcp_pcb_purge+0x98>)
 801280a:	4821      	ldr	r0, [pc, #132]	; (8012890 <tcp_pcb_purge+0x9c>)
 801280c:	f009 fc08 	bl	801c020 <iprintf>
 8012810:	e037      	b.n	8012882 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	7d1b      	ldrb	r3, [r3, #20]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d033      	beq.n	8012882 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801281e:	2b0a      	cmp	r3, #10
 8012820:	d02f      	beq.n	8012882 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012826:	2b01      	cmp	r3, #1
 8012828:	d02b      	beq.n	8012882 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801282e:	2b00      	cmp	r3, #0
 8012830:	d007      	beq.n	8012842 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012836:	4618      	mov	r0, r3
 8012838:	f7fe fb78 	bl	8010f2c <pbuf_free>
      pcb->refused_data = NULL;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012846:	2b00      	cmp	r3, #0
 8012848:	d002      	beq.n	8012850 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f986 	bl	8012b5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012856:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff fdc9 	bl	80123f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff fdc4 	bl	80123f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	66da      	str	r2, [r3, #108]	; 0x6c
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	080220e4 	.word	0x080220e4
 801288c:	08022730 	.word	0x08022730
 8012890:	08022128 	.word	0x08022128

08012894 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d106      	bne.n	80128b2 <tcp_pcb_remove+0x1e>
 80128a4:	4b3e      	ldr	r3, [pc, #248]	; (80129a0 <tcp_pcb_remove+0x10c>)
 80128a6:	f640 0283 	movw	r2, #2179	; 0x883
 80128aa:	493e      	ldr	r1, [pc, #248]	; (80129a4 <tcp_pcb_remove+0x110>)
 80128ac:	483e      	ldr	r0, [pc, #248]	; (80129a8 <tcp_pcb_remove+0x114>)
 80128ae:	f009 fbb7 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d106      	bne.n	80128c6 <tcp_pcb_remove+0x32>
 80128b8:	4b39      	ldr	r3, [pc, #228]	; (80129a0 <tcp_pcb_remove+0x10c>)
 80128ba:	f640 0284 	movw	r2, #2180	; 0x884
 80128be:	493b      	ldr	r1, [pc, #236]	; (80129ac <tcp_pcb_remove+0x118>)
 80128c0:	4839      	ldr	r0, [pc, #228]	; (80129a8 <tcp_pcb_remove+0x114>)
 80128c2:	f009 fbad 	bl	801c020 <iprintf>

  TCP_RMV(pcblist, pcb);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	683a      	ldr	r2, [r7, #0]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d105      	bne.n	80128dc <tcp_pcb_remove+0x48>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	68da      	ldr	r2, [r3, #12]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	e013      	b.n	8012904 <tcp_pcb_remove+0x70>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	60fb      	str	r3, [r7, #12]
 80128e2:	e00c      	b.n	80128fe <tcp_pcb_remove+0x6a>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	683a      	ldr	r2, [r7, #0]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d104      	bne.n	80128f8 <tcp_pcb_remove+0x64>
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	68da      	ldr	r2, [r3, #12]
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	60da      	str	r2, [r3, #12]
 80128f6:	e005      	b.n	8012904 <tcp_pcb_remove+0x70>
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	60fb      	str	r3, [r7, #12]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d1ef      	bne.n	80128e4 <tcp_pcb_remove+0x50>
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	2200      	movs	r2, #0
 8012908:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801290a:	6838      	ldr	r0, [r7, #0]
 801290c:	f7ff ff72 	bl	80127f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	2b0a      	cmp	r3, #10
 8012916:	d013      	beq.n	8012940 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801291c:	2b01      	cmp	r3, #1
 801291e:	d00f      	beq.n	8012940 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	8b5b      	ldrh	r3, [r3, #26]
 8012924:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012928:	2b00      	cmp	r3, #0
 801292a:	d009      	beq.n	8012940 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	8b5b      	ldrh	r3, [r3, #26]
 8012930:	f043 0302 	orr.w	r3, r3, #2
 8012934:	b29a      	uxth	r2, r3
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801293a:	6838      	ldr	r0, [r7, #0]
 801293c:	f002 ff68 	bl	8015810 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	7d1b      	ldrb	r3, [r3, #20]
 8012944:	2b01      	cmp	r3, #1
 8012946:	d020      	beq.n	801298a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801294c:	2b00      	cmp	r3, #0
 801294e:	d006      	beq.n	801295e <tcp_pcb_remove+0xca>
 8012950:	4b13      	ldr	r3, [pc, #76]	; (80129a0 <tcp_pcb_remove+0x10c>)
 8012952:	f640 0293 	movw	r2, #2195	; 0x893
 8012956:	4916      	ldr	r1, [pc, #88]	; (80129b0 <tcp_pcb_remove+0x11c>)
 8012958:	4813      	ldr	r0, [pc, #76]	; (80129a8 <tcp_pcb_remove+0x114>)
 801295a:	f009 fb61 	bl	801c020 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012962:	2b00      	cmp	r3, #0
 8012964:	d006      	beq.n	8012974 <tcp_pcb_remove+0xe0>
 8012966:	4b0e      	ldr	r3, [pc, #56]	; (80129a0 <tcp_pcb_remove+0x10c>)
 8012968:	f640 0294 	movw	r2, #2196	; 0x894
 801296c:	4911      	ldr	r1, [pc, #68]	; (80129b4 <tcp_pcb_remove+0x120>)
 801296e:	480e      	ldr	r0, [pc, #56]	; (80129a8 <tcp_pcb_remove+0x114>)
 8012970:	f009 fb56 	bl	801c020 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012978:	2b00      	cmp	r3, #0
 801297a:	d006      	beq.n	801298a <tcp_pcb_remove+0xf6>
 801297c:	4b08      	ldr	r3, [pc, #32]	; (80129a0 <tcp_pcb_remove+0x10c>)
 801297e:	f640 0296 	movw	r2, #2198	; 0x896
 8012982:	490d      	ldr	r1, [pc, #52]	; (80129b8 <tcp_pcb_remove+0x124>)
 8012984:	4808      	ldr	r0, [pc, #32]	; (80129a8 <tcp_pcb_remove+0x114>)
 8012986:	f009 fb4b 	bl	801c020 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2200      	movs	r2, #0
 801298e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2200      	movs	r2, #0
 8012994:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012996:	bf00      	nop
 8012998:	3710      	adds	r7, #16
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	080220e4 	.word	0x080220e4
 80129a4:	0802274c 	.word	0x0802274c
 80129a8:	08022128 	.word	0x08022128
 80129ac:	08022768 	.word	0x08022768
 80129b0:	08022788 	.word	0x08022788
 80129b4:	080227a0 	.word	0x080227a0
 80129b8:	080227bc 	.word	0x080227bc

080129bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d106      	bne.n	80129d8 <tcp_next_iss+0x1c>
 80129ca:	4b0a      	ldr	r3, [pc, #40]	; (80129f4 <tcp_next_iss+0x38>)
 80129cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80129d0:	4909      	ldr	r1, [pc, #36]	; (80129f8 <tcp_next_iss+0x3c>)
 80129d2:	480a      	ldr	r0, [pc, #40]	; (80129fc <tcp_next_iss+0x40>)
 80129d4:	f009 fb24 	bl	801c020 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80129d8:	4b09      	ldr	r3, [pc, #36]	; (8012a00 <tcp_next_iss+0x44>)
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	4b09      	ldr	r3, [pc, #36]	; (8012a04 <tcp_next_iss+0x48>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4413      	add	r3, r2
 80129e2:	4a07      	ldr	r2, [pc, #28]	; (8012a00 <tcp_next_iss+0x44>)
 80129e4:	6013      	str	r3, [r2, #0]
  return iss;
 80129e6:	4b06      	ldr	r3, [pc, #24]	; (8012a00 <tcp_next_iss+0x44>)
 80129e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	080220e4 	.word	0x080220e4
 80129f8:	080227d4 	.word	0x080227d4
 80129fc:	08022128 	.word	0x08022128
 8012a00:	20000078 	.word	0x20000078
 8012a04:	200082c8 	.word	0x200082c8

08012a08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	4603      	mov	r3, r0
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d106      	bne.n	8012a2a <tcp_eff_send_mss_netif+0x22>
 8012a1c:	4b14      	ldr	r3, [pc, #80]	; (8012a70 <tcp_eff_send_mss_netif+0x68>)
 8012a1e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012a22:	4914      	ldr	r1, [pc, #80]	; (8012a74 <tcp_eff_send_mss_netif+0x6c>)
 8012a24:	4814      	ldr	r0, [pc, #80]	; (8012a78 <tcp_eff_send_mss_netif+0x70>)
 8012a26:	f009 fafb 	bl	801c020 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d101      	bne.n	8012a34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012a30:	89fb      	ldrh	r3, [r7, #14]
 8012a32:	e019      	b.n	8012a68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012a3a:	8afb      	ldrh	r3, [r7, #22]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d012      	beq.n	8012a66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012a40:	2328      	movs	r3, #40	; 0x28
 8012a42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012a44:	8afa      	ldrh	r2, [r7, #22]
 8012a46:	8abb      	ldrh	r3, [r7, #20]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d904      	bls.n	8012a56 <tcp_eff_send_mss_netif+0x4e>
 8012a4c:	8afa      	ldrh	r2, [r7, #22]
 8012a4e:	8abb      	ldrh	r3, [r7, #20]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	e000      	b.n	8012a58 <tcp_eff_send_mss_netif+0x50>
 8012a56:	2300      	movs	r3, #0
 8012a58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012a5a:	8a7a      	ldrh	r2, [r7, #18]
 8012a5c:	89fb      	ldrh	r3, [r7, #14]
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	bf28      	it	cs
 8012a62:	4613      	movcs	r3, r2
 8012a64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012a66:	89fb      	ldrh	r3, [r7, #14]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3718      	adds	r7, #24
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	080220e4 	.word	0x080220e4
 8012a74:	080227f0 	.word	0x080227f0
 8012a78:	08022128 	.word	0x08022128

08012a7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d119      	bne.n	8012ac4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012a90:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012a92:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012a96:	4910      	ldr	r1, [pc, #64]	; (8012ad8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012a98:	4810      	ldr	r0, [pc, #64]	; (8012adc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012a9a:	f009 fac1 	bl	801c020 <iprintf>

  while (pcb != NULL) {
 8012a9e:	e011      	b.n	8012ac4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d108      	bne.n	8012abe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012ab2:	68f8      	ldr	r0, [r7, #12]
 8012ab4:	f7fe ffca 	bl	8011a4c <tcp_abort>
      pcb = next;
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	60fb      	str	r3, [r7, #12]
 8012abc:	e002      	b.n	8012ac4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d1ea      	bne.n	8012aa0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012aca:	bf00      	nop
 8012acc:	3710      	adds	r7, #16
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	080220e4 	.word	0x080220e4
 8012ad8:	08022818 	.word	0x08022818
 8012adc:	08022128 	.word	0x08022128

08012ae0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d02a      	beq.n	8012b46 <tcp_netif_ip_addr_changed+0x66>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d026      	beq.n	8012b46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012af8:	4b15      	ldr	r3, [pc, #84]	; (8012b50 <tcp_netif_ip_addr_changed+0x70>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4619      	mov	r1, r3
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff ffbc 	bl	8012a7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012b04:	4b13      	ldr	r3, [pc, #76]	; (8012b54 <tcp_netif_ip_addr_changed+0x74>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff ffb6 	bl	8012a7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d017      	beq.n	8012b46 <tcp_netif_ip_addr_changed+0x66>
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d013      	beq.n	8012b46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b1e:	4b0e      	ldr	r3, [pc, #56]	; (8012b58 <tcp_netif_ip_addr_changed+0x78>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	60fb      	str	r3, [r7, #12]
 8012b24:	e00c      	b.n	8012b40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681a      	ldr	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d103      	bne.n	8012b3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	60fb      	str	r3, [r7, #12]
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1ef      	bne.n	8012b26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012b46:	bf00      	nop
 8012b48:	3710      	adds	r7, #16
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	200082c4 	.word	0x200082c4
 8012b54:	200082d0 	.word	0x200082d0
 8012b58:	200082cc 	.word	0x200082cc

08012b5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d007      	beq.n	8012b7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff fc3f 	bl	80123f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012b7c:	bf00      	nop
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012b84:	b590      	push	{r4, r7, lr}
 8012b86:	b08d      	sub	sp, #52	; 0x34
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d105      	bne.n	8012ba0 <tcp_input+0x1c>
 8012b94:	4b9b      	ldr	r3, [pc, #620]	; (8012e04 <tcp_input+0x280>)
 8012b96:	2283      	movs	r2, #131	; 0x83
 8012b98:	499b      	ldr	r1, [pc, #620]	; (8012e08 <tcp_input+0x284>)
 8012b9a:	489c      	ldr	r0, [pc, #624]	; (8012e0c <tcp_input+0x288>)
 8012b9c:	f009 fa40 	bl	801c020 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4a9a      	ldr	r2, [pc, #616]	; (8012e10 <tcp_input+0x28c>)
 8012ba6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	895b      	ldrh	r3, [r3, #10]
 8012bac:	2b13      	cmp	r3, #19
 8012bae:	f240 83c4 	bls.w	801333a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012bb2:	4b98      	ldr	r3, [pc, #608]	; (8012e14 <tcp_input+0x290>)
 8012bb4:	695a      	ldr	r2, [r3, #20]
 8012bb6:	4b97      	ldr	r3, [pc, #604]	; (8012e14 <tcp_input+0x290>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f007 fd51 	bl	801a664 <ip4_addr_isbroadcast_u32>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f040 83ba 	bne.w	801333e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012bca:	4b92      	ldr	r3, [pc, #584]	; (8012e14 <tcp_input+0x290>)
 8012bcc:	695b      	ldr	r3, [r3, #20]
 8012bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012bd2:	2be0      	cmp	r3, #224	; 0xe0
 8012bd4:	f000 83b3 	beq.w	801333e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012bd8:	4b8d      	ldr	r3, [pc, #564]	; (8012e10 <tcp_input+0x28c>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	899b      	ldrh	r3, [r3, #12]
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fc ff0b 	bl	800f9fc <lwip_htons>
 8012be6:	4603      	mov	r3, r0
 8012be8:	0b1b      	lsrs	r3, r3, #12
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012bf2:	7cbb      	ldrb	r3, [r7, #18]
 8012bf4:	2b13      	cmp	r3, #19
 8012bf6:	f240 83a2 	bls.w	801333e <tcp_input+0x7ba>
 8012bfa:	7cbb      	ldrb	r3, [r7, #18]
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	891b      	ldrh	r3, [r3, #8]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	f200 839b 	bhi.w	801333e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012c08:	7cbb      	ldrb	r3, [r7, #18]
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	3b14      	subs	r3, #20
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	4b81      	ldr	r3, [pc, #516]	; (8012e18 <tcp_input+0x294>)
 8012c12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012c14:	4b81      	ldr	r3, [pc, #516]	; (8012e1c <tcp_input+0x298>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	895a      	ldrh	r2, [r3, #10]
 8012c1e:	7cbb      	ldrb	r3, [r7, #18]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d309      	bcc.n	8012c3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012c26:	4b7c      	ldr	r3, [pc, #496]	; (8012e18 <tcp_input+0x294>)
 8012c28:	881a      	ldrh	r2, [r3, #0]
 8012c2a:	4b7d      	ldr	r3, [pc, #500]	; (8012e20 <tcp_input+0x29c>)
 8012c2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012c2e:	7cbb      	ldrb	r3, [r7, #18]
 8012c30:	4619      	mov	r1, r3
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7fe f8f4 	bl	8010e20 <pbuf_remove_header>
 8012c38:	e04e      	b.n	8012cd8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d105      	bne.n	8012c4e <tcp_input+0xca>
 8012c42:	4b70      	ldr	r3, [pc, #448]	; (8012e04 <tcp_input+0x280>)
 8012c44:	22c2      	movs	r2, #194	; 0xc2
 8012c46:	4977      	ldr	r1, [pc, #476]	; (8012e24 <tcp_input+0x2a0>)
 8012c48:	4870      	ldr	r0, [pc, #448]	; (8012e0c <tcp_input+0x288>)
 8012c4a:	f009 f9e9 	bl	801c020 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012c4e:	2114      	movs	r1, #20
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7fe f8e5 	bl	8010e20 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	895a      	ldrh	r2, [r3, #10]
 8012c5a:	4b71      	ldr	r3, [pc, #452]	; (8012e20 <tcp_input+0x29c>)
 8012c5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012c5e:	4b6e      	ldr	r3, [pc, #440]	; (8012e18 <tcp_input+0x294>)
 8012c60:	881a      	ldrh	r2, [r3, #0]
 8012c62:	4b6f      	ldr	r3, [pc, #444]	; (8012e20 <tcp_input+0x29c>)
 8012c64:	881b      	ldrh	r3, [r3, #0]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012c6a:	4b6d      	ldr	r3, [pc, #436]	; (8012e20 <tcp_input+0x29c>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	4619      	mov	r1, r3
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7fe f8d5 	bl	8010e20 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	895b      	ldrh	r3, [r3, #10]
 8012c7c:	8a3a      	ldrh	r2, [r7, #16]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	f200 835f 	bhi.w	8013342 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	4a64      	ldr	r2, [pc, #400]	; (8012e1c <tcp_input+0x298>)
 8012c8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	8a3a      	ldrh	r2, [r7, #16]
 8012c94:	4611      	mov	r1, r2
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fe f8c2 	bl	8010e20 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	891a      	ldrh	r2, [r3, #8]
 8012ca0:	8a3b      	ldrh	r3, [r7, #16]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	b29a      	uxth	r2, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	895b      	ldrh	r3, [r3, #10]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d005      	beq.n	8012cbe <tcp_input+0x13a>
 8012cb2:	4b54      	ldr	r3, [pc, #336]	; (8012e04 <tcp_input+0x280>)
 8012cb4:	22df      	movs	r2, #223	; 0xdf
 8012cb6:	495c      	ldr	r1, [pc, #368]	; (8012e28 <tcp_input+0x2a4>)
 8012cb8:	4854      	ldr	r0, [pc, #336]	; (8012e0c <tcp_input+0x288>)
 8012cba:	f009 f9b1 	bl	801c020 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	891a      	ldrh	r2, [r3, #8]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	891b      	ldrh	r3, [r3, #8]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d005      	beq.n	8012cd8 <tcp_input+0x154>
 8012ccc:	4b4d      	ldr	r3, [pc, #308]	; (8012e04 <tcp_input+0x280>)
 8012cce:	22e0      	movs	r2, #224	; 0xe0
 8012cd0:	4956      	ldr	r1, [pc, #344]	; (8012e2c <tcp_input+0x2a8>)
 8012cd2:	484e      	ldr	r0, [pc, #312]	; (8012e0c <tcp_input+0x288>)
 8012cd4:	f009 f9a4 	bl	801c020 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012cd8:	4b4d      	ldr	r3, [pc, #308]	; (8012e10 <tcp_input+0x28c>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	881b      	ldrh	r3, [r3, #0]
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	4b4b      	ldr	r3, [pc, #300]	; (8012e10 <tcp_input+0x28c>)
 8012ce2:	681c      	ldr	r4, [r3, #0]
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	f7fc fe89 	bl	800f9fc <lwip_htons>
 8012cea:	4603      	mov	r3, r0
 8012cec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012cee:	4b48      	ldr	r3, [pc, #288]	; (8012e10 <tcp_input+0x28c>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	885b      	ldrh	r3, [r3, #2]
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	4b46      	ldr	r3, [pc, #280]	; (8012e10 <tcp_input+0x28c>)
 8012cf8:	681c      	ldr	r4, [r3, #0]
 8012cfa:	4610      	mov	r0, r2
 8012cfc:	f7fc fe7e 	bl	800f9fc <lwip_htons>
 8012d00:	4603      	mov	r3, r0
 8012d02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012d04:	4b42      	ldr	r3, [pc, #264]	; (8012e10 <tcp_input+0x28c>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	685a      	ldr	r2, [r3, #4]
 8012d0a:	4b41      	ldr	r3, [pc, #260]	; (8012e10 <tcp_input+0x28c>)
 8012d0c:	681c      	ldr	r4, [r3, #0]
 8012d0e:	4610      	mov	r0, r2
 8012d10:	f7fc fe89 	bl	800fa26 <lwip_htonl>
 8012d14:	4603      	mov	r3, r0
 8012d16:	6063      	str	r3, [r4, #4]
 8012d18:	6863      	ldr	r3, [r4, #4]
 8012d1a:	4a45      	ldr	r2, [pc, #276]	; (8012e30 <tcp_input+0x2ac>)
 8012d1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012d1e:	4b3c      	ldr	r3, [pc, #240]	; (8012e10 <tcp_input+0x28c>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	689a      	ldr	r2, [r3, #8]
 8012d24:	4b3a      	ldr	r3, [pc, #232]	; (8012e10 <tcp_input+0x28c>)
 8012d26:	681c      	ldr	r4, [r3, #0]
 8012d28:	4610      	mov	r0, r2
 8012d2a:	f7fc fe7c 	bl	800fa26 <lwip_htonl>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	60a3      	str	r3, [r4, #8]
 8012d32:	68a3      	ldr	r3, [r4, #8]
 8012d34:	4a3f      	ldr	r2, [pc, #252]	; (8012e34 <tcp_input+0x2b0>)
 8012d36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012d38:	4b35      	ldr	r3, [pc, #212]	; (8012e10 <tcp_input+0x28c>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	89db      	ldrh	r3, [r3, #14]
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	4b33      	ldr	r3, [pc, #204]	; (8012e10 <tcp_input+0x28c>)
 8012d42:	681c      	ldr	r4, [r3, #0]
 8012d44:	4610      	mov	r0, r2
 8012d46:	f7fc fe59 	bl	800f9fc <lwip_htons>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012d4e:	4b30      	ldr	r3, [pc, #192]	; (8012e10 <tcp_input+0x28c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	899b      	ldrh	r3, [r3, #12]
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fc fe50 	bl	800f9fc <lwip_htons>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d64:	b2da      	uxtb	r2, r3
 8012d66:	4b34      	ldr	r3, [pc, #208]	; (8012e38 <tcp_input+0x2b4>)
 8012d68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	891a      	ldrh	r2, [r3, #8]
 8012d6e:	4b33      	ldr	r3, [pc, #204]	; (8012e3c <tcp_input+0x2b8>)
 8012d70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012d72:	4b31      	ldr	r3, [pc, #196]	; (8012e38 <tcp_input+0x2b4>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	f003 0303 	and.w	r3, r3, #3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d00c      	beq.n	8012d98 <tcp_input+0x214>
    tcplen++;
 8012d7e:	4b2f      	ldr	r3, [pc, #188]	; (8012e3c <tcp_input+0x2b8>)
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	3301      	adds	r3, #1
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	4b2d      	ldr	r3, [pc, #180]	; (8012e3c <tcp_input+0x2b8>)
 8012d88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	891a      	ldrh	r2, [r3, #8]
 8012d8e:	4b2b      	ldr	r3, [pc, #172]	; (8012e3c <tcp_input+0x2b8>)
 8012d90:	881b      	ldrh	r3, [r3, #0]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	f200 82d7 	bhi.w	8013346 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d9c:	4b28      	ldr	r3, [pc, #160]	; (8012e40 <tcp_input+0x2bc>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	61fb      	str	r3, [r7, #28]
 8012da2:	e09d      	b.n	8012ee0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	7d1b      	ldrb	r3, [r3, #20]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d105      	bne.n	8012db8 <tcp_input+0x234>
 8012dac:	4b15      	ldr	r3, [pc, #84]	; (8012e04 <tcp_input+0x280>)
 8012dae:	22fb      	movs	r2, #251	; 0xfb
 8012db0:	4924      	ldr	r1, [pc, #144]	; (8012e44 <tcp_input+0x2c0>)
 8012db2:	4816      	ldr	r0, [pc, #88]	; (8012e0c <tcp_input+0x288>)
 8012db4:	f009 f934 	bl	801c020 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	7d1b      	ldrb	r3, [r3, #20]
 8012dbc:	2b0a      	cmp	r3, #10
 8012dbe:	d105      	bne.n	8012dcc <tcp_input+0x248>
 8012dc0:	4b10      	ldr	r3, [pc, #64]	; (8012e04 <tcp_input+0x280>)
 8012dc2:	22fc      	movs	r2, #252	; 0xfc
 8012dc4:	4920      	ldr	r1, [pc, #128]	; (8012e48 <tcp_input+0x2c4>)
 8012dc6:	4811      	ldr	r0, [pc, #68]	; (8012e0c <tcp_input+0x288>)
 8012dc8:	f009 f92a 	bl	801c020 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012dcc:	69fb      	ldr	r3, [r7, #28]
 8012dce:	7d1b      	ldrb	r3, [r3, #20]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d105      	bne.n	8012de0 <tcp_input+0x25c>
 8012dd4:	4b0b      	ldr	r3, [pc, #44]	; (8012e04 <tcp_input+0x280>)
 8012dd6:	22fd      	movs	r2, #253	; 0xfd
 8012dd8:	491c      	ldr	r1, [pc, #112]	; (8012e4c <tcp_input+0x2c8>)
 8012dda:	480c      	ldr	r0, [pc, #48]	; (8012e0c <tcp_input+0x288>)
 8012ddc:	f009 f920 	bl	801c020 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	7a1b      	ldrb	r3, [r3, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d033      	beq.n	8012e50 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	7a1a      	ldrb	r2, [r3, #8]
 8012dec:	4b09      	ldr	r3, [pc, #36]	; (8012e14 <tcp_input+0x290>)
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012df4:	3301      	adds	r3, #1
 8012df6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d029      	beq.n	8012e50 <tcp_input+0x2cc>
      prev = pcb;
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	61bb      	str	r3, [r7, #24]
      continue;
 8012e00:	e06b      	b.n	8012eda <tcp_input+0x356>
 8012e02:	bf00      	nop
 8012e04:	0802284c 	.word	0x0802284c
 8012e08:	08022880 	.word	0x08022880
 8012e0c:	08022898 	.word	0x08022898
 8012e10:	20001048 	.word	0x20001048
 8012e14:	200051a0 	.word	0x200051a0
 8012e18:	2000104c 	.word	0x2000104c
 8012e1c:	20001050 	.word	0x20001050
 8012e20:	2000104e 	.word	0x2000104e
 8012e24:	080228c0 	.word	0x080228c0
 8012e28:	080228d0 	.word	0x080228d0
 8012e2c:	080228dc 	.word	0x080228dc
 8012e30:	20001058 	.word	0x20001058
 8012e34:	2000105c 	.word	0x2000105c
 8012e38:	20001064 	.word	0x20001064
 8012e3c:	20001062 	.word	0x20001062
 8012e40:	200082c4 	.word	0x200082c4
 8012e44:	080228fc 	.word	0x080228fc
 8012e48:	08022924 	.word	0x08022924
 8012e4c:	08022950 	.word	0x08022950
    }

    if (pcb->remote_port == tcphdr->src &&
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	8b1a      	ldrh	r2, [r3, #24]
 8012e54:	4b94      	ldr	r3, [pc, #592]	; (80130a8 <tcp_input+0x524>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d13a      	bne.n	8012ed6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	8ada      	ldrh	r2, [r3, #22]
 8012e64:	4b90      	ldr	r3, [pc, #576]	; (80130a8 <tcp_input+0x524>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	885b      	ldrh	r3, [r3, #2]
 8012e6a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d132      	bne.n	8012ed6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	4b8d      	ldr	r3, [pc, #564]	; (80130ac <tcp_input+0x528>)
 8012e76:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d12c      	bne.n	8012ed6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	4b8a      	ldr	r3, [pc, #552]	; (80130ac <tcp_input+0x528>)
 8012e82:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d126      	bne.n	8012ed6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	69fa      	ldr	r2, [r7, #28]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d106      	bne.n	8012ea0 <tcp_input+0x31c>
 8012e92:	4b87      	ldr	r3, [pc, #540]	; (80130b0 <tcp_input+0x52c>)
 8012e94:	f240 120d 	movw	r2, #269	; 0x10d
 8012e98:	4986      	ldr	r1, [pc, #536]	; (80130b4 <tcp_input+0x530>)
 8012e9a:	4887      	ldr	r0, [pc, #540]	; (80130b8 <tcp_input+0x534>)
 8012e9c:	f009 f8c0 	bl	801c020 <iprintf>
      if (prev != NULL) {
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d00a      	beq.n	8012ebc <tcp_input+0x338>
        prev->next = pcb->next;
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	68da      	ldr	r2, [r3, #12]
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012eae:	4b83      	ldr	r3, [pc, #524]	; (80130bc <tcp_input+0x538>)
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012eb6:	4a81      	ldr	r2, [pc, #516]	; (80130bc <tcp_input+0x538>)
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	69fa      	ldr	r2, [r7, #28]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d111      	bne.n	8012eea <tcp_input+0x366>
 8012ec6:	4b7a      	ldr	r3, [pc, #488]	; (80130b0 <tcp_input+0x52c>)
 8012ec8:	f240 1215 	movw	r2, #277	; 0x115
 8012ecc:	497c      	ldr	r1, [pc, #496]	; (80130c0 <tcp_input+0x53c>)
 8012ece:	487a      	ldr	r0, [pc, #488]	; (80130b8 <tcp_input+0x534>)
 8012ed0:	f009 f8a6 	bl	801c020 <iprintf>
      break;
 8012ed4:	e009      	b.n	8012eea <tcp_input+0x366>
    }
    prev = pcb;
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	61fb      	str	r3, [r7, #28]
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	f47f af5e 	bne.w	8012da4 <tcp_input+0x220>
 8012ee8:	e000      	b.n	8012eec <tcp_input+0x368>
      break;
 8012eea:	bf00      	nop
  }

  if (pcb == NULL) {
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f040 8095 	bne.w	801301e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef4:	4b73      	ldr	r3, [pc, #460]	; (80130c4 <tcp_input+0x540>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	61fb      	str	r3, [r7, #28]
 8012efa:	e03f      	b.n	8012f7c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	7d1b      	ldrb	r3, [r3, #20]
 8012f00:	2b0a      	cmp	r3, #10
 8012f02:	d006      	beq.n	8012f12 <tcp_input+0x38e>
 8012f04:	4b6a      	ldr	r3, [pc, #424]	; (80130b0 <tcp_input+0x52c>)
 8012f06:	f240 121f 	movw	r2, #287	; 0x11f
 8012f0a:	496f      	ldr	r1, [pc, #444]	; (80130c8 <tcp_input+0x544>)
 8012f0c:	486a      	ldr	r0, [pc, #424]	; (80130b8 <tcp_input+0x534>)
 8012f0e:	f009 f887 	bl	801c020 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	7a1b      	ldrb	r3, [r3, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d009      	beq.n	8012f2e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	7a1a      	ldrb	r2, [r3, #8]
 8012f1e:	4b63      	ldr	r3, [pc, #396]	; (80130ac <tcp_input+0x528>)
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f26:	3301      	adds	r3, #1
 8012f28:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d122      	bne.n	8012f74 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	8b1a      	ldrh	r2, [r3, #24]
 8012f32:	4b5d      	ldr	r3, [pc, #372]	; (80130a8 <tcp_input+0x524>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	881b      	ldrh	r3, [r3, #0]
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d11b      	bne.n	8012f76 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	8ada      	ldrh	r2, [r3, #22]
 8012f42:	4b59      	ldr	r3, [pc, #356]	; (80130a8 <tcp_input+0x524>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	885b      	ldrh	r3, [r3, #2]
 8012f48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d113      	bne.n	8012f76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	685a      	ldr	r2, [r3, #4]
 8012f52:	4b56      	ldr	r3, [pc, #344]	; (80130ac <tcp_input+0x528>)
 8012f54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d10d      	bne.n	8012f76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	4b53      	ldr	r3, [pc, #332]	; (80130ac <tcp_input+0x528>)
 8012f60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d107      	bne.n	8012f76 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012f66:	69f8      	ldr	r0, [r7, #28]
 8012f68:	f000 fb52 	bl	8013610 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7fd ffdd 	bl	8010f2c <pbuf_free>
        return;
 8012f72:	e1ee      	b.n	8013352 <tcp_input+0x7ce>
        continue;
 8012f74:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	61fb      	str	r3, [r7, #28]
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d1bc      	bne.n	8012efc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012f82:	2300      	movs	r3, #0
 8012f84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f86:	4b51      	ldr	r3, [pc, #324]	; (80130cc <tcp_input+0x548>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	617b      	str	r3, [r7, #20]
 8012f8c:	e02a      	b.n	8012fe4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	7a1b      	ldrb	r3, [r3, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d00c      	beq.n	8012fb0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	7a1a      	ldrb	r2, [r3, #8]
 8012f9a:	4b44      	ldr	r3, [pc, #272]	; (80130ac <tcp_input+0x528>)
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d002      	beq.n	8012fb0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	61bb      	str	r3, [r7, #24]
        continue;
 8012fae:	e016      	b.n	8012fde <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	8ada      	ldrh	r2, [r3, #22]
 8012fb4:	4b3c      	ldr	r3, [pc, #240]	; (80130a8 <tcp_input+0x524>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	885b      	ldrh	r3, [r3, #2]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d10c      	bne.n	8012fda <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	4b39      	ldr	r3, [pc, #228]	; (80130ac <tcp_input+0x528>)
 8012fc6:	695b      	ldr	r3, [r3, #20]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d00f      	beq.n	8012fec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d00d      	beq.n	8012fee <tcp_input+0x46a>
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d009      	beq.n	8012fee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	617b      	str	r3, [r7, #20]
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1d1      	bne.n	8012f8e <tcp_input+0x40a>
 8012fea:	e000      	b.n	8012fee <tcp_input+0x46a>
            break;
 8012fec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d014      	beq.n	801301e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d00a      	beq.n	8013010 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	68da      	ldr	r2, [r3, #12]
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013002:	4b32      	ldr	r3, [pc, #200]	; (80130cc <tcp_input+0x548>)
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801300a:	4a30      	ldr	r2, [pc, #192]	; (80130cc <tcp_input+0x548>)
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013010:	6978      	ldr	r0, [r7, #20]
 8013012:	f000 f9ff 	bl	8013414 <tcp_listen_input>
      }
      pbuf_free(p);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7fd ff88 	bl	8010f2c <pbuf_free>
      return;
 801301c:	e199      	b.n	8013352 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	2b00      	cmp	r3, #0
 8013022:	f000 8160 	beq.w	80132e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013026:	4b2a      	ldr	r3, [pc, #168]	; (80130d0 <tcp_input+0x54c>)
 8013028:	2200      	movs	r2, #0
 801302a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	891a      	ldrh	r2, [r3, #8]
 8013030:	4b27      	ldr	r3, [pc, #156]	; (80130d0 <tcp_input+0x54c>)
 8013032:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013034:	4a26      	ldr	r2, [pc, #152]	; (80130d0 <tcp_input+0x54c>)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801303a:	4b1b      	ldr	r3, [pc, #108]	; (80130a8 <tcp_input+0x524>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a24      	ldr	r2, [pc, #144]	; (80130d0 <tcp_input+0x54c>)
 8013040:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013042:	4b24      	ldr	r3, [pc, #144]	; (80130d4 <tcp_input+0x550>)
 8013044:	2200      	movs	r2, #0
 8013046:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013048:	4b23      	ldr	r3, [pc, #140]	; (80130d8 <tcp_input+0x554>)
 801304a:	2200      	movs	r2, #0
 801304c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801304e:	4b23      	ldr	r3, [pc, #140]	; (80130dc <tcp_input+0x558>)
 8013050:	2200      	movs	r2, #0
 8013052:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013054:	4b22      	ldr	r3, [pc, #136]	; (80130e0 <tcp_input+0x55c>)
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	f003 0308 	and.w	r3, r3, #8
 801305c:	2b00      	cmp	r3, #0
 801305e:	d006      	beq.n	801306e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7b5b      	ldrb	r3, [r3, #13]
 8013064:	f043 0301 	orr.w	r3, r3, #1
 8013068:	b2da      	uxtb	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013072:	2b00      	cmp	r3, #0
 8013074:	d038      	beq.n	80130e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013076:	69f8      	ldr	r0, [r7, #28]
 8013078:	f7ff f940 	bl	80122fc <tcp_process_refused_data>
 801307c:	4603      	mov	r3, r0
 801307e:	f113 0f0d 	cmn.w	r3, #13
 8013082:	d007      	beq.n	8013094 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013088:	2b00      	cmp	r3, #0
 801308a:	d02d      	beq.n	80130e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801308c:	4b15      	ldr	r3, [pc, #84]	; (80130e4 <tcp_input+0x560>)
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d029      	beq.n	80130e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013098:	2b00      	cmp	r3, #0
 801309a:	f040 8104 	bne.w	80132a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801309e:	69f8      	ldr	r0, [r7, #28]
 80130a0:	f003 f9ca 	bl	8016438 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80130a4:	e0ff      	b.n	80132a6 <tcp_input+0x722>
 80130a6:	bf00      	nop
 80130a8:	20001048 	.word	0x20001048
 80130ac:	200051a0 	.word	0x200051a0
 80130b0:	0802284c 	.word	0x0802284c
 80130b4:	08022978 	.word	0x08022978
 80130b8:	08022898 	.word	0x08022898
 80130bc:	200082c4 	.word	0x200082c4
 80130c0:	080229a4 	.word	0x080229a4
 80130c4:	200082d4 	.word	0x200082d4
 80130c8:	080229d0 	.word	0x080229d0
 80130cc:	200082cc 	.word	0x200082cc
 80130d0:	20001038 	.word	0x20001038
 80130d4:	20001068 	.word	0x20001068
 80130d8:	20001065 	.word	0x20001065
 80130dc:	20001060 	.word	0x20001060
 80130e0:	20001064 	.word	0x20001064
 80130e4:	20001062 	.word	0x20001062
      }
    }
    tcp_input_pcb = pcb;
 80130e8:	4a9b      	ldr	r2, [pc, #620]	; (8013358 <tcp_input+0x7d4>)
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80130ee:	69f8      	ldr	r0, [r7, #28]
 80130f0:	f000 fb0a 	bl	8013708 <tcp_process>
 80130f4:	4603      	mov	r3, r0
 80130f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80130f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130fc:	f113 0f0d 	cmn.w	r3, #13
 8013100:	f000 80d3 	beq.w	80132aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013104:	4b95      	ldr	r3, [pc, #596]	; (801335c <tcp_input+0x7d8>)
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	f003 0308 	and.w	r3, r3, #8
 801310c:	2b00      	cmp	r3, #0
 801310e:	d015      	beq.n	801313c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013116:	2b00      	cmp	r3, #0
 8013118:	d008      	beq.n	801312c <tcp_input+0x5a8>
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013120:	69fa      	ldr	r2, [r7, #28]
 8013122:	6912      	ldr	r2, [r2, #16]
 8013124:	f06f 010d 	mvn.w	r1, #13
 8013128:	4610      	mov	r0, r2
 801312a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801312c:	69f9      	ldr	r1, [r7, #28]
 801312e:	488c      	ldr	r0, [pc, #560]	; (8013360 <tcp_input+0x7dc>)
 8013130:	f7ff fbb0 	bl	8012894 <tcp_pcb_remove>
        tcp_free(pcb);
 8013134:	69f8      	ldr	r0, [r7, #28]
 8013136:	f7fe f9a9 	bl	801148c <tcp_free>
 801313a:	e0c1      	b.n	80132c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013140:	4b88      	ldr	r3, [pc, #544]	; (8013364 <tcp_input+0x7e0>)
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d01d      	beq.n	8013184 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013148:	4b86      	ldr	r3, [pc, #536]	; (8013364 <tcp_input+0x7e0>)
 801314a:	881b      	ldrh	r3, [r3, #0]
 801314c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00a      	beq.n	801316e <tcp_input+0x5ea>
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801315e:	69fa      	ldr	r2, [r7, #28]
 8013160:	6910      	ldr	r0, [r2, #16]
 8013162:	89fa      	ldrh	r2, [r7, #14]
 8013164:	69f9      	ldr	r1, [r7, #28]
 8013166:	4798      	blx	r3
 8013168:	4603      	mov	r3, r0
 801316a:	74fb      	strb	r3, [r7, #19]
 801316c:	e001      	b.n	8013172 <tcp_input+0x5ee>
 801316e:	2300      	movs	r3, #0
 8013170:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013172:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013176:	f113 0f0d 	cmn.w	r3, #13
 801317a:	f000 8098 	beq.w	80132ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801317e:	4b79      	ldr	r3, [pc, #484]	; (8013364 <tcp_input+0x7e0>)
 8013180:	2200      	movs	r2, #0
 8013182:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013184:	69f8      	ldr	r0, [r7, #28]
 8013186:	f000 f905 	bl	8013394 <tcp_input_delayed_close>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	f040 8090 	bne.w	80132b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013192:	4b75      	ldr	r3, [pc, #468]	; (8013368 <tcp_input+0x7e4>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d041      	beq.n	801321e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801319a:	69fb      	ldr	r3, [r7, #28]
 801319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d006      	beq.n	80131b0 <tcp_input+0x62c>
 80131a2:	4b72      	ldr	r3, [pc, #456]	; (801336c <tcp_input+0x7e8>)
 80131a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80131a8:	4971      	ldr	r1, [pc, #452]	; (8013370 <tcp_input+0x7ec>)
 80131aa:	4872      	ldr	r0, [pc, #456]	; (8013374 <tcp_input+0x7f0>)
 80131ac:	f008 ff38 	bl	801c020 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	8b5b      	ldrh	r3, [r3, #26]
 80131b4:	f003 0310 	and.w	r3, r3, #16
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d008      	beq.n	80131ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80131bc:	4b6a      	ldr	r3, [pc, #424]	; (8013368 <tcp_input+0x7e4>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fd feb3 	bl	8010f2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80131c6:	69f8      	ldr	r0, [r7, #28]
 80131c8:	f7fe fc40 	bl	8011a4c <tcp_abort>
            goto aborted;
 80131cc:	e078      	b.n	80132c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00c      	beq.n	80131f2 <tcp_input+0x66e>
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	6918      	ldr	r0, [r3, #16]
 80131e2:	4b61      	ldr	r3, [pc, #388]	; (8013368 <tcp_input+0x7e4>)
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	2300      	movs	r3, #0
 80131e8:	69f9      	ldr	r1, [r7, #28]
 80131ea:	47a0      	blx	r4
 80131ec:	4603      	mov	r3, r0
 80131ee:	74fb      	strb	r3, [r7, #19]
 80131f0:	e008      	b.n	8013204 <tcp_input+0x680>
 80131f2:	4b5d      	ldr	r3, [pc, #372]	; (8013368 <tcp_input+0x7e4>)
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	2300      	movs	r3, #0
 80131f8:	69f9      	ldr	r1, [r7, #28]
 80131fa:	2000      	movs	r0, #0
 80131fc:	f7ff f952 	bl	80124a4 <tcp_recv_null>
 8013200:	4603      	mov	r3, r0
 8013202:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013204:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013208:	f113 0f0d 	cmn.w	r3, #13
 801320c:	d053      	beq.n	80132b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801320e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013216:	4b54      	ldr	r3, [pc, #336]	; (8013368 <tcp_input+0x7e4>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801321e:	4b4f      	ldr	r3, [pc, #316]	; (801335c <tcp_input+0x7d8>)
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	f003 0320 	and.w	r3, r3, #32
 8013226:	2b00      	cmp	r3, #0
 8013228:	d030      	beq.n	801328c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801322e:	2b00      	cmp	r3, #0
 8013230:	d009      	beq.n	8013246 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013236:	7b5a      	ldrb	r2, [r3, #13]
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801323c:	f042 0220 	orr.w	r2, r2, #32
 8013240:	b2d2      	uxtb	r2, r2
 8013242:	735a      	strb	r2, [r3, #13]
 8013244:	e022      	b.n	801328c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801324a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801324e:	d005      	beq.n	801325c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013254:	3301      	adds	r3, #1
 8013256:	b29a      	uxth	r2, r3
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013262:	2b00      	cmp	r3, #0
 8013264:	d00b      	beq.n	801327e <tcp_input+0x6fa>
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	6918      	ldr	r0, [r3, #16]
 8013270:	2300      	movs	r3, #0
 8013272:	2200      	movs	r2, #0
 8013274:	69f9      	ldr	r1, [r7, #28]
 8013276:	47a0      	blx	r4
 8013278:	4603      	mov	r3, r0
 801327a:	74fb      	strb	r3, [r7, #19]
 801327c:	e001      	b.n	8013282 <tcp_input+0x6fe>
 801327e:	2300      	movs	r3, #0
 8013280:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013286:	f113 0f0d 	cmn.w	r3, #13
 801328a:	d016      	beq.n	80132ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801328c:	4b32      	ldr	r3, [pc, #200]	; (8013358 <tcp_input+0x7d4>)
 801328e:	2200      	movs	r2, #0
 8013290:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013292:	69f8      	ldr	r0, [r7, #28]
 8013294:	f000 f87e 	bl	8013394 <tcp_input_delayed_close>
 8013298:	4603      	mov	r3, r0
 801329a:	2b00      	cmp	r3, #0
 801329c:	d10f      	bne.n	80132be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801329e:	69f8      	ldr	r0, [r7, #28]
 80132a0:	f002 fab6 	bl	8015810 <tcp_output>
 80132a4:	e00c      	b.n	80132c0 <tcp_input+0x73c>
        goto aborted;
 80132a6:	bf00      	nop
 80132a8:	e00a      	b.n	80132c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80132aa:	bf00      	nop
 80132ac:	e008      	b.n	80132c0 <tcp_input+0x73c>
              goto aborted;
 80132ae:	bf00      	nop
 80132b0:	e006      	b.n	80132c0 <tcp_input+0x73c>
          goto aborted;
 80132b2:	bf00      	nop
 80132b4:	e004      	b.n	80132c0 <tcp_input+0x73c>
            goto aborted;
 80132b6:	bf00      	nop
 80132b8:	e002      	b.n	80132c0 <tcp_input+0x73c>
              goto aborted;
 80132ba:	bf00      	nop
 80132bc:	e000      	b.n	80132c0 <tcp_input+0x73c>
          goto aborted;
 80132be:	bf00      	nop
    tcp_input_pcb = NULL;
 80132c0:	4b25      	ldr	r3, [pc, #148]	; (8013358 <tcp_input+0x7d4>)
 80132c2:	2200      	movs	r2, #0
 80132c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80132c6:	4b28      	ldr	r3, [pc, #160]	; (8013368 <tcp_input+0x7e4>)
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80132cc:	4b2a      	ldr	r3, [pc, #168]	; (8013378 <tcp_input+0x7f4>)
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d03d      	beq.n	8013350 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80132d4:	4b28      	ldr	r3, [pc, #160]	; (8013378 <tcp_input+0x7f4>)
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fd fe27 	bl	8010f2c <pbuf_free>
      inseg.p = NULL;
 80132de:	4b26      	ldr	r3, [pc, #152]	; (8013378 <tcp_input+0x7f4>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80132e4:	e034      	b.n	8013350 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80132e6:	4b25      	ldr	r3, [pc, #148]	; (801337c <tcp_input+0x7f8>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	899b      	ldrh	r3, [r3, #12]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fc fb84 	bl	800f9fc <lwip_htons>
 80132f4:	4603      	mov	r3, r0
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d118      	bne.n	8013332 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013300:	4b1f      	ldr	r3, [pc, #124]	; (8013380 <tcp_input+0x7fc>)
 8013302:	6819      	ldr	r1, [r3, #0]
 8013304:	4b1f      	ldr	r3, [pc, #124]	; (8013384 <tcp_input+0x800>)
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	461a      	mov	r2, r3
 801330a:	4b1f      	ldr	r3, [pc, #124]	; (8013388 <tcp_input+0x804>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013310:	4b1a      	ldr	r3, [pc, #104]	; (801337c <tcp_input+0x7f8>)
 8013312:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013314:	885b      	ldrh	r3, [r3, #2]
 8013316:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013318:	4a18      	ldr	r2, [pc, #96]	; (801337c <tcp_input+0x7f8>)
 801331a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801331c:	8812      	ldrh	r2, [r2, #0]
 801331e:	b292      	uxth	r2, r2
 8013320:	9202      	str	r2, [sp, #8]
 8013322:	9301      	str	r3, [sp, #4]
 8013324:	4b19      	ldr	r3, [pc, #100]	; (801338c <tcp_input+0x808>)
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	4b19      	ldr	r3, [pc, #100]	; (8013390 <tcp_input+0x80c>)
 801332a:	4602      	mov	r2, r0
 801332c:	2000      	movs	r0, #0
 801332e:	f003 f833 	bl	8016398 <tcp_rst>
    pbuf_free(p);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7fd fdfa 	bl	8010f2c <pbuf_free>
  return;
 8013338:	e00a      	b.n	8013350 <tcp_input+0x7cc>
    goto dropped;
 801333a:	bf00      	nop
 801333c:	e004      	b.n	8013348 <tcp_input+0x7c4>
dropped:
 801333e:	bf00      	nop
 8013340:	e002      	b.n	8013348 <tcp_input+0x7c4>
      goto dropped;
 8013342:	bf00      	nop
 8013344:	e000      	b.n	8013348 <tcp_input+0x7c4>
      goto dropped;
 8013346:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7fd fdef 	bl	8010f2c <pbuf_free>
 801334e:	e000      	b.n	8013352 <tcp_input+0x7ce>
  return;
 8013350:	bf00      	nop
}
 8013352:	3724      	adds	r7, #36	; 0x24
 8013354:	46bd      	mov	sp, r7
 8013356:	bd90      	pop	{r4, r7, pc}
 8013358:	200082d8 	.word	0x200082d8
 801335c:	20001065 	.word	0x20001065
 8013360:	200082c4 	.word	0x200082c4
 8013364:	20001060 	.word	0x20001060
 8013368:	20001068 	.word	0x20001068
 801336c:	0802284c 	.word	0x0802284c
 8013370:	08022a00 	.word	0x08022a00
 8013374:	08022898 	.word	0x08022898
 8013378:	20001038 	.word	0x20001038
 801337c:	20001048 	.word	0x20001048
 8013380:	2000105c 	.word	0x2000105c
 8013384:	20001062 	.word	0x20001062
 8013388:	20001058 	.word	0x20001058
 801338c:	200051b0 	.word	0x200051b0
 8013390:	200051b4 	.word	0x200051b4

08013394 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d106      	bne.n	80133b0 <tcp_input_delayed_close+0x1c>
 80133a2:	4b17      	ldr	r3, [pc, #92]	; (8013400 <tcp_input_delayed_close+0x6c>)
 80133a4:	f240 225a 	movw	r2, #602	; 0x25a
 80133a8:	4916      	ldr	r1, [pc, #88]	; (8013404 <tcp_input_delayed_close+0x70>)
 80133aa:	4817      	ldr	r0, [pc, #92]	; (8013408 <tcp_input_delayed_close+0x74>)
 80133ac:	f008 fe38 	bl	801c020 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80133b0:	4b16      	ldr	r3, [pc, #88]	; (801340c <tcp_input_delayed_close+0x78>)
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	f003 0310 	and.w	r3, r3, #16
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d01c      	beq.n	80133f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	8b5b      	ldrh	r3, [r3, #26]
 80133c0:	f003 0310 	and.w	r3, r3, #16
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d10d      	bne.n	80133e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d008      	beq.n	80133e4 <tcp_input_delayed_close+0x50>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	6912      	ldr	r2, [r2, #16]
 80133dc:	f06f 010e 	mvn.w	r1, #14
 80133e0:	4610      	mov	r0, r2
 80133e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	480a      	ldr	r0, [pc, #40]	; (8013410 <tcp_input_delayed_close+0x7c>)
 80133e8:	f7ff fa54 	bl	8012894 <tcp_pcb_remove>
    tcp_free(pcb);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7fe f84d 	bl	801148c <tcp_free>
    return 1;
 80133f2:	2301      	movs	r3, #1
 80133f4:	e000      	b.n	80133f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80133f6:	2300      	movs	r3, #0
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	0802284c 	.word	0x0802284c
 8013404:	08022a1c 	.word	0x08022a1c
 8013408:	08022898 	.word	0x08022898
 801340c:	20001065 	.word	0x20001065
 8013410:	200082c4 	.word	0x200082c4

08013414 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013414:	b590      	push	{r4, r7, lr}
 8013416:	b08b      	sub	sp, #44	; 0x2c
 8013418:	af04      	add	r7, sp, #16
 801341a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801341c:	4b6f      	ldr	r3, [pc, #444]	; (80135dc <tcp_listen_input+0x1c8>)
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	f003 0304 	and.w	r3, r3, #4
 8013424:	2b00      	cmp	r3, #0
 8013426:	f040 80d3 	bne.w	80135d0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d106      	bne.n	801343e <tcp_listen_input+0x2a>
 8013430:	4b6b      	ldr	r3, [pc, #428]	; (80135e0 <tcp_listen_input+0x1cc>)
 8013432:	f240 2281 	movw	r2, #641	; 0x281
 8013436:	496b      	ldr	r1, [pc, #428]	; (80135e4 <tcp_listen_input+0x1d0>)
 8013438:	486b      	ldr	r0, [pc, #428]	; (80135e8 <tcp_listen_input+0x1d4>)
 801343a:	f008 fdf1 	bl	801c020 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801343e:	4b67      	ldr	r3, [pc, #412]	; (80135dc <tcp_listen_input+0x1c8>)
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	f003 0310 	and.w	r3, r3, #16
 8013446:	2b00      	cmp	r3, #0
 8013448:	d019      	beq.n	801347e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801344a:	4b68      	ldr	r3, [pc, #416]	; (80135ec <tcp_listen_input+0x1d8>)
 801344c:	6819      	ldr	r1, [r3, #0]
 801344e:	4b68      	ldr	r3, [pc, #416]	; (80135f0 <tcp_listen_input+0x1dc>)
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	461a      	mov	r2, r3
 8013454:	4b67      	ldr	r3, [pc, #412]	; (80135f4 <tcp_listen_input+0x1e0>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801345a:	4b67      	ldr	r3, [pc, #412]	; (80135f8 <tcp_listen_input+0x1e4>)
 801345c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801345e:	885b      	ldrh	r3, [r3, #2]
 8013460:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013462:	4a65      	ldr	r2, [pc, #404]	; (80135f8 <tcp_listen_input+0x1e4>)
 8013464:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013466:	8812      	ldrh	r2, [r2, #0]
 8013468:	b292      	uxth	r2, r2
 801346a:	9202      	str	r2, [sp, #8]
 801346c:	9301      	str	r3, [sp, #4]
 801346e:	4b63      	ldr	r3, [pc, #396]	; (80135fc <tcp_listen_input+0x1e8>)
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	4b63      	ldr	r3, [pc, #396]	; (8013600 <tcp_listen_input+0x1ec>)
 8013474:	4602      	mov	r2, r0
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f002 ff8e 	bl	8016398 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801347c:	e0aa      	b.n	80135d4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801347e:	4b57      	ldr	r3, [pc, #348]	; (80135dc <tcp_listen_input+0x1c8>)
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	f003 0302 	and.w	r3, r3, #2
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 80a4 	beq.w	80135d4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	7d5b      	ldrb	r3, [r3, #21]
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff f92b 	bl	80126ec <tcp_alloc>
 8013496:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d111      	bne.n	80134c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	699b      	ldr	r3, [r3, #24]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00a      	beq.n	80134bc <tcp_listen_input+0xa8>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	699b      	ldr	r3, [r3, #24]
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	6910      	ldr	r0, [r2, #16]
 80134ae:	f04f 32ff 	mov.w	r2, #4294967295
 80134b2:	2100      	movs	r1, #0
 80134b4:	4798      	blx	r3
 80134b6:	4603      	mov	r3, r0
 80134b8:	73bb      	strb	r3, [r7, #14]
      return;
 80134ba:	e08c      	b.n	80135d6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80134bc:	23f0      	movs	r3, #240	; 0xf0
 80134be:	73bb      	strb	r3, [r7, #14]
      return;
 80134c0:	e089      	b.n	80135d6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80134c2:	4b50      	ldr	r3, [pc, #320]	; (8013604 <tcp_listen_input+0x1f0>)
 80134c4:	695a      	ldr	r2, [r3, #20]
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80134ca:	4b4e      	ldr	r3, [pc, #312]	; (8013604 <tcp_listen_input+0x1f0>)
 80134cc:	691a      	ldr	r2, [r3, #16]
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8ada      	ldrh	r2, [r3, #22]
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80134da:	4b47      	ldr	r3, [pc, #284]	; (80135f8 <tcp_listen_input+0x1e4>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	2203      	movs	r2, #3
 80134ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80134ec:	4b41      	ldr	r3, [pc, #260]	; (80135f4 <tcp_listen_input+0x1e0>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80134fe:	6978      	ldr	r0, [r7, #20]
 8013500:	f7ff fa5c 	bl	80129bc <tcp_next_iss>
 8013504:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	693a      	ldr	r2, [r7, #16]
 801350a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	693a      	ldr	r2, [r7, #16]
 8013516:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801351e:	4b35      	ldr	r3, [pc, #212]	; (80135f4 <tcp_listen_input+0x1e0>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	1e5a      	subs	r2, r3, #1
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	691a      	ldr	r2, [r3, #16]
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	7a5b      	ldrb	r3, [r3, #9]
 801353a:	f003 030c 	and.w	r3, r3, #12
 801353e:	b2da      	uxtb	r2, r3
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	7a1a      	ldrb	r2, [r3, #8]
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801354c:	4b2e      	ldr	r3, [pc, #184]	; (8013608 <tcp_listen_input+0x1f4>)
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	60da      	str	r2, [r3, #12]
 8013554:	4a2c      	ldr	r2, [pc, #176]	; (8013608 <tcp_listen_input+0x1f4>)
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	6013      	str	r3, [r2, #0]
 801355a:	f003 f8dd 	bl	8016718 <tcp_timer_needed>
 801355e:	4b2b      	ldr	r3, [pc, #172]	; (801360c <tcp_listen_input+0x1f8>)
 8013560:	2201      	movs	r2, #1
 8013562:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013564:	6978      	ldr	r0, [r7, #20]
 8013566:	f001 fd8f 	bl	8015088 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801356a:	4b23      	ldr	r3, [pc, #140]	; (80135f8 <tcp_listen_input+0x1e4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	89db      	ldrh	r3, [r3, #14]
 8013570:	b29a      	uxth	r2, r3
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	3304      	adds	r3, #4
 801358c:	4618      	mov	r0, r3
 801358e:	f006 fdb7 	bl	801a100 <ip4_route>
 8013592:	4601      	mov	r1, r0
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	3304      	adds	r3, #4
 8013598:	461a      	mov	r2, r3
 801359a:	4620      	mov	r0, r4
 801359c:	f7ff fa34 	bl	8012a08 <tcp_eff_send_mss_netif>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80135a8:	2112      	movs	r1, #18
 80135aa:	6978      	ldr	r0, [r7, #20]
 80135ac:	f002 f842 	bl	8015634 <tcp_enqueue_flags>
 80135b0:	4603      	mov	r3, r0
 80135b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80135b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d004      	beq.n	80135c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80135bc:	2100      	movs	r1, #0
 80135be:	6978      	ldr	r0, [r7, #20]
 80135c0:	f7fe f986 	bl	80118d0 <tcp_abandon>
      return;
 80135c4:	e007      	b.n	80135d6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80135c6:	6978      	ldr	r0, [r7, #20]
 80135c8:	f002 f922 	bl	8015810 <tcp_output>
  return;
 80135cc:	bf00      	nop
 80135ce:	e001      	b.n	80135d4 <tcp_listen_input+0x1c0>
    return;
 80135d0:	bf00      	nop
 80135d2:	e000      	b.n	80135d6 <tcp_listen_input+0x1c2>
  return;
 80135d4:	bf00      	nop
}
 80135d6:	371c      	adds	r7, #28
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd90      	pop	{r4, r7, pc}
 80135dc:	20001064 	.word	0x20001064
 80135e0:	0802284c 	.word	0x0802284c
 80135e4:	08022a44 	.word	0x08022a44
 80135e8:	08022898 	.word	0x08022898
 80135ec:	2000105c 	.word	0x2000105c
 80135f0:	20001062 	.word	0x20001062
 80135f4:	20001058 	.word	0x20001058
 80135f8:	20001048 	.word	0x20001048
 80135fc:	200051b0 	.word	0x200051b0
 8013600:	200051b4 	.word	0x200051b4
 8013604:	200051a0 	.word	0x200051a0
 8013608:	200082c4 	.word	0x200082c4
 801360c:	200082c0 	.word	0x200082c0

08013610 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b086      	sub	sp, #24
 8013614:	af04      	add	r7, sp, #16
 8013616:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013618:	4b30      	ldr	r3, [pc, #192]	; (80136dc <tcp_timewait_input+0xcc>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f003 0304 	and.w	r3, r3, #4
 8013620:	2b00      	cmp	r3, #0
 8013622:	d154      	bne.n	80136ce <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d106      	bne.n	8013638 <tcp_timewait_input+0x28>
 801362a:	4b2d      	ldr	r3, [pc, #180]	; (80136e0 <tcp_timewait_input+0xd0>)
 801362c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013630:	492c      	ldr	r1, [pc, #176]	; (80136e4 <tcp_timewait_input+0xd4>)
 8013632:	482d      	ldr	r0, [pc, #180]	; (80136e8 <tcp_timewait_input+0xd8>)
 8013634:	f008 fcf4 	bl	801c020 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013638:	4b28      	ldr	r3, [pc, #160]	; (80136dc <tcp_timewait_input+0xcc>)
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	f003 0302 	and.w	r3, r3, #2
 8013640:	2b00      	cmp	r3, #0
 8013642:	d02a      	beq.n	801369a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013644:	4b29      	ldr	r3, [pc, #164]	; (80136ec <tcp_timewait_input+0xdc>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	2b00      	cmp	r3, #0
 8013650:	db2d      	blt.n	80136ae <tcp_timewait_input+0x9e>
 8013652:	4b26      	ldr	r3, [pc, #152]	; (80136ec <tcp_timewait_input+0xdc>)
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365a:	6879      	ldr	r1, [r7, #4]
 801365c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801365e:	440b      	add	r3, r1
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	2b00      	cmp	r3, #0
 8013664:	dc23      	bgt.n	80136ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013666:	4b22      	ldr	r3, [pc, #136]	; (80136f0 <tcp_timewait_input+0xe0>)
 8013668:	6819      	ldr	r1, [r3, #0]
 801366a:	4b22      	ldr	r3, [pc, #136]	; (80136f4 <tcp_timewait_input+0xe4>)
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	461a      	mov	r2, r3
 8013670:	4b1e      	ldr	r3, [pc, #120]	; (80136ec <tcp_timewait_input+0xdc>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013676:	4b20      	ldr	r3, [pc, #128]	; (80136f8 <tcp_timewait_input+0xe8>)
 8013678:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801367a:	885b      	ldrh	r3, [r3, #2]
 801367c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801367e:	4a1e      	ldr	r2, [pc, #120]	; (80136f8 <tcp_timewait_input+0xe8>)
 8013680:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013682:	8812      	ldrh	r2, [r2, #0]
 8013684:	b292      	uxth	r2, r2
 8013686:	9202      	str	r2, [sp, #8]
 8013688:	9301      	str	r3, [sp, #4]
 801368a:	4b1c      	ldr	r3, [pc, #112]	; (80136fc <tcp_timewait_input+0xec>)
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	4b1c      	ldr	r3, [pc, #112]	; (8013700 <tcp_timewait_input+0xf0>)
 8013690:	4602      	mov	r2, r0
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f002 fe80 	bl	8016398 <tcp_rst>
      return;
 8013698:	e01c      	b.n	80136d4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801369a:	4b10      	ldr	r3, [pc, #64]	; (80136dc <tcp_timewait_input+0xcc>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	f003 0301 	and.w	r3, r3, #1
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d003      	beq.n	80136ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80136a6:	4b17      	ldr	r3, [pc, #92]	; (8013704 <tcp_timewait_input+0xf4>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80136ae:	4b11      	ldr	r3, [pc, #68]	; (80136f4 <tcp_timewait_input+0xe4>)
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d00d      	beq.n	80136d2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	8b5b      	ldrh	r3, [r3, #26]
 80136ba:	f043 0302 	orr.w	r3, r3, #2
 80136be:	b29a      	uxth	r2, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f002 f8a3 	bl	8015810 <tcp_output>
  }
  return;
 80136ca:	bf00      	nop
 80136cc:	e001      	b.n	80136d2 <tcp_timewait_input+0xc2>
    return;
 80136ce:	bf00      	nop
 80136d0:	e000      	b.n	80136d4 <tcp_timewait_input+0xc4>
  return;
 80136d2:	bf00      	nop
}
 80136d4:	3708      	adds	r7, #8
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	20001064 	.word	0x20001064
 80136e0:	0802284c 	.word	0x0802284c
 80136e4:	08022a64 	.word	0x08022a64
 80136e8:	08022898 	.word	0x08022898
 80136ec:	20001058 	.word	0x20001058
 80136f0:	2000105c 	.word	0x2000105c
 80136f4:	20001062 	.word	0x20001062
 80136f8:	20001048 	.word	0x20001048
 80136fc:	200051b0 	.word	0x200051b0
 8013700:	200051b4 	.word	0x200051b4
 8013704:	200082c8 	.word	0x200082c8

08013708 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013708:	b590      	push	{r4, r7, lr}
 801370a:	b08d      	sub	sp, #52	; 0x34
 801370c:	af04      	add	r7, sp, #16
 801370e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013710:	2300      	movs	r3, #0
 8013712:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013714:	2300      	movs	r3, #0
 8013716:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d106      	bne.n	801372c <tcp_process+0x24>
 801371e:	4ba5      	ldr	r3, [pc, #660]	; (80139b4 <tcp_process+0x2ac>)
 8013720:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013724:	49a4      	ldr	r1, [pc, #656]	; (80139b8 <tcp_process+0x2b0>)
 8013726:	48a5      	ldr	r0, [pc, #660]	; (80139bc <tcp_process+0x2b4>)
 8013728:	f008 fc7a 	bl	801c020 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801372c:	4ba4      	ldr	r3, [pc, #656]	; (80139c0 <tcp_process+0x2b8>)
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	f003 0304 	and.w	r3, r3, #4
 8013734:	2b00      	cmp	r3, #0
 8013736:	d04e      	beq.n	80137d6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b02      	cmp	r3, #2
 801373e:	d108      	bne.n	8013752 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013744:	4b9f      	ldr	r3, [pc, #636]	; (80139c4 <tcp_process+0x2bc>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	429a      	cmp	r2, r3
 801374a:	d123      	bne.n	8013794 <tcp_process+0x8c>
        acceptable = 1;
 801374c:	2301      	movs	r3, #1
 801374e:	76fb      	strb	r3, [r7, #27]
 8013750:	e020      	b.n	8013794 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013756:	4b9c      	ldr	r3, [pc, #624]	; (80139c8 <tcp_process+0x2c0>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d102      	bne.n	8013764 <tcp_process+0x5c>
        acceptable = 1;
 801375e:	2301      	movs	r3, #1
 8013760:	76fb      	strb	r3, [r7, #27]
 8013762:	e017      	b.n	8013794 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013764:	4b98      	ldr	r3, [pc, #608]	; (80139c8 <tcp_process+0x2c0>)
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	db10      	blt.n	8013794 <tcp_process+0x8c>
 8013772:	4b95      	ldr	r3, [pc, #596]	; (80139c8 <tcp_process+0x2c0>)
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801377a:	6879      	ldr	r1, [r7, #4]
 801377c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801377e:	440b      	add	r3, r1
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	2b00      	cmp	r3, #0
 8013784:	dc06      	bgt.n	8013794 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8b5b      	ldrh	r3, [r3, #26]
 801378a:	f043 0302 	orr.w	r3, r3, #2
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013794:	7efb      	ldrb	r3, [r7, #27]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d01b      	beq.n	80137d2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	7d1b      	ldrb	r3, [r3, #20]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d106      	bne.n	80137b0 <tcp_process+0xa8>
 80137a2:	4b84      	ldr	r3, [pc, #528]	; (80139b4 <tcp_process+0x2ac>)
 80137a4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80137a8:	4988      	ldr	r1, [pc, #544]	; (80139cc <tcp_process+0x2c4>)
 80137aa:	4884      	ldr	r0, [pc, #528]	; (80139bc <tcp_process+0x2b4>)
 80137ac:	f008 fc38 	bl	801c020 <iprintf>
      recv_flags |= TF_RESET;
 80137b0:	4b87      	ldr	r3, [pc, #540]	; (80139d0 <tcp_process+0x2c8>)
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	f043 0308 	orr.w	r3, r3, #8
 80137b8:	b2da      	uxtb	r2, r3
 80137ba:	4b85      	ldr	r3, [pc, #532]	; (80139d0 <tcp_process+0x2c8>)
 80137bc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	8b5b      	ldrh	r3, [r3, #26]
 80137c2:	f023 0301 	bic.w	r3, r3, #1
 80137c6:	b29a      	uxth	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80137cc:	f06f 030d 	mvn.w	r3, #13
 80137d0:	e37a      	b.n	8013ec8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	e378      	b.n	8013ec8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80137d6:	4b7a      	ldr	r3, [pc, #488]	; (80139c0 <tcp_process+0x2b8>)
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	f003 0302 	and.w	r3, r3, #2
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d010      	beq.n	8013804 <tcp_process+0xfc>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	7d1b      	ldrb	r3, [r3, #20]
 80137e6:	2b02      	cmp	r3, #2
 80137e8:	d00c      	beq.n	8013804 <tcp_process+0xfc>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	7d1b      	ldrb	r3, [r3, #20]
 80137ee:	2b03      	cmp	r3, #3
 80137f0:	d008      	beq.n	8013804 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	8b5b      	ldrh	r3, [r3, #26]
 80137f6:	f043 0302 	orr.w	r3, r3, #2
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013800:	2300      	movs	r3, #0
 8013802:	e361      	b.n	8013ec8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8b5b      	ldrh	r3, [r3, #26]
 8013808:	f003 0310 	and.w	r3, r3, #16
 801380c:	2b00      	cmp	r3, #0
 801380e:	d103      	bne.n	8013818 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013810:	4b70      	ldr	r3, [pc, #448]	; (80139d4 <tcp_process+0x2cc>)
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2200      	movs	r2, #0
 801381c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2200      	movs	r2, #0
 8013824:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f001 fc2d 	bl	8015088 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	7d1b      	ldrb	r3, [r3, #20]
 8013832:	3b02      	subs	r3, #2
 8013834:	2b07      	cmp	r3, #7
 8013836:	f200 8337 	bhi.w	8013ea8 <tcp_process+0x7a0>
 801383a:	a201      	add	r2, pc, #4	; (adr r2, 8013840 <tcp_process+0x138>)
 801383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013840:	08013861 	.word	0x08013861
 8013844:	08013a91 	.word	0x08013a91
 8013848:	08013c09 	.word	0x08013c09
 801384c:	08013c33 	.word	0x08013c33
 8013850:	08013d57 	.word	0x08013d57
 8013854:	08013c09 	.word	0x08013c09
 8013858:	08013de3 	.word	0x08013de3
 801385c:	08013e73 	.word	0x08013e73
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013860:	4b57      	ldr	r3, [pc, #348]	; (80139c0 <tcp_process+0x2b8>)
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	f003 0310 	and.w	r3, r3, #16
 8013868:	2b00      	cmp	r3, #0
 801386a:	f000 80e4 	beq.w	8013a36 <tcp_process+0x32e>
 801386e:	4b54      	ldr	r3, [pc, #336]	; (80139c0 <tcp_process+0x2b8>)
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	f003 0302 	and.w	r3, r3, #2
 8013876:	2b00      	cmp	r3, #0
 8013878:	f000 80dd 	beq.w	8013a36 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013880:	1c5a      	adds	r2, r3, #1
 8013882:	4b50      	ldr	r3, [pc, #320]	; (80139c4 <tcp_process+0x2bc>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	429a      	cmp	r2, r3
 8013888:	f040 80d5 	bne.w	8013a36 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801388c:	4b4e      	ldr	r3, [pc, #312]	; (80139c8 <tcp_process+0x2c0>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	1c5a      	adds	r2, r3, #1
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801389e:	4b49      	ldr	r3, [pc, #292]	; (80139c4 <tcp_process+0x2bc>)
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80138a6:	4b4c      	ldr	r3, [pc, #304]	; (80139d8 <tcp_process+0x2d0>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	89db      	ldrh	r3, [r3, #14]
 80138ac:	b29a      	uxth	r2, r3
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80138c0:	4b41      	ldr	r3, [pc, #260]	; (80139c8 <tcp_process+0x2c0>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	1e5a      	subs	r2, r3, #1
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2204      	movs	r2, #4
 80138ce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	3304      	adds	r3, #4
 80138d8:	4618      	mov	r0, r3
 80138da:	f006 fc11 	bl	801a100 <ip4_route>
 80138de:	4601      	mov	r1, r0
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	3304      	adds	r3, #4
 80138e4:	461a      	mov	r2, r3
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7ff f88e 	bl	8012a08 <tcp_eff_send_mss_netif>
 80138ec:	4603      	mov	r3, r0
 80138ee:	461a      	mov	r2, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138f8:	009a      	lsls	r2, r3, #2
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138fe:	005b      	lsls	r3, r3, #1
 8013900:	f241 111c 	movw	r1, #4380	; 0x111c
 8013904:	428b      	cmp	r3, r1
 8013906:	bf38      	it	cc
 8013908:	460b      	movcc	r3, r1
 801390a:	429a      	cmp	r2, r3
 801390c:	d204      	bcs.n	8013918 <tcp_process+0x210>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	b29b      	uxth	r3, r3
 8013916:	e00d      	b.n	8013934 <tcp_process+0x22c>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801391c:	005b      	lsls	r3, r3, #1
 801391e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013922:	4293      	cmp	r3, r2
 8013924:	d904      	bls.n	8013930 <tcp_process+0x228>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801392a:	005b      	lsls	r3, r3, #1
 801392c:	b29b      	uxth	r3, r3
 801392e:	e001      	b.n	8013934 <tcp_process+0x22c>
 8013930:	f241 131c 	movw	r3, #4380	; 0x111c
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013940:	2b00      	cmp	r3, #0
 8013942:	d106      	bne.n	8013952 <tcp_process+0x24a>
 8013944:	4b1b      	ldr	r3, [pc, #108]	; (80139b4 <tcp_process+0x2ac>)
 8013946:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801394a:	4924      	ldr	r1, [pc, #144]	; (80139dc <tcp_process+0x2d4>)
 801394c:	481b      	ldr	r0, [pc, #108]	; (80139bc <tcp_process+0x2b4>)
 801394e:	f008 fb67 	bl	801c020 <iprintf>
        --pcb->snd_queuelen;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013958:	3b01      	subs	r3, #1
 801395a:	b29a      	uxth	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013966:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d111      	bne.n	8013992 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013972:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_process+0x280>
 801397a:	4b0e      	ldr	r3, [pc, #56]	; (80139b4 <tcp_process+0x2ac>)
 801397c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013980:	4917      	ldr	r1, [pc, #92]	; (80139e0 <tcp_process+0x2d8>)
 8013982:	480e      	ldr	r0, [pc, #56]	; (80139bc <tcp_process+0x2b4>)
 8013984:	f008 fb4c 	bl	801c020 <iprintf>
          pcb->unsent = rseg->next;
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	66da      	str	r2, [r3, #108]	; 0x6c
 8013990:	e003      	b.n	801399a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801399a:	69f8      	ldr	r0, [r7, #28]
 801399c:	f7fe fd3e 	bl	801241c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d11d      	bne.n	80139e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80139b0:	e01f      	b.n	80139f2 <tcp_process+0x2ea>
 80139b2:	bf00      	nop
 80139b4:	0802284c 	.word	0x0802284c
 80139b8:	08022a84 	.word	0x08022a84
 80139bc:	08022898 	.word	0x08022898
 80139c0:	20001064 	.word	0x20001064
 80139c4:	2000105c 	.word	0x2000105c
 80139c8:	20001058 	.word	0x20001058
 80139cc:	08022aa0 	.word	0x08022aa0
 80139d0:	20001065 	.word	0x20001065
 80139d4:	200082c8 	.word	0x200082c8
 80139d8:	20001048 	.word	0x20001048
 80139dc:	08022ac0 	.word	0x08022ac0
 80139e0:	08022ad8 	.word	0x08022ad8
        } else {
          pcb->rtime = 0;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d00a      	beq.n	8013a12 <tcp_process+0x30a>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	6910      	ldr	r0, [r2, #16]
 8013a06:	2200      	movs	r2, #0
 8013a08:	6879      	ldr	r1, [r7, #4]
 8013a0a:	4798      	blx	r3
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	76bb      	strb	r3, [r7, #26]
 8013a10:	e001      	b.n	8013a16 <tcp_process+0x30e>
 8013a12:	2300      	movs	r3, #0
 8013a14:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013a16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a1a:	f113 0f0d 	cmn.w	r3, #13
 8013a1e:	d102      	bne.n	8013a26 <tcp_process+0x31e>
          return ERR_ABRT;
 8013a20:	f06f 030c 	mvn.w	r3, #12
 8013a24:	e250      	b.n	8013ec8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	8b5b      	ldrh	r3, [r3, #26]
 8013a2a:	f043 0302 	orr.w	r3, r3, #2
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013a34:	e23a      	b.n	8013eac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013a36:	4b9d      	ldr	r3, [pc, #628]	; (8013cac <tcp_process+0x5a4>)
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	f003 0310 	and.w	r3, r3, #16
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f000 8234 	beq.w	8013eac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a44:	4b9a      	ldr	r3, [pc, #616]	; (8013cb0 <tcp_process+0x5a8>)
 8013a46:	6819      	ldr	r1, [r3, #0]
 8013a48:	4b9a      	ldr	r3, [pc, #616]	; (8013cb4 <tcp_process+0x5ac>)
 8013a4a:	881b      	ldrh	r3, [r3, #0]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	4b9a      	ldr	r3, [pc, #616]	; (8013cb8 <tcp_process+0x5b0>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a54:	4b99      	ldr	r3, [pc, #612]	; (8013cbc <tcp_process+0x5b4>)
 8013a56:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a58:	885b      	ldrh	r3, [r3, #2]
 8013a5a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a5c:	4a97      	ldr	r2, [pc, #604]	; (8013cbc <tcp_process+0x5b4>)
 8013a5e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a60:	8812      	ldrh	r2, [r2, #0]
 8013a62:	b292      	uxth	r2, r2
 8013a64:	9202      	str	r2, [sp, #8]
 8013a66:	9301      	str	r3, [sp, #4]
 8013a68:	4b95      	ldr	r3, [pc, #596]	; (8013cc0 <tcp_process+0x5b8>)
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	4b95      	ldr	r3, [pc, #596]	; (8013cc4 <tcp_process+0x5bc>)
 8013a6e:	4602      	mov	r2, r0
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f002 fc91 	bl	8016398 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a7c:	2b05      	cmp	r3, #5
 8013a7e:	f200 8215 	bhi.w	8013eac <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f002 fa51 	bl	8015f30 <tcp_rexmit_rto>
      break;
 8013a8e:	e20d      	b.n	8013eac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013a90:	4b86      	ldr	r3, [pc, #536]	; (8013cac <tcp_process+0x5a4>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	f003 0310 	and.w	r3, r3, #16
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f000 80a1 	beq.w	8013be0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a9e:	4b84      	ldr	r3, [pc, #528]	; (8013cb0 <tcp_process+0x5a8>)
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aa6:	1ad3      	subs	r3, r2, r3
 8013aa8:	3b01      	subs	r3, #1
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	db7e      	blt.n	8013bac <tcp_process+0x4a4>
 8013aae:	4b80      	ldr	r3, [pc, #512]	; (8013cb0 <tcp_process+0x5a8>)
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ab6:	1ad3      	subs	r3, r2, r3
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dc77      	bgt.n	8013bac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2204      	movs	r2, #4
 8013ac0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d102      	bne.n	8013ad0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013aca:	23fa      	movs	r3, #250	; 0xfa
 8013acc:	76bb      	strb	r3, [r7, #26]
 8013ace:	e01d      	b.n	8013b0c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ad4:	699b      	ldr	r3, [r3, #24]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d106      	bne.n	8013ae8 <tcp_process+0x3e0>
 8013ada:	4b7b      	ldr	r3, [pc, #492]	; (8013cc8 <tcp_process+0x5c0>)
 8013adc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013ae0:	497a      	ldr	r1, [pc, #488]	; (8013ccc <tcp_process+0x5c4>)
 8013ae2:	487b      	ldr	r0, [pc, #492]	; (8013cd0 <tcp_process+0x5c8>)
 8013ae4:	f008 fa9c 	bl	801c020 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aec:	699b      	ldr	r3, [r3, #24]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00a      	beq.n	8013b08 <tcp_process+0x400>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013af6:	699b      	ldr	r3, [r3, #24]
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	6910      	ldr	r0, [r2, #16]
 8013afc:	2200      	movs	r2, #0
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4798      	blx	r3
 8013b02:	4603      	mov	r3, r0
 8013b04:	76bb      	strb	r3, [r7, #26]
 8013b06:	e001      	b.n	8013b0c <tcp_process+0x404>
 8013b08:	23f0      	movs	r3, #240	; 0xf0
 8013b0a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013b0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d00a      	beq.n	8013b2a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013b14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b18:	f113 0f0d 	cmn.w	r3, #13
 8013b1c:	d002      	beq.n	8013b24 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7fd ff94 	bl	8011a4c <tcp_abort>
            }
            return ERR_ABRT;
 8013b24:	f06f 030c 	mvn.w	r3, #12
 8013b28:	e1ce      	b.n	8013ec8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f000 fae0 	bl	80140f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013b30:	4b68      	ldr	r3, [pc, #416]	; (8013cd4 <tcp_process+0x5cc>)
 8013b32:	881b      	ldrh	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d005      	beq.n	8013b44 <tcp_process+0x43c>
            recv_acked--;
 8013b38:	4b66      	ldr	r3, [pc, #408]	; (8013cd4 <tcp_process+0x5cc>)
 8013b3a:	881b      	ldrh	r3, [r3, #0]
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	4b64      	ldr	r3, [pc, #400]	; (8013cd4 <tcp_process+0x5cc>)
 8013b42:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b48:	009a      	lsls	r2, r3, #2
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b4e:	005b      	lsls	r3, r3, #1
 8013b50:	f241 111c 	movw	r1, #4380	; 0x111c
 8013b54:	428b      	cmp	r3, r1
 8013b56:	bf38      	it	cc
 8013b58:	460b      	movcc	r3, r1
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d204      	bcs.n	8013b68 <tcp_process+0x460>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	e00d      	b.n	8013b84 <tcp_process+0x47c>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d904      	bls.n	8013b80 <tcp_process+0x478>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b7a:	005b      	lsls	r3, r3, #1
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	e001      	b.n	8013b84 <tcp_process+0x47c>
 8013b80:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013b8a:	4b53      	ldr	r3, [pc, #332]	; (8013cd8 <tcp_process+0x5d0>)
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	f003 0320 	and.w	r3, r3, #32
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d037      	beq.n	8013c06 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	8b5b      	ldrh	r3, [r3, #26]
 8013b9a:	f043 0302 	orr.w	r3, r3, #2
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2207      	movs	r2, #7
 8013ba8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013baa:	e02c      	b.n	8013c06 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bac:	4b40      	ldr	r3, [pc, #256]	; (8013cb0 <tcp_process+0x5a8>)
 8013bae:	6819      	ldr	r1, [r3, #0]
 8013bb0:	4b40      	ldr	r3, [pc, #256]	; (8013cb4 <tcp_process+0x5ac>)
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	4b40      	ldr	r3, [pc, #256]	; (8013cb8 <tcp_process+0x5b0>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bbc:	4b3f      	ldr	r3, [pc, #252]	; (8013cbc <tcp_process+0x5b4>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bc0:	885b      	ldrh	r3, [r3, #2]
 8013bc2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bc4:	4a3d      	ldr	r2, [pc, #244]	; (8013cbc <tcp_process+0x5b4>)
 8013bc6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bc8:	8812      	ldrh	r2, [r2, #0]
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	9202      	str	r2, [sp, #8]
 8013bce:	9301      	str	r3, [sp, #4]
 8013bd0:	4b3b      	ldr	r3, [pc, #236]	; (8013cc0 <tcp_process+0x5b8>)
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	4b3b      	ldr	r3, [pc, #236]	; (8013cc4 <tcp_process+0x5bc>)
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f002 fbdd 	bl	8016398 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013bde:	e167      	b.n	8013eb0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013be0:	4b32      	ldr	r3, [pc, #200]	; (8013cac <tcp_process+0x5a4>)
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	f003 0302 	and.w	r3, r3, #2
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	f000 8161 	beq.w	8013eb0 <tcp_process+0x7a8>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf2:	1e5a      	subs	r2, r3, #1
 8013bf4:	4b30      	ldr	r3, [pc, #192]	; (8013cb8 <tcp_process+0x5b0>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	f040 8159 	bne.w	8013eb0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f002 f9b8 	bl	8015f74 <tcp_rexmit>
      break;
 8013c04:	e154      	b.n	8013eb0 <tcp_process+0x7a8>
 8013c06:	e153      	b.n	8013eb0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 fa71 	bl	80140f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013c0e:	4b32      	ldr	r3, [pc, #200]	; (8013cd8 <tcp_process+0x5d0>)
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	f003 0320 	and.w	r3, r3, #32
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f000 814c 	beq.w	8013eb4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	8b5b      	ldrh	r3, [r3, #26]
 8013c20:	f043 0302 	orr.w	r3, r3, #2
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2207      	movs	r2, #7
 8013c2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013c30:	e140      	b.n	8013eb4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f000 fa5c 	bl	80140f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013c38:	4b27      	ldr	r3, [pc, #156]	; (8013cd8 <tcp_process+0x5d0>)
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	f003 0320 	and.w	r3, r3, #32
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d071      	beq.n	8013d28 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c44:	4b19      	ldr	r3, [pc, #100]	; (8013cac <tcp_process+0x5a4>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	f003 0310 	and.w	r3, r3, #16
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d060      	beq.n	8013d12 <tcp_process+0x60a>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c54:	4b16      	ldr	r3, [pc, #88]	; (8013cb0 <tcp_process+0x5a8>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d15a      	bne.n	8013d12 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d156      	bne.n	8013d12 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	8b5b      	ldrh	r3, [r3, #26]
 8013c68:	f043 0302 	orr.w	r3, r3, #2
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7fe fdbe 	bl	80127f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013c78:	4b18      	ldr	r3, [pc, #96]	; (8013cdc <tcp_process+0x5d4>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d105      	bne.n	8013c8e <tcp_process+0x586>
 8013c82:	4b16      	ldr	r3, [pc, #88]	; (8013cdc <tcp_process+0x5d4>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	4a14      	ldr	r2, [pc, #80]	; (8013cdc <tcp_process+0x5d4>)
 8013c8a:	6013      	str	r3, [r2, #0]
 8013c8c:	e02e      	b.n	8013cec <tcp_process+0x5e4>
 8013c8e:	4b13      	ldr	r3, [pc, #76]	; (8013cdc <tcp_process+0x5d4>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	617b      	str	r3, [r7, #20]
 8013c94:	e027      	b.n	8013ce6 <tcp_process+0x5de>
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d11f      	bne.n	8013ce0 <tcp_process+0x5d8>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	68da      	ldr	r2, [r3, #12]
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	60da      	str	r2, [r3, #12]
 8013ca8:	e020      	b.n	8013cec <tcp_process+0x5e4>
 8013caa:	bf00      	nop
 8013cac:	20001064 	.word	0x20001064
 8013cb0:	2000105c 	.word	0x2000105c
 8013cb4:	20001062 	.word	0x20001062
 8013cb8:	20001058 	.word	0x20001058
 8013cbc:	20001048 	.word	0x20001048
 8013cc0:	200051b0 	.word	0x200051b0
 8013cc4:	200051b4 	.word	0x200051b4
 8013cc8:	0802284c 	.word	0x0802284c
 8013ccc:	08022aec 	.word	0x08022aec
 8013cd0:	08022898 	.word	0x08022898
 8013cd4:	20001060 	.word	0x20001060
 8013cd8:	20001065 	.word	0x20001065
 8013cdc:	200082c4 	.word	0x200082c4
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	617b      	str	r3, [r7, #20]
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1d4      	bne.n	8013c96 <tcp_process+0x58e>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	60da      	str	r2, [r3, #12]
 8013cf2:	4b77      	ldr	r3, [pc, #476]	; (8013ed0 <tcp_process+0x7c8>)
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	220a      	movs	r2, #10
 8013cfc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013cfe:	4b75      	ldr	r3, [pc, #468]	; (8013ed4 <tcp_process+0x7cc>)
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	60da      	str	r2, [r3, #12]
 8013d06:	4a73      	ldr	r2, [pc, #460]	; (8013ed4 <tcp_process+0x7cc>)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6013      	str	r3, [r2, #0]
 8013d0c:	f002 fd04 	bl	8016718 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013d10:	e0d2      	b.n	8013eb8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	8b5b      	ldrh	r3, [r3, #26]
 8013d16:	f043 0302 	orr.w	r3, r3, #2
 8013d1a:	b29a      	uxth	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2208      	movs	r2, #8
 8013d24:	751a      	strb	r2, [r3, #20]
      break;
 8013d26:	e0c7      	b.n	8013eb8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d28:	4b6b      	ldr	r3, [pc, #428]	; (8013ed8 <tcp_process+0x7d0>)
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	f003 0310 	and.w	r3, r3, #16
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f000 80c1 	beq.w	8013eb8 <tcp_process+0x7b0>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d3a:	4b68      	ldr	r3, [pc, #416]	; (8013edc <tcp_process+0x7d4>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	f040 80ba 	bne.w	8013eb8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f040 80b5 	bne.w	8013eb8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2206      	movs	r2, #6
 8013d52:	751a      	strb	r2, [r3, #20]
      break;
 8013d54:	e0b0      	b.n	8013eb8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f000 f9ca 	bl	80140f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013d5c:	4b60      	ldr	r3, [pc, #384]	; (8013ee0 <tcp_process+0x7d8>)
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	f003 0320 	and.w	r3, r3, #32
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 80a9 	beq.w	8013ebc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	8b5b      	ldrh	r3, [r3, #26]
 8013d6e:	f043 0302 	orr.w	r3, r3, #2
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f7fe fd3b 	bl	80127f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013d7e:	4b59      	ldr	r3, [pc, #356]	; (8013ee4 <tcp_process+0x7dc>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d105      	bne.n	8013d94 <tcp_process+0x68c>
 8013d88:	4b56      	ldr	r3, [pc, #344]	; (8013ee4 <tcp_process+0x7dc>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	4a55      	ldr	r2, [pc, #340]	; (8013ee4 <tcp_process+0x7dc>)
 8013d90:	6013      	str	r3, [r2, #0]
 8013d92:	e013      	b.n	8013dbc <tcp_process+0x6b4>
 8013d94:	4b53      	ldr	r3, [pc, #332]	; (8013ee4 <tcp_process+0x7dc>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	613b      	str	r3, [r7, #16]
 8013d9a:	e00c      	b.n	8013db6 <tcp_process+0x6ae>
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d104      	bne.n	8013db0 <tcp_process+0x6a8>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	68da      	ldr	r2, [r3, #12]
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	60da      	str	r2, [r3, #12]
 8013dae:	e005      	b.n	8013dbc <tcp_process+0x6b4>
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1ef      	bne.n	8013d9c <tcp_process+0x694>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	60da      	str	r2, [r3, #12]
 8013dc2:	4b43      	ldr	r3, [pc, #268]	; (8013ed0 <tcp_process+0x7c8>)
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	220a      	movs	r2, #10
 8013dcc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013dce:	4b41      	ldr	r3, [pc, #260]	; (8013ed4 <tcp_process+0x7cc>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	60da      	str	r2, [r3, #12]
 8013dd6:	4a3f      	ldr	r2, [pc, #252]	; (8013ed4 <tcp_process+0x7cc>)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6013      	str	r3, [r2, #0]
 8013ddc:	f002 fc9c 	bl	8016718 <tcp_timer_needed>
      }
      break;
 8013de0:	e06c      	b.n	8013ebc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f000 f984 	bl	80140f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013de8:	4b3b      	ldr	r3, [pc, #236]	; (8013ed8 <tcp_process+0x7d0>)
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	f003 0310 	and.w	r3, r3, #16
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d065      	beq.n	8013ec0 <tcp_process+0x7b8>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013df8:	4b38      	ldr	r3, [pc, #224]	; (8013edc <tcp_process+0x7d4>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d15f      	bne.n	8013ec0 <tcp_process+0x7b8>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d15b      	bne.n	8013ec0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7fe fcf3 	bl	80127f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013e0e:	4b35      	ldr	r3, [pc, #212]	; (8013ee4 <tcp_process+0x7dc>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d105      	bne.n	8013e24 <tcp_process+0x71c>
 8013e18:	4b32      	ldr	r3, [pc, #200]	; (8013ee4 <tcp_process+0x7dc>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	4a31      	ldr	r2, [pc, #196]	; (8013ee4 <tcp_process+0x7dc>)
 8013e20:	6013      	str	r3, [r2, #0]
 8013e22:	e013      	b.n	8013e4c <tcp_process+0x744>
 8013e24:	4b2f      	ldr	r3, [pc, #188]	; (8013ee4 <tcp_process+0x7dc>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	60fb      	str	r3, [r7, #12]
 8013e2a:	e00c      	b.n	8013e46 <tcp_process+0x73e>
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d104      	bne.n	8013e40 <tcp_process+0x738>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	68da      	ldr	r2, [r3, #12]
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	60da      	str	r2, [r3, #12]
 8013e3e:	e005      	b.n	8013e4c <tcp_process+0x744>
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	60fb      	str	r3, [r7, #12]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d1ef      	bne.n	8013e2c <tcp_process+0x724>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	60da      	str	r2, [r3, #12]
 8013e52:	4b1f      	ldr	r3, [pc, #124]	; (8013ed0 <tcp_process+0x7c8>)
 8013e54:	2201      	movs	r2, #1
 8013e56:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	220a      	movs	r2, #10
 8013e5c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013e5e:	4b1d      	ldr	r3, [pc, #116]	; (8013ed4 <tcp_process+0x7cc>)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	60da      	str	r2, [r3, #12]
 8013e66:	4a1b      	ldr	r2, [pc, #108]	; (8013ed4 <tcp_process+0x7cc>)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6013      	str	r3, [r2, #0]
 8013e6c:	f002 fc54 	bl	8016718 <tcp_timer_needed>
      }
      break;
 8013e70:	e026      	b.n	8013ec0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 f93c 	bl	80140f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013e78:	4b17      	ldr	r3, [pc, #92]	; (8013ed8 <tcp_process+0x7d0>)
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	f003 0310 	and.w	r3, r3, #16
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d01f      	beq.n	8013ec4 <tcp_process+0x7bc>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e88:	4b14      	ldr	r3, [pc, #80]	; (8013edc <tcp_process+0x7d4>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d119      	bne.n	8013ec4 <tcp_process+0x7bc>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d115      	bne.n	8013ec4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013e98:	4b11      	ldr	r3, [pc, #68]	; (8013ee0 <tcp_process+0x7d8>)
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	f043 0310 	orr.w	r3, r3, #16
 8013ea0:	b2da      	uxtb	r2, r3
 8013ea2:	4b0f      	ldr	r3, [pc, #60]	; (8013ee0 <tcp_process+0x7d8>)
 8013ea4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013ea6:	e00d      	b.n	8013ec4 <tcp_process+0x7bc>
    default:
      break;
 8013ea8:	bf00      	nop
 8013eaa:	e00c      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013eac:	bf00      	nop
 8013eae:	e00a      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013eb0:	bf00      	nop
 8013eb2:	e008      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013eb4:	bf00      	nop
 8013eb6:	e006      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013eb8:	bf00      	nop
 8013eba:	e004      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013ebc:	bf00      	nop
 8013ebe:	e002      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013ec0:	bf00      	nop
 8013ec2:	e000      	b.n	8013ec6 <tcp_process+0x7be>
      break;
 8013ec4:	bf00      	nop
  }
  return ERR_OK;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3724      	adds	r7, #36	; 0x24
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd90      	pop	{r4, r7, pc}
 8013ed0:	200082c0 	.word	0x200082c0
 8013ed4:	200082d4 	.word	0x200082d4
 8013ed8:	20001064 	.word	0x20001064
 8013edc:	2000105c 	.word	0x2000105c
 8013ee0:	20001065 	.word	0x20001065
 8013ee4:	200082c4 	.word	0x200082c4

08013ee8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b085      	sub	sp, #20
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d106      	bne.n	8013f06 <tcp_oos_insert_segment+0x1e>
 8013ef8:	4b3b      	ldr	r3, [pc, #236]	; (8013fe8 <tcp_oos_insert_segment+0x100>)
 8013efa:	f240 421f 	movw	r2, #1055	; 0x41f
 8013efe:	493b      	ldr	r1, [pc, #236]	; (8013fec <tcp_oos_insert_segment+0x104>)
 8013f00:	483b      	ldr	r0, [pc, #236]	; (8013ff0 <tcp_oos_insert_segment+0x108>)
 8013f02:	f008 f88d 	bl	801c020 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	899b      	ldrh	r3, [r3, #12]
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fb fd74 	bl	800f9fc <lwip_htons>
 8013f14:	4603      	mov	r3, r0
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	f003 0301 	and.w	r3, r3, #1
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d028      	beq.n	8013f72 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013f20:	6838      	ldr	r0, [r7, #0]
 8013f22:	f7fe fa67 	bl	80123f4 <tcp_segs_free>
    next = NULL;
 8013f26:	2300      	movs	r3, #0
 8013f28:	603b      	str	r3, [r7, #0]
 8013f2a:	e056      	b.n	8013fda <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	68db      	ldr	r3, [r3, #12]
 8013f30:	899b      	ldrh	r3, [r3, #12]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fb fd61 	bl	800f9fc <lwip_htons>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	f003 0301 	and.w	r3, r3, #1
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00d      	beq.n	8013f62 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	899b      	ldrh	r3, [r3, #12]
 8013f4c:	b29c      	uxth	r4, r3
 8013f4e:	2001      	movs	r0, #1
 8013f50:	f7fb fd54 	bl	800f9fc <lwip_htons>
 8013f54:	4603      	mov	r3, r0
 8013f56:	461a      	mov	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	4322      	orrs	r2, r4
 8013f5e:	b292      	uxth	r2, r2
 8013f60:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f7fe fa55 	bl	801241c <tcp_seg_free>
    while (next &&
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00e      	beq.n	8013f96 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	891b      	ldrh	r3, [r3, #8]
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	4b1d      	ldr	r3, [pc, #116]	; (8013ff4 <tcp_oos_insert_segment+0x10c>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	441a      	add	r2, r3
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	6839      	ldr	r1, [r7, #0]
 8013f8c:	8909      	ldrh	r1, [r1, #8]
 8013f8e:	440b      	add	r3, r1
 8013f90:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	daca      	bge.n	8013f2c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d01e      	beq.n	8013fda <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	891b      	ldrh	r3, [r3, #8]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	4b14      	ldr	r3, [pc, #80]	; (8013ff4 <tcp_oos_insert_segment+0x10c>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	441a      	add	r2, r3
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	dd12      	ble.n	8013fda <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	4b0d      	ldr	r3, [pc, #52]	; (8013ff4 <tcp_oos_insert_segment+0x10c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	1ad3      	subs	r3, r2, r3
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	891b      	ldrh	r3, [r3, #8]
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	f7fc fe23 	bl	8010c20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	601a      	str	r2, [r3, #0]
}
 8013fe0:	bf00      	nop
 8013fe2:	3714      	adds	r7, #20
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd90      	pop	{r4, r7, pc}
 8013fe8:	0802284c 	.word	0x0802284c
 8013fec:	08022b0c 	.word	0x08022b0c
 8013ff0:	08022898 	.word	0x08022898
 8013ff4:	20001058 	.word	0x20001058

08013ff8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013ff8:	b5b0      	push	{r4, r5, r7, lr}
 8013ffa:	b086      	sub	sp, #24
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014006:	e03e      	b.n	8014086 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	4618      	mov	r0, r3
 8014018:	f7fd f810 	bl	801103c <pbuf_clen>
 801401c:	4603      	mov	r3, r0
 801401e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014026:	8a7a      	ldrh	r2, [r7, #18]
 8014028:	429a      	cmp	r2, r3
 801402a:	d906      	bls.n	801403a <tcp_free_acked_segments+0x42>
 801402c:	4b2a      	ldr	r3, [pc, #168]	; (80140d8 <tcp_free_acked_segments+0xe0>)
 801402e:	f240 4257 	movw	r2, #1111	; 0x457
 8014032:	492a      	ldr	r1, [pc, #168]	; (80140dc <tcp_free_acked_segments+0xe4>)
 8014034:	482a      	ldr	r0, [pc, #168]	; (80140e0 <tcp_free_acked_segments+0xe8>)
 8014036:	f007 fff3 	bl	801c020 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014040:	8a7b      	ldrh	r3, [r7, #18]
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	b29a      	uxth	r2, r3
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	891a      	ldrh	r2, [r3, #8]
 8014050:	4b24      	ldr	r3, [pc, #144]	; (80140e4 <tcp_free_acked_segments+0xec>)
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	4413      	add	r3, r2
 8014056:	b29a      	uxth	r2, r3
 8014058:	4b22      	ldr	r3, [pc, #136]	; (80140e4 <tcp_free_acked_segments+0xec>)
 801405a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801405c:	6978      	ldr	r0, [r7, #20]
 801405e:	f7fe f9dd 	bl	801241c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00c      	beq.n	8014086 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d109      	bne.n	8014086 <tcp_free_acked_segments+0x8e>
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d106      	bne.n	8014086 <tcp_free_acked_segments+0x8e>
 8014078:	4b17      	ldr	r3, [pc, #92]	; (80140d8 <tcp_free_acked_segments+0xe0>)
 801407a:	f240 4262 	movw	r2, #1122	; 0x462
 801407e:	491a      	ldr	r1, [pc, #104]	; (80140e8 <tcp_free_acked_segments+0xf0>)
 8014080:	4817      	ldr	r0, [pc, #92]	; (80140e0 <tcp_free_acked_segments+0xe8>)
 8014082:	f007 ffcd 	bl	801c020 <iprintf>
  while (seg_list != NULL &&
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d020      	beq.n	80140ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	4618      	mov	r0, r3
 8014094:	f7fb fcc7 	bl	800fa26 <lwip_htonl>
 8014098:	4604      	mov	r4, r0
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	891b      	ldrh	r3, [r3, #8]
 801409e:	461d      	mov	r5, r3
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	899b      	ldrh	r3, [r3, #12]
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7fb fca7 	bl	800f9fc <lwip_htons>
 80140ae:	4603      	mov	r3, r0
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	f003 0303 	and.w	r3, r3, #3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d001      	beq.n	80140be <tcp_free_acked_segments+0xc6>
 80140ba:	2301      	movs	r3, #1
 80140bc:	e000      	b.n	80140c0 <tcp_free_acked_segments+0xc8>
 80140be:	2300      	movs	r3, #0
 80140c0:	442b      	add	r3, r5
 80140c2:	18e2      	adds	r2, r4, r3
 80140c4:	4b09      	ldr	r3, [pc, #36]	; (80140ec <tcp_free_acked_segments+0xf4>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	dd9c      	ble.n	8014008 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80140ce:	68bb      	ldr	r3, [r7, #8]
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3718      	adds	r7, #24
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bdb0      	pop	{r4, r5, r7, pc}
 80140d8:	0802284c 	.word	0x0802284c
 80140dc:	08022b34 	.word	0x08022b34
 80140e0:	08022898 	.word	0x08022898
 80140e4:	20001060 	.word	0x20001060
 80140e8:	08022b5c 	.word	0x08022b5c
 80140ec:	2000105c 	.word	0x2000105c

080140f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80140f0:	b5b0      	push	{r4, r5, r7, lr}
 80140f2:	b094      	sub	sp, #80	; 0x50
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80140f8:	2300      	movs	r3, #0
 80140fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d106      	bne.n	8014110 <tcp_receive+0x20>
 8014102:	4ba6      	ldr	r3, [pc, #664]	; (801439c <tcp_receive+0x2ac>)
 8014104:	f240 427b 	movw	r2, #1147	; 0x47b
 8014108:	49a5      	ldr	r1, [pc, #660]	; (80143a0 <tcp_receive+0x2b0>)
 801410a:	48a6      	ldr	r0, [pc, #664]	; (80143a4 <tcp_receive+0x2b4>)
 801410c:	f007 ff88 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	7d1b      	ldrb	r3, [r3, #20]
 8014114:	2b03      	cmp	r3, #3
 8014116:	d806      	bhi.n	8014126 <tcp_receive+0x36>
 8014118:	4ba0      	ldr	r3, [pc, #640]	; (801439c <tcp_receive+0x2ac>)
 801411a:	f240 427c 	movw	r2, #1148	; 0x47c
 801411e:	49a2      	ldr	r1, [pc, #648]	; (80143a8 <tcp_receive+0x2b8>)
 8014120:	48a0      	ldr	r0, [pc, #640]	; (80143a4 <tcp_receive+0x2b4>)
 8014122:	f007 ff7d 	bl	801c020 <iprintf>

  if (flags & TCP_ACK) {
 8014126:	4ba1      	ldr	r3, [pc, #644]	; (80143ac <tcp_receive+0x2bc>)
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 0310 	and.w	r3, r3, #16
 801412e:	2b00      	cmp	r3, #0
 8014130:	f000 8263 	beq.w	80145fa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801413a:	461a      	mov	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014140:	4413      	add	r3, r2
 8014142:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014148:	4b99      	ldr	r3, [pc, #612]	; (80143b0 <tcp_receive+0x2c0>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	2b00      	cmp	r3, #0
 8014150:	db1b      	blt.n	801418a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014156:	4b96      	ldr	r3, [pc, #600]	; (80143b0 <tcp_receive+0x2c0>)
 8014158:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801415a:	429a      	cmp	r2, r3
 801415c:	d106      	bne.n	801416c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014162:	4b94      	ldr	r3, [pc, #592]	; (80143b4 <tcp_receive+0x2c4>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	1ad3      	subs	r3, r2, r3
 8014168:	2b00      	cmp	r3, #0
 801416a:	db0e      	blt.n	801418a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014170:	4b90      	ldr	r3, [pc, #576]	; (80143b4 <tcp_receive+0x2c4>)
 8014172:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014174:	429a      	cmp	r2, r3
 8014176:	d125      	bne.n	80141c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014178:	4b8f      	ldr	r3, [pc, #572]	; (80143b8 <tcp_receive+0x2c8>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	89db      	ldrh	r3, [r3, #14]
 801417e:	b29a      	uxth	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014186:	429a      	cmp	r2, r3
 8014188:	d91c      	bls.n	80141c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801418a:	4b8b      	ldr	r3, [pc, #556]	; (80143b8 <tcp_receive+0x2c8>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	89db      	ldrh	r3, [r3, #14]
 8014190:	b29a      	uxth	r2, r3
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d205      	bcs.n	80141b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80141b4:	4b7e      	ldr	r3, [pc, #504]	; (80143b0 <tcp_receive+0x2c0>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80141bc:	4b7d      	ldr	r3, [pc, #500]	; (80143b4 <tcp_receive+0x2c4>)
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80141c4:	4b7b      	ldr	r3, [pc, #492]	; (80143b4 <tcp_receive+0x2c4>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	dc58      	bgt.n	8014284 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80141d2:	4b7a      	ldr	r3, [pc, #488]	; (80143bc <tcp_receive+0x2cc>)
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d14b      	bne.n	8014272 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80141e4:	4413      	add	r3, r2
 80141e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d142      	bne.n	8014272 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	db3d      	blt.n	8014272 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141fa:	4b6e      	ldr	r3, [pc, #440]	; (80143b4 <tcp_receive+0x2c4>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	429a      	cmp	r2, r3
 8014200:	d137      	bne.n	8014272 <tcp_receive+0x182>
              found_dupack = 1;
 8014202:	2301      	movs	r3, #1
 8014204:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801420c:	2bff      	cmp	r3, #255	; 0xff
 801420e:	d007      	beq.n	8014220 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014216:	3301      	adds	r3, #1
 8014218:	b2da      	uxtb	r2, r3
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014226:	2b03      	cmp	r3, #3
 8014228:	d91b      	bls.n	8014262 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014234:	4413      	add	r3, r2
 8014236:	b29a      	uxth	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801423e:	429a      	cmp	r2, r3
 8014240:	d30a      	bcc.n	8014258 <tcp_receive+0x168>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801424c:	4413      	add	r3, r2
 801424e:	b29a      	uxth	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014256:	e004      	b.n	8014262 <tcp_receive+0x172>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801425e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014268:	2b02      	cmp	r3, #2
 801426a:	d902      	bls.n	8014272 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f001 feed 	bl	801604c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014274:	2b00      	cmp	r3, #0
 8014276:	f040 8160 	bne.w	801453a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2200      	movs	r2, #0
 801427e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014282:	e15a      	b.n	801453a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014284:	4b4b      	ldr	r3, [pc, #300]	; (80143b4 <tcp_receive+0x2c4>)
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801428c:	1ad3      	subs	r3, r2, r3
 801428e:	3b01      	subs	r3, #1
 8014290:	2b00      	cmp	r3, #0
 8014292:	f2c0 814d 	blt.w	8014530 <tcp_receive+0x440>
 8014296:	4b47      	ldr	r3, [pc, #284]	; (80143b4 <tcp_receive+0x2c4>)
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801429e:	1ad3      	subs	r3, r2, r3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	f300 8145 	bgt.w	8014530 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	8b5b      	ldrh	r3, [r3, #26]
 80142aa:	f003 0304 	and.w	r3, r3, #4
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d010      	beq.n	80142d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8b5b      	ldrh	r3, [r3, #26]
 80142b6:	f023 0304 	bic.w	r3, r3, #4
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142e2:	10db      	asrs	r3, r3, #3
 80142e4:	b21b      	sxth	r3, r3
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	4413      	add	r3, r2
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	b21a      	sxth	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80142fc:	4b2d      	ldr	r3, [pc, #180]	; (80143b4 <tcp_receive+0x2c4>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	b29a      	uxth	r2, r3
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014306:	b29b      	uxth	r3, r3
 8014308:	1ad3      	subs	r3, r2, r3
 801430a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2200      	movs	r2, #0
 8014310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014314:	4b27      	ldr	r3, [pc, #156]	; (80143b4 <tcp_receive+0x2c4>)
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	7d1b      	ldrb	r3, [r3, #20]
 8014320:	2b03      	cmp	r3, #3
 8014322:	f240 8096 	bls.w	8014452 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014332:	429a      	cmp	r2, r3
 8014334:	d244      	bcs.n	80143c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	8b5b      	ldrh	r3, [r3, #26]
 801433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801433e:	2b00      	cmp	r3, #0
 8014340:	d001      	beq.n	8014346 <tcp_receive+0x256>
 8014342:	2301      	movs	r3, #1
 8014344:	e000      	b.n	8014348 <tcp_receive+0x258>
 8014346:	2302      	movs	r3, #2
 8014348:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801434c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014350:	b29a      	uxth	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014356:	fb12 f303 	smulbb	r3, r2, r3
 801435a:	b29b      	uxth	r3, r3
 801435c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801435e:	4293      	cmp	r3, r2
 8014360:	bf28      	it	cs
 8014362:	4613      	movcs	r3, r2
 8014364:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801436c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801436e:	4413      	add	r3, r2
 8014370:	b29a      	uxth	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014378:	429a      	cmp	r2, r3
 801437a:	d309      	bcc.n	8014390 <tcp_receive+0x2a0>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014384:	4413      	add	r3, r2
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801438e:	e060      	b.n	8014452 <tcp_receive+0x362>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801439a:	e05a      	b.n	8014452 <tcp_receive+0x362>
 801439c:	0802284c 	.word	0x0802284c
 80143a0:	08022b7c 	.word	0x08022b7c
 80143a4:	08022898 	.word	0x08022898
 80143a8:	08022b98 	.word	0x08022b98
 80143ac:	20001064 	.word	0x20001064
 80143b0:	20001058 	.word	0x20001058
 80143b4:	2000105c 	.word	0x2000105c
 80143b8:	20001048 	.word	0x20001048
 80143bc:	20001062 	.word	0x20001062
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143c8:	4413      	add	r3, r2
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d309      	bcc.n	80143ea <tcp_receive+0x2fa>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143de:	4413      	add	r3, r2
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80143e8:	e004      	b.n	80143f4 <tcp_receive+0x304>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014400:	429a      	cmp	r2, r3
 8014402:	d326      	bcc.n	8014452 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014410:	1ad3      	subs	r3, r2, r3
 8014412:	b29a      	uxth	r2, r3
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014424:	4413      	add	r3, r2
 8014426:	b29a      	uxth	r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801442e:	429a      	cmp	r2, r3
 8014430:	d30a      	bcc.n	8014448 <tcp_receive+0x358>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801443c:	4413      	add	r3, r2
 801443e:	b29a      	uxth	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014446:	e004      	b.n	8014452 <tcp_receive+0x362>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801444e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801445a:	4a98      	ldr	r2, [pc, #608]	; (80146bc <tcp_receive+0x5cc>)
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff fdcb 	bl	8013ff8 <tcp_free_acked_segments>
 8014462:	4602      	mov	r2, r0
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014470:	4a93      	ldr	r2, [pc, #588]	; (80146c0 <tcp_receive+0x5d0>)
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f7ff fdc0 	bl	8013ff8 <tcp_free_acked_segments>
 8014478:	4602      	mov	r2, r0
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014482:	2b00      	cmp	r3, #0
 8014484:	d104      	bne.n	8014490 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801448c:	861a      	strh	r2, [r3, #48]	; 0x30
 801448e:	e002      	b.n	8014496 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d103      	bne.n	80144ac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80144b2:	4b84      	ldr	r3, [pc, #528]	; (80146c4 <tcp_receive+0x5d4>)
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	4413      	add	r3, r2
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	8b5b      	ldrh	r3, [r3, #26]
 80144c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d035      	beq.n	8014538 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d118      	bne.n	8014506 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00c      	beq.n	80144f6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fb fa9c 	bl	800fa26 <lwip_htonl>
 80144ee:	4603      	mov	r3, r0
 80144f0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	dc20      	bgt.n	8014538 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	8b5b      	ldrh	r3, [r3, #26]
 80144fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80144fe:	b29a      	uxth	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014504:	e018      	b.n	8014538 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	4618      	mov	r0, r3
 8014514:	f7fb fa87 	bl	800fa26 <lwip_htonl>
 8014518:	4603      	mov	r3, r0
 801451a:	1ae3      	subs	r3, r4, r3
 801451c:	2b00      	cmp	r3, #0
 801451e:	dc0b      	bgt.n	8014538 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	8b5b      	ldrh	r3, [r3, #26]
 8014524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014528:	b29a      	uxth	r2, r3
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801452e:	e003      	b.n	8014538 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f001 ff81 	bl	8016438 <tcp_send_empty_ack>
 8014536:	e000      	b.n	801453a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014538:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801453e:	2b00      	cmp	r3, #0
 8014540:	d05b      	beq.n	80145fa <tcp_receive+0x50a>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014546:	4b60      	ldr	r3, [pc, #384]	; (80146c8 <tcp_receive+0x5d8>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	2b00      	cmp	r3, #0
 801454e:	da54      	bge.n	80145fa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014550:	4b5e      	ldr	r3, [pc, #376]	; (80146cc <tcp_receive+0x5dc>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	b29a      	uxth	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801455a:	b29b      	uxth	r3, r3
 801455c:	1ad3      	subs	r3, r2, r3
 801455e:	b29b      	uxth	r3, r3
 8014560:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014564:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801456e:	10db      	asrs	r3, r3, #3
 8014570:	b21b      	sxth	r3, r3
 8014572:	b29b      	uxth	r3, r3
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	b29b      	uxth	r3, r3
 8014578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014582:	b29a      	uxth	r2, r3
 8014584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014588:	4413      	add	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	b21a      	sxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014592:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014596:	2b00      	cmp	r3, #0
 8014598:	da05      	bge.n	80145a6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801459a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801459e:	425b      	negs	r3, r3
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80145a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145b0:	109b      	asrs	r3, r3, #2
 80145b2:	b21b      	sxth	r3, r3
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	1ad3      	subs	r3, r2, r3
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80145ca:	4413      	add	r3, r2
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	b21a      	sxth	r2, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145da:	10db      	asrs	r3, r3, #3
 80145dc:	b21b      	sxth	r3, r3
 80145de:	b29a      	uxth	r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4413      	add	r3, r2
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	b21a      	sxth	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2200      	movs	r2, #0
 80145f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80145fa:	4b35      	ldr	r3, [pc, #212]	; (80146d0 <tcp_receive+0x5e0>)
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	f000 84e1 	beq.w	8014fc6 <tcp_receive+0xed6>
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	7d1b      	ldrb	r3, [r3, #20]
 8014608:	2b06      	cmp	r3, #6
 801460a:	f200 84dc 	bhi.w	8014fc6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014612:	4b30      	ldr	r3, [pc, #192]	; (80146d4 <tcp_receive+0x5e4>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	1ad3      	subs	r3, r2, r3
 8014618:	3b01      	subs	r3, #1
 801461a:	2b00      	cmp	r3, #0
 801461c:	f2c0 808e 	blt.w	801473c <tcp_receive+0x64c>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014624:	4b2a      	ldr	r3, [pc, #168]	; (80146d0 <tcp_receive+0x5e0>)
 8014626:	881b      	ldrh	r3, [r3, #0]
 8014628:	4619      	mov	r1, r3
 801462a:	4b2a      	ldr	r3, [pc, #168]	; (80146d4 <tcp_receive+0x5e4>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	440b      	add	r3, r1
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	3301      	adds	r3, #1
 8014634:	2b00      	cmp	r3, #0
 8014636:	f300 8081 	bgt.w	801473c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801463a:	4b27      	ldr	r3, [pc, #156]	; (80146d8 <tcp_receive+0x5e8>)
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014644:	4b23      	ldr	r3, [pc, #140]	; (80146d4 <tcp_receive+0x5e4>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801464c:	4b22      	ldr	r3, [pc, #136]	; (80146d8 <tcp_receive+0x5e8>)
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d106      	bne.n	8014662 <tcp_receive+0x572>
 8014654:	4b21      	ldr	r3, [pc, #132]	; (80146dc <tcp_receive+0x5ec>)
 8014656:	f240 5294 	movw	r2, #1428	; 0x594
 801465a:	4921      	ldr	r1, [pc, #132]	; (80146e0 <tcp_receive+0x5f0>)
 801465c:	4821      	ldr	r0, [pc, #132]	; (80146e4 <tcp_receive+0x5f4>)
 801465e:	f007 fcdf 	bl	801c020 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014668:	4293      	cmp	r3, r2
 801466a:	d906      	bls.n	801467a <tcp_receive+0x58a>
 801466c:	4b1b      	ldr	r3, [pc, #108]	; (80146dc <tcp_receive+0x5ec>)
 801466e:	f240 5295 	movw	r2, #1429	; 0x595
 8014672:	491d      	ldr	r1, [pc, #116]	; (80146e8 <tcp_receive+0x5f8>)
 8014674:	481b      	ldr	r0, [pc, #108]	; (80146e4 <tcp_receive+0x5f4>)
 8014676:	f007 fcd3 	bl	801c020 <iprintf>
      off = (u16_t)off32;
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014680:	4b15      	ldr	r3, [pc, #84]	; (80146d8 <tcp_receive+0x5e8>)
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	891b      	ldrh	r3, [r3, #8]
 8014686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801468a:	429a      	cmp	r2, r3
 801468c:	d906      	bls.n	801469c <tcp_receive+0x5ac>
 801468e:	4b13      	ldr	r3, [pc, #76]	; (80146dc <tcp_receive+0x5ec>)
 8014690:	f240 5297 	movw	r2, #1431	; 0x597
 8014694:	4915      	ldr	r1, [pc, #84]	; (80146ec <tcp_receive+0x5fc>)
 8014696:	4813      	ldr	r0, [pc, #76]	; (80146e4 <tcp_receive+0x5f4>)
 8014698:	f007 fcc2 	bl	801c020 <iprintf>
      inseg.len -= off;
 801469c:	4b0e      	ldr	r3, [pc, #56]	; (80146d8 <tcp_receive+0x5e8>)
 801469e:	891a      	ldrh	r2, [r3, #8]
 80146a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	4b0b      	ldr	r3, [pc, #44]	; (80146d8 <tcp_receive+0x5e8>)
 80146aa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80146ac:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <tcp_receive+0x5e8>)
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	891a      	ldrh	r2, [r3, #8]
 80146b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146b6:	1ad3      	subs	r3, r2, r3
 80146b8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80146ba:	e029      	b.n	8014710 <tcp_receive+0x620>
 80146bc:	08022bb4 	.word	0x08022bb4
 80146c0:	08022bbc 	.word	0x08022bbc
 80146c4:	20001060 	.word	0x20001060
 80146c8:	2000105c 	.word	0x2000105c
 80146cc:	200082c8 	.word	0x200082c8
 80146d0:	20001062 	.word	0x20001062
 80146d4:	20001058 	.word	0x20001058
 80146d8:	20001038 	.word	0x20001038
 80146dc:	0802284c 	.word	0x0802284c
 80146e0:	08022bc4 	.word	0x08022bc4
 80146e4:	08022898 	.word	0x08022898
 80146e8:	08022bd4 	.word	0x08022bd4
 80146ec:	08022be4 	.word	0x08022be4
        off -= p->len;
 80146f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146f2:	895b      	ldrh	r3, [r3, #10]
 80146f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80146fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014700:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014702:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014706:	2200      	movs	r2, #0
 8014708:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801470a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014712:	895b      	ldrh	r3, [r3, #10]
 8014714:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014718:	429a      	cmp	r2, r3
 801471a:	d8e9      	bhi.n	80146f0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801471c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014720:	4619      	mov	r1, r3
 8014722:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014724:	f7fc fb7c 	bl	8010e20 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472c:	4a91      	ldr	r2, [pc, #580]	; (8014974 <tcp_receive+0x884>)
 801472e:	6013      	str	r3, [r2, #0]
 8014730:	4b91      	ldr	r3, [pc, #580]	; (8014978 <tcp_receive+0x888>)
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	4a8f      	ldr	r2, [pc, #572]	; (8014974 <tcp_receive+0x884>)
 8014736:	6812      	ldr	r2, [r2, #0]
 8014738:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801473a:	e00d      	b.n	8014758 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801473c:	4b8d      	ldr	r3, [pc, #564]	; (8014974 <tcp_receive+0x884>)
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014744:	1ad3      	subs	r3, r2, r3
 8014746:	2b00      	cmp	r3, #0
 8014748:	da06      	bge.n	8014758 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	8b5b      	ldrh	r3, [r3, #26]
 801474e:	f043 0302 	orr.w	r3, r3, #2
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014758:	4b86      	ldr	r3, [pc, #536]	; (8014974 <tcp_receive+0x884>)
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014760:	1ad3      	subs	r3, r2, r3
 8014762:	2b00      	cmp	r3, #0
 8014764:	f2c0 842a 	blt.w	8014fbc <tcp_receive+0xecc>
 8014768:	4b82      	ldr	r3, [pc, #520]	; (8014974 <tcp_receive+0x884>)
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014770:	6879      	ldr	r1, [r7, #4]
 8014772:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014774:	440b      	add	r3, r1
 8014776:	1ad3      	subs	r3, r2, r3
 8014778:	3301      	adds	r3, #1
 801477a:	2b00      	cmp	r3, #0
 801477c:	f300 841e 	bgt.w	8014fbc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014784:	4b7b      	ldr	r3, [pc, #492]	; (8014974 <tcp_receive+0x884>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	429a      	cmp	r2, r3
 801478a:	f040 829a 	bne.w	8014cc2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801478e:	4b7a      	ldr	r3, [pc, #488]	; (8014978 <tcp_receive+0x888>)
 8014790:	891c      	ldrh	r4, [r3, #8]
 8014792:	4b79      	ldr	r3, [pc, #484]	; (8014978 <tcp_receive+0x888>)
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	899b      	ldrh	r3, [r3, #12]
 8014798:	b29b      	uxth	r3, r3
 801479a:	4618      	mov	r0, r3
 801479c:	f7fb f92e 	bl	800f9fc <lwip_htons>
 80147a0:	4603      	mov	r3, r0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	f003 0303 	and.w	r3, r3, #3
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d001      	beq.n	80147b0 <tcp_receive+0x6c0>
 80147ac:	2301      	movs	r3, #1
 80147ae:	e000      	b.n	80147b2 <tcp_receive+0x6c2>
 80147b0:	2300      	movs	r3, #0
 80147b2:	4423      	add	r3, r4
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	4b71      	ldr	r3, [pc, #452]	; (801497c <tcp_receive+0x88c>)
 80147b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147be:	4b6f      	ldr	r3, [pc, #444]	; (801497c <tcp_receive+0x88c>)
 80147c0:	881b      	ldrh	r3, [r3, #0]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d275      	bcs.n	80148b2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147c6:	4b6c      	ldr	r3, [pc, #432]	; (8014978 <tcp_receive+0x888>)
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	899b      	ldrh	r3, [r3, #12]
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fb f914 	bl	800f9fc <lwip_htons>
 80147d4:	4603      	mov	r3, r0
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	f003 0301 	and.w	r3, r3, #1
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d01f      	beq.n	8014820 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80147e0:	4b65      	ldr	r3, [pc, #404]	; (8014978 <tcp_receive+0x888>)
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	899b      	ldrh	r3, [r3, #12]
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	b21b      	sxth	r3, r3
 80147ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80147ee:	b21c      	sxth	r4, r3
 80147f0:	4b61      	ldr	r3, [pc, #388]	; (8014978 <tcp_receive+0x888>)
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	899b      	ldrh	r3, [r3, #12]
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fb f8ff 	bl	800f9fc <lwip_htons>
 80147fe:	4603      	mov	r3, r0
 8014800:	b2db      	uxtb	r3, r3
 8014802:	b29b      	uxth	r3, r3
 8014804:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014808:	b29b      	uxth	r3, r3
 801480a:	4618      	mov	r0, r3
 801480c:	f7fb f8f6 	bl	800f9fc <lwip_htons>
 8014810:	4603      	mov	r3, r0
 8014812:	b21b      	sxth	r3, r3
 8014814:	4323      	orrs	r3, r4
 8014816:	b21a      	sxth	r2, r3
 8014818:	4b57      	ldr	r3, [pc, #348]	; (8014978 <tcp_receive+0x888>)
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	b292      	uxth	r2, r2
 801481e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014824:	4b54      	ldr	r3, [pc, #336]	; (8014978 <tcp_receive+0x888>)
 8014826:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014828:	4b53      	ldr	r3, [pc, #332]	; (8014978 <tcp_receive+0x888>)
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	899b      	ldrh	r3, [r3, #12]
 801482e:	b29b      	uxth	r3, r3
 8014830:	4618      	mov	r0, r3
 8014832:	f7fb f8e3 	bl	800f9fc <lwip_htons>
 8014836:	4603      	mov	r3, r0
 8014838:	b2db      	uxtb	r3, r3
 801483a:	f003 0302 	and.w	r3, r3, #2
 801483e:	2b00      	cmp	r3, #0
 8014840:	d005      	beq.n	801484e <tcp_receive+0x75e>
            inseg.len -= 1;
 8014842:	4b4d      	ldr	r3, [pc, #308]	; (8014978 <tcp_receive+0x888>)
 8014844:	891b      	ldrh	r3, [r3, #8]
 8014846:	3b01      	subs	r3, #1
 8014848:	b29a      	uxth	r2, r3
 801484a:	4b4b      	ldr	r3, [pc, #300]	; (8014978 <tcp_receive+0x888>)
 801484c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801484e:	4b4a      	ldr	r3, [pc, #296]	; (8014978 <tcp_receive+0x888>)
 8014850:	685a      	ldr	r2, [r3, #4]
 8014852:	4b49      	ldr	r3, [pc, #292]	; (8014978 <tcp_receive+0x888>)
 8014854:	891b      	ldrh	r3, [r3, #8]
 8014856:	4619      	mov	r1, r3
 8014858:	4610      	mov	r0, r2
 801485a:	f7fc f9e1 	bl	8010c20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801485e:	4b46      	ldr	r3, [pc, #280]	; (8014978 <tcp_receive+0x888>)
 8014860:	891c      	ldrh	r4, [r3, #8]
 8014862:	4b45      	ldr	r3, [pc, #276]	; (8014978 <tcp_receive+0x888>)
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	899b      	ldrh	r3, [r3, #12]
 8014868:	b29b      	uxth	r3, r3
 801486a:	4618      	mov	r0, r3
 801486c:	f7fb f8c6 	bl	800f9fc <lwip_htons>
 8014870:	4603      	mov	r3, r0
 8014872:	b2db      	uxtb	r3, r3
 8014874:	f003 0303 	and.w	r3, r3, #3
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <tcp_receive+0x790>
 801487c:	2301      	movs	r3, #1
 801487e:	e000      	b.n	8014882 <tcp_receive+0x792>
 8014880:	2300      	movs	r3, #0
 8014882:	4423      	add	r3, r4
 8014884:	b29a      	uxth	r2, r3
 8014886:	4b3d      	ldr	r3, [pc, #244]	; (801497c <tcp_receive+0x88c>)
 8014888:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801488a:	4b3c      	ldr	r3, [pc, #240]	; (801497c <tcp_receive+0x88c>)
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	461a      	mov	r2, r3
 8014890:	4b38      	ldr	r3, [pc, #224]	; (8014974 <tcp_receive+0x884>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	441a      	add	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801489a:	6879      	ldr	r1, [r7, #4]
 801489c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801489e:	440b      	add	r3, r1
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d006      	beq.n	80148b2 <tcp_receive+0x7c2>
 80148a4:	4b36      	ldr	r3, [pc, #216]	; (8014980 <tcp_receive+0x890>)
 80148a6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80148aa:	4936      	ldr	r1, [pc, #216]	; (8014984 <tcp_receive+0x894>)
 80148ac:	4836      	ldr	r0, [pc, #216]	; (8014988 <tcp_receive+0x898>)
 80148ae:	f007 fbb7 	bl	801c020 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f000 80e7 	beq.w	8014a8a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80148bc:	4b2e      	ldr	r3, [pc, #184]	; (8014978 <tcp_receive+0x888>)
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	899b      	ldrh	r3, [r3, #12]
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fb f899 	bl	800f9fc <lwip_htons>
 80148ca:	4603      	mov	r3, r0
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	f003 0301 	and.w	r3, r3, #1
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d010      	beq.n	80148f8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80148d6:	e00a      	b.n	80148ee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80148e8:	68f8      	ldr	r0, [r7, #12]
 80148ea:	f7fd fd97 	bl	801241c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d1f0      	bne.n	80148d8 <tcp_receive+0x7e8>
 80148f6:	e0c8      	b.n	8014a8a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80148fe:	e052      	b.n	80149a6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014902:	68db      	ldr	r3, [r3, #12]
 8014904:	899b      	ldrh	r3, [r3, #12]
 8014906:	b29b      	uxth	r3, r3
 8014908:	4618      	mov	r0, r3
 801490a:	f7fb f877 	bl	800f9fc <lwip_htons>
 801490e:	4603      	mov	r3, r0
 8014910:	b2db      	uxtb	r3, r3
 8014912:	f003 0301 	and.w	r3, r3, #1
 8014916:	2b00      	cmp	r3, #0
 8014918:	d03d      	beq.n	8014996 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801491a:	4b17      	ldr	r3, [pc, #92]	; (8014978 <tcp_receive+0x888>)
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	899b      	ldrh	r3, [r3, #12]
 8014920:	b29b      	uxth	r3, r3
 8014922:	4618      	mov	r0, r3
 8014924:	f7fb f86a 	bl	800f9fc <lwip_htons>
 8014928:	4603      	mov	r3, r0
 801492a:	b2db      	uxtb	r3, r3
 801492c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014930:	2b00      	cmp	r3, #0
 8014932:	d130      	bne.n	8014996 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014934:	4b10      	ldr	r3, [pc, #64]	; (8014978 <tcp_receive+0x888>)
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	899b      	ldrh	r3, [r3, #12]
 801493a:	b29c      	uxth	r4, r3
 801493c:	2001      	movs	r0, #1
 801493e:	f7fb f85d 	bl	800f9fc <lwip_htons>
 8014942:	4603      	mov	r3, r0
 8014944:	461a      	mov	r2, r3
 8014946:	4b0c      	ldr	r3, [pc, #48]	; (8014978 <tcp_receive+0x888>)
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	4322      	orrs	r2, r4
 801494c:	b292      	uxth	r2, r2
 801494e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014950:	4b09      	ldr	r3, [pc, #36]	; (8014978 <tcp_receive+0x888>)
 8014952:	891c      	ldrh	r4, [r3, #8]
 8014954:	4b08      	ldr	r3, [pc, #32]	; (8014978 <tcp_receive+0x888>)
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	899b      	ldrh	r3, [r3, #12]
 801495a:	b29b      	uxth	r3, r3
 801495c:	4618      	mov	r0, r3
 801495e:	f7fb f84d 	bl	800f9fc <lwip_htons>
 8014962:	4603      	mov	r3, r0
 8014964:	b2db      	uxtb	r3, r3
 8014966:	f003 0303 	and.w	r3, r3, #3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00e      	beq.n	801498c <tcp_receive+0x89c>
 801496e:	2301      	movs	r3, #1
 8014970:	e00d      	b.n	801498e <tcp_receive+0x89e>
 8014972:	bf00      	nop
 8014974:	20001058 	.word	0x20001058
 8014978:	20001038 	.word	0x20001038
 801497c:	20001062 	.word	0x20001062
 8014980:	0802284c 	.word	0x0802284c
 8014984:	08022bf4 	.word	0x08022bf4
 8014988:	08022898 	.word	0x08022898
 801498c:	2300      	movs	r3, #0
 801498e:	4423      	add	r3, r4
 8014990:	b29a      	uxth	r2, r3
 8014992:	4b98      	ldr	r3, [pc, #608]	; (8014bf4 <tcp_receive+0xb04>)
 8014994:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014998:	613b      	str	r3, [r7, #16]
              next = next->next;
 801499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80149a0:	6938      	ldr	r0, [r7, #16]
 80149a2:	f7fd fd3b 	bl	801241c <tcp_seg_free>
            while (next &&
 80149a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00e      	beq.n	80149ca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80149ac:	4b91      	ldr	r3, [pc, #580]	; (8014bf4 <tcp_receive+0xb04>)
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	461a      	mov	r2, r3
 80149b2:	4b91      	ldr	r3, [pc, #580]	; (8014bf8 <tcp_receive+0xb08>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	441a      	add	r2, r3
 80149b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80149c0:	8909      	ldrh	r1, [r1, #8]
 80149c2:	440b      	add	r3, r1
 80149c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	da9a      	bge.n	8014900 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80149ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d059      	beq.n	8014a84 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80149d0:	4b88      	ldr	r3, [pc, #544]	; (8014bf4 <tcp_receive+0xb04>)
 80149d2:	881b      	ldrh	r3, [r3, #0]
 80149d4:	461a      	mov	r2, r3
 80149d6:	4b88      	ldr	r3, [pc, #544]	; (8014bf8 <tcp_receive+0xb08>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	441a      	add	r2, r3
 80149dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	dd4d      	ble.n	8014a84 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80149e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ea:	68db      	ldr	r3, [r3, #12]
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	b29a      	uxth	r2, r3
 80149f0:	4b81      	ldr	r3, [pc, #516]	; (8014bf8 <tcp_receive+0xb08>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	1ad3      	subs	r3, r2, r3
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	4b80      	ldr	r3, [pc, #512]	; (8014bfc <tcp_receive+0xb0c>)
 80149fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80149fe:	4b7f      	ldr	r3, [pc, #508]	; (8014bfc <tcp_receive+0xb0c>)
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	899b      	ldrh	r3, [r3, #12]
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7fa fff8 	bl	800f9fc <lwip_htons>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	b2db      	uxtb	r3, r3
 8014a10:	f003 0302 	and.w	r3, r3, #2
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d005      	beq.n	8014a24 <tcp_receive+0x934>
                inseg.len -= 1;
 8014a18:	4b78      	ldr	r3, [pc, #480]	; (8014bfc <tcp_receive+0xb0c>)
 8014a1a:	891b      	ldrh	r3, [r3, #8]
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	4b76      	ldr	r3, [pc, #472]	; (8014bfc <tcp_receive+0xb0c>)
 8014a22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014a24:	4b75      	ldr	r3, [pc, #468]	; (8014bfc <tcp_receive+0xb0c>)
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	4b74      	ldr	r3, [pc, #464]	; (8014bfc <tcp_receive+0xb0c>)
 8014a2a:	891b      	ldrh	r3, [r3, #8]
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4610      	mov	r0, r2
 8014a30:	f7fc f8f6 	bl	8010c20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014a34:	4b71      	ldr	r3, [pc, #452]	; (8014bfc <tcp_receive+0xb0c>)
 8014a36:	891c      	ldrh	r4, [r3, #8]
 8014a38:	4b70      	ldr	r3, [pc, #448]	; (8014bfc <tcp_receive+0xb0c>)
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	899b      	ldrh	r3, [r3, #12]
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fa ffdb 	bl	800f9fc <lwip_htons>
 8014a46:	4603      	mov	r3, r0
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	f003 0303 	and.w	r3, r3, #3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d001      	beq.n	8014a56 <tcp_receive+0x966>
 8014a52:	2301      	movs	r3, #1
 8014a54:	e000      	b.n	8014a58 <tcp_receive+0x968>
 8014a56:	2300      	movs	r3, #0
 8014a58:	4423      	add	r3, r4
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	4b65      	ldr	r3, [pc, #404]	; (8014bf4 <tcp_receive+0xb04>)
 8014a5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014a60:	4b64      	ldr	r3, [pc, #400]	; (8014bf4 <tcp_receive+0xb04>)
 8014a62:	881b      	ldrh	r3, [r3, #0]
 8014a64:	461a      	mov	r2, r3
 8014a66:	4b64      	ldr	r3, [pc, #400]	; (8014bf8 <tcp_receive+0xb08>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	441a      	add	r2, r3
 8014a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d006      	beq.n	8014a84 <tcp_receive+0x994>
 8014a76:	4b62      	ldr	r3, [pc, #392]	; (8014c00 <tcp_receive+0xb10>)
 8014a78:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8014a7c:	4961      	ldr	r1, [pc, #388]	; (8014c04 <tcp_receive+0xb14>)
 8014a7e:	4862      	ldr	r0, [pc, #392]	; (8014c08 <tcp_receive+0xb18>)
 8014a80:	f007 face 	bl	801c020 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014a8a:	4b5a      	ldr	r3, [pc, #360]	; (8014bf4 <tcp_receive+0xb04>)
 8014a8c:	881b      	ldrh	r3, [r3, #0]
 8014a8e:	461a      	mov	r2, r3
 8014a90:	4b59      	ldr	r3, [pc, #356]	; (8014bf8 <tcp_receive+0xb08>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	441a      	add	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a9e:	4b55      	ldr	r3, [pc, #340]	; (8014bf4 <tcp_receive+0xb04>)
 8014aa0:	881b      	ldrh	r3, [r3, #0]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d206      	bcs.n	8014ab4 <tcp_receive+0x9c4>
 8014aa6:	4b56      	ldr	r3, [pc, #344]	; (8014c00 <tcp_receive+0xb10>)
 8014aa8:	f240 6207 	movw	r2, #1543	; 0x607
 8014aac:	4957      	ldr	r1, [pc, #348]	; (8014c0c <tcp_receive+0xb1c>)
 8014aae:	4856      	ldr	r0, [pc, #344]	; (8014c08 <tcp_receive+0xb18>)
 8014ab0:	f007 fab6 	bl	801c020 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ab8:	4b4e      	ldr	r3, [pc, #312]	; (8014bf4 <tcp_receive+0xb04>)
 8014aba:	881b      	ldrh	r3, [r3, #0]
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f7fc ffcd 	bl	8011a64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014aca:	4b4c      	ldr	r3, [pc, #304]	; (8014bfc <tcp_receive+0xb0c>)
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	891b      	ldrh	r3, [r3, #8]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d006      	beq.n	8014ae2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014ad4:	4b49      	ldr	r3, [pc, #292]	; (8014bfc <tcp_receive+0xb0c>)
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	4a4d      	ldr	r2, [pc, #308]	; (8014c10 <tcp_receive+0xb20>)
 8014ada:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014adc:	4b47      	ldr	r3, [pc, #284]	; (8014bfc <tcp_receive+0xb0c>)
 8014ade:	2200      	movs	r2, #0
 8014ae0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ae2:	4b46      	ldr	r3, [pc, #280]	; (8014bfc <tcp_receive+0xb0c>)
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	899b      	ldrh	r3, [r3, #12]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fa ff86 	bl	800f9fc <lwip_htons>
 8014af0:	4603      	mov	r3, r0
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	f003 0301 	and.w	r3, r3, #1
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	f000 80b8 	beq.w	8014c6e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014afe:	4b45      	ldr	r3, [pc, #276]	; (8014c14 <tcp_receive+0xb24>)
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	f043 0320 	orr.w	r3, r3, #32
 8014b06:	b2da      	uxtb	r2, r3
 8014b08:	4b42      	ldr	r3, [pc, #264]	; (8014c14 <tcp_receive+0xb24>)
 8014b0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014b0c:	e0af      	b.n	8014c6e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	4a36      	ldr	r2, [pc, #216]	; (8014bf8 <tcp_receive+0xb08>)
 8014b1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	891b      	ldrh	r3, [r3, #8]
 8014b24:	461c      	mov	r4, r3
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	899b      	ldrh	r3, [r3, #12]
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fa ff64 	bl	800f9fc <lwip_htons>
 8014b34:	4603      	mov	r3, r0
 8014b36:	b2db      	uxtb	r3, r3
 8014b38:	f003 0303 	and.w	r3, r3, #3
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d001      	beq.n	8014b44 <tcp_receive+0xa54>
 8014b40:	2301      	movs	r3, #1
 8014b42:	e000      	b.n	8014b46 <tcp_receive+0xa56>
 8014b44:	2300      	movs	r3, #0
 8014b46:	191a      	adds	r2, r3, r4
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4c:	441a      	add	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b56:	461c      	mov	r4, r3
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	891b      	ldrh	r3, [r3, #8]
 8014b5c:	461d      	mov	r5, r3
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	899b      	ldrh	r3, [r3, #12]
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fa ff48 	bl	800f9fc <lwip_htons>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	f003 0303 	and.w	r3, r3, #3
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d001      	beq.n	8014b7c <tcp_receive+0xa8c>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e000      	b.n	8014b7e <tcp_receive+0xa8e>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	442b      	add	r3, r5
 8014b80:	429c      	cmp	r4, r3
 8014b82:	d206      	bcs.n	8014b92 <tcp_receive+0xaa2>
 8014b84:	4b1e      	ldr	r3, [pc, #120]	; (8014c00 <tcp_receive+0xb10>)
 8014b86:	f240 622c 	movw	r2, #1580	; 0x62c
 8014b8a:	4923      	ldr	r1, [pc, #140]	; (8014c18 <tcp_receive+0xb28>)
 8014b8c:	481e      	ldr	r0, [pc, #120]	; (8014c08 <tcp_receive+0xb18>)
 8014b8e:	f007 fa47 	bl	801c020 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	891b      	ldrh	r3, [r3, #8]
 8014b96:	461c      	mov	r4, r3
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	899b      	ldrh	r3, [r3, #12]
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fa ff2b 	bl	800f9fc <lwip_htons>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	f003 0303 	and.w	r3, r3, #3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d001      	beq.n	8014bb6 <tcp_receive+0xac6>
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	e000      	b.n	8014bb8 <tcp_receive+0xac8>
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	1919      	adds	r1, r3, r4
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014bbe:	b28b      	uxth	r3, r1
 8014bc0:	1ad3      	subs	r3, r2, r3
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7fc ff4b 	bl	8011a64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	891b      	ldrh	r3, [r3, #8]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d028      	beq.n	8014c2a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014bd8:	4b0d      	ldr	r3, [pc, #52]	; (8014c10 <tcp_receive+0xb20>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d01d      	beq.n	8014c1c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014be0:	4b0b      	ldr	r3, [pc, #44]	; (8014c10 <tcp_receive+0xb20>)
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	4619      	mov	r1, r3
 8014bea:	4610      	mov	r0, r2
 8014bec:	f7fc fa60 	bl	80110b0 <pbuf_cat>
 8014bf0:	e018      	b.n	8014c24 <tcp_receive+0xb34>
 8014bf2:	bf00      	nop
 8014bf4:	20001062 	.word	0x20001062
 8014bf8:	20001058 	.word	0x20001058
 8014bfc:	20001038 	.word	0x20001038
 8014c00:	0802284c 	.word	0x0802284c
 8014c04:	08022c2c 	.word	0x08022c2c
 8014c08:	08022898 	.word	0x08022898
 8014c0c:	08022c68 	.word	0x08022c68
 8014c10:	20001068 	.word	0x20001068
 8014c14:	20001065 	.word	0x20001065
 8014c18:	08022c88 	.word	0x08022c88
            } else {
              recv_data = cseg->p;
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	4a70      	ldr	r2, [pc, #448]	; (8014de4 <tcp_receive+0xcf4>)
 8014c22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	2200      	movs	r2, #0
 8014c28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	899b      	ldrh	r3, [r3, #12]
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fa fee2 	bl	800f9fc <lwip_htons>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	f003 0301 	and.w	r3, r3, #1
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00d      	beq.n	8014c60 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014c44:	4b68      	ldr	r3, [pc, #416]	; (8014de8 <tcp_receive+0xcf8>)
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	f043 0320 	orr.w	r3, r3, #32
 8014c4c:	b2da      	uxtb	r2, r3
 8014c4e:	4b66      	ldr	r3, [pc, #408]	; (8014de8 <tcp_receive+0xcf8>)
 8014c50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	7d1b      	ldrb	r3, [r3, #20]
 8014c56:	2b04      	cmp	r3, #4
 8014c58:	d102      	bne.n	8014c60 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2207      	movs	r2, #7
 8014c5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014c68:	68b8      	ldr	r0, [r7, #8]
 8014c6a:	f7fd fbd7 	bl	801241c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d008      	beq.n	8014c88 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	685a      	ldr	r2, [r3, #4]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014c82:	429a      	cmp	r2, r3
 8014c84:	f43f af43 	beq.w	8014b0e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	8b5b      	ldrh	r3, [r3, #26]
 8014c8c:	f003 0301 	and.w	r3, r3, #1
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d00e      	beq.n	8014cb2 <tcp_receive+0xbc2>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f023 0301 	bic.w	r3, r3, #1
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	835a      	strh	r2, [r3, #26]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	8b5b      	ldrh	r3, [r3, #26]
 8014ca6:	f043 0302 	orr.w	r3, r3, #2
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014cb0:	e188      	b.n	8014fc4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	8b5b      	ldrh	r3, [r3, #26]
 8014cb6:	f043 0301 	orr.w	r3, r3, #1
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014cc0:	e180      	b.n	8014fc4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d106      	bne.n	8014cd8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014cca:	4848      	ldr	r0, [pc, #288]	; (8014dec <tcp_receive+0xcfc>)
 8014ccc:	f7fd fbbe 	bl	801244c <tcp_seg_copy>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	675a      	str	r2, [r3, #116]	; 0x74
 8014cd6:	e16d      	b.n	8014fb4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ce2:	e157      	b.n	8014f94 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	685a      	ldr	r2, [r3, #4]
 8014cea:	4b41      	ldr	r3, [pc, #260]	; (8014df0 <tcp_receive+0xd00>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d11d      	bne.n	8014d2e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014cf2:	4b3e      	ldr	r3, [pc, #248]	; (8014dec <tcp_receive+0xcfc>)
 8014cf4:	891a      	ldrh	r2, [r3, #8]
 8014cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf8:	891b      	ldrh	r3, [r3, #8]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	f240 814f 	bls.w	8014f9e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d00:	483a      	ldr	r0, [pc, #232]	; (8014dec <tcp_receive+0xcfc>)
 8014d02:	f7fd fba3 	bl	801244c <tcp_seg_copy>
 8014d06:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 8149 	beq.w	8014fa2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d003      	beq.n	8014d1e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	601a      	str	r2, [r3, #0]
 8014d1c:	e002      	b.n	8014d24 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	697a      	ldr	r2, [r7, #20]
 8014d22:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d26:	6978      	ldr	r0, [r7, #20]
 8014d28:	f7ff f8de 	bl	8013ee8 <tcp_oos_insert_segment>
                }
                break;
 8014d2c:	e139      	b.n	8014fa2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d117      	bne.n	8014d64 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014d34:	4b2e      	ldr	r3, [pc, #184]	; (8014df0 <tcp_receive+0xd00>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	1ad3      	subs	r3, r2, r3
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da57      	bge.n	8014df4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d44:	4829      	ldr	r0, [pc, #164]	; (8014dec <tcp_receive+0xcfc>)
 8014d46:	f7fd fb81 	bl	801244c <tcp_seg_copy>
 8014d4a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f000 8129 	beq.w	8014fa6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	69ba      	ldr	r2, [r7, #24]
 8014d58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d5c:	69b8      	ldr	r0, [r7, #24]
 8014d5e:	f7ff f8c3 	bl	8013ee8 <tcp_oos_insert_segment>
                  }
                  break;
 8014d62:	e120      	b.n	8014fa6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014d64:	4b22      	ldr	r3, [pc, #136]	; (8014df0 <tcp_receive+0xd00>)
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d6a:	68db      	ldr	r3, [r3, #12]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	1ad3      	subs	r3, r2, r3
 8014d70:	3b01      	subs	r3, #1
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	db3e      	blt.n	8014df4 <tcp_receive+0xd04>
 8014d76:	4b1e      	ldr	r3, [pc, #120]	; (8014df0 <tcp_receive+0xd00>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	1ad3      	subs	r3, r2, r3
 8014d82:	3301      	adds	r3, #1
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	dc35      	bgt.n	8014df4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d88:	4818      	ldr	r0, [pc, #96]	; (8014dec <tcp_receive+0xcfc>)
 8014d8a:	f7fd fb5f 	bl	801244c <tcp_seg_copy>
 8014d8e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	f000 8109 	beq.w	8014faa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014da0:	8912      	ldrh	r2, [r2, #8]
 8014da2:	441a      	add	r2, r3
 8014da4:	4b12      	ldr	r3, [pc, #72]	; (8014df0 <tcp_receive+0xd00>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	1ad3      	subs	r3, r2, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	dd12      	ble.n	8014dd4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014dae:	4b10      	ldr	r3, [pc, #64]	; (8014df0 <tcp_receive+0xd00>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db6:	68db      	ldr	r3, [r3, #12]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	1ad3      	subs	r3, r2, r3
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc6:	685a      	ldr	r2, [r3, #4]
 8014dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dca:	891b      	ldrh	r3, [r3, #8]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	4610      	mov	r0, r2
 8014dd0:	f7fb ff26 	bl	8010c20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd6:	69fa      	ldr	r2, [r7, #28]
 8014dd8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ddc:	69f8      	ldr	r0, [r7, #28]
 8014dde:	f7ff f883 	bl	8013ee8 <tcp_oos_insert_segment>
                  }
                  break;
 8014de2:	e0e2      	b.n	8014faa <tcp_receive+0xeba>
 8014de4:	20001068 	.word	0x20001068
 8014de8:	20001065 	.word	0x20001065
 8014dec:	20001038 	.word	0x20001038
 8014df0:	20001058 	.word	0x20001058
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	f040 80c6 	bne.w	8014f8e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014e02:	4b80      	ldr	r3, [pc, #512]	; (8015004 <tcp_receive+0xf14>)
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f340 80bd 	ble.w	8014f8e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	899b      	ldrh	r3, [r3, #12]
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fa fded 	bl	800f9fc <lwip_htons>
 8014e22:	4603      	mov	r3, r0
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	f003 0301 	and.w	r3, r3, #1
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f040 80bf 	bne.w	8014fae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014e30:	4875      	ldr	r0, [pc, #468]	; (8015008 <tcp_receive+0xf18>)
 8014e32:	f7fd fb0b 	bl	801244c <tcp_seg_copy>
 8014e36:	4602      	mov	r2, r0
 8014e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f000 80b6 	beq.w	8014fb2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e48:	68db      	ldr	r3, [r3, #12]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e4e:	8912      	ldrh	r2, [r2, #8]
 8014e50:	441a      	add	r2, r3
 8014e52:	4b6c      	ldr	r3, [pc, #432]	; (8015004 <tcp_receive+0xf14>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	1ad3      	subs	r3, r2, r3
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dd12      	ble.n	8014e82 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014e5c:	4b69      	ldr	r3, [pc, #420]	; (8015004 <tcp_receive+0xf14>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	b29a      	uxth	r2, r3
 8014e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	685b      	ldr	r3, [r3, #4]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	1ad3      	subs	r3, r2, r3
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e70:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e74:	685a      	ldr	r2, [r3, #4]
 8014e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e78:	891b      	ldrh	r3, [r3, #8]
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	f7fb fecf 	bl	8010c20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014e82:	4b62      	ldr	r3, [pc, #392]	; (801500c <tcp_receive+0xf1c>)
 8014e84:	881b      	ldrh	r3, [r3, #0]
 8014e86:	461a      	mov	r2, r3
 8014e88:	4b5e      	ldr	r3, [pc, #376]	; (8015004 <tcp_receive+0xf14>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	441a      	add	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e92:	6879      	ldr	r1, [r7, #4]
 8014e94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e96:	440b      	add	r3, r1
 8014e98:	1ad3      	subs	r3, r2, r3
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	f340 8089 	ble.w	8014fb2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	899b      	ldrh	r3, [r3, #12]
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7fa fda6 	bl	800f9fc <lwip_htons>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	f003 0301 	and.w	r3, r3, #1
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d022      	beq.n	8014f02 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	68db      	ldr	r3, [r3, #12]
 8014ec2:	899b      	ldrh	r3, [r3, #12]
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	b21b      	sxth	r3, r3
 8014ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ecc:	b21c      	sxth	r4, r3
 8014ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	68db      	ldr	r3, [r3, #12]
 8014ed4:	899b      	ldrh	r3, [r3, #12]
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7fa fd8f 	bl	800f9fc <lwip_htons>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7fa fd86 	bl	800f9fc <lwip_htons>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	b21b      	sxth	r3, r3
 8014ef4:	4323      	orrs	r3, r4
 8014ef6:	b21a      	sxth	r2, r3
 8014ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	b292      	uxth	r2, r2
 8014f00:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f0c:	4413      	add	r3, r2
 8014f0e:	b299      	uxth	r1, r3
 8014f10:	4b3c      	ldr	r3, [pc, #240]	; (8015004 <tcp_receive+0xf14>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	1a8a      	subs	r2, r1, r2
 8014f1c:	b292      	uxth	r2, r2
 8014f1e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	685a      	ldr	r2, [r3, #4]
 8014f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	891b      	ldrh	r3, [r3, #8]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4610      	mov	r0, r2
 8014f30:	f7fb fe76 	bl	8010c20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	891c      	ldrh	r4, [r3, #8]
 8014f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	68db      	ldr	r3, [r3, #12]
 8014f40:	899b      	ldrh	r3, [r3, #12]
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fa fd59 	bl	800f9fc <lwip_htons>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	f003 0303 	and.w	r3, r3, #3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d001      	beq.n	8014f5a <tcp_receive+0xe6a>
 8014f56:	2301      	movs	r3, #1
 8014f58:	e000      	b.n	8014f5c <tcp_receive+0xe6c>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	4423      	add	r3, r4
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	4b2a      	ldr	r3, [pc, #168]	; (801500c <tcp_receive+0xf1c>)
 8014f62:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014f64:	4b29      	ldr	r3, [pc, #164]	; (801500c <tcp_receive+0xf1c>)
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	461a      	mov	r2, r3
 8014f6a:	4b26      	ldr	r3, [pc, #152]	; (8015004 <tcp_receive+0xf14>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	441a      	add	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f74:	6879      	ldr	r1, [r7, #4]
 8014f76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f78:	440b      	add	r3, r1
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d019      	beq.n	8014fb2 <tcp_receive+0xec2>
 8014f7e:	4b24      	ldr	r3, [pc, #144]	; (8015010 <tcp_receive+0xf20>)
 8014f80:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014f84:	4923      	ldr	r1, [pc, #140]	; (8015014 <tcp_receive+0xf24>)
 8014f86:	4824      	ldr	r0, [pc, #144]	; (8015018 <tcp_receive+0xf28>)
 8014f88:	f007 f84a 	bl	801c020 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014f8c:	e011      	b.n	8014fb2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f47f aea4 	bne.w	8014ce4 <tcp_receive+0xbf4>
 8014f9c:	e00a      	b.n	8014fb4 <tcp_receive+0xec4>
                break;
 8014f9e:	bf00      	nop
 8014fa0:	e008      	b.n	8014fb4 <tcp_receive+0xec4>
                break;
 8014fa2:	bf00      	nop
 8014fa4:	e006      	b.n	8014fb4 <tcp_receive+0xec4>
                  break;
 8014fa6:	bf00      	nop
 8014fa8:	e004      	b.n	8014fb4 <tcp_receive+0xec4>
                  break;
 8014faa:	bf00      	nop
 8014fac:	e002      	b.n	8014fb4 <tcp_receive+0xec4>
                  break;
 8014fae:	bf00      	nop
 8014fb0:	e000      	b.n	8014fb4 <tcp_receive+0xec4>
                break;
 8014fb2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f001 fa3f 	bl	8016438 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014fba:	e003      	b.n	8014fc4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f001 fa3b 	bl	8016438 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014fc2:	e01a      	b.n	8014ffa <tcp_receive+0xf0a>
 8014fc4:	e019      	b.n	8014ffa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014fc6:	4b0f      	ldr	r3, [pc, #60]	; (8015004 <tcp_receive+0xf14>)
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fce:	1ad3      	subs	r3, r2, r3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	db0a      	blt.n	8014fea <tcp_receive+0xefa>
 8014fd4:	4b0b      	ldr	r3, [pc, #44]	; (8015004 <tcp_receive+0xf14>)
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fdc:	6879      	ldr	r1, [r7, #4]
 8014fde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014fe0:	440b      	add	r3, r1
 8014fe2:	1ad3      	subs	r3, r2, r3
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	dd07      	ble.n	8014ffa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	8b5b      	ldrh	r3, [r3, #26]
 8014fee:	f043 0302 	orr.w	r3, r3, #2
 8014ff2:	b29a      	uxth	r2, r3
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ff8:	e7ff      	b.n	8014ffa <tcp_receive+0xf0a>
 8014ffa:	bf00      	nop
 8014ffc:	3750      	adds	r7, #80	; 0x50
 8014ffe:	46bd      	mov	sp, r7
 8015000:	bdb0      	pop	{r4, r5, r7, pc}
 8015002:	bf00      	nop
 8015004:	20001058 	.word	0x20001058
 8015008:	20001038 	.word	0x20001038
 801500c:	20001062 	.word	0x20001062
 8015010:	0802284c 	.word	0x0802284c
 8015014:	08022bf4 	.word	0x08022bf4
 8015018:	08022898 	.word	0x08022898

0801501c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801501c:	b480      	push	{r7}
 801501e:	b083      	sub	sp, #12
 8015020:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015022:	4b15      	ldr	r3, [pc, #84]	; (8015078 <tcp_get_next_optbyte+0x5c>)
 8015024:	881b      	ldrh	r3, [r3, #0]
 8015026:	1c5a      	adds	r2, r3, #1
 8015028:	b291      	uxth	r1, r2
 801502a:	4a13      	ldr	r2, [pc, #76]	; (8015078 <tcp_get_next_optbyte+0x5c>)
 801502c:	8011      	strh	r1, [r2, #0]
 801502e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015030:	4b12      	ldr	r3, [pc, #72]	; (801507c <tcp_get_next_optbyte+0x60>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d004      	beq.n	8015042 <tcp_get_next_optbyte+0x26>
 8015038:	4b11      	ldr	r3, [pc, #68]	; (8015080 <tcp_get_next_optbyte+0x64>)
 801503a:	881b      	ldrh	r3, [r3, #0]
 801503c:	88fa      	ldrh	r2, [r7, #6]
 801503e:	429a      	cmp	r2, r3
 8015040:	d208      	bcs.n	8015054 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015042:	4b10      	ldr	r3, [pc, #64]	; (8015084 <tcp_get_next_optbyte+0x68>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	3314      	adds	r3, #20
 8015048:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801504a:	88fb      	ldrh	r3, [r7, #6]
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	4413      	add	r3, r2
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	e00b      	b.n	801506c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015054:	88fb      	ldrh	r3, [r7, #6]
 8015056:	b2da      	uxtb	r2, r3
 8015058:	4b09      	ldr	r3, [pc, #36]	; (8015080 <tcp_get_next_optbyte+0x64>)
 801505a:	881b      	ldrh	r3, [r3, #0]
 801505c:	b2db      	uxtb	r3, r3
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015062:	4b06      	ldr	r3, [pc, #24]	; (801507c <tcp_get_next_optbyte+0x60>)
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	797b      	ldrb	r3, [r7, #5]
 8015068:	4413      	add	r3, r2
 801506a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801506c:	4618      	mov	r0, r3
 801506e:	370c      	adds	r7, #12
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr
 8015078:	20001054 	.word	0x20001054
 801507c:	20001050 	.word	0x20001050
 8015080:	2000104e 	.word	0x2000104e
 8015084:	20001048 	.word	0x20001048

08015088 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d106      	bne.n	80150a4 <tcp_parseopt+0x1c>
 8015096:	4b31      	ldr	r3, [pc, #196]	; (801515c <tcp_parseopt+0xd4>)
 8015098:	f240 727d 	movw	r2, #1917	; 0x77d
 801509c:	4930      	ldr	r1, [pc, #192]	; (8015160 <tcp_parseopt+0xd8>)
 801509e:	4831      	ldr	r0, [pc, #196]	; (8015164 <tcp_parseopt+0xdc>)
 80150a0:	f006 ffbe 	bl	801c020 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80150a4:	4b30      	ldr	r3, [pc, #192]	; (8015168 <tcp_parseopt+0xe0>)
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d053      	beq.n	8015154 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80150ac:	4b2f      	ldr	r3, [pc, #188]	; (801516c <tcp_parseopt+0xe4>)
 80150ae:	2200      	movs	r2, #0
 80150b0:	801a      	strh	r2, [r3, #0]
 80150b2:	e043      	b.n	801513c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80150b4:	f7ff ffb2 	bl	801501c <tcp_get_next_optbyte>
 80150b8:	4603      	mov	r3, r0
 80150ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80150bc:	7bfb      	ldrb	r3, [r7, #15]
 80150be:	2b01      	cmp	r3, #1
 80150c0:	d03c      	beq.n	801513c <tcp_parseopt+0xb4>
 80150c2:	2b02      	cmp	r3, #2
 80150c4:	d002      	beq.n	80150cc <tcp_parseopt+0x44>
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d03f      	beq.n	801514a <tcp_parseopt+0xc2>
 80150ca:	e026      	b.n	801511a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80150cc:	f7ff ffa6 	bl	801501c <tcp_get_next_optbyte>
 80150d0:	4603      	mov	r3, r0
 80150d2:	2b04      	cmp	r3, #4
 80150d4:	d13b      	bne.n	801514e <tcp_parseopt+0xc6>
 80150d6:	4b25      	ldr	r3, [pc, #148]	; (801516c <tcp_parseopt+0xe4>)
 80150d8:	881b      	ldrh	r3, [r3, #0]
 80150da:	3302      	adds	r3, #2
 80150dc:	4a22      	ldr	r2, [pc, #136]	; (8015168 <tcp_parseopt+0xe0>)
 80150de:	8812      	ldrh	r2, [r2, #0]
 80150e0:	4293      	cmp	r3, r2
 80150e2:	dc34      	bgt.n	801514e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80150e4:	f7ff ff9a 	bl	801501c <tcp_get_next_optbyte>
 80150e8:	4603      	mov	r3, r0
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	021b      	lsls	r3, r3, #8
 80150ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80150f0:	f7ff ff94 	bl	801501c <tcp_get_next_optbyte>
 80150f4:	4603      	mov	r3, r0
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	89bb      	ldrh	r3, [r7, #12]
 80150fa:	4313      	orrs	r3, r2
 80150fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80150fe:	89bb      	ldrh	r3, [r7, #12]
 8015100:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8015104:	d804      	bhi.n	8015110 <tcp_parseopt+0x88>
 8015106:	89bb      	ldrh	r3, [r7, #12]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d001      	beq.n	8015110 <tcp_parseopt+0x88>
 801510c:	89ba      	ldrh	r2, [r7, #12]
 801510e:	e001      	b.n	8015114 <tcp_parseopt+0x8c>
 8015110:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015118:	e010      	b.n	801513c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801511a:	f7ff ff7f 	bl	801501c <tcp_get_next_optbyte>
 801511e:	4603      	mov	r3, r0
 8015120:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015122:	7afb      	ldrb	r3, [r7, #11]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d914      	bls.n	8015152 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015128:	7afb      	ldrb	r3, [r7, #11]
 801512a:	b29a      	uxth	r2, r3
 801512c:	4b0f      	ldr	r3, [pc, #60]	; (801516c <tcp_parseopt+0xe4>)
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	4413      	add	r3, r2
 8015132:	b29b      	uxth	r3, r3
 8015134:	3b02      	subs	r3, #2
 8015136:	b29a      	uxth	r2, r3
 8015138:	4b0c      	ldr	r3, [pc, #48]	; (801516c <tcp_parseopt+0xe4>)
 801513a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801513c:	4b0b      	ldr	r3, [pc, #44]	; (801516c <tcp_parseopt+0xe4>)
 801513e:	881a      	ldrh	r2, [r3, #0]
 8015140:	4b09      	ldr	r3, [pc, #36]	; (8015168 <tcp_parseopt+0xe0>)
 8015142:	881b      	ldrh	r3, [r3, #0]
 8015144:	429a      	cmp	r2, r3
 8015146:	d3b5      	bcc.n	80150b4 <tcp_parseopt+0x2c>
 8015148:	e004      	b.n	8015154 <tcp_parseopt+0xcc>
          return;
 801514a:	bf00      	nop
 801514c:	e002      	b.n	8015154 <tcp_parseopt+0xcc>
            return;
 801514e:	bf00      	nop
 8015150:	e000      	b.n	8015154 <tcp_parseopt+0xcc>
            return;
 8015152:	bf00      	nop
      }
    }
  }
}
 8015154:	3710      	adds	r7, #16
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	0802284c 	.word	0x0802284c
 8015160:	08022cb0 	.word	0x08022cb0
 8015164:	08022898 	.word	0x08022898
 8015168:	2000104c 	.word	0x2000104c
 801516c:	20001054 	.word	0x20001054

08015170 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015170:	b480      	push	{r7}
 8015172:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015174:	4b05      	ldr	r3, [pc, #20]	; (801518c <tcp_trigger_input_pcb_close+0x1c>)
 8015176:	781b      	ldrb	r3, [r3, #0]
 8015178:	f043 0310 	orr.w	r3, r3, #16
 801517c:	b2da      	uxtb	r2, r3
 801517e:	4b03      	ldr	r3, [pc, #12]	; (801518c <tcp_trigger_input_pcb_close+0x1c>)
 8015180:	701a      	strb	r2, [r3, #0]
}
 8015182:	bf00      	nop
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr
 801518c:	20001065 	.word	0x20001065

08015190 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b084      	sub	sp, #16
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00a      	beq.n	80151b8 <tcp_route+0x28>
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	7a1b      	ldrb	r3, [r3, #8]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d006      	beq.n	80151b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	7a1b      	ldrb	r3, [r3, #8]
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7fb fb80 	bl	80108b4 <netif_get_by_index>
 80151b4:	4603      	mov	r3, r0
 80151b6:	e003      	b.n	80151c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	f004 ffa1 	bl	801a100 <ip4_route>
 80151be:	4603      	mov	r3, r0
  }
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80151c8:	b590      	push	{r4, r7, lr}
 80151ca:	b087      	sub	sp, #28
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	603b      	str	r3, [r7, #0]
 80151d4:	4613      	mov	r3, r2
 80151d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d105      	bne.n	80151ea <tcp_create_segment+0x22>
 80151de:	4b44      	ldr	r3, [pc, #272]	; (80152f0 <tcp_create_segment+0x128>)
 80151e0:	22a3      	movs	r2, #163	; 0xa3
 80151e2:	4944      	ldr	r1, [pc, #272]	; (80152f4 <tcp_create_segment+0x12c>)
 80151e4:	4844      	ldr	r0, [pc, #272]	; (80152f8 <tcp_create_segment+0x130>)
 80151e6:	f006 ff1b 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d105      	bne.n	80151fc <tcp_create_segment+0x34>
 80151f0:	4b3f      	ldr	r3, [pc, #252]	; (80152f0 <tcp_create_segment+0x128>)
 80151f2:	22a4      	movs	r2, #164	; 0xa4
 80151f4:	4941      	ldr	r1, [pc, #260]	; (80152fc <tcp_create_segment+0x134>)
 80151f6:	4840      	ldr	r0, [pc, #256]	; (80152f8 <tcp_create_segment+0x130>)
 80151f8:	f006 ff12 	bl	801c020 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	b2db      	uxtb	r3, r3
 8015204:	f003 0304 	and.w	r3, r3, #4
 8015208:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801520a:	2003      	movs	r0, #3
 801520c:	f7fb f84c 	bl	80102a8 <memp_malloc>
 8015210:	6138      	str	r0, [r7, #16]
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d104      	bne.n	8015222 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015218:	68b8      	ldr	r0, [r7, #8]
 801521a:	f7fb fe87 	bl	8010f2c <pbuf_free>
    return NULL;
 801521e:	2300      	movs	r3, #0
 8015220:	e061      	b.n	80152e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015228:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	2200      	movs	r2, #0
 801522e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	68ba      	ldr	r2, [r7, #8]
 8015234:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	891a      	ldrh	r2, [r3, #8]
 801523a:	7dfb      	ldrb	r3, [r7, #23]
 801523c:	b29b      	uxth	r3, r3
 801523e:	429a      	cmp	r2, r3
 8015240:	d205      	bcs.n	801524e <tcp_create_segment+0x86>
 8015242:	4b2b      	ldr	r3, [pc, #172]	; (80152f0 <tcp_create_segment+0x128>)
 8015244:	22b0      	movs	r2, #176	; 0xb0
 8015246:	492e      	ldr	r1, [pc, #184]	; (8015300 <tcp_create_segment+0x138>)
 8015248:	482b      	ldr	r0, [pc, #172]	; (80152f8 <tcp_create_segment+0x130>)
 801524a:	f006 fee9 	bl	801c020 <iprintf>
  seg->len = p->tot_len - optlen;
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	891a      	ldrh	r2, [r3, #8]
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	b29b      	uxth	r3, r3
 8015256:	1ad3      	subs	r3, r2, r3
 8015258:	b29a      	uxth	r2, r3
 801525a:	693b      	ldr	r3, [r7, #16]
 801525c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801525e:	2114      	movs	r1, #20
 8015260:	68b8      	ldr	r0, [r7, #8]
 8015262:	f7fb fdcd 	bl	8010e00 <pbuf_add_header>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d004      	beq.n	8015276 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801526c:	6938      	ldr	r0, [r7, #16]
 801526e:	f7fd f8d5 	bl	801241c <tcp_seg_free>
    return NULL;
 8015272:	2300      	movs	r3, #0
 8015274:	e037      	b.n	80152e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	685a      	ldr	r2, [r3, #4]
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	8ada      	ldrh	r2, [r3, #22]
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	68dc      	ldr	r4, [r3, #12]
 8015288:	4610      	mov	r0, r2
 801528a:	f7fa fbb7 	bl	800f9fc <lwip_htons>
 801528e:	4603      	mov	r3, r0
 8015290:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	8b1a      	ldrh	r2, [r3, #24]
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	68dc      	ldr	r4, [r3, #12]
 801529a:	4610      	mov	r0, r2
 801529c:	f7fa fbae 	bl	800f9fc <lwip_htons>
 80152a0:	4603      	mov	r3, r0
 80152a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	68dc      	ldr	r4, [r3, #12]
 80152a8:	6838      	ldr	r0, [r7, #0]
 80152aa:	f7fa fbbc 	bl	800fa26 <lwip_htonl>
 80152ae:	4603      	mov	r3, r0
 80152b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80152b2:	7dfb      	ldrb	r3, [r7, #23]
 80152b4:	089b      	lsrs	r3, r3, #2
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	3305      	adds	r3, #5
 80152bc:	b29b      	uxth	r3, r3
 80152be:	031b      	lsls	r3, r3, #12
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	79fb      	ldrb	r3, [r7, #7]
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	4313      	orrs	r3, r2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	68dc      	ldr	r4, [r3, #12]
 80152ce:	4610      	mov	r0, r2
 80152d0:	f7fa fb94 	bl	800f9fc <lwip_htons>
 80152d4:	4603      	mov	r3, r0
 80152d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	2200      	movs	r2, #0
 80152de:	749a      	strb	r2, [r3, #18]
 80152e0:	2200      	movs	r2, #0
 80152e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80152e4:	693b      	ldr	r3, [r7, #16]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	371c      	adds	r7, #28
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd90      	pop	{r4, r7, pc}
 80152ee:	bf00      	nop
 80152f0:	08022ccc 	.word	0x08022ccc
 80152f4:	08022d00 	.word	0x08022d00
 80152f8:	08022d20 	.word	0x08022d20
 80152fc:	08022d48 	.word	0x08022d48
 8015300:	08022d6c 	.word	0x08022d6c

08015304 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015304:	b590      	push	{r4, r7, lr}
 8015306:	b08b      	sub	sp, #44	; 0x2c
 8015308:	af02      	add	r7, sp, #8
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	460b      	mov	r3, r1
 801530e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015310:	2300      	movs	r3, #0
 8015312:	61fb      	str	r3, [r7, #28]
 8015314:	2300      	movs	r3, #0
 8015316:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015318:	2300      	movs	r3, #0
 801531a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d106      	bne.n	8015330 <tcp_split_unsent_seg+0x2c>
 8015322:	4b95      	ldr	r3, [pc, #596]	; (8015578 <tcp_split_unsent_seg+0x274>)
 8015324:	f240 324b 	movw	r2, #843	; 0x34b
 8015328:	4994      	ldr	r1, [pc, #592]	; (801557c <tcp_split_unsent_seg+0x278>)
 801532a:	4895      	ldr	r0, [pc, #596]	; (8015580 <tcp_split_unsent_seg+0x27c>)
 801532c:	f006 fe78 	bl	801c020 <iprintf>

  useg = pcb->unsent;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015334:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d102      	bne.n	8015342 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801533c:	f04f 33ff 	mov.w	r3, #4294967295
 8015340:	e116      	b.n	8015570 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015342:	887b      	ldrh	r3, [r7, #2]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d109      	bne.n	801535c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015348:	4b8b      	ldr	r3, [pc, #556]	; (8015578 <tcp_split_unsent_seg+0x274>)
 801534a:	f240 3253 	movw	r2, #851	; 0x353
 801534e:	498d      	ldr	r1, [pc, #564]	; (8015584 <tcp_split_unsent_seg+0x280>)
 8015350:	488b      	ldr	r0, [pc, #556]	; (8015580 <tcp_split_unsent_seg+0x27c>)
 8015352:	f006 fe65 	bl	801c020 <iprintf>
    return ERR_VAL;
 8015356:	f06f 0305 	mvn.w	r3, #5
 801535a:	e109      	b.n	8015570 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	891b      	ldrh	r3, [r3, #8]
 8015360:	887a      	ldrh	r2, [r7, #2]
 8015362:	429a      	cmp	r2, r3
 8015364:	d301      	bcc.n	801536a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015366:	2300      	movs	r3, #0
 8015368:	e102      	b.n	8015570 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801536e:	887a      	ldrh	r2, [r7, #2]
 8015370:	429a      	cmp	r2, r3
 8015372:	d906      	bls.n	8015382 <tcp_split_unsent_seg+0x7e>
 8015374:	4b80      	ldr	r3, [pc, #512]	; (8015578 <tcp_split_unsent_seg+0x274>)
 8015376:	f240 325b 	movw	r2, #859	; 0x35b
 801537a:	4983      	ldr	r1, [pc, #524]	; (8015588 <tcp_split_unsent_seg+0x284>)
 801537c:	4880      	ldr	r0, [pc, #512]	; (8015580 <tcp_split_unsent_seg+0x27c>)
 801537e:	f006 fe4f 	bl	801c020 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	891b      	ldrh	r3, [r3, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <tcp_split_unsent_seg+0x94>
 801538a:	4b7b      	ldr	r3, [pc, #492]	; (8015578 <tcp_split_unsent_seg+0x274>)
 801538c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015390:	497e      	ldr	r1, [pc, #504]	; (801558c <tcp_split_unsent_seg+0x288>)
 8015392:	487b      	ldr	r0, [pc, #492]	; (8015580 <tcp_split_unsent_seg+0x27c>)
 8015394:	f006 fe44 	bl	801c020 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	7a9b      	ldrb	r3, [r3, #10]
 801539c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801539e:	7bfb      	ldrb	r3, [r7, #15]
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	f003 0304 	and.w	r3, r3, #4
 80153a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	891a      	ldrh	r2, [r3, #8]
 80153ae:	887b      	ldrh	r3, [r7, #2]
 80153b0:	1ad3      	subs	r3, r2, r3
 80153b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80153b4:	7bbb      	ldrb	r3, [r7, #14]
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	89bb      	ldrh	r3, [r7, #12]
 80153ba:	4413      	add	r3, r2
 80153bc:	b29b      	uxth	r3, r3
 80153be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153c2:	4619      	mov	r1, r3
 80153c4:	2036      	movs	r0, #54	; 0x36
 80153c6:	f7fb fad1 	bl	801096c <pbuf_alloc>
 80153ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	f000 80b7 	beq.w	8015542 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	891a      	ldrh	r2, [r3, #8]
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	891b      	ldrh	r3, [r3, #8]
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	887b      	ldrh	r3, [r7, #2]
 80153e4:	4413      	add	r3, r2
 80153e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	6858      	ldr	r0, [r3, #4]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	685a      	ldr	r2, [r3, #4]
 80153f0:	7bbb      	ldrb	r3, [r7, #14]
 80153f2:	18d1      	adds	r1, r2, r3
 80153f4:	897b      	ldrh	r3, [r7, #10]
 80153f6:	89ba      	ldrh	r2, [r7, #12]
 80153f8:	f7fb ff92 	bl	8011320 <pbuf_copy_partial>
 80153fc:	4603      	mov	r3, r0
 80153fe:	461a      	mov	r2, r3
 8015400:	89bb      	ldrh	r3, [r7, #12]
 8015402:	4293      	cmp	r3, r2
 8015404:	f040 809f 	bne.w	8015546 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	899b      	ldrh	r3, [r3, #12]
 801540e:	b29b      	uxth	r3, r3
 8015410:	4618      	mov	r0, r3
 8015412:	f7fa faf3 	bl	800f9fc <lwip_htons>
 8015416:	4603      	mov	r3, r0
 8015418:	b2db      	uxtb	r3, r3
 801541a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801541e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015420:	2300      	movs	r3, #0
 8015422:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015424:	7efb      	ldrb	r3, [r7, #27]
 8015426:	f003 0308 	and.w	r3, r3, #8
 801542a:	2b00      	cmp	r3, #0
 801542c:	d007      	beq.n	801543e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801542e:	7efb      	ldrb	r3, [r7, #27]
 8015430:	f023 0308 	bic.w	r3, r3, #8
 8015434:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015436:	7ebb      	ldrb	r3, [r7, #26]
 8015438:	f043 0308 	orr.w	r3, r3, #8
 801543c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801543e:	7efb      	ldrb	r3, [r7, #27]
 8015440:	f003 0301 	and.w	r3, r3, #1
 8015444:	2b00      	cmp	r3, #0
 8015446:	d007      	beq.n	8015458 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015448:	7efb      	ldrb	r3, [r7, #27]
 801544a:	f023 0301 	bic.w	r3, r3, #1
 801544e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015450:	7ebb      	ldrb	r3, [r7, #26]
 8015452:	f043 0301 	orr.w	r3, r3, #1
 8015456:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4618      	mov	r0, r3
 8015460:	f7fa fae1 	bl	800fa26 <lwip_htonl>
 8015464:	4602      	mov	r2, r0
 8015466:	887b      	ldrh	r3, [r7, #2]
 8015468:	18d1      	adds	r1, r2, r3
 801546a:	7eba      	ldrb	r2, [r7, #26]
 801546c:	7bfb      	ldrb	r3, [r7, #15]
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	460b      	mov	r3, r1
 8015472:	6939      	ldr	r1, [r7, #16]
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7ff fea7 	bl	80151c8 <tcp_create_segment>
 801547a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d063      	beq.n	801554a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	4618      	mov	r0, r3
 8015488:	f7fb fdd8 	bl	801103c <pbuf_clen>
 801548c:	4603      	mov	r3, r0
 801548e:	461a      	mov	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015496:	1a9b      	subs	r3, r3, r2
 8015498:	b29a      	uxth	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	6858      	ldr	r0, [r3, #4]
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	891a      	ldrh	r2, [r3, #8]
 80154aa:	89bb      	ldrh	r3, [r7, #12]
 80154ac:	1ad3      	subs	r3, r2, r3
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	4619      	mov	r1, r3
 80154b2:	f7fb fbb5 	bl	8010c20 <pbuf_realloc>
  useg->len -= remainder;
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	891a      	ldrh	r2, [r3, #8]
 80154ba:	89bb      	ldrh	r3, [r7, #12]
 80154bc:	1ad3      	subs	r3, r2, r3
 80154be:	b29a      	uxth	r2, r3
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	68db      	ldr	r3, [r3, #12]
 80154c8:	899b      	ldrh	r3, [r3, #12]
 80154ca:	b29c      	uxth	r4, r3
 80154cc:	7efb      	ldrb	r3, [r7, #27]
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7fa fa93 	bl	800f9fc <lwip_htons>
 80154d6:	4603      	mov	r3, r0
 80154d8:	461a      	mov	r2, r3
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	4322      	orrs	r2, r4
 80154e0:	b292      	uxth	r2, r2
 80154e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7fb fda7 	bl	801103c <pbuf_clen>
 80154ee:	4603      	mov	r3, r0
 80154f0:	461a      	mov	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154f8:	4413      	add	r3, r2
 80154fa:	b29a      	uxth	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	4618      	mov	r0, r3
 8015508:	f7fb fd98 	bl	801103c <pbuf_clen>
 801550c:	4603      	mov	r3, r0
 801550e:	461a      	mov	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015516:	4413      	add	r3, r2
 8015518:	b29a      	uxth	r2, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	69fa      	ldr	r2, [r7, #28]
 801552c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d103      	bne.n	801553e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2200      	movs	r2, #0
 801553a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801553e:	2300      	movs	r3, #0
 8015540:	e016      	b.n	8015570 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015542:	bf00      	nop
 8015544:	e002      	b.n	801554c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015546:	bf00      	nop
 8015548:	e000      	b.n	801554c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801554a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d006      	beq.n	8015560 <tcp_split_unsent_seg+0x25c>
 8015552:	4b09      	ldr	r3, [pc, #36]	; (8015578 <tcp_split_unsent_seg+0x274>)
 8015554:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015558:	490d      	ldr	r1, [pc, #52]	; (8015590 <tcp_split_unsent_seg+0x28c>)
 801555a:	4809      	ldr	r0, [pc, #36]	; (8015580 <tcp_split_unsent_seg+0x27c>)
 801555c:	f006 fd60 	bl	801c020 <iprintf>
  if (p != NULL) {
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d002      	beq.n	801556c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015566:	6938      	ldr	r0, [r7, #16]
 8015568:	f7fb fce0 	bl	8010f2c <pbuf_free>
  }

  return ERR_MEM;
 801556c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015570:	4618      	mov	r0, r3
 8015572:	3724      	adds	r7, #36	; 0x24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd90      	pop	{r4, r7, pc}
 8015578:	08022ccc 	.word	0x08022ccc
 801557c:	08023060 	.word	0x08023060
 8015580:	08022d20 	.word	0x08022d20
 8015584:	08023084 	.word	0x08023084
 8015588:	080230a8 	.word	0x080230a8
 801558c:	080230b8 	.word	0x080230b8
 8015590:	080230c8 	.word	0x080230c8

08015594 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015594:	b590      	push	{r4, r7, lr}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <tcp_send_fin+0x1c>
 80155a2:	4b21      	ldr	r3, [pc, #132]	; (8015628 <tcp_send_fin+0x94>)
 80155a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80155a8:	4920      	ldr	r1, [pc, #128]	; (801562c <tcp_send_fin+0x98>)
 80155aa:	4821      	ldr	r0, [pc, #132]	; (8015630 <tcp_send_fin+0x9c>)
 80155ac:	f006 fd38 	bl	801c020 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d02e      	beq.n	8015616 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155bc:	60fb      	str	r3, [r7, #12]
 80155be:	e002      	b.n	80155c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d1f8      	bne.n	80155c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	899b      	ldrh	r3, [r3, #12]
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7fa fa10 	bl	800f9fc <lwip_htons>
 80155dc:	4603      	mov	r3, r0
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	f003 0307 	and.w	r3, r3, #7
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d116      	bne.n	8015616 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	899b      	ldrh	r3, [r3, #12]
 80155ee:	b29c      	uxth	r4, r3
 80155f0:	2001      	movs	r0, #1
 80155f2:	f7fa fa03 	bl	800f9fc <lwip_htons>
 80155f6:	4603      	mov	r3, r0
 80155f8:	461a      	mov	r2, r3
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	4322      	orrs	r2, r4
 8015600:	b292      	uxth	r2, r2
 8015602:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	8b5b      	ldrh	r3, [r3, #26]
 8015608:	f043 0320 	orr.w	r3, r3, #32
 801560c:	b29a      	uxth	r2, r3
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015612:	2300      	movs	r3, #0
 8015614:	e004      	b.n	8015620 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015616:	2101      	movs	r1, #1
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f000 f80b 	bl	8015634 <tcp_enqueue_flags>
 801561e:	4603      	mov	r3, r0
}
 8015620:	4618      	mov	r0, r3
 8015622:	3714      	adds	r7, #20
 8015624:	46bd      	mov	sp, r7
 8015626:	bd90      	pop	{r4, r7, pc}
 8015628:	08022ccc 	.word	0x08022ccc
 801562c:	080230d4 	.word	0x080230d4
 8015630:	08022d20 	.word	0x08022d20

08015634 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b08a      	sub	sp, #40	; 0x28
 8015638:	af02      	add	r7, sp, #8
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	460b      	mov	r3, r1
 801563e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015640:	2300      	movs	r3, #0
 8015642:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015644:	2300      	movs	r3, #0
 8015646:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015648:	78fb      	ldrb	r3, [r7, #3]
 801564a:	f003 0303 	and.w	r3, r3, #3
 801564e:	2b00      	cmp	r3, #0
 8015650:	d106      	bne.n	8015660 <tcp_enqueue_flags+0x2c>
 8015652:	4b67      	ldr	r3, [pc, #412]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 8015654:	f240 4212 	movw	r2, #1042	; 0x412
 8015658:	4966      	ldr	r1, [pc, #408]	; (80157f4 <tcp_enqueue_flags+0x1c0>)
 801565a:	4867      	ldr	r0, [pc, #412]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 801565c:	f006 fce0 	bl	801c020 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d106      	bne.n	8015674 <tcp_enqueue_flags+0x40>
 8015666:	4b62      	ldr	r3, [pc, #392]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 8015668:	f240 4213 	movw	r2, #1043	; 0x413
 801566c:	4963      	ldr	r1, [pc, #396]	; (80157fc <tcp_enqueue_flags+0x1c8>)
 801566e:	4862      	ldr	r0, [pc, #392]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 8015670:	f006 fcd6 	bl	801c020 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015674:	78fb      	ldrb	r3, [r7, #3]
 8015676:	f003 0302 	and.w	r3, r3, #2
 801567a:	2b00      	cmp	r3, #0
 801567c:	d001      	beq.n	8015682 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801567e:	2301      	movs	r3, #1
 8015680:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015682:	7ffb      	ldrb	r3, [r7, #31]
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	b2db      	uxtb	r3, r3
 8015688:	f003 0304 	and.w	r3, r3, #4
 801568c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801568e:	7dfb      	ldrb	r3, [r7, #23]
 8015690:	b29b      	uxth	r3, r3
 8015692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015696:	4619      	mov	r1, r3
 8015698:	2036      	movs	r0, #54	; 0x36
 801569a:	f7fb f967 	bl	801096c <pbuf_alloc>
 801569e:	6138      	str	r0, [r7, #16]
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d109      	bne.n	80156ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	8b5b      	ldrh	r3, [r3, #26]
 80156aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156ae:	b29a      	uxth	r2, r3
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80156b4:	f04f 33ff 	mov.w	r3, #4294967295
 80156b8:	e095      	b.n	80157e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80156ba:	693b      	ldr	r3, [r7, #16]
 80156bc:	895a      	ldrh	r2, [r3, #10]
 80156be:	7dfb      	ldrb	r3, [r7, #23]
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d206      	bcs.n	80156d4 <tcp_enqueue_flags+0xa0>
 80156c6:	4b4a      	ldr	r3, [pc, #296]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 80156c8:	f240 423a 	movw	r2, #1082	; 0x43a
 80156cc:	494c      	ldr	r1, [pc, #304]	; (8015800 <tcp_enqueue_flags+0x1cc>)
 80156ce:	484a      	ldr	r0, [pc, #296]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 80156d0:	f006 fca6 	bl	801c020 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80156d8:	78fa      	ldrb	r2, [r7, #3]
 80156da:	7ffb      	ldrb	r3, [r7, #31]
 80156dc:	9300      	str	r3, [sp, #0]
 80156de:	460b      	mov	r3, r1
 80156e0:	6939      	ldr	r1, [r7, #16]
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7ff fd70 	bl	80151c8 <tcp_create_segment>
 80156e8:	60f8      	str	r0, [r7, #12]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d109      	bne.n	8015704 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	8b5b      	ldrh	r3, [r3, #26]
 80156f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80156fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015702:	e070      	b.n	80157e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	f003 0303 	and.w	r3, r3, #3
 801570c:	2b00      	cmp	r3, #0
 801570e:	d006      	beq.n	801571e <tcp_enqueue_flags+0xea>
 8015710:	4b37      	ldr	r3, [pc, #220]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 8015712:	f240 4242 	movw	r2, #1090	; 0x442
 8015716:	493b      	ldr	r1, [pc, #236]	; (8015804 <tcp_enqueue_flags+0x1d0>)
 8015718:	4837      	ldr	r0, [pc, #220]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 801571a:	f006 fc81 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	891b      	ldrh	r3, [r3, #8]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d006      	beq.n	8015734 <tcp_enqueue_flags+0x100>
 8015726:	4b32      	ldr	r3, [pc, #200]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 8015728:	f240 4243 	movw	r2, #1091	; 0x443
 801572c:	4936      	ldr	r1, [pc, #216]	; (8015808 <tcp_enqueue_flags+0x1d4>)
 801572e:	4832      	ldr	r0, [pc, #200]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 8015730:	f006 fc76 	bl	801c020 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015738:	2b00      	cmp	r3, #0
 801573a:	d103      	bne.n	8015744 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	68fa      	ldr	r2, [r7, #12]
 8015740:	66da      	str	r2, [r3, #108]	; 0x6c
 8015742:	e00d      	b.n	8015760 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015748:	61bb      	str	r3, [r7, #24]
 801574a:	e002      	b.n	8015752 <tcp_enqueue_flags+0x11e>
 801574c:	69bb      	ldr	r3, [r7, #24]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	61bb      	str	r3, [r7, #24]
 8015752:	69bb      	ldr	r3, [r7, #24]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d1f8      	bne.n	801574c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2200      	movs	r2, #0
 8015764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015768:	78fb      	ldrb	r3, [r7, #3]
 801576a:	f003 0302 	and.w	r3, r3, #2
 801576e:	2b00      	cmp	r3, #0
 8015770:	d104      	bne.n	801577c <tcp_enqueue_flags+0x148>
 8015772:	78fb      	ldrb	r3, [r7, #3]
 8015774:	f003 0301 	and.w	r3, r3, #1
 8015778:	2b00      	cmp	r3, #0
 801577a:	d004      	beq.n	8015786 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015780:	1c5a      	adds	r2, r3, #1
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015786:	78fb      	ldrb	r3, [r7, #3]
 8015788:	f003 0301 	and.w	r3, r3, #1
 801578c:	2b00      	cmp	r3, #0
 801578e:	d006      	beq.n	801579e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	8b5b      	ldrh	r3, [r3, #26]
 8015794:	f043 0320 	orr.w	r3, r3, #32
 8015798:	b29a      	uxth	r2, r3
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	685b      	ldr	r3, [r3, #4]
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fb fc4a 	bl	801103c <pbuf_clen>
 80157a8:	4603      	mov	r3, r0
 80157aa:	461a      	mov	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157b2:	4413      	add	r3, r2
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d00e      	beq.n	80157e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10a      	bne.n	80157e4 <tcp_enqueue_flags+0x1b0>
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d106      	bne.n	80157e4 <tcp_enqueue_flags+0x1b0>
 80157d6:	4b06      	ldr	r3, [pc, #24]	; (80157f0 <tcp_enqueue_flags+0x1bc>)
 80157d8:	f240 4266 	movw	r2, #1126	; 0x466
 80157dc:	490b      	ldr	r1, [pc, #44]	; (801580c <tcp_enqueue_flags+0x1d8>)
 80157de:	4806      	ldr	r0, [pc, #24]	; (80157f8 <tcp_enqueue_flags+0x1c4>)
 80157e0:	f006 fc1e 	bl	801c020 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80157e4:	2300      	movs	r3, #0
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3720      	adds	r7, #32
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	08022ccc 	.word	0x08022ccc
 80157f4:	080230f0 	.word	0x080230f0
 80157f8:	08022d20 	.word	0x08022d20
 80157fc:	08023148 	.word	0x08023148
 8015800:	08023168 	.word	0x08023168
 8015804:	080231a4 	.word	0x080231a4
 8015808:	080231bc 	.word	0x080231bc
 801580c:	080231e8 	.word	0x080231e8

08015810 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015810:	b5b0      	push	{r4, r5, r7, lr}
 8015812:	b08a      	sub	sp, #40	; 0x28
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d106      	bne.n	801582c <tcp_output+0x1c>
 801581e:	4ba0      	ldr	r3, [pc, #640]	; (8015aa0 <tcp_output+0x290>)
 8015820:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015824:	499f      	ldr	r1, [pc, #636]	; (8015aa4 <tcp_output+0x294>)
 8015826:	48a0      	ldr	r0, [pc, #640]	; (8015aa8 <tcp_output+0x298>)
 8015828:	f006 fbfa 	bl	801c020 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	7d1b      	ldrb	r3, [r3, #20]
 8015830:	2b01      	cmp	r3, #1
 8015832:	d106      	bne.n	8015842 <tcp_output+0x32>
 8015834:	4b9a      	ldr	r3, [pc, #616]	; (8015aa0 <tcp_output+0x290>)
 8015836:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801583a:	499c      	ldr	r1, [pc, #624]	; (8015aac <tcp_output+0x29c>)
 801583c:	489a      	ldr	r0, [pc, #616]	; (8015aa8 <tcp_output+0x298>)
 801583e:	f006 fbef 	bl	801c020 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015842:	4b9b      	ldr	r3, [pc, #620]	; (8015ab0 <tcp_output+0x2a0>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	429a      	cmp	r2, r3
 801584a:	d101      	bne.n	8015850 <tcp_output+0x40>
    return ERR_OK;
 801584c:	2300      	movs	r3, #0
 801584e:	e1d2      	b.n	8015bf6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801585c:	429a      	cmp	r2, r3
 801585e:	d203      	bcs.n	8015868 <tcp_output+0x58>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015866:	e002      	b.n	801586e <tcp_output+0x5e>
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801586e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015874:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015878:	2b00      	cmp	r3, #0
 801587a:	d10b      	bne.n	8015894 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	8b5b      	ldrh	r3, [r3, #26]
 8015880:	f003 0302 	and.w	r3, r3, #2
 8015884:	2b00      	cmp	r3, #0
 8015886:	f000 81a9 	beq.w	8015bdc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 fdd4 	bl	8016438 <tcp_send_empty_ack>
 8015890:	4603      	mov	r3, r0
 8015892:	e1b0      	b.n	8015bf6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015894:	6879      	ldr	r1, [r7, #4]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	3304      	adds	r3, #4
 801589a:	461a      	mov	r2, r3
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7ff fc77 	bl	8015190 <tcp_route>
 80158a2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d102      	bne.n	80158b0 <tcp_output+0xa0>
    return ERR_RTE;
 80158aa:	f06f 0303 	mvn.w	r3, #3
 80158ae:	e1a2      	b.n	8015bf6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d003      	beq.n	80158be <tcp_output+0xae>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d111      	bne.n	80158e2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d002      	beq.n	80158ca <tcp_output+0xba>
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	3304      	adds	r3, #4
 80158c8:	e000      	b.n	80158cc <tcp_output+0xbc>
 80158ca:	2300      	movs	r3, #0
 80158cc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d102      	bne.n	80158da <tcp_output+0xca>
      return ERR_RTE;
 80158d4:	f06f 0303 	mvn.w	r3, #3
 80158d8:	e18d      	b.n	8015bf6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80158e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e4:	68db      	ldr	r3, [r3, #12]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7fa f89c 	bl	800fa26 <lwip_htonl>
 80158ee:	4602      	mov	r2, r0
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158f4:	1ad3      	subs	r3, r2, r3
 80158f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158f8:	8912      	ldrh	r2, [r2, #8]
 80158fa:	4413      	add	r3, r2
 80158fc:	69ba      	ldr	r2, [r7, #24]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d227      	bcs.n	8015952 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015908:	461a      	mov	r2, r3
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	4293      	cmp	r3, r2
 801590e:	d114      	bne.n	801593a <tcp_output+0x12a>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015914:	2b00      	cmp	r3, #0
 8015916:	d110      	bne.n	801593a <tcp_output+0x12a>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801591e:	2b00      	cmp	r3, #0
 8015920:	d10b      	bne.n	801593a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2200      	movs	r2, #0
 8015926:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2201      	movs	r2, #1
 801592e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2200      	movs	r2, #0
 8015936:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	8b5b      	ldrh	r3, [r3, #26]
 801593e:	f003 0302 	and.w	r3, r3, #2
 8015942:	2b00      	cmp	r3, #0
 8015944:	f000 814c 	beq.w	8015be0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 fd75 	bl	8016438 <tcp_send_empty_ack>
 801594e:	4603      	mov	r3, r0
 8015950:	e151      	b.n	8015bf6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2200      	movs	r2, #0
 8015956:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801595e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015960:	6a3b      	ldr	r3, [r7, #32]
 8015962:	2b00      	cmp	r3, #0
 8015964:	f000 811b 	beq.w	8015b9e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8015968:	e002      	b.n	8015970 <tcp_output+0x160>
 801596a:	6a3b      	ldr	r3, [r7, #32]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	623b      	str	r3, [r7, #32]
 8015970:	6a3b      	ldr	r3, [r7, #32]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1f8      	bne.n	801596a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015978:	e111      	b.n	8015b9e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	899b      	ldrh	r3, [r3, #12]
 8015980:	b29b      	uxth	r3, r3
 8015982:	4618      	mov	r0, r3
 8015984:	f7fa f83a 	bl	800f9fc <lwip_htons>
 8015988:	4603      	mov	r3, r0
 801598a:	b2db      	uxtb	r3, r3
 801598c:	f003 0304 	and.w	r3, r3, #4
 8015990:	2b00      	cmp	r3, #0
 8015992:	d006      	beq.n	80159a2 <tcp_output+0x192>
 8015994:	4b42      	ldr	r3, [pc, #264]	; (8015aa0 <tcp_output+0x290>)
 8015996:	f240 5237 	movw	r2, #1335	; 0x537
 801599a:	4946      	ldr	r1, [pc, #280]	; (8015ab4 <tcp_output+0x2a4>)
 801599c:	4842      	ldr	r0, [pc, #264]	; (8015aa8 <tcp_output+0x298>)
 801599e:	f006 fb3f 	bl	801c020 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d01f      	beq.n	80159ea <tcp_output+0x1da>
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	8b5b      	ldrh	r3, [r3, #26]
 80159ae:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d119      	bne.n	80159ea <tcp_output+0x1da>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00b      	beq.n	80159d6 <tcp_output+0x1c6>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d110      	bne.n	80159ea <tcp_output+0x1da>
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159cc:	891a      	ldrh	r2, [r3, #8]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d209      	bcs.n	80159ea <tcp_output+0x1da>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d004      	beq.n	80159ea <tcp_output+0x1da>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159e6:	2b0f      	cmp	r3, #15
 80159e8:	d901      	bls.n	80159ee <tcp_output+0x1de>
 80159ea:	2301      	movs	r3, #1
 80159ec:	e000      	b.n	80159f0 <tcp_output+0x1e0>
 80159ee:	2300      	movs	r3, #0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d106      	bne.n	8015a02 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	8b5b      	ldrh	r3, [r3, #26]
 80159f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	f000 80e3 	beq.w	8015bc8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	7d1b      	ldrb	r3, [r3, #20]
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	d00d      	beq.n	8015a26 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	899b      	ldrh	r3, [r3, #12]
 8015a10:	b29c      	uxth	r4, r3
 8015a12:	2010      	movs	r0, #16
 8015a14:	f7f9 fff2 	bl	800f9fc <lwip_htons>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	4322      	orrs	r2, r4
 8015a22:	b292      	uxth	r2, r2
 8015a24:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015a26:	697a      	ldr	r2, [r7, #20]
 8015a28:	6879      	ldr	r1, [r7, #4]
 8015a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a2c:	f000 f908 	bl	8015c40 <tcp_output_segment>
 8015a30:	4603      	mov	r3, r0
 8015a32:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d009      	beq.n	8015a50 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	8b5b      	ldrh	r3, [r3, #26]
 8015a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a44:	b29a      	uxth	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	835a      	strh	r2, [r3, #26]
      return err;
 8015a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a4e:	e0d2      	b.n	8015bf6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	7d1b      	ldrb	r3, [r3, #20]
 8015a5c:	2b02      	cmp	r3, #2
 8015a5e:	d006      	beq.n	8015a6e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	8b5b      	ldrh	r3, [r3, #26]
 8015a64:	f023 0303 	bic.w	r3, r3, #3
 8015a68:	b29a      	uxth	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7f9 ffd6 	bl	800fa26 <lwip_htonl>
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7e:	891b      	ldrh	r3, [r3, #8]
 8015a80:	461d      	mov	r5, r3
 8015a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a84:	68db      	ldr	r3, [r3, #12]
 8015a86:	899b      	ldrh	r3, [r3, #12]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7f9 ffb6 	bl	800f9fc <lwip_htons>
 8015a90:	4603      	mov	r3, r0
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	f003 0303 	and.w	r3, r3, #3
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d00d      	beq.n	8015ab8 <tcp_output+0x2a8>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	e00c      	b.n	8015aba <tcp_output+0x2aa>
 8015aa0:	08022ccc 	.word	0x08022ccc
 8015aa4:	08023210 	.word	0x08023210
 8015aa8:	08022d20 	.word	0x08022d20
 8015aac:	08023228 	.word	0x08023228
 8015ab0:	200082d8 	.word	0x200082d8
 8015ab4:	08023250 	.word	0x08023250
 8015ab8:	2300      	movs	r3, #0
 8015aba:	442b      	add	r3, r5
 8015abc:	4423      	add	r3, r4
 8015abe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	1ad3      	subs	r3, r2, r3
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	da02      	bge.n	8015ad2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	68ba      	ldr	r2, [r7, #8]
 8015ad0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad4:	891b      	ldrh	r3, [r3, #8]
 8015ad6:	461c      	mov	r4, r3
 8015ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7f9 ff8b 	bl	800f9fc <lwip_htons>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	f003 0303 	and.w	r3, r3, #3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d001      	beq.n	8015af6 <tcp_output+0x2e6>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e000      	b.n	8015af8 <tcp_output+0x2e8>
 8015af6:	2300      	movs	r3, #0
 8015af8:	4423      	add	r3, r4
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d049      	beq.n	8015b92 <tcp_output+0x382>
      seg->next = NULL;
 8015afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b00:	2200      	movs	r2, #0
 8015b02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d105      	bne.n	8015b18 <tcp_output+0x308>
        pcb->unacked = seg;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b10:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b14:	623b      	str	r3, [r7, #32]
 8015b16:	e03f      	b.n	8015b98 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1a:	68db      	ldr	r3, [r3, #12]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7f9 ff81 	bl	800fa26 <lwip_htonl>
 8015b24:	4604      	mov	r4, r0
 8015b26:	6a3b      	ldr	r3, [r7, #32]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f9 ff7a 	bl	800fa26 <lwip_htonl>
 8015b32:	4603      	mov	r3, r0
 8015b34:	1ae3      	subs	r3, r4, r3
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	da24      	bge.n	8015b84 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3370      	adds	r3, #112	; 0x70
 8015b3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b40:	e002      	b.n	8015b48 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d011      	beq.n	8015b74 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7f9 ff64 	bl	800fa26 <lwip_htonl>
 8015b5e:	4604      	mov	r4, r0
 8015b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7f9 ff5d 	bl	800fa26 <lwip_htonl>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	dbe6      	blt.n	8015b42 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b80:	601a      	str	r2, [r3, #0]
 8015b82:	e009      	b.n	8015b98 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b84:	6a3b      	ldr	r3, [r7, #32]
 8015b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015b8a:	6a3b      	ldr	r3, [r7, #32]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	623b      	str	r3, [r7, #32]
 8015b90:	e002      	b.n	8015b98 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b94:	f7fc fc42 	bl	801241c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d012      	beq.n	8015bca <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f9 ff3b 	bl	800fa26 <lwip_htonl>
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bba:	8912      	ldrh	r2, [r2, #8]
 8015bbc:	4413      	add	r3, r2
  while (seg != NULL &&
 8015bbe:	69ba      	ldr	r2, [r7, #24]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	f4bf aeda 	bcs.w	801597a <tcp_output+0x16a>
 8015bc6:	e000      	b.n	8015bca <tcp_output+0x3ba>
      break;
 8015bc8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d108      	bne.n	8015be4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015bda:	e004      	b.n	8015be6 <tcp_output+0x3d6>
    goto output_done;
 8015bdc:	bf00      	nop
 8015bde:	e002      	b.n	8015be6 <tcp_output+0x3d6>
    goto output_done;
 8015be0:	bf00      	nop
 8015be2:	e000      	b.n	8015be6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015be4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	8b5b      	ldrh	r3, [r3, #26]
 8015bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3728      	adds	r7, #40	; 0x28
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8015bfe:	bf00      	nop

08015c00 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d106      	bne.n	8015c1c <tcp_output_segment_busy+0x1c>
 8015c0e:	4b09      	ldr	r3, [pc, #36]	; (8015c34 <tcp_output_segment_busy+0x34>)
 8015c10:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c14:	4908      	ldr	r1, [pc, #32]	; (8015c38 <tcp_output_segment_busy+0x38>)
 8015c16:	4809      	ldr	r0, [pc, #36]	; (8015c3c <tcp_output_segment_busy+0x3c>)
 8015c18:	f006 fa02 	bl	801c020 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	7b9b      	ldrb	r3, [r3, #14]
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d001      	beq.n	8015c2a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015c26:	2301      	movs	r3, #1
 8015c28:	e000      	b.n	8015c2c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015c2a:	2300      	movs	r3, #0
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	08022ccc 	.word	0x08022ccc
 8015c38:	08023268 	.word	0x08023268
 8015c3c:	08022d20 	.word	0x08022d20

08015c40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015c40:	b5b0      	push	{r4, r5, r7, lr}
 8015c42:	b08c      	sub	sp, #48	; 0x30
 8015c44:	af04      	add	r7, sp, #16
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d106      	bne.n	8015c60 <tcp_output_segment+0x20>
 8015c52:	4b64      	ldr	r3, [pc, #400]	; (8015de4 <tcp_output_segment+0x1a4>)
 8015c54:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015c58:	4963      	ldr	r1, [pc, #396]	; (8015de8 <tcp_output_segment+0x1a8>)
 8015c5a:	4864      	ldr	r0, [pc, #400]	; (8015dec <tcp_output_segment+0x1ac>)
 8015c5c:	f006 f9e0 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d106      	bne.n	8015c74 <tcp_output_segment+0x34>
 8015c66:	4b5f      	ldr	r3, [pc, #380]	; (8015de4 <tcp_output_segment+0x1a4>)
 8015c68:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015c6c:	4960      	ldr	r1, [pc, #384]	; (8015df0 <tcp_output_segment+0x1b0>)
 8015c6e:	485f      	ldr	r0, [pc, #380]	; (8015dec <tcp_output_segment+0x1ac>)
 8015c70:	f006 f9d6 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d106      	bne.n	8015c88 <tcp_output_segment+0x48>
 8015c7a:	4b5a      	ldr	r3, [pc, #360]	; (8015de4 <tcp_output_segment+0x1a4>)
 8015c7c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015c80:	495c      	ldr	r1, [pc, #368]	; (8015df4 <tcp_output_segment+0x1b4>)
 8015c82:	485a      	ldr	r0, [pc, #360]	; (8015dec <tcp_output_segment+0x1ac>)
 8015c84:	f006 f9cc 	bl	801c020 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015c88:	68f8      	ldr	r0, [r7, #12]
 8015c8a:	f7ff ffb9 	bl	8015c00 <tcp_output_segment_busy>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d001      	beq.n	8015c98 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	e0a0      	b.n	8015dda <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	68dc      	ldr	r4, [r3, #12]
 8015ca0:	4610      	mov	r0, r2
 8015ca2:	f7f9 fec0 	bl	800fa26 <lwip_htonl>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	68dc      	ldr	r4, [r3, #12]
 8015cb2:	4610      	mov	r0, r2
 8015cb4:	f7f9 fea2 	bl	800f9fc <lwip_htons>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc0:	68ba      	ldr	r2, [r7, #8]
 8015cc2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015cc4:	441a      	add	r2, r3
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	3314      	adds	r3, #20
 8015cd0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	7a9b      	ldrb	r3, [r3, #10]
 8015cd6:	f003 0301 	and.w	r3, r3, #1
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d015      	beq.n	8015d0a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	6879      	ldr	r1, [r7, #4]
 8015ce6:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8015cea:	f7fc fe8d 	bl	8012a08 <tcp_eff_send_mss_netif>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015cf2:	8b7b      	ldrh	r3, [r7, #26]
 8015cf4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7f9 fe94 	bl	800fa26 <lwip_htonl>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015d04:	69fb      	ldr	r3, [r7, #28]
 8015d06:	3304      	adds	r3, #4
 8015d08:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	da02      	bge.n	8015d1a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	2200      	movs	r2, #0
 8015d18:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d10c      	bne.n	8015d3c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015d22:	4b35      	ldr	r3, [pc, #212]	; (8015df8 <tcp_output_segment+0x1b8>)
 8015d24:	681a      	ldr	r2, [r3, #0]
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f9 fe78 	bl	800fa26 <lwip_htonl>
 8015d36:	4602      	mov	r2, r0
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	68db      	ldr	r3, [r3, #12]
 8015d40:	461a      	mov	r2, r3
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	8959      	ldrh	r1, [r3, #10]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	8b3a      	ldrh	r2, [r7, #24]
 8015d58:	1a8a      	subs	r2, r1, r2
 8015d5a:	b292      	uxth	r2, r2
 8015d5c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	8919      	ldrh	r1, [r3, #8]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	8b3a      	ldrh	r2, [r7, #24]
 8015d6a:	1a8a      	subs	r2, r1, r2
 8015d6c:	b292      	uxth	r2, r2
 8015d6e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	68fa      	ldr	r2, [r7, #12]
 8015d76:	68d2      	ldr	r2, [r2, #12]
 8015d78:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	741a      	strb	r2, [r3, #16]
 8015d82:	2200      	movs	r2, #0
 8015d84:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	68db      	ldr	r3, [r3, #12]
 8015d8a:	f103 0214 	add.w	r2, r3, #20
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	7a9b      	ldrb	r3, [r3, #10]
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	f003 0304 	and.w	r3, r3, #4
 8015d98:	4413      	add	r3, r2
 8015d9a:	69fa      	ldr	r2, [r7, #28]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d006      	beq.n	8015dae <tcp_output_segment+0x16e>
 8015da0:	4b10      	ldr	r3, [pc, #64]	; (8015de4 <tcp_output_segment+0x1a4>)
 8015da2:	f240 621c 	movw	r2, #1564	; 0x61c
 8015da6:	4915      	ldr	r1, [pc, #84]	; (8015dfc <tcp_output_segment+0x1bc>)
 8015da8:	4810      	ldr	r0, [pc, #64]	; (8015dec <tcp_output_segment+0x1ac>)
 8015daa:	f006 f939 	bl	801c020 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6858      	ldr	r0, [r3, #4]
 8015db2:	68b9      	ldr	r1, [r7, #8]
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	1d1c      	adds	r4, r3, #4
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	7add      	ldrb	r5, [r3, #11]
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	7a9b      	ldrb	r3, [r3, #10]
 8015dc0:	687a      	ldr	r2, [r7, #4]
 8015dc2:	9202      	str	r2, [sp, #8]
 8015dc4:	2206      	movs	r2, #6
 8015dc6:	9201      	str	r2, [sp, #4]
 8015dc8:	9300      	str	r3, [sp, #0]
 8015dca:	462b      	mov	r3, r5
 8015dcc:	4622      	mov	r2, r4
 8015dce:	f004 fb71 	bl	801a4b4 <ip4_output_if>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3720      	adds	r7, #32
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bdb0      	pop	{r4, r5, r7, pc}
 8015de2:	bf00      	nop
 8015de4:	08022ccc 	.word	0x08022ccc
 8015de8:	08023290 	.word	0x08023290
 8015dec:	08022d20 	.word	0x08022d20
 8015df0:	080232b0 	.word	0x080232b0
 8015df4:	080232d0 	.word	0x080232d0
 8015df8:	200082c8 	.word	0x200082c8
 8015dfc:	080232f4 	.word	0x080232f4

08015e00 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015e00:	b5b0      	push	{r4, r5, r7, lr}
 8015e02:	b084      	sub	sp, #16
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d106      	bne.n	8015e1c <tcp_rexmit_rto_prepare+0x1c>
 8015e0e:	4b31      	ldr	r3, [pc, #196]	; (8015ed4 <tcp_rexmit_rto_prepare+0xd4>)
 8015e10:	f240 6263 	movw	r2, #1635	; 0x663
 8015e14:	4930      	ldr	r1, [pc, #192]	; (8015ed8 <tcp_rexmit_rto_prepare+0xd8>)
 8015e16:	4831      	ldr	r0, [pc, #196]	; (8015edc <tcp_rexmit_rto_prepare+0xdc>)
 8015e18:	f006 f902 	bl	801c020 <iprintf>

  if (pcb->unacked == NULL) {
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d102      	bne.n	8015e2a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015e24:	f06f 0305 	mvn.w	r3, #5
 8015e28:	e050      	b.n	8015ecc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e2e:	60fb      	str	r3, [r7, #12]
 8015e30:	e00b      	b.n	8015e4a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015e32:	68f8      	ldr	r0, [r7, #12]
 8015e34:	f7ff fee4 	bl	8015c00 <tcp_output_segment_busy>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d002      	beq.n	8015e44 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015e3e:	f06f 0305 	mvn.w	r3, #5
 8015e42:	e043      	b.n	8015ecc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	60fb      	str	r3, [r7, #12]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d1ef      	bne.n	8015e32 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015e52:	68f8      	ldr	r0, [r7, #12]
 8015e54:	f7ff fed4 	bl	8015c00 <tcp_output_segment_busy>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d002      	beq.n	8015e64 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015e5e:	f06f 0305 	mvn.w	r3, #5
 8015e62:	e033      	b.n	8015ecc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2200      	movs	r2, #0
 8015e78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	8b5b      	ldrh	r3, [r3, #26]
 8015e7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7f9 fdc9 	bl	800fa26 <lwip_htonl>
 8015e94:	4604      	mov	r4, r0
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	891b      	ldrh	r3, [r3, #8]
 8015e9a:	461d      	mov	r5, r3
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	899b      	ldrh	r3, [r3, #12]
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7f9 fda9 	bl	800f9fc <lwip_htons>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	f003 0303 	and.w	r3, r3, #3
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d001      	beq.n	8015eba <tcp_rexmit_rto_prepare+0xba>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e000      	b.n	8015ebc <tcp_rexmit_rto_prepare+0xbc>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	442b      	add	r3, r5
 8015ebe:	18e2      	adds	r2, r4, r3
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015eca:	2300      	movs	r3, #0
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3710      	adds	r7, #16
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8015ed4:	08022ccc 	.word	0x08022ccc
 8015ed8:	08023308 	.word	0x08023308
 8015edc:	08022d20 	.word	0x08022d20

08015ee0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d106      	bne.n	8015efc <tcp_rexmit_rto_commit+0x1c>
 8015eee:	4b0d      	ldr	r3, [pc, #52]	; (8015f24 <tcp_rexmit_rto_commit+0x44>)
 8015ef0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015ef4:	490c      	ldr	r1, [pc, #48]	; (8015f28 <tcp_rexmit_rto_commit+0x48>)
 8015ef6:	480d      	ldr	r0, [pc, #52]	; (8015f2c <tcp_rexmit_rto_commit+0x4c>)
 8015ef8:	f006 f892 	bl	801c020 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f02:	2bff      	cmp	r3, #255	; 0xff
 8015f04:	d007      	beq.n	8015f16 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	b2da      	uxtb	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f7ff fc7a 	bl	8015810 <tcp_output>
}
 8015f1c:	bf00      	nop
 8015f1e:	3708      	adds	r7, #8
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	08022ccc 	.word	0x08022ccc
 8015f28:	0802332c 	.word	0x0802332c
 8015f2c:	08022d20 	.word	0x08022d20

08015f30 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d106      	bne.n	8015f4c <tcp_rexmit_rto+0x1c>
 8015f3e:	4b0a      	ldr	r3, [pc, #40]	; (8015f68 <tcp_rexmit_rto+0x38>)
 8015f40:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015f44:	4909      	ldr	r1, [pc, #36]	; (8015f6c <tcp_rexmit_rto+0x3c>)
 8015f46:	480a      	ldr	r0, [pc, #40]	; (8015f70 <tcp_rexmit_rto+0x40>)
 8015f48:	f006 f86a 	bl	801c020 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7ff ff57 	bl	8015e00 <tcp_rexmit_rto_prepare>
 8015f52:	4603      	mov	r3, r0
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d102      	bne.n	8015f5e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff ffc1 	bl	8015ee0 <tcp_rexmit_rto_commit>
  }
}
 8015f5e:	bf00      	nop
 8015f60:	3708      	adds	r7, #8
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	08022ccc 	.word	0x08022ccc
 8015f6c:	08023350 	.word	0x08023350
 8015f70:	08022d20 	.word	0x08022d20

08015f74 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015f74:	b590      	push	{r4, r7, lr}
 8015f76:	b085      	sub	sp, #20
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d106      	bne.n	8015f90 <tcp_rexmit+0x1c>
 8015f82:	4b2f      	ldr	r3, [pc, #188]	; (8016040 <tcp_rexmit+0xcc>)
 8015f84:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015f88:	492e      	ldr	r1, [pc, #184]	; (8016044 <tcp_rexmit+0xd0>)
 8015f8a:	482f      	ldr	r0, [pc, #188]	; (8016048 <tcp_rexmit+0xd4>)
 8015f8c:	f006 f848 	bl	801c020 <iprintf>

  if (pcb->unacked == NULL) {
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d102      	bne.n	8015f9e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015f98:	f06f 0305 	mvn.w	r3, #5
 8015f9c:	e04c      	b.n	8016038 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fa2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015fa4:	68b8      	ldr	r0, [r7, #8]
 8015fa6:	f7ff fe2b 	bl	8015c00 <tcp_output_segment_busy>
 8015faa:	4603      	mov	r3, r0
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d002      	beq.n	8015fb6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015fb0:	f06f 0305 	mvn.w	r3, #5
 8015fb4:	e040      	b.n	8016038 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	336c      	adds	r3, #108	; 0x6c
 8015fc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015fc4:	e002      	b.n	8015fcc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d011      	beq.n	8015ff8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7f9 fd22 	bl	800fa26 <lwip_htonl>
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	68db      	ldr	r3, [r3, #12]
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f9 fd1b 	bl	800fa26 <lwip_htonl>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	dbe6      	blt.n	8015fc6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681a      	ldr	r2, [r3, #0]
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	68ba      	ldr	r2, [r7, #8]
 8016004:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d103      	bne.n	8016016 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2200      	movs	r2, #0
 8016012:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801601c:	2bff      	cmp	r3, #255	; 0xff
 801601e:	d007      	beq.n	8016030 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016026:	3301      	adds	r3, #1
 8016028:	b2da      	uxtb	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2200      	movs	r2, #0
 8016034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016036:	2300      	movs	r3, #0
}
 8016038:	4618      	mov	r0, r3
 801603a:	3714      	adds	r7, #20
 801603c:	46bd      	mov	sp, r7
 801603e:	bd90      	pop	{r4, r7, pc}
 8016040:	08022ccc 	.word	0x08022ccc
 8016044:	0802336c 	.word	0x0802336c
 8016048:	08022d20 	.word	0x08022d20

0801604c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d106      	bne.n	8016068 <tcp_rexmit_fast+0x1c>
 801605a:	4b2e      	ldr	r3, [pc, #184]	; (8016114 <tcp_rexmit_fast+0xc8>)
 801605c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016060:	492d      	ldr	r1, [pc, #180]	; (8016118 <tcp_rexmit_fast+0xcc>)
 8016062:	482e      	ldr	r0, [pc, #184]	; (801611c <tcp_rexmit_fast+0xd0>)
 8016064:	f005 ffdc 	bl	801c020 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801606c:	2b00      	cmp	r3, #0
 801606e:	d04d      	beq.n	801610c <tcp_rexmit_fast+0xc0>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8b5b      	ldrh	r3, [r3, #26]
 8016074:	f003 0304 	and.w	r3, r3, #4
 8016078:	2b00      	cmp	r3, #0
 801607a:	d147      	bne.n	801610c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f7ff ff79 	bl	8015f74 <tcp_rexmit>
 8016082:	4603      	mov	r3, r0
 8016084:	2b00      	cmp	r3, #0
 8016086:	d141      	bne.n	801610c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016094:	429a      	cmp	r2, r3
 8016096:	d207      	bcs.n	80160a8 <tcp_rexmit_fast+0x5c>
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801609e:	0fda      	lsrs	r2, r3, #31
 80160a0:	4413      	add	r3, r2
 80160a2:	105b      	asrs	r3, r3, #1
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	e006      	b.n	80160b6 <tcp_rexmit_fast+0x6a>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160ae:	0fda      	lsrs	r2, r3, #31
 80160b0:	4413      	add	r3, r2
 80160b2:	105b      	asrs	r3, r3, #1
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80160c2:	461a      	mov	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d206      	bcs.n	80160dc <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160d2:	005b      	lsls	r3, r3, #1
 80160d4:	b29a      	uxth	r2, r3
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160e6:	4619      	mov	r1, r3
 80160e8:	0049      	lsls	r1, r1, #1
 80160ea:	440b      	add	r3, r1
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	4413      	add	r3, r2
 80160f0:	b29a      	uxth	r2, r3
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	8b5b      	ldrh	r3, [r3, #26]
 80160fc:	f043 0304 	orr.w	r3, r3, #4
 8016100:	b29a      	uxth	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2200      	movs	r2, #0
 801610a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801610c:	bf00      	nop
 801610e:	3708      	adds	r7, #8
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	08022ccc 	.word	0x08022ccc
 8016118:	08023384 	.word	0x08023384
 801611c:	08022d20 	.word	0x08022d20

08016120 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b086      	sub	sp, #24
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	607b      	str	r3, [r7, #4]
 801612a:	460b      	mov	r3, r1
 801612c:	817b      	strh	r3, [r7, #10]
 801612e:	4613      	mov	r3, r2
 8016130:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016132:	897a      	ldrh	r2, [r7, #10]
 8016134:	893b      	ldrh	r3, [r7, #8]
 8016136:	4413      	add	r3, r2
 8016138:	b29b      	uxth	r3, r3
 801613a:	3314      	adds	r3, #20
 801613c:	b29b      	uxth	r3, r3
 801613e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016142:	4619      	mov	r1, r3
 8016144:	2022      	movs	r0, #34	; 0x22
 8016146:	f7fa fc11 	bl	801096c <pbuf_alloc>
 801614a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d04e      	beq.n	80161f0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	895b      	ldrh	r3, [r3, #10]
 8016156:	461a      	mov	r2, r3
 8016158:	897b      	ldrh	r3, [r7, #10]
 801615a:	3314      	adds	r3, #20
 801615c:	429a      	cmp	r2, r3
 801615e:	da06      	bge.n	801616e <tcp_output_alloc_header_common+0x4e>
 8016160:	4b26      	ldr	r3, [pc, #152]	; (80161fc <tcp_output_alloc_header_common+0xdc>)
 8016162:	f240 7224 	movw	r2, #1828	; 0x724
 8016166:	4926      	ldr	r1, [pc, #152]	; (8016200 <tcp_output_alloc_header_common+0xe0>)
 8016168:	4826      	ldr	r0, [pc, #152]	; (8016204 <tcp_output_alloc_header_common+0xe4>)
 801616a:	f005 ff59 	bl	801c020 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016174:	8c3b      	ldrh	r3, [r7, #32]
 8016176:	4618      	mov	r0, r3
 8016178:	f7f9 fc40 	bl	800f9fc <lwip_htons>
 801617c:	4603      	mov	r3, r0
 801617e:	461a      	mov	r2, r3
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016186:	4618      	mov	r0, r3
 8016188:	f7f9 fc38 	bl	800f9fc <lwip_htons>
 801618c:	4603      	mov	r3, r0
 801618e:	461a      	mov	r2, r3
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	687a      	ldr	r2, [r7, #4]
 8016198:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f7f9 fc43 	bl	800fa26 <lwip_htonl>
 80161a0:	4602      	mov	r2, r0
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80161a6:	897b      	ldrh	r3, [r7, #10]
 80161a8:	089b      	lsrs	r3, r3, #2
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	3305      	adds	r3, #5
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	031b      	lsls	r3, r3, #12
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	4313      	orrs	r3, r2
 80161bc:	b29b      	uxth	r3, r3
 80161be:	4618      	mov	r0, r3
 80161c0:	f7f9 fc1c 	bl	800f9fc <lwip_htons>
 80161c4:	4603      	mov	r3, r0
 80161c6:	461a      	mov	r2, r3
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80161cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7f9 fc14 	bl	800f9fc <lwip_htons>
 80161d4:	4603      	mov	r3, r0
 80161d6:	461a      	mov	r2, r3
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80161dc:	693b      	ldr	r3, [r7, #16]
 80161de:	2200      	movs	r2, #0
 80161e0:	741a      	strb	r2, [r3, #16]
 80161e2:	2200      	movs	r2, #0
 80161e4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	2200      	movs	r2, #0
 80161ea:	749a      	strb	r2, [r3, #18]
 80161ec:	2200      	movs	r2, #0
 80161ee:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80161f0:	697b      	ldr	r3, [r7, #20]
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3718      	adds	r7, #24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	08022ccc 	.word	0x08022ccc
 8016200:	080233a4 	.word	0x080233a4
 8016204:	08022d20 	.word	0x08022d20

08016208 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016208:	b5b0      	push	{r4, r5, r7, lr}
 801620a:	b08a      	sub	sp, #40	; 0x28
 801620c:	af04      	add	r7, sp, #16
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	607b      	str	r3, [r7, #4]
 8016212:	460b      	mov	r3, r1
 8016214:	817b      	strh	r3, [r7, #10]
 8016216:	4613      	mov	r3, r2
 8016218:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d106      	bne.n	801622e <tcp_output_alloc_header+0x26>
 8016220:	4b15      	ldr	r3, [pc, #84]	; (8016278 <tcp_output_alloc_header+0x70>)
 8016222:	f240 7242 	movw	r2, #1858	; 0x742
 8016226:	4915      	ldr	r1, [pc, #84]	; (801627c <tcp_output_alloc_header+0x74>)
 8016228:	4815      	ldr	r0, [pc, #84]	; (8016280 <tcp_output_alloc_header+0x78>)
 801622a:	f005 fef9 	bl	801c020 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	8adb      	ldrh	r3, [r3, #22]
 8016236:	68fa      	ldr	r2, [r7, #12]
 8016238:	8b12      	ldrh	r2, [r2, #24]
 801623a:	68f9      	ldr	r1, [r7, #12]
 801623c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801623e:	893d      	ldrh	r5, [r7, #8]
 8016240:	897c      	ldrh	r4, [r7, #10]
 8016242:	9103      	str	r1, [sp, #12]
 8016244:	2110      	movs	r1, #16
 8016246:	9102      	str	r1, [sp, #8]
 8016248:	9201      	str	r2, [sp, #4]
 801624a:	9300      	str	r3, [sp, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	462a      	mov	r2, r5
 8016250:	4621      	mov	r1, r4
 8016252:	f7ff ff65 	bl	8016120 <tcp_output_alloc_header_common>
 8016256:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d006      	beq.n	801626c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016262:	68fa      	ldr	r2, [r7, #12]
 8016264:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016266:	441a      	add	r2, r3
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801626c:	697b      	ldr	r3, [r7, #20]
}
 801626e:	4618      	mov	r0, r3
 8016270:	3718      	adds	r7, #24
 8016272:	46bd      	mov	sp, r7
 8016274:	bdb0      	pop	{r4, r5, r7, pc}
 8016276:	bf00      	nop
 8016278:	08022ccc 	.word	0x08022ccc
 801627c:	080233d4 	.word	0x080233d4
 8016280:	08022d20 	.word	0x08022d20

08016284 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b088      	sub	sp, #32
 8016288:	af00      	add	r7, sp, #0
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	4611      	mov	r1, r2
 8016290:	461a      	mov	r2, r3
 8016292:	460b      	mov	r3, r1
 8016294:	71fb      	strb	r3, [r7, #7]
 8016296:	4613      	mov	r3, r2
 8016298:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801629a:	2300      	movs	r3, #0
 801629c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d106      	bne.n	80162b2 <tcp_output_fill_options+0x2e>
 80162a4:	4b13      	ldr	r3, [pc, #76]	; (80162f4 <tcp_output_fill_options+0x70>)
 80162a6:	f240 7256 	movw	r2, #1878	; 0x756
 80162aa:	4913      	ldr	r1, [pc, #76]	; (80162f8 <tcp_output_fill_options+0x74>)
 80162ac:	4813      	ldr	r0, [pc, #76]	; (80162fc <tcp_output_fill_options+0x78>)
 80162ae:	f005 feb7 	bl	801c020 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80162b8:	69bb      	ldr	r3, [r7, #24]
 80162ba:	3314      	adds	r3, #20
 80162bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	f103 0214 	add.w	r2, r3, #20
 80162c4:	8bfb      	ldrh	r3, [r7, #30]
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	4619      	mov	r1, r3
 80162ca:	79fb      	ldrb	r3, [r7, #7]
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	f003 0304 	and.w	r3, r3, #4
 80162d2:	440b      	add	r3, r1
 80162d4:	4413      	add	r3, r2
 80162d6:	697a      	ldr	r2, [r7, #20]
 80162d8:	429a      	cmp	r2, r3
 80162da:	d006      	beq.n	80162ea <tcp_output_fill_options+0x66>
 80162dc:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <tcp_output_fill_options+0x70>)
 80162de:	f240 7275 	movw	r2, #1909	; 0x775
 80162e2:	4907      	ldr	r1, [pc, #28]	; (8016300 <tcp_output_fill_options+0x7c>)
 80162e4:	4805      	ldr	r0, [pc, #20]	; (80162fc <tcp_output_fill_options+0x78>)
 80162e6:	f005 fe9b 	bl	801c020 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80162ea:	bf00      	nop
 80162ec:	3720      	adds	r7, #32
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	08022ccc 	.word	0x08022ccc
 80162f8:	080233fc 	.word	0x080233fc
 80162fc:	08022d20 	.word	0x08022d20
 8016300:	080232f4 	.word	0x080232f4

08016304 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b08a      	sub	sp, #40	; 0x28
 8016308:	af04      	add	r7, sp, #16
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d106      	bne.n	8016326 <tcp_output_control_segment+0x22>
 8016318:	4b1c      	ldr	r3, [pc, #112]	; (801638c <tcp_output_control_segment+0x88>)
 801631a:	f240 7287 	movw	r2, #1927	; 0x787
 801631e:	491c      	ldr	r1, [pc, #112]	; (8016390 <tcp_output_control_segment+0x8c>)
 8016320:	481c      	ldr	r0, [pc, #112]	; (8016394 <tcp_output_control_segment+0x90>)
 8016322:	f005 fe7d 	bl	801c020 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016326:	683a      	ldr	r2, [r7, #0]
 8016328:	6879      	ldr	r1, [r7, #4]
 801632a:	68f8      	ldr	r0, [r7, #12]
 801632c:	f7fe ff30 	bl	8015190 <tcp_route>
 8016330:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d102      	bne.n	801633e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016338:	23fc      	movs	r3, #252	; 0xfc
 801633a:	75fb      	strb	r3, [r7, #23]
 801633c:	e01c      	b.n	8016378 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d006      	beq.n	8016352 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	7adb      	ldrb	r3, [r3, #11]
 8016348:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	7a9b      	ldrb	r3, [r3, #10]
 801634e:	757b      	strb	r3, [r7, #21]
 8016350:	e003      	b.n	801635a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016352:	23ff      	movs	r3, #255	; 0xff
 8016354:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016356:	2300      	movs	r3, #0
 8016358:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801635a:	7dba      	ldrb	r2, [r7, #22]
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	9302      	str	r3, [sp, #8]
 8016360:	2306      	movs	r3, #6
 8016362:	9301      	str	r3, [sp, #4]
 8016364:	7d7b      	ldrb	r3, [r7, #21]
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	4613      	mov	r3, r2
 801636a:	683a      	ldr	r2, [r7, #0]
 801636c:	6879      	ldr	r1, [r7, #4]
 801636e:	68b8      	ldr	r0, [r7, #8]
 8016370:	f004 f8a0 	bl	801a4b4 <ip4_output_if>
 8016374:	4603      	mov	r3, r0
 8016376:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016378:	68b8      	ldr	r0, [r7, #8]
 801637a:	f7fa fdd7 	bl	8010f2c <pbuf_free>
  return err;
 801637e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3718      	adds	r7, #24
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	08022ccc 	.word	0x08022ccc
 8016390:	08023424 	.word	0x08023424
 8016394:	08022d20 	.word	0x08022d20

08016398 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b08b      	sub	sp, #44	; 0x2c
 801639c:	af04      	add	r7, sp, #16
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
 80163a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d106      	bne.n	80163ba <tcp_rst+0x22>
 80163ac:	4b1e      	ldr	r3, [pc, #120]	; (8016428 <tcp_rst+0x90>)
 80163ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80163b2:	491e      	ldr	r1, [pc, #120]	; (801642c <tcp_rst+0x94>)
 80163b4:	481e      	ldr	r0, [pc, #120]	; (8016430 <tcp_rst+0x98>)
 80163b6:	f005 fe33 	bl	801c020 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80163ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d106      	bne.n	80163ce <tcp_rst+0x36>
 80163c0:	4b19      	ldr	r3, [pc, #100]	; (8016428 <tcp_rst+0x90>)
 80163c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80163c6:	491b      	ldr	r1, [pc, #108]	; (8016434 <tcp_rst+0x9c>)
 80163c8:	4819      	ldr	r0, [pc, #100]	; (8016430 <tcp_rst+0x98>)
 80163ca:	f005 fe29 	bl	801c020 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163ce:	2300      	movs	r3, #0
 80163d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80163d2:	2308      	movs	r3, #8
 80163d4:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80163d6:	7dfb      	ldrb	r3, [r7, #23]
 80163d8:	b29c      	uxth	r4, r3
 80163da:	68b8      	ldr	r0, [r7, #8]
 80163dc:	f7f9 fb23 	bl	800fa26 <lwip_htonl>
 80163e0:	4602      	mov	r2, r0
 80163e2:	8abb      	ldrh	r3, [r7, #20]
 80163e4:	9303      	str	r3, [sp, #12]
 80163e6:	2314      	movs	r3, #20
 80163e8:	9302      	str	r3, [sp, #8]
 80163ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80163ec:	9301      	str	r3, [sp, #4]
 80163ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	4613      	mov	r3, r2
 80163f4:	2200      	movs	r2, #0
 80163f6:	4621      	mov	r1, r4
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7ff fe91 	bl	8016120 <tcp_output_alloc_header_common>
 80163fe:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016400:	693b      	ldr	r3, [r7, #16]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00c      	beq.n	8016420 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	2200      	movs	r2, #0
 801640a:	6939      	ldr	r1, [r7, #16]
 801640c:	68f8      	ldr	r0, [r7, #12]
 801640e:	f7ff ff39 	bl	8016284 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016414:	683a      	ldr	r2, [r7, #0]
 8016416:	6939      	ldr	r1, [r7, #16]
 8016418:	68f8      	ldr	r0, [r7, #12]
 801641a:	f7ff ff73 	bl	8016304 <tcp_output_control_segment>
 801641e:	e000      	b.n	8016422 <tcp_rst+0x8a>
    return;
 8016420:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016422:	371c      	adds	r7, #28
 8016424:	46bd      	mov	sp, r7
 8016426:	bd90      	pop	{r4, r7, pc}
 8016428:	08022ccc 	.word	0x08022ccc
 801642c:	08023450 	.word	0x08023450
 8016430:	08022d20 	.word	0x08022d20
 8016434:	0802346c 	.word	0x0802346c

08016438 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016438:	b590      	push	{r4, r7, lr}
 801643a:	b087      	sub	sp, #28
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016440:	2300      	movs	r3, #0
 8016442:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016444:	2300      	movs	r3, #0
 8016446:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d106      	bne.n	801645c <tcp_send_empty_ack+0x24>
 801644e:	4b28      	ldr	r3, [pc, #160]	; (80164f0 <tcp_send_empty_ack+0xb8>)
 8016450:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016454:	4927      	ldr	r1, [pc, #156]	; (80164f4 <tcp_send_empty_ack+0xbc>)
 8016456:	4828      	ldr	r0, [pc, #160]	; (80164f8 <tcp_send_empty_ack+0xc0>)
 8016458:	f005 fde2 	bl	801c020 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801645c:	7dfb      	ldrb	r3, [r7, #23]
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	b2db      	uxtb	r3, r3
 8016462:	f003 0304 	and.w	r3, r3, #4
 8016466:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016468:	7d7b      	ldrb	r3, [r7, #21]
 801646a:	b29c      	uxth	r4, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016470:	4618      	mov	r0, r3
 8016472:	f7f9 fad8 	bl	800fa26 <lwip_htonl>
 8016476:	4603      	mov	r3, r0
 8016478:	2200      	movs	r2, #0
 801647a:	4621      	mov	r1, r4
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f7ff fec3 	bl	8016208 <tcp_output_alloc_header>
 8016482:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d109      	bne.n	801649e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	8b5b      	ldrh	r3, [r3, #26]
 801648e:	f043 0303 	orr.w	r3, r3, #3
 8016492:	b29a      	uxth	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016498:	f06f 0301 	mvn.w	r3, #1
 801649c:	e023      	b.n	80164e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801649e:	7dbb      	ldrb	r3, [r7, #22]
 80164a0:	7dfa      	ldrb	r2, [r7, #23]
 80164a2:	6939      	ldr	r1, [r7, #16]
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7ff feed 	bl	8016284 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	3304      	adds	r3, #4
 80164b0:	6939      	ldr	r1, [r7, #16]
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7ff ff26 	bl	8016304 <tcp_output_control_segment>
 80164b8:	4603      	mov	r3, r0
 80164ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80164bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d007      	beq.n	80164d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	8b5b      	ldrh	r3, [r3, #26]
 80164c8:	f043 0303 	orr.w	r3, r3, #3
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	835a      	strh	r2, [r3, #26]
 80164d2:	e006      	b.n	80164e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	8b5b      	ldrh	r3, [r3, #26]
 80164d8:	f023 0303 	bic.w	r3, r3, #3
 80164dc:	b29a      	uxth	r2, r3
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80164e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	371c      	adds	r7, #28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd90      	pop	{r4, r7, pc}
 80164ee:	bf00      	nop
 80164f0:	08022ccc 	.word	0x08022ccc
 80164f4:	08023488 	.word	0x08023488
 80164f8:	08022d20 	.word	0x08022d20

080164fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80164fc:	b590      	push	{r4, r7, lr}
 80164fe:	b087      	sub	sp, #28
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016504:	2300      	movs	r3, #0
 8016506:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d106      	bne.n	801651c <tcp_keepalive+0x20>
 801650e:	4b18      	ldr	r3, [pc, #96]	; (8016570 <tcp_keepalive+0x74>)
 8016510:	f640 0224 	movw	r2, #2084	; 0x824
 8016514:	4917      	ldr	r1, [pc, #92]	; (8016574 <tcp_keepalive+0x78>)
 8016516:	4818      	ldr	r0, [pc, #96]	; (8016578 <tcp_keepalive+0x7c>)
 8016518:	f005 fd82 	bl	801c020 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801651c:	7dfb      	ldrb	r3, [r7, #23]
 801651e:	b29c      	uxth	r4, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016524:	3b01      	subs	r3, #1
 8016526:	4618      	mov	r0, r3
 8016528:	f7f9 fa7d 	bl	800fa26 <lwip_htonl>
 801652c:	4603      	mov	r3, r0
 801652e:	2200      	movs	r2, #0
 8016530:	4621      	mov	r1, r4
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f7ff fe68 	bl	8016208 <tcp_output_alloc_header>
 8016538:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d102      	bne.n	8016546 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016540:	f04f 33ff 	mov.w	r3, #4294967295
 8016544:	e010      	b.n	8016568 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016546:	7dfb      	ldrb	r3, [r7, #23]
 8016548:	2200      	movs	r2, #0
 801654a:	6939      	ldr	r1, [r7, #16]
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7ff fe99 	bl	8016284 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	3304      	adds	r3, #4
 8016558:	6939      	ldr	r1, [r7, #16]
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f7ff fed2 	bl	8016304 <tcp_output_control_segment>
 8016560:	4603      	mov	r3, r0
 8016562:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016568:	4618      	mov	r0, r3
 801656a:	371c      	adds	r7, #28
 801656c:	46bd      	mov	sp, r7
 801656e:	bd90      	pop	{r4, r7, pc}
 8016570:	08022ccc 	.word	0x08022ccc
 8016574:	080234a8 	.word	0x080234a8
 8016578:	08022d20 	.word	0x08022d20

0801657c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801657c:	b590      	push	{r4, r7, lr}
 801657e:	b08b      	sub	sp, #44	; 0x2c
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016584:	2300      	movs	r3, #0
 8016586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d106      	bne.n	801659e <tcp_zero_window_probe+0x22>
 8016590:	4b4c      	ldr	r3, [pc, #304]	; (80166c4 <tcp_zero_window_probe+0x148>)
 8016592:	f640 024f 	movw	r2, #2127	; 0x84f
 8016596:	494c      	ldr	r1, [pc, #304]	; (80166c8 <tcp_zero_window_probe+0x14c>)
 8016598:	484c      	ldr	r0, [pc, #304]	; (80166cc <tcp_zero_window_probe+0x150>)
 801659a:	f005 fd41 	bl	801c020 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80165a4:	6a3b      	ldr	r3, [r7, #32]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d101      	bne.n	80165ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80165aa:	2300      	movs	r3, #0
 80165ac:	e086      	b.n	80166bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80165b4:	2bff      	cmp	r3, #255	; 0xff
 80165b6:	d007      	beq.n	80165c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80165be:	3301      	adds	r3, #1
 80165c0:	b2da      	uxtb	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80165c8:	6a3b      	ldr	r3, [r7, #32]
 80165ca:	68db      	ldr	r3, [r3, #12]
 80165cc:	899b      	ldrh	r3, [r3, #12]
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f9 fa13 	bl	800f9fc <lwip_htons>
 80165d6:	4603      	mov	r3, r0
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	f003 0301 	and.w	r3, r3, #1
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d005      	beq.n	80165ee <tcp_zero_window_probe+0x72>
 80165e2:	6a3b      	ldr	r3, [r7, #32]
 80165e4:	891b      	ldrh	r3, [r3, #8]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <tcp_zero_window_probe+0x72>
 80165ea:	2301      	movs	r3, #1
 80165ec:	e000      	b.n	80165f0 <tcp_zero_window_probe+0x74>
 80165ee:	2300      	movs	r3, #0
 80165f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80165f2:	7ffb      	ldrb	r3, [r7, #31]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	bf0c      	ite	eq
 80165f8:	2301      	moveq	r3, #1
 80165fa:	2300      	movne	r3, #0
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016604:	b299      	uxth	r1, r3
 8016606:	6a3b      	ldr	r3, [r7, #32]
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	8bba      	ldrh	r2, [r7, #28]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f7ff fdfa 	bl	8016208 <tcp_output_alloc_header>
 8016614:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016616:	69bb      	ldr	r3, [r7, #24]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d102      	bne.n	8016622 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801661c:	f04f 33ff 	mov.w	r3, #4294967295
 8016620:	e04c      	b.n	80166bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	685b      	ldr	r3, [r3, #4]
 8016626:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016628:	7ffb      	ldrb	r3, [r7, #31]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d011      	beq.n	8016652 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	899b      	ldrh	r3, [r3, #12]
 8016632:	b29b      	uxth	r3, r3
 8016634:	b21b      	sxth	r3, r3
 8016636:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801663a:	b21c      	sxth	r4, r3
 801663c:	2011      	movs	r0, #17
 801663e:	f7f9 f9dd 	bl	800f9fc <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	b21b      	sxth	r3, r3
 8016646:	4323      	orrs	r3, r4
 8016648:	b21b      	sxth	r3, r3
 801664a:	b29a      	uxth	r2, r3
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	819a      	strh	r2, [r3, #12]
 8016650:	e010      	b.n	8016674 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016652:	69bb      	ldr	r3, [r7, #24]
 8016654:	685b      	ldr	r3, [r3, #4]
 8016656:	3314      	adds	r3, #20
 8016658:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801665a:	6a3b      	ldr	r3, [r7, #32]
 801665c:	6858      	ldr	r0, [r3, #4]
 801665e:	6a3b      	ldr	r3, [r7, #32]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	891a      	ldrh	r2, [r3, #8]
 8016664:	6a3b      	ldr	r3, [r7, #32]
 8016666:	891b      	ldrh	r3, [r3, #8]
 8016668:	1ad3      	subs	r3, r2, r3
 801666a:	b29b      	uxth	r3, r3
 801666c:	2201      	movs	r2, #1
 801666e:	6939      	ldr	r1, [r7, #16]
 8016670:	f7fa fe56 	bl	8011320 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016674:	6a3b      	ldr	r3, [r7, #32]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	4618      	mov	r0, r3
 801667c:	f7f9 f9d3 	bl	800fa26 <lwip_htonl>
 8016680:	4603      	mov	r3, r0
 8016682:	3301      	adds	r3, #1
 8016684:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	1ad3      	subs	r3, r2, r3
 801668e:	2b00      	cmp	r3, #0
 8016690:	da02      	bge.n	8016698 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	68fa      	ldr	r2, [r7, #12]
 8016696:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801669c:	2200      	movs	r2, #0
 801669e:	69b9      	ldr	r1, [r7, #24]
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	f7ff fdef 	bl	8016284 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80166a6:	687a      	ldr	r2, [r7, #4]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	3304      	adds	r3, #4
 80166ac:	69b9      	ldr	r1, [r7, #24]
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	f7ff fe28 	bl	8016304 <tcp_output_control_segment>
 80166b4:	4603      	mov	r3, r0
 80166b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80166b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80166bc:	4618      	mov	r0, r3
 80166be:	372c      	adds	r7, #44	; 0x2c
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd90      	pop	{r4, r7, pc}
 80166c4:	08022ccc 	.word	0x08022ccc
 80166c8:	080234c4 	.word	0x080234c4
 80166cc:	08022d20 	.word	0x08022d20

080166d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80166d8:	f7fa ff10 	bl	80114fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80166dc:	4b0a      	ldr	r3, [pc, #40]	; (8016708 <tcpip_tcp_timer+0x38>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d103      	bne.n	80166ec <tcpip_tcp_timer+0x1c>
 80166e4:	4b09      	ldr	r3, [pc, #36]	; (801670c <tcpip_tcp_timer+0x3c>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d005      	beq.n	80166f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80166ec:	2200      	movs	r2, #0
 80166ee:	4908      	ldr	r1, [pc, #32]	; (8016710 <tcpip_tcp_timer+0x40>)
 80166f0:	20fa      	movs	r0, #250	; 0xfa
 80166f2:	f000 f8f1 	bl	80168d8 <sys_timeout>
 80166f6:	e002      	b.n	80166fe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80166f8:	4b06      	ldr	r3, [pc, #24]	; (8016714 <tcpip_tcp_timer+0x44>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	601a      	str	r2, [r3, #0]
  }
}
 80166fe:	bf00      	nop
 8016700:	3708      	adds	r7, #8
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	200082c4 	.word	0x200082c4
 801670c:	200082d4 	.word	0x200082d4
 8016710:	080166d1 	.word	0x080166d1
 8016714:	20001074 	.word	0x20001074

08016718 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801671c:	4b0a      	ldr	r3, [pc, #40]	; (8016748 <tcp_timer_needed+0x30>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d10f      	bne.n	8016744 <tcp_timer_needed+0x2c>
 8016724:	4b09      	ldr	r3, [pc, #36]	; (801674c <tcp_timer_needed+0x34>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d103      	bne.n	8016734 <tcp_timer_needed+0x1c>
 801672c:	4b08      	ldr	r3, [pc, #32]	; (8016750 <tcp_timer_needed+0x38>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d007      	beq.n	8016744 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016734:	4b04      	ldr	r3, [pc, #16]	; (8016748 <tcp_timer_needed+0x30>)
 8016736:	2201      	movs	r2, #1
 8016738:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801673a:	2200      	movs	r2, #0
 801673c:	4905      	ldr	r1, [pc, #20]	; (8016754 <tcp_timer_needed+0x3c>)
 801673e:	20fa      	movs	r0, #250	; 0xfa
 8016740:	f000 f8ca 	bl	80168d8 <sys_timeout>
  }
}
 8016744:	bf00      	nop
 8016746:	bd80      	pop	{r7, pc}
 8016748:	20001074 	.word	0x20001074
 801674c:	200082c4 	.word	0x200082c4
 8016750:	200082d4 	.word	0x200082d4
 8016754:	080166d1 	.word	0x080166d1

08016758 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b086      	sub	sp, #24
 801675c:	af00      	add	r7, sp, #0
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016764:	2006      	movs	r0, #6
 8016766:	f7f9 fd9f 	bl	80102a8 <memp_malloc>
 801676a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d109      	bne.n	8016786 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d151      	bne.n	801681c <sys_timeout_abs+0xc4>
 8016778:	4b2a      	ldr	r3, [pc, #168]	; (8016824 <sys_timeout_abs+0xcc>)
 801677a:	22be      	movs	r2, #190	; 0xbe
 801677c:	492a      	ldr	r1, [pc, #168]	; (8016828 <sys_timeout_abs+0xd0>)
 801677e:	482b      	ldr	r0, [pc, #172]	; (801682c <sys_timeout_abs+0xd4>)
 8016780:	f005 fc4e 	bl	801c020 <iprintf>
    return;
 8016784:	e04a      	b.n	801681c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	2200      	movs	r2, #0
 801678a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801678c:	693b      	ldr	r3, [r7, #16]
 801678e:	68ba      	ldr	r2, [r7, #8]
 8016790:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	68fa      	ldr	r2, [r7, #12]
 801679c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801679e:	4b24      	ldr	r3, [pc, #144]	; (8016830 <sys_timeout_abs+0xd8>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d103      	bne.n	80167ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80167a6:	4a22      	ldr	r2, [pc, #136]	; (8016830 <sys_timeout_abs+0xd8>)
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	6013      	str	r3, [r2, #0]
    return;
 80167ac:	e037      	b.n	801681e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80167ae:	693b      	ldr	r3, [r7, #16]
 80167b0:	685a      	ldr	r2, [r3, #4]
 80167b2:	4b1f      	ldr	r3, [pc, #124]	; (8016830 <sys_timeout_abs+0xd8>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	1ad3      	subs	r3, r2, r3
 80167ba:	0fdb      	lsrs	r3, r3, #31
 80167bc:	f003 0301 	and.w	r3, r3, #1
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d007      	beq.n	80167d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80167c6:	4b1a      	ldr	r3, [pc, #104]	; (8016830 <sys_timeout_abs+0xd8>)
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80167ce:	4a18      	ldr	r2, [pc, #96]	; (8016830 <sys_timeout_abs+0xd8>)
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	6013      	str	r3, [r2, #0]
 80167d4:	e023      	b.n	801681e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80167d6:	4b16      	ldr	r3, [pc, #88]	; (8016830 <sys_timeout_abs+0xd8>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	617b      	str	r3, [r7, #20]
 80167dc:	e01a      	b.n	8016814 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00b      	beq.n	80167fe <sys_timeout_abs+0xa6>
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	685a      	ldr	r2, [r3, #4]
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	1ad3      	subs	r3, r2, r3
 80167f2:	0fdb      	lsrs	r3, r3, #31
 80167f4:	f003 0301 	and.w	r3, r3, #1
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d007      	beq.n	801680e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	693a      	ldr	r2, [r7, #16]
 801680a:	601a      	str	r2, [r3, #0]
        break;
 801680c:	e007      	b.n	801681e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	617b      	str	r3, [r7, #20]
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d1e1      	bne.n	80167de <sys_timeout_abs+0x86>
 801681a:	e000      	b.n	801681e <sys_timeout_abs+0xc6>
    return;
 801681c:	bf00      	nop
      }
    }
  }
}
 801681e:	3718      	adds	r7, #24
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}
 8016824:	080234e8 	.word	0x080234e8
 8016828:	0802351c 	.word	0x0802351c
 801682c:	0802355c 	.word	0x0802355c
 8016830:	2000106c 	.word	0x2000106c

08016834 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b086      	sub	sp, #24
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	4798      	blx	r3

  now = sys_now();
 8016846:	f7f9 f84b 	bl	800f8e0 <sys_now>
 801684a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	4b0f      	ldr	r3, [pc, #60]	; (8016890 <lwip_cyclic_timer+0x5c>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4413      	add	r3, r2
 8016856:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	1ad3      	subs	r3, r2, r3
 801685e:	0fdb      	lsrs	r3, r3, #31
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	b2db      	uxtb	r3, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	d009      	beq.n	801687e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801686a:	697b      	ldr	r3, [r7, #20]
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	4413      	add	r3, r2
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	4907      	ldr	r1, [pc, #28]	; (8016894 <lwip_cyclic_timer+0x60>)
 8016876:	4618      	mov	r0, r3
 8016878:	f7ff ff6e 	bl	8016758 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801687c:	e004      	b.n	8016888 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	4904      	ldr	r1, [pc, #16]	; (8016894 <lwip_cyclic_timer+0x60>)
 8016882:	68f8      	ldr	r0, [r7, #12]
 8016884:	f7ff ff68 	bl	8016758 <sys_timeout_abs>
}
 8016888:	bf00      	nop
 801688a:	3718      	adds	r7, #24
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}
 8016890:	20001070 	.word	0x20001070
 8016894:	08016835 	.word	0x08016835

08016898 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801689e:	2301      	movs	r3, #1
 80168a0:	607b      	str	r3, [r7, #4]
 80168a2:	e00e      	b.n	80168c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80168a4:	4a0a      	ldr	r2, [pc, #40]	; (80168d0 <sys_timeouts_init+0x38>)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	00db      	lsls	r3, r3, #3
 80168b0:	4a07      	ldr	r2, [pc, #28]	; (80168d0 <sys_timeouts_init+0x38>)
 80168b2:	4413      	add	r3, r2
 80168b4:	461a      	mov	r2, r3
 80168b6:	4907      	ldr	r1, [pc, #28]	; (80168d4 <sys_timeouts_init+0x3c>)
 80168b8:	f000 f80e 	bl	80168d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	3301      	adds	r3, #1
 80168c0:	607b      	str	r3, [r7, #4]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b04      	cmp	r3, #4
 80168c6:	d9ed      	bls.n	80168a4 <sys_timeouts_init+0xc>
  }
}
 80168c8:	bf00      	nop
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	080249c8 	.word	0x080249c8
 80168d4:	08016835 	.word	0x08016835

080168d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b086      	sub	sp, #24
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80168ea:	d306      	bcc.n	80168fa <sys_timeout+0x22>
 80168ec:	4b0a      	ldr	r3, [pc, #40]	; (8016918 <sys_timeout+0x40>)
 80168ee:	f240 1229 	movw	r2, #297	; 0x129
 80168f2:	490a      	ldr	r1, [pc, #40]	; (801691c <sys_timeout+0x44>)
 80168f4:	480a      	ldr	r0, [pc, #40]	; (8016920 <sys_timeout+0x48>)
 80168f6:	f005 fb93 	bl	801c020 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80168fa:	f7f8 fff1 	bl	800f8e0 <sys_now>
 80168fe:	4602      	mov	r2, r0
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	4413      	add	r3, r2
 8016904:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	68b9      	ldr	r1, [r7, #8]
 801690a:	6978      	ldr	r0, [r7, #20]
 801690c:	f7ff ff24 	bl	8016758 <sys_timeout_abs>
#endif
}
 8016910:	bf00      	nop
 8016912:	3718      	adds	r7, #24
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	080234e8 	.word	0x080234e8
 801691c:	08023584 	.word	0x08023584
 8016920:	0802355c 	.word	0x0802355c

08016924 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016928:	f005 fb92 	bl	801c050 <rand>
 801692c:	4603      	mov	r3, r0
 801692e:	b29b      	uxth	r3, r3
 8016930:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016934:	b29b      	uxth	r3, r3
 8016936:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801693a:	b29a      	uxth	r2, r3
 801693c:	4b01      	ldr	r3, [pc, #4]	; (8016944 <udp_init+0x20>)
 801693e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016940:	bf00      	nop
 8016942:	bd80      	pop	{r7, pc}
 8016944:	2000007c 	.word	0x2000007c

08016948 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801694e:	2300      	movs	r3, #0
 8016950:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016952:	4b17      	ldr	r3, [pc, #92]	; (80169b0 <udp_new_port+0x68>)
 8016954:	881b      	ldrh	r3, [r3, #0]
 8016956:	1c5a      	adds	r2, r3, #1
 8016958:	b291      	uxth	r1, r2
 801695a:	4a15      	ldr	r2, [pc, #84]	; (80169b0 <udp_new_port+0x68>)
 801695c:	8011      	strh	r1, [r2, #0]
 801695e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016962:	4293      	cmp	r3, r2
 8016964:	d103      	bne.n	801696e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016966:	4b12      	ldr	r3, [pc, #72]	; (80169b0 <udp_new_port+0x68>)
 8016968:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801696c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801696e:	4b11      	ldr	r3, [pc, #68]	; (80169b4 <udp_new_port+0x6c>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	603b      	str	r3, [r7, #0]
 8016974:	e011      	b.n	801699a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	8a5a      	ldrh	r2, [r3, #18]
 801697a:	4b0d      	ldr	r3, [pc, #52]	; (80169b0 <udp_new_port+0x68>)
 801697c:	881b      	ldrh	r3, [r3, #0]
 801697e:	429a      	cmp	r2, r3
 8016980:	d108      	bne.n	8016994 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016982:	88fb      	ldrh	r3, [r7, #6]
 8016984:	3301      	adds	r3, #1
 8016986:	80fb      	strh	r3, [r7, #6]
 8016988:	88fb      	ldrh	r3, [r7, #6]
 801698a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801698e:	d3e0      	bcc.n	8016952 <udp_new_port+0xa>
        return 0;
 8016990:	2300      	movs	r3, #0
 8016992:	e007      	b.n	80169a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	68db      	ldr	r3, [r3, #12]
 8016998:	603b      	str	r3, [r7, #0]
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d1ea      	bne.n	8016976 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80169a0:	4b03      	ldr	r3, [pc, #12]	; (80169b0 <udp_new_port+0x68>)
 80169a2:	881b      	ldrh	r3, [r3, #0]
}
 80169a4:	4618      	mov	r0, r3
 80169a6:	370c      	adds	r7, #12
 80169a8:	46bd      	mov	sp, r7
 80169aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ae:	4770      	bx	lr
 80169b0:	2000007c 	.word	0x2000007c
 80169b4:	200082dc 	.word	0x200082dc

080169b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b084      	sub	sp, #16
 80169bc:	af00      	add	r7, sp, #0
 80169be:	60f8      	str	r0, [r7, #12]
 80169c0:	60b9      	str	r1, [r7, #8]
 80169c2:	4613      	mov	r3, r2
 80169c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d105      	bne.n	80169d8 <udp_input_local_match+0x20>
 80169cc:	4b27      	ldr	r3, [pc, #156]	; (8016a6c <udp_input_local_match+0xb4>)
 80169ce:	2287      	movs	r2, #135	; 0x87
 80169d0:	4927      	ldr	r1, [pc, #156]	; (8016a70 <udp_input_local_match+0xb8>)
 80169d2:	4828      	ldr	r0, [pc, #160]	; (8016a74 <udp_input_local_match+0xbc>)
 80169d4:	f005 fb24 	bl	801c020 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d105      	bne.n	80169ea <udp_input_local_match+0x32>
 80169de:	4b23      	ldr	r3, [pc, #140]	; (8016a6c <udp_input_local_match+0xb4>)
 80169e0:	2288      	movs	r2, #136	; 0x88
 80169e2:	4925      	ldr	r1, [pc, #148]	; (8016a78 <udp_input_local_match+0xc0>)
 80169e4:	4823      	ldr	r0, [pc, #140]	; (8016a74 <udp_input_local_match+0xbc>)
 80169e6:	f005 fb1b 	bl	801c020 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	7a1b      	ldrb	r3, [r3, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d00b      	beq.n	8016a0a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	7a1a      	ldrb	r2, [r3, #8]
 80169f6:	4b21      	ldr	r3, [pc, #132]	; (8016a7c <udp_input_local_match+0xc4>)
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80169fe:	3301      	adds	r3, #1
 8016a00:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d001      	beq.n	8016a0a <udp_input_local_match+0x52>
    return 0;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e02b      	b.n	8016a62 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016a0a:	79fb      	ldrb	r3, [r7, #7]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d018      	beq.n	8016a42 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d013      	beq.n	8016a3e <udp_input_local_match+0x86>
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d00f      	beq.n	8016a3e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016a1e:	4b17      	ldr	r3, [pc, #92]	; (8016a7c <udp_input_local_match+0xc4>)
 8016a20:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a26:	d00a      	beq.n	8016a3e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	681a      	ldr	r2, [r3, #0]
 8016a2c:	4b13      	ldr	r3, [pc, #76]	; (8016a7c <udp_input_local_match+0xc4>)
 8016a2e:	695b      	ldr	r3, [r3, #20]
 8016a30:	405a      	eors	r2, r3
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	3308      	adds	r3, #8
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d110      	bne.n	8016a60 <udp_input_local_match+0xa8>
          return 1;
 8016a3e:	2301      	movs	r3, #1
 8016a40:	e00f      	b.n	8016a62 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d009      	beq.n	8016a5c <udp_input_local_match+0xa4>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d005      	beq.n	8016a5c <udp_input_local_match+0xa4>
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	4b09      	ldr	r3, [pc, #36]	; (8016a7c <udp_input_local_match+0xc4>)
 8016a56:	695b      	ldr	r3, [r3, #20]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d101      	bne.n	8016a60 <udp_input_local_match+0xa8>
        return 1;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	e000      	b.n	8016a62 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016a60:	2300      	movs	r3, #0
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3710      	adds	r7, #16
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	080235d0 	.word	0x080235d0
 8016a70:	08023600 	.word	0x08023600
 8016a74:	08023624 	.word	0x08023624
 8016a78:	0802364c 	.word	0x0802364c
 8016a7c:	200051a0 	.word	0x200051a0

08016a80 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016a80:	b590      	push	{r4, r7, lr}
 8016a82:	b08d      	sub	sp, #52	; 0x34
 8016a84:	af02      	add	r7, sp, #8
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d105      	bne.n	8016aa0 <udp_input+0x20>
 8016a94:	4b7c      	ldr	r3, [pc, #496]	; (8016c88 <udp_input+0x208>)
 8016a96:	22cf      	movs	r2, #207	; 0xcf
 8016a98:	497c      	ldr	r1, [pc, #496]	; (8016c8c <udp_input+0x20c>)
 8016a9a:	487d      	ldr	r0, [pc, #500]	; (8016c90 <udp_input+0x210>)
 8016a9c:	f005 fac0 	bl	801c020 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d105      	bne.n	8016ab2 <udp_input+0x32>
 8016aa6:	4b78      	ldr	r3, [pc, #480]	; (8016c88 <udp_input+0x208>)
 8016aa8:	22d0      	movs	r2, #208	; 0xd0
 8016aaa:	497a      	ldr	r1, [pc, #488]	; (8016c94 <udp_input+0x214>)
 8016aac:	4878      	ldr	r0, [pc, #480]	; (8016c90 <udp_input+0x210>)
 8016aae:	f005 fab7 	bl	801c020 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	895b      	ldrh	r3, [r3, #10]
 8016ab6:	2b07      	cmp	r3, #7
 8016ab8:	d803      	bhi.n	8016ac2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f7fa fa36 	bl	8010f2c <pbuf_free>
    goto end;
 8016ac0:	e0de      	b.n	8016c80 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016ac8:	4b73      	ldr	r3, [pc, #460]	; (8016c98 <udp_input+0x218>)
 8016aca:	695a      	ldr	r2, [r3, #20]
 8016acc:	4b72      	ldr	r3, [pc, #456]	; (8016c98 <udp_input+0x218>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	4610      	mov	r0, r2
 8016ad4:	f003 fdc6 	bl	801a664 <ip4_addr_isbroadcast_u32>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	881b      	ldrh	r3, [r3, #0]
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7f8 ff8a 	bl	800f9fc <lwip_htons>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	885b      	ldrh	r3, [r3, #2]
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7f8 ff82 	bl	800f9fc <lwip_htons>
 8016af8:	4603      	mov	r3, r0
 8016afa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016afc:	2300      	movs	r3, #0
 8016afe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016b00:	2300      	movs	r3, #0
 8016b02:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016b04:	2300      	movs	r3, #0
 8016b06:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b08:	4b64      	ldr	r3, [pc, #400]	; (8016c9c <udp_input+0x21c>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b0e:	e054      	b.n	8016bba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b12:	8a5b      	ldrh	r3, [r3, #18]
 8016b14:	89fa      	ldrh	r2, [r7, #14]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d14a      	bne.n	8016bb0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016b1a:	7cfb      	ldrb	r3, [r7, #19]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	6839      	ldr	r1, [r7, #0]
 8016b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b22:	f7ff ff49 	bl	80169b8 <udp_input_local_match>
 8016b26:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d041      	beq.n	8016bb0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2e:	7c1b      	ldrb	r3, [r3, #16]
 8016b30:	f003 0304 	and.w	r3, r3, #4
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d11d      	bne.n	8016b74 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d102      	bne.n	8016b44 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b40:	61fb      	str	r3, [r7, #28]
 8016b42:	e017      	b.n	8016b74 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016b44:	7cfb      	ldrb	r3, [r7, #19]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d014      	beq.n	8016b74 <udp_input+0xf4>
 8016b4a:	4b53      	ldr	r3, [pc, #332]	; (8016c98 <udp_input+0x218>)
 8016b4c:	695b      	ldr	r3, [r3, #20]
 8016b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b52:	d10f      	bne.n	8016b74 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	681a      	ldr	r2, [r3, #0]
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	3304      	adds	r3, #4
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d008      	beq.n	8016b74 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	681a      	ldr	r2, [r3, #0]
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	3304      	adds	r3, #4
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d101      	bne.n	8016b74 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b72:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b76:	8a9b      	ldrh	r3, [r3, #20]
 8016b78:	8a3a      	ldrh	r2, [r7, #16]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d118      	bne.n	8016bb0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b80:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d005      	beq.n	8016b92 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b88:	685a      	ldr	r2, [r3, #4]
 8016b8a:	4b43      	ldr	r3, [pc, #268]	; (8016c98 <udp_input+0x218>)
 8016b8c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d10e      	bne.n	8016bb0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016b92:	6a3b      	ldr	r3, [r7, #32]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d014      	beq.n	8016bc2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9a:	68da      	ldr	r2, [r3, #12]
 8016b9c:	6a3b      	ldr	r3, [r7, #32]
 8016b9e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016ba0:	4b3e      	ldr	r3, [pc, #248]	; (8016c9c <udp_input+0x21c>)
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016ba8:	4a3c      	ldr	r2, [pc, #240]	; (8016c9c <udp_input+0x21c>)
 8016baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016bae:	e008      	b.n	8016bc2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8016bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d1a7      	bne.n	8016b10 <udp_input+0x90>
 8016bc0:	e000      	b.n	8016bc4 <udp_input+0x144>
        break;
 8016bc2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d101      	bne.n	8016bce <udp_input+0x14e>
    pcb = uncon_pcb;
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d002      	beq.n	8016bda <udp_input+0x15a>
    for_us = 1;
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	76fb      	strb	r3, [r7, #27]
 8016bd8:	e00a      	b.n	8016bf0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	3304      	adds	r3, #4
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	4b2d      	ldr	r3, [pc, #180]	; (8016c98 <udp_input+0x218>)
 8016be2:	695b      	ldr	r3, [r3, #20]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	bf0c      	ite	eq
 8016be8:	2301      	moveq	r3, #1
 8016bea:	2300      	movne	r3, #0
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016bf0:	7efb      	ldrb	r3, [r7, #27]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d041      	beq.n	8016c7a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016bf6:	2108      	movs	r1, #8
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7fa f911 	bl	8010e20 <pbuf_remove_header>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d00a      	beq.n	8016c1a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016c04:	4b20      	ldr	r3, [pc, #128]	; (8016c88 <udp_input+0x208>)
 8016c06:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016c0a:	4925      	ldr	r1, [pc, #148]	; (8016ca0 <udp_input+0x220>)
 8016c0c:	4820      	ldr	r0, [pc, #128]	; (8016c90 <udp_input+0x210>)
 8016c0e:	f005 fa07 	bl	801c020 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7fa f98a 	bl	8010f2c <pbuf_free>
      goto end;
 8016c18:	e032      	b.n	8016c80 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d012      	beq.n	8016c46 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c22:	699b      	ldr	r3, [r3, #24]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d00a      	beq.n	8016c3e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2a:	699c      	ldr	r4, [r3, #24]
 8016c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2e:	69d8      	ldr	r0, [r3, #28]
 8016c30:	8a3b      	ldrh	r3, [r7, #16]
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	4b1b      	ldr	r3, [pc, #108]	; (8016ca4 <udp_input+0x224>)
 8016c36:	687a      	ldr	r2, [r7, #4]
 8016c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c3a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016c3c:	e021      	b.n	8016c82 <udp_input+0x202>
        pbuf_free(p);
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7fa f974 	bl	8010f2c <pbuf_free>
        goto end;
 8016c44:	e01c      	b.n	8016c80 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016c46:	7cfb      	ldrb	r3, [r7, #19]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d112      	bne.n	8016c72 <udp_input+0x1f2>
 8016c4c:	4b12      	ldr	r3, [pc, #72]	; (8016c98 <udp_input+0x218>)
 8016c4e:	695b      	ldr	r3, [r3, #20]
 8016c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c54:	2be0      	cmp	r3, #224	; 0xe0
 8016c56:	d00c      	beq.n	8016c72 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016c58:	4b0f      	ldr	r3, [pc, #60]	; (8016c98 <udp_input+0x218>)
 8016c5a:	899b      	ldrh	r3, [r3, #12]
 8016c5c:	3308      	adds	r3, #8
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	b21b      	sxth	r3, r3
 8016c62:	4619      	mov	r1, r3
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7fa f94e 	bl	8010f06 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016c6a:	2103      	movs	r1, #3
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f003 f9bd 	bl	8019fec <icmp_dest_unreach>
      pbuf_free(p);
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f7fa f95a 	bl	8010f2c <pbuf_free>
  return;
 8016c78:	e003      	b.n	8016c82 <udp_input+0x202>
    pbuf_free(p);
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7fa f956 	bl	8010f2c <pbuf_free>
  return;
 8016c80:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016c82:	372c      	adds	r7, #44	; 0x2c
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd90      	pop	{r4, r7, pc}
 8016c88:	080235d0 	.word	0x080235d0
 8016c8c:	08023674 	.word	0x08023674
 8016c90:	08023624 	.word	0x08023624
 8016c94:	0802368c 	.word	0x0802368c
 8016c98:	200051a0 	.word	0x200051a0
 8016c9c:	200082dc 	.word	0x200082dc
 8016ca0:	080236a8 	.word	0x080236a8
 8016ca4:	200051b0 	.word	0x200051b0

08016ca8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b088      	sub	sp, #32
 8016cac:	af02      	add	r7, sp, #8
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	60b9      	str	r1, [r7, #8]
 8016cb2:	607a      	str	r2, [r7, #4]
 8016cb4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d109      	bne.n	8016cd0 <udp_sendto_if+0x28>
 8016cbc:	4b2e      	ldr	r3, [pc, #184]	; (8016d78 <udp_sendto_if+0xd0>)
 8016cbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cc2:	492e      	ldr	r1, [pc, #184]	; (8016d7c <udp_sendto_if+0xd4>)
 8016cc4:	482e      	ldr	r0, [pc, #184]	; (8016d80 <udp_sendto_if+0xd8>)
 8016cc6:	f005 f9ab 	bl	801c020 <iprintf>
 8016cca:	f06f 030f 	mvn.w	r3, #15
 8016cce:	e04f      	b.n	8016d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d109      	bne.n	8016cea <udp_sendto_if+0x42>
 8016cd6:	4b28      	ldr	r3, [pc, #160]	; (8016d78 <udp_sendto_if+0xd0>)
 8016cd8:	f240 2281 	movw	r2, #641	; 0x281
 8016cdc:	4929      	ldr	r1, [pc, #164]	; (8016d84 <udp_sendto_if+0xdc>)
 8016cde:	4828      	ldr	r0, [pc, #160]	; (8016d80 <udp_sendto_if+0xd8>)
 8016ce0:	f005 f99e 	bl	801c020 <iprintf>
 8016ce4:	f06f 030f 	mvn.w	r3, #15
 8016ce8:	e042      	b.n	8016d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d109      	bne.n	8016d04 <udp_sendto_if+0x5c>
 8016cf0:	4b21      	ldr	r3, [pc, #132]	; (8016d78 <udp_sendto_if+0xd0>)
 8016cf2:	f240 2282 	movw	r2, #642	; 0x282
 8016cf6:	4924      	ldr	r1, [pc, #144]	; (8016d88 <udp_sendto_if+0xe0>)
 8016cf8:	4821      	ldr	r0, [pc, #132]	; (8016d80 <udp_sendto_if+0xd8>)
 8016cfa:	f005 f991 	bl	801c020 <iprintf>
 8016cfe:	f06f 030f 	mvn.w	r3, #15
 8016d02:	e035      	b.n	8016d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016d04:	6a3b      	ldr	r3, [r7, #32]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d109      	bne.n	8016d1e <udp_sendto_if+0x76>
 8016d0a:	4b1b      	ldr	r3, [pc, #108]	; (8016d78 <udp_sendto_if+0xd0>)
 8016d0c:	f240 2283 	movw	r2, #643	; 0x283
 8016d10:	491e      	ldr	r1, [pc, #120]	; (8016d8c <udp_sendto_if+0xe4>)
 8016d12:	481b      	ldr	r0, [pc, #108]	; (8016d80 <udp_sendto_if+0xd8>)
 8016d14:	f005 f984 	bl	801c020 <iprintf>
 8016d18:	f06f 030f 	mvn.w	r3, #15
 8016d1c:	e028      	b.n	8016d70 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d009      	beq.n	8016d38 <udp_sendto_if+0x90>
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d005      	beq.n	8016d38 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d34:	2be0      	cmp	r3, #224	; 0xe0
 8016d36:	d103      	bne.n	8016d40 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016d38:	6a3b      	ldr	r3, [r7, #32]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	617b      	str	r3, [r7, #20]
 8016d3e:	e00b      	b.n	8016d58 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	6a3b      	ldr	r3, [r7, #32]
 8016d46:	3304      	adds	r3, #4
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d002      	beq.n	8016d54 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016d4e:	f06f 0303 	mvn.w	r3, #3
 8016d52:	e00d      	b.n	8016d70 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016d58:	887a      	ldrh	r2, [r7, #2]
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	6a3b      	ldr	r3, [r7, #32]
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	4613      	mov	r3, r2
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	68b9      	ldr	r1, [r7, #8]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f000 f811 	bl	8016d90 <udp_sendto_if_src>
 8016d6e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3718      	adds	r7, #24
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	080235d0 	.word	0x080235d0
 8016d7c:	08023744 	.word	0x08023744
 8016d80:	08023624 	.word	0x08023624
 8016d84:	08023760 	.word	0x08023760
 8016d88:	0802377c 	.word	0x0802377c
 8016d8c:	0802379c 	.word	0x0802379c

08016d90 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b08c      	sub	sp, #48	; 0x30
 8016d94:	af04      	add	r7, sp, #16
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	607a      	str	r2, [r7, #4]
 8016d9c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d109      	bne.n	8016db8 <udp_sendto_if_src+0x28>
 8016da4:	4b65      	ldr	r3, [pc, #404]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016da6:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016daa:	4965      	ldr	r1, [pc, #404]	; (8016f40 <udp_sendto_if_src+0x1b0>)
 8016dac:	4865      	ldr	r0, [pc, #404]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016dae:	f005 f937 	bl	801c020 <iprintf>
 8016db2:	f06f 030f 	mvn.w	r3, #15
 8016db6:	e0bc      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d109      	bne.n	8016dd2 <udp_sendto_if_src+0x42>
 8016dbe:	4b5f      	ldr	r3, [pc, #380]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016dc0:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016dc4:	4960      	ldr	r1, [pc, #384]	; (8016f48 <udp_sendto_if_src+0x1b8>)
 8016dc6:	485f      	ldr	r0, [pc, #380]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016dc8:	f005 f92a 	bl	801c020 <iprintf>
 8016dcc:	f06f 030f 	mvn.w	r3, #15
 8016dd0:	e0af      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d109      	bne.n	8016dec <udp_sendto_if_src+0x5c>
 8016dd8:	4b58      	ldr	r3, [pc, #352]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016dda:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016dde:	495b      	ldr	r1, [pc, #364]	; (8016f4c <udp_sendto_if_src+0x1bc>)
 8016de0:	4858      	ldr	r0, [pc, #352]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016de2:	f005 f91d 	bl	801c020 <iprintf>
 8016de6:	f06f 030f 	mvn.w	r3, #15
 8016dea:	e0a2      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d109      	bne.n	8016e06 <udp_sendto_if_src+0x76>
 8016df2:	4b52      	ldr	r3, [pc, #328]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016df4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016df8:	4955      	ldr	r1, [pc, #340]	; (8016f50 <udp_sendto_if_src+0x1c0>)
 8016dfa:	4852      	ldr	r0, [pc, #328]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016dfc:	f005 f910 	bl	801c020 <iprintf>
 8016e00:	f06f 030f 	mvn.w	r3, #15
 8016e04:	e095      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d109      	bne.n	8016e20 <udp_sendto_if_src+0x90>
 8016e0c:	4b4b      	ldr	r3, [pc, #300]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016e0e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016e12:	4950      	ldr	r1, [pc, #320]	; (8016f54 <udp_sendto_if_src+0x1c4>)
 8016e14:	484b      	ldr	r0, [pc, #300]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016e16:	f005 f903 	bl	801c020 <iprintf>
 8016e1a:	f06f 030f 	mvn.w	r3, #15
 8016e1e:	e088      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	8a5b      	ldrh	r3, [r3, #18]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d10f      	bne.n	8016e48 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016e28:	68f9      	ldr	r1, [r7, #12]
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	8a5b      	ldrh	r3, [r3, #18]
 8016e2e:	461a      	mov	r2, r3
 8016e30:	68f8      	ldr	r0, [r7, #12]
 8016e32:	f000 f893 	bl	8016f5c <udp_bind>
 8016e36:	4603      	mov	r3, r0
 8016e38:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016e3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d002      	beq.n	8016e48 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016e42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016e46:	e074      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	891b      	ldrh	r3, [r3, #8]
 8016e4c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d902      	bls.n	8016e5a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016e54:	f04f 33ff 	mov.w	r3, #4294967295
 8016e58:	e06b      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016e5a:	2108      	movs	r1, #8
 8016e5c:	68b8      	ldr	r0, [r7, #8]
 8016e5e:	f7f9 ffcf 	bl	8010e00 <pbuf_add_header>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d015      	beq.n	8016e94 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016e68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e6c:	2108      	movs	r1, #8
 8016e6e:	2022      	movs	r0, #34	; 0x22
 8016e70:	f7f9 fd7c 	bl	801096c <pbuf_alloc>
 8016e74:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d102      	bne.n	8016e82 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e80:	e057      	b.n	8016f32 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016e82:	68bb      	ldr	r3, [r7, #8]
 8016e84:	891b      	ldrh	r3, [r3, #8]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d006      	beq.n	8016e98 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016e8a:	68b9      	ldr	r1, [r7, #8]
 8016e8c:	69f8      	ldr	r0, [r7, #28]
 8016e8e:	f7fa f965 	bl	801115c <pbuf_chain>
 8016e92:	e001      	b.n	8016e98 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	895b      	ldrh	r3, [r3, #10]
 8016e9c:	2b07      	cmp	r3, #7
 8016e9e:	d806      	bhi.n	8016eae <udp_sendto_if_src+0x11e>
 8016ea0:	4b26      	ldr	r3, [pc, #152]	; (8016f3c <udp_sendto_if_src+0x1ac>)
 8016ea2:	f240 320e 	movw	r2, #782	; 0x30e
 8016ea6:	492c      	ldr	r1, [pc, #176]	; (8016f58 <udp_sendto_if_src+0x1c8>)
 8016ea8:	4826      	ldr	r0, [pc, #152]	; (8016f44 <udp_sendto_if_src+0x1b4>)
 8016eaa:	f005 f8b9 	bl	801c020 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016eae:	69fb      	ldr	r3, [r7, #28]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	8a5b      	ldrh	r3, [r3, #18]
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7f8 fd9f 	bl	800f9fc <lwip_htons>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016ec6:	887b      	ldrh	r3, [r7, #2]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f8 fd97 	bl	800f9fc <lwip_htons>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	719a      	strb	r2, [r3, #6]
 8016edc:	2200      	movs	r2, #0
 8016ede:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016ee0:	69fb      	ldr	r3, [r7, #28]
 8016ee2:	891b      	ldrh	r3, [r3, #8]
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7f8 fd89 	bl	800f9fc <lwip_htons>
 8016eea:	4603      	mov	r3, r0
 8016eec:	461a      	mov	r2, r3
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016ef2:	2311      	movs	r3, #17
 8016ef4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	7adb      	ldrb	r3, [r3, #11]
 8016efa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	7a9b      	ldrb	r3, [r3, #10]
 8016f00:	7cb9      	ldrb	r1, [r7, #18]
 8016f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f04:	9202      	str	r2, [sp, #8]
 8016f06:	7cfa      	ldrb	r2, [r7, #19]
 8016f08:	9201      	str	r2, [sp, #4]
 8016f0a:	9300      	str	r3, [sp, #0]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f12:	69f8      	ldr	r0, [r7, #28]
 8016f14:	f003 faf8 	bl	801a508 <ip4_output_if_src>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016f1c:	69fa      	ldr	r2, [r7, #28]
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	429a      	cmp	r2, r3
 8016f22:	d004      	beq.n	8016f2e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016f24:	69f8      	ldr	r0, [r7, #28]
 8016f26:	f7fa f801 	bl	8010f2c <pbuf_free>
    q = NULL;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016f2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3720      	adds	r7, #32
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	080235d0 	.word	0x080235d0
 8016f40:	080237bc 	.word	0x080237bc
 8016f44:	08023624 	.word	0x08023624
 8016f48:	080237dc 	.word	0x080237dc
 8016f4c:	080237fc 	.word	0x080237fc
 8016f50:	08023820 	.word	0x08023820
 8016f54:	08023844 	.word	0x08023844
 8016f58:	08023868 	.word	0x08023868

08016f5c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b086      	sub	sp, #24
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	4613      	mov	r3, r2
 8016f68:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d101      	bne.n	8016f74 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016f70:	4b39      	ldr	r3, [pc, #228]	; (8017058 <udp_bind+0xfc>)
 8016f72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d109      	bne.n	8016f8e <udp_bind+0x32>
 8016f7a:	4b38      	ldr	r3, [pc, #224]	; (801705c <udp_bind+0x100>)
 8016f7c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016f80:	4937      	ldr	r1, [pc, #220]	; (8017060 <udp_bind+0x104>)
 8016f82:	4838      	ldr	r0, [pc, #224]	; (8017064 <udp_bind+0x108>)
 8016f84:	f005 f84c 	bl	801c020 <iprintf>
 8016f88:	f06f 030f 	mvn.w	r3, #15
 8016f8c:	e060      	b.n	8017050 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016f92:	4b35      	ldr	r3, [pc, #212]	; (8017068 <udp_bind+0x10c>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	617b      	str	r3, [r7, #20]
 8016f98:	e009      	b.n	8016fae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016f9a:	68fa      	ldr	r2, [r7, #12]
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d102      	bne.n	8016fa8 <udp_bind+0x4c>
      rebind = 1;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8016fa6:	e005      	b.n	8016fb4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	617b      	str	r3, [r7, #20]
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d1f2      	bne.n	8016f9a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016fb4:	88fb      	ldrh	r3, [r7, #6]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d109      	bne.n	8016fce <udp_bind+0x72>
    port = udp_new_port();
 8016fba:	f7ff fcc5 	bl	8016948 <udp_new_port>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016fc2:	88fb      	ldrh	r3, [r7, #6]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d12c      	bne.n	8017022 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016fc8:	f06f 0307 	mvn.w	r3, #7
 8016fcc:	e040      	b.n	8017050 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fce:	4b26      	ldr	r3, [pc, #152]	; (8017068 <udp_bind+0x10c>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	617b      	str	r3, [r7, #20]
 8016fd4:	e022      	b.n	801701c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016fd6:	68fa      	ldr	r2, [r7, #12]
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d01b      	beq.n	8017016 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	8a5b      	ldrh	r3, [r3, #18]
 8016fe2:	88fa      	ldrh	r2, [r7, #6]
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d116      	bne.n	8017016 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d00d      	beq.n	8017010 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d00a      	beq.n	8017010 <udp_bind+0xb4>
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d006      	beq.n	8017010 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017002:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017004:	2b00      	cmp	r3, #0
 8017006:	d003      	beq.n	8017010 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017008:	697b      	ldr	r3, [r7, #20]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d102      	bne.n	8017016 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017010:	f06f 0307 	mvn.w	r3, #7
 8017014:	e01c      	b.n	8017050 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017016:	697b      	ldr	r3, [r7, #20]
 8017018:	68db      	ldr	r3, [r3, #12]
 801701a:	617b      	str	r3, [r7, #20]
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1d9      	bne.n	8016fd6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d002      	beq.n	801702e <udp_bind+0xd2>
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	e000      	b.n	8017030 <udp_bind+0xd4>
 801702e:	2300      	movs	r3, #0
 8017030:	68fa      	ldr	r2, [r7, #12]
 8017032:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	88fa      	ldrh	r2, [r7, #6]
 8017038:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801703a:	7cfb      	ldrb	r3, [r7, #19]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d106      	bne.n	801704e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017040:	4b09      	ldr	r3, [pc, #36]	; (8017068 <udp_bind+0x10c>)
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017048:	4a07      	ldr	r2, [pc, #28]	; (8017068 <udp_bind+0x10c>)
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3718      	adds	r7, #24
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}
 8017058:	080249f0 	.word	0x080249f0
 801705c:	080235d0 	.word	0x080235d0
 8017060:	08023898 	.word	0x08023898
 8017064:	08023624 	.word	0x08023624
 8017068:	200082dc 	.word	0x200082dc

0801706c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b086      	sub	sp, #24
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	4613      	mov	r3, r2
 8017078:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d109      	bne.n	8017094 <udp_connect+0x28>
 8017080:	4b2c      	ldr	r3, [pc, #176]	; (8017134 <udp_connect+0xc8>)
 8017082:	f240 4235 	movw	r2, #1077	; 0x435
 8017086:	492c      	ldr	r1, [pc, #176]	; (8017138 <udp_connect+0xcc>)
 8017088:	482c      	ldr	r0, [pc, #176]	; (801713c <udp_connect+0xd0>)
 801708a:	f004 ffc9 	bl	801c020 <iprintf>
 801708e:	f06f 030f 	mvn.w	r3, #15
 8017092:	e04b      	b.n	801712c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d109      	bne.n	80170ae <udp_connect+0x42>
 801709a:	4b26      	ldr	r3, [pc, #152]	; (8017134 <udp_connect+0xc8>)
 801709c:	f240 4236 	movw	r2, #1078	; 0x436
 80170a0:	4927      	ldr	r1, [pc, #156]	; (8017140 <udp_connect+0xd4>)
 80170a2:	4826      	ldr	r0, [pc, #152]	; (801713c <udp_connect+0xd0>)
 80170a4:	f004 ffbc 	bl	801c020 <iprintf>
 80170a8:	f06f 030f 	mvn.w	r3, #15
 80170ac:	e03e      	b.n	801712c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	8a5b      	ldrh	r3, [r3, #18]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d10f      	bne.n	80170d6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80170b6:	68f9      	ldr	r1, [r7, #12]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	8a5b      	ldrh	r3, [r3, #18]
 80170bc:	461a      	mov	r2, r3
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7ff ff4c 	bl	8016f5c <udp_bind>
 80170c4:	4603      	mov	r3, r0
 80170c6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80170c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d002      	beq.n	80170d6 <udp_connect+0x6a>
      return err;
 80170d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80170d4:	e02a      	b.n	801712c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d002      	beq.n	80170e2 <udp_connect+0x76>
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	e000      	b.n	80170e4 <udp_connect+0x78>
 80170e2:	2300      	movs	r3, #0
 80170e4:	68fa      	ldr	r2, [r7, #12]
 80170e6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	88fa      	ldrh	r2, [r7, #6]
 80170ec:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	7c1b      	ldrb	r3, [r3, #16]
 80170f2:	f043 0304 	orr.w	r3, r3, #4
 80170f6:	b2da      	uxtb	r2, r3
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80170fc:	4b11      	ldr	r3, [pc, #68]	; (8017144 <udp_connect+0xd8>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	617b      	str	r3, [r7, #20]
 8017102:	e008      	b.n	8017116 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017104:	68fa      	ldr	r2, [r7, #12]
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	429a      	cmp	r2, r3
 801710a:	d101      	bne.n	8017110 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801710c:	2300      	movs	r3, #0
 801710e:	e00d      	b.n	801712c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	68db      	ldr	r3, [r3, #12]
 8017114:	617b      	str	r3, [r7, #20]
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d1f3      	bne.n	8017104 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801711c:	4b09      	ldr	r3, [pc, #36]	; (8017144 <udp_connect+0xd8>)
 801711e:	681a      	ldr	r2, [r3, #0]
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017124:	4a07      	ldr	r2, [pc, #28]	; (8017144 <udp_connect+0xd8>)
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801712a:	2300      	movs	r3, #0
}
 801712c:	4618      	mov	r0, r3
 801712e:	3718      	adds	r7, #24
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}
 8017134:	080235d0 	.word	0x080235d0
 8017138:	080238b0 	.word	0x080238b0
 801713c:	08023624 	.word	0x08023624
 8017140:	080238cc 	.word	0x080238cc
 8017144:	200082dc 	.word	0x200082dc

08017148 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b084      	sub	sp, #16
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d107      	bne.n	801716a <udp_recv+0x22>
 801715a:	4b08      	ldr	r3, [pc, #32]	; (801717c <udp_recv+0x34>)
 801715c:	f240 428a 	movw	r2, #1162	; 0x48a
 8017160:	4907      	ldr	r1, [pc, #28]	; (8017180 <udp_recv+0x38>)
 8017162:	4808      	ldr	r0, [pc, #32]	; (8017184 <udp_recv+0x3c>)
 8017164:	f004 ff5c 	bl	801c020 <iprintf>
 8017168:	e005      	b.n	8017176 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	68ba      	ldr	r2, [r7, #8]
 801716e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	61da      	str	r2, [r3, #28]
}
 8017176:	3710      	adds	r7, #16
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}
 801717c:	080235d0 	.word	0x080235d0
 8017180:	08023904 	.word	0x08023904
 8017184:	08023624 	.word	0x08023624

08017188 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b084      	sub	sp, #16
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d107      	bne.n	80171a6 <udp_remove+0x1e>
 8017196:	4b19      	ldr	r3, [pc, #100]	; (80171fc <udp_remove+0x74>)
 8017198:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801719c:	4918      	ldr	r1, [pc, #96]	; (8017200 <udp_remove+0x78>)
 801719e:	4819      	ldr	r0, [pc, #100]	; (8017204 <udp_remove+0x7c>)
 80171a0:	f004 ff3e 	bl	801c020 <iprintf>
 80171a4:	e026      	b.n	80171f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80171a6:	4b18      	ldr	r3, [pc, #96]	; (8017208 <udp_remove+0x80>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	687a      	ldr	r2, [r7, #4]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d105      	bne.n	80171bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80171b0:	4b15      	ldr	r3, [pc, #84]	; (8017208 <udp_remove+0x80>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	4a14      	ldr	r2, [pc, #80]	; (8017208 <udp_remove+0x80>)
 80171b8:	6013      	str	r3, [r2, #0]
 80171ba:	e017      	b.n	80171ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80171bc:	4b12      	ldr	r3, [pc, #72]	; (8017208 <udp_remove+0x80>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	60fb      	str	r3, [r7, #12]
 80171c2:	e010      	b.n	80171e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d009      	beq.n	80171e0 <udp_remove+0x58>
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	68db      	ldr	r3, [r3, #12]
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d104      	bne.n	80171e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	68da      	ldr	r2, [r3, #12]
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	60da      	str	r2, [r3, #12]
        break;
 80171de:	e005      	b.n	80171ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	60fb      	str	r3, [r7, #12]
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d1eb      	bne.n	80171c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80171ec:	6879      	ldr	r1, [r7, #4]
 80171ee:	2000      	movs	r0, #0
 80171f0:	f7f9 f8a6 	bl	8010340 <memp_free>
}
 80171f4:	3710      	adds	r7, #16
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	080235d0 	.word	0x080235d0
 8017200:	0802391c 	.word	0x0802391c
 8017204:	08023624 	.word	0x08023624
 8017208:	200082dc 	.word	0x200082dc

0801720c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017212:	2000      	movs	r0, #0
 8017214:	f7f9 f848 	bl	80102a8 <memp_malloc>
 8017218:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d007      	beq.n	8017230 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017220:	2220      	movs	r2, #32
 8017222:	2100      	movs	r1, #0
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f004 f9ee 	bl	801b606 <memset>
    pcb->ttl = UDP_TTL;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	22ff      	movs	r2, #255	; 0xff
 801722e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017230:	687b      	ldr	r3, [r7, #4]
}
 8017232:	4618      	mov	r0, r3
 8017234:	3708      	adds	r7, #8
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
	...

0801723c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801723c:	b480      	push	{r7}
 801723e:	b085      	sub	sp, #20
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d01e      	beq.n	801728a <udp_netif_ip_addr_changed+0x4e>
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d01a      	beq.n	801728a <udp_netif_ip_addr_changed+0x4e>
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d017      	beq.n	801728a <udp_netif_ip_addr_changed+0x4e>
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d013      	beq.n	801728a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017262:	4b0d      	ldr	r3, [pc, #52]	; (8017298 <udp_netif_ip_addr_changed+0x5c>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	60fb      	str	r3, [r7, #12]
 8017268:	e00c      	b.n	8017284 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681a      	ldr	r2, [r3, #0]
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	429a      	cmp	r2, r3
 8017274:	d103      	bne.n	801727e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	68db      	ldr	r3, [r3, #12]
 8017282:	60fb      	str	r3, [r7, #12]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d1ef      	bne.n	801726a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801728a:	bf00      	nop
 801728c:	3714      	adds	r7, #20
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop
 8017298:	200082dc 	.word	0x200082dc

0801729c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80172a0:	4b20      	ldr	r3, [pc, #128]	; (8017324 <dhcp_inc_pcb_refcount+0x88>)
 80172a2:	781b      	ldrb	r3, [r3, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d133      	bne.n	8017310 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80172a8:	4b1f      	ldr	r3, [pc, #124]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d005      	beq.n	80172bc <dhcp_inc_pcb_refcount+0x20>
 80172b0:	4b1e      	ldr	r3, [pc, #120]	; (801732c <dhcp_inc_pcb_refcount+0x90>)
 80172b2:	22e5      	movs	r2, #229	; 0xe5
 80172b4:	491e      	ldr	r1, [pc, #120]	; (8017330 <dhcp_inc_pcb_refcount+0x94>)
 80172b6:	481f      	ldr	r0, [pc, #124]	; (8017334 <dhcp_inc_pcb_refcount+0x98>)
 80172b8:	f004 feb2 	bl	801c020 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80172bc:	f7ff ffa6 	bl	801720c <udp_new>
 80172c0:	4602      	mov	r2, r0
 80172c2:	4b19      	ldr	r3, [pc, #100]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172c4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80172c6:	4b18      	ldr	r3, [pc, #96]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d102      	bne.n	80172d4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80172ce:	f04f 33ff 	mov.w	r3, #4294967295
 80172d2:	e024      	b.n	801731e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80172d4:	4b14      	ldr	r3, [pc, #80]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	7a5a      	ldrb	r2, [r3, #9]
 80172da:	4b13      	ldr	r3, [pc, #76]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	f042 0220 	orr.w	r2, r2, #32
 80172e2:	b2d2      	uxtb	r2, r2
 80172e4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80172e6:	4b10      	ldr	r3, [pc, #64]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	2244      	movs	r2, #68	; 0x44
 80172ec:	4912      	ldr	r1, [pc, #72]	; (8017338 <dhcp_inc_pcb_refcount+0x9c>)
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7ff fe34 	bl	8016f5c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80172f4:	4b0c      	ldr	r3, [pc, #48]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	2243      	movs	r2, #67	; 0x43
 80172fa:	490f      	ldr	r1, [pc, #60]	; (8017338 <dhcp_inc_pcb_refcount+0x9c>)
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7ff feb5 	bl	801706c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8017302:	4b09      	ldr	r3, [pc, #36]	; (8017328 <dhcp_inc_pcb_refcount+0x8c>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	2200      	movs	r2, #0
 8017308:	490c      	ldr	r1, [pc, #48]	; (801733c <dhcp_inc_pcb_refcount+0xa0>)
 801730a:	4618      	mov	r0, r3
 801730c:	f7ff ff1c 	bl	8017148 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8017310:	4b04      	ldr	r3, [pc, #16]	; (8017324 <dhcp_inc_pcb_refcount+0x88>)
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	3301      	adds	r3, #1
 8017316:	b2da      	uxtb	r2, r3
 8017318:	4b02      	ldr	r3, [pc, #8]	; (8017324 <dhcp_inc_pcb_refcount+0x88>)
 801731a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801731c:	2300      	movs	r3, #0
}
 801731e:	4618      	mov	r0, r3
 8017320:	bd80      	pop	{r7, pc}
 8017322:	bf00      	nop
 8017324:	2000107c 	.word	0x2000107c
 8017328:	20001078 	.word	0x20001078
 801732c:	08023934 	.word	0x08023934
 8017330:	0802396c 	.word	0x0802396c
 8017334:	08023994 	.word	0x08023994
 8017338:	080249f0 	.word	0x080249f0
 801733c:	08018b59 	.word	0x08018b59

08017340 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8017344:	4b0e      	ldr	r3, [pc, #56]	; (8017380 <dhcp_dec_pcb_refcount+0x40>)
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d105      	bne.n	8017358 <dhcp_dec_pcb_refcount+0x18>
 801734c:	4b0d      	ldr	r3, [pc, #52]	; (8017384 <dhcp_dec_pcb_refcount+0x44>)
 801734e:	22ff      	movs	r2, #255	; 0xff
 8017350:	490d      	ldr	r1, [pc, #52]	; (8017388 <dhcp_dec_pcb_refcount+0x48>)
 8017352:	480e      	ldr	r0, [pc, #56]	; (801738c <dhcp_dec_pcb_refcount+0x4c>)
 8017354:	f004 fe64 	bl	801c020 <iprintf>
  dhcp_pcb_refcount--;
 8017358:	4b09      	ldr	r3, [pc, #36]	; (8017380 <dhcp_dec_pcb_refcount+0x40>)
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	3b01      	subs	r3, #1
 801735e:	b2da      	uxtb	r2, r3
 8017360:	4b07      	ldr	r3, [pc, #28]	; (8017380 <dhcp_dec_pcb_refcount+0x40>)
 8017362:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8017364:	4b06      	ldr	r3, [pc, #24]	; (8017380 <dhcp_dec_pcb_refcount+0x40>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d107      	bne.n	801737c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801736c:	4b08      	ldr	r3, [pc, #32]	; (8017390 <dhcp_dec_pcb_refcount+0x50>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	4618      	mov	r0, r3
 8017372:	f7ff ff09 	bl	8017188 <udp_remove>
    dhcp_pcb = NULL;
 8017376:	4b06      	ldr	r3, [pc, #24]	; (8017390 <dhcp_dec_pcb_refcount+0x50>)
 8017378:	2200      	movs	r2, #0
 801737a:	601a      	str	r2, [r3, #0]
  }
}
 801737c:	bf00      	nop
 801737e:	bd80      	pop	{r7, pc}
 8017380:	2000107c 	.word	0x2000107c
 8017384:	08023934 	.word	0x08023934
 8017388:	080239bc 	.word	0x080239bc
 801738c:	08023994 	.word	0x08023994
 8017390:	20001078 	.word	0x20001078

08017394 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80173a2:	210c      	movs	r1, #12
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	f001 f819 	bl	80183dc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80173aa:	4b06      	ldr	r3, [pc, #24]	; (80173c4 <dhcp_handle_nak+0x30>)
 80173ac:	4a05      	ldr	r2, [pc, #20]	; (80173c4 <dhcp_handle_nak+0x30>)
 80173ae:	4905      	ldr	r1, [pc, #20]	; (80173c4 <dhcp_handle_nak+0x30>)
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7f9 f967 	bl	8010684 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f000 fc0c 	bl	8017bd4 <dhcp_discover>
}
 80173bc:	bf00      	nop
 80173be:	3710      	adds	r7, #16
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	080249f0 	.word	0x080249f0

080173c8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80173d6:	2108      	movs	r1, #8
 80173d8:	68f8      	ldr	r0, [r7, #12]
 80173da:	f000 ffff 	bl	80183dc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	331c      	adds	r3, #28
 80173e2:	2200      	movs	r2, #0
 80173e4:	4619      	mov	r1, r3
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f002 fafe 	bl	80199e8 <etharp_query>
 80173ec:	4603      	mov	r3, r0
 80173ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	799b      	ldrb	r3, [r3, #6]
 80173f4:	2bff      	cmp	r3, #255	; 0xff
 80173f6:	d005      	beq.n	8017404 <dhcp_check+0x3c>
    dhcp->tries++;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	799b      	ldrb	r3, [r3, #6]
 80173fc:	3301      	adds	r3, #1
 80173fe:	b2da      	uxtb	r2, r3
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8017404:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017408:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801740a:	893b      	ldrh	r3, [r7, #8]
 801740c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017410:	4a06      	ldr	r2, [pc, #24]	; (801742c <dhcp_check+0x64>)
 8017412:	fb82 1203 	smull	r1, r2, r2, r3
 8017416:	1152      	asrs	r2, r2, #5
 8017418:	17db      	asrs	r3, r3, #31
 801741a:	1ad3      	subs	r3, r2, r3
 801741c:	b29a      	uxth	r2, r3
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8017422:	bf00      	nop
 8017424:	3710      	adds	r7, #16
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	10624dd3 	.word	0x10624dd3

08017430 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017440:	4b0c      	ldr	r3, [pc, #48]	; (8017474 <dhcp_handle_offer+0x44>)
 8017442:	789b      	ldrb	r3, [r3, #2]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d011      	beq.n	801746c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2200      	movs	r2, #0
 801744c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801744e:	4b0a      	ldr	r3, [pc, #40]	; (8017478 <dhcp_handle_offer+0x48>)
 8017450:	689b      	ldr	r3, [r3, #8]
 8017452:	4618      	mov	r0, r3
 8017454:	f7f8 fae7 	bl	800fa26 <lwip_htonl>
 8017458:	4602      	mov	r2, r0
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	691a      	ldr	r2, [r3, #16]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f000 f808 	bl	801747c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801746c:	bf00      	nop
 801746e:	3710      	adds	r7, #16
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	200082e0 	.word	0x200082e0
 8017478:	200082e8 	.word	0x200082e8

0801747c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801747c:	b5b0      	push	{r4, r5, r7, lr}
 801747e:	b08a      	sub	sp, #40	; 0x28
 8017480:	af02      	add	r7, sp, #8
 8017482:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d109      	bne.n	801749e <dhcp_select+0x22>
 801748a:	4b71      	ldr	r3, [pc, #452]	; (8017650 <dhcp_select+0x1d4>)
 801748c:	f240 1277 	movw	r2, #375	; 0x177
 8017490:	4970      	ldr	r1, [pc, #448]	; (8017654 <dhcp_select+0x1d8>)
 8017492:	4871      	ldr	r0, [pc, #452]	; (8017658 <dhcp_select+0x1dc>)
 8017494:	f004 fdc4 	bl	801c020 <iprintf>
 8017498:	f06f 030f 	mvn.w	r3, #15
 801749c:	e0d3      	b.n	8017646 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80174a4:	69bb      	ldr	r3, [r7, #24]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d109      	bne.n	80174be <dhcp_select+0x42>
 80174aa:	4b69      	ldr	r3, [pc, #420]	; (8017650 <dhcp_select+0x1d4>)
 80174ac:	f240 1279 	movw	r2, #377	; 0x179
 80174b0:	496a      	ldr	r1, [pc, #424]	; (801765c <dhcp_select+0x1e0>)
 80174b2:	4869      	ldr	r0, [pc, #420]	; (8017658 <dhcp_select+0x1dc>)
 80174b4:	f004 fdb4 	bl	801c020 <iprintf>
 80174b8:	f06f 0305 	mvn.w	r3, #5
 80174bc:	e0c3      	b.n	8017646 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80174be:	2101      	movs	r1, #1
 80174c0:	69b8      	ldr	r0, [r7, #24]
 80174c2:	f000 ff8b 	bl	80183dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80174c6:	f107 030c 	add.w	r3, r7, #12
 80174ca:	2203      	movs	r2, #3
 80174cc:	69b9      	ldr	r1, [r7, #24]
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	f001 fc0e 	bl	8018cf0 <dhcp_create_msg>
 80174d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80174d6:	697b      	ldr	r3, [r7, #20]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	f000 8085 	beq.w	80175e8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80174e4:	89b8      	ldrh	r0, [r7, #12]
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174ec:	2302      	movs	r3, #2
 80174ee:	2239      	movs	r2, #57	; 0x39
 80174f0:	f000 ff8e 	bl	8018410 <dhcp_option>
 80174f4:	4603      	mov	r3, r0
 80174f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80174f8:	89b8      	ldrh	r0, [r7, #12]
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017504:	461a      	mov	r2, r3
 8017506:	f000 ffdd 	bl	80184c4 <dhcp_option_short>
 801750a:	4603      	mov	r3, r0
 801750c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801750e:	89b8      	ldrh	r0, [r7, #12]
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017516:	2304      	movs	r3, #4
 8017518:	2232      	movs	r2, #50	; 0x32
 801751a:	f000 ff79 	bl	8018410 <dhcp_option>
 801751e:	4603      	mov	r3, r0
 8017520:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017522:	89bc      	ldrh	r4, [r7, #12]
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801752a:	69bb      	ldr	r3, [r7, #24]
 801752c:	69db      	ldr	r3, [r3, #28]
 801752e:	4618      	mov	r0, r3
 8017530:	f7f8 fa79 	bl	800fa26 <lwip_htonl>
 8017534:	4603      	mov	r3, r0
 8017536:	461a      	mov	r2, r3
 8017538:	4629      	mov	r1, r5
 801753a:	4620      	mov	r0, r4
 801753c:	f000 fff4 	bl	8018528 <dhcp_option_long>
 8017540:	4603      	mov	r3, r0
 8017542:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017544:	89b8      	ldrh	r0, [r7, #12]
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801754c:	2304      	movs	r3, #4
 801754e:	2236      	movs	r2, #54	; 0x36
 8017550:	f000 ff5e 	bl	8018410 <dhcp_option>
 8017554:	4603      	mov	r3, r0
 8017556:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8017558:	89bc      	ldrh	r4, [r7, #12]
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	699b      	ldr	r3, [r3, #24]
 8017564:	4618      	mov	r0, r3
 8017566:	f7f8 fa5e 	bl	800fa26 <lwip_htonl>
 801756a:	4603      	mov	r3, r0
 801756c:	461a      	mov	r2, r3
 801756e:	4629      	mov	r1, r5
 8017570:	4620      	mov	r0, r4
 8017572:	f000 ffd9 	bl	8018528 <dhcp_option_long>
 8017576:	4603      	mov	r3, r0
 8017578:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801757a:	89b8      	ldrh	r0, [r7, #12]
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017582:	2303      	movs	r3, #3
 8017584:	2237      	movs	r2, #55	; 0x37
 8017586:	f000 ff43 	bl	8018410 <dhcp_option>
 801758a:	4603      	mov	r3, r0
 801758c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801758e:	2300      	movs	r3, #0
 8017590:	77bb      	strb	r3, [r7, #30]
 8017592:	e00e      	b.n	80175b2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017594:	89b8      	ldrh	r0, [r7, #12]
 8017596:	693b      	ldr	r3, [r7, #16]
 8017598:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801759c:	7fbb      	ldrb	r3, [r7, #30]
 801759e:	4a30      	ldr	r2, [pc, #192]	; (8017660 <dhcp_select+0x1e4>)
 80175a0:	5cd3      	ldrb	r3, [r2, r3]
 80175a2:	461a      	mov	r2, r3
 80175a4:	f000 ff68 	bl	8018478 <dhcp_option_byte>
 80175a8:	4603      	mov	r3, r0
 80175aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175ac:	7fbb      	ldrb	r3, [r7, #30]
 80175ae:	3301      	adds	r3, #1
 80175b0:	77bb      	strb	r3, [r7, #30]
 80175b2:	7fbb      	ldrb	r3, [r7, #30]
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d9ed      	bls.n	8017594 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80175b8:	89b8      	ldrh	r0, [r7, #12]
 80175ba:	693b      	ldr	r3, [r7, #16]
 80175bc:	33f0      	adds	r3, #240	; 0xf0
 80175be:	697a      	ldr	r2, [r7, #20]
 80175c0:	4619      	mov	r1, r3
 80175c2:	f001 fc6b 	bl	8018e9c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80175c6:	4b27      	ldr	r3, [pc, #156]	; (8017664 <dhcp_select+0x1e8>)
 80175c8:	6818      	ldr	r0, [r3, #0]
 80175ca:	4b27      	ldr	r3, [pc, #156]	; (8017668 <dhcp_select+0x1ec>)
 80175cc:	9301      	str	r3, [sp, #4]
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	9300      	str	r3, [sp, #0]
 80175d2:	2343      	movs	r3, #67	; 0x43
 80175d4:	4a25      	ldr	r2, [pc, #148]	; (801766c <dhcp_select+0x1f0>)
 80175d6:	6979      	ldr	r1, [r7, #20]
 80175d8:	f7ff fbda 	bl	8016d90 <udp_sendto_if_src>
 80175dc:	4603      	mov	r3, r0
 80175de:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80175e0:	6978      	ldr	r0, [r7, #20]
 80175e2:	f7f9 fca3 	bl	8010f2c <pbuf_free>
 80175e6:	e001      	b.n	80175ec <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80175e8:	23ff      	movs	r3, #255	; 0xff
 80175ea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	799b      	ldrb	r3, [r3, #6]
 80175f0:	2bff      	cmp	r3, #255	; 0xff
 80175f2:	d005      	beq.n	8017600 <dhcp_select+0x184>
    dhcp->tries++;
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	799b      	ldrb	r3, [r3, #6]
 80175f8:	3301      	adds	r3, #1
 80175fa:	b2da      	uxtb	r2, r3
 80175fc:	69bb      	ldr	r3, [r7, #24]
 80175fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017600:	69bb      	ldr	r3, [r7, #24]
 8017602:	799b      	ldrb	r3, [r3, #6]
 8017604:	2b05      	cmp	r3, #5
 8017606:	d80d      	bhi.n	8017624 <dhcp_select+0x1a8>
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	799b      	ldrb	r3, [r3, #6]
 801760c:	461a      	mov	r2, r3
 801760e:	2301      	movs	r3, #1
 8017610:	4093      	lsls	r3, r2
 8017612:	b29b      	uxth	r3, r3
 8017614:	461a      	mov	r2, r3
 8017616:	0152      	lsls	r2, r2, #5
 8017618:	1ad2      	subs	r2, r2, r3
 801761a:	0092      	lsls	r2, r2, #2
 801761c:	4413      	add	r3, r2
 801761e:	00db      	lsls	r3, r3, #3
 8017620:	b29b      	uxth	r3, r3
 8017622:	e001      	b.n	8017628 <dhcp_select+0x1ac>
 8017624:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017628:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801762a:	89fb      	ldrh	r3, [r7, #14]
 801762c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017630:	4a0f      	ldr	r2, [pc, #60]	; (8017670 <dhcp_select+0x1f4>)
 8017632:	fb82 1203 	smull	r1, r2, r2, r3
 8017636:	1152      	asrs	r2, r2, #5
 8017638:	17db      	asrs	r3, r3, #31
 801763a:	1ad3      	subs	r3, r2, r3
 801763c:	b29a      	uxth	r2, r3
 801763e:	69bb      	ldr	r3, [r7, #24]
 8017640:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017646:	4618      	mov	r0, r3
 8017648:	3720      	adds	r7, #32
 801764a:	46bd      	mov	sp, r7
 801764c:	bdb0      	pop	{r4, r5, r7, pc}
 801764e:	bf00      	nop
 8017650:	08023934 	.word	0x08023934
 8017654:	080239e0 	.word	0x080239e0
 8017658:	08023994 	.word	0x08023994
 801765c:	080239fc 	.word	0x080239fc
 8017660:	20000080 	.word	0x20000080
 8017664:	20001078 	.word	0x20001078
 8017668:	080249f0 	.word	0x080249f0
 801766c:	080249f4 	.word	0x080249f4
 8017670:	10624dd3 	.word	0x10624dd3

08017674 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b082      	sub	sp, #8
 8017678:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801767a:	4b27      	ldr	r3, [pc, #156]	; (8017718 <dhcp_coarse_tmr+0xa4>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	607b      	str	r3, [r7, #4]
 8017680:	e042      	b.n	8017708 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017686:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d039      	beq.n	8017702 <dhcp_coarse_tmr+0x8e>
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	795b      	ldrb	r3, [r3, #5]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d035      	beq.n	8017702 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	8a9b      	ldrh	r3, [r3, #20]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d012      	beq.n	80176c4 <dhcp_coarse_tmr+0x50>
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	8a5b      	ldrh	r3, [r3, #18]
 80176a2:	3301      	adds	r3, #1
 80176a4:	b29a      	uxth	r2, r3
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	825a      	strh	r2, [r3, #18]
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	8a5a      	ldrh	r2, [r3, #18]
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	8a9b      	ldrh	r3, [r3, #20]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d106      	bne.n	80176c4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f000 fdf6 	bl	80182a8 <dhcp_release_and_stop>
        dhcp_start(netif);
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f000 f969 	bl	8017994 <dhcp_start>
 80176c2:	e01e      	b.n	8017702 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	8a1b      	ldrh	r3, [r3, #16]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00b      	beq.n	80176e4 <dhcp_coarse_tmr+0x70>
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	8a1b      	ldrh	r3, [r3, #16]
 80176d0:	1e5a      	subs	r2, r3, #1
 80176d2:	b291      	uxth	r1, r2
 80176d4:	683a      	ldr	r2, [r7, #0]
 80176d6:	8211      	strh	r1, [r2, #16]
 80176d8:	2b01      	cmp	r3, #1
 80176da:	d103      	bne.n	80176e4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f000 f8c6 	bl	801786e <dhcp_t2_timeout>
 80176e2:	e00e      	b.n	8017702 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	89db      	ldrh	r3, [r3, #14]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d00a      	beq.n	8017702 <dhcp_coarse_tmr+0x8e>
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	89db      	ldrh	r3, [r3, #14]
 80176f0:	1e5a      	subs	r2, r3, #1
 80176f2:	b291      	uxth	r1, r2
 80176f4:	683a      	ldr	r2, [r7, #0]
 80176f6:	81d1      	strh	r1, [r2, #14]
 80176f8:	2b01      	cmp	r3, #1
 80176fa:	d102      	bne.n	8017702 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80176fc:	6878      	ldr	r0, [r7, #4]
 80176fe:	f000 f888 	bl	8017812 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	607b      	str	r3, [r7, #4]
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d1b9      	bne.n	8017682 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801770e:	bf00      	nop
 8017710:	3708      	adds	r7, #8
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}
 8017716:	bf00      	nop
 8017718:	200082b4 	.word	0x200082b4

0801771c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8017722:	4b16      	ldr	r3, [pc, #88]	; (801777c <dhcp_fine_tmr+0x60>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	607b      	str	r3, [r7, #4]
 8017728:	e020      	b.n	801776c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801772e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d017      	beq.n	8017766 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	891b      	ldrh	r3, [r3, #8]
 801773a:	2b01      	cmp	r3, #1
 801773c:	d906      	bls.n	801774c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	891b      	ldrh	r3, [r3, #8]
 8017742:	3b01      	subs	r3, #1
 8017744:	b29a      	uxth	r2, r3
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	811a      	strh	r2, [r3, #8]
 801774a:	e00c      	b.n	8017766 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	891b      	ldrh	r3, [r3, #8]
 8017750:	2b01      	cmp	r3, #1
 8017752:	d108      	bne.n	8017766 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	891b      	ldrh	r3, [r3, #8]
 8017758:	3b01      	subs	r3, #1
 801775a:	b29a      	uxth	r2, r3
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f000 f80d 	bl	8017780 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	607b      	str	r3, [r7, #4]
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d1db      	bne.n	801772a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017772:	bf00      	nop
 8017774:	3708      	adds	r7, #8
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	200082b4 	.word	0x200082b4

08017780 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	795b      	ldrb	r3, [r3, #5]
 8017792:	2b0c      	cmp	r3, #12
 8017794:	d003      	beq.n	801779e <dhcp_timeout+0x1e>
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	795b      	ldrb	r3, [r3, #5]
 801779a:	2b06      	cmp	r3, #6
 801779c:	d103      	bne.n	80177a6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 fa18 	bl	8017bd4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80177a4:	e031      	b.n	801780a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	795b      	ldrb	r3, [r3, #5]
 80177aa:	2b01      	cmp	r3, #1
 80177ac:	d10e      	bne.n	80177cc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	799b      	ldrb	r3, [r3, #6]
 80177b2:	2b05      	cmp	r3, #5
 80177b4:	d803      	bhi.n	80177be <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7ff fe60 	bl	801747c <dhcp_select>
}
 80177bc:	e025      	b.n	801780a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80177be:	6878      	ldr	r0, [r7, #4]
 80177c0:	f000 fd72 	bl	80182a8 <dhcp_release_and_stop>
      dhcp_start(netif);
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f000 f8e5 	bl	8017994 <dhcp_start>
}
 80177ca:	e01e      	b.n	801780a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	795b      	ldrb	r3, [r3, #5]
 80177d0:	2b08      	cmp	r3, #8
 80177d2:	d10b      	bne.n	80177ec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	799b      	ldrb	r3, [r3, #6]
 80177d8:	2b01      	cmp	r3, #1
 80177da:	d803      	bhi.n	80177e4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f7ff fdf3 	bl	80173c8 <dhcp_check>
}
 80177e2:	e012      	b.n	801780a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f000 fa97 	bl	8017d18 <dhcp_bind>
}
 80177ea:	e00e      	b.n	801780a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	795b      	ldrb	r3, [r3, #5]
 80177f0:	2b03      	cmp	r3, #3
 80177f2:	d10a      	bne.n	801780a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	799b      	ldrb	r3, [r3, #6]
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d803      	bhi.n	8017804 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f000 fc9d 	bl	801813c <dhcp_reboot>
}
 8017802:	e002      	b.n	801780a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f000 f9e5 	bl	8017bd4 <dhcp_discover>
}
 801780a:	bf00      	nop
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}

08017812 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8017812:	b580      	push	{r7, lr}
 8017814:	b084      	sub	sp, #16
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801781e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	795b      	ldrb	r3, [r3, #5]
 8017824:	2b01      	cmp	r3, #1
 8017826:	d007      	beq.n	8017838 <dhcp_t1_timeout+0x26>
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	795b      	ldrb	r3, [r3, #5]
 801782c:	2b0a      	cmp	r3, #10
 801782e:	d003      	beq.n	8017838 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017834:	2b05      	cmp	r3, #5
 8017836:	d116      	bne.n	8017866 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f000 fb47 	bl	8017ecc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	899b      	ldrh	r3, [r3, #12]
 8017842:	461a      	mov	r2, r3
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	8a5b      	ldrh	r3, [r3, #18]
 8017848:	1ad3      	subs	r3, r2, r3
 801784a:	2b01      	cmp	r3, #1
 801784c:	dd0b      	ble.n	8017866 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	899b      	ldrh	r3, [r3, #12]
 8017852:	461a      	mov	r2, r3
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	8a5b      	ldrh	r3, [r3, #18]
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	0fda      	lsrs	r2, r3, #31
 801785c:	4413      	add	r3, r2
 801785e:	105b      	asrs	r3, r3, #1
 8017860:	b29a      	uxth	r2, r3
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8017866:	bf00      	nop
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b084      	sub	sp, #16
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801787a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	795b      	ldrb	r3, [r3, #5]
 8017880:	2b01      	cmp	r3, #1
 8017882:	d00b      	beq.n	801789c <dhcp_t2_timeout+0x2e>
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	795b      	ldrb	r3, [r3, #5]
 8017888:	2b0a      	cmp	r3, #10
 801788a:	d007      	beq.n	801789c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017890:	2b05      	cmp	r3, #5
 8017892:	d003      	beq.n	801789c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	795b      	ldrb	r3, [r3, #5]
 8017898:	2b04      	cmp	r3, #4
 801789a:	d116      	bne.n	80178ca <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801789c:	6878      	ldr	r0, [r7, #4]
 801789e:	f000 fbb1 	bl	8018004 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	8a9b      	ldrh	r3, [r3, #20]
 80178a6:	461a      	mov	r2, r3
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	8a5b      	ldrh	r3, [r3, #18]
 80178ac:	1ad3      	subs	r3, r2, r3
 80178ae:	2b01      	cmp	r3, #1
 80178b0:	dd0b      	ble.n	80178ca <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	8a9b      	ldrh	r3, [r3, #20]
 80178b6:	461a      	mov	r2, r3
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	8a5b      	ldrh	r3, [r3, #18]
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	0fda      	lsrs	r2, r3, #31
 80178c0:	4413      	add	r3, r2
 80178c2:	105b      	asrs	r3, r3, #1
 80178c4:	b29a      	uxth	r2, r3
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80178ca:	bf00      	nop
 80178cc:	3710      	adds	r7, #16
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}
	...

080178d4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b084      	sub	sp, #16
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
 80178dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2200      	movs	r2, #0
 80178e8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	2200      	movs	r2, #0
 80178ee:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80178f0:	4b26      	ldr	r3, [pc, #152]	; (801798c <dhcp_handle_ack+0xb8>)
 80178f2:	78db      	ldrb	r3, [r3, #3]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d003      	beq.n	8017900 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80178f8:	4b25      	ldr	r3, [pc, #148]	; (8017990 <dhcp_handle_ack+0xbc>)
 80178fa:	68da      	ldr	r2, [r3, #12]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8017900:	4b22      	ldr	r3, [pc, #136]	; (801798c <dhcp_handle_ack+0xb8>)
 8017902:	791b      	ldrb	r3, [r3, #4]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d004      	beq.n	8017912 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8017908:	4b21      	ldr	r3, [pc, #132]	; (8017990 <dhcp_handle_ack+0xbc>)
 801790a:	691a      	ldr	r2, [r3, #16]
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	62da      	str	r2, [r3, #44]	; 0x2c
 8017910:	e004      	b.n	801791c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017916:	085a      	lsrs	r2, r3, #1
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801791c:	4b1b      	ldr	r3, [pc, #108]	; (801798c <dhcp_handle_ack+0xb8>)
 801791e:	795b      	ldrb	r3, [r3, #5]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d004      	beq.n	801792e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8017924:	4b1a      	ldr	r3, [pc, #104]	; (8017990 <dhcp_handle_ack+0xbc>)
 8017926:	695a      	ldr	r2, [r3, #20]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	631a      	str	r2, [r3, #48]	; 0x30
 801792c:	e007      	b.n	801793e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017932:	4613      	mov	r3, r2
 8017934:	00db      	lsls	r3, r3, #3
 8017936:	1a9b      	subs	r3, r3, r2
 8017938:	08da      	lsrs	r2, r3, #3
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	691a      	ldr	r2, [r3, #16]
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8017946:	4b11      	ldr	r3, [pc, #68]	; (801798c <dhcp_handle_ack+0xb8>)
 8017948:	799b      	ldrb	r3, [r3, #6]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d00b      	beq.n	8017966 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801794e:	4b10      	ldr	r3, [pc, #64]	; (8017990 <dhcp_handle_ack+0xbc>)
 8017950:	699b      	ldr	r3, [r3, #24]
 8017952:	4618      	mov	r0, r3
 8017954:	f7f8 f867 	bl	800fa26 <lwip_htonl>
 8017958:	4602      	mov	r2, r0
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2201      	movs	r2, #1
 8017962:	71da      	strb	r2, [r3, #7]
 8017964:	e002      	b.n	801796c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2200      	movs	r2, #0
 801796a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801796c:	4b07      	ldr	r3, [pc, #28]	; (801798c <dhcp_handle_ack+0xb8>)
 801796e:	79db      	ldrb	r3, [r3, #7]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d007      	beq.n	8017984 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017974:	4b06      	ldr	r3, [pc, #24]	; (8017990 <dhcp_handle_ack+0xbc>)
 8017976:	69db      	ldr	r3, [r3, #28]
 8017978:	4618      	mov	r0, r3
 801797a:	f7f8 f854 	bl	800fa26 <lwip_htonl>
 801797e:	4602      	mov	r2, r0
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017984:	bf00      	nop
 8017986:	3710      	adds	r7, #16
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	200082e0 	.word	0x200082e0
 8017990:	200082e8 	.word	0x200082e8

08017994 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d109      	bne.n	80179b6 <dhcp_start+0x22>
 80179a2:	4b37      	ldr	r3, [pc, #220]	; (8017a80 <dhcp_start+0xec>)
 80179a4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80179a8:	4936      	ldr	r1, [pc, #216]	; (8017a84 <dhcp_start+0xf0>)
 80179aa:	4837      	ldr	r0, [pc, #220]	; (8017a88 <dhcp_start+0xf4>)
 80179ac:	f004 fb38 	bl	801c020 <iprintf>
 80179b0:	f06f 030f 	mvn.w	r3, #15
 80179b4:	e060      	b.n	8017a78 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179bc:	f003 0301 	and.w	r3, r3, #1
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d109      	bne.n	80179d8 <dhcp_start+0x44>
 80179c4:	4b2e      	ldr	r3, [pc, #184]	; (8017a80 <dhcp_start+0xec>)
 80179c6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80179ca:	4930      	ldr	r1, [pc, #192]	; (8017a8c <dhcp_start+0xf8>)
 80179cc:	482e      	ldr	r0, [pc, #184]	; (8017a88 <dhcp_start+0xf4>)
 80179ce:	f004 fb27 	bl	801c020 <iprintf>
 80179d2:	f06f 030f 	mvn.w	r3, #15
 80179d6:	e04f      	b.n	8017a78 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179e2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80179e6:	d202      	bcs.n	80179ee <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80179e8:	f04f 33ff 	mov.w	r3, #4294967295
 80179ec:	e044      	b.n	8017a78 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10d      	bne.n	8017a10 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80179f4:	2034      	movs	r0, #52	; 0x34
 80179f6:	f7f8 fae9 	bl	800ffcc <mem_malloc>
 80179fa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d102      	bne.n	8017a08 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8017a02:	f04f 33ff 	mov.w	r3, #4294967295
 8017a06:	e037      	b.n	8017a78 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8017a0e:	e005      	b.n	8017a1c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	791b      	ldrb	r3, [r3, #4]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017a18:	f7ff fc92 	bl	8017340 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017a1c:	2234      	movs	r2, #52	; 0x34
 8017a1e:	2100      	movs	r1, #0
 8017a20:	68f8      	ldr	r0, [r7, #12]
 8017a22:	f003 fdf0 	bl	801b606 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8017a26:	f7ff fc39 	bl	801729c <dhcp_inc_pcb_refcount>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d002      	beq.n	8017a36 <dhcp_start+0xa2>
    return ERR_MEM;
 8017a30:	f04f 33ff 	mov.w	r3, #4294967295
 8017a34:	e020      	b.n	8017a78 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	2201      	movs	r2, #1
 8017a3a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a42:	f003 0304 	and.w	r3, r3, #4
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d105      	bne.n	8017a56 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8017a4a:	2102      	movs	r1, #2
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f000 fcc5 	bl	80183dc <dhcp_set_state>
    return ERR_OK;
 8017a52:	2300      	movs	r3, #0
 8017a54:	e010      	b.n	8017a78 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 f8bc 	bl	8017bd4 <dhcp_discover>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017a60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d005      	beq.n	8017a74 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	f000 fc1d 	bl	80182a8 <dhcp_release_and_stop>
    return ERR_MEM;
 8017a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a72:	e001      	b.n	8017a78 <dhcp_start+0xe4>
  }
  return result;
 8017a74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3710      	adds	r7, #16
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	08023934 	.word	0x08023934
 8017a84:	08023a18 	.word	0x08023a18
 8017a88:	08023994 	.word	0x08023994
 8017a8c:	08023a5c 	.word	0x08023a5c

08017a90 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b084      	sub	sp, #16
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d107      	bne.n	8017ab0 <dhcp_arp_reply+0x20>
 8017aa0:	4b0e      	ldr	r3, [pc, #56]	; (8017adc <dhcp_arp_reply+0x4c>)
 8017aa2:	f240 328b 	movw	r2, #907	; 0x38b
 8017aa6:	490e      	ldr	r1, [pc, #56]	; (8017ae0 <dhcp_arp_reply+0x50>)
 8017aa8:	480e      	ldr	r0, [pc, #56]	; (8017ae4 <dhcp_arp_reply+0x54>)
 8017aaa:	f004 fab9 	bl	801c020 <iprintf>
 8017aae:	e012      	b.n	8017ad6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ab4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d00c      	beq.n	8017ad6 <dhcp_arp_reply+0x46>
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	795b      	ldrb	r3, [r3, #5]
 8017ac0:	2b08      	cmp	r3, #8
 8017ac2:	d108      	bne.n	8017ad6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	681a      	ldr	r2, [r3, #0]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	69db      	ldr	r3, [r3, #28]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d102      	bne.n	8017ad6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017ad0:	6878      	ldr	r0, [r7, #4]
 8017ad2:	f000 f809 	bl	8017ae8 <dhcp_decline>
    }
  }
}
 8017ad6:	3710      	adds	r7, #16
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}
 8017adc:	08023934 	.word	0x08023934
 8017ae0:	08023a18 	.word	0x08023a18
 8017ae4:	08023994 	.word	0x08023994

08017ae8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017ae8:	b5b0      	push	{r4, r5, r7, lr}
 8017aea:	b08a      	sub	sp, #40	; 0x28
 8017aec:	af02      	add	r7, sp, #8
 8017aee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017af4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017af6:	210c      	movs	r1, #12
 8017af8:	69b8      	ldr	r0, [r7, #24]
 8017afa:	f000 fc6f 	bl	80183dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8017afe:	f107 030c 	add.w	r3, r7, #12
 8017b02:	2204      	movs	r2, #4
 8017b04:	69b9      	ldr	r1, [r7, #24]
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f001 f8f2 	bl	8018cf0 <dhcp_create_msg>
 8017b0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017b0e:	697b      	ldr	r3, [r7, #20]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d035      	beq.n	8017b80 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017b14:	697b      	ldr	r3, [r7, #20]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017b1a:	89b8      	ldrh	r0, [r7, #12]
 8017b1c:	693b      	ldr	r3, [r7, #16]
 8017b1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b22:	2304      	movs	r3, #4
 8017b24:	2232      	movs	r2, #50	; 0x32
 8017b26:	f000 fc73 	bl	8018410 <dhcp_option>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017b2e:	89bc      	ldrh	r4, [r7, #12]
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017b36:	69bb      	ldr	r3, [r7, #24]
 8017b38:	69db      	ldr	r3, [r3, #28]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f7 ff73 	bl	800fa26 <lwip_htonl>
 8017b40:	4603      	mov	r3, r0
 8017b42:	461a      	mov	r2, r3
 8017b44:	4629      	mov	r1, r5
 8017b46:	4620      	mov	r0, r4
 8017b48:	f000 fcee 	bl	8018528 <dhcp_option_long>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017b50:	89b8      	ldrh	r0, [r7, #12]
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	33f0      	adds	r3, #240	; 0xf0
 8017b56:	697a      	ldr	r2, [r7, #20]
 8017b58:	4619      	mov	r1, r3
 8017b5a:	f001 f99f 	bl	8018e9c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017b5e:	4b19      	ldr	r3, [pc, #100]	; (8017bc4 <dhcp_decline+0xdc>)
 8017b60:	6818      	ldr	r0, [r3, #0]
 8017b62:	4b19      	ldr	r3, [pc, #100]	; (8017bc8 <dhcp_decline+0xe0>)
 8017b64:	9301      	str	r3, [sp, #4]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	9300      	str	r3, [sp, #0]
 8017b6a:	2343      	movs	r3, #67	; 0x43
 8017b6c:	4a17      	ldr	r2, [pc, #92]	; (8017bcc <dhcp_decline+0xe4>)
 8017b6e:	6979      	ldr	r1, [r7, #20]
 8017b70:	f7ff f90e 	bl	8016d90 <udp_sendto_if_src>
 8017b74:	4603      	mov	r3, r0
 8017b76:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017b78:	6978      	ldr	r0, [r7, #20]
 8017b7a:	f7f9 f9d7 	bl	8010f2c <pbuf_free>
 8017b7e:	e001      	b.n	8017b84 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017b80:	23ff      	movs	r3, #255	; 0xff
 8017b82:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017b84:	69bb      	ldr	r3, [r7, #24]
 8017b86:	799b      	ldrb	r3, [r3, #6]
 8017b88:	2bff      	cmp	r3, #255	; 0xff
 8017b8a:	d005      	beq.n	8017b98 <dhcp_decline+0xb0>
    dhcp->tries++;
 8017b8c:	69bb      	ldr	r3, [r7, #24]
 8017b8e:	799b      	ldrb	r3, [r3, #6]
 8017b90:	3301      	adds	r3, #1
 8017b92:	b2da      	uxtb	r2, r3
 8017b94:	69bb      	ldr	r3, [r7, #24]
 8017b96:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017b98:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017b9e:	89fb      	ldrh	r3, [r7, #14]
 8017ba0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017ba4:	4a0a      	ldr	r2, [pc, #40]	; (8017bd0 <dhcp_decline+0xe8>)
 8017ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8017baa:	1152      	asrs	r2, r2, #5
 8017bac:	17db      	asrs	r3, r3, #31
 8017bae:	1ad3      	subs	r3, r2, r3
 8017bb0:	b29a      	uxth	r2, r3
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	3720      	adds	r7, #32
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	20001078 	.word	0x20001078
 8017bc8:	080249f0 	.word	0x080249f0
 8017bcc:	080249f4 	.word	0x080249f4
 8017bd0:	10624dd3 	.word	0x10624dd3

08017bd4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b08a      	sub	sp, #40	; 0x28
 8017bd8:	af02      	add	r7, sp, #8
 8017bda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017be2:	2300      	movs	r3, #0
 8017be4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017be6:	69bb      	ldr	r3, [r7, #24]
 8017be8:	2200      	movs	r2, #0
 8017bea:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017bec:	2106      	movs	r1, #6
 8017bee:	69b8      	ldr	r0, [r7, #24]
 8017bf0:	f000 fbf4 	bl	80183dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017bf4:	f107 0308 	add.w	r3, r7, #8
 8017bf8:	2201      	movs	r2, #1
 8017bfa:	69b9      	ldr	r1, [r7, #24]
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f001 f877 	bl	8018cf0 <dhcp_create_msg>
 8017c02:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d04b      	beq.n	8017ca2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	685b      	ldr	r3, [r3, #4]
 8017c0e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017c10:	8938      	ldrh	r0, [r7, #8]
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c18:	2302      	movs	r3, #2
 8017c1a:	2239      	movs	r2, #57	; 0x39
 8017c1c:	f000 fbf8 	bl	8018410 <dhcp_option>
 8017c20:	4603      	mov	r3, r0
 8017c22:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017c24:	8938      	ldrh	r0, [r7, #8]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c30:	461a      	mov	r2, r3
 8017c32:	f000 fc47 	bl	80184c4 <dhcp_option_short>
 8017c36:	4603      	mov	r3, r0
 8017c38:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017c3a:	8938      	ldrh	r0, [r7, #8]
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c42:	2303      	movs	r3, #3
 8017c44:	2237      	movs	r2, #55	; 0x37
 8017c46:	f000 fbe3 	bl	8018410 <dhcp_option>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c4e:	2300      	movs	r3, #0
 8017c50:	77fb      	strb	r3, [r7, #31]
 8017c52:	e00e      	b.n	8017c72 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017c54:	8938      	ldrh	r0, [r7, #8]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c5c:	7ffb      	ldrb	r3, [r7, #31]
 8017c5e:	4a29      	ldr	r2, [pc, #164]	; (8017d04 <dhcp_discover+0x130>)
 8017c60:	5cd3      	ldrb	r3, [r2, r3]
 8017c62:	461a      	mov	r2, r3
 8017c64:	f000 fc08 	bl	8018478 <dhcp_option_byte>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c6c:	7ffb      	ldrb	r3, [r7, #31]
 8017c6e:	3301      	adds	r3, #1
 8017c70:	77fb      	strb	r3, [r7, #31]
 8017c72:	7ffb      	ldrb	r3, [r7, #31]
 8017c74:	2b02      	cmp	r3, #2
 8017c76:	d9ed      	bls.n	8017c54 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017c78:	8938      	ldrh	r0, [r7, #8]
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	33f0      	adds	r3, #240	; 0xf0
 8017c7e:	693a      	ldr	r2, [r7, #16]
 8017c80:	4619      	mov	r1, r3
 8017c82:	f001 f90b 	bl	8018e9c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017c86:	4b20      	ldr	r3, [pc, #128]	; (8017d08 <dhcp_discover+0x134>)
 8017c88:	6818      	ldr	r0, [r3, #0]
 8017c8a:	4b20      	ldr	r3, [pc, #128]	; (8017d0c <dhcp_discover+0x138>)
 8017c8c:	9301      	str	r3, [sp, #4]
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	2343      	movs	r3, #67	; 0x43
 8017c94:	4a1e      	ldr	r2, [pc, #120]	; (8017d10 <dhcp_discover+0x13c>)
 8017c96:	6939      	ldr	r1, [r7, #16]
 8017c98:	f7ff f87a 	bl	8016d90 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017c9c:	6938      	ldr	r0, [r7, #16]
 8017c9e:	f7f9 f945 	bl	8010f2c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017ca2:	69bb      	ldr	r3, [r7, #24]
 8017ca4:	799b      	ldrb	r3, [r3, #6]
 8017ca6:	2bff      	cmp	r3, #255	; 0xff
 8017ca8:	d005      	beq.n	8017cb6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8017caa:	69bb      	ldr	r3, [r7, #24]
 8017cac:	799b      	ldrb	r3, [r3, #6]
 8017cae:	3301      	adds	r3, #1
 8017cb0:	b2da      	uxtb	r2, r3
 8017cb2:	69bb      	ldr	r3, [r7, #24]
 8017cb4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017cb6:	69bb      	ldr	r3, [r7, #24]
 8017cb8:	799b      	ldrb	r3, [r3, #6]
 8017cba:	2b05      	cmp	r3, #5
 8017cbc:	d80d      	bhi.n	8017cda <dhcp_discover+0x106>
 8017cbe:	69bb      	ldr	r3, [r7, #24]
 8017cc0:	799b      	ldrb	r3, [r3, #6]
 8017cc2:	461a      	mov	r2, r3
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	4093      	lsls	r3, r2
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	461a      	mov	r2, r3
 8017ccc:	0152      	lsls	r2, r2, #5
 8017cce:	1ad2      	subs	r2, r2, r3
 8017cd0:	0092      	lsls	r2, r2, #2
 8017cd2:	4413      	add	r3, r2
 8017cd4:	00db      	lsls	r3, r3, #3
 8017cd6:	b29b      	uxth	r3, r3
 8017cd8:	e001      	b.n	8017cde <dhcp_discover+0x10a>
 8017cda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017cde:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017ce0:	897b      	ldrh	r3, [r7, #10]
 8017ce2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017ce6:	4a0b      	ldr	r2, [pc, #44]	; (8017d14 <dhcp_discover+0x140>)
 8017ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8017cec:	1152      	asrs	r2, r2, #5
 8017cee:	17db      	asrs	r3, r3, #31
 8017cf0:	1ad3      	subs	r3, r2, r3
 8017cf2:	b29a      	uxth	r2, r3
 8017cf4:	69bb      	ldr	r3, [r7, #24]
 8017cf6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3720      	adds	r7, #32
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}
 8017d04:	20000080 	.word	0x20000080
 8017d08:	20001078 	.word	0x20001078
 8017d0c:	080249f0 	.word	0x080249f0
 8017d10:	080249f4 	.word	0x080249f4
 8017d14:	10624dd3 	.word	0x10624dd3

08017d18 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b088      	sub	sp, #32
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d107      	bne.n	8017d36 <dhcp_bind+0x1e>
 8017d26:	4b64      	ldr	r3, [pc, #400]	; (8017eb8 <dhcp_bind+0x1a0>)
 8017d28:	f240 4215 	movw	r2, #1045	; 0x415
 8017d2c:	4963      	ldr	r1, [pc, #396]	; (8017ebc <dhcp_bind+0x1a4>)
 8017d2e:	4864      	ldr	r0, [pc, #400]	; (8017ec0 <dhcp_bind+0x1a8>)
 8017d30:	f004 f976 	bl	801c020 <iprintf>
 8017d34:	e0bc      	b.n	8017eb0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d3a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017d3c:	69bb      	ldr	r3, [r7, #24]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d107      	bne.n	8017d52 <dhcp_bind+0x3a>
 8017d42:	4b5d      	ldr	r3, [pc, #372]	; (8017eb8 <dhcp_bind+0x1a0>)
 8017d44:	f240 4217 	movw	r2, #1047	; 0x417
 8017d48:	495e      	ldr	r1, [pc, #376]	; (8017ec4 <dhcp_bind+0x1ac>)
 8017d4a:	485d      	ldr	r0, [pc, #372]	; (8017ec0 <dhcp_bind+0x1a8>)
 8017d4c:	f004 f968 	bl	801c020 <iprintf>
 8017d50:	e0ae      	b.n	8017eb0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017d52:	69bb      	ldr	r3, [r7, #24]
 8017d54:	2200      	movs	r2, #0
 8017d56:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017d58:	69bb      	ldr	r3, [r7, #24]
 8017d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d60:	d019      	beq.n	8017d96 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017d62:	69bb      	ldr	r3, [r7, #24]
 8017d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d66:	331e      	adds	r3, #30
 8017d68:	4a57      	ldr	r2, [pc, #348]	; (8017ec8 <dhcp_bind+0x1b0>)
 8017d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d6e:	095b      	lsrs	r3, r3, #5
 8017d70:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017d72:	69fb      	ldr	r3, [r7, #28]
 8017d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d78:	d302      	bcc.n	8017d80 <dhcp_bind+0x68>
      timeout = 0xffff;
 8017d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d7e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	b29a      	uxth	r2, r3
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017d88:	69bb      	ldr	r3, [r7, #24]
 8017d8a:	8a9b      	ldrh	r3, [r3, #20]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d102      	bne.n	8017d96 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017d90:	69bb      	ldr	r3, [r7, #24]
 8017d92:	2201      	movs	r2, #1
 8017d94:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017d96:	69bb      	ldr	r3, [r7, #24]
 8017d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d9e:	d01d      	beq.n	8017ddc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017da0:	69bb      	ldr	r3, [r7, #24]
 8017da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da4:	331e      	adds	r3, #30
 8017da6:	4a48      	ldr	r2, [pc, #288]	; (8017ec8 <dhcp_bind+0x1b0>)
 8017da8:	fba2 2303 	umull	r2, r3, r2, r3
 8017dac:	095b      	lsrs	r3, r3, #5
 8017dae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017db6:	d302      	bcc.n	8017dbe <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dbc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	b29a      	uxth	r2, r3
 8017dc2:	69bb      	ldr	r3, [r7, #24]
 8017dc4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	895b      	ldrh	r3, [r3, #10]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d102      	bne.n	8017dd4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017dce:	69bb      	ldr	r3, [r7, #24]
 8017dd0:	2201      	movs	r2, #1
 8017dd2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017dd4:	69bb      	ldr	r3, [r7, #24]
 8017dd6:	895a      	ldrh	r2, [r3, #10]
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017ddc:	69bb      	ldr	r3, [r7, #24]
 8017dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017de4:	d01d      	beq.n	8017e22 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dea:	331e      	adds	r3, #30
 8017dec:	4a36      	ldr	r2, [pc, #216]	; (8017ec8 <dhcp_bind+0x1b0>)
 8017dee:	fba2 2303 	umull	r2, r3, r2, r3
 8017df2:	095b      	lsrs	r3, r3, #5
 8017df4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017df6:	69fb      	ldr	r3, [r7, #28]
 8017df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017dfc:	d302      	bcc.n	8017e04 <dhcp_bind+0xec>
      timeout = 0xffff;
 8017dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e02:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017e04:	69fb      	ldr	r3, [r7, #28]
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	69bb      	ldr	r3, [r7, #24]
 8017e0a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017e0c:	69bb      	ldr	r3, [r7, #24]
 8017e0e:	899b      	ldrh	r3, [r3, #12]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017e14:	69bb      	ldr	r3, [r7, #24]
 8017e16:	2201      	movs	r2, #1
 8017e18:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	899a      	ldrh	r2, [r3, #12]
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	895a      	ldrh	r2, [r3, #10]
 8017e26:	69bb      	ldr	r3, [r7, #24]
 8017e28:	899b      	ldrh	r3, [r3, #12]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d306      	bcc.n	8017e3c <dhcp_bind+0x124>
 8017e2e:	69bb      	ldr	r3, [r7, #24]
 8017e30:	899b      	ldrh	r3, [r3, #12]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d002      	beq.n	8017e3c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	2200      	movs	r2, #0
 8017e3a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017e3c:	69bb      	ldr	r3, [r7, #24]
 8017e3e:	79db      	ldrb	r3, [r3, #7]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d003      	beq.n	8017e4c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	6a1b      	ldr	r3, [r3, #32]
 8017e48:	613b      	str	r3, [r7, #16]
 8017e4a:	e014      	b.n	8017e76 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017e4c:	69bb      	ldr	r3, [r7, #24]
 8017e4e:	331c      	adds	r3, #28
 8017e50:	781b      	ldrb	r3, [r3, #0]
 8017e52:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	db02      	blt.n	8017e62 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017e5c:	23ff      	movs	r3, #255	; 0xff
 8017e5e:	613b      	str	r3, [r7, #16]
 8017e60:	e009      	b.n	8017e76 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017e62:	7dfb      	ldrb	r3, [r7, #23]
 8017e64:	2bbf      	cmp	r3, #191	; 0xbf
 8017e66:	d903      	bls.n	8017e70 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017e68:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017e6c:	613b      	str	r3, [r7, #16]
 8017e6e:	e002      	b.n	8017e76 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e74:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e7a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d108      	bne.n	8017e94 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	69da      	ldr	r2, [r3, #28]
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	4013      	ands	r3, r2
 8017e8a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017e92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017e94:	210a      	movs	r1, #10
 8017e96:	69b8      	ldr	r0, [r7, #24]
 8017e98:	f000 faa0 	bl	80183dc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017e9c:	69bb      	ldr	r3, [r7, #24]
 8017e9e:	f103 011c 	add.w	r1, r3, #28
 8017ea2:	f107 030c 	add.w	r3, r7, #12
 8017ea6:	f107 0210 	add.w	r2, r7, #16
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f7f8 fbea 	bl	8010684 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017eb0:	3720      	adds	r7, #32
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	08023934 	.word	0x08023934
 8017ebc:	08023a94 	.word	0x08023a94
 8017ec0:	08023994 	.word	0x08023994
 8017ec4:	08023ab0 	.word	0x08023ab0
 8017ec8:	88888889 	.word	0x88888889

08017ecc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b08a      	sub	sp, #40	; 0x28
 8017ed0:	af02      	add	r7, sp, #8
 8017ed2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ed8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017eda:	2105      	movs	r1, #5
 8017edc:	69b8      	ldr	r0, [r7, #24]
 8017ede:	f000 fa7d 	bl	80183dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017ee2:	f107 030c 	add.w	r3, r7, #12
 8017ee6:	2203      	movs	r2, #3
 8017ee8:	69b9      	ldr	r1, [r7, #24]
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f000 ff00 	bl	8018cf0 <dhcp_create_msg>
 8017ef0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d04e      	beq.n	8017f96 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	685b      	ldr	r3, [r3, #4]
 8017efc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017efe:	89b8      	ldrh	r0, [r7, #12]
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f06:	2302      	movs	r3, #2
 8017f08:	2239      	movs	r2, #57	; 0x39
 8017f0a:	f000 fa81 	bl	8018410 <dhcp_option>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017f12:	89b8      	ldrh	r0, [r7, #12]
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f1e:	461a      	mov	r2, r3
 8017f20:	f000 fad0 	bl	80184c4 <dhcp_option_short>
 8017f24:	4603      	mov	r3, r0
 8017f26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017f28:	89b8      	ldrh	r0, [r7, #12]
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f30:	2303      	movs	r3, #3
 8017f32:	2237      	movs	r2, #55	; 0x37
 8017f34:	f000 fa6c 	bl	8018410 <dhcp_option>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	77bb      	strb	r3, [r7, #30]
 8017f40:	e00e      	b.n	8017f60 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017f42:	89b8      	ldrh	r0, [r7, #12]
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017f4a:	7fbb      	ldrb	r3, [r7, #30]
 8017f4c:	4a2a      	ldr	r2, [pc, #168]	; (8017ff8 <dhcp_renew+0x12c>)
 8017f4e:	5cd3      	ldrb	r3, [r2, r3]
 8017f50:	461a      	mov	r2, r3
 8017f52:	f000 fa91 	bl	8018478 <dhcp_option_byte>
 8017f56:	4603      	mov	r3, r0
 8017f58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017f5a:	7fbb      	ldrb	r3, [r7, #30]
 8017f5c:	3301      	adds	r3, #1
 8017f5e:	77bb      	strb	r3, [r7, #30]
 8017f60:	7fbb      	ldrb	r3, [r7, #30]
 8017f62:	2b02      	cmp	r3, #2
 8017f64:	d9ed      	bls.n	8017f42 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017f66:	89b8      	ldrh	r0, [r7, #12]
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	33f0      	adds	r3, #240	; 0xf0
 8017f6c:	697a      	ldr	r2, [r7, #20]
 8017f6e:	4619      	mov	r1, r3
 8017f70:	f000 ff94 	bl	8018e9c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017f74:	4b21      	ldr	r3, [pc, #132]	; (8017ffc <dhcp_renew+0x130>)
 8017f76:	6818      	ldr	r0, [r3, #0]
 8017f78:	69bb      	ldr	r3, [r7, #24]
 8017f7a:	f103 0218 	add.w	r2, r3, #24
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	9300      	str	r3, [sp, #0]
 8017f82:	2343      	movs	r3, #67	; 0x43
 8017f84:	6979      	ldr	r1, [r7, #20]
 8017f86:	f7fe fe8f 	bl	8016ca8 <udp_sendto_if>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017f8e:	6978      	ldr	r0, [r7, #20]
 8017f90:	f7f8 ffcc 	bl	8010f2c <pbuf_free>
 8017f94:	e001      	b.n	8017f9a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017f96:	23ff      	movs	r3, #255	; 0xff
 8017f98:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017f9a:	69bb      	ldr	r3, [r7, #24]
 8017f9c:	799b      	ldrb	r3, [r3, #6]
 8017f9e:	2bff      	cmp	r3, #255	; 0xff
 8017fa0:	d005      	beq.n	8017fae <dhcp_renew+0xe2>
    dhcp->tries++;
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	799b      	ldrb	r3, [r3, #6]
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	b2da      	uxtb	r2, r3
 8017faa:	69bb      	ldr	r3, [r7, #24]
 8017fac:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8017fae:	69bb      	ldr	r3, [r7, #24]
 8017fb0:	799b      	ldrb	r3, [r3, #6]
 8017fb2:	2b09      	cmp	r3, #9
 8017fb4:	d80a      	bhi.n	8017fcc <dhcp_renew+0x100>
 8017fb6:	69bb      	ldr	r3, [r7, #24]
 8017fb8:	799b      	ldrb	r3, [r3, #6]
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	0152      	lsls	r2, r2, #5
 8017fc0:	1ad2      	subs	r2, r2, r3
 8017fc2:	0092      	lsls	r2, r2, #2
 8017fc4:	4413      	add	r3, r2
 8017fc6:	011b      	lsls	r3, r3, #4
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	e001      	b.n	8017fd0 <dhcp_renew+0x104>
 8017fcc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017fd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017fd2:	89fb      	ldrh	r3, [r7, #14]
 8017fd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017fd8:	4a09      	ldr	r2, [pc, #36]	; (8018000 <dhcp_renew+0x134>)
 8017fda:	fb82 1203 	smull	r1, r2, r2, r3
 8017fde:	1152      	asrs	r2, r2, #5
 8017fe0:	17db      	asrs	r3, r3, #31
 8017fe2:	1ad3      	subs	r3, r2, r3
 8017fe4:	b29a      	uxth	r2, r3
 8017fe6:	69bb      	ldr	r3, [r7, #24]
 8017fe8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017fea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3720      	adds	r7, #32
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	20000080 	.word	0x20000080
 8017ffc:	20001078 	.word	0x20001078
 8018000:	10624dd3 	.word	0x10624dd3

08018004 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b08a      	sub	sp, #40	; 0x28
 8018008:	af02      	add	r7, sp, #8
 801800a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018010:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8018012:	2104      	movs	r1, #4
 8018014:	69b8      	ldr	r0, [r7, #24]
 8018016:	f000 f9e1 	bl	80183dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801801a:	f107 030c 	add.w	r3, r7, #12
 801801e:	2203      	movs	r2, #3
 8018020:	69b9      	ldr	r1, [r7, #24]
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 fe64 	bl	8018cf0 <dhcp_create_msg>
 8018028:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d04c      	beq.n	80180ca <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	685b      	ldr	r3, [r3, #4]
 8018034:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018036:	89b8      	ldrh	r0, [r7, #12]
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801803e:	2302      	movs	r3, #2
 8018040:	2239      	movs	r2, #57	; 0x39
 8018042:	f000 f9e5 	bl	8018410 <dhcp_option>
 8018046:	4603      	mov	r3, r0
 8018048:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801804a:	89b8      	ldrh	r0, [r7, #12]
 801804c:	693b      	ldr	r3, [r7, #16]
 801804e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018056:	461a      	mov	r2, r3
 8018058:	f000 fa34 	bl	80184c4 <dhcp_option_short>
 801805c:	4603      	mov	r3, r0
 801805e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018060:	89b8      	ldrh	r0, [r7, #12]
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018068:	2303      	movs	r3, #3
 801806a:	2237      	movs	r2, #55	; 0x37
 801806c:	f000 f9d0 	bl	8018410 <dhcp_option>
 8018070:	4603      	mov	r3, r0
 8018072:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018074:	2300      	movs	r3, #0
 8018076:	77bb      	strb	r3, [r7, #30]
 8018078:	e00e      	b.n	8018098 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801807a:	89b8      	ldrh	r0, [r7, #12]
 801807c:	693b      	ldr	r3, [r7, #16]
 801807e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018082:	7fbb      	ldrb	r3, [r7, #30]
 8018084:	4a29      	ldr	r2, [pc, #164]	; (801812c <dhcp_rebind+0x128>)
 8018086:	5cd3      	ldrb	r3, [r2, r3]
 8018088:	461a      	mov	r2, r3
 801808a:	f000 f9f5 	bl	8018478 <dhcp_option_byte>
 801808e:	4603      	mov	r3, r0
 8018090:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018092:	7fbb      	ldrb	r3, [r7, #30]
 8018094:	3301      	adds	r3, #1
 8018096:	77bb      	strb	r3, [r7, #30]
 8018098:	7fbb      	ldrb	r3, [r7, #30]
 801809a:	2b02      	cmp	r3, #2
 801809c:	d9ed      	bls.n	801807a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801809e:	89b8      	ldrh	r0, [r7, #12]
 80180a0:	693b      	ldr	r3, [r7, #16]
 80180a2:	33f0      	adds	r3, #240	; 0xf0
 80180a4:	697a      	ldr	r2, [r7, #20]
 80180a6:	4619      	mov	r1, r3
 80180a8:	f000 fef8 	bl	8018e9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80180ac:	4b20      	ldr	r3, [pc, #128]	; (8018130 <dhcp_rebind+0x12c>)
 80180ae:	6818      	ldr	r0, [r3, #0]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	2343      	movs	r3, #67	; 0x43
 80180b6:	4a1f      	ldr	r2, [pc, #124]	; (8018134 <dhcp_rebind+0x130>)
 80180b8:	6979      	ldr	r1, [r7, #20]
 80180ba:	f7fe fdf5 	bl	8016ca8 <udp_sendto_if>
 80180be:	4603      	mov	r3, r0
 80180c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80180c2:	6978      	ldr	r0, [r7, #20]
 80180c4:	f7f8 ff32 	bl	8010f2c <pbuf_free>
 80180c8:	e001      	b.n	80180ce <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80180ca:	23ff      	movs	r3, #255	; 0xff
 80180cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80180ce:	69bb      	ldr	r3, [r7, #24]
 80180d0:	799b      	ldrb	r3, [r3, #6]
 80180d2:	2bff      	cmp	r3, #255	; 0xff
 80180d4:	d005      	beq.n	80180e2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80180d6:	69bb      	ldr	r3, [r7, #24]
 80180d8:	799b      	ldrb	r3, [r3, #6]
 80180da:	3301      	adds	r3, #1
 80180dc:	b2da      	uxtb	r2, r3
 80180de:	69bb      	ldr	r3, [r7, #24]
 80180e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80180e2:	69bb      	ldr	r3, [r7, #24]
 80180e4:	799b      	ldrb	r3, [r3, #6]
 80180e6:	2b09      	cmp	r3, #9
 80180e8:	d80a      	bhi.n	8018100 <dhcp_rebind+0xfc>
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	799b      	ldrb	r3, [r3, #6]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	461a      	mov	r2, r3
 80180f2:	0152      	lsls	r2, r2, #5
 80180f4:	1ad2      	subs	r2, r2, r3
 80180f6:	0092      	lsls	r2, r2, #2
 80180f8:	4413      	add	r3, r2
 80180fa:	00db      	lsls	r3, r3, #3
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	e001      	b.n	8018104 <dhcp_rebind+0x100>
 8018100:	f242 7310 	movw	r3, #10000	; 0x2710
 8018104:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018106:	89fb      	ldrh	r3, [r7, #14]
 8018108:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801810c:	4a0a      	ldr	r2, [pc, #40]	; (8018138 <dhcp_rebind+0x134>)
 801810e:	fb82 1203 	smull	r1, r2, r2, r3
 8018112:	1152      	asrs	r2, r2, #5
 8018114:	17db      	asrs	r3, r3, #31
 8018116:	1ad3      	subs	r3, r2, r3
 8018118:	b29a      	uxth	r2, r3
 801811a:	69bb      	ldr	r3, [r7, #24]
 801811c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801811e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3720      	adds	r7, #32
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	20000080 	.word	0x20000080
 8018130:	20001078 	.word	0x20001078
 8018134:	080249f4 	.word	0x080249f4
 8018138:	10624dd3 	.word	0x10624dd3

0801813c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801813c:	b5b0      	push	{r4, r5, r7, lr}
 801813e:	b08a      	sub	sp, #40	; 0x28
 8018140:	af02      	add	r7, sp, #8
 8018142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018148:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801814a:	2103      	movs	r1, #3
 801814c:	69b8      	ldr	r0, [r7, #24]
 801814e:	f000 f945 	bl	80183dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018152:	f107 030c 	add.w	r3, r7, #12
 8018156:	2203      	movs	r2, #3
 8018158:	69b9      	ldr	r1, [r7, #24]
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f000 fdc8 	bl	8018cf0 <dhcp_create_msg>
 8018160:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d066      	beq.n	8018236 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801816e:	89b8      	ldrh	r0, [r7, #12]
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018176:	2302      	movs	r3, #2
 8018178:	2239      	movs	r2, #57	; 0x39
 801817a:	f000 f949 	bl	8018410 <dhcp_option>
 801817e:	4603      	mov	r3, r0
 8018180:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8018182:	89b8      	ldrh	r0, [r7, #12]
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	33f0      	adds	r3, #240	; 0xf0
 8018188:	f44f 7210 	mov.w	r2, #576	; 0x240
 801818c:	4619      	mov	r1, r3
 801818e:	f000 f999 	bl	80184c4 <dhcp_option_short>
 8018192:	4603      	mov	r3, r0
 8018194:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018196:	89b8      	ldrh	r0, [r7, #12]
 8018198:	693b      	ldr	r3, [r7, #16]
 801819a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801819e:	2304      	movs	r3, #4
 80181a0:	2232      	movs	r2, #50	; 0x32
 80181a2:	f000 f935 	bl	8018410 <dhcp_option>
 80181a6:	4603      	mov	r3, r0
 80181a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80181aa:	89bc      	ldrh	r4, [r7, #12]
 80181ac:	693b      	ldr	r3, [r7, #16]
 80181ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	69db      	ldr	r3, [r3, #28]
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7f7 fc35 	bl	800fa26 <lwip_htonl>
 80181bc:	4603      	mov	r3, r0
 80181be:	461a      	mov	r2, r3
 80181c0:	4629      	mov	r1, r5
 80181c2:	4620      	mov	r0, r4
 80181c4:	f000 f9b0 	bl	8018528 <dhcp_option_long>
 80181c8:	4603      	mov	r3, r0
 80181ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80181cc:	89b8      	ldrh	r0, [r7, #12]
 80181ce:	693b      	ldr	r3, [r7, #16]
 80181d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80181d4:	2303      	movs	r3, #3
 80181d6:	2237      	movs	r2, #55	; 0x37
 80181d8:	f000 f91a 	bl	8018410 <dhcp_option>
 80181dc:	4603      	mov	r3, r0
 80181de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80181e0:	2300      	movs	r3, #0
 80181e2:	77bb      	strb	r3, [r7, #30]
 80181e4:	e00e      	b.n	8018204 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80181e6:	89b8      	ldrh	r0, [r7, #12]
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80181ee:	7fbb      	ldrb	r3, [r7, #30]
 80181f0:	4a29      	ldr	r2, [pc, #164]	; (8018298 <dhcp_reboot+0x15c>)
 80181f2:	5cd3      	ldrb	r3, [r2, r3]
 80181f4:	461a      	mov	r2, r3
 80181f6:	f000 f93f 	bl	8018478 <dhcp_option_byte>
 80181fa:	4603      	mov	r3, r0
 80181fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80181fe:	7fbb      	ldrb	r3, [r7, #30]
 8018200:	3301      	adds	r3, #1
 8018202:	77bb      	strb	r3, [r7, #30]
 8018204:	7fbb      	ldrb	r3, [r7, #30]
 8018206:	2b02      	cmp	r3, #2
 8018208:	d9ed      	bls.n	80181e6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801820a:	89b8      	ldrh	r0, [r7, #12]
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	33f0      	adds	r3, #240	; 0xf0
 8018210:	697a      	ldr	r2, [r7, #20]
 8018212:	4619      	mov	r1, r3
 8018214:	f000 fe42 	bl	8018e9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018218:	4b20      	ldr	r3, [pc, #128]	; (801829c <dhcp_reboot+0x160>)
 801821a:	6818      	ldr	r0, [r3, #0]
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	9300      	str	r3, [sp, #0]
 8018220:	2343      	movs	r3, #67	; 0x43
 8018222:	4a1f      	ldr	r2, [pc, #124]	; (80182a0 <dhcp_reboot+0x164>)
 8018224:	6979      	ldr	r1, [r7, #20]
 8018226:	f7fe fd3f 	bl	8016ca8 <udp_sendto_if>
 801822a:	4603      	mov	r3, r0
 801822c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801822e:	6978      	ldr	r0, [r7, #20]
 8018230:	f7f8 fe7c 	bl	8010f2c <pbuf_free>
 8018234:	e001      	b.n	801823a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018236:	23ff      	movs	r3, #255	; 0xff
 8018238:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	799b      	ldrb	r3, [r3, #6]
 801823e:	2bff      	cmp	r3, #255	; 0xff
 8018240:	d005      	beq.n	801824e <dhcp_reboot+0x112>
    dhcp->tries++;
 8018242:	69bb      	ldr	r3, [r7, #24]
 8018244:	799b      	ldrb	r3, [r3, #6]
 8018246:	3301      	adds	r3, #1
 8018248:	b2da      	uxtb	r2, r3
 801824a:	69bb      	ldr	r3, [r7, #24]
 801824c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	799b      	ldrb	r3, [r3, #6]
 8018252:	2b09      	cmp	r3, #9
 8018254:	d80a      	bhi.n	801826c <dhcp_reboot+0x130>
 8018256:	69bb      	ldr	r3, [r7, #24]
 8018258:	799b      	ldrb	r3, [r3, #6]
 801825a:	b29b      	uxth	r3, r3
 801825c:	461a      	mov	r2, r3
 801825e:	0152      	lsls	r2, r2, #5
 8018260:	1ad2      	subs	r2, r2, r3
 8018262:	0092      	lsls	r2, r2, #2
 8018264:	4413      	add	r3, r2
 8018266:	00db      	lsls	r3, r3, #3
 8018268:	b29b      	uxth	r3, r3
 801826a:	e001      	b.n	8018270 <dhcp_reboot+0x134>
 801826c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018270:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018272:	89fb      	ldrh	r3, [r7, #14]
 8018274:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018278:	4a0a      	ldr	r2, [pc, #40]	; (80182a4 <dhcp_reboot+0x168>)
 801827a:	fb82 1203 	smull	r1, r2, r2, r3
 801827e:	1152      	asrs	r2, r2, #5
 8018280:	17db      	asrs	r3, r3, #31
 8018282:	1ad3      	subs	r3, r2, r3
 8018284:	b29a      	uxth	r2, r3
 8018286:	69bb      	ldr	r3, [r7, #24]
 8018288:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801828a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801828e:	4618      	mov	r0, r3
 8018290:	3720      	adds	r7, #32
 8018292:	46bd      	mov	sp, r7
 8018294:	bdb0      	pop	{r4, r5, r7, pc}
 8018296:	bf00      	nop
 8018298:	20000080 	.word	0x20000080
 801829c:	20001078 	.word	0x20001078
 80182a0:	080249f4 	.word	0x080249f4
 80182a4:	10624dd3 	.word	0x10624dd3

080182a8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80182a8:	b5b0      	push	{r4, r5, r7, lr}
 80182aa:	b08a      	sub	sp, #40	; 0x28
 80182ac:	af02      	add	r7, sp, #8
 80182ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f000 8084 	beq.w	80183c6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80182be:	69fb      	ldr	r3, [r7, #28]
 80182c0:	795b      	ldrb	r3, [r3, #5]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	f000 8081 	beq.w	80183ca <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	699b      	ldr	r3, [r3, #24]
 80182cc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	2200      	movs	r2, #0
 80182d2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	2200      	movs	r2, #0
 80182d8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80182da:	69fb      	ldr	r3, [r7, #28]
 80182dc:	2200      	movs	r2, #0
 80182de:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80182e0:	69fb      	ldr	r3, [r7, #28]
 80182e2:	2200      	movs	r2, #0
 80182e4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80182e6:	69fb      	ldr	r3, [r7, #28]
 80182e8:	2200      	movs	r2, #0
 80182ea:	631a      	str	r2, [r3, #48]	; 0x30
 80182ec:	69fb      	ldr	r3, [r7, #28]
 80182ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80182f0:	69fb      	ldr	r3, [r7, #28]
 80182f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f8:	69fb      	ldr	r3, [r7, #28]
 80182fa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80182fc:	69fb      	ldr	r3, [r7, #28]
 80182fe:	2200      	movs	r2, #0
 8018300:	829a      	strh	r2, [r3, #20]
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	8a9a      	ldrh	r2, [r3, #20]
 8018306:	69fb      	ldr	r3, [r7, #28]
 8018308:	825a      	strh	r2, [r3, #18]
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	8a5a      	ldrh	r2, [r3, #18]
 801830e:	69fb      	ldr	r3, [r7, #28]
 8018310:	821a      	strh	r2, [r3, #16]
 8018312:	69fb      	ldr	r3, [r7, #28]
 8018314:	8a1a      	ldrh	r2, [r3, #16]
 8018316:	69fb      	ldr	r3, [r7, #28]
 8018318:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f000 fdec 	bl	8018ef8 <dhcp_supplied_address>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	d03b      	beq.n	801839e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8018326:	f107 030e 	add.w	r3, r7, #14
 801832a:	2207      	movs	r2, #7
 801832c:	69f9      	ldr	r1, [r7, #28]
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f000 fcde 	bl	8018cf0 <dhcp_create_msg>
 8018334:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d030      	beq.n	801839e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018342:	89f8      	ldrh	r0, [r7, #14]
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801834a:	2304      	movs	r3, #4
 801834c:	2236      	movs	r2, #54	; 0x36
 801834e:	f000 f85f 	bl	8018410 <dhcp_option>
 8018352:	4603      	mov	r3, r0
 8018354:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8018356:	89fc      	ldrh	r4, [r7, #14]
 8018358:	697b      	ldr	r3, [r7, #20]
 801835a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	4618      	mov	r0, r3
 8018362:	f7f7 fb60 	bl	800fa26 <lwip_htonl>
 8018366:	4603      	mov	r3, r0
 8018368:	461a      	mov	r2, r3
 801836a:	4629      	mov	r1, r5
 801836c:	4620      	mov	r0, r4
 801836e:	f000 f8db 	bl	8018528 <dhcp_option_long>
 8018372:	4603      	mov	r3, r0
 8018374:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018376:	89f8      	ldrh	r0, [r7, #14]
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	33f0      	adds	r3, #240	; 0xf0
 801837c:	69ba      	ldr	r2, [r7, #24]
 801837e:	4619      	mov	r1, r3
 8018380:	f000 fd8c 	bl	8018e9c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018384:	4b13      	ldr	r3, [pc, #76]	; (80183d4 <dhcp_release_and_stop+0x12c>)
 8018386:	6818      	ldr	r0, [r3, #0]
 8018388:	f107 0210 	add.w	r2, r7, #16
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	9300      	str	r3, [sp, #0]
 8018390:	2343      	movs	r3, #67	; 0x43
 8018392:	69b9      	ldr	r1, [r7, #24]
 8018394:	f7fe fc88 	bl	8016ca8 <udp_sendto_if>
      pbuf_free(p_out);
 8018398:	69b8      	ldr	r0, [r7, #24]
 801839a:	f7f8 fdc7 	bl	8010f2c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801839e:	4b0e      	ldr	r3, [pc, #56]	; (80183d8 <dhcp_release_and_stop+0x130>)
 80183a0:	4a0d      	ldr	r2, [pc, #52]	; (80183d8 <dhcp_release_and_stop+0x130>)
 80183a2:	490d      	ldr	r1, [pc, #52]	; (80183d8 <dhcp_release_and_stop+0x130>)
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f7f8 f96d 	bl	8010684 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80183aa:	2100      	movs	r1, #0
 80183ac:	69f8      	ldr	r0, [r7, #28]
 80183ae:	f000 f815 	bl	80183dc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80183b2:	69fb      	ldr	r3, [r7, #28]
 80183b4:	791b      	ldrb	r3, [r3, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d008      	beq.n	80183cc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80183ba:	f7fe ffc1 	bl	8017340 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80183be:	69fb      	ldr	r3, [r7, #28]
 80183c0:	2200      	movs	r2, #0
 80183c2:	711a      	strb	r2, [r3, #4]
 80183c4:	e002      	b.n	80183cc <dhcp_release_and_stop+0x124>
    return;
 80183c6:	bf00      	nop
 80183c8:	e000      	b.n	80183cc <dhcp_release_and_stop+0x124>
    return;
 80183ca:	bf00      	nop
  }
}
 80183cc:	3720      	adds	r7, #32
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bdb0      	pop	{r4, r5, r7, pc}
 80183d2:	bf00      	nop
 80183d4:	20001078 	.word	0x20001078
 80183d8:	080249f0 	.word	0x080249f0

080183dc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80183dc:	b480      	push	{r7}
 80183de:	b083      	sub	sp, #12
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
 80183e4:	460b      	mov	r3, r1
 80183e6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	795b      	ldrb	r3, [r3, #5]
 80183ec:	78fa      	ldrb	r2, [r7, #3]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d008      	beq.n	8018404 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	78fa      	ldrb	r2, [r7, #3]
 80183f6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2200      	movs	r2, #0
 80183fc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2200      	movs	r2, #0
 8018402:	811a      	strh	r2, [r3, #8]
  }
}
 8018404:	bf00      	nop
 8018406:	370c      	adds	r7, #12
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr

08018410 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b082      	sub	sp, #8
 8018414:	af00      	add	r7, sp, #0
 8018416:	6039      	str	r1, [r7, #0]
 8018418:	4611      	mov	r1, r2
 801841a:	461a      	mov	r2, r3
 801841c:	4603      	mov	r3, r0
 801841e:	80fb      	strh	r3, [r7, #6]
 8018420:	460b      	mov	r3, r1
 8018422:	717b      	strb	r3, [r7, #5]
 8018424:	4613      	mov	r3, r2
 8018426:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018428:	88fa      	ldrh	r2, [r7, #6]
 801842a:	793b      	ldrb	r3, [r7, #4]
 801842c:	4413      	add	r3, r2
 801842e:	3302      	adds	r3, #2
 8018430:	2b44      	cmp	r3, #68	; 0x44
 8018432:	d906      	bls.n	8018442 <dhcp_option+0x32>
 8018434:	4b0d      	ldr	r3, [pc, #52]	; (801846c <dhcp_option+0x5c>)
 8018436:	f240 529a 	movw	r2, #1434	; 0x59a
 801843a:	490d      	ldr	r1, [pc, #52]	; (8018470 <dhcp_option+0x60>)
 801843c:	480d      	ldr	r0, [pc, #52]	; (8018474 <dhcp_option+0x64>)
 801843e:	f003 fdef 	bl	801c020 <iprintf>
  options[options_out_len++] = option_type;
 8018442:	88fb      	ldrh	r3, [r7, #6]
 8018444:	1c5a      	adds	r2, r3, #1
 8018446:	80fa      	strh	r2, [r7, #6]
 8018448:	461a      	mov	r2, r3
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	4413      	add	r3, r2
 801844e:	797a      	ldrb	r2, [r7, #5]
 8018450:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8018452:	88fb      	ldrh	r3, [r7, #6]
 8018454:	1c5a      	adds	r2, r3, #1
 8018456:	80fa      	strh	r2, [r7, #6]
 8018458:	461a      	mov	r2, r3
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	4413      	add	r3, r2
 801845e:	793a      	ldrb	r2, [r7, #4]
 8018460:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018462:	88fb      	ldrh	r3, [r7, #6]
}
 8018464:	4618      	mov	r0, r3
 8018466:	3708      	adds	r7, #8
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}
 801846c:	08023934 	.word	0x08023934
 8018470:	08023ac8 	.word	0x08023ac8
 8018474:	08023994 	.word	0x08023994

08018478 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	4603      	mov	r3, r0
 8018480:	6039      	str	r1, [r7, #0]
 8018482:	80fb      	strh	r3, [r7, #6]
 8018484:	4613      	mov	r3, r2
 8018486:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018488:	88fb      	ldrh	r3, [r7, #6]
 801848a:	2b43      	cmp	r3, #67	; 0x43
 801848c:	d906      	bls.n	801849c <dhcp_option_byte+0x24>
 801848e:	4b0a      	ldr	r3, [pc, #40]	; (80184b8 <dhcp_option_byte+0x40>)
 8018490:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8018494:	4909      	ldr	r1, [pc, #36]	; (80184bc <dhcp_option_byte+0x44>)
 8018496:	480a      	ldr	r0, [pc, #40]	; (80184c0 <dhcp_option_byte+0x48>)
 8018498:	f003 fdc2 	bl	801c020 <iprintf>
  options[options_out_len++] = value;
 801849c:	88fb      	ldrh	r3, [r7, #6]
 801849e:	1c5a      	adds	r2, r3, #1
 80184a0:	80fa      	strh	r2, [r7, #6]
 80184a2:	461a      	mov	r2, r3
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	4413      	add	r3, r2
 80184a8:	797a      	ldrb	r2, [r7, #5]
 80184aa:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80184ac:	88fb      	ldrh	r3, [r7, #6]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3708      	adds	r7, #8
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	08023934 	.word	0x08023934
 80184bc:	08023b0c 	.word	0x08023b0c
 80184c0:	08023994 	.word	0x08023994

080184c4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	4603      	mov	r3, r0
 80184cc:	6039      	str	r1, [r7, #0]
 80184ce:	80fb      	strh	r3, [r7, #6]
 80184d0:	4613      	mov	r3, r2
 80184d2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80184d4:	88fb      	ldrh	r3, [r7, #6]
 80184d6:	3302      	adds	r3, #2
 80184d8:	2b44      	cmp	r3, #68	; 0x44
 80184da:	d906      	bls.n	80184ea <dhcp_option_short+0x26>
 80184dc:	4b0f      	ldr	r3, [pc, #60]	; (801851c <dhcp_option_short+0x58>)
 80184de:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80184e2:	490f      	ldr	r1, [pc, #60]	; (8018520 <dhcp_option_short+0x5c>)
 80184e4:	480f      	ldr	r0, [pc, #60]	; (8018524 <dhcp_option_short+0x60>)
 80184e6:	f003 fd9b 	bl	801c020 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80184ea:	88bb      	ldrh	r3, [r7, #4]
 80184ec:	0a1b      	lsrs	r3, r3, #8
 80184ee:	b29a      	uxth	r2, r3
 80184f0:	88fb      	ldrh	r3, [r7, #6]
 80184f2:	1c59      	adds	r1, r3, #1
 80184f4:	80f9      	strh	r1, [r7, #6]
 80184f6:	4619      	mov	r1, r3
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	440b      	add	r3, r1
 80184fc:	b2d2      	uxtb	r2, r2
 80184fe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8018500:	88fb      	ldrh	r3, [r7, #6]
 8018502:	1c5a      	adds	r2, r3, #1
 8018504:	80fa      	strh	r2, [r7, #6]
 8018506:	461a      	mov	r2, r3
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	4413      	add	r3, r2
 801850c:	88ba      	ldrh	r2, [r7, #4]
 801850e:	b2d2      	uxtb	r2, r2
 8018510:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018512:	88fb      	ldrh	r3, [r7, #6]
}
 8018514:	4618      	mov	r0, r3
 8018516:	3708      	adds	r7, #8
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}
 801851c:	08023934 	.word	0x08023934
 8018520:	08023b44 	.word	0x08023b44
 8018524:	08023994 	.word	0x08023994

08018528 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	60b9      	str	r1, [r7, #8]
 8018532:	607a      	str	r2, [r7, #4]
 8018534:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8018536:	89fb      	ldrh	r3, [r7, #14]
 8018538:	3304      	adds	r3, #4
 801853a:	2b44      	cmp	r3, #68	; 0x44
 801853c:	d906      	bls.n	801854c <dhcp_option_long+0x24>
 801853e:	4b19      	ldr	r3, [pc, #100]	; (80185a4 <dhcp_option_long+0x7c>)
 8018540:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8018544:	4918      	ldr	r1, [pc, #96]	; (80185a8 <dhcp_option_long+0x80>)
 8018546:	4819      	ldr	r0, [pc, #100]	; (80185ac <dhcp_option_long+0x84>)
 8018548:	f003 fd6a 	bl	801c020 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	0e1a      	lsrs	r2, r3, #24
 8018550:	89fb      	ldrh	r3, [r7, #14]
 8018552:	1c59      	adds	r1, r3, #1
 8018554:	81f9      	strh	r1, [r7, #14]
 8018556:	4619      	mov	r1, r3
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	440b      	add	r3, r1
 801855c:	b2d2      	uxtb	r2, r2
 801855e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	0c1a      	lsrs	r2, r3, #16
 8018564:	89fb      	ldrh	r3, [r7, #14]
 8018566:	1c59      	adds	r1, r3, #1
 8018568:	81f9      	strh	r1, [r7, #14]
 801856a:	4619      	mov	r1, r3
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	440b      	add	r3, r1
 8018570:	b2d2      	uxtb	r2, r2
 8018572:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	0a1a      	lsrs	r2, r3, #8
 8018578:	89fb      	ldrh	r3, [r7, #14]
 801857a:	1c59      	adds	r1, r3, #1
 801857c:	81f9      	strh	r1, [r7, #14]
 801857e:	4619      	mov	r1, r3
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	440b      	add	r3, r1
 8018584:	b2d2      	uxtb	r2, r2
 8018586:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8018588:	89fb      	ldrh	r3, [r7, #14]
 801858a:	1c5a      	adds	r2, r3, #1
 801858c:	81fa      	strh	r2, [r7, #14]
 801858e:	461a      	mov	r2, r3
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	4413      	add	r3, r2
 8018594:	687a      	ldr	r2, [r7, #4]
 8018596:	b2d2      	uxtb	r2, r2
 8018598:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801859a:	89fb      	ldrh	r3, [r7, #14]
}
 801859c:	4618      	mov	r0, r3
 801859e:	3710      	adds	r7, #16
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	08023934 	.word	0x08023934
 80185a8:	08023b80 	.word	0x08023b80
 80185ac:	08023994 	.word	0x08023994

080185b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b090      	sub	sp, #64	; 0x40
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80185ba:	2300      	movs	r3, #0
 80185bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80185be:	2300      	movs	r3, #0
 80185c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80185c2:	2208      	movs	r2, #8
 80185c4:	2100      	movs	r1, #0
 80185c6:	48be      	ldr	r0, [pc, #760]	; (80188c0 <dhcp_parse_reply+0x310>)
 80185c8:	f003 f81d 	bl	801b606 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	895b      	ldrh	r3, [r3, #10]
 80185d0:	2b2b      	cmp	r3, #43	; 0x2b
 80185d2:	d802      	bhi.n	80185da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80185d4:	f06f 0301 	mvn.w	r3, #1
 80185d8:	e2a8      	b.n	8018b2c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	685b      	ldr	r3, [r3, #4]
 80185de:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80185e0:	23f0      	movs	r3, #240	; 0xf0
 80185e2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	891b      	ldrh	r3, [r3, #8]
 80185e8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80185ee:	e00c      	b.n	801860a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80185f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f2:	895b      	ldrh	r3, [r3, #10]
 80185f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80185fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fc:	895b      	ldrh	r3, [r3, #10]
 80185fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8018600:	1ad3      	subs	r3, r2, r3
 8018602:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8018604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860c:	2b00      	cmp	r3, #0
 801860e:	d004      	beq.n	801861a <dhcp_parse_reply+0x6a>
 8018610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018612:	895b      	ldrh	r3, [r3, #10]
 8018614:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018616:	429a      	cmp	r2, r3
 8018618:	d2ea      	bcs.n	80185f0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861c:	2b00      	cmp	r3, #0
 801861e:	d102      	bne.n	8018626 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8018620:	f06f 0301 	mvn.w	r3, #1
 8018624:	e282      	b.n	8018b2c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8018626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018628:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801862a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801862c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018630:	685b      	ldr	r3, [r3, #4]
 8018632:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018634:	e23a      	b.n	8018aac <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8018636:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801863a:	4413      	add	r3, r2
 801863c:	781b      	ldrb	r3, [r3, #0]
 801863e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8018640:	2300      	movs	r3, #0
 8018642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8018646:	f04f 33ff 	mov.w	r3, #4294967295
 801864a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801864c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801864e:	3302      	adds	r3, #2
 8018650:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8018652:	8bfa      	ldrh	r2, [r7, #30]
 8018654:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018656:	429a      	cmp	r2, r3
 8018658:	d202      	bcs.n	8018660 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801865a:	f06f 0301 	mvn.w	r3, #1
 801865e:	e265      	b.n	8018b2c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8018660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018662:	3301      	adds	r3, #1
 8018664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018666:	8952      	ldrh	r2, [r2, #10]
 8018668:	4293      	cmp	r3, r2
 801866a:	da07      	bge.n	801867c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801866c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801866e:	3301      	adds	r3, #1
 8018670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018672:	4413      	add	r3, r2
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801867a:	e00b      	b.n	8018694 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d004      	beq.n	801868e <dhcp_parse_reply+0xde>
 8018684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	685b      	ldr	r3, [r3, #4]
 801868a:	781b      	ldrb	r3, [r3, #0]
 801868c:	e000      	b.n	8018690 <dhcp_parse_reply+0xe0>
 801868e:	2300      	movs	r3, #0
 8018690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8018694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801869c:	7dfb      	ldrb	r3, [r7, #23]
 801869e:	2b3b      	cmp	r3, #59	; 0x3b
 80186a0:	f200 812d 	bhi.w	80188fe <dhcp_parse_reply+0x34e>
 80186a4:	a201      	add	r2, pc, #4	; (adr r2, 80186ac <dhcp_parse_reply+0xfc>)
 80186a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186aa:	bf00      	nop
 80186ac:	0801879d 	.word	0x0801879d
 80186b0:	080187ad 	.word	0x080187ad
 80186b4:	080188ff 	.word	0x080188ff
 80186b8:	080187cf 	.word	0x080187cf
 80186bc:	080188ff 	.word	0x080188ff
 80186c0:	080188ff 	.word	0x080188ff
 80186c4:	080188ff 	.word	0x080188ff
 80186c8:	080188ff 	.word	0x080188ff
 80186cc:	080188ff 	.word	0x080188ff
 80186d0:	080188ff 	.word	0x080188ff
 80186d4:	080188ff 	.word	0x080188ff
 80186d8:	080188ff 	.word	0x080188ff
 80186dc:	080188ff 	.word	0x080188ff
 80186e0:	080188ff 	.word	0x080188ff
 80186e4:	080188ff 	.word	0x080188ff
 80186e8:	080188ff 	.word	0x080188ff
 80186ec:	080188ff 	.word	0x080188ff
 80186f0:	080188ff 	.word	0x080188ff
 80186f4:	080188ff 	.word	0x080188ff
 80186f8:	080188ff 	.word	0x080188ff
 80186fc:	080188ff 	.word	0x080188ff
 8018700:	080188ff 	.word	0x080188ff
 8018704:	080188ff 	.word	0x080188ff
 8018708:	080188ff 	.word	0x080188ff
 801870c:	080188ff 	.word	0x080188ff
 8018710:	080188ff 	.word	0x080188ff
 8018714:	080188ff 	.word	0x080188ff
 8018718:	080188ff 	.word	0x080188ff
 801871c:	080188ff 	.word	0x080188ff
 8018720:	080188ff 	.word	0x080188ff
 8018724:	080188ff 	.word	0x080188ff
 8018728:	080188ff 	.word	0x080188ff
 801872c:	080188ff 	.word	0x080188ff
 8018730:	080188ff 	.word	0x080188ff
 8018734:	080188ff 	.word	0x080188ff
 8018738:	080188ff 	.word	0x080188ff
 801873c:	080188ff 	.word	0x080188ff
 8018740:	080188ff 	.word	0x080188ff
 8018744:	080188ff 	.word	0x080188ff
 8018748:	080188ff 	.word	0x080188ff
 801874c:	080188ff 	.word	0x080188ff
 8018750:	080188ff 	.word	0x080188ff
 8018754:	080188ff 	.word	0x080188ff
 8018758:	080188ff 	.word	0x080188ff
 801875c:	080188ff 	.word	0x080188ff
 8018760:	080188ff 	.word	0x080188ff
 8018764:	080188ff 	.word	0x080188ff
 8018768:	080188ff 	.word	0x080188ff
 801876c:	080188ff 	.word	0x080188ff
 8018770:	080188ff 	.word	0x080188ff
 8018774:	080188ff 	.word	0x080188ff
 8018778:	080187fb 	.word	0x080187fb
 801877c:	0801881d 	.word	0x0801881d
 8018780:	08018859 	.word	0x08018859
 8018784:	0801887b 	.word	0x0801887b
 8018788:	080188ff 	.word	0x080188ff
 801878c:	080188ff 	.word	0x080188ff
 8018790:	080188ff 	.word	0x080188ff
 8018794:	0801889d 	.word	0x0801889d
 8018798:	080188dd 	.word	0x080188dd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801879c:	2300      	movs	r3, #0
 801879e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80187a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80187aa:	e0ac      	b.n	8018906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80187ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187b0:	2b04      	cmp	r3, #4
 80187b2:	d009      	beq.n	80187c8 <dhcp_parse_reply+0x218>
 80187b4:	4b43      	ldr	r3, [pc, #268]	; (80188c4 <dhcp_parse_reply+0x314>)
 80187b6:	f240 622e 	movw	r2, #1582	; 0x62e
 80187ba:	4943      	ldr	r1, [pc, #268]	; (80188c8 <dhcp_parse_reply+0x318>)
 80187bc:	4843      	ldr	r0, [pc, #268]	; (80188cc <dhcp_parse_reply+0x31c>)
 80187be:	f003 fc2f 	bl	801c020 <iprintf>
 80187c2:	f06f 0305 	mvn.w	r3, #5
 80187c6:	e1b1      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80187c8:	2306      	movs	r3, #6
 80187ca:	623b      	str	r3, [r7, #32]
        break;
 80187cc:	e09b      	b.n	8018906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80187ce:	2304      	movs	r3, #4
 80187d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80187d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80187d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80187dc:	429a      	cmp	r2, r3
 80187de:	d209      	bcs.n	80187f4 <dhcp_parse_reply+0x244>
 80187e0:	4b38      	ldr	r3, [pc, #224]	; (80188c4 <dhcp_parse_reply+0x314>)
 80187e2:	f240 6233 	movw	r2, #1587	; 0x633
 80187e6:	493a      	ldr	r1, [pc, #232]	; (80188d0 <dhcp_parse_reply+0x320>)
 80187e8:	4838      	ldr	r0, [pc, #224]	; (80188cc <dhcp_parse_reply+0x31c>)
 80187ea:	f003 fc19 	bl	801c020 <iprintf>
 80187ee:	f06f 0305 	mvn.w	r3, #5
 80187f2:	e19b      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80187f4:	2307      	movs	r3, #7
 80187f6:	623b      	str	r3, [r7, #32]
        break;
 80187f8:	e085      	b.n	8018906 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80187fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187fe:	2b04      	cmp	r3, #4
 8018800:	d009      	beq.n	8018816 <dhcp_parse_reply+0x266>
 8018802:	4b30      	ldr	r3, [pc, #192]	; (80188c4 <dhcp_parse_reply+0x314>)
 8018804:	f240 6241 	movw	r2, #1601	; 0x641
 8018808:	492f      	ldr	r1, [pc, #188]	; (80188c8 <dhcp_parse_reply+0x318>)
 801880a:	4830      	ldr	r0, [pc, #192]	; (80188cc <dhcp_parse_reply+0x31c>)
 801880c:	f003 fc08 	bl	801c020 <iprintf>
 8018810:	f06f 0305 	mvn.w	r3, #5
 8018814:	e18a      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8018816:	2303      	movs	r3, #3
 8018818:	623b      	str	r3, [r7, #32]
        break;
 801881a:	e074      	b.n	8018906 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801881c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018820:	2b01      	cmp	r3, #1
 8018822:	d009      	beq.n	8018838 <dhcp_parse_reply+0x288>
 8018824:	4b27      	ldr	r3, [pc, #156]	; (80188c4 <dhcp_parse_reply+0x314>)
 8018826:	f240 624f 	movw	r2, #1615	; 0x64f
 801882a:	492a      	ldr	r1, [pc, #168]	; (80188d4 <dhcp_parse_reply+0x324>)
 801882c:	4827      	ldr	r0, [pc, #156]	; (80188cc <dhcp_parse_reply+0x31c>)
 801882e:	f003 fbf7 	bl	801c020 <iprintf>
 8018832:	f06f 0305 	mvn.w	r3, #5
 8018836:	e179      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8018838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801883a:	2bf0      	cmp	r3, #240	; 0xf0
 801883c:	d009      	beq.n	8018852 <dhcp_parse_reply+0x2a2>
 801883e:	4b21      	ldr	r3, [pc, #132]	; (80188c4 <dhcp_parse_reply+0x314>)
 8018840:	f240 6251 	movw	r2, #1617	; 0x651
 8018844:	4924      	ldr	r1, [pc, #144]	; (80188d8 <dhcp_parse_reply+0x328>)
 8018846:	4821      	ldr	r0, [pc, #132]	; (80188cc <dhcp_parse_reply+0x31c>)
 8018848:	f003 fbea 	bl	801c020 <iprintf>
 801884c:	f06f 0305 	mvn.w	r3, #5
 8018850:	e16c      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8018852:	2300      	movs	r3, #0
 8018854:	623b      	str	r3, [r7, #32]
        break;
 8018856:	e056      	b.n	8018906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801885c:	2b01      	cmp	r3, #1
 801885e:	d009      	beq.n	8018874 <dhcp_parse_reply+0x2c4>
 8018860:	4b18      	ldr	r3, [pc, #96]	; (80188c4 <dhcp_parse_reply+0x314>)
 8018862:	f240 6255 	movw	r2, #1621	; 0x655
 8018866:	491b      	ldr	r1, [pc, #108]	; (80188d4 <dhcp_parse_reply+0x324>)
 8018868:	4818      	ldr	r0, [pc, #96]	; (80188cc <dhcp_parse_reply+0x31c>)
 801886a:	f003 fbd9 	bl	801c020 <iprintf>
 801886e:	f06f 0305 	mvn.w	r3, #5
 8018872:	e15b      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8018874:	2301      	movs	r3, #1
 8018876:	623b      	str	r3, [r7, #32]
        break;
 8018878:	e045      	b.n	8018906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801887a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801887e:	2b04      	cmp	r3, #4
 8018880:	d009      	beq.n	8018896 <dhcp_parse_reply+0x2e6>
 8018882:	4b10      	ldr	r3, [pc, #64]	; (80188c4 <dhcp_parse_reply+0x314>)
 8018884:	f240 6259 	movw	r2, #1625	; 0x659
 8018888:	490f      	ldr	r1, [pc, #60]	; (80188c8 <dhcp_parse_reply+0x318>)
 801888a:	4810      	ldr	r0, [pc, #64]	; (80188cc <dhcp_parse_reply+0x31c>)
 801888c:	f003 fbc8 	bl	801c020 <iprintf>
 8018890:	f06f 0305 	mvn.w	r3, #5
 8018894:	e14a      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8018896:	2302      	movs	r3, #2
 8018898:	623b      	str	r3, [r7, #32]
        break;
 801889a:	e034      	b.n	8018906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801889c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188a0:	2b04      	cmp	r3, #4
 80188a2:	d009      	beq.n	80188b8 <dhcp_parse_reply+0x308>
 80188a4:	4b07      	ldr	r3, [pc, #28]	; (80188c4 <dhcp_parse_reply+0x314>)
 80188a6:	f240 625d 	movw	r2, #1629	; 0x65d
 80188aa:	4907      	ldr	r1, [pc, #28]	; (80188c8 <dhcp_parse_reply+0x318>)
 80188ac:	4807      	ldr	r0, [pc, #28]	; (80188cc <dhcp_parse_reply+0x31c>)
 80188ae:	f003 fbb7 	bl	801c020 <iprintf>
 80188b2:	f06f 0305 	mvn.w	r3, #5
 80188b6:	e139      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80188b8:	2304      	movs	r3, #4
 80188ba:	623b      	str	r3, [r7, #32]
        break;
 80188bc:	e023      	b.n	8018906 <dhcp_parse_reply+0x356>
 80188be:	bf00      	nop
 80188c0:	200082e0 	.word	0x200082e0
 80188c4:	08023934 	.word	0x08023934
 80188c8:	08023bbc 	.word	0x08023bbc
 80188cc:	08023994 	.word	0x08023994
 80188d0:	08023bc8 	.word	0x08023bc8
 80188d4:	08023bdc 	.word	0x08023bdc
 80188d8:	08023be8 	.word	0x08023be8
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80188dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188e0:	2b04      	cmp	r3, #4
 80188e2:	d009      	beq.n	80188f8 <dhcp_parse_reply+0x348>
 80188e4:	4b93      	ldr	r3, [pc, #588]	; (8018b34 <dhcp_parse_reply+0x584>)
 80188e6:	f240 6261 	movw	r2, #1633	; 0x661
 80188ea:	4993      	ldr	r1, [pc, #588]	; (8018b38 <dhcp_parse_reply+0x588>)
 80188ec:	4893      	ldr	r0, [pc, #588]	; (8018b3c <dhcp_parse_reply+0x58c>)
 80188ee:	f003 fb97 	bl	801c020 <iprintf>
 80188f2:	f06f 0305 	mvn.w	r3, #5
 80188f6:	e119      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80188f8:	2305      	movs	r3, #5
 80188fa:	623b      	str	r3, [r7, #32]
        break;
 80188fc:	e003      	b.n	8018906 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80188fe:	2300      	movs	r3, #0
 8018900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8018904:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018906:	7dfb      	ldrb	r3, [r7, #23]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d103      	bne.n	8018914 <dhcp_parse_reply+0x364>
      offset++;
 801890c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801890e:	3301      	adds	r3, #1
 8018910:	877b      	strh	r3, [r7, #58]	; 0x3a
 8018912:	e0a1      	b.n	8018a58 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8018914:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801891a:	4413      	add	r3, r2
 801891c:	3302      	adds	r3, #2
 801891e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018922:	db02      	blt.n	801892a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8018924:	f06f 0301 	mvn.w	r3, #1
 8018928:	e100      	b.n	8018b2c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801892a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801892e:	b29a      	uxth	r2, r3
 8018930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018932:	4413      	add	r3, r2
 8018934:	b29b      	uxth	r3, r3
 8018936:	3302      	adds	r3, #2
 8018938:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801893a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801893e:	2b00      	cmp	r3, #0
 8018940:	f000 808a 	beq.w	8018a58 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8018944:	2300      	movs	r3, #0
 8018946:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018948:	6a3b      	ldr	r3, [r7, #32]
 801894a:	2b00      	cmp	r3, #0
 801894c:	db02      	blt.n	8018954 <dhcp_parse_reply+0x3a4>
 801894e:	6a3b      	ldr	r3, [r7, #32]
 8018950:	2b07      	cmp	r3, #7
 8018952:	dd06      	ble.n	8018962 <dhcp_parse_reply+0x3b2>
 8018954:	4b77      	ldr	r3, [pc, #476]	; (8018b34 <dhcp_parse_reply+0x584>)
 8018956:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801895a:	4979      	ldr	r1, [pc, #484]	; (8018b40 <dhcp_parse_reply+0x590>)
 801895c:	4877      	ldr	r0, [pc, #476]	; (8018b3c <dhcp_parse_reply+0x58c>)
 801895e:	f003 fb5f 	bl	801c020 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8018962:	4a78      	ldr	r2, [pc, #480]	; (8018b44 <dhcp_parse_reply+0x594>)
 8018964:	6a3b      	ldr	r3, [r7, #32]
 8018966:	4413      	add	r3, r2
 8018968:	781b      	ldrb	r3, [r3, #0]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d174      	bne.n	8018a58 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801896e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018972:	2b04      	cmp	r3, #4
 8018974:	bf28      	it	cs
 8018976:	2304      	movcs	r3, #4
 8018978:	b2db      	uxtb	r3, r3
 801897a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801897c:	8bfb      	ldrh	r3, [r7, #30]
 801897e:	8aba      	ldrh	r2, [r7, #20]
 8018980:	f107 0108 	add.w	r1, r7, #8
 8018984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018986:	f7f8 fccb 	bl	8011320 <pbuf_copy_partial>
 801898a:	4603      	mov	r3, r0
 801898c:	461a      	mov	r2, r3
 801898e:	8abb      	ldrh	r3, [r7, #20]
 8018990:	4293      	cmp	r3, r2
 8018992:	d002      	beq.n	801899a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8018994:	f06f 0301 	mvn.w	r3, #1
 8018998:	e0c8      	b.n	8018b2c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801899a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801899e:	2b04      	cmp	r3, #4
 80189a0:	d933      	bls.n	8018a0a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80189a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189a6:	f003 0303 	and.w	r3, r3, #3
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d009      	beq.n	80189c4 <dhcp_parse_reply+0x414>
 80189b0:	4b60      	ldr	r3, [pc, #384]	; (8018b34 <dhcp_parse_reply+0x584>)
 80189b2:	f240 6281 	movw	r2, #1665	; 0x681
 80189b6:	4964      	ldr	r1, [pc, #400]	; (8018b48 <dhcp_parse_reply+0x598>)
 80189b8:	4860      	ldr	r0, [pc, #384]	; (8018b3c <dhcp_parse_reply+0x58c>)
 80189ba:	f003 fb31 	bl	801c020 <iprintf>
 80189be:	f06f 0305 	mvn.w	r3, #5
 80189c2:	e0b3      	b.n	8018b2c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80189c4:	4a5f      	ldr	r2, [pc, #380]	; (8018b44 <dhcp_parse_reply+0x594>)
 80189c6:	6a3b      	ldr	r3, [r7, #32]
 80189c8:	4413      	add	r3, r2
 80189ca:	2201      	movs	r2, #1
 80189cc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80189ce:	68bb      	ldr	r3, [r7, #8]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7f7 f828 	bl	800fa26 <lwip_htonl>
 80189d6:	4601      	mov	r1, r0
 80189d8:	4a5c      	ldr	r2, [pc, #368]	; (8018b4c <dhcp_parse_reply+0x59c>)
 80189da:	6a3b      	ldr	r3, [r7, #32]
 80189dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80189e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189e4:	3b04      	subs	r3, #4
 80189e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80189ea:	8bfb      	ldrh	r3, [r7, #30]
 80189ec:	3304      	adds	r3, #4
 80189ee:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80189f0:	8a7a      	ldrh	r2, [r7, #18]
 80189f2:	8bfb      	ldrh	r3, [r7, #30]
 80189f4:	429a      	cmp	r2, r3
 80189f6:	d202      	bcs.n	80189fe <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80189f8:	f06f 0301 	mvn.w	r3, #1
 80189fc:	e096      	b.n	8018b2c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80189fe:	8a7b      	ldrh	r3, [r7, #18]
 8018a00:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8018a02:	6a3b      	ldr	r3, [r7, #32]
 8018a04:	3301      	adds	r3, #1
 8018a06:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8018a08:	e79e      	b.n	8018948 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8018a0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a0e:	2b04      	cmp	r3, #4
 8018a10:	d106      	bne.n	8018a20 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	4618      	mov	r0, r3
 8018a16:	f7f7 f806 	bl	800fa26 <lwip_htonl>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	60bb      	str	r3, [r7, #8]
 8018a1e:	e011      	b.n	8018a44 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8018a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	d009      	beq.n	8018a3c <dhcp_parse_reply+0x48c>
 8018a28:	4b42      	ldr	r3, [pc, #264]	; (8018b34 <dhcp_parse_reply+0x584>)
 8018a2a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8018a2e:	4948      	ldr	r1, [pc, #288]	; (8018b50 <dhcp_parse_reply+0x5a0>)
 8018a30:	4842      	ldr	r0, [pc, #264]	; (8018b3c <dhcp_parse_reply+0x58c>)
 8018a32:	f003 faf5 	bl	801c020 <iprintf>
 8018a36:	f06f 0305 	mvn.w	r3, #5
 8018a3a:	e077      	b.n	8018b2c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8018a3c:	f107 0308 	add.w	r3, r7, #8
 8018a40:	781b      	ldrb	r3, [r3, #0]
 8018a42:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018a44:	4a3f      	ldr	r2, [pc, #252]	; (8018b44 <dhcp_parse_reply+0x594>)
 8018a46:	6a3b      	ldr	r3, [r7, #32]
 8018a48:	4413      	add	r3, r2
 8018a4a:	2201      	movs	r2, #1
 8018a4c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8018a4e:	68ba      	ldr	r2, [r7, #8]
 8018a50:	493e      	ldr	r1, [pc, #248]	; (8018b4c <dhcp_parse_reply+0x59c>)
 8018a52:	6a3b      	ldr	r3, [r7, #32]
 8018a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8018a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a5a:	895b      	ldrh	r3, [r3, #10]
 8018a5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	d324      	bcc.n	8018aac <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8018a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a64:	895b      	ldrh	r3, [r3, #10]
 8018a66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a68:	1ad3      	subs	r3, r2, r3
 8018a6a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8018a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6e:	895b      	ldrh	r3, [r3, #10]
 8018a70:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018a72:	1ad3      	subs	r3, r2, r3
 8018a74:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8018a76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d213      	bcs.n	8018aa6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8018a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8018a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d109      	bne.n	8018a9e <dhcp_parse_reply+0x4ee>
 8018a8a:	4b2a      	ldr	r3, [pc, #168]	; (8018b34 <dhcp_parse_reply+0x584>)
 8018a8c:	f240 629d 	movw	r2, #1693	; 0x69d
 8018a90:	4930      	ldr	r1, [pc, #192]	; (8018b54 <dhcp_parse_reply+0x5a4>)
 8018a92:	482a      	ldr	r0, [pc, #168]	; (8018b3c <dhcp_parse_reply+0x58c>)
 8018a94:	f003 fac4 	bl	801c020 <iprintf>
 8018a98:	f06f 0305 	mvn.w	r3, #5
 8018a9c:	e046      	b.n	8018b2c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	685b      	ldr	r3, [r3, #4]
 8018aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018aa4:	e002      	b.n	8018aac <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018aa6:	f06f 0301 	mvn.w	r3, #1
 8018aaa:	e03f      	b.n	8018b2c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d00a      	beq.n	8018ac8 <dhcp_parse_reply+0x518>
 8018ab2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d206      	bcs.n	8018ac8 <dhcp_parse_reply+0x518>
 8018aba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018abe:	4413      	add	r3, r2
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	2bff      	cmp	r3, #255	; 0xff
 8018ac4:	f47f adb7 	bne.w	8018636 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018ac8:	4b1e      	ldr	r3, [pc, #120]	; (8018b44 <dhcp_parse_reply+0x594>)
 8018aca:	781b      	ldrb	r3, [r3, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d018      	beq.n	8018b02 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018ad0:	4b1e      	ldr	r3, [pc, #120]	; (8018b4c <dhcp_parse_reply+0x59c>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018ad6:	4b1b      	ldr	r3, [pc, #108]	; (8018b44 <dhcp_parse_reply+0x594>)
 8018ad8:	2200      	movs	r2, #0
 8018ada:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	2b01      	cmp	r3, #1
 8018ae0:	d102      	bne.n	8018ae8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ae6:	e00c      	b.n	8018b02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	2b02      	cmp	r3, #2
 8018aec:	d102      	bne.n	8018af4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8018aee:	2301      	movs	r3, #1
 8018af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8018af2:	e006      	b.n	8018b02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2b03      	cmp	r3, #3
 8018af8:	d103      	bne.n	8018b02 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8018afa:	2301      	movs	r3, #1
 8018afc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8018afe:	2301      	movs	r3, #1
 8018b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8018b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d006      	beq.n	8018b16 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018b08:	2300      	movs	r3, #0
 8018b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8018b0c:	236c      	movs	r3, #108	; 0x6c
 8018b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018b10:	23ec      	movs	r3, #236	; 0xec
 8018b12:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8018b14:	e569      	b.n	80185ea <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d006      	beq.n	8018b2a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8018b20:	232c      	movs	r3, #44	; 0x2c
 8018b22:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8018b24:	236c      	movs	r3, #108	; 0x6c
 8018b26:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8018b28:	e55f      	b.n	80185ea <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018b2a:	2300      	movs	r3, #0
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3740      	adds	r7, #64	; 0x40
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	08023934 	.word	0x08023934
 8018b38:	08023bbc 	.word	0x08023bbc
 8018b3c:	08023994 	.word	0x08023994
 8018b40:	08023c00 	.word	0x08023c00
 8018b44:	200082e0 	.word	0x200082e0
 8018b48:	08023c14 	.word	0x08023c14
 8018b4c:	200082e8 	.word	0x200082e8
 8018b50:	08023c2c 	.word	0x08023c2c
 8018b54:	08023c40 	.word	0x08023c40

08018b58 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b08a      	sub	sp, #40	; 0x28
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	60f8      	str	r0, [r7, #12]
 8018b60:	60b9      	str	r1, [r7, #8]
 8018b62:	607a      	str	r2, [r7, #4]
 8018b64:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8018b66:	4b5f      	ldr	r3, [pc, #380]	; (8018ce4 <dhcp_recv+0x18c>)
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018b6c:	6a3b      	ldr	r3, [r7, #32]
 8018b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b70:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	685b      	ldr	r3, [r3, #4]
 8018b76:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 809d 	beq.w	8018cba <dhcp_recv+0x162>
 8018b80:	69fb      	ldr	r3, [r7, #28]
 8018b82:	791b      	ldrb	r3, [r3, #4]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	f000 8098 	beq.w	8018cba <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	895b      	ldrh	r3, [r3, #10]
 8018b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8018b90:	f240 8095 	bls.w	8018cbe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8018b94:	69bb      	ldr	r3, [r7, #24]
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	2b02      	cmp	r3, #2
 8018b9a:	f040 8092 	bne.w	8018cc2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ba4:	e012      	b.n	8018bcc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018baa:	6a3a      	ldr	r2, [r7, #32]
 8018bac:	4413      	add	r3, r2
 8018bae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bb6:	69b9      	ldr	r1, [r7, #24]
 8018bb8:	440b      	add	r3, r1
 8018bba:	7f1b      	ldrb	r3, [r3, #28]
 8018bbc:	429a      	cmp	r2, r3
 8018bbe:	f040 8082 	bne.w	8018cc6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bc6:	3301      	adds	r3, #1
 8018bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bcc:	6a3b      	ldr	r3, [r7, #32]
 8018bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018bd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	d203      	bcs.n	8018be2 <dhcp_recv+0x8a>
 8018bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bde:	2b05      	cmp	r3, #5
 8018be0:	d9e1      	bls.n	8018ba6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018be2:	69bb      	ldr	r3, [r7, #24]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7f6 ff1d 	bl	800fa26 <lwip_htonl>
 8018bec:	4602      	mov	r2, r0
 8018bee:	69fb      	ldr	r3, [r7, #28]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d169      	bne.n	8018cca <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018bf6:	69f9      	ldr	r1, [r7, #28]
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	f7ff fcd9 	bl	80185b0 <dhcp_parse_reply>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d164      	bne.n	8018cce <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018c04:	4b38      	ldr	r3, [pc, #224]	; (8018ce8 <dhcp_recv+0x190>)
 8018c06:	785b      	ldrb	r3, [r3, #1]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d062      	beq.n	8018cd2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	685b      	ldr	r3, [r3, #4]
 8018c10:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018c12:	4b36      	ldr	r3, [pc, #216]	; (8018cec <dhcp_recv+0x194>)
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018c18:	7cfb      	ldrb	r3, [r7, #19]
 8018c1a:	2b05      	cmp	r3, #5
 8018c1c:	d12a      	bne.n	8018c74 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	795b      	ldrb	r3, [r3, #5]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d112      	bne.n	8018c4c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8018c26:	6979      	ldr	r1, [r7, #20]
 8018c28:	6a38      	ldr	r0, [r7, #32]
 8018c2a:	f7fe fe53 	bl	80178d4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018c2e:	6a3b      	ldr	r3, [r7, #32]
 8018c30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c34:	f003 0308 	and.w	r3, r3, #8
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d003      	beq.n	8018c44 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018c3c:	6a38      	ldr	r0, [r7, #32]
 8018c3e:	f7fe fbc3 	bl	80173c8 <dhcp_check>
 8018c42:	e047      	b.n	8018cd4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018c44:	6a38      	ldr	r0, [r7, #32]
 8018c46:	f7ff f867 	bl	8017d18 <dhcp_bind>
 8018c4a:	e043      	b.n	8018cd4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018c4c:	69fb      	ldr	r3, [r7, #28]
 8018c4e:	795b      	ldrb	r3, [r3, #5]
 8018c50:	2b03      	cmp	r3, #3
 8018c52:	d007      	beq.n	8018c64 <dhcp_recv+0x10c>
 8018c54:	69fb      	ldr	r3, [r7, #28]
 8018c56:	795b      	ldrb	r3, [r3, #5]
 8018c58:	2b04      	cmp	r3, #4
 8018c5a:	d003      	beq.n	8018c64 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8018c5c:	69fb      	ldr	r3, [r7, #28]
 8018c5e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018c60:	2b05      	cmp	r3, #5
 8018c62:	d137      	bne.n	8018cd4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8018c64:	6979      	ldr	r1, [r7, #20]
 8018c66:	6a38      	ldr	r0, [r7, #32]
 8018c68:	f7fe fe34 	bl	80178d4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8018c6c:	6a38      	ldr	r0, [r7, #32]
 8018c6e:	f7ff f853 	bl	8017d18 <dhcp_bind>
 8018c72:	e02f      	b.n	8018cd4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018c74:	7cfb      	ldrb	r3, [r7, #19]
 8018c76:	2b06      	cmp	r3, #6
 8018c78:	d113      	bne.n	8018ca2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c7a:	69fb      	ldr	r3, [r7, #28]
 8018c7c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8018c7e:	2b03      	cmp	r3, #3
 8018c80:	d00b      	beq.n	8018c9a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c82:	69fb      	ldr	r3, [r7, #28]
 8018c84:	795b      	ldrb	r3, [r3, #5]
 8018c86:	2b01      	cmp	r3, #1
 8018c88:	d007      	beq.n	8018c9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018c8a:	69fb      	ldr	r3, [r7, #28]
 8018c8c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c8e:	2b04      	cmp	r3, #4
 8018c90:	d003      	beq.n	8018c9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018c92:	69fb      	ldr	r3, [r7, #28]
 8018c94:	795b      	ldrb	r3, [r3, #5]
 8018c96:	2b05      	cmp	r3, #5
 8018c98:	d103      	bne.n	8018ca2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8018c9a:	6a38      	ldr	r0, [r7, #32]
 8018c9c:	f7fe fb7a 	bl	8017394 <dhcp_handle_nak>
 8018ca0:	e018      	b.n	8018cd4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018ca2:	7cfb      	ldrb	r3, [r7, #19]
 8018ca4:	2b02      	cmp	r3, #2
 8018ca6:	d108      	bne.n	8018cba <dhcp_recv+0x162>
 8018ca8:	69fb      	ldr	r3, [r7, #28]
 8018caa:	795b      	ldrb	r3, [r3, #5]
 8018cac:	2b06      	cmp	r3, #6
 8018cae:	d104      	bne.n	8018cba <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018cb0:	6979      	ldr	r1, [r7, #20]
 8018cb2:	6a38      	ldr	r0, [r7, #32]
 8018cb4:	f7fe fbbc 	bl	8017430 <dhcp_handle_offer>
 8018cb8:	e00c      	b.n	8018cd4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8018cba:	bf00      	nop
 8018cbc:	e00a      	b.n	8018cd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cbe:	bf00      	nop
 8018cc0:	e008      	b.n	8018cd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cc2:	bf00      	nop
 8018cc4:	e006      	b.n	8018cd4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8018cc6:	bf00      	nop
 8018cc8:	e004      	b.n	8018cd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cca:	bf00      	nop
 8018ccc:	e002      	b.n	8018cd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cce:	bf00      	nop
 8018cd0:	e000      	b.n	8018cd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8018cd2:	bf00      	nop
  pbuf_free(p);
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f7f8 f929 	bl	8010f2c <pbuf_free>
}
 8018cda:	bf00      	nop
 8018cdc:	3728      	adds	r7, #40	; 0x28
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	200051a0 	.word	0x200051a0
 8018ce8:	200082e0 	.word	0x200082e0
 8018cec:	200082e8 	.word	0x200082e8

08018cf0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b088      	sub	sp, #32
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	60f8      	str	r0, [r7, #12]
 8018cf8:	60b9      	str	r1, [r7, #8]
 8018cfa:	603b      	str	r3, [r7, #0]
 8018cfc:	4613      	mov	r3, r2
 8018cfe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d108      	bne.n	8018d18 <dhcp_create_msg+0x28>
 8018d06:	4b5f      	ldr	r3, [pc, #380]	; (8018e84 <dhcp_create_msg+0x194>)
 8018d08:	f240 7269 	movw	r2, #1897	; 0x769
 8018d0c:	495e      	ldr	r1, [pc, #376]	; (8018e88 <dhcp_create_msg+0x198>)
 8018d0e:	485f      	ldr	r0, [pc, #380]	; (8018e8c <dhcp_create_msg+0x19c>)
 8018d10:	f003 f986 	bl	801c020 <iprintf>
 8018d14:	2300      	movs	r3, #0
 8018d16:	e0b1      	b.n	8018e7c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d108      	bne.n	8018d30 <dhcp_create_msg+0x40>
 8018d1e:	4b59      	ldr	r3, [pc, #356]	; (8018e84 <dhcp_create_msg+0x194>)
 8018d20:	f240 726a 	movw	r2, #1898	; 0x76a
 8018d24:	495a      	ldr	r1, [pc, #360]	; (8018e90 <dhcp_create_msg+0x1a0>)
 8018d26:	4859      	ldr	r0, [pc, #356]	; (8018e8c <dhcp_create_msg+0x19c>)
 8018d28:	f003 f97a 	bl	801c020 <iprintf>
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	e0a5      	b.n	8018e7c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018d30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d34:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018d38:	2036      	movs	r0, #54	; 0x36
 8018d3a:	f7f7 fe17 	bl	801096c <pbuf_alloc>
 8018d3e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018d40:	69bb      	ldr	r3, [r7, #24]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d101      	bne.n	8018d4a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018d46:	2300      	movs	r3, #0
 8018d48:	e098      	b.n	8018e7c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018d4a:	69bb      	ldr	r3, [r7, #24]
 8018d4c:	895b      	ldrh	r3, [r3, #10]
 8018d4e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018d52:	d206      	bcs.n	8018d62 <dhcp_create_msg+0x72>
 8018d54:	4b4b      	ldr	r3, [pc, #300]	; (8018e84 <dhcp_create_msg+0x194>)
 8018d56:	f240 7272 	movw	r2, #1906	; 0x772
 8018d5a:	494e      	ldr	r1, [pc, #312]	; (8018e94 <dhcp_create_msg+0x1a4>)
 8018d5c:	484b      	ldr	r0, [pc, #300]	; (8018e8c <dhcp_create_msg+0x19c>)
 8018d5e:	f003 f95f 	bl	801c020 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018d62:	79fb      	ldrb	r3, [r7, #7]
 8018d64:	2b03      	cmp	r3, #3
 8018d66:	d103      	bne.n	8018d70 <dhcp_create_msg+0x80>
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	795b      	ldrb	r3, [r3, #5]
 8018d6c:	2b03      	cmp	r3, #3
 8018d6e:	d10d      	bne.n	8018d8c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018d70:	68bb      	ldr	r3, [r7, #8]
 8018d72:	799b      	ldrb	r3, [r3, #6]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d105      	bne.n	8018d84 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018d78:	f003 f96a 	bl	801c050 <rand>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	461a      	mov	r2, r3
 8018d80:	4b45      	ldr	r3, [pc, #276]	; (8018e98 <dhcp_create_msg+0x1a8>)
 8018d82:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018d84:	4b44      	ldr	r3, [pc, #272]	; (8018e98 <dhcp_create_msg+0x1a8>)
 8018d86:	681a      	ldr	r2, [r3, #0]
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018d8c:	69bb      	ldr	r3, [r7, #24]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018d92:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018d96:	2100      	movs	r1, #0
 8018d98:	6978      	ldr	r0, [r7, #20]
 8018d9a:	f002 fc34 	bl	801b606 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2201      	movs	r2, #1
 8018da2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	2201      	movs	r2, #1
 8018da8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018db0:	697b      	ldr	r3, [r7, #20]
 8018db2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7f6 fe34 	bl	800fa26 <lwip_htonl>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018dc4:	79fb      	ldrb	r3, [r7, #7]
 8018dc6:	2b08      	cmp	r3, #8
 8018dc8:	d010      	beq.n	8018dec <dhcp_create_msg+0xfc>
 8018dca:	79fb      	ldrb	r3, [r7, #7]
 8018dcc:	2b04      	cmp	r3, #4
 8018dce:	d00d      	beq.n	8018dec <dhcp_create_msg+0xfc>
 8018dd0:	79fb      	ldrb	r3, [r7, #7]
 8018dd2:	2b07      	cmp	r3, #7
 8018dd4:	d00a      	beq.n	8018dec <dhcp_create_msg+0xfc>
 8018dd6:	79fb      	ldrb	r3, [r7, #7]
 8018dd8:	2b03      	cmp	r3, #3
 8018dda:	d10c      	bne.n	8018df6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018de0:	2b05      	cmp	r3, #5
 8018de2:	d003      	beq.n	8018dec <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	795b      	ldrb	r3, [r3, #5]
 8018de8:	2b04      	cmp	r3, #4
 8018dea:	d104      	bne.n	8018df6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	3304      	adds	r3, #4
 8018df0:	681a      	ldr	r2, [r3, #0]
 8018df2:	697b      	ldr	r3, [r7, #20]
 8018df4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018df6:	2300      	movs	r3, #0
 8018df8:	83fb      	strh	r3, [r7, #30]
 8018dfa:	e00c      	b.n	8018e16 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018dfc:	8bfa      	ldrh	r2, [r7, #30]
 8018dfe:	8bfb      	ldrh	r3, [r7, #30]
 8018e00:	68f9      	ldr	r1, [r7, #12]
 8018e02:	440a      	add	r2, r1
 8018e04:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018e08:	697a      	ldr	r2, [r7, #20]
 8018e0a:	4413      	add	r3, r2
 8018e0c:	460a      	mov	r2, r1
 8018e0e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018e10:	8bfb      	ldrh	r3, [r7, #30]
 8018e12:	3301      	adds	r3, #1
 8018e14:	83fb      	strh	r3, [r7, #30]
 8018e16:	8bfb      	ldrh	r3, [r7, #30]
 8018e18:	2b05      	cmp	r3, #5
 8018e1a:	d9ef      	bls.n	8018dfc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018e28:	2200      	movs	r2, #0
 8018e2a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018e2e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018e32:	2200      	movs	r2, #0
 8018e34:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018e38:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018e42:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e4c:	2301      	movs	r3, #1
 8018e4e:	2235      	movs	r2, #53	; 0x35
 8018e50:	2000      	movs	r0, #0
 8018e52:	f7ff fadd 	bl	8018410 <dhcp_option>
 8018e56:	4603      	mov	r3, r0
 8018e58:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e60:	79fa      	ldrb	r2, [r7, #7]
 8018e62:	8a7b      	ldrh	r3, [r7, #18]
 8018e64:	4618      	mov	r0, r3
 8018e66:	f7ff fb07 	bl	8018478 <dhcp_option_byte>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d002      	beq.n	8018e7a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	8a7a      	ldrh	r2, [r7, #18]
 8018e78:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8018e7a:	69bb      	ldr	r3, [r7, #24]
}
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	3720      	adds	r7, #32
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	08023934 	.word	0x08023934
 8018e88:	08023c54 	.word	0x08023c54
 8018e8c:	08023994 	.word	0x08023994
 8018e90:	08023c74 	.word	0x08023c74
 8018e94:	08023c94 	.word	0x08023c94
 8018e98:	20001080 	.word	0x20001080

08018e9c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	607a      	str	r2, [r7, #4]
 8018ea8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8018eaa:	89fb      	ldrh	r3, [r7, #14]
 8018eac:	1c5a      	adds	r2, r3, #1
 8018eae:	81fa      	strh	r2, [r7, #14]
 8018eb0:	461a      	mov	r2, r3
 8018eb2:	68bb      	ldr	r3, [r7, #8]
 8018eb4:	4413      	add	r3, r2
 8018eb6:	22ff      	movs	r2, #255	; 0xff
 8018eb8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018eba:	e007      	b.n	8018ecc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018ebc:	89fb      	ldrh	r3, [r7, #14]
 8018ebe:	1c5a      	adds	r2, r3, #1
 8018ec0:	81fa      	strh	r2, [r7, #14]
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	4413      	add	r3, r2
 8018ec8:	2200      	movs	r2, #0
 8018eca:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018ecc:	89fb      	ldrh	r3, [r7, #14]
 8018ece:	2b43      	cmp	r3, #67	; 0x43
 8018ed0:	d904      	bls.n	8018edc <dhcp_option_trailer+0x40>
 8018ed2:	89fb      	ldrh	r3, [r7, #14]
 8018ed4:	f003 0303 	and.w	r3, r3, #3
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d002      	beq.n	8018ee2 <dhcp_option_trailer+0x46>
 8018edc:	89fb      	ldrh	r3, [r7, #14]
 8018ede:	2b43      	cmp	r3, #67	; 0x43
 8018ee0:	d9ec      	bls.n	8018ebc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018ee2:	89fb      	ldrh	r3, [r7, #14]
 8018ee4:	33f0      	adds	r3, #240	; 0xf0
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	4619      	mov	r1, r3
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	f7f7 fe98 	bl	8010c20 <pbuf_realloc>
}
 8018ef0:	bf00      	nop
 8018ef2:	3710      	adds	r7, #16
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}

08018ef8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018ef8:	b480      	push	{r7}
 8018efa:	b085      	sub	sp, #20
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d017      	beq.n	8018f36 <dhcp_supplied_address+0x3e>
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d013      	beq.n	8018f36 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f12:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	795b      	ldrb	r3, [r3, #5]
 8018f18:	2b0a      	cmp	r3, #10
 8018f1a:	d007      	beq.n	8018f2c <dhcp_supplied_address+0x34>
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	795b      	ldrb	r3, [r3, #5]
 8018f20:	2b05      	cmp	r3, #5
 8018f22:	d003      	beq.n	8018f2c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018f28:	2b04      	cmp	r3, #4
 8018f2a:	d101      	bne.n	8018f30 <dhcp_supplied_address+0x38>
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	e000      	b.n	8018f32 <dhcp_supplied_address+0x3a>
 8018f30:	2300      	movs	r3, #0
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	e000      	b.n	8018f38 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018f36:	2300      	movs	r3, #0
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3714      	adds	r7, #20
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f42:	4770      	bx	lr

08018f44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b082      	sub	sp, #8
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018f4c:	4915      	ldr	r1, [pc, #84]	; (8018fa4 <etharp_free_entry+0x60>)
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	4613      	mov	r3, r2
 8018f52:	005b      	lsls	r3, r3, #1
 8018f54:	4413      	add	r3, r2
 8018f56:	00db      	lsls	r3, r3, #3
 8018f58:	440b      	add	r3, r1
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d013      	beq.n	8018f88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018f60:	4910      	ldr	r1, [pc, #64]	; (8018fa4 <etharp_free_entry+0x60>)
 8018f62:	687a      	ldr	r2, [r7, #4]
 8018f64:	4613      	mov	r3, r2
 8018f66:	005b      	lsls	r3, r3, #1
 8018f68:	4413      	add	r3, r2
 8018f6a:	00db      	lsls	r3, r3, #3
 8018f6c:	440b      	add	r3, r1
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7f7 ffdb 	bl	8010f2c <pbuf_free>
    arp_table[i].q = NULL;
 8018f76:	490b      	ldr	r1, [pc, #44]	; (8018fa4 <etharp_free_entry+0x60>)
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	4613      	mov	r3, r2
 8018f7c:	005b      	lsls	r3, r3, #1
 8018f7e:	4413      	add	r3, r2
 8018f80:	00db      	lsls	r3, r3, #3
 8018f82:	440b      	add	r3, r1
 8018f84:	2200      	movs	r2, #0
 8018f86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018f88:	4906      	ldr	r1, [pc, #24]	; (8018fa4 <etharp_free_entry+0x60>)
 8018f8a:	687a      	ldr	r2, [r7, #4]
 8018f8c:	4613      	mov	r3, r2
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	4413      	add	r3, r2
 8018f92:	00db      	lsls	r3, r3, #3
 8018f94:	440b      	add	r3, r1
 8018f96:	3314      	adds	r3, #20
 8018f98:	2200      	movs	r2, #0
 8018f9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018f9c:	bf00      	nop
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}
 8018fa4:	20001084 	.word	0x20001084

08018fa8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018fae:	2300      	movs	r3, #0
 8018fb0:	607b      	str	r3, [r7, #4]
 8018fb2:	e096      	b.n	80190e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018fb4:	494f      	ldr	r1, [pc, #316]	; (80190f4 <etharp_tmr+0x14c>)
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	4613      	mov	r3, r2
 8018fba:	005b      	lsls	r3, r3, #1
 8018fbc:	4413      	add	r3, r2
 8018fbe:	00db      	lsls	r3, r3, #3
 8018fc0:	440b      	add	r3, r1
 8018fc2:	3314      	adds	r3, #20
 8018fc4:	781b      	ldrb	r3, [r3, #0]
 8018fc6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018fc8:	78fb      	ldrb	r3, [r7, #3]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	f000 8086 	beq.w	80190dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018fd0:	4948      	ldr	r1, [pc, #288]	; (80190f4 <etharp_tmr+0x14c>)
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	4613      	mov	r3, r2
 8018fd6:	005b      	lsls	r3, r3, #1
 8018fd8:	4413      	add	r3, r2
 8018fda:	00db      	lsls	r3, r3, #3
 8018fdc:	440b      	add	r3, r1
 8018fde:	3312      	adds	r3, #18
 8018fe0:	881b      	ldrh	r3, [r3, #0]
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	b298      	uxth	r0, r3
 8018fe6:	4943      	ldr	r1, [pc, #268]	; (80190f4 <etharp_tmr+0x14c>)
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	4613      	mov	r3, r2
 8018fec:	005b      	lsls	r3, r3, #1
 8018fee:	4413      	add	r3, r2
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	440b      	add	r3, r1
 8018ff4:	3312      	adds	r3, #18
 8018ff6:	4602      	mov	r2, r0
 8018ff8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018ffa:	493e      	ldr	r1, [pc, #248]	; (80190f4 <etharp_tmr+0x14c>)
 8018ffc:	687a      	ldr	r2, [r7, #4]
 8018ffe:	4613      	mov	r3, r2
 8019000:	005b      	lsls	r3, r3, #1
 8019002:	4413      	add	r3, r2
 8019004:	00db      	lsls	r3, r3, #3
 8019006:	440b      	add	r3, r1
 8019008:	3312      	adds	r3, #18
 801900a:	881b      	ldrh	r3, [r3, #0]
 801900c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019010:	d215      	bcs.n	801903e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019012:	4938      	ldr	r1, [pc, #224]	; (80190f4 <etharp_tmr+0x14c>)
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	4613      	mov	r3, r2
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	4413      	add	r3, r2
 801901c:	00db      	lsls	r3, r3, #3
 801901e:	440b      	add	r3, r1
 8019020:	3314      	adds	r3, #20
 8019022:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019024:	2b01      	cmp	r3, #1
 8019026:	d10e      	bne.n	8019046 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019028:	4932      	ldr	r1, [pc, #200]	; (80190f4 <etharp_tmr+0x14c>)
 801902a:	687a      	ldr	r2, [r7, #4]
 801902c:	4613      	mov	r3, r2
 801902e:	005b      	lsls	r3, r3, #1
 8019030:	4413      	add	r3, r2
 8019032:	00db      	lsls	r3, r3, #3
 8019034:	440b      	add	r3, r1
 8019036:	3312      	adds	r3, #18
 8019038:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801903a:	2b04      	cmp	r3, #4
 801903c:	d903      	bls.n	8019046 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f7ff ff80 	bl	8018f44 <etharp_free_entry>
 8019044:	e04a      	b.n	80190dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019046:	492b      	ldr	r1, [pc, #172]	; (80190f4 <etharp_tmr+0x14c>)
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	4613      	mov	r3, r2
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4413      	add	r3, r2
 8019050:	00db      	lsls	r3, r3, #3
 8019052:	440b      	add	r3, r1
 8019054:	3314      	adds	r3, #20
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	2b03      	cmp	r3, #3
 801905a:	d10a      	bne.n	8019072 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801905c:	4925      	ldr	r1, [pc, #148]	; (80190f4 <etharp_tmr+0x14c>)
 801905e:	687a      	ldr	r2, [r7, #4]
 8019060:	4613      	mov	r3, r2
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	4413      	add	r3, r2
 8019066:	00db      	lsls	r3, r3, #3
 8019068:	440b      	add	r3, r1
 801906a:	3314      	adds	r3, #20
 801906c:	2204      	movs	r2, #4
 801906e:	701a      	strb	r2, [r3, #0]
 8019070:	e034      	b.n	80190dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019072:	4920      	ldr	r1, [pc, #128]	; (80190f4 <etharp_tmr+0x14c>)
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	4613      	mov	r3, r2
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	4413      	add	r3, r2
 801907c:	00db      	lsls	r3, r3, #3
 801907e:	440b      	add	r3, r1
 8019080:	3314      	adds	r3, #20
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	2b04      	cmp	r3, #4
 8019086:	d10a      	bne.n	801909e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019088:	491a      	ldr	r1, [pc, #104]	; (80190f4 <etharp_tmr+0x14c>)
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	4613      	mov	r3, r2
 801908e:	005b      	lsls	r3, r3, #1
 8019090:	4413      	add	r3, r2
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	440b      	add	r3, r1
 8019096:	3314      	adds	r3, #20
 8019098:	2202      	movs	r2, #2
 801909a:	701a      	strb	r2, [r3, #0]
 801909c:	e01e      	b.n	80190dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801909e:	4915      	ldr	r1, [pc, #84]	; (80190f4 <etharp_tmr+0x14c>)
 80190a0:	687a      	ldr	r2, [r7, #4]
 80190a2:	4613      	mov	r3, r2
 80190a4:	005b      	lsls	r3, r3, #1
 80190a6:	4413      	add	r3, r2
 80190a8:	00db      	lsls	r3, r3, #3
 80190aa:	440b      	add	r3, r1
 80190ac:	3314      	adds	r3, #20
 80190ae:	781b      	ldrb	r3, [r3, #0]
 80190b0:	2b01      	cmp	r3, #1
 80190b2:	d113      	bne.n	80190dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80190b4:	490f      	ldr	r1, [pc, #60]	; (80190f4 <etharp_tmr+0x14c>)
 80190b6:	687a      	ldr	r2, [r7, #4]
 80190b8:	4613      	mov	r3, r2
 80190ba:	005b      	lsls	r3, r3, #1
 80190bc:	4413      	add	r3, r2
 80190be:	00db      	lsls	r3, r3, #3
 80190c0:	440b      	add	r3, r1
 80190c2:	3308      	adds	r3, #8
 80190c4:	6818      	ldr	r0, [r3, #0]
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	4613      	mov	r3, r2
 80190ca:	005b      	lsls	r3, r3, #1
 80190cc:	4413      	add	r3, r2
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	4a08      	ldr	r2, [pc, #32]	; (80190f4 <etharp_tmr+0x14c>)
 80190d2:	4413      	add	r3, r2
 80190d4:	3304      	adds	r3, #4
 80190d6:	4619      	mov	r1, r3
 80190d8:	f000 fe72 	bl	8019dc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	3301      	adds	r3, #1
 80190e0:	607b      	str	r3, [r7, #4]
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2b09      	cmp	r3, #9
 80190e6:	f77f af65 	ble.w	8018fb4 <etharp_tmr+0xc>
      }
    }
  }
}
 80190ea:	bf00      	nop
 80190ec:	3708      	adds	r7, #8
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	20001084 	.word	0x20001084

080190f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b08a      	sub	sp, #40	; 0x28
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	60f8      	str	r0, [r7, #12]
 8019100:	460b      	mov	r3, r1
 8019102:	607a      	str	r2, [r7, #4]
 8019104:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019106:	230a      	movs	r3, #10
 8019108:	84fb      	strh	r3, [r7, #38]	; 0x26
 801910a:	230a      	movs	r3, #10
 801910c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801910e:	230a      	movs	r3, #10
 8019110:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019112:	2300      	movs	r3, #0
 8019114:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019116:	230a      	movs	r3, #10
 8019118:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801911a:	2300      	movs	r3, #0
 801911c:	83bb      	strh	r3, [r7, #28]
 801911e:	2300      	movs	r3, #0
 8019120:	837b      	strh	r3, [r7, #26]
 8019122:	2300      	movs	r3, #0
 8019124:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019126:	2300      	movs	r3, #0
 8019128:	843b      	strh	r3, [r7, #32]
 801912a:	e0ae      	b.n	801928a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801912c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019130:	49a6      	ldr	r1, [pc, #664]	; (80193cc <etharp_find_entry+0x2d4>)
 8019132:	4613      	mov	r3, r2
 8019134:	005b      	lsls	r3, r3, #1
 8019136:	4413      	add	r3, r2
 8019138:	00db      	lsls	r3, r3, #3
 801913a:	440b      	add	r3, r1
 801913c:	3314      	adds	r3, #20
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019142:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019146:	2b0a      	cmp	r3, #10
 8019148:	d105      	bne.n	8019156 <etharp_find_entry+0x5e>
 801914a:	7dfb      	ldrb	r3, [r7, #23]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d102      	bne.n	8019156 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019150:	8c3b      	ldrh	r3, [r7, #32]
 8019152:	847b      	strh	r3, [r7, #34]	; 0x22
 8019154:	e095      	b.n	8019282 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019156:	7dfb      	ldrb	r3, [r7, #23]
 8019158:	2b00      	cmp	r3, #0
 801915a:	f000 8092 	beq.w	8019282 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801915e:	7dfb      	ldrb	r3, [r7, #23]
 8019160:	2b01      	cmp	r3, #1
 8019162:	d009      	beq.n	8019178 <etharp_find_entry+0x80>
 8019164:	7dfb      	ldrb	r3, [r7, #23]
 8019166:	2b01      	cmp	r3, #1
 8019168:	d806      	bhi.n	8019178 <etharp_find_entry+0x80>
 801916a:	4b99      	ldr	r3, [pc, #612]	; (80193d0 <etharp_find_entry+0x2d8>)
 801916c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8019170:	4998      	ldr	r1, [pc, #608]	; (80193d4 <etharp_find_entry+0x2dc>)
 8019172:	4899      	ldr	r0, [pc, #612]	; (80193d8 <etharp_find_entry+0x2e0>)
 8019174:	f002 ff54 	bl	801c020 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d020      	beq.n	80191c0 <etharp_find_entry+0xc8>
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	6819      	ldr	r1, [r3, #0]
 8019182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019186:	4891      	ldr	r0, [pc, #580]	; (80193cc <etharp_find_entry+0x2d4>)
 8019188:	4613      	mov	r3, r2
 801918a:	005b      	lsls	r3, r3, #1
 801918c:	4413      	add	r3, r2
 801918e:	00db      	lsls	r3, r3, #3
 8019190:	4403      	add	r3, r0
 8019192:	3304      	adds	r3, #4
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	4299      	cmp	r1, r3
 8019198:	d112      	bne.n	80191c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d00c      	beq.n	80191ba <etharp_find_entry+0xc2>
 80191a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191a4:	4989      	ldr	r1, [pc, #548]	; (80193cc <etharp_find_entry+0x2d4>)
 80191a6:	4613      	mov	r3, r2
 80191a8:	005b      	lsls	r3, r3, #1
 80191aa:	4413      	add	r3, r2
 80191ac:	00db      	lsls	r3, r3, #3
 80191ae:	440b      	add	r3, r1
 80191b0:	3308      	adds	r3, #8
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	687a      	ldr	r2, [r7, #4]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d102      	bne.n	80191c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80191ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80191be:	e100      	b.n	80193c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80191c0:	7dfb      	ldrb	r3, [r7, #23]
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d140      	bne.n	8019248 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80191c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191ca:	4980      	ldr	r1, [pc, #512]	; (80193cc <etharp_find_entry+0x2d4>)
 80191cc:	4613      	mov	r3, r2
 80191ce:	005b      	lsls	r3, r3, #1
 80191d0:	4413      	add	r3, r2
 80191d2:	00db      	lsls	r3, r3, #3
 80191d4:	440b      	add	r3, r1
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d01a      	beq.n	8019212 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80191dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191e0:	497a      	ldr	r1, [pc, #488]	; (80193cc <etharp_find_entry+0x2d4>)
 80191e2:	4613      	mov	r3, r2
 80191e4:	005b      	lsls	r3, r3, #1
 80191e6:	4413      	add	r3, r2
 80191e8:	00db      	lsls	r3, r3, #3
 80191ea:	440b      	add	r3, r1
 80191ec:	3312      	adds	r3, #18
 80191ee:	881b      	ldrh	r3, [r3, #0]
 80191f0:	8bba      	ldrh	r2, [r7, #28]
 80191f2:	429a      	cmp	r2, r3
 80191f4:	d845      	bhi.n	8019282 <etharp_find_entry+0x18a>
            old_queue = i;
 80191f6:	8c3b      	ldrh	r3, [r7, #32]
 80191f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80191fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191fe:	4973      	ldr	r1, [pc, #460]	; (80193cc <etharp_find_entry+0x2d4>)
 8019200:	4613      	mov	r3, r2
 8019202:	005b      	lsls	r3, r3, #1
 8019204:	4413      	add	r3, r2
 8019206:	00db      	lsls	r3, r3, #3
 8019208:	440b      	add	r3, r1
 801920a:	3312      	adds	r3, #18
 801920c:	881b      	ldrh	r3, [r3, #0]
 801920e:	83bb      	strh	r3, [r7, #28]
 8019210:	e037      	b.n	8019282 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019216:	496d      	ldr	r1, [pc, #436]	; (80193cc <etharp_find_entry+0x2d4>)
 8019218:	4613      	mov	r3, r2
 801921a:	005b      	lsls	r3, r3, #1
 801921c:	4413      	add	r3, r2
 801921e:	00db      	lsls	r3, r3, #3
 8019220:	440b      	add	r3, r1
 8019222:	3312      	adds	r3, #18
 8019224:	881b      	ldrh	r3, [r3, #0]
 8019226:	8b7a      	ldrh	r2, [r7, #26]
 8019228:	429a      	cmp	r2, r3
 801922a:	d82a      	bhi.n	8019282 <etharp_find_entry+0x18a>
            old_pending = i;
 801922c:	8c3b      	ldrh	r3, [r7, #32]
 801922e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019234:	4965      	ldr	r1, [pc, #404]	; (80193cc <etharp_find_entry+0x2d4>)
 8019236:	4613      	mov	r3, r2
 8019238:	005b      	lsls	r3, r3, #1
 801923a:	4413      	add	r3, r2
 801923c:	00db      	lsls	r3, r3, #3
 801923e:	440b      	add	r3, r1
 8019240:	3312      	adds	r3, #18
 8019242:	881b      	ldrh	r3, [r3, #0]
 8019244:	837b      	strh	r3, [r7, #26]
 8019246:	e01c      	b.n	8019282 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019248:	7dfb      	ldrb	r3, [r7, #23]
 801924a:	2b01      	cmp	r3, #1
 801924c:	d919      	bls.n	8019282 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801924e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019252:	495e      	ldr	r1, [pc, #376]	; (80193cc <etharp_find_entry+0x2d4>)
 8019254:	4613      	mov	r3, r2
 8019256:	005b      	lsls	r3, r3, #1
 8019258:	4413      	add	r3, r2
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	440b      	add	r3, r1
 801925e:	3312      	adds	r3, #18
 8019260:	881b      	ldrh	r3, [r3, #0]
 8019262:	8b3a      	ldrh	r2, [r7, #24]
 8019264:	429a      	cmp	r2, r3
 8019266:	d80c      	bhi.n	8019282 <etharp_find_entry+0x18a>
            old_stable = i;
 8019268:	8c3b      	ldrh	r3, [r7, #32]
 801926a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801926c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019270:	4956      	ldr	r1, [pc, #344]	; (80193cc <etharp_find_entry+0x2d4>)
 8019272:	4613      	mov	r3, r2
 8019274:	005b      	lsls	r3, r3, #1
 8019276:	4413      	add	r3, r2
 8019278:	00db      	lsls	r3, r3, #3
 801927a:	440b      	add	r3, r1
 801927c:	3312      	adds	r3, #18
 801927e:	881b      	ldrh	r3, [r3, #0]
 8019280:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019282:	8c3b      	ldrh	r3, [r7, #32]
 8019284:	3301      	adds	r3, #1
 8019286:	b29b      	uxth	r3, r3
 8019288:	843b      	strh	r3, [r7, #32]
 801928a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801928e:	2b09      	cmp	r3, #9
 8019290:	f77f af4c 	ble.w	801912c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019294:	7afb      	ldrb	r3, [r7, #11]
 8019296:	f003 0302 	and.w	r3, r3, #2
 801929a:	2b00      	cmp	r3, #0
 801929c:	d108      	bne.n	80192b0 <etharp_find_entry+0x1b8>
 801929e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192a2:	2b0a      	cmp	r3, #10
 80192a4:	d107      	bne.n	80192b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80192a6:	7afb      	ldrb	r3, [r7, #11]
 80192a8:	f003 0301 	and.w	r3, r3, #1
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d102      	bne.n	80192b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80192b0:	f04f 33ff 	mov.w	r3, #4294967295
 80192b4:	e085      	b.n	80193c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80192b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192ba:	2b09      	cmp	r3, #9
 80192bc:	dc02      	bgt.n	80192c4 <etharp_find_entry+0x1cc>
    i = empty;
 80192be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192c0:	843b      	strh	r3, [r7, #32]
 80192c2:	e039      	b.n	8019338 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80192c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80192c8:	2b09      	cmp	r3, #9
 80192ca:	dc14      	bgt.n	80192f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80192cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80192d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192d4:	493d      	ldr	r1, [pc, #244]	; (80193cc <etharp_find_entry+0x2d4>)
 80192d6:	4613      	mov	r3, r2
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	4413      	add	r3, r2
 80192dc:	00db      	lsls	r3, r3, #3
 80192de:	440b      	add	r3, r1
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d018      	beq.n	8019318 <etharp_find_entry+0x220>
 80192e6:	4b3a      	ldr	r3, [pc, #232]	; (80193d0 <etharp_find_entry+0x2d8>)
 80192e8:	f240 126d 	movw	r2, #365	; 0x16d
 80192ec:	493b      	ldr	r1, [pc, #236]	; (80193dc <etharp_find_entry+0x2e4>)
 80192ee:	483a      	ldr	r0, [pc, #232]	; (80193d8 <etharp_find_entry+0x2e0>)
 80192f0:	f002 fe96 	bl	801c020 <iprintf>
 80192f4:	e010      	b.n	8019318 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80192f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80192fa:	2b09      	cmp	r3, #9
 80192fc:	dc02      	bgt.n	8019304 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80192fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019300:	843b      	strh	r3, [r7, #32]
 8019302:	e009      	b.n	8019318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019304:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019308:	2b09      	cmp	r3, #9
 801930a:	dc02      	bgt.n	8019312 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801930c:	8bfb      	ldrh	r3, [r7, #30]
 801930e:	843b      	strh	r3, [r7, #32]
 8019310:	e002      	b.n	8019318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019312:	f04f 33ff 	mov.w	r3, #4294967295
 8019316:	e054      	b.n	80193c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801931c:	2b09      	cmp	r3, #9
 801931e:	dd06      	ble.n	801932e <etharp_find_entry+0x236>
 8019320:	4b2b      	ldr	r3, [pc, #172]	; (80193d0 <etharp_find_entry+0x2d8>)
 8019322:	f240 127f 	movw	r2, #383	; 0x17f
 8019326:	492e      	ldr	r1, [pc, #184]	; (80193e0 <etharp_find_entry+0x2e8>)
 8019328:	482b      	ldr	r0, [pc, #172]	; (80193d8 <etharp_find_entry+0x2e0>)
 801932a:	f002 fe79 	bl	801c020 <iprintf>
    etharp_free_entry(i);
 801932e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019332:	4618      	mov	r0, r3
 8019334:	f7ff fe06 	bl	8018f44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019338:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801933c:	2b09      	cmp	r3, #9
 801933e:	dd06      	ble.n	801934e <etharp_find_entry+0x256>
 8019340:	4b23      	ldr	r3, [pc, #140]	; (80193d0 <etharp_find_entry+0x2d8>)
 8019342:	f240 1283 	movw	r2, #387	; 0x183
 8019346:	4926      	ldr	r1, [pc, #152]	; (80193e0 <etharp_find_entry+0x2e8>)
 8019348:	4823      	ldr	r0, [pc, #140]	; (80193d8 <etharp_find_entry+0x2e0>)
 801934a:	f002 fe69 	bl	801c020 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801934e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019352:	491e      	ldr	r1, [pc, #120]	; (80193cc <etharp_find_entry+0x2d4>)
 8019354:	4613      	mov	r3, r2
 8019356:	005b      	lsls	r3, r3, #1
 8019358:	4413      	add	r3, r2
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	440b      	add	r3, r1
 801935e:	3314      	adds	r3, #20
 8019360:	781b      	ldrb	r3, [r3, #0]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d006      	beq.n	8019374 <etharp_find_entry+0x27c>
 8019366:	4b1a      	ldr	r3, [pc, #104]	; (80193d0 <etharp_find_entry+0x2d8>)
 8019368:	f240 1285 	movw	r2, #389	; 0x185
 801936c:	491d      	ldr	r1, [pc, #116]	; (80193e4 <etharp_find_entry+0x2ec>)
 801936e:	481a      	ldr	r0, [pc, #104]	; (80193d8 <etharp_find_entry+0x2e0>)
 8019370:	f002 fe56 	bl	801c020 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d00b      	beq.n	8019392 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801937a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	6819      	ldr	r1, [r3, #0]
 8019382:	4812      	ldr	r0, [pc, #72]	; (80193cc <etharp_find_entry+0x2d4>)
 8019384:	4613      	mov	r3, r2
 8019386:	005b      	lsls	r3, r3, #1
 8019388:	4413      	add	r3, r2
 801938a:	00db      	lsls	r3, r3, #3
 801938c:	4403      	add	r3, r0
 801938e:	3304      	adds	r3, #4
 8019390:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019396:	490d      	ldr	r1, [pc, #52]	; (80193cc <etharp_find_entry+0x2d4>)
 8019398:	4613      	mov	r3, r2
 801939a:	005b      	lsls	r3, r3, #1
 801939c:	4413      	add	r3, r2
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	440b      	add	r3, r1
 80193a2:	3312      	adds	r3, #18
 80193a4:	2200      	movs	r2, #0
 80193a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80193a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193ac:	4907      	ldr	r1, [pc, #28]	; (80193cc <etharp_find_entry+0x2d4>)
 80193ae:	4613      	mov	r3, r2
 80193b0:	005b      	lsls	r3, r3, #1
 80193b2:	4413      	add	r3, r2
 80193b4:	00db      	lsls	r3, r3, #3
 80193b6:	440b      	add	r3, r1
 80193b8:	3308      	adds	r3, #8
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80193be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3728      	adds	r7, #40	; 0x28
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	20001084 	.word	0x20001084
 80193d0:	08023cd4 	.word	0x08023cd4
 80193d4:	08023d0c 	.word	0x08023d0c
 80193d8:	08023d4c 	.word	0x08023d4c
 80193dc:	08023d74 	.word	0x08023d74
 80193e0:	08023d8c 	.word	0x08023d8c
 80193e4:	08023da0 	.word	0x08023da0

080193e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b088      	sub	sp, #32
 80193ec:	af02      	add	r7, sp, #8
 80193ee:	60f8      	str	r0, [r7, #12]
 80193f0:	60b9      	str	r1, [r7, #8]
 80193f2:	607a      	str	r2, [r7, #4]
 80193f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80193fc:	2b06      	cmp	r3, #6
 80193fe:	d006      	beq.n	801940e <etharp_update_arp_entry+0x26>
 8019400:	4b48      	ldr	r3, [pc, #288]	; (8019524 <etharp_update_arp_entry+0x13c>)
 8019402:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019406:	4948      	ldr	r1, [pc, #288]	; (8019528 <etharp_update_arp_entry+0x140>)
 8019408:	4848      	ldr	r0, [pc, #288]	; (801952c <etharp_update_arp_entry+0x144>)
 801940a:	f002 fe09 	bl	801c020 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801940e:	68bb      	ldr	r3, [r7, #8]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d012      	beq.n	801943a <etharp_update_arp_entry+0x52>
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d00e      	beq.n	801943a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	68f9      	ldr	r1, [r7, #12]
 8019422:	4618      	mov	r0, r3
 8019424:	f001 f91e 	bl	801a664 <ip4_addr_isbroadcast_u32>
 8019428:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801942a:	2b00      	cmp	r3, #0
 801942c:	d105      	bne.n	801943a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801942e:	68bb      	ldr	r3, [r7, #8]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019436:	2be0      	cmp	r3, #224	; 0xe0
 8019438:	d102      	bne.n	8019440 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801943a:	f06f 030f 	mvn.w	r3, #15
 801943e:	e06c      	b.n	801951a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019440:	78fb      	ldrb	r3, [r7, #3]
 8019442:	68fa      	ldr	r2, [r7, #12]
 8019444:	4619      	mov	r1, r3
 8019446:	68b8      	ldr	r0, [r7, #8]
 8019448:	f7ff fe56 	bl	80190f8 <etharp_find_entry>
 801944c:	4603      	mov	r3, r0
 801944e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019450:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019454:	2b00      	cmp	r3, #0
 8019456:	da02      	bge.n	801945e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019458:	8afb      	ldrh	r3, [r7, #22]
 801945a:	b25b      	sxtb	r3, r3
 801945c:	e05d      	b.n	801951a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801945e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019462:	4933      	ldr	r1, [pc, #204]	; (8019530 <etharp_update_arp_entry+0x148>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	3314      	adds	r3, #20
 8019470:	2202      	movs	r2, #2
 8019472:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019478:	492d      	ldr	r1, [pc, #180]	; (8019530 <etharp_update_arp_entry+0x148>)
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	3308      	adds	r3, #8
 8019486:	68fa      	ldr	r2, [r7, #12]
 8019488:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801948a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801948e:	4613      	mov	r3, r2
 8019490:	005b      	lsls	r3, r3, #1
 8019492:	4413      	add	r3, r2
 8019494:	00db      	lsls	r3, r3, #3
 8019496:	3308      	adds	r3, #8
 8019498:	4a25      	ldr	r2, [pc, #148]	; (8019530 <etharp_update_arp_entry+0x148>)
 801949a:	4413      	add	r3, r2
 801949c:	3304      	adds	r3, #4
 801949e:	2206      	movs	r2, #6
 80194a0:	6879      	ldr	r1, [r7, #4]
 80194a2:	4618      	mov	r0, r3
 80194a4:	f002 f88b 	bl	801b5be <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80194a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194ac:	4920      	ldr	r1, [pc, #128]	; (8019530 <etharp_update_arp_entry+0x148>)
 80194ae:	4613      	mov	r3, r2
 80194b0:	005b      	lsls	r3, r3, #1
 80194b2:	4413      	add	r3, r2
 80194b4:	00db      	lsls	r3, r3, #3
 80194b6:	440b      	add	r3, r1
 80194b8:	3312      	adds	r3, #18
 80194ba:	2200      	movs	r2, #0
 80194bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80194be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194c2:	491b      	ldr	r1, [pc, #108]	; (8019530 <etharp_update_arp_entry+0x148>)
 80194c4:	4613      	mov	r3, r2
 80194c6:	005b      	lsls	r3, r3, #1
 80194c8:	4413      	add	r3, r2
 80194ca:	00db      	lsls	r3, r3, #3
 80194cc:	440b      	add	r3, r1
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d021      	beq.n	8019518 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80194d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194d8:	4915      	ldr	r1, [pc, #84]	; (8019530 <etharp_update_arp_entry+0x148>)
 80194da:	4613      	mov	r3, r2
 80194dc:	005b      	lsls	r3, r3, #1
 80194de:	4413      	add	r3, r2
 80194e0:	00db      	lsls	r3, r3, #3
 80194e2:	440b      	add	r3, r1
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80194e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80194ec:	4910      	ldr	r1, [pc, #64]	; (8019530 <etharp_update_arp_entry+0x148>)
 80194ee:	4613      	mov	r3, r2
 80194f0:	005b      	lsls	r3, r3, #1
 80194f2:	4413      	add	r3, r2
 80194f4:	00db      	lsls	r3, r3, #3
 80194f6:	440b      	add	r3, r1
 80194f8:	2200      	movs	r2, #0
 80194fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8019502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019506:	9300      	str	r3, [sp, #0]
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6939      	ldr	r1, [r7, #16]
 801950c:	68f8      	ldr	r0, [r7, #12]
 801950e:	f001 ffad 	bl	801b46c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019512:	6938      	ldr	r0, [r7, #16]
 8019514:	f7f7 fd0a 	bl	8010f2c <pbuf_free>
  }
  return ERR_OK;
 8019518:	2300      	movs	r3, #0
}
 801951a:	4618      	mov	r0, r3
 801951c:	3718      	adds	r7, #24
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	08023cd4 	.word	0x08023cd4
 8019528:	08023dcc 	.word	0x08023dcc
 801952c:	08023d4c 	.word	0x08023d4c
 8019530:	20001084 	.word	0x20001084

08019534 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b084      	sub	sp, #16
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801953c:	2300      	movs	r3, #0
 801953e:	60fb      	str	r3, [r7, #12]
 8019540:	e01e      	b.n	8019580 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019542:	4913      	ldr	r1, [pc, #76]	; (8019590 <etharp_cleanup_netif+0x5c>)
 8019544:	68fa      	ldr	r2, [r7, #12]
 8019546:	4613      	mov	r3, r2
 8019548:	005b      	lsls	r3, r3, #1
 801954a:	4413      	add	r3, r2
 801954c:	00db      	lsls	r3, r3, #3
 801954e:	440b      	add	r3, r1
 8019550:	3314      	adds	r3, #20
 8019552:	781b      	ldrb	r3, [r3, #0]
 8019554:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019556:	7afb      	ldrb	r3, [r7, #11]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d00e      	beq.n	801957a <etharp_cleanup_netif+0x46>
 801955c:	490c      	ldr	r1, [pc, #48]	; (8019590 <etharp_cleanup_netif+0x5c>)
 801955e:	68fa      	ldr	r2, [r7, #12]
 8019560:	4613      	mov	r3, r2
 8019562:	005b      	lsls	r3, r3, #1
 8019564:	4413      	add	r3, r2
 8019566:	00db      	lsls	r3, r3, #3
 8019568:	440b      	add	r3, r1
 801956a:	3308      	adds	r3, #8
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	429a      	cmp	r2, r3
 8019572:	d102      	bne.n	801957a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019574:	68f8      	ldr	r0, [r7, #12]
 8019576:	f7ff fce5 	bl	8018f44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	3301      	adds	r3, #1
 801957e:	60fb      	str	r3, [r7, #12]
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	2b09      	cmp	r3, #9
 8019584:	dddd      	ble.n	8019542 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019586:	bf00      	nop
 8019588:	3710      	adds	r7, #16
 801958a:	46bd      	mov	sp, r7
 801958c:	bd80      	pop	{r7, pc}
 801958e:	bf00      	nop
 8019590:	20001084 	.word	0x20001084

08019594 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019594:	b5b0      	push	{r4, r5, r7, lr}
 8019596:	b08a      	sub	sp, #40	; 0x28
 8019598:	af04      	add	r7, sp, #16
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d107      	bne.n	80195b4 <etharp_input+0x20>
 80195a4:	4b3f      	ldr	r3, [pc, #252]	; (80196a4 <etharp_input+0x110>)
 80195a6:	f240 228a 	movw	r2, #650	; 0x28a
 80195aa:	493f      	ldr	r1, [pc, #252]	; (80196a8 <etharp_input+0x114>)
 80195ac:	483f      	ldr	r0, [pc, #252]	; (80196ac <etharp_input+0x118>)
 80195ae:	f002 fd37 	bl	801c020 <iprintf>
 80195b2:	e074      	b.n	801969e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80195ba:	693b      	ldr	r3, [r7, #16]
 80195bc:	881b      	ldrh	r3, [r3, #0]
 80195be:	b29b      	uxth	r3, r3
 80195c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195c4:	d10c      	bne.n	80195e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80195c6:	693b      	ldr	r3, [r7, #16]
 80195c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80195ca:	2b06      	cmp	r3, #6
 80195cc:	d108      	bne.n	80195e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80195d2:	2b04      	cmp	r3, #4
 80195d4:	d104      	bne.n	80195e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	885b      	ldrh	r3, [r3, #2]
 80195da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80195dc:	2b08      	cmp	r3, #8
 80195de:	d003      	beq.n	80195e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	f7f7 fca3 	bl	8010f2c <pbuf_free>
    return;
 80195e6:	e05a      	b.n	801969e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80195e8:	693b      	ldr	r3, [r7, #16]
 80195ea:	330e      	adds	r3, #14
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80195f0:	693b      	ldr	r3, [r7, #16]
 80195f2:	3318      	adds	r3, #24
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	3304      	adds	r3, #4
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d102      	bne.n	8019608 <etharp_input+0x74>
    for_us = 0;
 8019602:	2300      	movs	r3, #0
 8019604:	75fb      	strb	r3, [r7, #23]
 8019606:	e009      	b.n	801961c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019608:	68ba      	ldr	r2, [r7, #8]
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	3304      	adds	r3, #4
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	429a      	cmp	r2, r3
 8019612:	bf0c      	ite	eq
 8019614:	2301      	moveq	r3, #1
 8019616:	2300      	movne	r3, #0
 8019618:	b2db      	uxtb	r3, r3
 801961a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	f103 0208 	add.w	r2, r3, #8
 8019622:	7dfb      	ldrb	r3, [r7, #23]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d001      	beq.n	801962c <etharp_input+0x98>
 8019628:	2301      	movs	r3, #1
 801962a:	e000      	b.n	801962e <etharp_input+0x9a>
 801962c:	2302      	movs	r3, #2
 801962e:	f107 010c 	add.w	r1, r7, #12
 8019632:	6838      	ldr	r0, [r7, #0]
 8019634:	f7ff fed8 	bl	80193e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019638:	693b      	ldr	r3, [r7, #16]
 801963a:	88db      	ldrh	r3, [r3, #6]
 801963c:	b29b      	uxth	r3, r3
 801963e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019642:	d003      	beq.n	801964c <etharp_input+0xb8>
 8019644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019648:	d01e      	beq.n	8019688 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801964a:	e025      	b.n	8019698 <etharp_input+0x104>
      if (for_us) {
 801964c:	7dfb      	ldrb	r3, [r7, #23]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d021      	beq.n	8019696 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019668:	693a      	ldr	r2, [r7, #16]
 801966a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801966c:	2102      	movs	r1, #2
 801966e:	9103      	str	r1, [sp, #12]
 8019670:	f107 010c 	add.w	r1, r7, #12
 8019674:	9102      	str	r1, [sp, #8]
 8019676:	9201      	str	r2, [sp, #4]
 8019678:	9300      	str	r3, [sp, #0]
 801967a:	462b      	mov	r3, r5
 801967c:	4622      	mov	r2, r4
 801967e:	4601      	mov	r1, r0
 8019680:	6838      	ldr	r0, [r7, #0]
 8019682:	f000 faef 	bl	8019c64 <etharp_raw>
      break;
 8019686:	e006      	b.n	8019696 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8019688:	f107 030c 	add.w	r3, r7, #12
 801968c:	4619      	mov	r1, r3
 801968e:	6838      	ldr	r0, [r7, #0]
 8019690:	f7fe f9fe 	bl	8017a90 <dhcp_arp_reply>
      break;
 8019694:	e000      	b.n	8019698 <etharp_input+0x104>
      break;
 8019696:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	f7f7 fc47 	bl	8010f2c <pbuf_free>
}
 801969e:	3718      	adds	r7, #24
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bdb0      	pop	{r4, r5, r7, pc}
 80196a4:	08023cd4 	.word	0x08023cd4
 80196a8:	08023e24 	.word	0x08023e24
 80196ac:	08023d4c 	.word	0x08023d4c

080196b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b086      	sub	sp, #24
 80196b4:	af02      	add	r7, sp, #8
 80196b6:	60f8      	str	r0, [r7, #12]
 80196b8:	60b9      	str	r1, [r7, #8]
 80196ba:	4613      	mov	r3, r2
 80196bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80196be:	79fa      	ldrb	r2, [r7, #7]
 80196c0:	4944      	ldr	r1, [pc, #272]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 80196c2:	4613      	mov	r3, r2
 80196c4:	005b      	lsls	r3, r3, #1
 80196c6:	4413      	add	r3, r2
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	440b      	add	r3, r1
 80196cc:	3314      	adds	r3, #20
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	2b01      	cmp	r3, #1
 80196d2:	d806      	bhi.n	80196e2 <etharp_output_to_arp_index+0x32>
 80196d4:	4b40      	ldr	r3, [pc, #256]	; (80197d8 <etharp_output_to_arp_index+0x128>)
 80196d6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80196da:	4940      	ldr	r1, [pc, #256]	; (80197dc <etharp_output_to_arp_index+0x12c>)
 80196dc:	4840      	ldr	r0, [pc, #256]	; (80197e0 <etharp_output_to_arp_index+0x130>)
 80196de:	f002 fc9f 	bl	801c020 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80196e2:	79fa      	ldrb	r2, [r7, #7]
 80196e4:	493b      	ldr	r1, [pc, #236]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 80196e6:	4613      	mov	r3, r2
 80196e8:	005b      	lsls	r3, r3, #1
 80196ea:	4413      	add	r3, r2
 80196ec:	00db      	lsls	r3, r3, #3
 80196ee:	440b      	add	r3, r1
 80196f0:	3314      	adds	r3, #20
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	2b02      	cmp	r3, #2
 80196f6:	d153      	bne.n	80197a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80196f8:	79fa      	ldrb	r2, [r7, #7]
 80196fa:	4936      	ldr	r1, [pc, #216]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 80196fc:	4613      	mov	r3, r2
 80196fe:	005b      	lsls	r3, r3, #1
 8019700:	4413      	add	r3, r2
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	440b      	add	r3, r1
 8019706:	3312      	adds	r3, #18
 8019708:	881b      	ldrh	r3, [r3, #0]
 801970a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801970e:	d919      	bls.n	8019744 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019710:	79fa      	ldrb	r2, [r7, #7]
 8019712:	4613      	mov	r3, r2
 8019714:	005b      	lsls	r3, r3, #1
 8019716:	4413      	add	r3, r2
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	4a2e      	ldr	r2, [pc, #184]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 801971c:	4413      	add	r3, r2
 801971e:	3304      	adds	r3, #4
 8019720:	4619      	mov	r1, r3
 8019722:	68f8      	ldr	r0, [r7, #12]
 8019724:	f000 fb4c 	bl	8019dc0 <etharp_request>
 8019728:	4603      	mov	r3, r0
 801972a:	2b00      	cmp	r3, #0
 801972c:	d138      	bne.n	80197a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801972e:	79fa      	ldrb	r2, [r7, #7]
 8019730:	4928      	ldr	r1, [pc, #160]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 8019732:	4613      	mov	r3, r2
 8019734:	005b      	lsls	r3, r3, #1
 8019736:	4413      	add	r3, r2
 8019738:	00db      	lsls	r3, r3, #3
 801973a:	440b      	add	r3, r1
 801973c:	3314      	adds	r3, #20
 801973e:	2203      	movs	r2, #3
 8019740:	701a      	strb	r2, [r3, #0]
 8019742:	e02d      	b.n	80197a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019744:	79fa      	ldrb	r2, [r7, #7]
 8019746:	4923      	ldr	r1, [pc, #140]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 8019748:	4613      	mov	r3, r2
 801974a:	005b      	lsls	r3, r3, #1
 801974c:	4413      	add	r3, r2
 801974e:	00db      	lsls	r3, r3, #3
 8019750:	440b      	add	r3, r1
 8019752:	3312      	adds	r3, #18
 8019754:	881b      	ldrh	r3, [r3, #0]
 8019756:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801975a:	d321      	bcc.n	80197a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801975c:	79fa      	ldrb	r2, [r7, #7]
 801975e:	4613      	mov	r3, r2
 8019760:	005b      	lsls	r3, r3, #1
 8019762:	4413      	add	r3, r2
 8019764:	00db      	lsls	r3, r3, #3
 8019766:	4a1b      	ldr	r2, [pc, #108]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 8019768:	4413      	add	r3, r2
 801976a:	1d19      	adds	r1, r3, #4
 801976c:	79fa      	ldrb	r2, [r7, #7]
 801976e:	4613      	mov	r3, r2
 8019770:	005b      	lsls	r3, r3, #1
 8019772:	4413      	add	r3, r2
 8019774:	00db      	lsls	r3, r3, #3
 8019776:	3308      	adds	r3, #8
 8019778:	4a16      	ldr	r2, [pc, #88]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 801977a:	4413      	add	r3, r2
 801977c:	3304      	adds	r3, #4
 801977e:	461a      	mov	r2, r3
 8019780:	68f8      	ldr	r0, [r7, #12]
 8019782:	f000 fafb 	bl	8019d7c <etharp_request_dst>
 8019786:	4603      	mov	r3, r0
 8019788:	2b00      	cmp	r3, #0
 801978a:	d109      	bne.n	80197a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801978c:	79fa      	ldrb	r2, [r7, #7]
 801978e:	4911      	ldr	r1, [pc, #68]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 8019790:	4613      	mov	r3, r2
 8019792:	005b      	lsls	r3, r3, #1
 8019794:	4413      	add	r3, r2
 8019796:	00db      	lsls	r3, r3, #3
 8019798:	440b      	add	r3, r1
 801979a:	3314      	adds	r3, #20
 801979c:	2203      	movs	r2, #3
 801979e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80197a6:	79fa      	ldrb	r2, [r7, #7]
 80197a8:	4613      	mov	r3, r2
 80197aa:	005b      	lsls	r3, r3, #1
 80197ac:	4413      	add	r3, r2
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	3308      	adds	r3, #8
 80197b2:	4a08      	ldr	r2, [pc, #32]	; (80197d4 <etharp_output_to_arp_index+0x124>)
 80197b4:	4413      	add	r3, r2
 80197b6:	1d1a      	adds	r2, r3, #4
 80197b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80197bc:	9300      	str	r3, [sp, #0]
 80197be:	4613      	mov	r3, r2
 80197c0:	460a      	mov	r2, r1
 80197c2:	68b9      	ldr	r1, [r7, #8]
 80197c4:	68f8      	ldr	r0, [r7, #12]
 80197c6:	f001 fe51 	bl	801b46c <ethernet_output>
 80197ca:	4603      	mov	r3, r0
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3710      	adds	r7, #16
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	20001084 	.word	0x20001084
 80197d8:	08023cd4 	.word	0x08023cd4
 80197dc:	08023e44 	.word	0x08023e44
 80197e0:	08023d4c 	.word	0x08023d4c

080197e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b08a      	sub	sp, #40	; 0x28
 80197e8:	af02      	add	r7, sp, #8
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d106      	bne.n	8019808 <etharp_output+0x24>
 80197fa:	4b73      	ldr	r3, [pc, #460]	; (80199c8 <etharp_output+0x1e4>)
 80197fc:	f240 321e 	movw	r2, #798	; 0x31e
 8019800:	4972      	ldr	r1, [pc, #456]	; (80199cc <etharp_output+0x1e8>)
 8019802:	4873      	ldr	r0, [pc, #460]	; (80199d0 <etharp_output+0x1ec>)
 8019804:	f002 fc0c 	bl	801c020 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d106      	bne.n	801981c <etharp_output+0x38>
 801980e:	4b6e      	ldr	r3, [pc, #440]	; (80199c8 <etharp_output+0x1e4>)
 8019810:	f240 321f 	movw	r2, #799	; 0x31f
 8019814:	496f      	ldr	r1, [pc, #444]	; (80199d4 <etharp_output+0x1f0>)
 8019816:	486e      	ldr	r0, [pc, #440]	; (80199d0 <etharp_output+0x1ec>)
 8019818:	f002 fc02 	bl	801c020 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d106      	bne.n	8019830 <etharp_output+0x4c>
 8019822:	4b69      	ldr	r3, [pc, #420]	; (80199c8 <etharp_output+0x1e4>)
 8019824:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019828:	496b      	ldr	r1, [pc, #428]	; (80199d8 <etharp_output+0x1f4>)
 801982a:	4869      	ldr	r0, [pc, #420]	; (80199d0 <etharp_output+0x1ec>)
 801982c:	f002 fbf8 	bl	801c020 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	68f9      	ldr	r1, [r7, #12]
 8019836:	4618      	mov	r0, r3
 8019838:	f000 ff14 	bl	801a664 <ip4_addr_isbroadcast_u32>
 801983c:	4603      	mov	r3, r0
 801983e:	2b00      	cmp	r3, #0
 8019840:	d002      	beq.n	8019848 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019842:	4b66      	ldr	r3, [pc, #408]	; (80199dc <etharp_output+0x1f8>)
 8019844:	61fb      	str	r3, [r7, #28]
 8019846:	e0af      	b.n	80199a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019850:	2be0      	cmp	r3, #224	; 0xe0
 8019852:	d118      	bne.n	8019886 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019854:	2301      	movs	r3, #1
 8019856:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019858:	2300      	movs	r3, #0
 801985a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801985c:	235e      	movs	r3, #94	; 0x5e
 801985e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	3301      	adds	r3, #1
 8019864:	781b      	ldrb	r3, [r3, #0]
 8019866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801986a:	b2db      	uxtb	r3, r3
 801986c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	3302      	adds	r3, #2
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	3303      	adds	r3, #3
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801987e:	f107 0310 	add.w	r3, r7, #16
 8019882:	61fb      	str	r3, [r7, #28]
 8019884:	e090      	b.n	80199a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	3304      	adds	r3, #4
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	405a      	eors	r2, r3
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	3308      	adds	r3, #8
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	4013      	ands	r3, r2
 801989a:	2b00      	cmp	r3, #0
 801989c:	d012      	beq.n	80198c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80198a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d00b      	beq.n	80198c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	330c      	adds	r3, #12
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d003      	beq.n	80198be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	330c      	adds	r3, #12
 80198ba:	61bb      	str	r3, [r7, #24]
 80198bc:	e002      	b.n	80198c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80198be:	f06f 0303 	mvn.w	r3, #3
 80198c2:	e07d      	b.n	80199c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80198c4:	4b46      	ldr	r3, [pc, #280]	; (80199e0 <etharp_output+0x1fc>)
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	4619      	mov	r1, r3
 80198ca:	4a46      	ldr	r2, [pc, #280]	; (80199e4 <etharp_output+0x200>)
 80198cc:	460b      	mov	r3, r1
 80198ce:	005b      	lsls	r3, r3, #1
 80198d0:	440b      	add	r3, r1
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	4413      	add	r3, r2
 80198d6:	3314      	adds	r3, #20
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	2b01      	cmp	r3, #1
 80198dc:	d925      	bls.n	801992a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80198de:	4b40      	ldr	r3, [pc, #256]	; (80199e0 <etharp_output+0x1fc>)
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	4619      	mov	r1, r3
 80198e4:	4a3f      	ldr	r2, [pc, #252]	; (80199e4 <etharp_output+0x200>)
 80198e6:	460b      	mov	r3, r1
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	440b      	add	r3, r1
 80198ec:	00db      	lsls	r3, r3, #3
 80198ee:	4413      	add	r3, r2
 80198f0:	3308      	adds	r3, #8
 80198f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80198f4:	68fa      	ldr	r2, [r7, #12]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d117      	bne.n	801992a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80198fa:	69bb      	ldr	r3, [r7, #24]
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	4b38      	ldr	r3, [pc, #224]	; (80199e0 <etharp_output+0x1fc>)
 8019900:	781b      	ldrb	r3, [r3, #0]
 8019902:	4618      	mov	r0, r3
 8019904:	4937      	ldr	r1, [pc, #220]	; (80199e4 <etharp_output+0x200>)
 8019906:	4603      	mov	r3, r0
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	4403      	add	r3, r0
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	440b      	add	r3, r1
 8019910:	3304      	adds	r3, #4
 8019912:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019914:	429a      	cmp	r2, r3
 8019916:	d108      	bne.n	801992a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019918:	4b31      	ldr	r3, [pc, #196]	; (80199e0 <etharp_output+0x1fc>)
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	461a      	mov	r2, r3
 801991e:	68b9      	ldr	r1, [r7, #8]
 8019920:	68f8      	ldr	r0, [r7, #12]
 8019922:	f7ff fec5 	bl	80196b0 <etharp_output_to_arp_index>
 8019926:	4603      	mov	r3, r0
 8019928:	e04a      	b.n	80199c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801992a:	2300      	movs	r3, #0
 801992c:	75fb      	strb	r3, [r7, #23]
 801992e:	e031      	b.n	8019994 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019930:	7dfa      	ldrb	r2, [r7, #23]
 8019932:	492c      	ldr	r1, [pc, #176]	; (80199e4 <etharp_output+0x200>)
 8019934:	4613      	mov	r3, r2
 8019936:	005b      	lsls	r3, r3, #1
 8019938:	4413      	add	r3, r2
 801993a:	00db      	lsls	r3, r3, #3
 801993c:	440b      	add	r3, r1
 801993e:	3314      	adds	r3, #20
 8019940:	781b      	ldrb	r3, [r3, #0]
 8019942:	2b01      	cmp	r3, #1
 8019944:	d923      	bls.n	801998e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019946:	7dfa      	ldrb	r2, [r7, #23]
 8019948:	4926      	ldr	r1, [pc, #152]	; (80199e4 <etharp_output+0x200>)
 801994a:	4613      	mov	r3, r2
 801994c:	005b      	lsls	r3, r3, #1
 801994e:	4413      	add	r3, r2
 8019950:	00db      	lsls	r3, r3, #3
 8019952:	440b      	add	r3, r1
 8019954:	3308      	adds	r3, #8
 8019956:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019958:	68fa      	ldr	r2, [r7, #12]
 801995a:	429a      	cmp	r2, r3
 801995c:	d117      	bne.n	801998e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801995e:	69bb      	ldr	r3, [r7, #24]
 8019960:	6819      	ldr	r1, [r3, #0]
 8019962:	7dfa      	ldrb	r2, [r7, #23]
 8019964:	481f      	ldr	r0, [pc, #124]	; (80199e4 <etharp_output+0x200>)
 8019966:	4613      	mov	r3, r2
 8019968:	005b      	lsls	r3, r3, #1
 801996a:	4413      	add	r3, r2
 801996c:	00db      	lsls	r3, r3, #3
 801996e:	4403      	add	r3, r0
 8019970:	3304      	adds	r3, #4
 8019972:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019974:	4299      	cmp	r1, r3
 8019976:	d10a      	bne.n	801998e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019978:	4a19      	ldr	r2, [pc, #100]	; (80199e0 <etharp_output+0x1fc>)
 801997a:	7dfb      	ldrb	r3, [r7, #23]
 801997c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801997e:	7dfb      	ldrb	r3, [r7, #23]
 8019980:	461a      	mov	r2, r3
 8019982:	68b9      	ldr	r1, [r7, #8]
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f7ff fe93 	bl	80196b0 <etharp_output_to_arp_index>
 801998a:	4603      	mov	r3, r0
 801998c:	e018      	b.n	80199c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801998e:	7dfb      	ldrb	r3, [r7, #23]
 8019990:	3301      	adds	r3, #1
 8019992:	75fb      	strb	r3, [r7, #23]
 8019994:	7dfb      	ldrb	r3, [r7, #23]
 8019996:	2b09      	cmp	r3, #9
 8019998:	d9ca      	bls.n	8019930 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801999a:	68ba      	ldr	r2, [r7, #8]
 801999c:	69b9      	ldr	r1, [r7, #24]
 801999e:	68f8      	ldr	r0, [r7, #12]
 80199a0:	f000 f822 	bl	80199e8 <etharp_query>
 80199a4:	4603      	mov	r3, r0
 80199a6:	e00b      	b.n	80199c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80199ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80199b2:	9300      	str	r3, [sp, #0]
 80199b4:	69fb      	ldr	r3, [r7, #28]
 80199b6:	68b9      	ldr	r1, [r7, #8]
 80199b8:	68f8      	ldr	r0, [r7, #12]
 80199ba:	f001 fd57 	bl	801b46c <ethernet_output>
 80199be:	4603      	mov	r3, r0
}
 80199c0:	4618      	mov	r0, r3
 80199c2:	3720      	adds	r7, #32
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	08023cd4 	.word	0x08023cd4
 80199cc:	08023e24 	.word	0x08023e24
 80199d0:	08023d4c 	.word	0x08023d4c
 80199d4:	08023e74 	.word	0x08023e74
 80199d8:	08023e14 	.word	0x08023e14
 80199dc:	080249f8 	.word	0x080249f8
 80199e0:	20001174 	.word	0x20001174
 80199e4:	20001084 	.word	0x20001084

080199e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b08c      	sub	sp, #48	; 0x30
 80199ec:	af02      	add	r7, sp, #8
 80199ee:	60f8      	str	r0, [r7, #12]
 80199f0:	60b9      	str	r1, [r7, #8]
 80199f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	332a      	adds	r3, #42	; 0x2a
 80199f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80199fa:	23ff      	movs	r3, #255	; 0xff
 80199fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019a00:	2300      	movs	r3, #0
 8019a02:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019a04:	68bb      	ldr	r3, [r7, #8]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	68f9      	ldr	r1, [r7, #12]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f000 fe2a 	bl	801a664 <ip4_addr_isbroadcast_u32>
 8019a10:	4603      	mov	r3, r0
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d10c      	bne.n	8019a30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019a1e:	2be0      	cmp	r3, #224	; 0xe0
 8019a20:	d006      	beq.n	8019a30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d003      	beq.n	8019a30 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d102      	bne.n	8019a36 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019a30:	f06f 030f 	mvn.w	r3, #15
 8019a34:	e102      	b.n	8019c3c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019a36:	68fa      	ldr	r2, [r7, #12]
 8019a38:	2101      	movs	r1, #1
 8019a3a:	68b8      	ldr	r0, [r7, #8]
 8019a3c:	f7ff fb5c 	bl	80190f8 <etharp_find_entry>
 8019a40:	4603      	mov	r3, r0
 8019a42:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019a44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	da02      	bge.n	8019a52 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019a4c:	8a7b      	ldrh	r3, [r7, #18]
 8019a4e:	b25b      	sxtb	r3, r3
 8019a50:	e0f4      	b.n	8019c3c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019a52:	8a7b      	ldrh	r3, [r7, #18]
 8019a54:	2b7e      	cmp	r3, #126	; 0x7e
 8019a56:	d906      	bls.n	8019a66 <etharp_query+0x7e>
 8019a58:	4b7a      	ldr	r3, [pc, #488]	; (8019c44 <etharp_query+0x25c>)
 8019a5a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019a5e:	497a      	ldr	r1, [pc, #488]	; (8019c48 <etharp_query+0x260>)
 8019a60:	487a      	ldr	r0, [pc, #488]	; (8019c4c <etharp_query+0x264>)
 8019a62:	f002 fadd 	bl	801c020 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019a66:	8a7b      	ldrh	r3, [r7, #18]
 8019a68:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019a6a:	7c7a      	ldrb	r2, [r7, #17]
 8019a6c:	4978      	ldr	r1, [pc, #480]	; (8019c50 <etharp_query+0x268>)
 8019a6e:	4613      	mov	r3, r2
 8019a70:	005b      	lsls	r3, r3, #1
 8019a72:	4413      	add	r3, r2
 8019a74:	00db      	lsls	r3, r3, #3
 8019a76:	440b      	add	r3, r1
 8019a78:	3314      	adds	r3, #20
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d115      	bne.n	8019aac <etharp_query+0xc4>
    is_new_entry = 1;
 8019a80:	2301      	movs	r3, #1
 8019a82:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019a84:	7c7a      	ldrb	r2, [r7, #17]
 8019a86:	4972      	ldr	r1, [pc, #456]	; (8019c50 <etharp_query+0x268>)
 8019a88:	4613      	mov	r3, r2
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	4413      	add	r3, r2
 8019a8e:	00db      	lsls	r3, r3, #3
 8019a90:	440b      	add	r3, r1
 8019a92:	3314      	adds	r3, #20
 8019a94:	2201      	movs	r2, #1
 8019a96:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019a98:	7c7a      	ldrb	r2, [r7, #17]
 8019a9a:	496d      	ldr	r1, [pc, #436]	; (8019c50 <etharp_query+0x268>)
 8019a9c:	4613      	mov	r3, r2
 8019a9e:	005b      	lsls	r3, r3, #1
 8019aa0:	4413      	add	r3, r2
 8019aa2:	00db      	lsls	r3, r3, #3
 8019aa4:	440b      	add	r3, r1
 8019aa6:	3308      	adds	r3, #8
 8019aa8:	68fa      	ldr	r2, [r7, #12]
 8019aaa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019aac:	7c7a      	ldrb	r2, [r7, #17]
 8019aae:	4968      	ldr	r1, [pc, #416]	; (8019c50 <etharp_query+0x268>)
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	005b      	lsls	r3, r3, #1
 8019ab4:	4413      	add	r3, r2
 8019ab6:	00db      	lsls	r3, r3, #3
 8019ab8:	440b      	add	r3, r1
 8019aba:	3314      	adds	r3, #20
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d011      	beq.n	8019ae6 <etharp_query+0xfe>
 8019ac2:	7c7a      	ldrb	r2, [r7, #17]
 8019ac4:	4962      	ldr	r1, [pc, #392]	; (8019c50 <etharp_query+0x268>)
 8019ac6:	4613      	mov	r3, r2
 8019ac8:	005b      	lsls	r3, r3, #1
 8019aca:	4413      	add	r3, r2
 8019acc:	00db      	lsls	r3, r3, #3
 8019ace:	440b      	add	r3, r1
 8019ad0:	3314      	adds	r3, #20
 8019ad2:	781b      	ldrb	r3, [r3, #0]
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d806      	bhi.n	8019ae6 <etharp_query+0xfe>
 8019ad8:	4b5a      	ldr	r3, [pc, #360]	; (8019c44 <etharp_query+0x25c>)
 8019ada:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019ade:	495d      	ldr	r1, [pc, #372]	; (8019c54 <etharp_query+0x26c>)
 8019ae0:	485a      	ldr	r0, [pc, #360]	; (8019c4c <etharp_query+0x264>)
 8019ae2:	f002 fa9d 	bl	801c020 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019ae6:	6a3b      	ldr	r3, [r7, #32]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d102      	bne.n	8019af2 <etharp_query+0x10a>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d10c      	bne.n	8019b0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019af2:	68b9      	ldr	r1, [r7, #8]
 8019af4:	68f8      	ldr	r0, [r7, #12]
 8019af6:	f000 f963 	bl	8019dc0 <etharp_request>
 8019afa:	4603      	mov	r3, r0
 8019afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d102      	bne.n	8019b0c <etharp_query+0x124>
      return result;
 8019b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019b0a:	e097      	b.n	8019c3c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d106      	bne.n	8019b20 <etharp_query+0x138>
 8019b12:	4b4c      	ldr	r3, [pc, #304]	; (8019c44 <etharp_query+0x25c>)
 8019b14:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019b18:	494f      	ldr	r1, [pc, #316]	; (8019c58 <etharp_query+0x270>)
 8019b1a:	484c      	ldr	r0, [pc, #304]	; (8019c4c <etharp_query+0x264>)
 8019b1c:	f002 fa80 	bl	801c020 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019b20:	7c7a      	ldrb	r2, [r7, #17]
 8019b22:	494b      	ldr	r1, [pc, #300]	; (8019c50 <etharp_query+0x268>)
 8019b24:	4613      	mov	r3, r2
 8019b26:	005b      	lsls	r3, r3, #1
 8019b28:	4413      	add	r3, r2
 8019b2a:	00db      	lsls	r3, r3, #3
 8019b2c:	440b      	add	r3, r1
 8019b2e:	3314      	adds	r3, #20
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	2b01      	cmp	r3, #1
 8019b34:	d918      	bls.n	8019b68 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019b36:	4a49      	ldr	r2, [pc, #292]	; (8019c5c <etharp_query+0x274>)
 8019b38:	7c7b      	ldrb	r3, [r7, #17]
 8019b3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019b3c:	7c7a      	ldrb	r2, [r7, #17]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	005b      	lsls	r3, r3, #1
 8019b42:	4413      	add	r3, r2
 8019b44:	00db      	lsls	r3, r3, #3
 8019b46:	3308      	adds	r3, #8
 8019b48:	4a41      	ldr	r2, [pc, #260]	; (8019c50 <etharp_query+0x268>)
 8019b4a:	4413      	add	r3, r2
 8019b4c:	1d1a      	adds	r2, r3, #4
 8019b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019b52:	9300      	str	r3, [sp, #0]
 8019b54:	4613      	mov	r3, r2
 8019b56:	697a      	ldr	r2, [r7, #20]
 8019b58:	6879      	ldr	r1, [r7, #4]
 8019b5a:	68f8      	ldr	r0, [r7, #12]
 8019b5c:	f001 fc86 	bl	801b46c <ethernet_output>
 8019b60:	4603      	mov	r3, r0
 8019b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b66:	e067      	b.n	8019c38 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019b68:	7c7a      	ldrb	r2, [r7, #17]
 8019b6a:	4939      	ldr	r1, [pc, #228]	; (8019c50 <etharp_query+0x268>)
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	005b      	lsls	r3, r3, #1
 8019b70:	4413      	add	r3, r2
 8019b72:	00db      	lsls	r3, r3, #3
 8019b74:	440b      	add	r3, r1
 8019b76:	3314      	adds	r3, #20
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d15c      	bne.n	8019c38 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019b86:	e01c      	b.n	8019bc2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019b88:	69fb      	ldr	r3, [r7, #28]
 8019b8a:	895a      	ldrh	r2, [r3, #10]
 8019b8c:	69fb      	ldr	r3, [r7, #28]
 8019b8e:	891b      	ldrh	r3, [r3, #8]
 8019b90:	429a      	cmp	r2, r3
 8019b92:	d10a      	bne.n	8019baa <etharp_query+0x1c2>
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d006      	beq.n	8019baa <etharp_query+0x1c2>
 8019b9c:	4b29      	ldr	r3, [pc, #164]	; (8019c44 <etharp_query+0x25c>)
 8019b9e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019ba2:	492f      	ldr	r1, [pc, #188]	; (8019c60 <etharp_query+0x278>)
 8019ba4:	4829      	ldr	r0, [pc, #164]	; (8019c4c <etharp_query+0x264>)
 8019ba6:	f002 fa3b 	bl	801c020 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019baa:	69fb      	ldr	r3, [r7, #28]
 8019bac:	7b1b      	ldrb	r3, [r3, #12]
 8019bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d002      	beq.n	8019bbc <etharp_query+0x1d4>
        copy_needed = 1;
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	61bb      	str	r3, [r7, #24]
        break;
 8019bba:	e005      	b.n	8019bc8 <etharp_query+0x1e0>
      }
      p = p->next;
 8019bbc:	69fb      	ldr	r3, [r7, #28]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019bc2:	69fb      	ldr	r3, [r7, #28]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d1df      	bne.n	8019b88 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8019bc8:	69bb      	ldr	r3, [r7, #24]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d007      	beq.n	8019bde <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019bce:	687a      	ldr	r2, [r7, #4]
 8019bd0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019bd4:	200e      	movs	r0, #14
 8019bd6:	f7f7 fc15 	bl	8011404 <pbuf_clone>
 8019bda:	61f8      	str	r0, [r7, #28]
 8019bdc:	e004      	b.n	8019be8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019be2:	69f8      	ldr	r0, [r7, #28]
 8019be4:	f7f7 fa42 	bl	801106c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019be8:	69fb      	ldr	r3, [r7, #28]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d021      	beq.n	8019c32 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019bee:	7c7a      	ldrb	r2, [r7, #17]
 8019bf0:	4917      	ldr	r1, [pc, #92]	; (8019c50 <etharp_query+0x268>)
 8019bf2:	4613      	mov	r3, r2
 8019bf4:	005b      	lsls	r3, r3, #1
 8019bf6:	4413      	add	r3, r2
 8019bf8:	00db      	lsls	r3, r3, #3
 8019bfa:	440b      	add	r3, r1
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d00a      	beq.n	8019c18 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019c02:	7c7a      	ldrb	r2, [r7, #17]
 8019c04:	4912      	ldr	r1, [pc, #72]	; (8019c50 <etharp_query+0x268>)
 8019c06:	4613      	mov	r3, r2
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	4413      	add	r3, r2
 8019c0c:	00db      	lsls	r3, r3, #3
 8019c0e:	440b      	add	r3, r1
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	4618      	mov	r0, r3
 8019c14:	f7f7 f98a 	bl	8010f2c <pbuf_free>
      }
      arp_table[i].q = p;
 8019c18:	7c7a      	ldrb	r2, [r7, #17]
 8019c1a:	490d      	ldr	r1, [pc, #52]	; (8019c50 <etharp_query+0x268>)
 8019c1c:	4613      	mov	r3, r2
 8019c1e:	005b      	lsls	r3, r3, #1
 8019c20:	4413      	add	r3, r2
 8019c22:	00db      	lsls	r3, r3, #3
 8019c24:	440b      	add	r3, r1
 8019c26:	69fa      	ldr	r2, [r7, #28]
 8019c28:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c30:	e002      	b.n	8019c38 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019c32:	23ff      	movs	r3, #255	; 0xff
 8019c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	3728      	adds	r7, #40	; 0x28
 8019c40:	46bd      	mov	sp, r7
 8019c42:	bd80      	pop	{r7, pc}
 8019c44:	08023cd4 	.word	0x08023cd4
 8019c48:	08023e80 	.word	0x08023e80
 8019c4c:	08023d4c 	.word	0x08023d4c
 8019c50:	20001084 	.word	0x20001084
 8019c54:	08023e90 	.word	0x08023e90
 8019c58:	08023e74 	.word	0x08023e74
 8019c5c:	20001174 	.word	0x20001174
 8019c60:	08023eb8 	.word	0x08023eb8

08019c64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b08a      	sub	sp, #40	; 0x28
 8019c68:	af02      	add	r7, sp, #8
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	607a      	str	r2, [r7, #4]
 8019c70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019c72:	2300      	movs	r3, #0
 8019c74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d106      	bne.n	8019c8a <etharp_raw+0x26>
 8019c7c:	4b3a      	ldr	r3, [pc, #232]	; (8019d68 <etharp_raw+0x104>)
 8019c7e:	f240 4257 	movw	r2, #1111	; 0x457
 8019c82:	493a      	ldr	r1, [pc, #232]	; (8019d6c <etharp_raw+0x108>)
 8019c84:	483a      	ldr	r0, [pc, #232]	; (8019d70 <etharp_raw+0x10c>)
 8019c86:	f002 f9cb 	bl	801c020 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c8e:	211c      	movs	r1, #28
 8019c90:	200e      	movs	r0, #14
 8019c92:	f7f6 fe6b 	bl	801096c <pbuf_alloc>
 8019c96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019c98:	69bb      	ldr	r3, [r7, #24]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d102      	bne.n	8019ca4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019ca2:	e05d      	b.n	8019d60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019ca4:	69bb      	ldr	r3, [r7, #24]
 8019ca6:	895b      	ldrh	r3, [r3, #10]
 8019ca8:	2b1b      	cmp	r3, #27
 8019caa:	d806      	bhi.n	8019cba <etharp_raw+0x56>
 8019cac:	4b2e      	ldr	r3, [pc, #184]	; (8019d68 <etharp_raw+0x104>)
 8019cae:	f240 4263 	movw	r2, #1123	; 0x463
 8019cb2:	4930      	ldr	r1, [pc, #192]	; (8019d74 <etharp_raw+0x110>)
 8019cb4:	482e      	ldr	r0, [pc, #184]	; (8019d70 <etharp_raw+0x10c>)
 8019cb6:	f002 f9b3 	bl	801c020 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019cba:	69bb      	ldr	r3, [r7, #24]
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019cc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f7f5 fe9a 	bl	800f9fc <lwip_htons>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	461a      	mov	r2, r3
 8019ccc:	697b      	ldr	r3, [r7, #20]
 8019cce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019cd6:	2b06      	cmp	r3, #6
 8019cd8:	d006      	beq.n	8019ce8 <etharp_raw+0x84>
 8019cda:	4b23      	ldr	r3, [pc, #140]	; (8019d68 <etharp_raw+0x104>)
 8019cdc:	f240 426a 	movw	r2, #1130	; 0x46a
 8019ce0:	4925      	ldr	r1, [pc, #148]	; (8019d78 <etharp_raw+0x114>)
 8019ce2:	4823      	ldr	r0, [pc, #140]	; (8019d70 <etharp_raw+0x10c>)
 8019ce4:	f002 f99c 	bl	801c020 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019ce8:	697b      	ldr	r3, [r7, #20]
 8019cea:	3308      	adds	r3, #8
 8019cec:	2206      	movs	r2, #6
 8019cee:	6839      	ldr	r1, [r7, #0]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f001 fc64 	bl	801b5be <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	3312      	adds	r3, #18
 8019cfa:	2206      	movs	r2, #6
 8019cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f001 fc5d 	bl	801b5be <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	330e      	adds	r3, #14
 8019d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d0a:	6812      	ldr	r2, [r2, #0]
 8019d0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	3318      	adds	r3, #24
 8019d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d14:	6812      	ldr	r2, [r2, #0]
 8019d16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019d18:	697b      	ldr	r3, [r7, #20]
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	701a      	strb	r2, [r3, #0]
 8019d1e:	2200      	movs	r2, #0
 8019d20:	f042 0201 	orr.w	r2, r2, #1
 8019d24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	f042 0208 	orr.w	r2, r2, #8
 8019d2e:	709a      	strb	r2, [r3, #2]
 8019d30:	2200      	movs	r2, #0
 8019d32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	2206      	movs	r2, #6
 8019d38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019d3a:	697b      	ldr	r3, [r7, #20]
 8019d3c:	2204      	movs	r2, #4
 8019d3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019d40:	f640 0306 	movw	r3, #2054	; 0x806
 8019d44:	9300      	str	r3, [sp, #0]
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	68ba      	ldr	r2, [r7, #8]
 8019d4a:	69b9      	ldr	r1, [r7, #24]
 8019d4c:	68f8      	ldr	r0, [r7, #12]
 8019d4e:	f001 fb8d 	bl	801b46c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019d52:	69b8      	ldr	r0, [r7, #24]
 8019d54:	f7f7 f8ea 	bl	8010f2c <pbuf_free>
  p = NULL;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019d5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3720      	adds	r7, #32
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	08023cd4 	.word	0x08023cd4
 8019d6c:	08023e24 	.word	0x08023e24
 8019d70:	08023d4c 	.word	0x08023d4c
 8019d74:	08023ed4 	.word	0x08023ed4
 8019d78:	08023f08 	.word	0x08023f08

08019d7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b088      	sub	sp, #32
 8019d80:	af04      	add	r7, sp, #16
 8019d82:	60f8      	str	r0, [r7, #12]
 8019d84:	60b9      	str	r1, [r7, #8]
 8019d86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019d98:	2201      	movs	r2, #1
 8019d9a:	9203      	str	r2, [sp, #12]
 8019d9c:	68ba      	ldr	r2, [r7, #8]
 8019d9e:	9202      	str	r2, [sp, #8]
 8019da0:	4a06      	ldr	r2, [pc, #24]	; (8019dbc <etharp_request_dst+0x40>)
 8019da2:	9201      	str	r2, [sp, #4]
 8019da4:	9300      	str	r3, [sp, #0]
 8019da6:	4603      	mov	r3, r0
 8019da8:	687a      	ldr	r2, [r7, #4]
 8019daa:	68f8      	ldr	r0, [r7, #12]
 8019dac:	f7ff ff5a 	bl	8019c64 <etharp_raw>
 8019db0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019db2:	4618      	mov	r0, r3
 8019db4:	3710      	adds	r7, #16
 8019db6:	46bd      	mov	sp, r7
 8019db8:	bd80      	pop	{r7, pc}
 8019dba:	bf00      	nop
 8019dbc:	08024a00 	.word	0x08024a00

08019dc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
 8019dc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019dca:	4a05      	ldr	r2, [pc, #20]	; (8019de0 <etharp_request+0x20>)
 8019dcc:	6839      	ldr	r1, [r7, #0]
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f7ff ffd4 	bl	8019d7c <etharp_request_dst>
 8019dd4:	4603      	mov	r3, r0
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3708      	adds	r7, #8
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}
 8019dde:	bf00      	nop
 8019de0:	080249f8 	.word	0x080249f8

08019de4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b08e      	sub	sp, #56	; 0x38
 8019de8:	af04      	add	r7, sp, #16
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019dee:	4b79      	ldr	r3, [pc, #484]	; (8019fd4 <icmp_input+0x1f0>)
 8019df0:	689b      	ldr	r3, [r3, #8]
 8019df2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df6:	781b      	ldrb	r3, [r3, #0]
 8019df8:	f003 030f 	and.w	r3, r3, #15
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	009b      	lsls	r3, r3, #2
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e06:	2b13      	cmp	r3, #19
 8019e08:	f240 80cd 	bls.w	8019fa6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	895b      	ldrh	r3, [r3, #10]
 8019e10:	2b03      	cmp	r3, #3
 8019e12:	f240 80ca 	bls.w	8019faa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	685b      	ldr	r3, [r3, #4]
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019e20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	f000 80b7 	beq.w	8019f98 <icmp_input+0x1b4>
 8019e2a:	2b08      	cmp	r3, #8
 8019e2c:	f040 80b7 	bne.w	8019f9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019e30:	4b69      	ldr	r3, [pc, #420]	; (8019fd8 <icmp_input+0x1f4>)
 8019e32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019e34:	4b67      	ldr	r3, [pc, #412]	; (8019fd4 <icmp_input+0x1f0>)
 8019e36:	695b      	ldr	r3, [r3, #20]
 8019e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e3c:	2be0      	cmp	r3, #224	; 0xe0
 8019e3e:	f000 80bb 	beq.w	8019fb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019e42:	4b64      	ldr	r3, [pc, #400]	; (8019fd4 <icmp_input+0x1f0>)
 8019e44:	695a      	ldr	r2, [r3, #20]
 8019e46:	4b63      	ldr	r3, [pc, #396]	; (8019fd4 <icmp_input+0x1f0>)
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4619      	mov	r1, r3
 8019e4c:	4610      	mov	r0, r2
 8019e4e:	f000 fc09 	bl	801a664 <ip4_addr_isbroadcast_u32>
 8019e52:	4603      	mov	r3, r0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	f040 80b1 	bne.w	8019fbc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	891b      	ldrh	r3, [r3, #8]
 8019e5e:	2b07      	cmp	r3, #7
 8019e60:	f240 80a5 	bls.w	8019fae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e66:	330e      	adds	r3, #14
 8019e68:	4619      	mov	r1, r3
 8019e6a:	6878      	ldr	r0, [r7, #4]
 8019e6c:	f7f6 ffc8 	bl	8010e00 <pbuf_add_header>
 8019e70:	4603      	mov	r3, r0
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d04b      	beq.n	8019f0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	891a      	ldrh	r2, [r3, #8]
 8019e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e7c:	4413      	add	r3, r2
 8019e7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	891b      	ldrh	r3, [r3, #8]
 8019e84:	8b7a      	ldrh	r2, [r7, #26]
 8019e86:	429a      	cmp	r2, r3
 8019e88:	f0c0 809a 	bcc.w	8019fc0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019e8c:	8b7b      	ldrh	r3, [r7, #26]
 8019e8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019e92:	4619      	mov	r1, r3
 8019e94:	200e      	movs	r0, #14
 8019e96:	f7f6 fd69 	bl	801096c <pbuf_alloc>
 8019e9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019e9c:	697b      	ldr	r3, [r7, #20]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	f000 8090 	beq.w	8019fc4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019ea4:	697b      	ldr	r3, [r7, #20]
 8019ea6:	895b      	ldrh	r3, [r3, #10]
 8019ea8:	461a      	mov	r2, r3
 8019eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019eac:	3308      	adds	r3, #8
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d203      	bcs.n	8019eba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019eb2:	6978      	ldr	r0, [r7, #20]
 8019eb4:	f7f7 f83a 	bl	8010f2c <pbuf_free>
          goto icmperr;
 8019eb8:	e085      	b.n	8019fc6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f001 fb7b 	bl	801b5be <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019eca:	4619      	mov	r1, r3
 8019ecc:	6978      	ldr	r0, [r7, #20]
 8019ece:	f7f6 ffa7 	bl	8010e20 <pbuf_remove_header>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d009      	beq.n	8019eec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019ed8:	4b40      	ldr	r3, [pc, #256]	; (8019fdc <icmp_input+0x1f8>)
 8019eda:	22b6      	movs	r2, #182	; 0xb6
 8019edc:	4940      	ldr	r1, [pc, #256]	; (8019fe0 <icmp_input+0x1fc>)
 8019ede:	4841      	ldr	r0, [pc, #260]	; (8019fe4 <icmp_input+0x200>)
 8019ee0:	f002 f89e 	bl	801c020 <iprintf>
          pbuf_free(r);
 8019ee4:	6978      	ldr	r0, [r7, #20]
 8019ee6:	f7f7 f821 	bl	8010f2c <pbuf_free>
          goto icmperr;
 8019eea:	e06c      	b.n	8019fc6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019eec:	6879      	ldr	r1, [r7, #4]
 8019eee:	6978      	ldr	r0, [r7, #20]
 8019ef0:	f7f7 f944 	bl	801117c <pbuf_copy>
 8019ef4:	4603      	mov	r3, r0
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d003      	beq.n	8019f02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019efa:	6978      	ldr	r0, [r7, #20]
 8019efc:	f7f7 f816 	bl	8010f2c <pbuf_free>
          goto icmperr;
 8019f00:	e061      	b.n	8019fc6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	f7f7 f812 	bl	8010f2c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	607b      	str	r3, [r7, #4]
 8019f0c:	e00f      	b.n	8019f2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f10:	330e      	adds	r3, #14
 8019f12:	4619      	mov	r1, r3
 8019f14:	6878      	ldr	r0, [r7, #4]
 8019f16:	f7f6 ff83 	bl	8010e20 <pbuf_remove_header>
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d006      	beq.n	8019f2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019f20:	4b2e      	ldr	r3, [pc, #184]	; (8019fdc <icmp_input+0x1f8>)
 8019f22:	22c7      	movs	r2, #199	; 0xc7
 8019f24:	4930      	ldr	r1, [pc, #192]	; (8019fe8 <icmp_input+0x204>)
 8019f26:	482f      	ldr	r0, [pc, #188]	; (8019fe4 <icmp_input+0x200>)
 8019f28:	f002 f87a 	bl	801c020 <iprintf>
          goto icmperr;
 8019f2c:	e04b      	b.n	8019fc6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019f34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f36:	4619      	mov	r1, r3
 8019f38:	6878      	ldr	r0, [r7, #4]
 8019f3a:	f7f6 ff61 	bl	8010e00 <pbuf_add_header>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d12b      	bne.n	8019f9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	685b      	ldr	r3, [r3, #4]
 8019f48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019f4a:	69fb      	ldr	r3, [r7, #28]
 8019f4c:	681a      	ldr	r2, [r3, #0]
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019f52:	4b20      	ldr	r3, [pc, #128]	; (8019fd4 <icmp_input+0x1f0>)
 8019f54:	691a      	ldr	r2, [r3, #16]
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019f5a:	693b      	ldr	r3, [r7, #16]
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	2200      	movs	r2, #0
 8019f64:	709a      	strb	r2, [r3, #2]
 8019f66:	2200      	movs	r2, #0
 8019f68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	22ff      	movs	r2, #255	; 0xff
 8019f6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	2200      	movs	r2, #0
 8019f74:	729a      	strb	r2, [r3, #10]
 8019f76:	2200      	movs	r2, #0
 8019f78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	9302      	str	r3, [sp, #8]
 8019f7e:	2301      	movs	r3, #1
 8019f80:	9301      	str	r3, [sp, #4]
 8019f82:	2300      	movs	r3, #0
 8019f84:	9300      	str	r3, [sp, #0]
 8019f86:	23ff      	movs	r3, #255	; 0xff
 8019f88:	2200      	movs	r2, #0
 8019f8a:	69f9      	ldr	r1, [r7, #28]
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f000 fa91 	bl	801a4b4 <ip4_output_if>
 8019f92:	4603      	mov	r3, r0
 8019f94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019f96:	e001      	b.n	8019f9c <icmp_input+0x1b8>
      break;
 8019f98:	bf00      	nop
 8019f9a:	e000      	b.n	8019f9e <icmp_input+0x1ba>
      break;
 8019f9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019f9e:	6878      	ldr	r0, [r7, #4]
 8019fa0:	f7f6 ffc4 	bl	8010f2c <pbuf_free>
  return;
 8019fa4:	e013      	b.n	8019fce <icmp_input+0x1ea>
    goto lenerr;
 8019fa6:	bf00      	nop
 8019fa8:	e002      	b.n	8019fb0 <icmp_input+0x1cc>
    goto lenerr;
 8019faa:	bf00      	nop
 8019fac:	e000      	b.n	8019fb0 <icmp_input+0x1cc>
        goto lenerr;
 8019fae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	f7f6 ffbb 	bl	8010f2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019fb6:	e00a      	b.n	8019fce <icmp_input+0x1ea>
        goto icmperr;
 8019fb8:	bf00      	nop
 8019fba:	e004      	b.n	8019fc6 <icmp_input+0x1e2>
        goto icmperr;
 8019fbc:	bf00      	nop
 8019fbe:	e002      	b.n	8019fc6 <icmp_input+0x1e2>
          goto icmperr;
 8019fc0:	bf00      	nop
 8019fc2:	e000      	b.n	8019fc6 <icmp_input+0x1e2>
          goto icmperr;
 8019fc4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	f7f6 ffb0 	bl	8010f2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019fcc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019fce:	3728      	adds	r7, #40	; 0x28
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}
 8019fd4:	200051a0 	.word	0x200051a0
 8019fd8:	200051b4 	.word	0x200051b4
 8019fdc:	08023f4c 	.word	0x08023f4c
 8019fe0:	08023f84 	.word	0x08023f84
 8019fe4:	08023fbc 	.word	0x08023fbc
 8019fe8:	08023fe4 	.word	0x08023fe4

08019fec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b082      	sub	sp, #8
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019ff8:	78fb      	ldrb	r3, [r7, #3]
 8019ffa:	461a      	mov	r2, r3
 8019ffc:	2103      	movs	r1, #3
 8019ffe:	6878      	ldr	r0, [r7, #4]
 801a000:	f000 f814 	bl	801a02c <icmp_send_response>
}
 801a004:	bf00      	nop
 801a006:	3708      	adds	r7, #8
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}

0801a00c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b082      	sub	sp, #8
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
 801a014:	460b      	mov	r3, r1
 801a016:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a018:	78fb      	ldrb	r3, [r7, #3]
 801a01a:	461a      	mov	r2, r3
 801a01c:	210b      	movs	r1, #11
 801a01e:	6878      	ldr	r0, [r7, #4]
 801a020:	f000 f804 	bl	801a02c <icmp_send_response>
}
 801a024:	bf00      	nop
 801a026:	3708      	adds	r7, #8
 801a028:	46bd      	mov	sp, r7
 801a02a:	bd80      	pop	{r7, pc}

0801a02c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b08c      	sub	sp, #48	; 0x30
 801a030:	af04      	add	r7, sp, #16
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	460b      	mov	r3, r1
 801a036:	70fb      	strb	r3, [r7, #3]
 801a038:	4613      	mov	r3, r2
 801a03a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a03c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a040:	2124      	movs	r1, #36	; 0x24
 801a042:	2022      	movs	r0, #34	; 0x22
 801a044:	f7f6 fc92 	bl	801096c <pbuf_alloc>
 801a048:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a04a:	69fb      	ldr	r3, [r7, #28]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d04c      	beq.n	801a0ea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	895b      	ldrh	r3, [r3, #10]
 801a054:	2b23      	cmp	r3, #35	; 0x23
 801a056:	d806      	bhi.n	801a066 <icmp_send_response+0x3a>
 801a058:	4b26      	ldr	r3, [pc, #152]	; (801a0f4 <icmp_send_response+0xc8>)
 801a05a:	f240 1269 	movw	r2, #361	; 0x169
 801a05e:	4926      	ldr	r1, [pc, #152]	; (801a0f8 <icmp_send_response+0xcc>)
 801a060:	4826      	ldr	r0, [pc, #152]	; (801a0fc <icmp_send_response+0xd0>)
 801a062:	f001 ffdd 	bl	801c020 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a06c:	69fb      	ldr	r3, [r7, #28]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	78fa      	ldrb	r2, [r7, #3]
 801a076:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a078:	697b      	ldr	r3, [r7, #20]
 801a07a:	78ba      	ldrb	r2, [r7, #2]
 801a07c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a07e:	697b      	ldr	r3, [r7, #20]
 801a080:	2200      	movs	r2, #0
 801a082:	711a      	strb	r2, [r3, #4]
 801a084:	2200      	movs	r2, #0
 801a086:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	2200      	movs	r2, #0
 801a08c:	719a      	strb	r2, [r3, #6]
 801a08e:	2200      	movs	r2, #0
 801a090:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a092:	69fb      	ldr	r3, [r7, #28]
 801a094:	685b      	ldr	r3, [r3, #4]
 801a096:	f103 0008 	add.w	r0, r3, #8
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	685b      	ldr	r3, [r3, #4]
 801a09e:	221c      	movs	r2, #28
 801a0a0:	4619      	mov	r1, r3
 801a0a2:	f001 fa8c 	bl	801b5be <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a0a6:	69bb      	ldr	r3, [r7, #24]
 801a0a8:	68db      	ldr	r3, [r3, #12]
 801a0aa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a0ac:	f107 030c 	add.w	r3, r7, #12
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f000 f825 	bl	801a100 <ip4_route>
 801a0b6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d011      	beq.n	801a0e2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a0be:	697b      	ldr	r3, [r7, #20]
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	709a      	strb	r2, [r3, #2]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a0c8:	f107 020c 	add.w	r2, r7, #12
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	9302      	str	r3, [sp, #8]
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	9301      	str	r3, [sp, #4]
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	9300      	str	r3, [sp, #0]
 801a0d8:	23ff      	movs	r3, #255	; 0xff
 801a0da:	2100      	movs	r1, #0
 801a0dc:	69f8      	ldr	r0, [r7, #28]
 801a0de:	f000 f9e9 	bl	801a4b4 <ip4_output_if>
  }
  pbuf_free(q);
 801a0e2:	69f8      	ldr	r0, [r7, #28]
 801a0e4:	f7f6 ff22 	bl	8010f2c <pbuf_free>
 801a0e8:	e000      	b.n	801a0ec <icmp_send_response+0xc0>
    return;
 801a0ea:	bf00      	nop
}
 801a0ec:	3720      	adds	r7, #32
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	08023f4c 	.word	0x08023f4c
 801a0f8:	08024018 	.word	0x08024018
 801a0fc:	08023fbc 	.word	0x08023fbc

0801a100 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a100:	b480      	push	{r7}
 801a102:	b085      	sub	sp, #20
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a108:	4b33      	ldr	r3, [pc, #204]	; (801a1d8 <ip4_route+0xd8>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	60fb      	str	r3, [r7, #12]
 801a10e:	e036      	b.n	801a17e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a116:	f003 0301 	and.w	r3, r3, #1
 801a11a:	b2db      	uxtb	r3, r3
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d02b      	beq.n	801a178 <ip4_route+0x78>
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a126:	089b      	lsrs	r3, r3, #2
 801a128:	f003 0301 	and.w	r3, r3, #1
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d022      	beq.n	801a178 <ip4_route+0x78>
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	3304      	adds	r3, #4
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d01d      	beq.n	801a178 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681a      	ldr	r2, [r3, #0]
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	3304      	adds	r3, #4
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	405a      	eors	r2, r3
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	3308      	adds	r3, #8
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	4013      	ands	r3, r2
 801a150:	2b00      	cmp	r3, #0
 801a152:	d101      	bne.n	801a158 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	e038      	b.n	801a1ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a15e:	f003 0302 	and.w	r3, r3, #2
 801a162:	2b00      	cmp	r3, #0
 801a164:	d108      	bne.n	801a178 <ip4_route+0x78>
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	681a      	ldr	r2, [r3, #0]
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	330c      	adds	r3, #12
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	429a      	cmp	r2, r3
 801a172:	d101      	bne.n	801a178 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	e028      	b.n	801a1ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	60fb      	str	r3, [r7, #12]
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d1c5      	bne.n	801a110 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a184:	4b15      	ldr	r3, [pc, #84]	; (801a1dc <ip4_route+0xdc>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d01a      	beq.n	801a1c2 <ip4_route+0xc2>
 801a18c:	4b13      	ldr	r3, [pc, #76]	; (801a1dc <ip4_route+0xdc>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a194:	f003 0301 	and.w	r3, r3, #1
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d012      	beq.n	801a1c2 <ip4_route+0xc2>
 801a19c:	4b0f      	ldr	r3, [pc, #60]	; (801a1dc <ip4_route+0xdc>)
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1a4:	f003 0304 	and.w	r3, r3, #4
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d00a      	beq.n	801a1c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a1ac:	4b0b      	ldr	r3, [pc, #44]	; (801a1dc <ip4_route+0xdc>)
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	3304      	adds	r3, #4
 801a1b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d004      	beq.n	801a1c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	b2db      	uxtb	r3, r3
 801a1be:	2b7f      	cmp	r3, #127	; 0x7f
 801a1c0:	d101      	bne.n	801a1c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	e001      	b.n	801a1ca <ip4_route+0xca>
  }

  return netif_default;
 801a1c6:	4b05      	ldr	r3, [pc, #20]	; (801a1dc <ip4_route+0xdc>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3714      	adds	r7, #20
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d4:	4770      	bx	lr
 801a1d6:	bf00      	nop
 801a1d8:	200082b4 	.word	0x200082b4
 801a1dc:	200082b8 	.word	0x200082b8

0801a1e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1ee:	f003 0301 	and.w	r3, r3, #1
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d016      	beq.n	801a226 <ip4_input_accept+0x46>
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	3304      	adds	r3, #4
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d011      	beq.n	801a226 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a202:	4b0b      	ldr	r3, [pc, #44]	; (801a230 <ip4_input_accept+0x50>)
 801a204:	695a      	ldr	r2, [r3, #20]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	3304      	adds	r3, #4
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	429a      	cmp	r2, r3
 801a20e:	d008      	beq.n	801a222 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a210:	4b07      	ldr	r3, [pc, #28]	; (801a230 <ip4_input_accept+0x50>)
 801a212:	695b      	ldr	r3, [r3, #20]
 801a214:	6879      	ldr	r1, [r7, #4]
 801a216:	4618      	mov	r0, r3
 801a218:	f000 fa24 	bl	801a664 <ip4_addr_isbroadcast_u32>
 801a21c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d001      	beq.n	801a226 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a222:	2301      	movs	r3, #1
 801a224:	e000      	b.n	801a228 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a226:	2300      	movs	r3, #0
}
 801a228:	4618      	mov	r0, r3
 801a22a:	3708      	adds	r7, #8
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}
 801a230:	200051a0 	.word	0x200051a0

0801a234 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a234:	b580      	push	{r7, lr}
 801a236:	b088      	sub	sp, #32
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a23e:	2301      	movs	r3, #1
 801a240:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	685b      	ldr	r3, [r3, #4]
 801a246:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a248:	69fb      	ldr	r3, [r7, #28]
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	091b      	lsrs	r3, r3, #4
 801a24e:	b2db      	uxtb	r3, r3
 801a250:	2b04      	cmp	r3, #4
 801a252:	d004      	beq.n	801a25e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a254:	6878      	ldr	r0, [r7, #4]
 801a256:	f7f6 fe69 	bl	8010f2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a25a:	2300      	movs	r3, #0
 801a25c:	e121      	b.n	801a4a2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a25e:	69fb      	ldr	r3, [r7, #28]
 801a260:	781b      	ldrb	r3, [r3, #0]
 801a262:	f003 030f 	and.w	r3, r3, #15
 801a266:	b2db      	uxtb	r3, r3
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a26e:	69fb      	ldr	r3, [r7, #28]
 801a270:	885b      	ldrh	r3, [r3, #2]
 801a272:	b29b      	uxth	r3, r3
 801a274:	4618      	mov	r0, r3
 801a276:	f7f5 fbc1 	bl	800f9fc <lwip_htons>
 801a27a:	4603      	mov	r3, r0
 801a27c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	891b      	ldrh	r3, [r3, #8]
 801a282:	8a3a      	ldrh	r2, [r7, #16]
 801a284:	429a      	cmp	r2, r3
 801a286:	d204      	bcs.n	801a292 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a288:	8a3b      	ldrh	r3, [r7, #16]
 801a28a:	4619      	mov	r1, r3
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f7f6 fcc7 	bl	8010c20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	895b      	ldrh	r3, [r3, #10]
 801a296:	8a7a      	ldrh	r2, [r7, #18]
 801a298:	429a      	cmp	r2, r3
 801a29a:	d807      	bhi.n	801a2ac <ip4_input+0x78>
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	891b      	ldrh	r3, [r3, #8]
 801a2a0:	8a3a      	ldrh	r2, [r7, #16]
 801a2a2:	429a      	cmp	r2, r3
 801a2a4:	d802      	bhi.n	801a2ac <ip4_input+0x78>
 801a2a6:	8a7b      	ldrh	r3, [r7, #18]
 801a2a8:	2b13      	cmp	r3, #19
 801a2aa:	d804      	bhi.n	801a2b6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a2ac:	6878      	ldr	r0, [r7, #4]
 801a2ae:	f7f6 fe3d 	bl	8010f2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	e0f5      	b.n	801a4a2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a2b6:	69fb      	ldr	r3, [r7, #28]
 801a2b8:	691b      	ldr	r3, [r3, #16]
 801a2ba:	4a7c      	ldr	r2, [pc, #496]	; (801a4ac <ip4_input+0x278>)
 801a2bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a2be:	69fb      	ldr	r3, [r7, #28]
 801a2c0:	68db      	ldr	r3, [r3, #12]
 801a2c2:	4a7a      	ldr	r2, [pc, #488]	; (801a4ac <ip4_input+0x278>)
 801a2c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a2c6:	4b79      	ldr	r3, [pc, #484]	; (801a4ac <ip4_input+0x278>)
 801a2c8:	695b      	ldr	r3, [r3, #20]
 801a2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a2ce:	2be0      	cmp	r3, #224	; 0xe0
 801a2d0:	d112      	bne.n	801a2f8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a2d8:	f003 0301 	and.w	r3, r3, #1
 801a2dc:	b2db      	uxtb	r3, r3
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d007      	beq.n	801a2f2 <ip4_input+0xbe>
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	3304      	adds	r3, #4
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d002      	beq.n	801a2f2 <ip4_input+0xbe>
      netif = inp;
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	61bb      	str	r3, [r7, #24]
 801a2f0:	e02a      	b.n	801a348 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	61bb      	str	r3, [r7, #24]
 801a2f6:	e027      	b.n	801a348 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a2f8:	6838      	ldr	r0, [r7, #0]
 801a2fa:	f7ff ff71 	bl	801a1e0 <ip4_input_accept>
 801a2fe:	4603      	mov	r3, r0
 801a300:	2b00      	cmp	r3, #0
 801a302:	d002      	beq.n	801a30a <ip4_input+0xd6>
      netif = inp;
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	61bb      	str	r3, [r7, #24]
 801a308:	e01e      	b.n	801a348 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a30a:	2300      	movs	r3, #0
 801a30c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a30e:	4b67      	ldr	r3, [pc, #412]	; (801a4ac <ip4_input+0x278>)
 801a310:	695b      	ldr	r3, [r3, #20]
 801a312:	b2db      	uxtb	r3, r3
 801a314:	2b7f      	cmp	r3, #127	; 0x7f
 801a316:	d017      	beq.n	801a348 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a318:	4b65      	ldr	r3, [pc, #404]	; (801a4b0 <ip4_input+0x27c>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	61bb      	str	r3, [r7, #24]
 801a31e:	e00e      	b.n	801a33e <ip4_input+0x10a>
          if (netif == inp) {
 801a320:	69ba      	ldr	r2, [r7, #24]
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	429a      	cmp	r2, r3
 801a326:	d006      	beq.n	801a336 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a328:	69b8      	ldr	r0, [r7, #24]
 801a32a:	f7ff ff59 	bl	801a1e0 <ip4_input_accept>
 801a32e:	4603      	mov	r3, r0
 801a330:	2b00      	cmp	r3, #0
 801a332:	d108      	bne.n	801a346 <ip4_input+0x112>
 801a334:	e000      	b.n	801a338 <ip4_input+0x104>
            continue;
 801a336:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a338:	69bb      	ldr	r3, [r7, #24]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	61bb      	str	r3, [r7, #24]
 801a33e:	69bb      	ldr	r3, [r7, #24]
 801a340:	2b00      	cmp	r3, #0
 801a342:	d1ed      	bne.n	801a320 <ip4_input+0xec>
 801a344:	e000      	b.n	801a348 <ip4_input+0x114>
            break;
 801a346:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a348:	69bb      	ldr	r3, [r7, #24]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d111      	bne.n	801a372 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a34e:	69fb      	ldr	r3, [r7, #28]
 801a350:	7a5b      	ldrb	r3, [r3, #9]
 801a352:	2b11      	cmp	r3, #17
 801a354:	d10d      	bne.n	801a372 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a356:	8a7b      	ldrh	r3, [r7, #18]
 801a358:	69fa      	ldr	r2, [r7, #28]
 801a35a:	4413      	add	r3, r2
 801a35c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	885b      	ldrh	r3, [r3, #2]
 801a362:	b29b      	uxth	r3, r3
 801a364:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a368:	d103      	bne.n	801a372 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a36e:	2300      	movs	r3, #0
 801a370:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d017      	beq.n	801a3a8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a378:	4b4c      	ldr	r3, [pc, #304]	; (801a4ac <ip4_input+0x278>)
 801a37a:	691b      	ldr	r3, [r3, #16]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d013      	beq.n	801a3a8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a380:	4b4a      	ldr	r3, [pc, #296]	; (801a4ac <ip4_input+0x278>)
 801a382:	691b      	ldr	r3, [r3, #16]
 801a384:	6839      	ldr	r1, [r7, #0]
 801a386:	4618      	mov	r0, r3
 801a388:	f000 f96c 	bl	801a664 <ip4_addr_isbroadcast_u32>
 801a38c:	4603      	mov	r3, r0
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d105      	bne.n	801a39e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a392:	4b46      	ldr	r3, [pc, #280]	; (801a4ac <ip4_input+0x278>)
 801a394:	691b      	ldr	r3, [r3, #16]
 801a396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a39a:	2be0      	cmp	r3, #224	; 0xe0
 801a39c:	d104      	bne.n	801a3a8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f7f6 fdc4 	bl	8010f2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	e07c      	b.n	801a4a2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a3a8:	69bb      	ldr	r3, [r7, #24]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d104      	bne.n	801a3b8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a3ae:	6878      	ldr	r0, [r7, #4]
 801a3b0:	f7f6 fdbc 	bl	8010f2c <pbuf_free>
    return ERR_OK;
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	e074      	b.n	801a4a2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a3b8:	69fb      	ldr	r3, [r7, #28]
 801a3ba:	88db      	ldrh	r3, [r3, #6]
 801a3bc:	b29b      	uxth	r3, r3
 801a3be:	461a      	mov	r2, r3
 801a3c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a3c4:	4013      	ands	r3, r2
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d00b      	beq.n	801a3e2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f000 fc90 	bl	801acf0 <ip4_reass>
 801a3d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d101      	bne.n	801a3dc <ip4_input+0x1a8>
      return ERR_OK;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	e062      	b.n	801a4a2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a3e2:	4a32      	ldr	r2, [pc, #200]	; (801a4ac <ip4_input+0x278>)
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a3e8:	4a30      	ldr	r2, [pc, #192]	; (801a4ac <ip4_input+0x278>)
 801a3ea:	683b      	ldr	r3, [r7, #0]
 801a3ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a3ee:	4a2f      	ldr	r2, [pc, #188]	; (801a4ac <ip4_input+0x278>)
 801a3f0:	69fb      	ldr	r3, [r7, #28]
 801a3f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a3f4:	69fb      	ldr	r3, [r7, #28]
 801a3f6:	781b      	ldrb	r3, [r3, #0]
 801a3f8:	f003 030f 	and.w	r3, r3, #15
 801a3fc:	b2db      	uxtb	r3, r3
 801a3fe:	009b      	lsls	r3, r3, #2
 801a400:	b2db      	uxtb	r3, r3
 801a402:	b29a      	uxth	r2, r3
 801a404:	4b29      	ldr	r3, [pc, #164]	; (801a4ac <ip4_input+0x278>)
 801a406:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a408:	8a7b      	ldrh	r3, [r7, #18]
 801a40a:	4619      	mov	r1, r3
 801a40c:	6878      	ldr	r0, [r7, #4]
 801a40e:	f7f6 fd07 	bl	8010e20 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a412:	69fb      	ldr	r3, [r7, #28]
 801a414:	7a5b      	ldrb	r3, [r3, #9]
 801a416:	2b06      	cmp	r3, #6
 801a418:	d009      	beq.n	801a42e <ip4_input+0x1fa>
 801a41a:	2b11      	cmp	r3, #17
 801a41c:	d002      	beq.n	801a424 <ip4_input+0x1f0>
 801a41e:	2b01      	cmp	r3, #1
 801a420:	d00a      	beq.n	801a438 <ip4_input+0x204>
 801a422:	e00e      	b.n	801a442 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a424:	6839      	ldr	r1, [r7, #0]
 801a426:	6878      	ldr	r0, [r7, #4]
 801a428:	f7fc fb2a 	bl	8016a80 <udp_input>
        break;
 801a42c:	e026      	b.n	801a47c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a42e:	6839      	ldr	r1, [r7, #0]
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	f7f8 fba7 	bl	8012b84 <tcp_input>
        break;
 801a436:	e021      	b.n	801a47c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a438:	6839      	ldr	r1, [r7, #0]
 801a43a:	6878      	ldr	r0, [r7, #4]
 801a43c:	f7ff fcd2 	bl	8019de4 <icmp_input>
        break;
 801a440:	e01c      	b.n	801a47c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a442:	4b1a      	ldr	r3, [pc, #104]	; (801a4ac <ip4_input+0x278>)
 801a444:	695b      	ldr	r3, [r3, #20]
 801a446:	69b9      	ldr	r1, [r7, #24]
 801a448:	4618      	mov	r0, r3
 801a44a:	f000 f90b 	bl	801a664 <ip4_addr_isbroadcast_u32>
 801a44e:	4603      	mov	r3, r0
 801a450:	2b00      	cmp	r3, #0
 801a452:	d10f      	bne.n	801a474 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a454:	4b15      	ldr	r3, [pc, #84]	; (801a4ac <ip4_input+0x278>)
 801a456:	695b      	ldr	r3, [r3, #20]
 801a458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a45c:	2be0      	cmp	r3, #224	; 0xe0
 801a45e:	d009      	beq.n	801a474 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a460:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a464:	4619      	mov	r1, r3
 801a466:	6878      	ldr	r0, [r7, #4]
 801a468:	f7f6 fd4d 	bl	8010f06 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a46c:	2102      	movs	r1, #2
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	f7ff fdbc 	bl	8019fec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a474:	6878      	ldr	r0, [r7, #4]
 801a476:	f7f6 fd59 	bl	8010f2c <pbuf_free>
        break;
 801a47a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a47c:	4b0b      	ldr	r3, [pc, #44]	; (801a4ac <ip4_input+0x278>)
 801a47e:	2200      	movs	r2, #0
 801a480:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a482:	4b0a      	ldr	r3, [pc, #40]	; (801a4ac <ip4_input+0x278>)
 801a484:	2200      	movs	r2, #0
 801a486:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a488:	4b08      	ldr	r3, [pc, #32]	; (801a4ac <ip4_input+0x278>)
 801a48a:	2200      	movs	r2, #0
 801a48c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a48e:	4b07      	ldr	r3, [pc, #28]	; (801a4ac <ip4_input+0x278>)
 801a490:	2200      	movs	r2, #0
 801a492:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a494:	4b05      	ldr	r3, [pc, #20]	; (801a4ac <ip4_input+0x278>)
 801a496:	2200      	movs	r2, #0
 801a498:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a49a:	4b04      	ldr	r3, [pc, #16]	; (801a4ac <ip4_input+0x278>)
 801a49c:	2200      	movs	r2, #0
 801a49e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a4a0:	2300      	movs	r3, #0
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3720      	adds	r7, #32
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	200051a0 	.word	0x200051a0
 801a4b0:	200082b4 	.word	0x200082b4

0801a4b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b08a      	sub	sp, #40	; 0x28
 801a4b8:	af04      	add	r7, sp, #16
 801a4ba:	60f8      	str	r0, [r7, #12]
 801a4bc:	60b9      	str	r1, [r7, #8]
 801a4be:	607a      	str	r2, [r7, #4]
 801a4c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a4c2:	68bb      	ldr	r3, [r7, #8]
 801a4c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d009      	beq.n	801a4e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d003      	beq.n	801a4da <ip4_output_if+0x26>
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d102      	bne.n	801a4e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4dc:	3304      	adds	r3, #4
 801a4de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a4e0:	78fa      	ldrb	r2, [r7, #3]
 801a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4e4:	9302      	str	r3, [sp, #8]
 801a4e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a4ea:	9301      	str	r3, [sp, #4]
 801a4ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a4f0:	9300      	str	r3, [sp, #0]
 801a4f2:	4613      	mov	r3, r2
 801a4f4:	687a      	ldr	r2, [r7, #4]
 801a4f6:	6979      	ldr	r1, [r7, #20]
 801a4f8:	68f8      	ldr	r0, [r7, #12]
 801a4fa:	f000 f805 	bl	801a508 <ip4_output_if_src>
 801a4fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a500:	4618      	mov	r0, r3
 801a502:	3718      	adds	r7, #24
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}

0801a508 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b088      	sub	sp, #32
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	60f8      	str	r0, [r7, #12]
 801a510:	60b9      	str	r1, [r7, #8]
 801a512:	607a      	str	r2, [r7, #4]
 801a514:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	7b9b      	ldrb	r3, [r3, #14]
 801a51a:	2b01      	cmp	r3, #1
 801a51c:	d006      	beq.n	801a52c <ip4_output_if_src+0x24>
 801a51e:	4b4b      	ldr	r3, [pc, #300]	; (801a64c <ip4_output_if_src+0x144>)
 801a520:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a524:	494a      	ldr	r1, [pc, #296]	; (801a650 <ip4_output_if_src+0x148>)
 801a526:	484b      	ldr	r0, [pc, #300]	; (801a654 <ip4_output_if_src+0x14c>)
 801a528:	f001 fd7a 	bl	801c020 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d060      	beq.n	801a5f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a532:	2314      	movs	r3, #20
 801a534:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a536:	2114      	movs	r1, #20
 801a538:	68f8      	ldr	r0, [r7, #12]
 801a53a:	f7f6 fc61 	bl	8010e00 <pbuf_add_header>
 801a53e:	4603      	mov	r3, r0
 801a540:	2b00      	cmp	r3, #0
 801a542:	d002      	beq.n	801a54a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a544:	f06f 0301 	mvn.w	r3, #1
 801a548:	e07c      	b.n	801a644 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	685b      	ldr	r3, [r3, #4]
 801a54e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	895b      	ldrh	r3, [r3, #10]
 801a554:	2b13      	cmp	r3, #19
 801a556:	d806      	bhi.n	801a566 <ip4_output_if_src+0x5e>
 801a558:	4b3c      	ldr	r3, [pc, #240]	; (801a64c <ip4_output_if_src+0x144>)
 801a55a:	f240 3289 	movw	r2, #905	; 0x389
 801a55e:	493e      	ldr	r1, [pc, #248]	; (801a658 <ip4_output_if_src+0x150>)
 801a560:	483c      	ldr	r0, [pc, #240]	; (801a654 <ip4_output_if_src+0x14c>)
 801a562:	f001 fd5d 	bl	801c020 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a566:	69fb      	ldr	r3, [r7, #28]
 801a568:	78fa      	ldrb	r2, [r7, #3]
 801a56a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a56c:	69fb      	ldr	r3, [r7, #28]
 801a56e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a572:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681a      	ldr	r2, [r3, #0]
 801a578:	69fb      	ldr	r3, [r7, #28]
 801a57a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a57c:	8b7b      	ldrh	r3, [r7, #26]
 801a57e:	089b      	lsrs	r3, r3, #2
 801a580:	b29b      	uxth	r3, r3
 801a582:	b2db      	uxtb	r3, r3
 801a584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a588:	b2da      	uxtb	r2, r3
 801a58a:	69fb      	ldr	r3, [r7, #28]
 801a58c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a58e:	69fb      	ldr	r3, [r7, #28]
 801a590:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a594:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	891b      	ldrh	r3, [r3, #8]
 801a59a:	4618      	mov	r0, r3
 801a59c:	f7f5 fa2e 	bl	800f9fc <lwip_htons>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	461a      	mov	r2, r3
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a5a8:	69fb      	ldr	r3, [r7, #28]
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	719a      	strb	r2, [r3, #6]
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a5b2:	4b2a      	ldr	r3, [pc, #168]	; (801a65c <ip4_output_if_src+0x154>)
 801a5b4:	881b      	ldrh	r3, [r3, #0]
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	f7f5 fa20 	bl	800f9fc <lwip_htons>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	461a      	mov	r2, r3
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a5c4:	4b25      	ldr	r3, [pc, #148]	; (801a65c <ip4_output_if_src+0x154>)
 801a5c6:	881b      	ldrh	r3, [r3, #0]
 801a5c8:	3301      	adds	r3, #1
 801a5ca:	b29a      	uxth	r2, r3
 801a5cc:	4b23      	ldr	r3, [pc, #140]	; (801a65c <ip4_output_if_src+0x154>)
 801a5ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d104      	bne.n	801a5e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a5d6:	4b22      	ldr	r3, [pc, #136]	; (801a660 <ip4_output_if_src+0x158>)
 801a5d8:	681a      	ldr	r2, [r3, #0]
 801a5da:	69fb      	ldr	r3, [r7, #28]
 801a5dc:	60da      	str	r2, [r3, #12]
 801a5de:	e003      	b.n	801a5e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	69fb      	ldr	r3, [r7, #28]
 801a5e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a5e8:	69fb      	ldr	r3, [r7, #28]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	729a      	strb	r2, [r3, #10]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	72da      	strb	r2, [r3, #11]
 801a5f2:	e00f      	b.n	801a614 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	895b      	ldrh	r3, [r3, #10]
 801a5f8:	2b13      	cmp	r3, #19
 801a5fa:	d802      	bhi.n	801a602 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a5fc:	f06f 0301 	mvn.w	r3, #1
 801a600:	e020      	b.n	801a644 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a608:	69fb      	ldr	r3, [r7, #28]
 801a60a:	691b      	ldr	r3, [r3, #16]
 801a60c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a60e:	f107 0314 	add.w	r3, r7, #20
 801a612:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d00c      	beq.n	801a636 <ip4_output_if_src+0x12e>
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	891a      	ldrh	r2, [r3, #8]
 801a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a624:	429a      	cmp	r2, r3
 801a626:	d906      	bls.n	801a636 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a628:	687a      	ldr	r2, [r7, #4]
 801a62a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a62c:	68f8      	ldr	r0, [r7, #12]
 801a62e:	f000 fd4b 	bl	801b0c8 <ip4_frag>
 801a632:	4603      	mov	r3, r0
 801a634:	e006      	b.n	801a644 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a638:	695b      	ldr	r3, [r3, #20]
 801a63a:	687a      	ldr	r2, [r7, #4]
 801a63c:	68f9      	ldr	r1, [r7, #12]
 801a63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a640:	4798      	blx	r3
 801a642:	4603      	mov	r3, r0
}
 801a644:	4618      	mov	r0, r3
 801a646:	3720      	adds	r7, #32
 801a648:	46bd      	mov	sp, r7
 801a64a:	bd80      	pop	{r7, pc}
 801a64c:	08024044 	.word	0x08024044
 801a650:	08024078 	.word	0x08024078
 801a654:	08024084 	.word	0x08024084
 801a658:	080240ac 	.word	0x080240ac
 801a65c:	20001176 	.word	0x20001176
 801a660:	080249f0 	.word	0x080249f0

0801a664 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a664:	b480      	push	{r7}
 801a666:	b085      	sub	sp, #20
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
 801a66c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a678:	d002      	beq.n	801a680 <ip4_addr_isbroadcast_u32+0x1c>
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d101      	bne.n	801a684 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a680:	2301      	movs	r3, #1
 801a682:	e02a      	b.n	801a6da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a684:	683b      	ldr	r3, [r7, #0]
 801a686:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a68a:	f003 0302 	and.w	r3, r3, #2
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d101      	bne.n	801a696 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a692:	2300      	movs	r3, #0
 801a694:	e021      	b.n	801a6da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	3304      	adds	r3, #4
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	687a      	ldr	r2, [r7, #4]
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	d101      	bne.n	801a6a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	e019      	b.n	801a6da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a6a6:	68fa      	ldr	r2, [r7, #12]
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	3304      	adds	r3, #4
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	405a      	eors	r2, r3
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	3308      	adds	r3, #8
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	4013      	ands	r3, r2
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d10d      	bne.n	801a6d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a6bc:	683b      	ldr	r3, [r7, #0]
 801a6be:	3308      	adds	r3, #8
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	43da      	mvns	r2, r3
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	3308      	adds	r3, #8
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d101      	bne.n	801a6d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a6d4:	2301      	movs	r3, #1
 801a6d6:	e000      	b.n	801a6da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a6d8:	2300      	movs	r3, #0
  }
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3714      	adds	r7, #20
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr
	...

0801a6e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a6f2:	4b12      	ldr	r3, [pc, #72]	; (801a73c <ip_reass_tmr+0x54>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a6f8:	e018      	b.n	801a72c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	7fdb      	ldrb	r3, [r3, #31]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d00b      	beq.n	801a71a <ip_reass_tmr+0x32>
      r->timer--;
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	7fdb      	ldrb	r3, [r3, #31]
 801a706:	3b01      	subs	r3, #1
 801a708:	b2da      	uxtb	r2, r3
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	60fb      	str	r3, [r7, #12]
 801a718:	e008      	b.n	801a72c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a724:	68b9      	ldr	r1, [r7, #8]
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	f000 f80a 	bl	801a740 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d1e3      	bne.n	801a6fa <ip_reass_tmr+0x12>
    }
  }
}
 801a732:	bf00      	nop
 801a734:	3710      	adds	r7, #16
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	20001178 	.word	0x20001178

0801a740 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b088      	sub	sp, #32
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
 801a748:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a74a:	2300      	movs	r3, #0
 801a74c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a74e:	683a      	ldr	r2, [r7, #0]
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	429a      	cmp	r2, r3
 801a754:	d105      	bne.n	801a762 <ip_reass_free_complete_datagram+0x22>
 801a756:	4b45      	ldr	r3, [pc, #276]	; (801a86c <ip_reass_free_complete_datagram+0x12c>)
 801a758:	22ab      	movs	r2, #171	; 0xab
 801a75a:	4945      	ldr	r1, [pc, #276]	; (801a870 <ip_reass_free_complete_datagram+0x130>)
 801a75c:	4845      	ldr	r0, [pc, #276]	; (801a874 <ip_reass_free_complete_datagram+0x134>)
 801a75e:	f001 fc5f 	bl	801c020 <iprintf>
  if (prev != NULL) {
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d00a      	beq.n	801a77e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	687a      	ldr	r2, [r7, #4]
 801a76e:	429a      	cmp	r2, r3
 801a770:	d005      	beq.n	801a77e <ip_reass_free_complete_datagram+0x3e>
 801a772:	4b3e      	ldr	r3, [pc, #248]	; (801a86c <ip_reass_free_complete_datagram+0x12c>)
 801a774:	22ad      	movs	r2, #173	; 0xad
 801a776:	4940      	ldr	r1, [pc, #256]	; (801a878 <ip_reass_free_complete_datagram+0x138>)
 801a778:	483e      	ldr	r0, [pc, #248]	; (801a874 <ip_reass_free_complete_datagram+0x134>)
 801a77a:	f001 fc51 	bl	801c020 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	685b      	ldr	r3, [r3, #4]
 801a782:	685b      	ldr	r3, [r3, #4]
 801a784:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	889b      	ldrh	r3, [r3, #4]
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d12a      	bne.n	801a7e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	685b      	ldr	r3, [r3, #4]
 801a794:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	681a      	ldr	r2, [r3, #0]
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a79e:	69bb      	ldr	r3, [r7, #24]
 801a7a0:	6858      	ldr	r0, [r3, #4]
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	3308      	adds	r3, #8
 801a7a6:	2214      	movs	r2, #20
 801a7a8:	4619      	mov	r1, r3
 801a7aa:	f000 ff08 	bl	801b5be <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a7ae:	2101      	movs	r1, #1
 801a7b0:	69b8      	ldr	r0, [r7, #24]
 801a7b2:	f7ff fc2b 	bl	801a00c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a7b6:	69b8      	ldr	r0, [r7, #24]
 801a7b8:	f7f6 fc40 	bl	801103c <pbuf_clen>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a7c0:	8bfa      	ldrh	r2, [r7, #30]
 801a7c2:	8a7b      	ldrh	r3, [r7, #18]
 801a7c4:	4413      	add	r3, r2
 801a7c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a7ca:	db05      	blt.n	801a7d8 <ip_reass_free_complete_datagram+0x98>
 801a7cc:	4b27      	ldr	r3, [pc, #156]	; (801a86c <ip_reass_free_complete_datagram+0x12c>)
 801a7ce:	22bc      	movs	r2, #188	; 0xbc
 801a7d0:	492a      	ldr	r1, [pc, #168]	; (801a87c <ip_reass_free_complete_datagram+0x13c>)
 801a7d2:	4828      	ldr	r0, [pc, #160]	; (801a874 <ip_reass_free_complete_datagram+0x134>)
 801a7d4:	f001 fc24 	bl	801c020 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a7d8:	8bfa      	ldrh	r2, [r7, #30]
 801a7da:	8a7b      	ldrh	r3, [r7, #18]
 801a7dc:	4413      	add	r3, r2
 801a7de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a7e0:	69b8      	ldr	r0, [r7, #24]
 801a7e2:	f7f6 fba3 	bl	8010f2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	685b      	ldr	r3, [r3, #4]
 801a7ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a7ec:	e01f      	b.n	801a82e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a7ee:	69bb      	ldr	r3, [r7, #24]
 801a7f0:	685b      	ldr	r3, [r3, #4]
 801a7f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a7f8:	697b      	ldr	r3, [r7, #20]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a7fe:	68f8      	ldr	r0, [r7, #12]
 801a800:	f7f6 fc1c 	bl	801103c <pbuf_clen>
 801a804:	4603      	mov	r3, r0
 801a806:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a808:	8bfa      	ldrh	r2, [r7, #30]
 801a80a:	8a7b      	ldrh	r3, [r7, #18]
 801a80c:	4413      	add	r3, r2
 801a80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a812:	db05      	blt.n	801a820 <ip_reass_free_complete_datagram+0xe0>
 801a814:	4b15      	ldr	r3, [pc, #84]	; (801a86c <ip_reass_free_complete_datagram+0x12c>)
 801a816:	22cc      	movs	r2, #204	; 0xcc
 801a818:	4918      	ldr	r1, [pc, #96]	; (801a87c <ip_reass_free_complete_datagram+0x13c>)
 801a81a:	4816      	ldr	r0, [pc, #88]	; (801a874 <ip_reass_free_complete_datagram+0x134>)
 801a81c:	f001 fc00 	bl	801c020 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a820:	8bfa      	ldrh	r2, [r7, #30]
 801a822:	8a7b      	ldrh	r3, [r7, #18]
 801a824:	4413      	add	r3, r2
 801a826:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a828:	68f8      	ldr	r0, [r7, #12]
 801a82a:	f7f6 fb7f 	bl	8010f2c <pbuf_free>
  while (p != NULL) {
 801a82e:	69bb      	ldr	r3, [r7, #24]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d1dc      	bne.n	801a7ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a834:	6839      	ldr	r1, [r7, #0]
 801a836:	6878      	ldr	r0, [r7, #4]
 801a838:	f000 f8c2 	bl	801a9c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a83c:	4b10      	ldr	r3, [pc, #64]	; (801a880 <ip_reass_free_complete_datagram+0x140>)
 801a83e:	881b      	ldrh	r3, [r3, #0]
 801a840:	8bfa      	ldrh	r2, [r7, #30]
 801a842:	429a      	cmp	r2, r3
 801a844:	d905      	bls.n	801a852 <ip_reass_free_complete_datagram+0x112>
 801a846:	4b09      	ldr	r3, [pc, #36]	; (801a86c <ip_reass_free_complete_datagram+0x12c>)
 801a848:	22d2      	movs	r2, #210	; 0xd2
 801a84a:	490e      	ldr	r1, [pc, #56]	; (801a884 <ip_reass_free_complete_datagram+0x144>)
 801a84c:	4809      	ldr	r0, [pc, #36]	; (801a874 <ip_reass_free_complete_datagram+0x134>)
 801a84e:	f001 fbe7 	bl	801c020 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a852:	4b0b      	ldr	r3, [pc, #44]	; (801a880 <ip_reass_free_complete_datagram+0x140>)
 801a854:	881a      	ldrh	r2, [r3, #0]
 801a856:	8bfb      	ldrh	r3, [r7, #30]
 801a858:	1ad3      	subs	r3, r2, r3
 801a85a:	b29a      	uxth	r2, r3
 801a85c:	4b08      	ldr	r3, [pc, #32]	; (801a880 <ip_reass_free_complete_datagram+0x140>)
 801a85e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a860:	8bfb      	ldrh	r3, [r7, #30]
}
 801a862:	4618      	mov	r0, r3
 801a864:	3720      	adds	r7, #32
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	080240dc 	.word	0x080240dc
 801a870:	08024118 	.word	0x08024118
 801a874:	08024124 	.word	0x08024124
 801a878:	0802414c 	.word	0x0802414c
 801a87c:	08024160 	.word	0x08024160
 801a880:	2000117c 	.word	0x2000117c
 801a884:	08024180 	.word	0x08024180

0801a888 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b08a      	sub	sp, #40	; 0x28
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
 801a890:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a892:	2300      	movs	r3, #0
 801a894:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a896:	2300      	movs	r3, #0
 801a898:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a89a:	2300      	movs	r3, #0
 801a89c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a89e:	2300      	movs	r3, #0
 801a8a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a8a6:	4b28      	ldr	r3, [pc, #160]	; (801a948 <ip_reass_remove_oldest_datagram+0xc0>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a8ac:	e030      	b.n	801a910 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b0:	695a      	ldr	r2, [r3, #20]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	68db      	ldr	r3, [r3, #12]
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d10c      	bne.n	801a8d4 <ip_reass_remove_oldest_datagram+0x4c>
 801a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8bc:	699a      	ldr	r2, [r3, #24]
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	691b      	ldr	r3, [r3, #16]
 801a8c2:	429a      	cmp	r2, r3
 801a8c4:	d106      	bne.n	801a8d4 <ip_reass_remove_oldest_datagram+0x4c>
 801a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c8:	899a      	ldrh	r2, [r3, #12]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	889b      	ldrh	r3, [r3, #4]
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d014      	beq.n	801a8fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a8d4:	693b      	ldr	r3, [r7, #16]
 801a8d6:	3301      	adds	r3, #1
 801a8d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a8da:	6a3b      	ldr	r3, [r7, #32]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d104      	bne.n	801a8ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a8e4:	69fb      	ldr	r3, [r7, #28]
 801a8e6:	61bb      	str	r3, [r7, #24]
 801a8e8:	e009      	b.n	801a8fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ec:	7fda      	ldrb	r2, [r3, #31]
 801a8ee:	6a3b      	ldr	r3, [r7, #32]
 801a8f0:	7fdb      	ldrb	r3, [r3, #31]
 801a8f2:	429a      	cmp	r2, r3
 801a8f4:	d803      	bhi.n	801a8fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a8fa:	69fb      	ldr	r3, [r7, #28]
 801a8fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d001      	beq.n	801a90a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a908:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a912:	2b00      	cmp	r3, #0
 801a914:	d1cb      	bne.n	801a8ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a916:	6a3b      	ldr	r3, [r7, #32]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d008      	beq.n	801a92e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a91c:	69b9      	ldr	r1, [r7, #24]
 801a91e:	6a38      	ldr	r0, [r7, #32]
 801a920:	f7ff ff0e 	bl	801a740 <ip_reass_free_complete_datagram>
 801a924:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a926:	697a      	ldr	r2, [r7, #20]
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	4413      	add	r3, r2
 801a92c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a92e:	697a      	ldr	r2, [r7, #20]
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	429a      	cmp	r2, r3
 801a934:	da02      	bge.n	801a93c <ip_reass_remove_oldest_datagram+0xb4>
 801a936:	693b      	ldr	r3, [r7, #16]
 801a938:	2b01      	cmp	r3, #1
 801a93a:	dcac      	bgt.n	801a896 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a93c:	697b      	ldr	r3, [r7, #20]
}
 801a93e:	4618      	mov	r0, r3
 801a940:	3728      	adds	r7, #40	; 0x28
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}
 801a946:	bf00      	nop
 801a948:	20001178 	.word	0x20001178

0801a94c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
 801a954:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a956:	2004      	movs	r0, #4
 801a958:	f7f5 fca6 	bl	80102a8 <memp_malloc>
 801a95c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d110      	bne.n	801a986 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a964:	6839      	ldr	r1, [r7, #0]
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f7ff ff8e 	bl	801a888 <ip_reass_remove_oldest_datagram>
 801a96c:	4602      	mov	r2, r0
 801a96e:	683b      	ldr	r3, [r7, #0]
 801a970:	4293      	cmp	r3, r2
 801a972:	dc03      	bgt.n	801a97c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a974:	2004      	movs	r0, #4
 801a976:	f7f5 fc97 	bl	80102a8 <memp_malloc>
 801a97a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d101      	bne.n	801a986 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a982:	2300      	movs	r3, #0
 801a984:	e016      	b.n	801a9b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a986:	2220      	movs	r2, #32
 801a988:	2100      	movs	r1, #0
 801a98a:	68f8      	ldr	r0, [r7, #12]
 801a98c:	f000 fe3b 	bl	801b606 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	220f      	movs	r2, #15
 801a994:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a996:	4b09      	ldr	r3, [pc, #36]	; (801a9bc <ip_reass_enqueue_new_datagram+0x70>)
 801a998:	681a      	ldr	r2, [r3, #0]
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a99e:	4a07      	ldr	r2, [pc, #28]	; (801a9bc <ip_reass_enqueue_new_datagram+0x70>)
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	3308      	adds	r3, #8
 801a9a8:	2214      	movs	r2, #20
 801a9aa:	6879      	ldr	r1, [r7, #4]
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	f000 fe06 	bl	801b5be <memcpy>
  return ipr;
 801a9b2:	68fb      	ldr	r3, [r7, #12]
}
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	3710      	adds	r7, #16
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}
 801a9bc:	20001178 	.word	0x20001178

0801a9c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
 801a9c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a9ca:	4b10      	ldr	r3, [pc, #64]	; (801aa0c <ip_reass_dequeue_datagram+0x4c>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	687a      	ldr	r2, [r7, #4]
 801a9d0:	429a      	cmp	r2, r3
 801a9d2:	d104      	bne.n	801a9de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	4a0c      	ldr	r2, [pc, #48]	; (801aa0c <ip_reass_dequeue_datagram+0x4c>)
 801a9da:	6013      	str	r3, [r2, #0]
 801a9dc:	e00d      	b.n	801a9fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a9de:	683b      	ldr	r3, [r7, #0]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d106      	bne.n	801a9f2 <ip_reass_dequeue_datagram+0x32>
 801a9e4:	4b0a      	ldr	r3, [pc, #40]	; (801aa10 <ip_reass_dequeue_datagram+0x50>)
 801a9e6:	f240 1245 	movw	r2, #325	; 0x145
 801a9ea:	490a      	ldr	r1, [pc, #40]	; (801aa14 <ip_reass_dequeue_datagram+0x54>)
 801a9ec:	480a      	ldr	r0, [pc, #40]	; (801aa18 <ip_reass_dequeue_datagram+0x58>)
 801a9ee:	f001 fb17 	bl	801c020 <iprintf>
    prev->next = ipr->next;
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	681a      	ldr	r2, [r3, #0]
 801a9f6:	683b      	ldr	r3, [r7, #0]
 801a9f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a9fa:	6879      	ldr	r1, [r7, #4]
 801a9fc:	2004      	movs	r0, #4
 801a9fe:	f7f5 fc9f 	bl	8010340 <memp_free>
}
 801aa02:	bf00      	nop
 801aa04:	3708      	adds	r7, #8
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	20001178 	.word	0x20001178
 801aa10:	080240dc 	.word	0x080240dc
 801aa14:	080241a4 	.word	0x080241a4
 801aa18:	08024124 	.word	0x08024124

0801aa1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b08c      	sub	sp, #48	; 0x30
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	60f8      	str	r0, [r7, #12]
 801aa24:	60b9      	str	r1, [r7, #8]
 801aa26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801aa2c:	2301      	movs	r3, #1
 801aa2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	685b      	ldr	r3, [r3, #4]
 801aa34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801aa36:	69fb      	ldr	r3, [r7, #28]
 801aa38:	885b      	ldrh	r3, [r3, #2]
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7f4 ffdd 	bl	800f9fc <lwip_htons>
 801aa42:	4603      	mov	r3, r0
 801aa44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801aa46:	69fb      	ldr	r3, [r7, #28]
 801aa48:	781b      	ldrb	r3, [r3, #0]
 801aa4a:	f003 030f 	and.w	r3, r3, #15
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	009b      	lsls	r3, r3, #2
 801aa52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801aa54:	7e7b      	ldrb	r3, [r7, #25]
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	8b7a      	ldrh	r2, [r7, #26]
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	d202      	bcs.n	801aa64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa5e:	f04f 33ff 	mov.w	r3, #4294967295
 801aa62:	e135      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801aa64:	7e7b      	ldrb	r3, [r7, #25]
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	8b7a      	ldrh	r2, [r7, #26]
 801aa6a:	1ad3      	subs	r3, r2, r3
 801aa6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801aa6e:	69fb      	ldr	r3, [r7, #28]
 801aa70:	88db      	ldrh	r3, [r3, #6]
 801aa72:	b29b      	uxth	r3, r3
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7f4 ffc1 	bl	800f9fc <lwip_htons>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa80:	b29b      	uxth	r3, r3
 801aa82:	00db      	lsls	r3, r3, #3
 801aa84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	685b      	ldr	r3, [r3, #4]
 801aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801aa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa8e:	2200      	movs	r2, #0
 801aa90:	701a      	strb	r2, [r3, #0]
 801aa92:	2200      	movs	r2, #0
 801aa94:	705a      	strb	r2, [r3, #1]
 801aa96:	2200      	movs	r2, #0
 801aa98:	709a      	strb	r2, [r3, #2]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa0:	8afa      	ldrh	r2, [r7, #22]
 801aaa2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801aaa4:	8afa      	ldrh	r2, [r7, #22]
 801aaa6:	8b7b      	ldrh	r3, [r7, #26]
 801aaa8:	4413      	add	r3, r2
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab2:	88db      	ldrh	r3, [r3, #6]
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	8afa      	ldrh	r2, [r7, #22]
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d902      	bls.n	801aac2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aabc:	f04f 33ff 	mov.w	r3, #4294967295
 801aac0:	e106      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	627b      	str	r3, [r7, #36]	; 0x24
 801aac8:	e068      	b.n	801ab9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad2:	889b      	ldrh	r3, [r3, #4]
 801aad4:	b29a      	uxth	r2, r3
 801aad6:	693b      	ldr	r3, [r7, #16]
 801aad8:	889b      	ldrh	r3, [r3, #4]
 801aada:	b29b      	uxth	r3, r3
 801aadc:	429a      	cmp	r2, r3
 801aade:	d235      	bcs.n	801ab4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aae4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d020      	beq.n	801ab2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaee:	889b      	ldrh	r3, [r3, #4]
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaf4:	88db      	ldrh	r3, [r3, #6]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d307      	bcc.n	801ab0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aafe:	88db      	ldrh	r3, [r3, #6]
 801ab00:	b29a      	uxth	r2, r3
 801ab02:	693b      	ldr	r3, [r7, #16]
 801ab04:	889b      	ldrh	r3, [r3, #4]
 801ab06:	b29b      	uxth	r3, r3
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	d902      	bls.n	801ab12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ab10:	e0de      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab14:	68ba      	ldr	r2, [r7, #8]
 801ab16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1a:	88db      	ldrh	r3, [r3, #6]
 801ab1c:	b29a      	uxth	r2, r3
 801ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab20:	889b      	ldrh	r3, [r3, #4]
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d03d      	beq.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ab28:	2300      	movs	r3, #0
 801ab2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ab2c:	e03a      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab30:	88db      	ldrh	r3, [r3, #6]
 801ab32:	b29a      	uxth	r2, r3
 801ab34:	693b      	ldr	r3, [r7, #16]
 801ab36:	889b      	ldrh	r3, [r3, #4]
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d902      	bls.n	801ab44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab42:	e0c5      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	68ba      	ldr	r2, [r7, #8]
 801ab48:	605a      	str	r2, [r3, #4]
      break;
 801ab4a:	e02b      	b.n	801aba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab4e:	889b      	ldrh	r3, [r3, #4]
 801ab50:	b29a      	uxth	r2, r3
 801ab52:	693b      	ldr	r3, [r7, #16]
 801ab54:	889b      	ldrh	r3, [r3, #4]
 801ab56:	b29b      	uxth	r3, r3
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	d102      	bne.n	801ab62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 801ab60:	e0b6      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab64:	889b      	ldrh	r3, [r3, #4]
 801ab66:	b29a      	uxth	r2, r3
 801ab68:	693b      	ldr	r3, [r7, #16]
 801ab6a:	88db      	ldrh	r3, [r3, #6]
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	429a      	cmp	r2, r3
 801ab70:	d202      	bcs.n	801ab78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab72:	f04f 33ff 	mov.w	r3, #4294967295
 801ab76:	e0ab      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d009      	beq.n	801ab92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab80:	88db      	ldrh	r3, [r3, #6]
 801ab82:	b29a      	uxth	r2, r3
 801ab84:	693b      	ldr	r3, [r7, #16]
 801ab86:	889b      	ldrh	r3, [r3, #4]
 801ab88:	b29b      	uxth	r3, r3
 801ab8a:	429a      	cmp	r2, r3
 801ab8c:	d001      	beq.n	801ab92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ab8e:	2300      	movs	r3, #0
 801ab90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ab92:	693b      	ldr	r3, [r7, #16]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ab98:	693b      	ldr	r3, [r7, #16]
 801ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d193      	bne.n	801aaca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801aba2:	e000      	b.n	801aba6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801aba4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d12d      	bne.n	801ac08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d01c      	beq.n	801abec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abb4:	88db      	ldrh	r3, [r3, #6]
 801abb6:	b29a      	uxth	r2, r3
 801abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abba:	889b      	ldrh	r3, [r3, #4]
 801abbc:	b29b      	uxth	r3, r3
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d906      	bls.n	801abd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801abc2:	4b45      	ldr	r3, [pc, #276]	; (801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801abc4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801abc8:	4944      	ldr	r1, [pc, #272]	; (801acdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801abca:	4845      	ldr	r0, [pc, #276]	; (801ace0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801abcc:	f001 fa28 	bl	801c020 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd2:	68ba      	ldr	r2, [r7, #8]
 801abd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd8:	88db      	ldrh	r3, [r3, #6]
 801abda:	b29a      	uxth	r2, r3
 801abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abde:	889b      	ldrh	r3, [r3, #4]
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	429a      	cmp	r2, r3
 801abe4:	d010      	beq.n	801ac08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801abe6:	2300      	movs	r3, #0
 801abe8:	623b      	str	r3, [r7, #32]
 801abea:	e00d      	b.n	801ac08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d006      	beq.n	801ac02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801abf4:	4b38      	ldr	r3, [pc, #224]	; (801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801abf6:	f240 12bf 	movw	r2, #447	; 0x1bf
 801abfa:	493a      	ldr	r1, [pc, #232]	; (801ace4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801abfc:	4838      	ldr	r0, [pc, #224]	; (801ace0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801abfe:	f001 fa0f 	bl	801c020 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	68ba      	ldr	r2, [r7, #8]
 801ac06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d105      	bne.n	801ac1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	7f9b      	ldrb	r3, [r3, #30]
 801ac12:	f003 0301 	and.w	r3, r3, #1
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d059      	beq.n	801acce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ac1a:	6a3b      	ldr	r3, [r7, #32]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d04f      	beq.n	801acc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	685b      	ldr	r3, [r3, #4]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d006      	beq.n	801ac36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	685b      	ldr	r3, [r3, #4]
 801ac2c:	685b      	ldr	r3, [r3, #4]
 801ac2e:	889b      	ldrh	r3, [r3, #4]
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d002      	beq.n	801ac3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ac36:	2300      	movs	r3, #0
 801ac38:	623b      	str	r3, [r7, #32]
 801ac3a:	e041      	b.n	801acc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ac46:	e012      	b.n	801ac6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4a:	685b      	ldr	r3, [r3, #4]
 801ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac50:	88db      	ldrh	r3, [r3, #6]
 801ac52:	b29a      	uxth	r2, r3
 801ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac56:	889b      	ldrh	r3, [r3, #4]
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d002      	beq.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ac5e:	2300      	movs	r3, #0
 801ac60:	623b      	str	r3, [r7, #32]
            break;
 801ac62:	e007      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d1e9      	bne.n	801ac48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ac74:	6a3b      	ldr	r3, [r7, #32]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d022      	beq.n	801acc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	685b      	ldr	r3, [r3, #4]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d106      	bne.n	801ac90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ac82:	4b15      	ldr	r3, [pc, #84]	; (801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac84:	f240 12df 	movw	r2, #479	; 0x1df
 801ac88:	4917      	ldr	r1, [pc, #92]	; (801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ac8a:	4815      	ldr	r0, [pc, #84]	; (801ace0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac8c:	f001 f9c8 	bl	801c020 <iprintf>
          LWIP_ASSERT("sanity check",
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	685b      	ldr	r3, [r3, #4]
 801ac94:	685b      	ldr	r3, [r3, #4]
 801ac96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d106      	bne.n	801acaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ac9c:	4b0e      	ldr	r3, [pc, #56]	; (801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801aca2:	4911      	ldr	r1, [pc, #68]	; (801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801aca4:	480e      	ldr	r0, [pc, #56]	; (801ace0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aca6:	f001 f9bb 	bl	801c020 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d006      	beq.n	801acc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801acb2:	4b09      	ldr	r3, [pc, #36]	; (801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801acb4:	f240 12e3 	movw	r2, #483	; 0x1e3
 801acb8:	490c      	ldr	r1, [pc, #48]	; (801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801acba:	4809      	ldr	r0, [pc, #36]	; (801ace0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acbc:	f001 f9b0 	bl	801c020 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801acc0:	6a3b      	ldr	r3, [r7, #32]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	bf14      	ite	ne
 801acc6:	2301      	movne	r3, #1
 801acc8:	2300      	moveq	r3, #0
 801acca:	b2db      	uxtb	r3, r3
 801accc:	e000      	b.n	801acd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801acce:	2300      	movs	r3, #0
}
 801acd0:	4618      	mov	r0, r3
 801acd2:	3730      	adds	r7, #48	; 0x30
 801acd4:	46bd      	mov	sp, r7
 801acd6:	bd80      	pop	{r7, pc}
 801acd8:	080240dc 	.word	0x080240dc
 801acdc:	080241c0 	.word	0x080241c0
 801ace0:	08024124 	.word	0x08024124
 801ace4:	080241e0 	.word	0x080241e0
 801ace8:	08024218 	.word	0x08024218
 801acec:	08024228 	.word	0x08024228

0801acf0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b08e      	sub	sp, #56	; 0x38
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	685b      	ldr	r3, [r3, #4]
 801acfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	f003 030f 	and.w	r3, r3, #15
 801ad06:	b2db      	uxtb	r3, r3
 801ad08:	009b      	lsls	r3, r3, #2
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	2b14      	cmp	r3, #20
 801ad0e:	f040 8167 	bne.w	801afe0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad14:	88db      	ldrh	r3, [r3, #6]
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7f4 fe6f 	bl	800f9fc <lwip_htons>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	00db      	lsls	r3, r3, #3
 801ad28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad2c:	885b      	ldrh	r3, [r3, #2]
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7f4 fe63 	bl	800f9fc <lwip_htons>
 801ad36:	4603      	mov	r3, r0
 801ad38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	f003 030f 	and.w	r3, r3, #15
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	009b      	lsls	r3, r3, #2
 801ad46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ad4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad52:	429a      	cmp	r2, r3
 801ad54:	f0c0 8146 	bcc.w	801afe4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ad58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ad5c:	b29b      	uxth	r3, r3
 801ad5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad60:	1ad3      	subs	r3, r2, r3
 801ad62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ad64:	6878      	ldr	r0, [r7, #4]
 801ad66:	f7f6 f969 	bl	801103c <pbuf_clen>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ad6e:	4ba3      	ldr	r3, [pc, #652]	; (801affc <ip4_reass+0x30c>)
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	461a      	mov	r2, r3
 801ad74:	8c3b      	ldrh	r3, [r7, #32]
 801ad76:	4413      	add	r3, r2
 801ad78:	2b0a      	cmp	r3, #10
 801ad7a:	dd10      	ble.n	801ad9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad7c:	8c3b      	ldrh	r3, [r7, #32]
 801ad7e:	4619      	mov	r1, r3
 801ad80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad82:	f7ff fd81 	bl	801a888 <ip_reass_remove_oldest_datagram>
 801ad86:	4603      	mov	r3, r0
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	f000 812d 	beq.w	801afe8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ad8e:	4b9b      	ldr	r3, [pc, #620]	; (801affc <ip4_reass+0x30c>)
 801ad90:	881b      	ldrh	r3, [r3, #0]
 801ad92:	461a      	mov	r2, r3
 801ad94:	8c3b      	ldrh	r3, [r7, #32]
 801ad96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad98:	2b0a      	cmp	r3, #10
 801ad9a:	f300 8125 	bgt.w	801afe8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ad9e:	4b98      	ldr	r3, [pc, #608]	; (801b000 <ip4_reass+0x310>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	633b      	str	r3, [r7, #48]	; 0x30
 801ada4:	e015      	b.n	801add2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada8:	695a      	ldr	r2, [r3, #20]
 801adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adac:	68db      	ldr	r3, [r3, #12]
 801adae:	429a      	cmp	r2, r3
 801adb0:	d10c      	bne.n	801adcc <ip4_reass+0xdc>
 801adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb4:	699a      	ldr	r2, [r3, #24]
 801adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adb8:	691b      	ldr	r3, [r3, #16]
 801adba:	429a      	cmp	r2, r3
 801adbc:	d106      	bne.n	801adcc <ip4_reass+0xdc>
 801adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc0:	899a      	ldrh	r2, [r3, #12]
 801adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc4:	889b      	ldrh	r3, [r3, #4]
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	429a      	cmp	r2, r3
 801adca:	d006      	beq.n	801adda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	633b      	str	r3, [r7, #48]	; 0x30
 801add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add4:	2b00      	cmp	r3, #0
 801add6:	d1e6      	bne.n	801ada6 <ip4_reass+0xb6>
 801add8:	e000      	b.n	801addc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801adda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d109      	bne.n	801adf6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ade2:	8c3b      	ldrh	r3, [r7, #32]
 801ade4:	4619      	mov	r1, r3
 801ade6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ade8:	f7ff fdb0 	bl	801a94c <ip_reass_enqueue_new_datagram>
 801adec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d11c      	bne.n	801ae2e <ip4_reass+0x13e>
      goto nullreturn;
 801adf4:	e0f9      	b.n	801afea <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adf8:	88db      	ldrh	r3, [r3, #6]
 801adfa:	b29b      	uxth	r3, r3
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7f4 fdfd 	bl	800f9fc <lwip_htons>
 801ae02:	4603      	mov	r3, r0
 801ae04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d110      	bne.n	801ae2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae0e:	89db      	ldrh	r3, [r3, #14]
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7f4 fdf3 	bl	800f9fc <lwip_htons>
 801ae16:	4603      	mov	r3, r0
 801ae18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d006      	beq.n	801ae2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae22:	3308      	adds	r3, #8
 801ae24:	2214      	movs	r2, #20
 801ae26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f000 fbc8 	bl	801b5be <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae30:	88db      	ldrh	r3, [r3, #6]
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	f003 0320 	and.w	r3, r3, #32
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	bf0c      	ite	eq
 801ae3c:	2301      	moveq	r3, #1
 801ae3e:	2300      	movne	r3, #0
 801ae40:	b2db      	uxtb	r3, r3
 801ae42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ae44:	69fb      	ldr	r3, [r7, #28]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d00e      	beq.n	801ae68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ae4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ae4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae4e:	4413      	add	r3, r2
 801ae50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ae52:	8b7a      	ldrh	r2, [r7, #26]
 801ae54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ae56:	429a      	cmp	r2, r3
 801ae58:	f0c0 80a0 	bcc.w	801af9c <ip4_reass+0x2ac>
 801ae5c:	8b7b      	ldrh	r3, [r7, #26]
 801ae5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ae62:	4293      	cmp	r3, r2
 801ae64:	f200 809a 	bhi.w	801af9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ae68:	69fa      	ldr	r2, [r7, #28]
 801ae6a:	6879      	ldr	r1, [r7, #4]
 801ae6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae6e:	f7ff fdd5 	bl	801aa1c <ip_reass_chain_frag_into_datagram_and_validate>
 801ae72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ae74:	697b      	ldr	r3, [r7, #20]
 801ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae7a:	f000 8091 	beq.w	801afa0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ae7e:	4b5f      	ldr	r3, [pc, #380]	; (801affc <ip4_reass+0x30c>)
 801ae80:	881a      	ldrh	r2, [r3, #0]
 801ae82:	8c3b      	ldrh	r3, [r7, #32]
 801ae84:	4413      	add	r3, r2
 801ae86:	b29a      	uxth	r2, r3
 801ae88:	4b5c      	ldr	r3, [pc, #368]	; (801affc <ip4_reass+0x30c>)
 801ae8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ae8c:	69fb      	ldr	r3, [r7, #28]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d00d      	beq.n	801aeae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ae92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ae94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae96:	4413      	add	r3, r2
 801ae98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae9c:	8a7a      	ldrh	r2, [r7, #18]
 801ae9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea2:	7f9b      	ldrb	r3, [r3, #30]
 801aea4:	f043 0301 	orr.w	r3, r3, #1
 801aea8:	b2da      	uxtb	r2, r3
 801aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	d171      	bne.n	801af98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb6:	8b9b      	ldrh	r3, [r3, #28]
 801aeb8:	3314      	adds	r3, #20
 801aeba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aebe:	685b      	ldr	r3, [r3, #4]
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed0:	3308      	adds	r3, #8
 801aed2:	2214      	movs	r2, #20
 801aed4:	4619      	mov	r1, r3
 801aed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aed8:	f000 fb71 	bl	801b5be <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aedc:	8a3b      	ldrh	r3, [r7, #16]
 801aede:	4618      	mov	r0, r3
 801aee0:	f7f4 fd8c 	bl	800f9fc <lwip_htons>
 801aee4:	4603      	mov	r3, r0
 801aee6:	461a      	mov	r2, r3
 801aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aeea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aeee:	2200      	movs	r2, #0
 801aef0:	719a      	strb	r2, [r3, #6]
 801aef2:	2200      	movs	r2, #0
 801aef4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aef8:	2200      	movs	r2, #0
 801aefa:	729a      	strb	r2, [r3, #10]
 801aefc:	2200      	movs	r2, #0
 801aefe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801af06:	e00d      	b.n	801af24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801af08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af0a:	685b      	ldr	r3, [r3, #4]
 801af0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801af0e:	2114      	movs	r1, #20
 801af10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801af12:	f7f5 ff85 	bl	8010e20 <pbuf_remove_header>
      pbuf_cat(p, r);
 801af16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801af18:	6878      	ldr	r0, [r7, #4]
 801af1a:	f7f6 f8c9 	bl	80110b0 <pbuf_cat>
      r = iprh->next_pbuf;
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801af24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af26:	2b00      	cmp	r3, #0
 801af28:	d1ee      	bne.n	801af08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801af2a:	4b35      	ldr	r3, [pc, #212]	; (801b000 <ip4_reass+0x310>)
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af30:	429a      	cmp	r2, r3
 801af32:	d102      	bne.n	801af3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801af34:	2300      	movs	r3, #0
 801af36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af38:	e010      	b.n	801af5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af3a:	4b31      	ldr	r3, [pc, #196]	; (801b000 <ip4_reass+0x310>)
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af40:	e007      	b.n	801af52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af48:	429a      	cmp	r2, r3
 801af4a:	d006      	beq.n	801af5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af54:	2b00      	cmp	r3, #0
 801af56:	d1f4      	bne.n	801af42 <ip4_reass+0x252>
 801af58:	e000      	b.n	801af5c <ip4_reass+0x26c>
          break;
 801af5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801af5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801af5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af60:	f7ff fd2e 	bl	801a9c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801af64:	6878      	ldr	r0, [r7, #4]
 801af66:	f7f6 f869 	bl	801103c <pbuf_clen>
 801af6a:	4603      	mov	r3, r0
 801af6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801af6e:	4b23      	ldr	r3, [pc, #140]	; (801affc <ip4_reass+0x30c>)
 801af70:	881b      	ldrh	r3, [r3, #0]
 801af72:	8c3a      	ldrh	r2, [r7, #32]
 801af74:	429a      	cmp	r2, r3
 801af76:	d906      	bls.n	801af86 <ip4_reass+0x296>
 801af78:	4b22      	ldr	r3, [pc, #136]	; (801b004 <ip4_reass+0x314>)
 801af7a:	f240 229b 	movw	r2, #667	; 0x29b
 801af7e:	4922      	ldr	r1, [pc, #136]	; (801b008 <ip4_reass+0x318>)
 801af80:	4822      	ldr	r0, [pc, #136]	; (801b00c <ip4_reass+0x31c>)
 801af82:	f001 f84d 	bl	801c020 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801af86:	4b1d      	ldr	r3, [pc, #116]	; (801affc <ip4_reass+0x30c>)
 801af88:	881a      	ldrh	r2, [r3, #0]
 801af8a:	8c3b      	ldrh	r3, [r7, #32]
 801af8c:	1ad3      	subs	r3, r2, r3
 801af8e:	b29a      	uxth	r2, r3
 801af90:	4b1a      	ldr	r3, [pc, #104]	; (801affc <ip4_reass+0x30c>)
 801af92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	e02c      	b.n	801aff2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801af98:	2300      	movs	r3, #0
 801af9a:	e02a      	b.n	801aff2 <ip4_reass+0x302>

nullreturn_ipr:
 801af9c:	bf00      	nop
 801af9e:	e000      	b.n	801afa2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801afa0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d106      	bne.n	801afb6 <ip4_reass+0x2c6>
 801afa8:	4b16      	ldr	r3, [pc, #88]	; (801b004 <ip4_reass+0x314>)
 801afaa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801afae:	4918      	ldr	r1, [pc, #96]	; (801b010 <ip4_reass+0x320>)
 801afb0:	4816      	ldr	r0, [pc, #88]	; (801b00c <ip4_reass+0x31c>)
 801afb2:	f001 f835 	bl	801c020 <iprintf>
  if (ipr->p == NULL) {
 801afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afb8:	685b      	ldr	r3, [r3, #4]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d114      	bne.n	801afe8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801afbe:	4b10      	ldr	r3, [pc, #64]	; (801b000 <ip4_reass+0x310>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801afc4:	429a      	cmp	r2, r3
 801afc6:	d006      	beq.n	801afd6 <ip4_reass+0x2e6>
 801afc8:	4b0e      	ldr	r3, [pc, #56]	; (801b004 <ip4_reass+0x314>)
 801afca:	f240 22ab 	movw	r2, #683	; 0x2ab
 801afce:	4911      	ldr	r1, [pc, #68]	; (801b014 <ip4_reass+0x324>)
 801afd0:	480e      	ldr	r0, [pc, #56]	; (801b00c <ip4_reass+0x31c>)
 801afd2:	f001 f825 	bl	801c020 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801afd6:	2100      	movs	r1, #0
 801afd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801afda:	f7ff fcf1 	bl	801a9c0 <ip_reass_dequeue_datagram>
 801afde:	e004      	b.n	801afea <ip4_reass+0x2fa>
    goto nullreturn;
 801afe0:	bf00      	nop
 801afe2:	e002      	b.n	801afea <ip4_reass+0x2fa>
    goto nullreturn;
 801afe4:	bf00      	nop
 801afe6:	e000      	b.n	801afea <ip4_reass+0x2fa>
  }

nullreturn:
 801afe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f7f5 ff9e 	bl	8010f2c <pbuf_free>
  return NULL;
 801aff0:	2300      	movs	r3, #0
}
 801aff2:	4618      	mov	r0, r3
 801aff4:	3738      	adds	r7, #56	; 0x38
 801aff6:	46bd      	mov	sp, r7
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	bf00      	nop
 801affc:	2000117c 	.word	0x2000117c
 801b000:	20001178 	.word	0x20001178
 801b004:	080240dc 	.word	0x080240dc
 801b008:	0802424c 	.word	0x0802424c
 801b00c:	08024124 	.word	0x08024124
 801b010:	08024268 	.word	0x08024268
 801b014:	08024274 	.word	0x08024274

0801b018 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b01c:	2005      	movs	r0, #5
 801b01e:	f7f5 f943 	bl	80102a8 <memp_malloc>
 801b022:	4603      	mov	r3, r0
}
 801b024:	4618      	mov	r0, r3
 801b026:	bd80      	pop	{r7, pc}

0801b028 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b082      	sub	sp, #8
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d106      	bne.n	801b044 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b036:	4b07      	ldr	r3, [pc, #28]	; (801b054 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b038:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b03c:	4906      	ldr	r1, [pc, #24]	; (801b058 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b03e:	4807      	ldr	r0, [pc, #28]	; (801b05c <ip_frag_free_pbuf_custom_ref+0x34>)
 801b040:	f000 ffee 	bl	801c020 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b044:	6879      	ldr	r1, [r7, #4]
 801b046:	2005      	movs	r0, #5
 801b048:	f7f5 f97a 	bl	8010340 <memp_free>
}
 801b04c:	bf00      	nop
 801b04e:	3708      	adds	r7, #8
 801b050:	46bd      	mov	sp, r7
 801b052:	bd80      	pop	{r7, pc}
 801b054:	080240dc 	.word	0x080240dc
 801b058:	08024294 	.word	0x08024294
 801b05c:	08024124 	.word	0x08024124

0801b060 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b060:	b580      	push	{r7, lr}
 801b062:	b084      	sub	sp, #16
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d106      	bne.n	801b080 <ipfrag_free_pbuf_custom+0x20>
 801b072:	4b11      	ldr	r3, [pc, #68]	; (801b0b8 <ipfrag_free_pbuf_custom+0x58>)
 801b074:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b078:	4910      	ldr	r1, [pc, #64]	; (801b0bc <ipfrag_free_pbuf_custom+0x5c>)
 801b07a:	4811      	ldr	r0, [pc, #68]	; (801b0c0 <ipfrag_free_pbuf_custom+0x60>)
 801b07c:	f000 ffd0 	bl	801c020 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b080:	68fa      	ldr	r2, [r7, #12]
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	429a      	cmp	r2, r3
 801b086:	d006      	beq.n	801b096 <ipfrag_free_pbuf_custom+0x36>
 801b088:	4b0b      	ldr	r3, [pc, #44]	; (801b0b8 <ipfrag_free_pbuf_custom+0x58>)
 801b08a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b08e:	490d      	ldr	r1, [pc, #52]	; (801b0c4 <ipfrag_free_pbuf_custom+0x64>)
 801b090:	480b      	ldr	r0, [pc, #44]	; (801b0c0 <ipfrag_free_pbuf_custom+0x60>)
 801b092:	f000 ffc5 	bl	801c020 <iprintf>
  if (pcr->original != NULL) {
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	695b      	ldr	r3, [r3, #20]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d004      	beq.n	801b0a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	695b      	ldr	r3, [r3, #20]
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f7f5 ff42 	bl	8010f2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b0a8:	68f8      	ldr	r0, [r7, #12]
 801b0aa:	f7ff ffbd 	bl	801b028 <ip_frag_free_pbuf_custom_ref>
}
 801b0ae:	bf00      	nop
 801b0b0:	3710      	adds	r7, #16
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	bd80      	pop	{r7, pc}
 801b0b6:	bf00      	nop
 801b0b8:	080240dc 	.word	0x080240dc
 801b0bc:	080242a0 	.word	0x080242a0
 801b0c0:	08024124 	.word	0x08024124
 801b0c4:	080242ac 	.word	0x080242ac

0801b0c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b094      	sub	sp, #80	; 0x50
 801b0cc:	af02      	add	r7, sp, #8
 801b0ce:	60f8      	str	r0, [r7, #12]
 801b0d0:	60b9      	str	r1, [r7, #8]
 801b0d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b0da:	68bb      	ldr	r3, [r7, #8]
 801b0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0de:	3b14      	subs	r3, #20
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	da00      	bge.n	801b0e6 <ip4_frag+0x1e>
 801b0e4:	3307      	adds	r3, #7
 801b0e6:	10db      	asrs	r3, r3, #3
 801b0e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b0ea:	2314      	movs	r3, #20
 801b0ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	685b      	ldr	r3, [r3, #4]
 801b0f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	f003 030f 	and.w	r3, r3, #15
 801b100:	b2db      	uxtb	r3, r3
 801b102:	009b      	lsls	r3, r3, #2
 801b104:	b2db      	uxtb	r3, r3
 801b106:	2b14      	cmp	r3, #20
 801b108:	d002      	beq.n	801b110 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b10a:	f06f 0305 	mvn.w	r3, #5
 801b10e:	e10f      	b.n	801b330 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	895b      	ldrh	r3, [r3, #10]
 801b114:	2b13      	cmp	r3, #19
 801b116:	d809      	bhi.n	801b12c <ip4_frag+0x64>
 801b118:	4b87      	ldr	r3, [pc, #540]	; (801b338 <ip4_frag+0x270>)
 801b11a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b11e:	4987      	ldr	r1, [pc, #540]	; (801b33c <ip4_frag+0x274>)
 801b120:	4887      	ldr	r0, [pc, #540]	; (801b340 <ip4_frag+0x278>)
 801b122:	f000 ff7d 	bl	801c020 <iprintf>
 801b126:	f06f 0305 	mvn.w	r3, #5
 801b12a:	e101      	b.n	801b330 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b12e:	88db      	ldrh	r3, [r3, #6]
 801b130:	b29b      	uxth	r3, r3
 801b132:	4618      	mov	r0, r3
 801b134:	f7f4 fc62 	bl	800f9fc <lwip_htons>
 801b138:	4603      	mov	r3, r0
 801b13a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b13c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b13e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b142:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b14c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	891b      	ldrh	r3, [r3, #8]
 801b152:	3b14      	subs	r3, #20
 801b154:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b158:	e0e0      	b.n	801b31c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b15a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b15c:	00db      	lsls	r3, r3, #3
 801b15e:	b29b      	uxth	r3, r3
 801b160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b164:	4293      	cmp	r3, r2
 801b166:	bf28      	it	cs
 801b168:	4613      	movcs	r3, r2
 801b16a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b16c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b170:	2114      	movs	r1, #20
 801b172:	200e      	movs	r0, #14
 801b174:	f7f5 fbfa 	bl	801096c <pbuf_alloc>
 801b178:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	f000 80d4 	beq.w	801b32a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b184:	895b      	ldrh	r3, [r3, #10]
 801b186:	2b13      	cmp	r3, #19
 801b188:	d806      	bhi.n	801b198 <ip4_frag+0xd0>
 801b18a:	4b6b      	ldr	r3, [pc, #428]	; (801b338 <ip4_frag+0x270>)
 801b18c:	f240 3225 	movw	r2, #805	; 0x325
 801b190:	496c      	ldr	r1, [pc, #432]	; (801b344 <ip4_frag+0x27c>)
 801b192:	486b      	ldr	r0, [pc, #428]	; (801b340 <ip4_frag+0x278>)
 801b194:	f000 ff44 	bl	801c020 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19a:	685b      	ldr	r3, [r3, #4]
 801b19c:	2214      	movs	r2, #20
 801b19e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f000 fa0c 	bl	801b5be <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b1ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b1ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b1b2:	e064      	b.n	801b27e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	895a      	ldrh	r2, [r3, #10]
 801b1b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b1ba:	1ad3      	subs	r3, r2, r3
 801b1bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	895b      	ldrh	r3, [r3, #10]
 801b1c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b1c4:	429a      	cmp	r2, r3
 801b1c6:	d906      	bls.n	801b1d6 <ip4_frag+0x10e>
 801b1c8:	4b5b      	ldr	r3, [pc, #364]	; (801b338 <ip4_frag+0x270>)
 801b1ca:	f240 322d 	movw	r2, #813	; 0x32d
 801b1ce:	495e      	ldr	r1, [pc, #376]	; (801b348 <ip4_frag+0x280>)
 801b1d0:	485b      	ldr	r0, [pc, #364]	; (801b340 <ip4_frag+0x278>)
 801b1d2:	f000 ff25 	bl	801c020 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b1d6:	8bfa      	ldrh	r2, [r7, #30]
 801b1d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b1dc:	4293      	cmp	r3, r2
 801b1de:	bf28      	it	cs
 801b1e0:	4613      	movcs	r3, r2
 801b1e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b1e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d105      	bne.n	801b1fa <ip4_frag+0x132>
        poff = 0;
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	60fb      	str	r3, [r7, #12]
        continue;
 801b1f8:	e041      	b.n	801b27e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b1fa:	f7ff ff0d 	bl	801b018 <ip_frag_alloc_pbuf_custom_ref>
 801b1fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b200:	69bb      	ldr	r3, [r7, #24]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d103      	bne.n	801b20e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b208:	f7f5 fe90 	bl	8010f2c <pbuf_free>
        goto memerr;
 801b20c:	e08e      	b.n	801b32c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b20e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b214:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b216:	4413      	add	r3, r2
 801b218:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b21c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b220:	9201      	str	r2, [sp, #4]
 801b222:	9300      	str	r3, [sp, #0]
 801b224:	4603      	mov	r3, r0
 801b226:	2241      	movs	r2, #65	; 0x41
 801b228:	2000      	movs	r0, #0
 801b22a:	f7f5 fcc5 	bl	8010bb8 <pbuf_alloced_custom>
 801b22e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b230:	697b      	ldr	r3, [r7, #20]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d106      	bne.n	801b244 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b236:	69b8      	ldr	r0, [r7, #24]
 801b238:	f7ff fef6 	bl	801b028 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b23c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b23e:	f7f5 fe75 	bl	8010f2c <pbuf_free>
        goto memerr;
 801b242:	e073      	b.n	801b32c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801b244:	68f8      	ldr	r0, [r7, #12]
 801b246:	f7f5 ff11 	bl	801106c <pbuf_ref>
      pcr->original = p;
 801b24a:	69bb      	ldr	r3, [r7, #24]
 801b24c:	68fa      	ldr	r2, [r7, #12]
 801b24e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b250:	69bb      	ldr	r3, [r7, #24]
 801b252:	4a3e      	ldr	r2, [pc, #248]	; (801b34c <ip4_frag+0x284>)
 801b254:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b256:	6979      	ldr	r1, [r7, #20]
 801b258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b25a:	f7f5 ff29 	bl	80110b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b25e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b262:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b266:	1ad3      	subs	r3, r2, r3
 801b268:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b26c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b270:	2b00      	cmp	r3, #0
 801b272:	d004      	beq.n	801b27e <ip4_frag+0x1b6>
        poff = 0;
 801b274:	2300      	movs	r3, #0
 801b276:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b27e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b282:	2b00      	cmp	r3, #0
 801b284:	d196      	bne.n	801b1b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b286:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b288:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b28c:	4413      	add	r3, r2
 801b28e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b290:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b294:	68bb      	ldr	r3, [r7, #8]
 801b296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b298:	3b14      	subs	r3, #20
 801b29a:	429a      	cmp	r2, r3
 801b29c:	bfd4      	ite	le
 801b29e:	2301      	movle	r3, #1
 801b2a0:	2300      	movgt	r3, #0
 801b2a2:	b2db      	uxtb	r3, r3
 801b2a4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b2a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b2aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b2b0:	6a3b      	ldr	r3, [r7, #32]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d002      	beq.n	801b2bc <ip4_frag+0x1f4>
 801b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d003      	beq.n	801b2c4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b2bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b2be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b2c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b2c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7f4 fb98 	bl	800f9fc <lwip_htons>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	461a      	mov	r2, r3
 801b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2d2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b2d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b2d6:	3314      	adds	r3, #20
 801b2d8:	b29b      	uxth	r3, r3
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7f4 fb8e 	bl	800f9fc <lwip_htons>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	461a      	mov	r2, r3
 801b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	729a      	strb	r2, [r3, #10]
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	695b      	ldr	r3, [r3, #20]
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b2fa:	68b8      	ldr	r0, [r7, #8]
 801b2fc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b2fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b300:	f7f5 fe14 	bl	8010f2c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b30a:	1ad3      	subs	r3, r2, r3
 801b30c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b310:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b314:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b316:	4413      	add	r3, r2
 801b318:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b31c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b320:	2b00      	cmp	r3, #0
 801b322:	f47f af1a 	bne.w	801b15a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b326:	2300      	movs	r3, #0
 801b328:	e002      	b.n	801b330 <ip4_frag+0x268>
      goto memerr;
 801b32a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b330:	4618      	mov	r0, r3
 801b332:	3748      	adds	r7, #72	; 0x48
 801b334:	46bd      	mov	sp, r7
 801b336:	bd80      	pop	{r7, pc}
 801b338:	080240dc 	.word	0x080240dc
 801b33c:	080242b8 	.word	0x080242b8
 801b340:	08024124 	.word	0x08024124
 801b344:	080242d4 	.word	0x080242d4
 801b348:	080242f4 	.word	0x080242f4
 801b34c:	0801b061 	.word	0x0801b061

0801b350 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b086      	sub	sp, #24
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
 801b358:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b35a:	230e      	movs	r3, #14
 801b35c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	895b      	ldrh	r3, [r3, #10]
 801b362:	2b0e      	cmp	r3, #14
 801b364:	d96e      	bls.n	801b444 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	7bdb      	ldrb	r3, [r3, #15]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d106      	bne.n	801b37c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b374:	3301      	adds	r3, #1
 801b376:	b2da      	uxtb	r2, r3
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b382:	693b      	ldr	r3, [r7, #16]
 801b384:	7b1a      	ldrb	r2, [r3, #12]
 801b386:	7b5b      	ldrb	r3, [r3, #13]
 801b388:	021b      	lsls	r3, r3, #8
 801b38a:	4313      	orrs	r3, r2
 801b38c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b38e:	693b      	ldr	r3, [r7, #16]
 801b390:	781b      	ldrb	r3, [r3, #0]
 801b392:	f003 0301 	and.w	r3, r3, #1
 801b396:	2b00      	cmp	r3, #0
 801b398:	d023      	beq.n	801b3e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b39a:	693b      	ldr	r3, [r7, #16]
 801b39c:	781b      	ldrb	r3, [r3, #0]
 801b39e:	2b01      	cmp	r3, #1
 801b3a0:	d10f      	bne.n	801b3c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3a2:	693b      	ldr	r3, [r7, #16]
 801b3a4:	785b      	ldrb	r3, [r3, #1]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d11b      	bne.n	801b3e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b3aa:	693b      	ldr	r3, [r7, #16]
 801b3ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3ae:	2b5e      	cmp	r3, #94	; 0x5e
 801b3b0:	d117      	bne.n	801b3e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	7b5b      	ldrb	r3, [r3, #13]
 801b3b6:	f043 0310 	orr.w	r3, r3, #16
 801b3ba:	b2da      	uxtb	r2, r3
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	735a      	strb	r2, [r3, #13]
 801b3c0:	e00f      	b.n	801b3e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	2206      	movs	r2, #6
 801b3c6:	4928      	ldr	r1, [pc, #160]	; (801b468 <ethernet_input+0x118>)
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	f000 f8e9 	bl	801b5a0 <memcmp>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d106      	bne.n	801b3e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	7b5b      	ldrb	r3, [r3, #13]
 801b3d8:	f043 0308 	orr.w	r3, r3, #8
 801b3dc:	b2da      	uxtb	r2, r3
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b3e2:	89fb      	ldrh	r3, [r7, #14]
 801b3e4:	2b08      	cmp	r3, #8
 801b3e6:	d003      	beq.n	801b3f0 <ethernet_input+0xa0>
 801b3e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b3ec:	d014      	beq.n	801b418 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b3ee:	e032      	b.n	801b456 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b3f0:	683b      	ldr	r3, [r7, #0]
 801b3f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b3f6:	f003 0308 	and.w	r3, r3, #8
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d024      	beq.n	801b448 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b3fe:	8afb      	ldrh	r3, [r7, #22]
 801b400:	4619      	mov	r1, r3
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7f5 fd0c 	bl	8010e20 <pbuf_remove_header>
 801b408:	4603      	mov	r3, r0
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d11e      	bne.n	801b44c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b40e:	6839      	ldr	r1, [r7, #0]
 801b410:	6878      	ldr	r0, [r7, #4]
 801b412:	f7fe ff0f 	bl	801a234 <ip4_input>
      break;
 801b416:	e013      	b.n	801b440 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b41e:	f003 0308 	and.w	r3, r3, #8
 801b422:	2b00      	cmp	r3, #0
 801b424:	d014      	beq.n	801b450 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b426:	8afb      	ldrh	r3, [r7, #22]
 801b428:	4619      	mov	r1, r3
 801b42a:	6878      	ldr	r0, [r7, #4]
 801b42c:	f7f5 fcf8 	bl	8010e20 <pbuf_remove_header>
 801b430:	4603      	mov	r3, r0
 801b432:	2b00      	cmp	r3, #0
 801b434:	d10e      	bne.n	801b454 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b436:	6839      	ldr	r1, [r7, #0]
 801b438:	6878      	ldr	r0, [r7, #4]
 801b43a:	f7fe f8ab 	bl	8019594 <etharp_input>
      break;
 801b43e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b440:	2300      	movs	r3, #0
 801b442:	e00c      	b.n	801b45e <ethernet_input+0x10e>
    goto free_and_return;
 801b444:	bf00      	nop
 801b446:	e006      	b.n	801b456 <ethernet_input+0x106>
        goto free_and_return;
 801b448:	bf00      	nop
 801b44a:	e004      	b.n	801b456 <ethernet_input+0x106>
        goto free_and_return;
 801b44c:	bf00      	nop
 801b44e:	e002      	b.n	801b456 <ethernet_input+0x106>
        goto free_and_return;
 801b450:	bf00      	nop
 801b452:	e000      	b.n	801b456 <ethernet_input+0x106>
        goto free_and_return;
 801b454:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b456:	6878      	ldr	r0, [r7, #4]
 801b458:	f7f5 fd68 	bl	8010f2c <pbuf_free>
  return ERR_OK;
 801b45c:	2300      	movs	r3, #0
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3718      	adds	r7, #24
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	080249f8 	.word	0x080249f8

0801b46c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b086      	sub	sp, #24
 801b470:	af00      	add	r7, sp, #0
 801b472:	60f8      	str	r0, [r7, #12]
 801b474:	60b9      	str	r1, [r7, #8]
 801b476:	607a      	str	r2, [r7, #4]
 801b478:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b47a:	8c3b      	ldrh	r3, [r7, #32]
 801b47c:	4618      	mov	r0, r3
 801b47e:	f7f4 fabd 	bl	800f9fc <lwip_htons>
 801b482:	4603      	mov	r3, r0
 801b484:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b486:	210e      	movs	r1, #14
 801b488:	68b8      	ldr	r0, [r7, #8]
 801b48a:	f7f5 fcb9 	bl	8010e00 <pbuf_add_header>
 801b48e:	4603      	mov	r3, r0
 801b490:	2b00      	cmp	r3, #0
 801b492:	d125      	bne.n	801b4e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b494:	68bb      	ldr	r3, [r7, #8]
 801b496:	685b      	ldr	r3, [r3, #4]
 801b498:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	8afa      	ldrh	r2, [r7, #22]
 801b49e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	2206      	movs	r2, #6
 801b4a4:	6839      	ldr	r1, [r7, #0]
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	f000 f889 	bl	801b5be <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b4ac:	693b      	ldr	r3, [r7, #16]
 801b4ae:	3306      	adds	r3, #6
 801b4b0:	2206      	movs	r2, #6
 801b4b2:	6879      	ldr	r1, [r7, #4]
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f000 f882 	bl	801b5be <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b4c0:	2b06      	cmp	r3, #6
 801b4c2:	d006      	beq.n	801b4d2 <ethernet_output+0x66>
 801b4c4:	4b0a      	ldr	r3, [pc, #40]	; (801b4f0 <ethernet_output+0x84>)
 801b4c6:	f240 1233 	movw	r2, #307	; 0x133
 801b4ca:	490a      	ldr	r1, [pc, #40]	; (801b4f4 <ethernet_output+0x88>)
 801b4cc:	480a      	ldr	r0, [pc, #40]	; (801b4f8 <ethernet_output+0x8c>)
 801b4ce:	f000 fda7 	bl	801c020 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	699b      	ldr	r3, [r3, #24]
 801b4d6:	68b9      	ldr	r1, [r7, #8]
 801b4d8:	68f8      	ldr	r0, [r7, #12]
 801b4da:	4798      	blx	r3
 801b4dc:	4603      	mov	r3, r0
 801b4de:	e002      	b.n	801b4e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b4e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b4e2:	f06f 0301 	mvn.w	r3, #1
}
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	3718      	adds	r7, #24
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd80      	pop	{r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	08024304 	.word	0x08024304
 801b4f4:	0802433c 	.word	0x0802433c
 801b4f8:	08024370 	.word	0x08024370

0801b4fc <atof>:
 801b4fc:	2100      	movs	r1, #0
 801b4fe:	f001 bc7b 	b.w	801cdf8 <strtod>

0801b502 <atoi>:
 801b502:	220a      	movs	r2, #10
 801b504:	2100      	movs	r1, #0
 801b506:	f001 bd07 	b.w	801cf18 <strtol>
	...

0801b50c <__libc_init_array>:
 801b50c:	b570      	push	{r4, r5, r6, lr}
 801b50e:	4e0d      	ldr	r6, [pc, #52]	; (801b544 <__libc_init_array+0x38>)
 801b510:	4c0d      	ldr	r4, [pc, #52]	; (801b548 <__libc_init_array+0x3c>)
 801b512:	1ba4      	subs	r4, r4, r6
 801b514:	10a4      	asrs	r4, r4, #2
 801b516:	2500      	movs	r5, #0
 801b518:	42a5      	cmp	r5, r4
 801b51a:	d109      	bne.n	801b530 <__libc_init_array+0x24>
 801b51c:	4e0b      	ldr	r6, [pc, #44]	; (801b54c <__libc_init_array+0x40>)
 801b51e:	4c0c      	ldr	r4, [pc, #48]	; (801b550 <__libc_init_array+0x44>)
 801b520:	f005 f90e 	bl	8020740 <_init>
 801b524:	1ba4      	subs	r4, r4, r6
 801b526:	10a4      	asrs	r4, r4, #2
 801b528:	2500      	movs	r5, #0
 801b52a:	42a5      	cmp	r5, r4
 801b52c:	d105      	bne.n	801b53a <__libc_init_array+0x2e>
 801b52e:	bd70      	pop	{r4, r5, r6, pc}
 801b530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b534:	4798      	blx	r3
 801b536:	3501      	adds	r5, #1
 801b538:	e7ee      	b.n	801b518 <__libc_init_array+0xc>
 801b53a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b53e:	4798      	blx	r3
 801b540:	3501      	adds	r5, #1
 801b542:	e7f2      	b.n	801b52a <__libc_init_array+0x1e>
 801b544:	08024d70 	.word	0x08024d70
 801b548:	08024d70 	.word	0x08024d70
 801b54c:	08024d70 	.word	0x08024d70
 801b550:	08024d74 	.word	0x08024d74

0801b554 <__locale_ctype_ptr_l>:
 801b554:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801b558:	4770      	bx	lr
	...

0801b55c <malloc>:
 801b55c:	4b02      	ldr	r3, [pc, #8]	; (801b568 <malloc+0xc>)
 801b55e:	4601      	mov	r1, r0
 801b560:	6818      	ldr	r0, [r3, #0]
 801b562:	f000 b8a7 	b.w	801b6b4 <_malloc_r>
 801b566:	bf00      	nop
 801b568:	20000084 	.word	0x20000084

0801b56c <free>:
 801b56c:	4b02      	ldr	r3, [pc, #8]	; (801b578 <free+0xc>)
 801b56e:	4601      	mov	r1, r0
 801b570:	6818      	ldr	r0, [r3, #0]
 801b572:	f000 b851 	b.w	801b618 <_free_r>
 801b576:	bf00      	nop
 801b578:	20000084 	.word	0x20000084

0801b57c <__ascii_mbtowc>:
 801b57c:	b082      	sub	sp, #8
 801b57e:	b901      	cbnz	r1, 801b582 <__ascii_mbtowc+0x6>
 801b580:	a901      	add	r1, sp, #4
 801b582:	b142      	cbz	r2, 801b596 <__ascii_mbtowc+0x1a>
 801b584:	b14b      	cbz	r3, 801b59a <__ascii_mbtowc+0x1e>
 801b586:	7813      	ldrb	r3, [r2, #0]
 801b588:	600b      	str	r3, [r1, #0]
 801b58a:	7812      	ldrb	r2, [r2, #0]
 801b58c:	1c10      	adds	r0, r2, #0
 801b58e:	bf18      	it	ne
 801b590:	2001      	movne	r0, #1
 801b592:	b002      	add	sp, #8
 801b594:	4770      	bx	lr
 801b596:	4610      	mov	r0, r2
 801b598:	e7fb      	b.n	801b592 <__ascii_mbtowc+0x16>
 801b59a:	f06f 0001 	mvn.w	r0, #1
 801b59e:	e7f8      	b.n	801b592 <__ascii_mbtowc+0x16>

0801b5a0 <memcmp>:
 801b5a0:	b530      	push	{r4, r5, lr}
 801b5a2:	2400      	movs	r4, #0
 801b5a4:	42a2      	cmp	r2, r4
 801b5a6:	d101      	bne.n	801b5ac <memcmp+0xc>
 801b5a8:	2000      	movs	r0, #0
 801b5aa:	e007      	b.n	801b5bc <memcmp+0x1c>
 801b5ac:	5d03      	ldrb	r3, [r0, r4]
 801b5ae:	3401      	adds	r4, #1
 801b5b0:	190d      	adds	r5, r1, r4
 801b5b2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801b5b6:	42ab      	cmp	r3, r5
 801b5b8:	d0f4      	beq.n	801b5a4 <memcmp+0x4>
 801b5ba:	1b58      	subs	r0, r3, r5
 801b5bc:	bd30      	pop	{r4, r5, pc}

0801b5be <memcpy>:
 801b5be:	b510      	push	{r4, lr}
 801b5c0:	1e43      	subs	r3, r0, #1
 801b5c2:	440a      	add	r2, r1
 801b5c4:	4291      	cmp	r1, r2
 801b5c6:	d100      	bne.n	801b5ca <memcpy+0xc>
 801b5c8:	bd10      	pop	{r4, pc}
 801b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5d2:	e7f7      	b.n	801b5c4 <memcpy+0x6>

0801b5d4 <memmove>:
 801b5d4:	4288      	cmp	r0, r1
 801b5d6:	b510      	push	{r4, lr}
 801b5d8:	eb01 0302 	add.w	r3, r1, r2
 801b5dc:	d807      	bhi.n	801b5ee <memmove+0x1a>
 801b5de:	1e42      	subs	r2, r0, #1
 801b5e0:	4299      	cmp	r1, r3
 801b5e2:	d00a      	beq.n	801b5fa <memmove+0x26>
 801b5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b5ec:	e7f8      	b.n	801b5e0 <memmove+0xc>
 801b5ee:	4283      	cmp	r3, r0
 801b5f0:	d9f5      	bls.n	801b5de <memmove+0xa>
 801b5f2:	1881      	adds	r1, r0, r2
 801b5f4:	1ad2      	subs	r2, r2, r3
 801b5f6:	42d3      	cmn	r3, r2
 801b5f8:	d100      	bne.n	801b5fc <memmove+0x28>
 801b5fa:	bd10      	pop	{r4, pc}
 801b5fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b600:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b604:	e7f7      	b.n	801b5f6 <memmove+0x22>

0801b606 <memset>:
 801b606:	4402      	add	r2, r0
 801b608:	4603      	mov	r3, r0
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d100      	bne.n	801b610 <memset+0xa>
 801b60e:	4770      	bx	lr
 801b610:	f803 1b01 	strb.w	r1, [r3], #1
 801b614:	e7f9      	b.n	801b60a <memset+0x4>
	...

0801b618 <_free_r>:
 801b618:	b538      	push	{r3, r4, r5, lr}
 801b61a:	4605      	mov	r5, r0
 801b61c:	2900      	cmp	r1, #0
 801b61e:	d045      	beq.n	801b6ac <_free_r+0x94>
 801b620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b624:	1f0c      	subs	r4, r1, #4
 801b626:	2b00      	cmp	r3, #0
 801b628:	bfb8      	it	lt
 801b62a:	18e4      	addlt	r4, r4, r3
 801b62c:	f002 fedc 	bl	801e3e8 <__malloc_lock>
 801b630:	4a1f      	ldr	r2, [pc, #124]	; (801b6b0 <_free_r+0x98>)
 801b632:	6813      	ldr	r3, [r2, #0]
 801b634:	4610      	mov	r0, r2
 801b636:	b933      	cbnz	r3, 801b646 <_free_r+0x2e>
 801b638:	6063      	str	r3, [r4, #4]
 801b63a:	6014      	str	r4, [r2, #0]
 801b63c:	4628      	mov	r0, r5
 801b63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b642:	f002 bed2 	b.w	801e3ea <__malloc_unlock>
 801b646:	42a3      	cmp	r3, r4
 801b648:	d90c      	bls.n	801b664 <_free_r+0x4c>
 801b64a:	6821      	ldr	r1, [r4, #0]
 801b64c:	1862      	adds	r2, r4, r1
 801b64e:	4293      	cmp	r3, r2
 801b650:	bf04      	itt	eq
 801b652:	681a      	ldreq	r2, [r3, #0]
 801b654:	685b      	ldreq	r3, [r3, #4]
 801b656:	6063      	str	r3, [r4, #4]
 801b658:	bf04      	itt	eq
 801b65a:	1852      	addeq	r2, r2, r1
 801b65c:	6022      	streq	r2, [r4, #0]
 801b65e:	6004      	str	r4, [r0, #0]
 801b660:	e7ec      	b.n	801b63c <_free_r+0x24>
 801b662:	4613      	mov	r3, r2
 801b664:	685a      	ldr	r2, [r3, #4]
 801b666:	b10a      	cbz	r2, 801b66c <_free_r+0x54>
 801b668:	42a2      	cmp	r2, r4
 801b66a:	d9fa      	bls.n	801b662 <_free_r+0x4a>
 801b66c:	6819      	ldr	r1, [r3, #0]
 801b66e:	1858      	adds	r0, r3, r1
 801b670:	42a0      	cmp	r0, r4
 801b672:	d10b      	bne.n	801b68c <_free_r+0x74>
 801b674:	6820      	ldr	r0, [r4, #0]
 801b676:	4401      	add	r1, r0
 801b678:	1858      	adds	r0, r3, r1
 801b67a:	4282      	cmp	r2, r0
 801b67c:	6019      	str	r1, [r3, #0]
 801b67e:	d1dd      	bne.n	801b63c <_free_r+0x24>
 801b680:	6810      	ldr	r0, [r2, #0]
 801b682:	6852      	ldr	r2, [r2, #4]
 801b684:	605a      	str	r2, [r3, #4]
 801b686:	4401      	add	r1, r0
 801b688:	6019      	str	r1, [r3, #0]
 801b68a:	e7d7      	b.n	801b63c <_free_r+0x24>
 801b68c:	d902      	bls.n	801b694 <_free_r+0x7c>
 801b68e:	230c      	movs	r3, #12
 801b690:	602b      	str	r3, [r5, #0]
 801b692:	e7d3      	b.n	801b63c <_free_r+0x24>
 801b694:	6820      	ldr	r0, [r4, #0]
 801b696:	1821      	adds	r1, r4, r0
 801b698:	428a      	cmp	r2, r1
 801b69a:	bf04      	itt	eq
 801b69c:	6811      	ldreq	r1, [r2, #0]
 801b69e:	6852      	ldreq	r2, [r2, #4]
 801b6a0:	6062      	str	r2, [r4, #4]
 801b6a2:	bf04      	itt	eq
 801b6a4:	1809      	addeq	r1, r1, r0
 801b6a6:	6021      	streq	r1, [r4, #0]
 801b6a8:	605c      	str	r4, [r3, #4]
 801b6aa:	e7c7      	b.n	801b63c <_free_r+0x24>
 801b6ac:	bd38      	pop	{r3, r4, r5, pc}
 801b6ae:	bf00      	nop
 801b6b0:	20001180 	.word	0x20001180

0801b6b4 <_malloc_r>:
 801b6b4:	b570      	push	{r4, r5, r6, lr}
 801b6b6:	1ccd      	adds	r5, r1, #3
 801b6b8:	f025 0503 	bic.w	r5, r5, #3
 801b6bc:	3508      	adds	r5, #8
 801b6be:	2d0c      	cmp	r5, #12
 801b6c0:	bf38      	it	cc
 801b6c2:	250c      	movcc	r5, #12
 801b6c4:	2d00      	cmp	r5, #0
 801b6c6:	4606      	mov	r6, r0
 801b6c8:	db01      	blt.n	801b6ce <_malloc_r+0x1a>
 801b6ca:	42a9      	cmp	r1, r5
 801b6cc:	d903      	bls.n	801b6d6 <_malloc_r+0x22>
 801b6ce:	230c      	movs	r3, #12
 801b6d0:	6033      	str	r3, [r6, #0]
 801b6d2:	2000      	movs	r0, #0
 801b6d4:	bd70      	pop	{r4, r5, r6, pc}
 801b6d6:	f002 fe87 	bl	801e3e8 <__malloc_lock>
 801b6da:	4a21      	ldr	r2, [pc, #132]	; (801b760 <_malloc_r+0xac>)
 801b6dc:	6814      	ldr	r4, [r2, #0]
 801b6de:	4621      	mov	r1, r4
 801b6e0:	b991      	cbnz	r1, 801b708 <_malloc_r+0x54>
 801b6e2:	4c20      	ldr	r4, [pc, #128]	; (801b764 <_malloc_r+0xb0>)
 801b6e4:	6823      	ldr	r3, [r4, #0]
 801b6e6:	b91b      	cbnz	r3, 801b6f0 <_malloc_r+0x3c>
 801b6e8:	4630      	mov	r0, r6
 801b6ea:	f000 fce5 	bl	801c0b8 <_sbrk_r>
 801b6ee:	6020      	str	r0, [r4, #0]
 801b6f0:	4629      	mov	r1, r5
 801b6f2:	4630      	mov	r0, r6
 801b6f4:	f000 fce0 	bl	801c0b8 <_sbrk_r>
 801b6f8:	1c43      	adds	r3, r0, #1
 801b6fa:	d124      	bne.n	801b746 <_malloc_r+0x92>
 801b6fc:	230c      	movs	r3, #12
 801b6fe:	6033      	str	r3, [r6, #0]
 801b700:	4630      	mov	r0, r6
 801b702:	f002 fe72 	bl	801e3ea <__malloc_unlock>
 801b706:	e7e4      	b.n	801b6d2 <_malloc_r+0x1e>
 801b708:	680b      	ldr	r3, [r1, #0]
 801b70a:	1b5b      	subs	r3, r3, r5
 801b70c:	d418      	bmi.n	801b740 <_malloc_r+0x8c>
 801b70e:	2b0b      	cmp	r3, #11
 801b710:	d90f      	bls.n	801b732 <_malloc_r+0x7e>
 801b712:	600b      	str	r3, [r1, #0]
 801b714:	50cd      	str	r5, [r1, r3]
 801b716:	18cc      	adds	r4, r1, r3
 801b718:	4630      	mov	r0, r6
 801b71a:	f002 fe66 	bl	801e3ea <__malloc_unlock>
 801b71e:	f104 000b 	add.w	r0, r4, #11
 801b722:	1d23      	adds	r3, r4, #4
 801b724:	f020 0007 	bic.w	r0, r0, #7
 801b728:	1ac3      	subs	r3, r0, r3
 801b72a:	d0d3      	beq.n	801b6d4 <_malloc_r+0x20>
 801b72c:	425a      	negs	r2, r3
 801b72e:	50e2      	str	r2, [r4, r3]
 801b730:	e7d0      	b.n	801b6d4 <_malloc_r+0x20>
 801b732:	428c      	cmp	r4, r1
 801b734:	684b      	ldr	r3, [r1, #4]
 801b736:	bf16      	itet	ne
 801b738:	6063      	strne	r3, [r4, #4]
 801b73a:	6013      	streq	r3, [r2, #0]
 801b73c:	460c      	movne	r4, r1
 801b73e:	e7eb      	b.n	801b718 <_malloc_r+0x64>
 801b740:	460c      	mov	r4, r1
 801b742:	6849      	ldr	r1, [r1, #4]
 801b744:	e7cc      	b.n	801b6e0 <_malloc_r+0x2c>
 801b746:	1cc4      	adds	r4, r0, #3
 801b748:	f024 0403 	bic.w	r4, r4, #3
 801b74c:	42a0      	cmp	r0, r4
 801b74e:	d005      	beq.n	801b75c <_malloc_r+0xa8>
 801b750:	1a21      	subs	r1, r4, r0
 801b752:	4630      	mov	r0, r6
 801b754:	f000 fcb0 	bl	801c0b8 <_sbrk_r>
 801b758:	3001      	adds	r0, #1
 801b75a:	d0cf      	beq.n	801b6fc <_malloc_r+0x48>
 801b75c:	6025      	str	r5, [r4, #0]
 801b75e:	e7db      	b.n	801b718 <_malloc_r+0x64>
 801b760:	20001180 	.word	0x20001180
 801b764:	20001184 	.word	0x20001184

0801b768 <__cvt>:
 801b768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b76c:	ec55 4b10 	vmov	r4, r5, d0
 801b770:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b772:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b776:	2d00      	cmp	r5, #0
 801b778:	460e      	mov	r6, r1
 801b77a:	4691      	mov	r9, r2
 801b77c:	4619      	mov	r1, r3
 801b77e:	bfb8      	it	lt
 801b780:	4622      	movlt	r2, r4
 801b782:	462b      	mov	r3, r5
 801b784:	f027 0720 	bic.w	r7, r7, #32
 801b788:	bfbb      	ittet	lt
 801b78a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b78e:	461d      	movlt	r5, r3
 801b790:	2300      	movge	r3, #0
 801b792:	232d      	movlt	r3, #45	; 0x2d
 801b794:	bfb8      	it	lt
 801b796:	4614      	movlt	r4, r2
 801b798:	2f46      	cmp	r7, #70	; 0x46
 801b79a:	700b      	strb	r3, [r1, #0]
 801b79c:	d004      	beq.n	801b7a8 <__cvt+0x40>
 801b79e:	2f45      	cmp	r7, #69	; 0x45
 801b7a0:	d100      	bne.n	801b7a4 <__cvt+0x3c>
 801b7a2:	3601      	adds	r6, #1
 801b7a4:	2102      	movs	r1, #2
 801b7a6:	e000      	b.n	801b7aa <__cvt+0x42>
 801b7a8:	2103      	movs	r1, #3
 801b7aa:	ab03      	add	r3, sp, #12
 801b7ac:	9301      	str	r3, [sp, #4]
 801b7ae:	ab02      	add	r3, sp, #8
 801b7b0:	9300      	str	r3, [sp, #0]
 801b7b2:	4632      	mov	r2, r6
 801b7b4:	4653      	mov	r3, sl
 801b7b6:	ec45 4b10 	vmov	d0, r4, r5
 801b7ba:	f001 fc5d 	bl	801d078 <_dtoa_r>
 801b7be:	2f47      	cmp	r7, #71	; 0x47
 801b7c0:	4680      	mov	r8, r0
 801b7c2:	d102      	bne.n	801b7ca <__cvt+0x62>
 801b7c4:	f019 0f01 	tst.w	r9, #1
 801b7c8:	d026      	beq.n	801b818 <__cvt+0xb0>
 801b7ca:	2f46      	cmp	r7, #70	; 0x46
 801b7cc:	eb08 0906 	add.w	r9, r8, r6
 801b7d0:	d111      	bne.n	801b7f6 <__cvt+0x8e>
 801b7d2:	f898 3000 	ldrb.w	r3, [r8]
 801b7d6:	2b30      	cmp	r3, #48	; 0x30
 801b7d8:	d10a      	bne.n	801b7f0 <__cvt+0x88>
 801b7da:	2200      	movs	r2, #0
 801b7dc:	2300      	movs	r3, #0
 801b7de:	4620      	mov	r0, r4
 801b7e0:	4629      	mov	r1, r5
 801b7e2:	f7e5 f981 	bl	8000ae8 <__aeabi_dcmpeq>
 801b7e6:	b918      	cbnz	r0, 801b7f0 <__cvt+0x88>
 801b7e8:	f1c6 0601 	rsb	r6, r6, #1
 801b7ec:	f8ca 6000 	str.w	r6, [sl]
 801b7f0:	f8da 3000 	ldr.w	r3, [sl]
 801b7f4:	4499      	add	r9, r3
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	4629      	mov	r1, r5
 801b7fe:	f7e5 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 801b802:	b938      	cbnz	r0, 801b814 <__cvt+0xac>
 801b804:	2230      	movs	r2, #48	; 0x30
 801b806:	9b03      	ldr	r3, [sp, #12]
 801b808:	454b      	cmp	r3, r9
 801b80a:	d205      	bcs.n	801b818 <__cvt+0xb0>
 801b80c:	1c59      	adds	r1, r3, #1
 801b80e:	9103      	str	r1, [sp, #12]
 801b810:	701a      	strb	r2, [r3, #0]
 801b812:	e7f8      	b.n	801b806 <__cvt+0x9e>
 801b814:	f8cd 900c 	str.w	r9, [sp, #12]
 801b818:	9b03      	ldr	r3, [sp, #12]
 801b81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b81c:	eba3 0308 	sub.w	r3, r3, r8
 801b820:	4640      	mov	r0, r8
 801b822:	6013      	str	r3, [r2, #0]
 801b824:	b004      	add	sp, #16
 801b826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b82a <__exponent>:
 801b82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b82c:	2900      	cmp	r1, #0
 801b82e:	4604      	mov	r4, r0
 801b830:	bfba      	itte	lt
 801b832:	4249      	neglt	r1, r1
 801b834:	232d      	movlt	r3, #45	; 0x2d
 801b836:	232b      	movge	r3, #43	; 0x2b
 801b838:	2909      	cmp	r1, #9
 801b83a:	f804 2b02 	strb.w	r2, [r4], #2
 801b83e:	7043      	strb	r3, [r0, #1]
 801b840:	dd20      	ble.n	801b884 <__exponent+0x5a>
 801b842:	f10d 0307 	add.w	r3, sp, #7
 801b846:	461f      	mov	r7, r3
 801b848:	260a      	movs	r6, #10
 801b84a:	fb91 f5f6 	sdiv	r5, r1, r6
 801b84e:	fb06 1115 	mls	r1, r6, r5, r1
 801b852:	3130      	adds	r1, #48	; 0x30
 801b854:	2d09      	cmp	r5, #9
 801b856:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b85a:	f103 32ff 	add.w	r2, r3, #4294967295
 801b85e:	4629      	mov	r1, r5
 801b860:	dc09      	bgt.n	801b876 <__exponent+0x4c>
 801b862:	3130      	adds	r1, #48	; 0x30
 801b864:	3b02      	subs	r3, #2
 801b866:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b86a:	42bb      	cmp	r3, r7
 801b86c:	4622      	mov	r2, r4
 801b86e:	d304      	bcc.n	801b87a <__exponent+0x50>
 801b870:	1a10      	subs	r0, r2, r0
 801b872:	b003      	add	sp, #12
 801b874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b876:	4613      	mov	r3, r2
 801b878:	e7e7      	b.n	801b84a <__exponent+0x20>
 801b87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b87e:	f804 2b01 	strb.w	r2, [r4], #1
 801b882:	e7f2      	b.n	801b86a <__exponent+0x40>
 801b884:	2330      	movs	r3, #48	; 0x30
 801b886:	4419      	add	r1, r3
 801b888:	7083      	strb	r3, [r0, #2]
 801b88a:	1d02      	adds	r2, r0, #4
 801b88c:	70c1      	strb	r1, [r0, #3]
 801b88e:	e7ef      	b.n	801b870 <__exponent+0x46>

0801b890 <_printf_float>:
 801b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b894:	b08d      	sub	sp, #52	; 0x34
 801b896:	460c      	mov	r4, r1
 801b898:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b89c:	4616      	mov	r6, r2
 801b89e:	461f      	mov	r7, r3
 801b8a0:	4605      	mov	r5, r0
 801b8a2:	f002 fd93 	bl	801e3cc <_localeconv_r>
 801b8a6:	6803      	ldr	r3, [r0, #0]
 801b8a8:	9304      	str	r3, [sp, #16]
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7e4 fc9a 	bl	80001e4 <strlen>
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b8b4:	f8d8 3000 	ldr.w	r3, [r8]
 801b8b8:	9005      	str	r0, [sp, #20]
 801b8ba:	3307      	adds	r3, #7
 801b8bc:	f023 0307 	bic.w	r3, r3, #7
 801b8c0:	f103 0208 	add.w	r2, r3, #8
 801b8c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b8c8:	f8d4 b000 	ldr.w	fp, [r4]
 801b8cc:	f8c8 2000 	str.w	r2, [r8]
 801b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b8d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b8dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b8e0:	9307      	str	r3, [sp, #28]
 801b8e2:	f8cd 8018 	str.w	r8, [sp, #24]
 801b8e6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8ea:	4ba7      	ldr	r3, [pc, #668]	; (801bb88 <_printf_float+0x2f8>)
 801b8ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b8f0:	f7e5 f92c 	bl	8000b4c <__aeabi_dcmpun>
 801b8f4:	bb70      	cbnz	r0, 801b954 <_printf_float+0xc4>
 801b8f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8fa:	4ba3      	ldr	r3, [pc, #652]	; (801bb88 <_printf_float+0x2f8>)
 801b8fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b900:	f7e5 f906 	bl	8000b10 <__aeabi_dcmple>
 801b904:	bb30      	cbnz	r0, 801b954 <_printf_float+0xc4>
 801b906:	2200      	movs	r2, #0
 801b908:	2300      	movs	r3, #0
 801b90a:	4640      	mov	r0, r8
 801b90c:	4649      	mov	r1, r9
 801b90e:	f7e5 f8f5 	bl	8000afc <__aeabi_dcmplt>
 801b912:	b110      	cbz	r0, 801b91a <_printf_float+0x8a>
 801b914:	232d      	movs	r3, #45	; 0x2d
 801b916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b91a:	4a9c      	ldr	r2, [pc, #624]	; (801bb8c <_printf_float+0x2fc>)
 801b91c:	4b9c      	ldr	r3, [pc, #624]	; (801bb90 <_printf_float+0x300>)
 801b91e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b922:	bf8c      	ite	hi
 801b924:	4690      	movhi	r8, r2
 801b926:	4698      	movls	r8, r3
 801b928:	2303      	movs	r3, #3
 801b92a:	f02b 0204 	bic.w	r2, fp, #4
 801b92e:	6123      	str	r3, [r4, #16]
 801b930:	6022      	str	r2, [r4, #0]
 801b932:	f04f 0900 	mov.w	r9, #0
 801b936:	9700      	str	r7, [sp, #0]
 801b938:	4633      	mov	r3, r6
 801b93a:	aa0b      	add	r2, sp, #44	; 0x2c
 801b93c:	4621      	mov	r1, r4
 801b93e:	4628      	mov	r0, r5
 801b940:	f000 f9e6 	bl	801bd10 <_printf_common>
 801b944:	3001      	adds	r0, #1
 801b946:	f040 808d 	bne.w	801ba64 <_printf_float+0x1d4>
 801b94a:	f04f 30ff 	mov.w	r0, #4294967295
 801b94e:	b00d      	add	sp, #52	; 0x34
 801b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b954:	4642      	mov	r2, r8
 801b956:	464b      	mov	r3, r9
 801b958:	4640      	mov	r0, r8
 801b95a:	4649      	mov	r1, r9
 801b95c:	f7e5 f8f6 	bl	8000b4c <__aeabi_dcmpun>
 801b960:	b110      	cbz	r0, 801b968 <_printf_float+0xd8>
 801b962:	4a8c      	ldr	r2, [pc, #560]	; (801bb94 <_printf_float+0x304>)
 801b964:	4b8c      	ldr	r3, [pc, #560]	; (801bb98 <_printf_float+0x308>)
 801b966:	e7da      	b.n	801b91e <_printf_float+0x8e>
 801b968:	6861      	ldr	r1, [r4, #4]
 801b96a:	1c4b      	adds	r3, r1, #1
 801b96c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801b970:	a80a      	add	r0, sp, #40	; 0x28
 801b972:	d13e      	bne.n	801b9f2 <_printf_float+0x162>
 801b974:	2306      	movs	r3, #6
 801b976:	6063      	str	r3, [r4, #4]
 801b978:	2300      	movs	r3, #0
 801b97a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b97e:	ab09      	add	r3, sp, #36	; 0x24
 801b980:	9300      	str	r3, [sp, #0]
 801b982:	ec49 8b10 	vmov	d0, r8, r9
 801b986:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b98a:	6022      	str	r2, [r4, #0]
 801b98c:	f8cd a004 	str.w	sl, [sp, #4]
 801b990:	6861      	ldr	r1, [r4, #4]
 801b992:	4628      	mov	r0, r5
 801b994:	f7ff fee8 	bl	801b768 <__cvt>
 801b998:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801b99c:	2b47      	cmp	r3, #71	; 0x47
 801b99e:	4680      	mov	r8, r0
 801b9a0:	d109      	bne.n	801b9b6 <_printf_float+0x126>
 801b9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9a4:	1cd8      	adds	r0, r3, #3
 801b9a6:	db02      	blt.n	801b9ae <_printf_float+0x11e>
 801b9a8:	6862      	ldr	r2, [r4, #4]
 801b9aa:	4293      	cmp	r3, r2
 801b9ac:	dd47      	ble.n	801ba3e <_printf_float+0x1ae>
 801b9ae:	f1aa 0a02 	sub.w	sl, sl, #2
 801b9b2:	fa5f fa8a 	uxtb.w	sl, sl
 801b9b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9bc:	d824      	bhi.n	801ba08 <_printf_float+0x178>
 801b9be:	3901      	subs	r1, #1
 801b9c0:	4652      	mov	r2, sl
 801b9c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b9c6:	9109      	str	r1, [sp, #36]	; 0x24
 801b9c8:	f7ff ff2f 	bl	801b82a <__exponent>
 801b9cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b9ce:	1813      	adds	r3, r2, r0
 801b9d0:	2a01      	cmp	r2, #1
 801b9d2:	4681      	mov	r9, r0
 801b9d4:	6123      	str	r3, [r4, #16]
 801b9d6:	dc02      	bgt.n	801b9de <_printf_float+0x14e>
 801b9d8:	6822      	ldr	r2, [r4, #0]
 801b9da:	07d1      	lsls	r1, r2, #31
 801b9dc:	d501      	bpl.n	801b9e2 <_printf_float+0x152>
 801b9de:	3301      	adds	r3, #1
 801b9e0:	6123      	str	r3, [r4, #16]
 801b9e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d0a5      	beq.n	801b936 <_printf_float+0xa6>
 801b9ea:	232d      	movs	r3, #45	; 0x2d
 801b9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9f0:	e7a1      	b.n	801b936 <_printf_float+0xa6>
 801b9f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801b9f6:	f000 8177 	beq.w	801bce8 <_printf_float+0x458>
 801b9fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b9fe:	d1bb      	bne.n	801b978 <_printf_float+0xe8>
 801ba00:	2900      	cmp	r1, #0
 801ba02:	d1b9      	bne.n	801b978 <_printf_float+0xe8>
 801ba04:	2301      	movs	r3, #1
 801ba06:	e7b6      	b.n	801b976 <_printf_float+0xe6>
 801ba08:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801ba0c:	d119      	bne.n	801ba42 <_printf_float+0x1b2>
 801ba0e:	2900      	cmp	r1, #0
 801ba10:	6863      	ldr	r3, [r4, #4]
 801ba12:	dd0c      	ble.n	801ba2e <_printf_float+0x19e>
 801ba14:	6121      	str	r1, [r4, #16]
 801ba16:	b913      	cbnz	r3, 801ba1e <_printf_float+0x18e>
 801ba18:	6822      	ldr	r2, [r4, #0]
 801ba1a:	07d2      	lsls	r2, r2, #31
 801ba1c:	d502      	bpl.n	801ba24 <_printf_float+0x194>
 801ba1e:	3301      	adds	r3, #1
 801ba20:	440b      	add	r3, r1
 801ba22:	6123      	str	r3, [r4, #16]
 801ba24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba26:	65a3      	str	r3, [r4, #88]	; 0x58
 801ba28:	f04f 0900 	mov.w	r9, #0
 801ba2c:	e7d9      	b.n	801b9e2 <_printf_float+0x152>
 801ba2e:	b913      	cbnz	r3, 801ba36 <_printf_float+0x1a6>
 801ba30:	6822      	ldr	r2, [r4, #0]
 801ba32:	07d0      	lsls	r0, r2, #31
 801ba34:	d501      	bpl.n	801ba3a <_printf_float+0x1aa>
 801ba36:	3302      	adds	r3, #2
 801ba38:	e7f3      	b.n	801ba22 <_printf_float+0x192>
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	e7f1      	b.n	801ba22 <_printf_float+0x192>
 801ba3e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801ba42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ba46:	4293      	cmp	r3, r2
 801ba48:	db05      	blt.n	801ba56 <_printf_float+0x1c6>
 801ba4a:	6822      	ldr	r2, [r4, #0]
 801ba4c:	6123      	str	r3, [r4, #16]
 801ba4e:	07d1      	lsls	r1, r2, #31
 801ba50:	d5e8      	bpl.n	801ba24 <_printf_float+0x194>
 801ba52:	3301      	adds	r3, #1
 801ba54:	e7e5      	b.n	801ba22 <_printf_float+0x192>
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	bfd4      	ite	le
 801ba5a:	f1c3 0302 	rsble	r3, r3, #2
 801ba5e:	2301      	movgt	r3, #1
 801ba60:	4413      	add	r3, r2
 801ba62:	e7de      	b.n	801ba22 <_printf_float+0x192>
 801ba64:	6823      	ldr	r3, [r4, #0]
 801ba66:	055a      	lsls	r2, r3, #21
 801ba68:	d407      	bmi.n	801ba7a <_printf_float+0x1ea>
 801ba6a:	6923      	ldr	r3, [r4, #16]
 801ba6c:	4642      	mov	r2, r8
 801ba6e:	4631      	mov	r1, r6
 801ba70:	4628      	mov	r0, r5
 801ba72:	47b8      	blx	r7
 801ba74:	3001      	adds	r0, #1
 801ba76:	d12b      	bne.n	801bad0 <_printf_float+0x240>
 801ba78:	e767      	b.n	801b94a <_printf_float+0xba>
 801ba7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801ba7e:	f240 80dc 	bls.w	801bc3a <_printf_float+0x3aa>
 801ba82:	2200      	movs	r2, #0
 801ba84:	2300      	movs	r3, #0
 801ba86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ba8a:	f7e5 f82d 	bl	8000ae8 <__aeabi_dcmpeq>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	d033      	beq.n	801bafa <_printf_float+0x26a>
 801ba92:	2301      	movs	r3, #1
 801ba94:	4a41      	ldr	r2, [pc, #260]	; (801bb9c <_printf_float+0x30c>)
 801ba96:	4631      	mov	r1, r6
 801ba98:	4628      	mov	r0, r5
 801ba9a:	47b8      	blx	r7
 801ba9c:	3001      	adds	r0, #1
 801ba9e:	f43f af54 	beq.w	801b94a <_printf_float+0xba>
 801baa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801baa6:	429a      	cmp	r2, r3
 801baa8:	db02      	blt.n	801bab0 <_printf_float+0x220>
 801baaa:	6823      	ldr	r3, [r4, #0]
 801baac:	07d8      	lsls	r0, r3, #31
 801baae:	d50f      	bpl.n	801bad0 <_printf_float+0x240>
 801bab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bab4:	4631      	mov	r1, r6
 801bab6:	4628      	mov	r0, r5
 801bab8:	47b8      	blx	r7
 801baba:	3001      	adds	r0, #1
 801babc:	f43f af45 	beq.w	801b94a <_printf_float+0xba>
 801bac0:	f04f 0800 	mov.w	r8, #0
 801bac4:	f104 091a 	add.w	r9, r4, #26
 801bac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baca:	3b01      	subs	r3, #1
 801bacc:	4543      	cmp	r3, r8
 801bace:	dc09      	bgt.n	801bae4 <_printf_float+0x254>
 801bad0:	6823      	ldr	r3, [r4, #0]
 801bad2:	079b      	lsls	r3, r3, #30
 801bad4:	f100 8103 	bmi.w	801bcde <_printf_float+0x44e>
 801bad8:	68e0      	ldr	r0, [r4, #12]
 801bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801badc:	4298      	cmp	r0, r3
 801bade:	bfb8      	it	lt
 801bae0:	4618      	movlt	r0, r3
 801bae2:	e734      	b.n	801b94e <_printf_float+0xbe>
 801bae4:	2301      	movs	r3, #1
 801bae6:	464a      	mov	r2, r9
 801bae8:	4631      	mov	r1, r6
 801baea:	4628      	mov	r0, r5
 801baec:	47b8      	blx	r7
 801baee:	3001      	adds	r0, #1
 801baf0:	f43f af2b 	beq.w	801b94a <_printf_float+0xba>
 801baf4:	f108 0801 	add.w	r8, r8, #1
 801baf8:	e7e6      	b.n	801bac8 <_printf_float+0x238>
 801bafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	dc2b      	bgt.n	801bb58 <_printf_float+0x2c8>
 801bb00:	2301      	movs	r3, #1
 801bb02:	4a26      	ldr	r2, [pc, #152]	; (801bb9c <_printf_float+0x30c>)
 801bb04:	4631      	mov	r1, r6
 801bb06:	4628      	mov	r0, r5
 801bb08:	47b8      	blx	r7
 801bb0a:	3001      	adds	r0, #1
 801bb0c:	f43f af1d 	beq.w	801b94a <_printf_float+0xba>
 801bb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb12:	b923      	cbnz	r3, 801bb1e <_printf_float+0x28e>
 801bb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb16:	b913      	cbnz	r3, 801bb1e <_printf_float+0x28e>
 801bb18:	6823      	ldr	r3, [r4, #0]
 801bb1a:	07d9      	lsls	r1, r3, #31
 801bb1c:	d5d8      	bpl.n	801bad0 <_printf_float+0x240>
 801bb1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb22:	4631      	mov	r1, r6
 801bb24:	4628      	mov	r0, r5
 801bb26:	47b8      	blx	r7
 801bb28:	3001      	adds	r0, #1
 801bb2a:	f43f af0e 	beq.w	801b94a <_printf_float+0xba>
 801bb2e:	f04f 0900 	mov.w	r9, #0
 801bb32:	f104 0a1a 	add.w	sl, r4, #26
 801bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb38:	425b      	negs	r3, r3
 801bb3a:	454b      	cmp	r3, r9
 801bb3c:	dc01      	bgt.n	801bb42 <_printf_float+0x2b2>
 801bb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb40:	e794      	b.n	801ba6c <_printf_float+0x1dc>
 801bb42:	2301      	movs	r3, #1
 801bb44:	4652      	mov	r2, sl
 801bb46:	4631      	mov	r1, r6
 801bb48:	4628      	mov	r0, r5
 801bb4a:	47b8      	blx	r7
 801bb4c:	3001      	adds	r0, #1
 801bb4e:	f43f aefc 	beq.w	801b94a <_printf_float+0xba>
 801bb52:	f109 0901 	add.w	r9, r9, #1
 801bb56:	e7ee      	b.n	801bb36 <_printf_float+0x2a6>
 801bb58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	bfa8      	it	ge
 801bb60:	461a      	movge	r2, r3
 801bb62:	2a00      	cmp	r2, #0
 801bb64:	4691      	mov	r9, r2
 801bb66:	dd07      	ble.n	801bb78 <_printf_float+0x2e8>
 801bb68:	4613      	mov	r3, r2
 801bb6a:	4631      	mov	r1, r6
 801bb6c:	4642      	mov	r2, r8
 801bb6e:	4628      	mov	r0, r5
 801bb70:	47b8      	blx	r7
 801bb72:	3001      	adds	r0, #1
 801bb74:	f43f aee9 	beq.w	801b94a <_printf_float+0xba>
 801bb78:	f104 031a 	add.w	r3, r4, #26
 801bb7c:	f04f 0b00 	mov.w	fp, #0
 801bb80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb84:	9306      	str	r3, [sp, #24]
 801bb86:	e015      	b.n	801bbb4 <_printf_float+0x324>
 801bb88:	7fefffff 	.word	0x7fefffff
 801bb8c:	08024b1a 	.word	0x08024b1a
 801bb90:	08024b16 	.word	0x08024b16
 801bb94:	08024b22 	.word	0x08024b22
 801bb98:	08024b1e 	.word	0x08024b1e
 801bb9c:	08024b26 	.word	0x08024b26
 801bba0:	2301      	movs	r3, #1
 801bba2:	9a06      	ldr	r2, [sp, #24]
 801bba4:	4631      	mov	r1, r6
 801bba6:	4628      	mov	r0, r5
 801bba8:	47b8      	blx	r7
 801bbaa:	3001      	adds	r0, #1
 801bbac:	f43f aecd 	beq.w	801b94a <_printf_float+0xba>
 801bbb0:	f10b 0b01 	add.w	fp, fp, #1
 801bbb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801bbb8:	ebaa 0309 	sub.w	r3, sl, r9
 801bbbc:	455b      	cmp	r3, fp
 801bbbe:	dcef      	bgt.n	801bba0 <_printf_float+0x310>
 801bbc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	44d0      	add	r8, sl
 801bbc8:	db15      	blt.n	801bbf6 <_printf_float+0x366>
 801bbca:	6823      	ldr	r3, [r4, #0]
 801bbcc:	07da      	lsls	r2, r3, #31
 801bbce:	d412      	bmi.n	801bbf6 <_printf_float+0x366>
 801bbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbd4:	eba3 020a 	sub.w	r2, r3, sl
 801bbd8:	eba3 0a01 	sub.w	sl, r3, r1
 801bbdc:	4592      	cmp	sl, r2
 801bbde:	bfa8      	it	ge
 801bbe0:	4692      	movge	sl, r2
 801bbe2:	f1ba 0f00 	cmp.w	sl, #0
 801bbe6:	dc0e      	bgt.n	801bc06 <_printf_float+0x376>
 801bbe8:	f04f 0800 	mov.w	r8, #0
 801bbec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bbf0:	f104 091a 	add.w	r9, r4, #26
 801bbf4:	e019      	b.n	801bc2a <_printf_float+0x39a>
 801bbf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbfa:	4631      	mov	r1, r6
 801bbfc:	4628      	mov	r0, r5
 801bbfe:	47b8      	blx	r7
 801bc00:	3001      	adds	r0, #1
 801bc02:	d1e5      	bne.n	801bbd0 <_printf_float+0x340>
 801bc04:	e6a1      	b.n	801b94a <_printf_float+0xba>
 801bc06:	4653      	mov	r3, sl
 801bc08:	4642      	mov	r2, r8
 801bc0a:	4631      	mov	r1, r6
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	47b8      	blx	r7
 801bc10:	3001      	adds	r0, #1
 801bc12:	d1e9      	bne.n	801bbe8 <_printf_float+0x358>
 801bc14:	e699      	b.n	801b94a <_printf_float+0xba>
 801bc16:	2301      	movs	r3, #1
 801bc18:	464a      	mov	r2, r9
 801bc1a:	4631      	mov	r1, r6
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	47b8      	blx	r7
 801bc20:	3001      	adds	r0, #1
 801bc22:	f43f ae92 	beq.w	801b94a <_printf_float+0xba>
 801bc26:	f108 0801 	add.w	r8, r8, #1
 801bc2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bc2e:	1a9b      	subs	r3, r3, r2
 801bc30:	eba3 030a 	sub.w	r3, r3, sl
 801bc34:	4543      	cmp	r3, r8
 801bc36:	dcee      	bgt.n	801bc16 <_printf_float+0x386>
 801bc38:	e74a      	b.n	801bad0 <_printf_float+0x240>
 801bc3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc3c:	2a01      	cmp	r2, #1
 801bc3e:	dc01      	bgt.n	801bc44 <_printf_float+0x3b4>
 801bc40:	07db      	lsls	r3, r3, #31
 801bc42:	d53a      	bpl.n	801bcba <_printf_float+0x42a>
 801bc44:	2301      	movs	r3, #1
 801bc46:	4642      	mov	r2, r8
 801bc48:	4631      	mov	r1, r6
 801bc4a:	4628      	mov	r0, r5
 801bc4c:	47b8      	blx	r7
 801bc4e:	3001      	adds	r0, #1
 801bc50:	f43f ae7b 	beq.w	801b94a <_printf_float+0xba>
 801bc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc58:	4631      	mov	r1, r6
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	47b8      	blx	r7
 801bc5e:	3001      	adds	r0, #1
 801bc60:	f108 0801 	add.w	r8, r8, #1
 801bc64:	f43f ae71 	beq.w	801b94a <_printf_float+0xba>
 801bc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	f103 3aff 	add.w	sl, r3, #4294967295
 801bc70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bc74:	2300      	movs	r3, #0
 801bc76:	f7e4 ff37 	bl	8000ae8 <__aeabi_dcmpeq>
 801bc7a:	b9c8      	cbnz	r0, 801bcb0 <_printf_float+0x420>
 801bc7c:	4653      	mov	r3, sl
 801bc7e:	4642      	mov	r2, r8
 801bc80:	4631      	mov	r1, r6
 801bc82:	4628      	mov	r0, r5
 801bc84:	47b8      	blx	r7
 801bc86:	3001      	adds	r0, #1
 801bc88:	d10e      	bne.n	801bca8 <_printf_float+0x418>
 801bc8a:	e65e      	b.n	801b94a <_printf_float+0xba>
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	4652      	mov	r2, sl
 801bc90:	4631      	mov	r1, r6
 801bc92:	4628      	mov	r0, r5
 801bc94:	47b8      	blx	r7
 801bc96:	3001      	adds	r0, #1
 801bc98:	f43f ae57 	beq.w	801b94a <_printf_float+0xba>
 801bc9c:	f108 0801 	add.w	r8, r8, #1
 801bca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bca2:	3b01      	subs	r3, #1
 801bca4:	4543      	cmp	r3, r8
 801bca6:	dcf1      	bgt.n	801bc8c <_printf_float+0x3fc>
 801bca8:	464b      	mov	r3, r9
 801bcaa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bcae:	e6de      	b.n	801ba6e <_printf_float+0x1de>
 801bcb0:	f04f 0800 	mov.w	r8, #0
 801bcb4:	f104 0a1a 	add.w	sl, r4, #26
 801bcb8:	e7f2      	b.n	801bca0 <_printf_float+0x410>
 801bcba:	2301      	movs	r3, #1
 801bcbc:	e7df      	b.n	801bc7e <_printf_float+0x3ee>
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	464a      	mov	r2, r9
 801bcc2:	4631      	mov	r1, r6
 801bcc4:	4628      	mov	r0, r5
 801bcc6:	47b8      	blx	r7
 801bcc8:	3001      	adds	r0, #1
 801bcca:	f43f ae3e 	beq.w	801b94a <_printf_float+0xba>
 801bcce:	f108 0801 	add.w	r8, r8, #1
 801bcd2:	68e3      	ldr	r3, [r4, #12]
 801bcd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bcd6:	1a9b      	subs	r3, r3, r2
 801bcd8:	4543      	cmp	r3, r8
 801bcda:	dcf0      	bgt.n	801bcbe <_printf_float+0x42e>
 801bcdc:	e6fc      	b.n	801bad8 <_printf_float+0x248>
 801bcde:	f04f 0800 	mov.w	r8, #0
 801bce2:	f104 0919 	add.w	r9, r4, #25
 801bce6:	e7f4      	b.n	801bcd2 <_printf_float+0x442>
 801bce8:	2900      	cmp	r1, #0
 801bcea:	f43f ae8b 	beq.w	801ba04 <_printf_float+0x174>
 801bcee:	2300      	movs	r3, #0
 801bcf0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801bcf4:	ab09      	add	r3, sp, #36	; 0x24
 801bcf6:	9300      	str	r3, [sp, #0]
 801bcf8:	ec49 8b10 	vmov	d0, r8, r9
 801bcfc:	6022      	str	r2, [r4, #0]
 801bcfe:	f8cd a004 	str.w	sl, [sp, #4]
 801bd02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bd06:	4628      	mov	r0, r5
 801bd08:	f7ff fd2e 	bl	801b768 <__cvt>
 801bd0c:	4680      	mov	r8, r0
 801bd0e:	e648      	b.n	801b9a2 <_printf_float+0x112>

0801bd10 <_printf_common>:
 801bd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd14:	4691      	mov	r9, r2
 801bd16:	461f      	mov	r7, r3
 801bd18:	688a      	ldr	r2, [r1, #8]
 801bd1a:	690b      	ldr	r3, [r1, #16]
 801bd1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bd20:	4293      	cmp	r3, r2
 801bd22:	bfb8      	it	lt
 801bd24:	4613      	movlt	r3, r2
 801bd26:	f8c9 3000 	str.w	r3, [r9]
 801bd2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bd2e:	4606      	mov	r6, r0
 801bd30:	460c      	mov	r4, r1
 801bd32:	b112      	cbz	r2, 801bd3a <_printf_common+0x2a>
 801bd34:	3301      	adds	r3, #1
 801bd36:	f8c9 3000 	str.w	r3, [r9]
 801bd3a:	6823      	ldr	r3, [r4, #0]
 801bd3c:	0699      	lsls	r1, r3, #26
 801bd3e:	bf42      	ittt	mi
 801bd40:	f8d9 3000 	ldrmi.w	r3, [r9]
 801bd44:	3302      	addmi	r3, #2
 801bd46:	f8c9 3000 	strmi.w	r3, [r9]
 801bd4a:	6825      	ldr	r5, [r4, #0]
 801bd4c:	f015 0506 	ands.w	r5, r5, #6
 801bd50:	d107      	bne.n	801bd62 <_printf_common+0x52>
 801bd52:	f104 0a19 	add.w	sl, r4, #25
 801bd56:	68e3      	ldr	r3, [r4, #12]
 801bd58:	f8d9 2000 	ldr.w	r2, [r9]
 801bd5c:	1a9b      	subs	r3, r3, r2
 801bd5e:	42ab      	cmp	r3, r5
 801bd60:	dc28      	bgt.n	801bdb4 <_printf_common+0xa4>
 801bd62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bd66:	6822      	ldr	r2, [r4, #0]
 801bd68:	3300      	adds	r3, #0
 801bd6a:	bf18      	it	ne
 801bd6c:	2301      	movne	r3, #1
 801bd6e:	0692      	lsls	r2, r2, #26
 801bd70:	d42d      	bmi.n	801bdce <_printf_common+0xbe>
 801bd72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bd76:	4639      	mov	r1, r7
 801bd78:	4630      	mov	r0, r6
 801bd7a:	47c0      	blx	r8
 801bd7c:	3001      	adds	r0, #1
 801bd7e:	d020      	beq.n	801bdc2 <_printf_common+0xb2>
 801bd80:	6823      	ldr	r3, [r4, #0]
 801bd82:	68e5      	ldr	r5, [r4, #12]
 801bd84:	f8d9 2000 	ldr.w	r2, [r9]
 801bd88:	f003 0306 	and.w	r3, r3, #6
 801bd8c:	2b04      	cmp	r3, #4
 801bd8e:	bf08      	it	eq
 801bd90:	1aad      	subeq	r5, r5, r2
 801bd92:	68a3      	ldr	r3, [r4, #8]
 801bd94:	6922      	ldr	r2, [r4, #16]
 801bd96:	bf0c      	ite	eq
 801bd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd9c:	2500      	movne	r5, #0
 801bd9e:	4293      	cmp	r3, r2
 801bda0:	bfc4      	itt	gt
 801bda2:	1a9b      	subgt	r3, r3, r2
 801bda4:	18ed      	addgt	r5, r5, r3
 801bda6:	f04f 0900 	mov.w	r9, #0
 801bdaa:	341a      	adds	r4, #26
 801bdac:	454d      	cmp	r5, r9
 801bdae:	d11a      	bne.n	801bde6 <_printf_common+0xd6>
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	e008      	b.n	801bdc6 <_printf_common+0xb6>
 801bdb4:	2301      	movs	r3, #1
 801bdb6:	4652      	mov	r2, sl
 801bdb8:	4639      	mov	r1, r7
 801bdba:	4630      	mov	r0, r6
 801bdbc:	47c0      	blx	r8
 801bdbe:	3001      	adds	r0, #1
 801bdc0:	d103      	bne.n	801bdca <_printf_common+0xba>
 801bdc2:	f04f 30ff 	mov.w	r0, #4294967295
 801bdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdca:	3501      	adds	r5, #1
 801bdcc:	e7c3      	b.n	801bd56 <_printf_common+0x46>
 801bdce:	18e1      	adds	r1, r4, r3
 801bdd0:	1c5a      	adds	r2, r3, #1
 801bdd2:	2030      	movs	r0, #48	; 0x30
 801bdd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bdd8:	4422      	add	r2, r4
 801bdda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bdde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bde2:	3302      	adds	r3, #2
 801bde4:	e7c5      	b.n	801bd72 <_printf_common+0x62>
 801bde6:	2301      	movs	r3, #1
 801bde8:	4622      	mov	r2, r4
 801bdea:	4639      	mov	r1, r7
 801bdec:	4630      	mov	r0, r6
 801bdee:	47c0      	blx	r8
 801bdf0:	3001      	adds	r0, #1
 801bdf2:	d0e6      	beq.n	801bdc2 <_printf_common+0xb2>
 801bdf4:	f109 0901 	add.w	r9, r9, #1
 801bdf8:	e7d8      	b.n	801bdac <_printf_common+0x9c>
	...

0801bdfc <_printf_i>:
 801bdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801be04:	460c      	mov	r4, r1
 801be06:	7e09      	ldrb	r1, [r1, #24]
 801be08:	b085      	sub	sp, #20
 801be0a:	296e      	cmp	r1, #110	; 0x6e
 801be0c:	4617      	mov	r7, r2
 801be0e:	4606      	mov	r6, r0
 801be10:	4698      	mov	r8, r3
 801be12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be14:	f000 80b3 	beq.w	801bf7e <_printf_i+0x182>
 801be18:	d822      	bhi.n	801be60 <_printf_i+0x64>
 801be1a:	2963      	cmp	r1, #99	; 0x63
 801be1c:	d036      	beq.n	801be8c <_printf_i+0x90>
 801be1e:	d80a      	bhi.n	801be36 <_printf_i+0x3a>
 801be20:	2900      	cmp	r1, #0
 801be22:	f000 80b9 	beq.w	801bf98 <_printf_i+0x19c>
 801be26:	2958      	cmp	r1, #88	; 0x58
 801be28:	f000 8083 	beq.w	801bf32 <_printf_i+0x136>
 801be2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801be34:	e032      	b.n	801be9c <_printf_i+0xa0>
 801be36:	2964      	cmp	r1, #100	; 0x64
 801be38:	d001      	beq.n	801be3e <_printf_i+0x42>
 801be3a:	2969      	cmp	r1, #105	; 0x69
 801be3c:	d1f6      	bne.n	801be2c <_printf_i+0x30>
 801be3e:	6820      	ldr	r0, [r4, #0]
 801be40:	6813      	ldr	r3, [r2, #0]
 801be42:	0605      	lsls	r5, r0, #24
 801be44:	f103 0104 	add.w	r1, r3, #4
 801be48:	d52a      	bpl.n	801bea0 <_printf_i+0xa4>
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	6011      	str	r1, [r2, #0]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	da03      	bge.n	801be5a <_printf_i+0x5e>
 801be52:	222d      	movs	r2, #45	; 0x2d
 801be54:	425b      	negs	r3, r3
 801be56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801be5a:	486f      	ldr	r0, [pc, #444]	; (801c018 <_printf_i+0x21c>)
 801be5c:	220a      	movs	r2, #10
 801be5e:	e039      	b.n	801bed4 <_printf_i+0xd8>
 801be60:	2973      	cmp	r1, #115	; 0x73
 801be62:	f000 809d 	beq.w	801bfa0 <_printf_i+0x1a4>
 801be66:	d808      	bhi.n	801be7a <_printf_i+0x7e>
 801be68:	296f      	cmp	r1, #111	; 0x6f
 801be6a:	d020      	beq.n	801beae <_printf_i+0xb2>
 801be6c:	2970      	cmp	r1, #112	; 0x70
 801be6e:	d1dd      	bne.n	801be2c <_printf_i+0x30>
 801be70:	6823      	ldr	r3, [r4, #0]
 801be72:	f043 0320 	orr.w	r3, r3, #32
 801be76:	6023      	str	r3, [r4, #0]
 801be78:	e003      	b.n	801be82 <_printf_i+0x86>
 801be7a:	2975      	cmp	r1, #117	; 0x75
 801be7c:	d017      	beq.n	801beae <_printf_i+0xb2>
 801be7e:	2978      	cmp	r1, #120	; 0x78
 801be80:	d1d4      	bne.n	801be2c <_printf_i+0x30>
 801be82:	2378      	movs	r3, #120	; 0x78
 801be84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801be88:	4864      	ldr	r0, [pc, #400]	; (801c01c <_printf_i+0x220>)
 801be8a:	e055      	b.n	801bf38 <_printf_i+0x13c>
 801be8c:	6813      	ldr	r3, [r2, #0]
 801be8e:	1d19      	adds	r1, r3, #4
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	6011      	str	r1, [r2, #0]
 801be94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801be9c:	2301      	movs	r3, #1
 801be9e:	e08c      	b.n	801bfba <_printf_i+0x1be>
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	6011      	str	r1, [r2, #0]
 801bea4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bea8:	bf18      	it	ne
 801beaa:	b21b      	sxthne	r3, r3
 801beac:	e7cf      	b.n	801be4e <_printf_i+0x52>
 801beae:	6813      	ldr	r3, [r2, #0]
 801beb0:	6825      	ldr	r5, [r4, #0]
 801beb2:	1d18      	adds	r0, r3, #4
 801beb4:	6010      	str	r0, [r2, #0]
 801beb6:	0628      	lsls	r0, r5, #24
 801beb8:	d501      	bpl.n	801bebe <_printf_i+0xc2>
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	e002      	b.n	801bec4 <_printf_i+0xc8>
 801bebe:	0668      	lsls	r0, r5, #25
 801bec0:	d5fb      	bpl.n	801beba <_printf_i+0xbe>
 801bec2:	881b      	ldrh	r3, [r3, #0]
 801bec4:	4854      	ldr	r0, [pc, #336]	; (801c018 <_printf_i+0x21c>)
 801bec6:	296f      	cmp	r1, #111	; 0x6f
 801bec8:	bf14      	ite	ne
 801beca:	220a      	movne	r2, #10
 801becc:	2208      	moveq	r2, #8
 801bece:	2100      	movs	r1, #0
 801bed0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bed4:	6865      	ldr	r5, [r4, #4]
 801bed6:	60a5      	str	r5, [r4, #8]
 801bed8:	2d00      	cmp	r5, #0
 801beda:	f2c0 8095 	blt.w	801c008 <_printf_i+0x20c>
 801bede:	6821      	ldr	r1, [r4, #0]
 801bee0:	f021 0104 	bic.w	r1, r1, #4
 801bee4:	6021      	str	r1, [r4, #0]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d13d      	bne.n	801bf66 <_printf_i+0x16a>
 801beea:	2d00      	cmp	r5, #0
 801beec:	f040 808e 	bne.w	801c00c <_printf_i+0x210>
 801bef0:	4665      	mov	r5, ip
 801bef2:	2a08      	cmp	r2, #8
 801bef4:	d10b      	bne.n	801bf0e <_printf_i+0x112>
 801bef6:	6823      	ldr	r3, [r4, #0]
 801bef8:	07db      	lsls	r3, r3, #31
 801befa:	d508      	bpl.n	801bf0e <_printf_i+0x112>
 801befc:	6923      	ldr	r3, [r4, #16]
 801befe:	6862      	ldr	r2, [r4, #4]
 801bf00:	429a      	cmp	r2, r3
 801bf02:	bfde      	ittt	le
 801bf04:	2330      	movle	r3, #48	; 0x30
 801bf06:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bf0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bf0e:	ebac 0305 	sub.w	r3, ip, r5
 801bf12:	6123      	str	r3, [r4, #16]
 801bf14:	f8cd 8000 	str.w	r8, [sp]
 801bf18:	463b      	mov	r3, r7
 801bf1a:	aa03      	add	r2, sp, #12
 801bf1c:	4621      	mov	r1, r4
 801bf1e:	4630      	mov	r0, r6
 801bf20:	f7ff fef6 	bl	801bd10 <_printf_common>
 801bf24:	3001      	adds	r0, #1
 801bf26:	d14d      	bne.n	801bfc4 <_printf_i+0x1c8>
 801bf28:	f04f 30ff 	mov.w	r0, #4294967295
 801bf2c:	b005      	add	sp, #20
 801bf2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf32:	4839      	ldr	r0, [pc, #228]	; (801c018 <_printf_i+0x21c>)
 801bf34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801bf38:	6813      	ldr	r3, [r2, #0]
 801bf3a:	6821      	ldr	r1, [r4, #0]
 801bf3c:	1d1d      	adds	r5, r3, #4
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	6015      	str	r5, [r2, #0]
 801bf42:	060a      	lsls	r2, r1, #24
 801bf44:	d50b      	bpl.n	801bf5e <_printf_i+0x162>
 801bf46:	07ca      	lsls	r2, r1, #31
 801bf48:	bf44      	itt	mi
 801bf4a:	f041 0120 	orrmi.w	r1, r1, #32
 801bf4e:	6021      	strmi	r1, [r4, #0]
 801bf50:	b91b      	cbnz	r3, 801bf5a <_printf_i+0x15e>
 801bf52:	6822      	ldr	r2, [r4, #0]
 801bf54:	f022 0220 	bic.w	r2, r2, #32
 801bf58:	6022      	str	r2, [r4, #0]
 801bf5a:	2210      	movs	r2, #16
 801bf5c:	e7b7      	b.n	801bece <_printf_i+0xd2>
 801bf5e:	064d      	lsls	r5, r1, #25
 801bf60:	bf48      	it	mi
 801bf62:	b29b      	uxthmi	r3, r3
 801bf64:	e7ef      	b.n	801bf46 <_printf_i+0x14a>
 801bf66:	4665      	mov	r5, ip
 801bf68:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf6c:	fb02 3311 	mls	r3, r2, r1, r3
 801bf70:	5cc3      	ldrb	r3, [r0, r3]
 801bf72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801bf76:	460b      	mov	r3, r1
 801bf78:	2900      	cmp	r1, #0
 801bf7a:	d1f5      	bne.n	801bf68 <_printf_i+0x16c>
 801bf7c:	e7b9      	b.n	801bef2 <_printf_i+0xf6>
 801bf7e:	6813      	ldr	r3, [r2, #0]
 801bf80:	6825      	ldr	r5, [r4, #0]
 801bf82:	6961      	ldr	r1, [r4, #20]
 801bf84:	1d18      	adds	r0, r3, #4
 801bf86:	6010      	str	r0, [r2, #0]
 801bf88:	0628      	lsls	r0, r5, #24
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	d501      	bpl.n	801bf92 <_printf_i+0x196>
 801bf8e:	6019      	str	r1, [r3, #0]
 801bf90:	e002      	b.n	801bf98 <_printf_i+0x19c>
 801bf92:	066a      	lsls	r2, r5, #25
 801bf94:	d5fb      	bpl.n	801bf8e <_printf_i+0x192>
 801bf96:	8019      	strh	r1, [r3, #0]
 801bf98:	2300      	movs	r3, #0
 801bf9a:	6123      	str	r3, [r4, #16]
 801bf9c:	4665      	mov	r5, ip
 801bf9e:	e7b9      	b.n	801bf14 <_printf_i+0x118>
 801bfa0:	6813      	ldr	r3, [r2, #0]
 801bfa2:	1d19      	adds	r1, r3, #4
 801bfa4:	6011      	str	r1, [r2, #0]
 801bfa6:	681d      	ldr	r5, [r3, #0]
 801bfa8:	6862      	ldr	r2, [r4, #4]
 801bfaa:	2100      	movs	r1, #0
 801bfac:	4628      	mov	r0, r5
 801bfae:	f7e4 f927 	bl	8000200 <memchr>
 801bfb2:	b108      	cbz	r0, 801bfb8 <_printf_i+0x1bc>
 801bfb4:	1b40      	subs	r0, r0, r5
 801bfb6:	6060      	str	r0, [r4, #4]
 801bfb8:	6863      	ldr	r3, [r4, #4]
 801bfba:	6123      	str	r3, [r4, #16]
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bfc2:	e7a7      	b.n	801bf14 <_printf_i+0x118>
 801bfc4:	6923      	ldr	r3, [r4, #16]
 801bfc6:	462a      	mov	r2, r5
 801bfc8:	4639      	mov	r1, r7
 801bfca:	4630      	mov	r0, r6
 801bfcc:	47c0      	blx	r8
 801bfce:	3001      	adds	r0, #1
 801bfd0:	d0aa      	beq.n	801bf28 <_printf_i+0x12c>
 801bfd2:	6823      	ldr	r3, [r4, #0]
 801bfd4:	079b      	lsls	r3, r3, #30
 801bfd6:	d413      	bmi.n	801c000 <_printf_i+0x204>
 801bfd8:	68e0      	ldr	r0, [r4, #12]
 801bfda:	9b03      	ldr	r3, [sp, #12]
 801bfdc:	4298      	cmp	r0, r3
 801bfde:	bfb8      	it	lt
 801bfe0:	4618      	movlt	r0, r3
 801bfe2:	e7a3      	b.n	801bf2c <_printf_i+0x130>
 801bfe4:	2301      	movs	r3, #1
 801bfe6:	464a      	mov	r2, r9
 801bfe8:	4639      	mov	r1, r7
 801bfea:	4630      	mov	r0, r6
 801bfec:	47c0      	blx	r8
 801bfee:	3001      	adds	r0, #1
 801bff0:	d09a      	beq.n	801bf28 <_printf_i+0x12c>
 801bff2:	3501      	adds	r5, #1
 801bff4:	68e3      	ldr	r3, [r4, #12]
 801bff6:	9a03      	ldr	r2, [sp, #12]
 801bff8:	1a9b      	subs	r3, r3, r2
 801bffa:	42ab      	cmp	r3, r5
 801bffc:	dcf2      	bgt.n	801bfe4 <_printf_i+0x1e8>
 801bffe:	e7eb      	b.n	801bfd8 <_printf_i+0x1dc>
 801c000:	2500      	movs	r5, #0
 801c002:	f104 0919 	add.w	r9, r4, #25
 801c006:	e7f5      	b.n	801bff4 <_printf_i+0x1f8>
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d1ac      	bne.n	801bf66 <_printf_i+0x16a>
 801c00c:	7803      	ldrb	r3, [r0, #0]
 801c00e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c012:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c016:	e76c      	b.n	801bef2 <_printf_i+0xf6>
 801c018:	08024b28 	.word	0x08024b28
 801c01c:	08024b39 	.word	0x08024b39

0801c020 <iprintf>:
 801c020:	b40f      	push	{r0, r1, r2, r3}
 801c022:	4b0a      	ldr	r3, [pc, #40]	; (801c04c <iprintf+0x2c>)
 801c024:	b513      	push	{r0, r1, r4, lr}
 801c026:	681c      	ldr	r4, [r3, #0]
 801c028:	b124      	cbz	r4, 801c034 <iprintf+0x14>
 801c02a:	69a3      	ldr	r3, [r4, #24]
 801c02c:	b913      	cbnz	r3, 801c034 <iprintf+0x14>
 801c02e:	4620      	mov	r0, r4
 801c030:	f001 fe1a 	bl	801dc68 <__sinit>
 801c034:	ab05      	add	r3, sp, #20
 801c036:	9a04      	ldr	r2, [sp, #16]
 801c038:	68a1      	ldr	r1, [r4, #8]
 801c03a:	9301      	str	r3, [sp, #4]
 801c03c:	4620      	mov	r0, r4
 801c03e:	f002 ff5f 	bl	801ef00 <_vfiprintf_r>
 801c042:	b002      	add	sp, #8
 801c044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c048:	b004      	add	sp, #16
 801c04a:	4770      	bx	lr
 801c04c:	20000084 	.word	0x20000084

0801c050 <rand>:
 801c050:	b538      	push	{r3, r4, r5, lr}
 801c052:	4b13      	ldr	r3, [pc, #76]	; (801c0a0 <rand+0x50>)
 801c054:	681c      	ldr	r4, [r3, #0]
 801c056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c058:	b97b      	cbnz	r3, 801c07a <rand+0x2a>
 801c05a:	2018      	movs	r0, #24
 801c05c:	f7ff fa7e 	bl	801b55c <malloc>
 801c060:	4a10      	ldr	r2, [pc, #64]	; (801c0a4 <rand+0x54>)
 801c062:	4b11      	ldr	r3, [pc, #68]	; (801c0a8 <rand+0x58>)
 801c064:	63a0      	str	r0, [r4, #56]	; 0x38
 801c066:	e9c0 2300 	strd	r2, r3, [r0]
 801c06a:	4b10      	ldr	r3, [pc, #64]	; (801c0ac <rand+0x5c>)
 801c06c:	6083      	str	r3, [r0, #8]
 801c06e:	230b      	movs	r3, #11
 801c070:	8183      	strh	r3, [r0, #12]
 801c072:	2201      	movs	r2, #1
 801c074:	2300      	movs	r3, #0
 801c076:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c07a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c07c:	480c      	ldr	r0, [pc, #48]	; (801c0b0 <rand+0x60>)
 801c07e:	690a      	ldr	r2, [r1, #16]
 801c080:	694b      	ldr	r3, [r1, #20]
 801c082:	4c0c      	ldr	r4, [pc, #48]	; (801c0b4 <rand+0x64>)
 801c084:	4350      	muls	r0, r2
 801c086:	fb04 0003 	mla	r0, r4, r3, r0
 801c08a:	fba2 2304 	umull	r2, r3, r2, r4
 801c08e:	4403      	add	r3, r0
 801c090:	1c54      	adds	r4, r2, #1
 801c092:	f143 0500 	adc.w	r5, r3, #0
 801c096:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801c09a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801c09e:	bd38      	pop	{r3, r4, r5, pc}
 801c0a0:	20000084 	.word	0x20000084
 801c0a4:	abcd330e 	.word	0xabcd330e
 801c0a8:	e66d1234 	.word	0xe66d1234
 801c0ac:	0005deec 	.word	0x0005deec
 801c0b0:	5851f42d 	.word	0x5851f42d
 801c0b4:	4c957f2d 	.word	0x4c957f2d

0801c0b8 <_sbrk_r>:
 801c0b8:	b538      	push	{r3, r4, r5, lr}
 801c0ba:	4c06      	ldr	r4, [pc, #24]	; (801c0d4 <_sbrk_r+0x1c>)
 801c0bc:	2300      	movs	r3, #0
 801c0be:	4605      	mov	r5, r0
 801c0c0:	4608      	mov	r0, r1
 801c0c2:	6023      	str	r3, [r4, #0]
 801c0c4:	f7e7 ff14 	bl	8003ef0 <_sbrk>
 801c0c8:	1c43      	adds	r3, r0, #1
 801c0ca:	d102      	bne.n	801c0d2 <_sbrk_r+0x1a>
 801c0cc:	6823      	ldr	r3, [r4, #0]
 801c0ce:	b103      	cbz	r3, 801c0d2 <_sbrk_r+0x1a>
 801c0d0:	602b      	str	r3, [r5, #0]
 801c0d2:	bd38      	pop	{r3, r4, r5, pc}
 801c0d4:	20008308 	.word	0x20008308

0801c0d8 <sniprintf>:
 801c0d8:	b40c      	push	{r2, r3}
 801c0da:	b530      	push	{r4, r5, lr}
 801c0dc:	4b17      	ldr	r3, [pc, #92]	; (801c13c <sniprintf+0x64>)
 801c0de:	1e0c      	subs	r4, r1, #0
 801c0e0:	b09d      	sub	sp, #116	; 0x74
 801c0e2:	681d      	ldr	r5, [r3, #0]
 801c0e4:	da08      	bge.n	801c0f8 <sniprintf+0x20>
 801c0e6:	238b      	movs	r3, #139	; 0x8b
 801c0e8:	602b      	str	r3, [r5, #0]
 801c0ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c0ee:	b01d      	add	sp, #116	; 0x74
 801c0f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c0f4:	b002      	add	sp, #8
 801c0f6:	4770      	bx	lr
 801c0f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c0fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c100:	bf14      	ite	ne
 801c102:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c106:	4623      	moveq	r3, r4
 801c108:	9304      	str	r3, [sp, #16]
 801c10a:	9307      	str	r3, [sp, #28]
 801c10c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c110:	9002      	str	r0, [sp, #8]
 801c112:	9006      	str	r0, [sp, #24]
 801c114:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c118:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c11a:	ab21      	add	r3, sp, #132	; 0x84
 801c11c:	a902      	add	r1, sp, #8
 801c11e:	4628      	mov	r0, r5
 801c120:	9301      	str	r3, [sp, #4]
 801c122:	f002 fdcb 	bl	801ecbc <_svfiprintf_r>
 801c126:	1c43      	adds	r3, r0, #1
 801c128:	bfbc      	itt	lt
 801c12a:	238b      	movlt	r3, #139	; 0x8b
 801c12c:	602b      	strlt	r3, [r5, #0]
 801c12e:	2c00      	cmp	r4, #0
 801c130:	d0dd      	beq.n	801c0ee <sniprintf+0x16>
 801c132:	9b02      	ldr	r3, [sp, #8]
 801c134:	2200      	movs	r2, #0
 801c136:	701a      	strb	r2, [r3, #0]
 801c138:	e7d9      	b.n	801c0ee <sniprintf+0x16>
 801c13a:	bf00      	nop
 801c13c:	20000084 	.word	0x20000084

0801c140 <siprintf>:
 801c140:	b40e      	push	{r1, r2, r3}
 801c142:	b500      	push	{lr}
 801c144:	b09c      	sub	sp, #112	; 0x70
 801c146:	ab1d      	add	r3, sp, #116	; 0x74
 801c148:	9002      	str	r0, [sp, #8]
 801c14a:	9006      	str	r0, [sp, #24]
 801c14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c150:	4809      	ldr	r0, [pc, #36]	; (801c178 <siprintf+0x38>)
 801c152:	9107      	str	r1, [sp, #28]
 801c154:	9104      	str	r1, [sp, #16]
 801c156:	4909      	ldr	r1, [pc, #36]	; (801c17c <siprintf+0x3c>)
 801c158:	f853 2b04 	ldr.w	r2, [r3], #4
 801c15c:	9105      	str	r1, [sp, #20]
 801c15e:	6800      	ldr	r0, [r0, #0]
 801c160:	9301      	str	r3, [sp, #4]
 801c162:	a902      	add	r1, sp, #8
 801c164:	f002 fdaa 	bl	801ecbc <_svfiprintf_r>
 801c168:	9b02      	ldr	r3, [sp, #8]
 801c16a:	2200      	movs	r2, #0
 801c16c:	701a      	strb	r2, [r3, #0]
 801c16e:	b01c      	add	sp, #112	; 0x70
 801c170:	f85d eb04 	ldr.w	lr, [sp], #4
 801c174:	b003      	add	sp, #12
 801c176:	4770      	bx	lr
 801c178:	20000084 	.word	0x20000084
 801c17c:	ffff0208 	.word	0xffff0208

0801c180 <strncmp>:
 801c180:	b510      	push	{r4, lr}
 801c182:	b16a      	cbz	r2, 801c1a0 <strncmp+0x20>
 801c184:	3901      	subs	r1, #1
 801c186:	1884      	adds	r4, r0, r2
 801c188:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c18c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c190:	4293      	cmp	r3, r2
 801c192:	d103      	bne.n	801c19c <strncmp+0x1c>
 801c194:	42a0      	cmp	r0, r4
 801c196:	d001      	beq.n	801c19c <strncmp+0x1c>
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d1f5      	bne.n	801c188 <strncmp+0x8>
 801c19c:	1a98      	subs	r0, r3, r2
 801c19e:	bd10      	pop	{r4, pc}
 801c1a0:	4610      	mov	r0, r2
 801c1a2:	e7fc      	b.n	801c19e <strncmp+0x1e>

0801c1a4 <strstr>:
 801c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1a6:	7803      	ldrb	r3, [r0, #0]
 801c1a8:	b17b      	cbz	r3, 801c1ca <strstr+0x26>
 801c1aa:	4604      	mov	r4, r0
 801c1ac:	7823      	ldrb	r3, [r4, #0]
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	1c66      	adds	r6, r4, #1
 801c1b2:	b17b      	cbz	r3, 801c1d4 <strstr+0x30>
 801c1b4:	1e4a      	subs	r2, r1, #1
 801c1b6:	1e63      	subs	r3, r4, #1
 801c1b8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c1bc:	b14d      	cbz	r5, 801c1d2 <strstr+0x2e>
 801c1be:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801c1c2:	42af      	cmp	r7, r5
 801c1c4:	4634      	mov	r4, r6
 801c1c6:	d0f7      	beq.n	801c1b8 <strstr+0x14>
 801c1c8:	e7f0      	b.n	801c1ac <strstr+0x8>
 801c1ca:	780b      	ldrb	r3, [r1, #0]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	bf18      	it	ne
 801c1d0:	2000      	movne	r0, #0
 801c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	e7fc      	b.n	801c1d2 <strstr+0x2e>

0801c1d8 <sulp>:
 801c1d8:	b570      	push	{r4, r5, r6, lr}
 801c1da:	4604      	mov	r4, r0
 801c1dc:	460d      	mov	r5, r1
 801c1de:	ec45 4b10 	vmov	d0, r4, r5
 801c1e2:	4616      	mov	r6, r2
 801c1e4:	f002 fbce 	bl	801e984 <__ulp>
 801c1e8:	ec51 0b10 	vmov	r0, r1, d0
 801c1ec:	b17e      	cbz	r6, 801c20e <sulp+0x36>
 801c1ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c1f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	dd09      	ble.n	801c20e <sulp+0x36>
 801c1fa:	051b      	lsls	r3, r3, #20
 801c1fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c200:	2400      	movs	r4, #0
 801c202:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c206:	4622      	mov	r2, r4
 801c208:	462b      	mov	r3, r5
 801c20a:	f7e4 fa05 	bl	8000618 <__aeabi_dmul>
 801c20e:	bd70      	pop	{r4, r5, r6, pc}

0801c210 <_strtod_l>:
 801c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c214:	461f      	mov	r7, r3
 801c216:	b0a1      	sub	sp, #132	; 0x84
 801c218:	2300      	movs	r3, #0
 801c21a:	4681      	mov	r9, r0
 801c21c:	4638      	mov	r0, r7
 801c21e:	460e      	mov	r6, r1
 801c220:	9217      	str	r2, [sp, #92]	; 0x5c
 801c222:	931c      	str	r3, [sp, #112]	; 0x70
 801c224:	f002 f8d0 	bl	801e3c8 <__localeconv_l>
 801c228:	4680      	mov	r8, r0
 801c22a:	6800      	ldr	r0, [r0, #0]
 801c22c:	f7e3 ffda 	bl	80001e4 <strlen>
 801c230:	f04f 0a00 	mov.w	sl, #0
 801c234:	4604      	mov	r4, r0
 801c236:	f04f 0b00 	mov.w	fp, #0
 801c23a:	961b      	str	r6, [sp, #108]	; 0x6c
 801c23c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c23e:	781a      	ldrb	r2, [r3, #0]
 801c240:	2a0d      	cmp	r2, #13
 801c242:	d832      	bhi.n	801c2aa <_strtod_l+0x9a>
 801c244:	2a09      	cmp	r2, #9
 801c246:	d236      	bcs.n	801c2b6 <_strtod_l+0xa6>
 801c248:	2a00      	cmp	r2, #0
 801c24a:	d03e      	beq.n	801c2ca <_strtod_l+0xba>
 801c24c:	2300      	movs	r3, #0
 801c24e:	930d      	str	r3, [sp, #52]	; 0x34
 801c250:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c252:	782b      	ldrb	r3, [r5, #0]
 801c254:	2b30      	cmp	r3, #48	; 0x30
 801c256:	f040 80ac 	bne.w	801c3b2 <_strtod_l+0x1a2>
 801c25a:	786b      	ldrb	r3, [r5, #1]
 801c25c:	2b58      	cmp	r3, #88	; 0x58
 801c25e:	d001      	beq.n	801c264 <_strtod_l+0x54>
 801c260:	2b78      	cmp	r3, #120	; 0x78
 801c262:	d167      	bne.n	801c334 <_strtod_l+0x124>
 801c264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c266:	9301      	str	r3, [sp, #4]
 801c268:	ab1c      	add	r3, sp, #112	; 0x70
 801c26a:	9300      	str	r3, [sp, #0]
 801c26c:	9702      	str	r7, [sp, #8]
 801c26e:	ab1d      	add	r3, sp, #116	; 0x74
 801c270:	4a88      	ldr	r2, [pc, #544]	; (801c494 <_strtod_l+0x284>)
 801c272:	a91b      	add	r1, sp, #108	; 0x6c
 801c274:	4648      	mov	r0, r9
 801c276:	f001 fdd0 	bl	801de1a <__gethex>
 801c27a:	f010 0407 	ands.w	r4, r0, #7
 801c27e:	4606      	mov	r6, r0
 801c280:	d005      	beq.n	801c28e <_strtod_l+0x7e>
 801c282:	2c06      	cmp	r4, #6
 801c284:	d12b      	bne.n	801c2de <_strtod_l+0xce>
 801c286:	3501      	adds	r5, #1
 801c288:	2300      	movs	r3, #0
 801c28a:	951b      	str	r5, [sp, #108]	; 0x6c
 801c28c:	930d      	str	r3, [sp, #52]	; 0x34
 801c28e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c290:	2b00      	cmp	r3, #0
 801c292:	f040 859a 	bne.w	801cdca <_strtod_l+0xbba>
 801c296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c298:	b1e3      	cbz	r3, 801c2d4 <_strtod_l+0xc4>
 801c29a:	4652      	mov	r2, sl
 801c29c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c2a0:	ec43 2b10 	vmov	d0, r2, r3
 801c2a4:	b021      	add	sp, #132	; 0x84
 801c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2aa:	2a2b      	cmp	r2, #43	; 0x2b
 801c2ac:	d015      	beq.n	801c2da <_strtod_l+0xca>
 801c2ae:	2a2d      	cmp	r2, #45	; 0x2d
 801c2b0:	d004      	beq.n	801c2bc <_strtod_l+0xac>
 801c2b2:	2a20      	cmp	r2, #32
 801c2b4:	d1ca      	bne.n	801c24c <_strtod_l+0x3c>
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	931b      	str	r3, [sp, #108]	; 0x6c
 801c2ba:	e7bf      	b.n	801c23c <_strtod_l+0x2c>
 801c2bc:	2201      	movs	r2, #1
 801c2be:	920d      	str	r2, [sp, #52]	; 0x34
 801c2c0:	1c5a      	adds	r2, r3, #1
 801c2c2:	921b      	str	r2, [sp, #108]	; 0x6c
 801c2c4:	785b      	ldrb	r3, [r3, #1]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d1c2      	bne.n	801c250 <_strtod_l+0x40>
 801c2ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2cc:	961b      	str	r6, [sp, #108]	; 0x6c
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	f040 8579 	bne.w	801cdc6 <_strtod_l+0xbb6>
 801c2d4:	4652      	mov	r2, sl
 801c2d6:	465b      	mov	r3, fp
 801c2d8:	e7e2      	b.n	801c2a0 <_strtod_l+0x90>
 801c2da:	2200      	movs	r2, #0
 801c2dc:	e7ef      	b.n	801c2be <_strtod_l+0xae>
 801c2de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c2e0:	b13a      	cbz	r2, 801c2f2 <_strtod_l+0xe2>
 801c2e2:	2135      	movs	r1, #53	; 0x35
 801c2e4:	a81e      	add	r0, sp, #120	; 0x78
 801c2e6:	f002 fc45 	bl	801eb74 <__copybits>
 801c2ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c2ec:	4648      	mov	r0, r9
 801c2ee:	f002 f8b1 	bl	801e454 <_Bfree>
 801c2f2:	3c01      	subs	r4, #1
 801c2f4:	2c04      	cmp	r4, #4
 801c2f6:	d806      	bhi.n	801c306 <_strtod_l+0xf6>
 801c2f8:	e8df f004 	tbb	[pc, r4]
 801c2fc:	1714030a 	.word	0x1714030a
 801c300:	0a          	.byte	0x0a
 801c301:	00          	.byte	0x00
 801c302:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801c306:	0730      	lsls	r0, r6, #28
 801c308:	d5c1      	bpl.n	801c28e <_strtod_l+0x7e>
 801c30a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c30e:	e7be      	b.n	801c28e <_strtod_l+0x7e>
 801c310:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801c314:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c31a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c31e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c322:	e7f0      	b.n	801c306 <_strtod_l+0xf6>
 801c324:	f8df b170 	ldr.w	fp, [pc, #368]	; 801c498 <_strtod_l+0x288>
 801c328:	e7ed      	b.n	801c306 <_strtod_l+0xf6>
 801c32a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c32e:	f04f 3aff 	mov.w	sl, #4294967295
 801c332:	e7e8      	b.n	801c306 <_strtod_l+0xf6>
 801c334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c336:	1c5a      	adds	r2, r3, #1
 801c338:	921b      	str	r2, [sp, #108]	; 0x6c
 801c33a:	785b      	ldrb	r3, [r3, #1]
 801c33c:	2b30      	cmp	r3, #48	; 0x30
 801c33e:	d0f9      	beq.n	801c334 <_strtod_l+0x124>
 801c340:	2b00      	cmp	r3, #0
 801c342:	d0a4      	beq.n	801c28e <_strtod_l+0x7e>
 801c344:	2301      	movs	r3, #1
 801c346:	2500      	movs	r5, #0
 801c348:	9306      	str	r3, [sp, #24]
 801c34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c34c:	9308      	str	r3, [sp, #32]
 801c34e:	9507      	str	r5, [sp, #28]
 801c350:	9505      	str	r5, [sp, #20]
 801c352:	220a      	movs	r2, #10
 801c354:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c356:	7807      	ldrb	r7, [r0, #0]
 801c358:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801c35c:	b2d9      	uxtb	r1, r3
 801c35e:	2909      	cmp	r1, #9
 801c360:	d929      	bls.n	801c3b6 <_strtod_l+0x1a6>
 801c362:	4622      	mov	r2, r4
 801c364:	f8d8 1000 	ldr.w	r1, [r8]
 801c368:	f7ff ff0a 	bl	801c180 <strncmp>
 801c36c:	2800      	cmp	r0, #0
 801c36e:	d031      	beq.n	801c3d4 <_strtod_l+0x1c4>
 801c370:	2000      	movs	r0, #0
 801c372:	9c05      	ldr	r4, [sp, #20]
 801c374:	9004      	str	r0, [sp, #16]
 801c376:	463b      	mov	r3, r7
 801c378:	4602      	mov	r2, r0
 801c37a:	2b65      	cmp	r3, #101	; 0x65
 801c37c:	d001      	beq.n	801c382 <_strtod_l+0x172>
 801c37e:	2b45      	cmp	r3, #69	; 0x45
 801c380:	d114      	bne.n	801c3ac <_strtod_l+0x19c>
 801c382:	b924      	cbnz	r4, 801c38e <_strtod_l+0x17e>
 801c384:	b910      	cbnz	r0, 801c38c <_strtod_l+0x17c>
 801c386:	9b06      	ldr	r3, [sp, #24]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d09e      	beq.n	801c2ca <_strtod_l+0xba>
 801c38c:	2400      	movs	r4, #0
 801c38e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801c390:	1c73      	adds	r3, r6, #1
 801c392:	931b      	str	r3, [sp, #108]	; 0x6c
 801c394:	7873      	ldrb	r3, [r6, #1]
 801c396:	2b2b      	cmp	r3, #43	; 0x2b
 801c398:	d078      	beq.n	801c48c <_strtod_l+0x27c>
 801c39a:	2b2d      	cmp	r3, #45	; 0x2d
 801c39c:	d070      	beq.n	801c480 <_strtod_l+0x270>
 801c39e:	f04f 0c00 	mov.w	ip, #0
 801c3a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801c3a6:	2f09      	cmp	r7, #9
 801c3a8:	d97c      	bls.n	801c4a4 <_strtod_l+0x294>
 801c3aa:	961b      	str	r6, [sp, #108]	; 0x6c
 801c3ac:	f04f 0e00 	mov.w	lr, #0
 801c3b0:	e09a      	b.n	801c4e8 <_strtod_l+0x2d8>
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	e7c7      	b.n	801c346 <_strtod_l+0x136>
 801c3b6:	9905      	ldr	r1, [sp, #20]
 801c3b8:	2908      	cmp	r1, #8
 801c3ba:	bfdd      	ittte	le
 801c3bc:	9907      	ldrle	r1, [sp, #28]
 801c3be:	fb02 3301 	mlale	r3, r2, r1, r3
 801c3c2:	9307      	strle	r3, [sp, #28]
 801c3c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 801c3c8:	9b05      	ldr	r3, [sp, #20]
 801c3ca:	3001      	adds	r0, #1
 801c3cc:	3301      	adds	r3, #1
 801c3ce:	9305      	str	r3, [sp, #20]
 801c3d0:	901b      	str	r0, [sp, #108]	; 0x6c
 801c3d2:	e7bf      	b.n	801c354 <_strtod_l+0x144>
 801c3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c3d6:	191a      	adds	r2, r3, r4
 801c3d8:	921b      	str	r2, [sp, #108]	; 0x6c
 801c3da:	9a05      	ldr	r2, [sp, #20]
 801c3dc:	5d1b      	ldrb	r3, [r3, r4]
 801c3de:	2a00      	cmp	r2, #0
 801c3e0:	d037      	beq.n	801c452 <_strtod_l+0x242>
 801c3e2:	9c05      	ldr	r4, [sp, #20]
 801c3e4:	4602      	mov	r2, r0
 801c3e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c3ea:	2909      	cmp	r1, #9
 801c3ec:	d913      	bls.n	801c416 <_strtod_l+0x206>
 801c3ee:	2101      	movs	r1, #1
 801c3f0:	9104      	str	r1, [sp, #16]
 801c3f2:	e7c2      	b.n	801c37a <_strtod_l+0x16a>
 801c3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c3f6:	1c5a      	adds	r2, r3, #1
 801c3f8:	921b      	str	r2, [sp, #108]	; 0x6c
 801c3fa:	785b      	ldrb	r3, [r3, #1]
 801c3fc:	3001      	adds	r0, #1
 801c3fe:	2b30      	cmp	r3, #48	; 0x30
 801c400:	d0f8      	beq.n	801c3f4 <_strtod_l+0x1e4>
 801c402:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801c406:	2a08      	cmp	r2, #8
 801c408:	f200 84e4 	bhi.w	801cdd4 <_strtod_l+0xbc4>
 801c40c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c40e:	9208      	str	r2, [sp, #32]
 801c410:	4602      	mov	r2, r0
 801c412:	2000      	movs	r0, #0
 801c414:	4604      	mov	r4, r0
 801c416:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801c41a:	f100 0101 	add.w	r1, r0, #1
 801c41e:	d012      	beq.n	801c446 <_strtod_l+0x236>
 801c420:	440a      	add	r2, r1
 801c422:	eb00 0c04 	add.w	ip, r0, r4
 801c426:	4621      	mov	r1, r4
 801c428:	270a      	movs	r7, #10
 801c42a:	458c      	cmp	ip, r1
 801c42c:	d113      	bne.n	801c456 <_strtod_l+0x246>
 801c42e:	1821      	adds	r1, r4, r0
 801c430:	2908      	cmp	r1, #8
 801c432:	f104 0401 	add.w	r4, r4, #1
 801c436:	4404      	add	r4, r0
 801c438:	dc19      	bgt.n	801c46e <_strtod_l+0x25e>
 801c43a:	9b07      	ldr	r3, [sp, #28]
 801c43c:	210a      	movs	r1, #10
 801c43e:	fb01 e303 	mla	r3, r1, r3, lr
 801c442:	9307      	str	r3, [sp, #28]
 801c444:	2100      	movs	r1, #0
 801c446:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c448:	1c58      	adds	r0, r3, #1
 801c44a:	901b      	str	r0, [sp, #108]	; 0x6c
 801c44c:	785b      	ldrb	r3, [r3, #1]
 801c44e:	4608      	mov	r0, r1
 801c450:	e7c9      	b.n	801c3e6 <_strtod_l+0x1d6>
 801c452:	9805      	ldr	r0, [sp, #20]
 801c454:	e7d3      	b.n	801c3fe <_strtod_l+0x1ee>
 801c456:	2908      	cmp	r1, #8
 801c458:	f101 0101 	add.w	r1, r1, #1
 801c45c:	dc03      	bgt.n	801c466 <_strtod_l+0x256>
 801c45e:	9b07      	ldr	r3, [sp, #28]
 801c460:	437b      	muls	r3, r7
 801c462:	9307      	str	r3, [sp, #28]
 801c464:	e7e1      	b.n	801c42a <_strtod_l+0x21a>
 801c466:	2910      	cmp	r1, #16
 801c468:	bfd8      	it	le
 801c46a:	437d      	mulle	r5, r7
 801c46c:	e7dd      	b.n	801c42a <_strtod_l+0x21a>
 801c46e:	2c10      	cmp	r4, #16
 801c470:	bfdc      	itt	le
 801c472:	210a      	movle	r1, #10
 801c474:	fb01 e505 	mlale	r5, r1, r5, lr
 801c478:	e7e4      	b.n	801c444 <_strtod_l+0x234>
 801c47a:	2301      	movs	r3, #1
 801c47c:	9304      	str	r3, [sp, #16]
 801c47e:	e781      	b.n	801c384 <_strtod_l+0x174>
 801c480:	f04f 0c01 	mov.w	ip, #1
 801c484:	1cb3      	adds	r3, r6, #2
 801c486:	931b      	str	r3, [sp, #108]	; 0x6c
 801c488:	78b3      	ldrb	r3, [r6, #2]
 801c48a:	e78a      	b.n	801c3a2 <_strtod_l+0x192>
 801c48c:	f04f 0c00 	mov.w	ip, #0
 801c490:	e7f8      	b.n	801c484 <_strtod_l+0x274>
 801c492:	bf00      	nop
 801c494:	08024b4c 	.word	0x08024b4c
 801c498:	7ff00000 	.word	0x7ff00000
 801c49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c49e:	1c5f      	adds	r7, r3, #1
 801c4a0:	971b      	str	r7, [sp, #108]	; 0x6c
 801c4a2:	785b      	ldrb	r3, [r3, #1]
 801c4a4:	2b30      	cmp	r3, #48	; 0x30
 801c4a6:	d0f9      	beq.n	801c49c <_strtod_l+0x28c>
 801c4a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801c4ac:	2f08      	cmp	r7, #8
 801c4ae:	f63f af7d 	bhi.w	801c3ac <_strtod_l+0x19c>
 801c4b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801c4b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c4b8:	930a      	str	r3, [sp, #40]	; 0x28
 801c4ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c4bc:	1c5f      	adds	r7, r3, #1
 801c4be:	971b      	str	r7, [sp, #108]	; 0x6c
 801c4c0:	785b      	ldrb	r3, [r3, #1]
 801c4c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801c4c6:	f1b8 0f09 	cmp.w	r8, #9
 801c4ca:	d937      	bls.n	801c53c <_strtod_l+0x32c>
 801c4cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c4ce:	1a7f      	subs	r7, r7, r1
 801c4d0:	2f08      	cmp	r7, #8
 801c4d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801c4d6:	dc37      	bgt.n	801c548 <_strtod_l+0x338>
 801c4d8:	45be      	cmp	lr, r7
 801c4da:	bfa8      	it	ge
 801c4dc:	46be      	movge	lr, r7
 801c4de:	f1bc 0f00 	cmp.w	ip, #0
 801c4e2:	d001      	beq.n	801c4e8 <_strtod_l+0x2d8>
 801c4e4:	f1ce 0e00 	rsb	lr, lr, #0
 801c4e8:	2c00      	cmp	r4, #0
 801c4ea:	d151      	bne.n	801c590 <_strtod_l+0x380>
 801c4ec:	2800      	cmp	r0, #0
 801c4ee:	f47f aece 	bne.w	801c28e <_strtod_l+0x7e>
 801c4f2:	9a06      	ldr	r2, [sp, #24]
 801c4f4:	2a00      	cmp	r2, #0
 801c4f6:	f47f aeca 	bne.w	801c28e <_strtod_l+0x7e>
 801c4fa:	9a04      	ldr	r2, [sp, #16]
 801c4fc:	2a00      	cmp	r2, #0
 801c4fe:	f47f aee4 	bne.w	801c2ca <_strtod_l+0xba>
 801c502:	2b4e      	cmp	r3, #78	; 0x4e
 801c504:	d027      	beq.n	801c556 <_strtod_l+0x346>
 801c506:	dc21      	bgt.n	801c54c <_strtod_l+0x33c>
 801c508:	2b49      	cmp	r3, #73	; 0x49
 801c50a:	f47f aede 	bne.w	801c2ca <_strtod_l+0xba>
 801c50e:	49a0      	ldr	r1, [pc, #640]	; (801c790 <_strtod_l+0x580>)
 801c510:	a81b      	add	r0, sp, #108	; 0x6c
 801c512:	f001 feb5 	bl	801e280 <__match>
 801c516:	2800      	cmp	r0, #0
 801c518:	f43f aed7 	beq.w	801c2ca <_strtod_l+0xba>
 801c51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c51e:	499d      	ldr	r1, [pc, #628]	; (801c794 <_strtod_l+0x584>)
 801c520:	3b01      	subs	r3, #1
 801c522:	a81b      	add	r0, sp, #108	; 0x6c
 801c524:	931b      	str	r3, [sp, #108]	; 0x6c
 801c526:	f001 feab 	bl	801e280 <__match>
 801c52a:	b910      	cbnz	r0, 801c532 <_strtod_l+0x322>
 801c52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c52e:	3301      	adds	r3, #1
 801c530:	931b      	str	r3, [sp, #108]	; 0x6c
 801c532:	f8df b274 	ldr.w	fp, [pc, #628]	; 801c7a8 <_strtod_l+0x598>
 801c536:	f04f 0a00 	mov.w	sl, #0
 801c53a:	e6a8      	b.n	801c28e <_strtod_l+0x7e>
 801c53c:	210a      	movs	r1, #10
 801c53e:	fb01 3e0e 	mla	lr, r1, lr, r3
 801c542:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c546:	e7b8      	b.n	801c4ba <_strtod_l+0x2aa>
 801c548:	46be      	mov	lr, r7
 801c54a:	e7c8      	b.n	801c4de <_strtod_l+0x2ce>
 801c54c:	2b69      	cmp	r3, #105	; 0x69
 801c54e:	d0de      	beq.n	801c50e <_strtod_l+0x2fe>
 801c550:	2b6e      	cmp	r3, #110	; 0x6e
 801c552:	f47f aeba 	bne.w	801c2ca <_strtod_l+0xba>
 801c556:	4990      	ldr	r1, [pc, #576]	; (801c798 <_strtod_l+0x588>)
 801c558:	a81b      	add	r0, sp, #108	; 0x6c
 801c55a:	f001 fe91 	bl	801e280 <__match>
 801c55e:	2800      	cmp	r0, #0
 801c560:	f43f aeb3 	beq.w	801c2ca <_strtod_l+0xba>
 801c564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c566:	781b      	ldrb	r3, [r3, #0]
 801c568:	2b28      	cmp	r3, #40	; 0x28
 801c56a:	d10e      	bne.n	801c58a <_strtod_l+0x37a>
 801c56c:	aa1e      	add	r2, sp, #120	; 0x78
 801c56e:	498b      	ldr	r1, [pc, #556]	; (801c79c <_strtod_l+0x58c>)
 801c570:	a81b      	add	r0, sp, #108	; 0x6c
 801c572:	f001 fe99 	bl	801e2a8 <__hexnan>
 801c576:	2805      	cmp	r0, #5
 801c578:	d107      	bne.n	801c58a <_strtod_l+0x37a>
 801c57a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c57c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801c580:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c584:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c588:	e681      	b.n	801c28e <_strtod_l+0x7e>
 801c58a:	f8df b224 	ldr.w	fp, [pc, #548]	; 801c7b0 <_strtod_l+0x5a0>
 801c58e:	e7d2      	b.n	801c536 <_strtod_l+0x326>
 801c590:	ebae 0302 	sub.w	r3, lr, r2
 801c594:	9306      	str	r3, [sp, #24]
 801c596:	9b05      	ldr	r3, [sp, #20]
 801c598:	9807      	ldr	r0, [sp, #28]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	bf08      	it	eq
 801c59e:	4623      	moveq	r3, r4
 801c5a0:	2c10      	cmp	r4, #16
 801c5a2:	9305      	str	r3, [sp, #20]
 801c5a4:	46a0      	mov	r8, r4
 801c5a6:	bfa8      	it	ge
 801c5a8:	f04f 0810 	movge.w	r8, #16
 801c5ac:	f7e3 ffba 	bl	8000524 <__aeabi_ui2d>
 801c5b0:	2c09      	cmp	r4, #9
 801c5b2:	4682      	mov	sl, r0
 801c5b4:	468b      	mov	fp, r1
 801c5b6:	dc13      	bgt.n	801c5e0 <_strtod_l+0x3d0>
 801c5b8:	9b06      	ldr	r3, [sp, #24]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	f43f ae67 	beq.w	801c28e <_strtod_l+0x7e>
 801c5c0:	9b06      	ldr	r3, [sp, #24]
 801c5c2:	dd7a      	ble.n	801c6ba <_strtod_l+0x4aa>
 801c5c4:	2b16      	cmp	r3, #22
 801c5c6:	dc61      	bgt.n	801c68c <_strtod_l+0x47c>
 801c5c8:	4a75      	ldr	r2, [pc, #468]	; (801c7a0 <_strtod_l+0x590>)
 801c5ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801c5ce:	e9de 0100 	ldrd	r0, r1, [lr]
 801c5d2:	4652      	mov	r2, sl
 801c5d4:	465b      	mov	r3, fp
 801c5d6:	f7e4 f81f 	bl	8000618 <__aeabi_dmul>
 801c5da:	4682      	mov	sl, r0
 801c5dc:	468b      	mov	fp, r1
 801c5de:	e656      	b.n	801c28e <_strtod_l+0x7e>
 801c5e0:	4b6f      	ldr	r3, [pc, #444]	; (801c7a0 <_strtod_l+0x590>)
 801c5e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c5e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c5ea:	f7e4 f815 	bl	8000618 <__aeabi_dmul>
 801c5ee:	4606      	mov	r6, r0
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	460f      	mov	r7, r1
 801c5f4:	f7e3 ff96 	bl	8000524 <__aeabi_ui2d>
 801c5f8:	4602      	mov	r2, r0
 801c5fa:	460b      	mov	r3, r1
 801c5fc:	4630      	mov	r0, r6
 801c5fe:	4639      	mov	r1, r7
 801c600:	f7e3 fe54 	bl	80002ac <__adddf3>
 801c604:	2c0f      	cmp	r4, #15
 801c606:	4682      	mov	sl, r0
 801c608:	468b      	mov	fp, r1
 801c60a:	ddd5      	ble.n	801c5b8 <_strtod_l+0x3a8>
 801c60c:	9b06      	ldr	r3, [sp, #24]
 801c60e:	eba4 0808 	sub.w	r8, r4, r8
 801c612:	4498      	add	r8, r3
 801c614:	f1b8 0f00 	cmp.w	r8, #0
 801c618:	f340 8096 	ble.w	801c748 <_strtod_l+0x538>
 801c61c:	f018 030f 	ands.w	r3, r8, #15
 801c620:	d00a      	beq.n	801c638 <_strtod_l+0x428>
 801c622:	495f      	ldr	r1, [pc, #380]	; (801c7a0 <_strtod_l+0x590>)
 801c624:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c628:	4652      	mov	r2, sl
 801c62a:	465b      	mov	r3, fp
 801c62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c630:	f7e3 fff2 	bl	8000618 <__aeabi_dmul>
 801c634:	4682      	mov	sl, r0
 801c636:	468b      	mov	fp, r1
 801c638:	f038 080f 	bics.w	r8, r8, #15
 801c63c:	d073      	beq.n	801c726 <_strtod_l+0x516>
 801c63e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c642:	dd47      	ble.n	801c6d4 <_strtod_l+0x4c4>
 801c644:	2400      	movs	r4, #0
 801c646:	46a0      	mov	r8, r4
 801c648:	9407      	str	r4, [sp, #28]
 801c64a:	9405      	str	r4, [sp, #20]
 801c64c:	2322      	movs	r3, #34	; 0x22
 801c64e:	f8df b158 	ldr.w	fp, [pc, #344]	; 801c7a8 <_strtod_l+0x598>
 801c652:	f8c9 3000 	str.w	r3, [r9]
 801c656:	f04f 0a00 	mov.w	sl, #0
 801c65a:	9b07      	ldr	r3, [sp, #28]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	f43f ae16 	beq.w	801c28e <_strtod_l+0x7e>
 801c662:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c664:	4648      	mov	r0, r9
 801c666:	f001 fef5 	bl	801e454 <_Bfree>
 801c66a:	9905      	ldr	r1, [sp, #20]
 801c66c:	4648      	mov	r0, r9
 801c66e:	f001 fef1 	bl	801e454 <_Bfree>
 801c672:	4641      	mov	r1, r8
 801c674:	4648      	mov	r0, r9
 801c676:	f001 feed 	bl	801e454 <_Bfree>
 801c67a:	9907      	ldr	r1, [sp, #28]
 801c67c:	4648      	mov	r0, r9
 801c67e:	f001 fee9 	bl	801e454 <_Bfree>
 801c682:	4621      	mov	r1, r4
 801c684:	4648      	mov	r0, r9
 801c686:	f001 fee5 	bl	801e454 <_Bfree>
 801c68a:	e600      	b.n	801c28e <_strtod_l+0x7e>
 801c68c:	9a06      	ldr	r2, [sp, #24]
 801c68e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801c692:	4293      	cmp	r3, r2
 801c694:	dbba      	blt.n	801c60c <_strtod_l+0x3fc>
 801c696:	4d42      	ldr	r5, [pc, #264]	; (801c7a0 <_strtod_l+0x590>)
 801c698:	f1c4 040f 	rsb	r4, r4, #15
 801c69c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801c6a0:	4652      	mov	r2, sl
 801c6a2:	465b      	mov	r3, fp
 801c6a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6a8:	f7e3 ffb6 	bl	8000618 <__aeabi_dmul>
 801c6ac:	9b06      	ldr	r3, [sp, #24]
 801c6ae:	1b1c      	subs	r4, r3, r4
 801c6b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801c6b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c6b8:	e78d      	b.n	801c5d6 <_strtod_l+0x3c6>
 801c6ba:	f113 0f16 	cmn.w	r3, #22
 801c6be:	dba5      	blt.n	801c60c <_strtod_l+0x3fc>
 801c6c0:	4a37      	ldr	r2, [pc, #220]	; (801c7a0 <_strtod_l+0x590>)
 801c6c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801c6c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 801c6ca:	4650      	mov	r0, sl
 801c6cc:	4659      	mov	r1, fp
 801c6ce:	f7e4 f8cd 	bl	800086c <__aeabi_ddiv>
 801c6d2:	e782      	b.n	801c5da <_strtod_l+0x3ca>
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	4e33      	ldr	r6, [pc, #204]	; (801c7a4 <_strtod_l+0x594>)
 801c6d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c6dc:	4650      	mov	r0, sl
 801c6de:	4659      	mov	r1, fp
 801c6e0:	461d      	mov	r5, r3
 801c6e2:	f1b8 0f01 	cmp.w	r8, #1
 801c6e6:	dc21      	bgt.n	801c72c <_strtod_l+0x51c>
 801c6e8:	b10b      	cbz	r3, 801c6ee <_strtod_l+0x4de>
 801c6ea:	4682      	mov	sl, r0
 801c6ec:	468b      	mov	fp, r1
 801c6ee:	4b2d      	ldr	r3, [pc, #180]	; (801c7a4 <_strtod_l+0x594>)
 801c6f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c6f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c6f8:	4652      	mov	r2, sl
 801c6fa:	465b      	mov	r3, fp
 801c6fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c700:	f7e3 ff8a 	bl	8000618 <__aeabi_dmul>
 801c704:	4b28      	ldr	r3, [pc, #160]	; (801c7a8 <_strtod_l+0x598>)
 801c706:	460a      	mov	r2, r1
 801c708:	400b      	ands	r3, r1
 801c70a:	4928      	ldr	r1, [pc, #160]	; (801c7ac <_strtod_l+0x59c>)
 801c70c:	428b      	cmp	r3, r1
 801c70e:	4682      	mov	sl, r0
 801c710:	d898      	bhi.n	801c644 <_strtod_l+0x434>
 801c712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c716:	428b      	cmp	r3, r1
 801c718:	bf86      	itte	hi
 801c71a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c7b4 <_strtod_l+0x5a4>
 801c71e:	f04f 3aff 	movhi.w	sl, #4294967295
 801c722:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c726:	2300      	movs	r3, #0
 801c728:	9304      	str	r3, [sp, #16]
 801c72a:	e077      	b.n	801c81c <_strtod_l+0x60c>
 801c72c:	f018 0f01 	tst.w	r8, #1
 801c730:	d006      	beq.n	801c740 <_strtod_l+0x530>
 801c732:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c73a:	f7e3 ff6d 	bl	8000618 <__aeabi_dmul>
 801c73e:	2301      	movs	r3, #1
 801c740:	3501      	adds	r5, #1
 801c742:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c746:	e7cc      	b.n	801c6e2 <_strtod_l+0x4d2>
 801c748:	d0ed      	beq.n	801c726 <_strtod_l+0x516>
 801c74a:	f1c8 0800 	rsb	r8, r8, #0
 801c74e:	f018 020f 	ands.w	r2, r8, #15
 801c752:	d00a      	beq.n	801c76a <_strtod_l+0x55a>
 801c754:	4b12      	ldr	r3, [pc, #72]	; (801c7a0 <_strtod_l+0x590>)
 801c756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c75a:	4650      	mov	r0, sl
 801c75c:	4659      	mov	r1, fp
 801c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c762:	f7e4 f883 	bl	800086c <__aeabi_ddiv>
 801c766:	4682      	mov	sl, r0
 801c768:	468b      	mov	fp, r1
 801c76a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c76e:	d0da      	beq.n	801c726 <_strtod_l+0x516>
 801c770:	f1b8 0f1f 	cmp.w	r8, #31
 801c774:	dd20      	ble.n	801c7b8 <_strtod_l+0x5a8>
 801c776:	2400      	movs	r4, #0
 801c778:	46a0      	mov	r8, r4
 801c77a:	9407      	str	r4, [sp, #28]
 801c77c:	9405      	str	r4, [sp, #20]
 801c77e:	2322      	movs	r3, #34	; 0x22
 801c780:	f04f 0a00 	mov.w	sl, #0
 801c784:	f04f 0b00 	mov.w	fp, #0
 801c788:	f8c9 3000 	str.w	r3, [r9]
 801c78c:	e765      	b.n	801c65a <_strtod_l+0x44a>
 801c78e:	bf00      	nop
 801c790:	08024b1b 	.word	0x08024b1b
 801c794:	08024ba3 	.word	0x08024ba3
 801c798:	08024b23 	.word	0x08024b23
 801c79c:	08024b60 	.word	0x08024b60
 801c7a0:	08024c38 	.word	0x08024c38
 801c7a4:	08024c10 	.word	0x08024c10
 801c7a8:	7ff00000 	.word	0x7ff00000
 801c7ac:	7ca00000 	.word	0x7ca00000
 801c7b0:	fff80000 	.word	0xfff80000
 801c7b4:	7fefffff 	.word	0x7fefffff
 801c7b8:	f018 0310 	ands.w	r3, r8, #16
 801c7bc:	bf18      	it	ne
 801c7be:	236a      	movne	r3, #106	; 0x6a
 801c7c0:	4da0      	ldr	r5, [pc, #640]	; (801ca44 <_strtod_l+0x834>)
 801c7c2:	9304      	str	r3, [sp, #16]
 801c7c4:	4650      	mov	r0, sl
 801c7c6:	4659      	mov	r1, fp
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	f1b8 0f00 	cmp.w	r8, #0
 801c7ce:	f300 810a 	bgt.w	801c9e6 <_strtod_l+0x7d6>
 801c7d2:	b10b      	cbz	r3, 801c7d8 <_strtod_l+0x5c8>
 801c7d4:	4682      	mov	sl, r0
 801c7d6:	468b      	mov	fp, r1
 801c7d8:	9b04      	ldr	r3, [sp, #16]
 801c7da:	b1bb      	cbz	r3, 801c80c <_strtod_l+0x5fc>
 801c7dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c7e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	4659      	mov	r1, fp
 801c7e8:	dd10      	ble.n	801c80c <_strtod_l+0x5fc>
 801c7ea:	2b1f      	cmp	r3, #31
 801c7ec:	f340 8107 	ble.w	801c9fe <_strtod_l+0x7ee>
 801c7f0:	2b34      	cmp	r3, #52	; 0x34
 801c7f2:	bfde      	ittt	le
 801c7f4:	3b20      	suble	r3, #32
 801c7f6:	f04f 32ff 	movle.w	r2, #4294967295
 801c7fa:	fa02 f303 	lslle.w	r3, r2, r3
 801c7fe:	f04f 0a00 	mov.w	sl, #0
 801c802:	bfcc      	ite	gt
 801c804:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c808:	ea03 0b01 	andle.w	fp, r3, r1
 801c80c:	2200      	movs	r2, #0
 801c80e:	2300      	movs	r3, #0
 801c810:	4650      	mov	r0, sl
 801c812:	4659      	mov	r1, fp
 801c814:	f7e4 f968 	bl	8000ae8 <__aeabi_dcmpeq>
 801c818:	2800      	cmp	r0, #0
 801c81a:	d1ac      	bne.n	801c776 <_strtod_l+0x566>
 801c81c:	9b07      	ldr	r3, [sp, #28]
 801c81e:	9300      	str	r3, [sp, #0]
 801c820:	9a05      	ldr	r2, [sp, #20]
 801c822:	9908      	ldr	r1, [sp, #32]
 801c824:	4623      	mov	r3, r4
 801c826:	4648      	mov	r0, r9
 801c828:	f001 fe66 	bl	801e4f8 <__s2b>
 801c82c:	9007      	str	r0, [sp, #28]
 801c82e:	2800      	cmp	r0, #0
 801c830:	f43f af08 	beq.w	801c644 <_strtod_l+0x434>
 801c834:	9a06      	ldr	r2, [sp, #24]
 801c836:	9b06      	ldr	r3, [sp, #24]
 801c838:	2a00      	cmp	r2, #0
 801c83a:	f1c3 0300 	rsb	r3, r3, #0
 801c83e:	bfa8      	it	ge
 801c840:	2300      	movge	r3, #0
 801c842:	930e      	str	r3, [sp, #56]	; 0x38
 801c844:	2400      	movs	r4, #0
 801c846:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c84a:	9316      	str	r3, [sp, #88]	; 0x58
 801c84c:	46a0      	mov	r8, r4
 801c84e:	9b07      	ldr	r3, [sp, #28]
 801c850:	4648      	mov	r0, r9
 801c852:	6859      	ldr	r1, [r3, #4]
 801c854:	f001 fdca 	bl	801e3ec <_Balloc>
 801c858:	9005      	str	r0, [sp, #20]
 801c85a:	2800      	cmp	r0, #0
 801c85c:	f43f aef6 	beq.w	801c64c <_strtod_l+0x43c>
 801c860:	9b07      	ldr	r3, [sp, #28]
 801c862:	691a      	ldr	r2, [r3, #16]
 801c864:	3202      	adds	r2, #2
 801c866:	f103 010c 	add.w	r1, r3, #12
 801c86a:	0092      	lsls	r2, r2, #2
 801c86c:	300c      	adds	r0, #12
 801c86e:	f7fe fea6 	bl	801b5be <memcpy>
 801c872:	aa1e      	add	r2, sp, #120	; 0x78
 801c874:	a91d      	add	r1, sp, #116	; 0x74
 801c876:	ec4b ab10 	vmov	d0, sl, fp
 801c87a:	4648      	mov	r0, r9
 801c87c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801c880:	f002 f8f6 	bl	801ea70 <__d2b>
 801c884:	901c      	str	r0, [sp, #112]	; 0x70
 801c886:	2800      	cmp	r0, #0
 801c888:	f43f aee0 	beq.w	801c64c <_strtod_l+0x43c>
 801c88c:	2101      	movs	r1, #1
 801c88e:	4648      	mov	r0, r9
 801c890:	f001 febe 	bl	801e610 <__i2b>
 801c894:	4680      	mov	r8, r0
 801c896:	2800      	cmp	r0, #0
 801c898:	f43f aed8 	beq.w	801c64c <_strtod_l+0x43c>
 801c89c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c89e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c8a0:	2e00      	cmp	r6, #0
 801c8a2:	bfab      	itete	ge
 801c8a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801c8a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801c8a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801c8aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801c8ac:	bfac      	ite	ge
 801c8ae:	18f7      	addge	r7, r6, r3
 801c8b0:	1b9d      	sublt	r5, r3, r6
 801c8b2:	9b04      	ldr	r3, [sp, #16]
 801c8b4:	1af6      	subs	r6, r6, r3
 801c8b6:	4416      	add	r6, r2
 801c8b8:	4b63      	ldr	r3, [pc, #396]	; (801ca48 <_strtod_l+0x838>)
 801c8ba:	3e01      	subs	r6, #1
 801c8bc:	429e      	cmp	r6, r3
 801c8be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c8c2:	f280 80af 	bge.w	801ca24 <_strtod_l+0x814>
 801c8c6:	1b9b      	subs	r3, r3, r6
 801c8c8:	2b1f      	cmp	r3, #31
 801c8ca:	eba2 0203 	sub.w	r2, r2, r3
 801c8ce:	f04f 0101 	mov.w	r1, #1
 801c8d2:	f300 809b 	bgt.w	801ca0c <_strtod_l+0x7fc>
 801c8d6:	fa01 f303 	lsl.w	r3, r1, r3
 801c8da:	930f      	str	r3, [sp, #60]	; 0x3c
 801c8dc:	2300      	movs	r3, #0
 801c8de:	930a      	str	r3, [sp, #40]	; 0x28
 801c8e0:	18be      	adds	r6, r7, r2
 801c8e2:	9b04      	ldr	r3, [sp, #16]
 801c8e4:	42b7      	cmp	r7, r6
 801c8e6:	4415      	add	r5, r2
 801c8e8:	441d      	add	r5, r3
 801c8ea:	463b      	mov	r3, r7
 801c8ec:	bfa8      	it	ge
 801c8ee:	4633      	movge	r3, r6
 801c8f0:	42ab      	cmp	r3, r5
 801c8f2:	bfa8      	it	ge
 801c8f4:	462b      	movge	r3, r5
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	bfc2      	ittt	gt
 801c8fa:	1af6      	subgt	r6, r6, r3
 801c8fc:	1aed      	subgt	r5, r5, r3
 801c8fe:	1aff      	subgt	r7, r7, r3
 801c900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c902:	b1bb      	cbz	r3, 801c934 <_strtod_l+0x724>
 801c904:	4641      	mov	r1, r8
 801c906:	461a      	mov	r2, r3
 801c908:	4648      	mov	r0, r9
 801c90a:	f001 ff21 	bl	801e750 <__pow5mult>
 801c90e:	4680      	mov	r8, r0
 801c910:	2800      	cmp	r0, #0
 801c912:	f43f ae9b 	beq.w	801c64c <_strtod_l+0x43c>
 801c916:	4601      	mov	r1, r0
 801c918:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c91a:	4648      	mov	r0, r9
 801c91c:	f001 fe81 	bl	801e622 <__multiply>
 801c920:	900c      	str	r0, [sp, #48]	; 0x30
 801c922:	2800      	cmp	r0, #0
 801c924:	f43f ae92 	beq.w	801c64c <_strtod_l+0x43c>
 801c928:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c92a:	4648      	mov	r0, r9
 801c92c:	f001 fd92 	bl	801e454 <_Bfree>
 801c930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c932:	931c      	str	r3, [sp, #112]	; 0x70
 801c934:	2e00      	cmp	r6, #0
 801c936:	dc7a      	bgt.n	801ca2e <_strtod_l+0x81e>
 801c938:	9b06      	ldr	r3, [sp, #24]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	dd08      	ble.n	801c950 <_strtod_l+0x740>
 801c93e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c940:	9905      	ldr	r1, [sp, #20]
 801c942:	4648      	mov	r0, r9
 801c944:	f001 ff04 	bl	801e750 <__pow5mult>
 801c948:	9005      	str	r0, [sp, #20]
 801c94a:	2800      	cmp	r0, #0
 801c94c:	f43f ae7e 	beq.w	801c64c <_strtod_l+0x43c>
 801c950:	2d00      	cmp	r5, #0
 801c952:	dd08      	ble.n	801c966 <_strtod_l+0x756>
 801c954:	462a      	mov	r2, r5
 801c956:	9905      	ldr	r1, [sp, #20]
 801c958:	4648      	mov	r0, r9
 801c95a:	f001 ff47 	bl	801e7ec <__lshift>
 801c95e:	9005      	str	r0, [sp, #20]
 801c960:	2800      	cmp	r0, #0
 801c962:	f43f ae73 	beq.w	801c64c <_strtod_l+0x43c>
 801c966:	2f00      	cmp	r7, #0
 801c968:	dd08      	ble.n	801c97c <_strtod_l+0x76c>
 801c96a:	4641      	mov	r1, r8
 801c96c:	463a      	mov	r2, r7
 801c96e:	4648      	mov	r0, r9
 801c970:	f001 ff3c 	bl	801e7ec <__lshift>
 801c974:	4680      	mov	r8, r0
 801c976:	2800      	cmp	r0, #0
 801c978:	f43f ae68 	beq.w	801c64c <_strtod_l+0x43c>
 801c97c:	9a05      	ldr	r2, [sp, #20]
 801c97e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c980:	4648      	mov	r0, r9
 801c982:	f001 ffa1 	bl	801e8c8 <__mdiff>
 801c986:	4604      	mov	r4, r0
 801c988:	2800      	cmp	r0, #0
 801c98a:	f43f ae5f 	beq.w	801c64c <_strtod_l+0x43c>
 801c98e:	68c3      	ldr	r3, [r0, #12]
 801c990:	930c      	str	r3, [sp, #48]	; 0x30
 801c992:	2300      	movs	r3, #0
 801c994:	60c3      	str	r3, [r0, #12]
 801c996:	4641      	mov	r1, r8
 801c998:	f001 ff7c 	bl	801e894 <__mcmp>
 801c99c:	2800      	cmp	r0, #0
 801c99e:	da55      	bge.n	801ca4c <_strtod_l+0x83c>
 801c9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9a2:	b9e3      	cbnz	r3, 801c9de <_strtod_l+0x7ce>
 801c9a4:	f1ba 0f00 	cmp.w	sl, #0
 801c9a8:	d119      	bne.n	801c9de <_strtod_l+0x7ce>
 801c9aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9ae:	b9b3      	cbnz	r3, 801c9de <_strtod_l+0x7ce>
 801c9b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9b4:	0d1b      	lsrs	r3, r3, #20
 801c9b6:	051b      	lsls	r3, r3, #20
 801c9b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c9bc:	d90f      	bls.n	801c9de <_strtod_l+0x7ce>
 801c9be:	6963      	ldr	r3, [r4, #20]
 801c9c0:	b913      	cbnz	r3, 801c9c8 <_strtod_l+0x7b8>
 801c9c2:	6923      	ldr	r3, [r4, #16]
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	dd0a      	ble.n	801c9de <_strtod_l+0x7ce>
 801c9c8:	4621      	mov	r1, r4
 801c9ca:	2201      	movs	r2, #1
 801c9cc:	4648      	mov	r0, r9
 801c9ce:	f001 ff0d 	bl	801e7ec <__lshift>
 801c9d2:	4641      	mov	r1, r8
 801c9d4:	4604      	mov	r4, r0
 801c9d6:	f001 ff5d 	bl	801e894 <__mcmp>
 801c9da:	2800      	cmp	r0, #0
 801c9dc:	dc67      	bgt.n	801caae <_strtod_l+0x89e>
 801c9de:	9b04      	ldr	r3, [sp, #16]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d171      	bne.n	801cac8 <_strtod_l+0x8b8>
 801c9e4:	e63d      	b.n	801c662 <_strtod_l+0x452>
 801c9e6:	f018 0f01 	tst.w	r8, #1
 801c9ea:	d004      	beq.n	801c9f6 <_strtod_l+0x7e6>
 801c9ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c9f0:	f7e3 fe12 	bl	8000618 <__aeabi_dmul>
 801c9f4:	2301      	movs	r3, #1
 801c9f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c9fa:	3508      	adds	r5, #8
 801c9fc:	e6e5      	b.n	801c7ca <_strtod_l+0x5ba>
 801c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 801ca02:	fa02 f303 	lsl.w	r3, r2, r3
 801ca06:	ea03 0a0a 	and.w	sl, r3, sl
 801ca0a:	e6ff      	b.n	801c80c <_strtod_l+0x5fc>
 801ca0c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801ca10:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801ca14:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801ca18:	36e2      	adds	r6, #226	; 0xe2
 801ca1a:	fa01 f306 	lsl.w	r3, r1, r6
 801ca1e:	930a      	str	r3, [sp, #40]	; 0x28
 801ca20:	910f      	str	r1, [sp, #60]	; 0x3c
 801ca22:	e75d      	b.n	801c8e0 <_strtod_l+0x6d0>
 801ca24:	2300      	movs	r3, #0
 801ca26:	930a      	str	r3, [sp, #40]	; 0x28
 801ca28:	2301      	movs	r3, #1
 801ca2a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca2c:	e758      	b.n	801c8e0 <_strtod_l+0x6d0>
 801ca2e:	4632      	mov	r2, r6
 801ca30:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ca32:	4648      	mov	r0, r9
 801ca34:	f001 feda 	bl	801e7ec <__lshift>
 801ca38:	901c      	str	r0, [sp, #112]	; 0x70
 801ca3a:	2800      	cmp	r0, #0
 801ca3c:	f47f af7c 	bne.w	801c938 <_strtod_l+0x728>
 801ca40:	e604      	b.n	801c64c <_strtod_l+0x43c>
 801ca42:	bf00      	nop
 801ca44:	08024b78 	.word	0x08024b78
 801ca48:	fffffc02 	.word	0xfffffc02
 801ca4c:	465d      	mov	r5, fp
 801ca4e:	f040 8086 	bne.w	801cb5e <_strtod_l+0x94e>
 801ca52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca58:	b32a      	cbz	r2, 801caa6 <_strtod_l+0x896>
 801ca5a:	4aaf      	ldr	r2, [pc, #700]	; (801cd18 <_strtod_l+0xb08>)
 801ca5c:	4293      	cmp	r3, r2
 801ca5e:	d153      	bne.n	801cb08 <_strtod_l+0x8f8>
 801ca60:	9b04      	ldr	r3, [sp, #16]
 801ca62:	4650      	mov	r0, sl
 801ca64:	b1d3      	cbz	r3, 801ca9c <_strtod_l+0x88c>
 801ca66:	4aad      	ldr	r2, [pc, #692]	; (801cd1c <_strtod_l+0xb0c>)
 801ca68:	402a      	ands	r2, r5
 801ca6a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801ca6e:	f04f 31ff 	mov.w	r1, #4294967295
 801ca72:	d816      	bhi.n	801caa2 <_strtod_l+0x892>
 801ca74:	0d12      	lsrs	r2, r2, #20
 801ca76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ca7a:	fa01 f303 	lsl.w	r3, r1, r3
 801ca7e:	4298      	cmp	r0, r3
 801ca80:	d142      	bne.n	801cb08 <_strtod_l+0x8f8>
 801ca82:	4ba7      	ldr	r3, [pc, #668]	; (801cd20 <_strtod_l+0xb10>)
 801ca84:	429d      	cmp	r5, r3
 801ca86:	d102      	bne.n	801ca8e <_strtod_l+0x87e>
 801ca88:	3001      	adds	r0, #1
 801ca8a:	f43f addf 	beq.w	801c64c <_strtod_l+0x43c>
 801ca8e:	4ba3      	ldr	r3, [pc, #652]	; (801cd1c <_strtod_l+0xb0c>)
 801ca90:	402b      	ands	r3, r5
 801ca92:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ca96:	f04f 0a00 	mov.w	sl, #0
 801ca9a:	e7a0      	b.n	801c9de <_strtod_l+0x7ce>
 801ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 801caa0:	e7ed      	b.n	801ca7e <_strtod_l+0x86e>
 801caa2:	460b      	mov	r3, r1
 801caa4:	e7eb      	b.n	801ca7e <_strtod_l+0x86e>
 801caa6:	bb7b      	cbnz	r3, 801cb08 <_strtod_l+0x8f8>
 801caa8:	f1ba 0f00 	cmp.w	sl, #0
 801caac:	d12c      	bne.n	801cb08 <_strtod_l+0x8f8>
 801caae:	9904      	ldr	r1, [sp, #16]
 801cab0:	4a9a      	ldr	r2, [pc, #616]	; (801cd1c <_strtod_l+0xb0c>)
 801cab2:	465b      	mov	r3, fp
 801cab4:	b1f1      	cbz	r1, 801caf4 <_strtod_l+0x8e4>
 801cab6:	ea02 010b 	and.w	r1, r2, fp
 801caba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801cabe:	dc19      	bgt.n	801caf4 <_strtod_l+0x8e4>
 801cac0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cac4:	f77f ae5b 	ble.w	801c77e <_strtod_l+0x56e>
 801cac8:	4a96      	ldr	r2, [pc, #600]	; (801cd24 <_strtod_l+0xb14>)
 801caca:	2300      	movs	r3, #0
 801cacc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801cad0:	4650      	mov	r0, sl
 801cad2:	4659      	mov	r1, fp
 801cad4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cad8:	f7e3 fd9e 	bl	8000618 <__aeabi_dmul>
 801cadc:	4682      	mov	sl, r0
 801cade:	468b      	mov	fp, r1
 801cae0:	2900      	cmp	r1, #0
 801cae2:	f47f adbe 	bne.w	801c662 <_strtod_l+0x452>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	f47f adbb 	bne.w	801c662 <_strtod_l+0x452>
 801caec:	2322      	movs	r3, #34	; 0x22
 801caee:	f8c9 3000 	str.w	r3, [r9]
 801caf2:	e5b6      	b.n	801c662 <_strtod_l+0x452>
 801caf4:	4013      	ands	r3, r2
 801caf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cafa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cafe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cb02:	f04f 3aff 	mov.w	sl, #4294967295
 801cb06:	e76a      	b.n	801c9de <_strtod_l+0x7ce>
 801cb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb0a:	b193      	cbz	r3, 801cb32 <_strtod_l+0x922>
 801cb0c:	422b      	tst	r3, r5
 801cb0e:	f43f af66 	beq.w	801c9de <_strtod_l+0x7ce>
 801cb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb14:	9a04      	ldr	r2, [sp, #16]
 801cb16:	4650      	mov	r0, sl
 801cb18:	4659      	mov	r1, fp
 801cb1a:	b173      	cbz	r3, 801cb3a <_strtod_l+0x92a>
 801cb1c:	f7ff fb5c 	bl	801c1d8 <sulp>
 801cb20:	4602      	mov	r2, r0
 801cb22:	460b      	mov	r3, r1
 801cb24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb28:	f7e3 fbc0 	bl	80002ac <__adddf3>
 801cb2c:	4682      	mov	sl, r0
 801cb2e:	468b      	mov	fp, r1
 801cb30:	e755      	b.n	801c9de <_strtod_l+0x7ce>
 801cb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb34:	ea13 0f0a 	tst.w	r3, sl
 801cb38:	e7e9      	b.n	801cb0e <_strtod_l+0x8fe>
 801cb3a:	f7ff fb4d 	bl	801c1d8 <sulp>
 801cb3e:	4602      	mov	r2, r0
 801cb40:	460b      	mov	r3, r1
 801cb42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb46:	f7e3 fbaf 	bl	80002a8 <__aeabi_dsub>
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	4682      	mov	sl, r0
 801cb50:	468b      	mov	fp, r1
 801cb52:	f7e3 ffc9 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb56:	2800      	cmp	r0, #0
 801cb58:	f47f ae11 	bne.w	801c77e <_strtod_l+0x56e>
 801cb5c:	e73f      	b.n	801c9de <_strtod_l+0x7ce>
 801cb5e:	4641      	mov	r1, r8
 801cb60:	4620      	mov	r0, r4
 801cb62:	f001 ffd4 	bl	801eb0e <__ratio>
 801cb66:	ec57 6b10 	vmov	r6, r7, d0
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cb70:	ee10 0a10 	vmov	r0, s0
 801cb74:	4639      	mov	r1, r7
 801cb76:	f7e3 ffcb 	bl	8000b10 <__aeabi_dcmple>
 801cb7a:	2800      	cmp	r0, #0
 801cb7c:	d077      	beq.n	801cc6e <_strtod_l+0xa5e>
 801cb7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d04a      	beq.n	801cc1a <_strtod_l+0xa0a>
 801cb84:	4b68      	ldr	r3, [pc, #416]	; (801cd28 <_strtod_l+0xb18>)
 801cb86:	2200      	movs	r2, #0
 801cb88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cb8c:	4f66      	ldr	r7, [pc, #408]	; (801cd28 <_strtod_l+0xb18>)
 801cb8e:	2600      	movs	r6, #0
 801cb90:	4b62      	ldr	r3, [pc, #392]	; (801cd1c <_strtod_l+0xb0c>)
 801cb92:	402b      	ands	r3, r5
 801cb94:	930f      	str	r3, [sp, #60]	; 0x3c
 801cb96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb98:	4b64      	ldr	r3, [pc, #400]	; (801cd2c <_strtod_l+0xb1c>)
 801cb9a:	429a      	cmp	r2, r3
 801cb9c:	f040 80ce 	bne.w	801cd3c <_strtod_l+0xb2c>
 801cba0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cba8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801cbac:	ec4b ab10 	vmov	d0, sl, fp
 801cbb0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801cbb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801cbb8:	f001 fee4 	bl	801e984 <__ulp>
 801cbbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cbc0:	ec53 2b10 	vmov	r2, r3, d0
 801cbc4:	f7e3 fd28 	bl	8000618 <__aeabi_dmul>
 801cbc8:	4652      	mov	r2, sl
 801cbca:	465b      	mov	r3, fp
 801cbcc:	f7e3 fb6e 	bl	80002ac <__adddf3>
 801cbd0:	460b      	mov	r3, r1
 801cbd2:	4952      	ldr	r1, [pc, #328]	; (801cd1c <_strtod_l+0xb0c>)
 801cbd4:	4a56      	ldr	r2, [pc, #344]	; (801cd30 <_strtod_l+0xb20>)
 801cbd6:	4019      	ands	r1, r3
 801cbd8:	4291      	cmp	r1, r2
 801cbda:	4682      	mov	sl, r0
 801cbdc:	d95b      	bls.n	801cc96 <_strtod_l+0xa86>
 801cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbe0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cbe4:	4293      	cmp	r3, r2
 801cbe6:	d103      	bne.n	801cbf0 <_strtod_l+0x9e0>
 801cbe8:	9b08      	ldr	r3, [sp, #32]
 801cbea:	3301      	adds	r3, #1
 801cbec:	f43f ad2e 	beq.w	801c64c <_strtod_l+0x43c>
 801cbf0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801cd20 <_strtod_l+0xb10>
 801cbf4:	f04f 3aff 	mov.w	sl, #4294967295
 801cbf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cbfa:	4648      	mov	r0, r9
 801cbfc:	f001 fc2a 	bl	801e454 <_Bfree>
 801cc00:	9905      	ldr	r1, [sp, #20]
 801cc02:	4648      	mov	r0, r9
 801cc04:	f001 fc26 	bl	801e454 <_Bfree>
 801cc08:	4641      	mov	r1, r8
 801cc0a:	4648      	mov	r0, r9
 801cc0c:	f001 fc22 	bl	801e454 <_Bfree>
 801cc10:	4621      	mov	r1, r4
 801cc12:	4648      	mov	r0, r9
 801cc14:	f001 fc1e 	bl	801e454 <_Bfree>
 801cc18:	e619      	b.n	801c84e <_strtod_l+0x63e>
 801cc1a:	f1ba 0f00 	cmp.w	sl, #0
 801cc1e:	d11a      	bne.n	801cc56 <_strtod_l+0xa46>
 801cc20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc24:	b9eb      	cbnz	r3, 801cc62 <_strtod_l+0xa52>
 801cc26:	2200      	movs	r2, #0
 801cc28:	4b3f      	ldr	r3, [pc, #252]	; (801cd28 <_strtod_l+0xb18>)
 801cc2a:	4630      	mov	r0, r6
 801cc2c:	4639      	mov	r1, r7
 801cc2e:	f7e3 ff65 	bl	8000afc <__aeabi_dcmplt>
 801cc32:	b9c8      	cbnz	r0, 801cc68 <_strtod_l+0xa58>
 801cc34:	4630      	mov	r0, r6
 801cc36:	4639      	mov	r1, r7
 801cc38:	2200      	movs	r2, #0
 801cc3a:	4b3e      	ldr	r3, [pc, #248]	; (801cd34 <_strtod_l+0xb24>)
 801cc3c:	f7e3 fcec 	bl	8000618 <__aeabi_dmul>
 801cc40:	4606      	mov	r6, r0
 801cc42:	460f      	mov	r7, r1
 801cc44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801cc48:	9618      	str	r6, [sp, #96]	; 0x60
 801cc4a:	9319      	str	r3, [sp, #100]	; 0x64
 801cc4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801cc50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cc54:	e79c      	b.n	801cb90 <_strtod_l+0x980>
 801cc56:	f1ba 0f01 	cmp.w	sl, #1
 801cc5a:	d102      	bne.n	801cc62 <_strtod_l+0xa52>
 801cc5c:	2d00      	cmp	r5, #0
 801cc5e:	f43f ad8e 	beq.w	801c77e <_strtod_l+0x56e>
 801cc62:	2200      	movs	r2, #0
 801cc64:	4b34      	ldr	r3, [pc, #208]	; (801cd38 <_strtod_l+0xb28>)
 801cc66:	e78f      	b.n	801cb88 <_strtod_l+0x978>
 801cc68:	2600      	movs	r6, #0
 801cc6a:	4f32      	ldr	r7, [pc, #200]	; (801cd34 <_strtod_l+0xb24>)
 801cc6c:	e7ea      	b.n	801cc44 <_strtod_l+0xa34>
 801cc6e:	4b31      	ldr	r3, [pc, #196]	; (801cd34 <_strtod_l+0xb24>)
 801cc70:	4630      	mov	r0, r6
 801cc72:	4639      	mov	r1, r7
 801cc74:	2200      	movs	r2, #0
 801cc76:	f7e3 fccf 	bl	8000618 <__aeabi_dmul>
 801cc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc7c:	4606      	mov	r6, r0
 801cc7e:	460f      	mov	r7, r1
 801cc80:	b933      	cbnz	r3, 801cc90 <_strtod_l+0xa80>
 801cc82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc86:	9010      	str	r0, [sp, #64]	; 0x40
 801cc88:	9311      	str	r3, [sp, #68]	; 0x44
 801cc8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cc8e:	e7df      	b.n	801cc50 <_strtod_l+0xa40>
 801cc90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801cc94:	e7f9      	b.n	801cc8a <_strtod_l+0xa7a>
 801cc96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cc9a:	9b04      	ldr	r3, [sp, #16]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d1ab      	bne.n	801cbf8 <_strtod_l+0x9e8>
 801cca0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cca4:	0d1b      	lsrs	r3, r3, #20
 801cca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cca8:	051b      	lsls	r3, r3, #20
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	465d      	mov	r5, fp
 801ccae:	d1a3      	bne.n	801cbf8 <_strtod_l+0x9e8>
 801ccb0:	4639      	mov	r1, r7
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	f7e3 ff60 	bl	8000b78 <__aeabi_d2iz>
 801ccb8:	f7e3 fc44 	bl	8000544 <__aeabi_i2d>
 801ccbc:	460b      	mov	r3, r1
 801ccbe:	4602      	mov	r2, r0
 801ccc0:	4639      	mov	r1, r7
 801ccc2:	4630      	mov	r0, r6
 801ccc4:	f7e3 faf0 	bl	80002a8 <__aeabi_dsub>
 801ccc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccca:	4606      	mov	r6, r0
 801cccc:	460f      	mov	r7, r1
 801ccce:	b933      	cbnz	r3, 801ccde <_strtod_l+0xace>
 801ccd0:	f1ba 0f00 	cmp.w	sl, #0
 801ccd4:	d103      	bne.n	801ccde <_strtod_l+0xace>
 801ccd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801ccda:	2d00      	cmp	r5, #0
 801ccdc:	d06d      	beq.n	801cdba <_strtod_l+0xbaa>
 801ccde:	a30a      	add	r3, pc, #40	; (adr r3, 801cd08 <_strtod_l+0xaf8>)
 801cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce4:	4630      	mov	r0, r6
 801cce6:	4639      	mov	r1, r7
 801cce8:	f7e3 ff08 	bl	8000afc <__aeabi_dcmplt>
 801ccec:	2800      	cmp	r0, #0
 801ccee:	f47f acb8 	bne.w	801c662 <_strtod_l+0x452>
 801ccf2:	a307      	add	r3, pc, #28	; (adr r3, 801cd10 <_strtod_l+0xb00>)
 801ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf8:	4630      	mov	r0, r6
 801ccfa:	4639      	mov	r1, r7
 801ccfc:	f7e3 ff1c 	bl	8000b38 <__aeabi_dcmpgt>
 801cd00:	2800      	cmp	r0, #0
 801cd02:	f43f af79 	beq.w	801cbf8 <_strtod_l+0x9e8>
 801cd06:	e4ac      	b.n	801c662 <_strtod_l+0x452>
 801cd08:	94a03595 	.word	0x94a03595
 801cd0c:	3fdfffff 	.word	0x3fdfffff
 801cd10:	35afe535 	.word	0x35afe535
 801cd14:	3fe00000 	.word	0x3fe00000
 801cd18:	000fffff 	.word	0x000fffff
 801cd1c:	7ff00000 	.word	0x7ff00000
 801cd20:	7fefffff 	.word	0x7fefffff
 801cd24:	39500000 	.word	0x39500000
 801cd28:	3ff00000 	.word	0x3ff00000
 801cd2c:	7fe00000 	.word	0x7fe00000
 801cd30:	7c9fffff 	.word	0x7c9fffff
 801cd34:	3fe00000 	.word	0x3fe00000
 801cd38:	bff00000 	.word	0xbff00000
 801cd3c:	9b04      	ldr	r3, [sp, #16]
 801cd3e:	b333      	cbz	r3, 801cd8e <_strtod_l+0xb7e>
 801cd40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cd46:	d822      	bhi.n	801cd8e <_strtod_l+0xb7e>
 801cd48:	a327      	add	r3, pc, #156	; (adr r3, 801cde8 <_strtod_l+0xbd8>)
 801cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd4e:	4630      	mov	r0, r6
 801cd50:	4639      	mov	r1, r7
 801cd52:	f7e3 fedd 	bl	8000b10 <__aeabi_dcmple>
 801cd56:	b1a0      	cbz	r0, 801cd82 <_strtod_l+0xb72>
 801cd58:	4639      	mov	r1, r7
 801cd5a:	4630      	mov	r0, r6
 801cd5c:	f7e3 ff34 	bl	8000bc8 <__aeabi_d2uiz>
 801cd60:	2800      	cmp	r0, #0
 801cd62:	bf08      	it	eq
 801cd64:	2001      	moveq	r0, #1
 801cd66:	f7e3 fbdd 	bl	8000524 <__aeabi_ui2d>
 801cd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd6c:	4606      	mov	r6, r0
 801cd6e:	460f      	mov	r7, r1
 801cd70:	bb03      	cbnz	r3, 801cdb4 <_strtod_l+0xba4>
 801cd72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd76:	9012      	str	r0, [sp, #72]	; 0x48
 801cd78:	9313      	str	r3, [sp, #76]	; 0x4c
 801cd7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801cd7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cd8a:	1a9b      	subs	r3, r3, r2
 801cd8c:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 801cd92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801cd96:	f001 fdf5 	bl	801e984 <__ulp>
 801cd9a:	4650      	mov	r0, sl
 801cd9c:	ec53 2b10 	vmov	r2, r3, d0
 801cda0:	4659      	mov	r1, fp
 801cda2:	f7e3 fc39 	bl	8000618 <__aeabi_dmul>
 801cda6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cdaa:	f7e3 fa7f 	bl	80002ac <__adddf3>
 801cdae:	4682      	mov	sl, r0
 801cdb0:	468b      	mov	fp, r1
 801cdb2:	e772      	b.n	801cc9a <_strtod_l+0xa8a>
 801cdb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801cdb8:	e7df      	b.n	801cd7a <_strtod_l+0xb6a>
 801cdba:	a30d      	add	r3, pc, #52	; (adr r3, 801cdf0 <_strtod_l+0xbe0>)
 801cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc0:	f7e3 fe9c 	bl	8000afc <__aeabi_dcmplt>
 801cdc4:	e79c      	b.n	801cd00 <_strtod_l+0xaf0>
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	930d      	str	r3, [sp, #52]	; 0x34
 801cdca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cdcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cdce:	6013      	str	r3, [r2, #0]
 801cdd0:	f7ff ba61 	b.w	801c296 <_strtod_l+0x86>
 801cdd4:	2b65      	cmp	r3, #101	; 0x65
 801cdd6:	f04f 0200 	mov.w	r2, #0
 801cdda:	f43f ab4e 	beq.w	801c47a <_strtod_l+0x26a>
 801cdde:	2101      	movs	r1, #1
 801cde0:	4614      	mov	r4, r2
 801cde2:	9104      	str	r1, [sp, #16]
 801cde4:	f7ff bacb 	b.w	801c37e <_strtod_l+0x16e>
 801cde8:	ffc00000 	.word	0xffc00000
 801cdec:	41dfffff 	.word	0x41dfffff
 801cdf0:	94a03595 	.word	0x94a03595
 801cdf4:	3fcfffff 	.word	0x3fcfffff

0801cdf8 <strtod>:
 801cdf8:	4b07      	ldr	r3, [pc, #28]	; (801ce18 <strtod+0x20>)
 801cdfa:	4a08      	ldr	r2, [pc, #32]	; (801ce1c <strtod+0x24>)
 801cdfc:	b410      	push	{r4}
 801cdfe:	681c      	ldr	r4, [r3, #0]
 801ce00:	6a23      	ldr	r3, [r4, #32]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	bf08      	it	eq
 801ce06:	4613      	moveq	r3, r2
 801ce08:	460a      	mov	r2, r1
 801ce0a:	4601      	mov	r1, r0
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce12:	f7ff b9fd 	b.w	801c210 <_strtod_l>
 801ce16:	bf00      	nop
 801ce18:	20000084 	.word	0x20000084
 801ce1c:	200000e8 	.word	0x200000e8

0801ce20 <_strtol_l.isra.0>:
 801ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce24:	4680      	mov	r8, r0
 801ce26:	4689      	mov	r9, r1
 801ce28:	4692      	mov	sl, r2
 801ce2a:	461e      	mov	r6, r3
 801ce2c:	460f      	mov	r7, r1
 801ce2e:	463d      	mov	r5, r7
 801ce30:	9808      	ldr	r0, [sp, #32]
 801ce32:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce36:	f7fe fb8d 	bl	801b554 <__locale_ctype_ptr_l>
 801ce3a:	4420      	add	r0, r4
 801ce3c:	7843      	ldrb	r3, [r0, #1]
 801ce3e:	f013 0308 	ands.w	r3, r3, #8
 801ce42:	d132      	bne.n	801ceaa <_strtol_l.isra.0+0x8a>
 801ce44:	2c2d      	cmp	r4, #45	; 0x2d
 801ce46:	d132      	bne.n	801ceae <_strtol_l.isra.0+0x8e>
 801ce48:	787c      	ldrb	r4, [r7, #1]
 801ce4a:	1cbd      	adds	r5, r7, #2
 801ce4c:	2201      	movs	r2, #1
 801ce4e:	2e00      	cmp	r6, #0
 801ce50:	d05d      	beq.n	801cf0e <_strtol_l.isra.0+0xee>
 801ce52:	2e10      	cmp	r6, #16
 801ce54:	d109      	bne.n	801ce6a <_strtol_l.isra.0+0x4a>
 801ce56:	2c30      	cmp	r4, #48	; 0x30
 801ce58:	d107      	bne.n	801ce6a <_strtol_l.isra.0+0x4a>
 801ce5a:	782b      	ldrb	r3, [r5, #0]
 801ce5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ce60:	2b58      	cmp	r3, #88	; 0x58
 801ce62:	d14f      	bne.n	801cf04 <_strtol_l.isra.0+0xe4>
 801ce64:	786c      	ldrb	r4, [r5, #1]
 801ce66:	2610      	movs	r6, #16
 801ce68:	3502      	adds	r5, #2
 801ce6a:	2a00      	cmp	r2, #0
 801ce6c:	bf14      	ite	ne
 801ce6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801ce72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801ce76:	2700      	movs	r7, #0
 801ce78:	fbb1 fcf6 	udiv	ip, r1, r6
 801ce7c:	4638      	mov	r0, r7
 801ce7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 801ce82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ce86:	2b09      	cmp	r3, #9
 801ce88:	d817      	bhi.n	801ceba <_strtol_l.isra.0+0x9a>
 801ce8a:	461c      	mov	r4, r3
 801ce8c:	42a6      	cmp	r6, r4
 801ce8e:	dd23      	ble.n	801ced8 <_strtol_l.isra.0+0xb8>
 801ce90:	1c7b      	adds	r3, r7, #1
 801ce92:	d007      	beq.n	801cea4 <_strtol_l.isra.0+0x84>
 801ce94:	4584      	cmp	ip, r0
 801ce96:	d31c      	bcc.n	801ced2 <_strtol_l.isra.0+0xb2>
 801ce98:	d101      	bne.n	801ce9e <_strtol_l.isra.0+0x7e>
 801ce9a:	45a6      	cmp	lr, r4
 801ce9c:	db19      	blt.n	801ced2 <_strtol_l.isra.0+0xb2>
 801ce9e:	fb00 4006 	mla	r0, r0, r6, r4
 801cea2:	2701      	movs	r7, #1
 801cea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cea8:	e7eb      	b.n	801ce82 <_strtol_l.isra.0+0x62>
 801ceaa:	462f      	mov	r7, r5
 801ceac:	e7bf      	b.n	801ce2e <_strtol_l.isra.0+0xe>
 801ceae:	2c2b      	cmp	r4, #43	; 0x2b
 801ceb0:	bf04      	itt	eq
 801ceb2:	1cbd      	addeq	r5, r7, #2
 801ceb4:	787c      	ldrbeq	r4, [r7, #1]
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	e7c9      	b.n	801ce4e <_strtol_l.isra.0+0x2e>
 801ceba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801cebe:	2b19      	cmp	r3, #25
 801cec0:	d801      	bhi.n	801cec6 <_strtol_l.isra.0+0xa6>
 801cec2:	3c37      	subs	r4, #55	; 0x37
 801cec4:	e7e2      	b.n	801ce8c <_strtol_l.isra.0+0x6c>
 801cec6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801ceca:	2b19      	cmp	r3, #25
 801cecc:	d804      	bhi.n	801ced8 <_strtol_l.isra.0+0xb8>
 801cece:	3c57      	subs	r4, #87	; 0x57
 801ced0:	e7dc      	b.n	801ce8c <_strtol_l.isra.0+0x6c>
 801ced2:	f04f 37ff 	mov.w	r7, #4294967295
 801ced6:	e7e5      	b.n	801cea4 <_strtol_l.isra.0+0x84>
 801ced8:	1c7b      	adds	r3, r7, #1
 801ceda:	d108      	bne.n	801ceee <_strtol_l.isra.0+0xce>
 801cedc:	2322      	movs	r3, #34	; 0x22
 801cede:	f8c8 3000 	str.w	r3, [r8]
 801cee2:	4608      	mov	r0, r1
 801cee4:	f1ba 0f00 	cmp.w	sl, #0
 801cee8:	d107      	bne.n	801cefa <_strtol_l.isra.0+0xda>
 801ceea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ceee:	b102      	cbz	r2, 801cef2 <_strtol_l.isra.0+0xd2>
 801cef0:	4240      	negs	r0, r0
 801cef2:	f1ba 0f00 	cmp.w	sl, #0
 801cef6:	d0f8      	beq.n	801ceea <_strtol_l.isra.0+0xca>
 801cef8:	b10f      	cbz	r7, 801cefe <_strtol_l.isra.0+0xde>
 801cefa:	f105 39ff 	add.w	r9, r5, #4294967295
 801cefe:	f8ca 9000 	str.w	r9, [sl]
 801cf02:	e7f2      	b.n	801ceea <_strtol_l.isra.0+0xca>
 801cf04:	2430      	movs	r4, #48	; 0x30
 801cf06:	2e00      	cmp	r6, #0
 801cf08:	d1af      	bne.n	801ce6a <_strtol_l.isra.0+0x4a>
 801cf0a:	2608      	movs	r6, #8
 801cf0c:	e7ad      	b.n	801ce6a <_strtol_l.isra.0+0x4a>
 801cf0e:	2c30      	cmp	r4, #48	; 0x30
 801cf10:	d0a3      	beq.n	801ce5a <_strtol_l.isra.0+0x3a>
 801cf12:	260a      	movs	r6, #10
 801cf14:	e7a9      	b.n	801ce6a <_strtol_l.isra.0+0x4a>
	...

0801cf18 <strtol>:
 801cf18:	4b08      	ldr	r3, [pc, #32]	; (801cf3c <strtol+0x24>)
 801cf1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf1c:	681c      	ldr	r4, [r3, #0]
 801cf1e:	4d08      	ldr	r5, [pc, #32]	; (801cf40 <strtol+0x28>)
 801cf20:	6a23      	ldr	r3, [r4, #32]
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	bf08      	it	eq
 801cf26:	462b      	moveq	r3, r5
 801cf28:	9300      	str	r3, [sp, #0]
 801cf2a:	4613      	mov	r3, r2
 801cf2c:	460a      	mov	r2, r1
 801cf2e:	4601      	mov	r1, r0
 801cf30:	4620      	mov	r0, r4
 801cf32:	f7ff ff75 	bl	801ce20 <_strtol_l.isra.0>
 801cf36:	b003      	add	sp, #12
 801cf38:	bd30      	pop	{r4, r5, pc}
 801cf3a:	bf00      	nop
 801cf3c:	20000084 	.word	0x20000084
 801cf40:	200000e8 	.word	0x200000e8

0801cf44 <__ascii_wctomb>:
 801cf44:	b149      	cbz	r1, 801cf5a <__ascii_wctomb+0x16>
 801cf46:	2aff      	cmp	r2, #255	; 0xff
 801cf48:	bf85      	ittet	hi
 801cf4a:	238a      	movhi	r3, #138	; 0x8a
 801cf4c:	6003      	strhi	r3, [r0, #0]
 801cf4e:	700a      	strbls	r2, [r1, #0]
 801cf50:	f04f 30ff 	movhi.w	r0, #4294967295
 801cf54:	bf98      	it	ls
 801cf56:	2001      	movls	r0, #1
 801cf58:	4770      	bx	lr
 801cf5a:	4608      	mov	r0, r1
 801cf5c:	4770      	bx	lr

0801cf5e <quorem>:
 801cf5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf62:	6903      	ldr	r3, [r0, #16]
 801cf64:	690c      	ldr	r4, [r1, #16]
 801cf66:	42a3      	cmp	r3, r4
 801cf68:	4680      	mov	r8, r0
 801cf6a:	f2c0 8082 	blt.w	801d072 <quorem+0x114>
 801cf6e:	3c01      	subs	r4, #1
 801cf70:	f101 0714 	add.w	r7, r1, #20
 801cf74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801cf78:	f100 0614 	add.w	r6, r0, #20
 801cf7c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801cf80:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801cf84:	eb06 030c 	add.w	r3, r6, ip
 801cf88:	3501      	adds	r5, #1
 801cf8a:	eb07 090c 	add.w	r9, r7, ip
 801cf8e:	9301      	str	r3, [sp, #4]
 801cf90:	fbb0 f5f5 	udiv	r5, r0, r5
 801cf94:	b395      	cbz	r5, 801cffc <quorem+0x9e>
 801cf96:	f04f 0a00 	mov.w	sl, #0
 801cf9a:	4638      	mov	r0, r7
 801cf9c:	46b6      	mov	lr, r6
 801cf9e:	46d3      	mov	fp, sl
 801cfa0:	f850 2b04 	ldr.w	r2, [r0], #4
 801cfa4:	b293      	uxth	r3, r2
 801cfa6:	fb05 a303 	mla	r3, r5, r3, sl
 801cfaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cfae:	b29b      	uxth	r3, r3
 801cfb0:	ebab 0303 	sub.w	r3, fp, r3
 801cfb4:	0c12      	lsrs	r2, r2, #16
 801cfb6:	f8de b000 	ldr.w	fp, [lr]
 801cfba:	fb05 a202 	mla	r2, r5, r2, sl
 801cfbe:	fa13 f38b 	uxtah	r3, r3, fp
 801cfc2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801cfc6:	fa1f fb82 	uxth.w	fp, r2
 801cfca:	f8de 2000 	ldr.w	r2, [lr]
 801cfce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801cfd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cfd6:	b29b      	uxth	r3, r3
 801cfd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cfdc:	4581      	cmp	r9, r0
 801cfde:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801cfe2:	f84e 3b04 	str.w	r3, [lr], #4
 801cfe6:	d2db      	bcs.n	801cfa0 <quorem+0x42>
 801cfe8:	f856 300c 	ldr.w	r3, [r6, ip]
 801cfec:	b933      	cbnz	r3, 801cffc <quorem+0x9e>
 801cfee:	9b01      	ldr	r3, [sp, #4]
 801cff0:	3b04      	subs	r3, #4
 801cff2:	429e      	cmp	r6, r3
 801cff4:	461a      	mov	r2, r3
 801cff6:	d330      	bcc.n	801d05a <quorem+0xfc>
 801cff8:	f8c8 4010 	str.w	r4, [r8, #16]
 801cffc:	4640      	mov	r0, r8
 801cffe:	f001 fc49 	bl	801e894 <__mcmp>
 801d002:	2800      	cmp	r0, #0
 801d004:	db25      	blt.n	801d052 <quorem+0xf4>
 801d006:	3501      	adds	r5, #1
 801d008:	4630      	mov	r0, r6
 801d00a:	f04f 0c00 	mov.w	ip, #0
 801d00e:	f857 2b04 	ldr.w	r2, [r7], #4
 801d012:	f8d0 e000 	ldr.w	lr, [r0]
 801d016:	b293      	uxth	r3, r2
 801d018:	ebac 0303 	sub.w	r3, ip, r3
 801d01c:	0c12      	lsrs	r2, r2, #16
 801d01e:	fa13 f38e 	uxtah	r3, r3, lr
 801d022:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d02a:	b29b      	uxth	r3, r3
 801d02c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d030:	45b9      	cmp	r9, r7
 801d032:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d036:	f840 3b04 	str.w	r3, [r0], #4
 801d03a:	d2e8      	bcs.n	801d00e <quorem+0xb0>
 801d03c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801d040:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801d044:	b92a      	cbnz	r2, 801d052 <quorem+0xf4>
 801d046:	3b04      	subs	r3, #4
 801d048:	429e      	cmp	r6, r3
 801d04a:	461a      	mov	r2, r3
 801d04c:	d30b      	bcc.n	801d066 <quorem+0x108>
 801d04e:	f8c8 4010 	str.w	r4, [r8, #16]
 801d052:	4628      	mov	r0, r5
 801d054:	b003      	add	sp, #12
 801d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05a:	6812      	ldr	r2, [r2, #0]
 801d05c:	3b04      	subs	r3, #4
 801d05e:	2a00      	cmp	r2, #0
 801d060:	d1ca      	bne.n	801cff8 <quorem+0x9a>
 801d062:	3c01      	subs	r4, #1
 801d064:	e7c5      	b.n	801cff2 <quorem+0x94>
 801d066:	6812      	ldr	r2, [r2, #0]
 801d068:	3b04      	subs	r3, #4
 801d06a:	2a00      	cmp	r2, #0
 801d06c:	d1ef      	bne.n	801d04e <quorem+0xf0>
 801d06e:	3c01      	subs	r4, #1
 801d070:	e7ea      	b.n	801d048 <quorem+0xea>
 801d072:	2000      	movs	r0, #0
 801d074:	e7ee      	b.n	801d054 <quorem+0xf6>
	...

0801d078 <_dtoa_r>:
 801d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d07c:	ec57 6b10 	vmov	r6, r7, d0
 801d080:	b097      	sub	sp, #92	; 0x5c
 801d082:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d084:	9106      	str	r1, [sp, #24]
 801d086:	4604      	mov	r4, r0
 801d088:	920b      	str	r2, [sp, #44]	; 0x2c
 801d08a:	9312      	str	r3, [sp, #72]	; 0x48
 801d08c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d090:	e9cd 6700 	strd	r6, r7, [sp]
 801d094:	b93d      	cbnz	r5, 801d0a6 <_dtoa_r+0x2e>
 801d096:	2010      	movs	r0, #16
 801d098:	f7fe fa60 	bl	801b55c <malloc>
 801d09c:	6260      	str	r0, [r4, #36]	; 0x24
 801d09e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d0a2:	6005      	str	r5, [r0, #0]
 801d0a4:	60c5      	str	r5, [r0, #12]
 801d0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0a8:	6819      	ldr	r1, [r3, #0]
 801d0aa:	b151      	cbz	r1, 801d0c2 <_dtoa_r+0x4a>
 801d0ac:	685a      	ldr	r2, [r3, #4]
 801d0ae:	604a      	str	r2, [r1, #4]
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	4093      	lsls	r3, r2
 801d0b4:	608b      	str	r3, [r1, #8]
 801d0b6:	4620      	mov	r0, r4
 801d0b8:	f001 f9cc 	bl	801e454 <_Bfree>
 801d0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0be:	2200      	movs	r2, #0
 801d0c0:	601a      	str	r2, [r3, #0]
 801d0c2:	1e3b      	subs	r3, r7, #0
 801d0c4:	bfbb      	ittet	lt
 801d0c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d0ca:	9301      	strlt	r3, [sp, #4]
 801d0cc:	2300      	movge	r3, #0
 801d0ce:	2201      	movlt	r2, #1
 801d0d0:	bfac      	ite	ge
 801d0d2:	f8c8 3000 	strge.w	r3, [r8]
 801d0d6:	f8c8 2000 	strlt.w	r2, [r8]
 801d0da:	4baf      	ldr	r3, [pc, #700]	; (801d398 <_dtoa_r+0x320>)
 801d0dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d0e0:	ea33 0308 	bics.w	r3, r3, r8
 801d0e4:	d114      	bne.n	801d110 <_dtoa_r+0x98>
 801d0e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0e8:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0ec:	6013      	str	r3, [r2, #0]
 801d0ee:	9b00      	ldr	r3, [sp, #0]
 801d0f0:	b923      	cbnz	r3, 801d0fc <_dtoa_r+0x84>
 801d0f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801d0f6:	2800      	cmp	r0, #0
 801d0f8:	f000 8542 	beq.w	801db80 <_dtoa_r+0xb08>
 801d0fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d0fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801d3ac <_dtoa_r+0x334>
 801d102:	2b00      	cmp	r3, #0
 801d104:	f000 8544 	beq.w	801db90 <_dtoa_r+0xb18>
 801d108:	f10b 0303 	add.w	r3, fp, #3
 801d10c:	f000 bd3e 	b.w	801db8c <_dtoa_r+0xb14>
 801d110:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d114:	2200      	movs	r2, #0
 801d116:	2300      	movs	r3, #0
 801d118:	4630      	mov	r0, r6
 801d11a:	4639      	mov	r1, r7
 801d11c:	f7e3 fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 801d120:	4681      	mov	r9, r0
 801d122:	b168      	cbz	r0, 801d140 <_dtoa_r+0xc8>
 801d124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d126:	2301      	movs	r3, #1
 801d128:	6013      	str	r3, [r2, #0]
 801d12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	f000 8524 	beq.w	801db7a <_dtoa_r+0xb02>
 801d132:	4b9a      	ldr	r3, [pc, #616]	; (801d39c <_dtoa_r+0x324>)
 801d134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d136:	f103 3bff 	add.w	fp, r3, #4294967295
 801d13a:	6013      	str	r3, [r2, #0]
 801d13c:	f000 bd28 	b.w	801db90 <_dtoa_r+0xb18>
 801d140:	aa14      	add	r2, sp, #80	; 0x50
 801d142:	a915      	add	r1, sp, #84	; 0x54
 801d144:	ec47 6b10 	vmov	d0, r6, r7
 801d148:	4620      	mov	r0, r4
 801d14a:	f001 fc91 	bl	801ea70 <__d2b>
 801d14e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d152:	9004      	str	r0, [sp, #16]
 801d154:	2d00      	cmp	r5, #0
 801d156:	d07c      	beq.n	801d252 <_dtoa_r+0x1da>
 801d158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d15c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801d160:	46b2      	mov	sl, r6
 801d162:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801d166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d16a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801d16e:	2200      	movs	r2, #0
 801d170:	4b8b      	ldr	r3, [pc, #556]	; (801d3a0 <_dtoa_r+0x328>)
 801d172:	4650      	mov	r0, sl
 801d174:	4659      	mov	r1, fp
 801d176:	f7e3 f897 	bl	80002a8 <__aeabi_dsub>
 801d17a:	a381      	add	r3, pc, #516	; (adr r3, 801d380 <_dtoa_r+0x308>)
 801d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d180:	f7e3 fa4a 	bl	8000618 <__aeabi_dmul>
 801d184:	a380      	add	r3, pc, #512	; (adr r3, 801d388 <_dtoa_r+0x310>)
 801d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d18a:	f7e3 f88f 	bl	80002ac <__adddf3>
 801d18e:	4606      	mov	r6, r0
 801d190:	4628      	mov	r0, r5
 801d192:	460f      	mov	r7, r1
 801d194:	f7e3 f9d6 	bl	8000544 <__aeabi_i2d>
 801d198:	a37d      	add	r3, pc, #500	; (adr r3, 801d390 <_dtoa_r+0x318>)
 801d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d19e:	f7e3 fa3b 	bl	8000618 <__aeabi_dmul>
 801d1a2:	4602      	mov	r2, r0
 801d1a4:	460b      	mov	r3, r1
 801d1a6:	4630      	mov	r0, r6
 801d1a8:	4639      	mov	r1, r7
 801d1aa:	f7e3 f87f 	bl	80002ac <__adddf3>
 801d1ae:	4606      	mov	r6, r0
 801d1b0:	460f      	mov	r7, r1
 801d1b2:	f7e3 fce1 	bl	8000b78 <__aeabi_d2iz>
 801d1b6:	2200      	movs	r2, #0
 801d1b8:	4682      	mov	sl, r0
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	4630      	mov	r0, r6
 801d1be:	4639      	mov	r1, r7
 801d1c0:	f7e3 fc9c 	bl	8000afc <__aeabi_dcmplt>
 801d1c4:	b148      	cbz	r0, 801d1da <_dtoa_r+0x162>
 801d1c6:	4650      	mov	r0, sl
 801d1c8:	f7e3 f9bc 	bl	8000544 <__aeabi_i2d>
 801d1cc:	4632      	mov	r2, r6
 801d1ce:	463b      	mov	r3, r7
 801d1d0:	f7e3 fc8a 	bl	8000ae8 <__aeabi_dcmpeq>
 801d1d4:	b908      	cbnz	r0, 801d1da <_dtoa_r+0x162>
 801d1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1da:	f1ba 0f16 	cmp.w	sl, #22
 801d1de:	d859      	bhi.n	801d294 <_dtoa_r+0x21c>
 801d1e0:	4970      	ldr	r1, [pc, #448]	; (801d3a4 <_dtoa_r+0x32c>)
 801d1e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801d1e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1ee:	f7e3 fca3 	bl	8000b38 <__aeabi_dcmpgt>
 801d1f2:	2800      	cmp	r0, #0
 801d1f4:	d050      	beq.n	801d298 <_dtoa_r+0x220>
 801d1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 801d1fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d200:	1b5d      	subs	r5, r3, r5
 801d202:	f1b5 0801 	subs.w	r8, r5, #1
 801d206:	bf49      	itett	mi
 801d208:	f1c5 0301 	rsbmi	r3, r5, #1
 801d20c:	2300      	movpl	r3, #0
 801d20e:	9305      	strmi	r3, [sp, #20]
 801d210:	f04f 0800 	movmi.w	r8, #0
 801d214:	bf58      	it	pl
 801d216:	9305      	strpl	r3, [sp, #20]
 801d218:	f1ba 0f00 	cmp.w	sl, #0
 801d21c:	db3e      	blt.n	801d29c <_dtoa_r+0x224>
 801d21e:	2300      	movs	r3, #0
 801d220:	44d0      	add	r8, sl
 801d222:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801d226:	9307      	str	r3, [sp, #28]
 801d228:	9b06      	ldr	r3, [sp, #24]
 801d22a:	2b09      	cmp	r3, #9
 801d22c:	f200 8090 	bhi.w	801d350 <_dtoa_r+0x2d8>
 801d230:	2b05      	cmp	r3, #5
 801d232:	bfc4      	itt	gt
 801d234:	3b04      	subgt	r3, #4
 801d236:	9306      	strgt	r3, [sp, #24]
 801d238:	9b06      	ldr	r3, [sp, #24]
 801d23a:	f1a3 0302 	sub.w	r3, r3, #2
 801d23e:	bfcc      	ite	gt
 801d240:	2500      	movgt	r5, #0
 801d242:	2501      	movle	r5, #1
 801d244:	2b03      	cmp	r3, #3
 801d246:	f200 808f 	bhi.w	801d368 <_dtoa_r+0x2f0>
 801d24a:	e8df f003 	tbb	[pc, r3]
 801d24e:	7f7d      	.short	0x7f7d
 801d250:	7131      	.short	0x7131
 801d252:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801d256:	441d      	add	r5, r3
 801d258:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801d25c:	2820      	cmp	r0, #32
 801d25e:	dd13      	ble.n	801d288 <_dtoa_r+0x210>
 801d260:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801d264:	9b00      	ldr	r3, [sp, #0]
 801d266:	fa08 f800 	lsl.w	r8, r8, r0
 801d26a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801d26e:	fa23 f000 	lsr.w	r0, r3, r0
 801d272:	ea48 0000 	orr.w	r0, r8, r0
 801d276:	f7e3 f955 	bl	8000524 <__aeabi_ui2d>
 801d27a:	2301      	movs	r3, #1
 801d27c:	4682      	mov	sl, r0
 801d27e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801d282:	3d01      	subs	r5, #1
 801d284:	9313      	str	r3, [sp, #76]	; 0x4c
 801d286:	e772      	b.n	801d16e <_dtoa_r+0xf6>
 801d288:	9b00      	ldr	r3, [sp, #0]
 801d28a:	f1c0 0020 	rsb	r0, r0, #32
 801d28e:	fa03 f000 	lsl.w	r0, r3, r0
 801d292:	e7f0      	b.n	801d276 <_dtoa_r+0x1fe>
 801d294:	2301      	movs	r3, #1
 801d296:	e7b1      	b.n	801d1fc <_dtoa_r+0x184>
 801d298:	900f      	str	r0, [sp, #60]	; 0x3c
 801d29a:	e7b0      	b.n	801d1fe <_dtoa_r+0x186>
 801d29c:	9b05      	ldr	r3, [sp, #20]
 801d29e:	eba3 030a 	sub.w	r3, r3, sl
 801d2a2:	9305      	str	r3, [sp, #20]
 801d2a4:	f1ca 0300 	rsb	r3, sl, #0
 801d2a8:	9307      	str	r3, [sp, #28]
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	930e      	str	r3, [sp, #56]	; 0x38
 801d2ae:	e7bb      	b.n	801d228 <_dtoa_r+0x1b0>
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	930a      	str	r3, [sp, #40]	; 0x28
 801d2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	dd59      	ble.n	801d36e <_dtoa_r+0x2f6>
 801d2ba:	9302      	str	r3, [sp, #8]
 801d2bc:	4699      	mov	r9, r3
 801d2be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	6072      	str	r2, [r6, #4]
 801d2c4:	2204      	movs	r2, #4
 801d2c6:	f102 0014 	add.w	r0, r2, #20
 801d2ca:	4298      	cmp	r0, r3
 801d2cc:	6871      	ldr	r1, [r6, #4]
 801d2ce:	d953      	bls.n	801d378 <_dtoa_r+0x300>
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f001 f88b 	bl	801e3ec <_Balloc>
 801d2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2d8:	6030      	str	r0, [r6, #0]
 801d2da:	f1b9 0f0e 	cmp.w	r9, #14
 801d2de:	f8d3 b000 	ldr.w	fp, [r3]
 801d2e2:	f200 80e6 	bhi.w	801d4b2 <_dtoa_r+0x43a>
 801d2e6:	2d00      	cmp	r5, #0
 801d2e8:	f000 80e3 	beq.w	801d4b2 <_dtoa_r+0x43a>
 801d2ec:	ed9d 7b00 	vldr	d7, [sp]
 801d2f0:	f1ba 0f00 	cmp.w	sl, #0
 801d2f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801d2f8:	dd74      	ble.n	801d3e4 <_dtoa_r+0x36c>
 801d2fa:	4a2a      	ldr	r2, [pc, #168]	; (801d3a4 <_dtoa_r+0x32c>)
 801d2fc:	f00a 030f 	and.w	r3, sl, #15
 801d300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d304:	ed93 7b00 	vldr	d7, [r3]
 801d308:	ea4f 162a 	mov.w	r6, sl, asr #4
 801d30c:	06f0      	lsls	r0, r6, #27
 801d30e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d312:	d565      	bpl.n	801d3e0 <_dtoa_r+0x368>
 801d314:	4b24      	ldr	r3, [pc, #144]	; (801d3a8 <_dtoa_r+0x330>)
 801d316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d31a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d31e:	f7e3 faa5 	bl	800086c <__aeabi_ddiv>
 801d322:	e9cd 0100 	strd	r0, r1, [sp]
 801d326:	f006 060f 	and.w	r6, r6, #15
 801d32a:	2503      	movs	r5, #3
 801d32c:	4f1e      	ldr	r7, [pc, #120]	; (801d3a8 <_dtoa_r+0x330>)
 801d32e:	e04c      	b.n	801d3ca <_dtoa_r+0x352>
 801d330:	2301      	movs	r3, #1
 801d332:	930a      	str	r3, [sp, #40]	; 0x28
 801d334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d336:	4453      	add	r3, sl
 801d338:	f103 0901 	add.w	r9, r3, #1
 801d33c:	9302      	str	r3, [sp, #8]
 801d33e:	464b      	mov	r3, r9
 801d340:	2b01      	cmp	r3, #1
 801d342:	bfb8      	it	lt
 801d344:	2301      	movlt	r3, #1
 801d346:	e7ba      	b.n	801d2be <_dtoa_r+0x246>
 801d348:	2300      	movs	r3, #0
 801d34a:	e7b2      	b.n	801d2b2 <_dtoa_r+0x23a>
 801d34c:	2300      	movs	r3, #0
 801d34e:	e7f0      	b.n	801d332 <_dtoa_r+0x2ba>
 801d350:	2501      	movs	r5, #1
 801d352:	2300      	movs	r3, #0
 801d354:	9306      	str	r3, [sp, #24]
 801d356:	950a      	str	r5, [sp, #40]	; 0x28
 801d358:	f04f 33ff 	mov.w	r3, #4294967295
 801d35c:	9302      	str	r3, [sp, #8]
 801d35e:	4699      	mov	r9, r3
 801d360:	2200      	movs	r2, #0
 801d362:	2312      	movs	r3, #18
 801d364:	920b      	str	r2, [sp, #44]	; 0x2c
 801d366:	e7aa      	b.n	801d2be <_dtoa_r+0x246>
 801d368:	2301      	movs	r3, #1
 801d36a:	930a      	str	r3, [sp, #40]	; 0x28
 801d36c:	e7f4      	b.n	801d358 <_dtoa_r+0x2e0>
 801d36e:	2301      	movs	r3, #1
 801d370:	9302      	str	r3, [sp, #8]
 801d372:	4699      	mov	r9, r3
 801d374:	461a      	mov	r2, r3
 801d376:	e7f5      	b.n	801d364 <_dtoa_r+0x2ec>
 801d378:	3101      	adds	r1, #1
 801d37a:	6071      	str	r1, [r6, #4]
 801d37c:	0052      	lsls	r2, r2, #1
 801d37e:	e7a2      	b.n	801d2c6 <_dtoa_r+0x24e>
 801d380:	636f4361 	.word	0x636f4361
 801d384:	3fd287a7 	.word	0x3fd287a7
 801d388:	8b60c8b3 	.word	0x8b60c8b3
 801d38c:	3fc68a28 	.word	0x3fc68a28
 801d390:	509f79fb 	.word	0x509f79fb
 801d394:	3fd34413 	.word	0x3fd34413
 801d398:	7ff00000 	.word	0x7ff00000
 801d39c:	08024b27 	.word	0x08024b27
 801d3a0:	3ff80000 	.word	0x3ff80000
 801d3a4:	08024c38 	.word	0x08024c38
 801d3a8:	08024c10 	.word	0x08024c10
 801d3ac:	08024ba9 	.word	0x08024ba9
 801d3b0:	07f1      	lsls	r1, r6, #31
 801d3b2:	d508      	bpl.n	801d3c6 <_dtoa_r+0x34e>
 801d3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3bc:	f7e3 f92c 	bl	8000618 <__aeabi_dmul>
 801d3c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d3c4:	3501      	adds	r5, #1
 801d3c6:	1076      	asrs	r6, r6, #1
 801d3c8:	3708      	adds	r7, #8
 801d3ca:	2e00      	cmp	r6, #0
 801d3cc:	d1f0      	bne.n	801d3b0 <_dtoa_r+0x338>
 801d3ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d3d6:	f7e3 fa49 	bl	800086c <__aeabi_ddiv>
 801d3da:	e9cd 0100 	strd	r0, r1, [sp]
 801d3de:	e01a      	b.n	801d416 <_dtoa_r+0x39e>
 801d3e0:	2502      	movs	r5, #2
 801d3e2:	e7a3      	b.n	801d32c <_dtoa_r+0x2b4>
 801d3e4:	f000 80a0 	beq.w	801d528 <_dtoa_r+0x4b0>
 801d3e8:	f1ca 0600 	rsb	r6, sl, #0
 801d3ec:	4b9f      	ldr	r3, [pc, #636]	; (801d66c <_dtoa_r+0x5f4>)
 801d3ee:	4fa0      	ldr	r7, [pc, #640]	; (801d670 <_dtoa_r+0x5f8>)
 801d3f0:	f006 020f 	and.w	r2, r6, #15
 801d3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d400:	f7e3 f90a 	bl	8000618 <__aeabi_dmul>
 801d404:	e9cd 0100 	strd	r0, r1, [sp]
 801d408:	1136      	asrs	r6, r6, #4
 801d40a:	2300      	movs	r3, #0
 801d40c:	2502      	movs	r5, #2
 801d40e:	2e00      	cmp	r6, #0
 801d410:	d17f      	bne.n	801d512 <_dtoa_r+0x49a>
 801d412:	2b00      	cmp	r3, #0
 801d414:	d1e1      	bne.n	801d3da <_dtoa_r+0x362>
 801d416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d418:	2b00      	cmp	r3, #0
 801d41a:	f000 8087 	beq.w	801d52c <_dtoa_r+0x4b4>
 801d41e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d422:	2200      	movs	r2, #0
 801d424:	4b93      	ldr	r3, [pc, #588]	; (801d674 <_dtoa_r+0x5fc>)
 801d426:	4630      	mov	r0, r6
 801d428:	4639      	mov	r1, r7
 801d42a:	f7e3 fb67 	bl	8000afc <__aeabi_dcmplt>
 801d42e:	2800      	cmp	r0, #0
 801d430:	d07c      	beq.n	801d52c <_dtoa_r+0x4b4>
 801d432:	f1b9 0f00 	cmp.w	r9, #0
 801d436:	d079      	beq.n	801d52c <_dtoa_r+0x4b4>
 801d438:	9b02      	ldr	r3, [sp, #8]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	dd35      	ble.n	801d4aa <_dtoa_r+0x432>
 801d43e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d442:	9308      	str	r3, [sp, #32]
 801d444:	4639      	mov	r1, r7
 801d446:	2200      	movs	r2, #0
 801d448:	4b8b      	ldr	r3, [pc, #556]	; (801d678 <_dtoa_r+0x600>)
 801d44a:	4630      	mov	r0, r6
 801d44c:	f7e3 f8e4 	bl	8000618 <__aeabi_dmul>
 801d450:	e9cd 0100 	strd	r0, r1, [sp]
 801d454:	9f02      	ldr	r7, [sp, #8]
 801d456:	3501      	adds	r5, #1
 801d458:	4628      	mov	r0, r5
 801d45a:	f7e3 f873 	bl	8000544 <__aeabi_i2d>
 801d45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d462:	f7e3 f8d9 	bl	8000618 <__aeabi_dmul>
 801d466:	2200      	movs	r2, #0
 801d468:	4b84      	ldr	r3, [pc, #528]	; (801d67c <_dtoa_r+0x604>)
 801d46a:	f7e2 ff1f 	bl	80002ac <__adddf3>
 801d46e:	4605      	mov	r5, r0
 801d470:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801d474:	2f00      	cmp	r7, #0
 801d476:	d15d      	bne.n	801d534 <_dtoa_r+0x4bc>
 801d478:	2200      	movs	r2, #0
 801d47a:	4b81      	ldr	r3, [pc, #516]	; (801d680 <_dtoa_r+0x608>)
 801d47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d480:	f7e2 ff12 	bl	80002a8 <__aeabi_dsub>
 801d484:	462a      	mov	r2, r5
 801d486:	4633      	mov	r3, r6
 801d488:	e9cd 0100 	strd	r0, r1, [sp]
 801d48c:	f7e3 fb54 	bl	8000b38 <__aeabi_dcmpgt>
 801d490:	2800      	cmp	r0, #0
 801d492:	f040 8288 	bne.w	801d9a6 <_dtoa_r+0x92e>
 801d496:	462a      	mov	r2, r5
 801d498:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4a0:	f7e3 fb2c 	bl	8000afc <__aeabi_dcmplt>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	f040 827c 	bne.w	801d9a2 <_dtoa_r+0x92a>
 801d4aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d4ae:	e9cd 2300 	strd	r2, r3, [sp]
 801d4b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f2c0 8150 	blt.w	801d75a <_dtoa_r+0x6e2>
 801d4ba:	f1ba 0f0e 	cmp.w	sl, #14
 801d4be:	f300 814c 	bgt.w	801d75a <_dtoa_r+0x6e2>
 801d4c2:	4b6a      	ldr	r3, [pc, #424]	; (801d66c <_dtoa_r+0x5f4>)
 801d4c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d4c8:	ed93 7b00 	vldr	d7, [r3]
 801d4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d4d4:	f280 80d8 	bge.w	801d688 <_dtoa_r+0x610>
 801d4d8:	f1b9 0f00 	cmp.w	r9, #0
 801d4dc:	f300 80d4 	bgt.w	801d688 <_dtoa_r+0x610>
 801d4e0:	f040 825e 	bne.w	801d9a0 <_dtoa_r+0x928>
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	4b66      	ldr	r3, [pc, #408]	; (801d680 <_dtoa_r+0x608>)
 801d4e8:	ec51 0b17 	vmov	r0, r1, d7
 801d4ec:	f7e3 f894 	bl	8000618 <__aeabi_dmul>
 801d4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d4f4:	f7e3 fb16 	bl	8000b24 <__aeabi_dcmpge>
 801d4f8:	464f      	mov	r7, r9
 801d4fa:	464e      	mov	r6, r9
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	f040 8234 	bne.w	801d96a <_dtoa_r+0x8f2>
 801d502:	2331      	movs	r3, #49	; 0x31
 801d504:	f10b 0501 	add.w	r5, fp, #1
 801d508:	f88b 3000 	strb.w	r3, [fp]
 801d50c:	f10a 0a01 	add.w	sl, sl, #1
 801d510:	e22f      	b.n	801d972 <_dtoa_r+0x8fa>
 801d512:	07f2      	lsls	r2, r6, #31
 801d514:	d505      	bpl.n	801d522 <_dtoa_r+0x4aa>
 801d516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d51a:	f7e3 f87d 	bl	8000618 <__aeabi_dmul>
 801d51e:	3501      	adds	r5, #1
 801d520:	2301      	movs	r3, #1
 801d522:	1076      	asrs	r6, r6, #1
 801d524:	3708      	adds	r7, #8
 801d526:	e772      	b.n	801d40e <_dtoa_r+0x396>
 801d528:	2502      	movs	r5, #2
 801d52a:	e774      	b.n	801d416 <_dtoa_r+0x39e>
 801d52c:	f8cd a020 	str.w	sl, [sp, #32]
 801d530:	464f      	mov	r7, r9
 801d532:	e791      	b.n	801d458 <_dtoa_r+0x3e0>
 801d534:	4b4d      	ldr	r3, [pc, #308]	; (801d66c <_dtoa_r+0x5f4>)
 801d536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d53a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801d53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d540:	2b00      	cmp	r3, #0
 801d542:	d047      	beq.n	801d5d4 <_dtoa_r+0x55c>
 801d544:	4602      	mov	r2, r0
 801d546:	460b      	mov	r3, r1
 801d548:	2000      	movs	r0, #0
 801d54a:	494e      	ldr	r1, [pc, #312]	; (801d684 <_dtoa_r+0x60c>)
 801d54c:	f7e3 f98e 	bl	800086c <__aeabi_ddiv>
 801d550:	462a      	mov	r2, r5
 801d552:	4633      	mov	r3, r6
 801d554:	f7e2 fea8 	bl	80002a8 <__aeabi_dsub>
 801d558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d55c:	465d      	mov	r5, fp
 801d55e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d562:	f7e3 fb09 	bl	8000b78 <__aeabi_d2iz>
 801d566:	4606      	mov	r6, r0
 801d568:	f7e2 ffec 	bl	8000544 <__aeabi_i2d>
 801d56c:	4602      	mov	r2, r0
 801d56e:	460b      	mov	r3, r1
 801d570:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d574:	f7e2 fe98 	bl	80002a8 <__aeabi_dsub>
 801d578:	3630      	adds	r6, #48	; 0x30
 801d57a:	f805 6b01 	strb.w	r6, [r5], #1
 801d57e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d582:	e9cd 0100 	strd	r0, r1, [sp]
 801d586:	f7e3 fab9 	bl	8000afc <__aeabi_dcmplt>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	d163      	bne.n	801d656 <_dtoa_r+0x5de>
 801d58e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d592:	2000      	movs	r0, #0
 801d594:	4937      	ldr	r1, [pc, #220]	; (801d674 <_dtoa_r+0x5fc>)
 801d596:	f7e2 fe87 	bl	80002a8 <__aeabi_dsub>
 801d59a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d59e:	f7e3 faad 	bl	8000afc <__aeabi_dcmplt>
 801d5a2:	2800      	cmp	r0, #0
 801d5a4:	f040 80b7 	bne.w	801d716 <_dtoa_r+0x69e>
 801d5a8:	eba5 030b 	sub.w	r3, r5, fp
 801d5ac:	429f      	cmp	r7, r3
 801d5ae:	f77f af7c 	ble.w	801d4aa <_dtoa_r+0x432>
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	4b30      	ldr	r3, [pc, #192]	; (801d678 <_dtoa_r+0x600>)
 801d5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d5ba:	f7e3 f82d 	bl	8000618 <__aeabi_dmul>
 801d5be:	2200      	movs	r2, #0
 801d5c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d5c4:	4b2c      	ldr	r3, [pc, #176]	; (801d678 <_dtoa_r+0x600>)
 801d5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d5ca:	f7e3 f825 	bl	8000618 <__aeabi_dmul>
 801d5ce:	e9cd 0100 	strd	r0, r1, [sp]
 801d5d2:	e7c4      	b.n	801d55e <_dtoa_r+0x4e6>
 801d5d4:	462a      	mov	r2, r5
 801d5d6:	4633      	mov	r3, r6
 801d5d8:	f7e3 f81e 	bl	8000618 <__aeabi_dmul>
 801d5dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d5e0:	eb0b 0507 	add.w	r5, fp, r7
 801d5e4:	465e      	mov	r6, fp
 801d5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d5ea:	f7e3 fac5 	bl	8000b78 <__aeabi_d2iz>
 801d5ee:	4607      	mov	r7, r0
 801d5f0:	f7e2 ffa8 	bl	8000544 <__aeabi_i2d>
 801d5f4:	3730      	adds	r7, #48	; 0x30
 801d5f6:	4602      	mov	r2, r0
 801d5f8:	460b      	mov	r3, r1
 801d5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d5fe:	f7e2 fe53 	bl	80002a8 <__aeabi_dsub>
 801d602:	f806 7b01 	strb.w	r7, [r6], #1
 801d606:	42ae      	cmp	r6, r5
 801d608:	e9cd 0100 	strd	r0, r1, [sp]
 801d60c:	f04f 0200 	mov.w	r2, #0
 801d610:	d126      	bne.n	801d660 <_dtoa_r+0x5e8>
 801d612:	4b1c      	ldr	r3, [pc, #112]	; (801d684 <_dtoa_r+0x60c>)
 801d614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d618:	f7e2 fe48 	bl	80002ac <__adddf3>
 801d61c:	4602      	mov	r2, r0
 801d61e:	460b      	mov	r3, r1
 801d620:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d624:	f7e3 fa88 	bl	8000b38 <__aeabi_dcmpgt>
 801d628:	2800      	cmp	r0, #0
 801d62a:	d174      	bne.n	801d716 <_dtoa_r+0x69e>
 801d62c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d630:	2000      	movs	r0, #0
 801d632:	4914      	ldr	r1, [pc, #80]	; (801d684 <_dtoa_r+0x60c>)
 801d634:	f7e2 fe38 	bl	80002a8 <__aeabi_dsub>
 801d638:	4602      	mov	r2, r0
 801d63a:	460b      	mov	r3, r1
 801d63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d640:	f7e3 fa5c 	bl	8000afc <__aeabi_dcmplt>
 801d644:	2800      	cmp	r0, #0
 801d646:	f43f af30 	beq.w	801d4aa <_dtoa_r+0x432>
 801d64a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d64e:	2b30      	cmp	r3, #48	; 0x30
 801d650:	f105 32ff 	add.w	r2, r5, #4294967295
 801d654:	d002      	beq.n	801d65c <_dtoa_r+0x5e4>
 801d656:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d65a:	e04a      	b.n	801d6f2 <_dtoa_r+0x67a>
 801d65c:	4615      	mov	r5, r2
 801d65e:	e7f4      	b.n	801d64a <_dtoa_r+0x5d2>
 801d660:	4b05      	ldr	r3, [pc, #20]	; (801d678 <_dtoa_r+0x600>)
 801d662:	f7e2 ffd9 	bl	8000618 <__aeabi_dmul>
 801d666:	e9cd 0100 	strd	r0, r1, [sp]
 801d66a:	e7bc      	b.n	801d5e6 <_dtoa_r+0x56e>
 801d66c:	08024c38 	.word	0x08024c38
 801d670:	08024c10 	.word	0x08024c10
 801d674:	3ff00000 	.word	0x3ff00000
 801d678:	40240000 	.word	0x40240000
 801d67c:	401c0000 	.word	0x401c0000
 801d680:	40140000 	.word	0x40140000
 801d684:	3fe00000 	.word	0x3fe00000
 801d688:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d68c:	465d      	mov	r5, fp
 801d68e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d692:	4630      	mov	r0, r6
 801d694:	4639      	mov	r1, r7
 801d696:	f7e3 f8e9 	bl	800086c <__aeabi_ddiv>
 801d69a:	f7e3 fa6d 	bl	8000b78 <__aeabi_d2iz>
 801d69e:	4680      	mov	r8, r0
 801d6a0:	f7e2 ff50 	bl	8000544 <__aeabi_i2d>
 801d6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6a8:	f7e2 ffb6 	bl	8000618 <__aeabi_dmul>
 801d6ac:	4602      	mov	r2, r0
 801d6ae:	460b      	mov	r3, r1
 801d6b0:	4630      	mov	r0, r6
 801d6b2:	4639      	mov	r1, r7
 801d6b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801d6b8:	f7e2 fdf6 	bl	80002a8 <__aeabi_dsub>
 801d6bc:	f805 6b01 	strb.w	r6, [r5], #1
 801d6c0:	eba5 060b 	sub.w	r6, r5, fp
 801d6c4:	45b1      	cmp	r9, r6
 801d6c6:	4602      	mov	r2, r0
 801d6c8:	460b      	mov	r3, r1
 801d6ca:	d139      	bne.n	801d740 <_dtoa_r+0x6c8>
 801d6cc:	f7e2 fdee 	bl	80002ac <__adddf3>
 801d6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6d4:	4606      	mov	r6, r0
 801d6d6:	460f      	mov	r7, r1
 801d6d8:	f7e3 fa2e 	bl	8000b38 <__aeabi_dcmpgt>
 801d6dc:	b9c8      	cbnz	r0, 801d712 <_dtoa_r+0x69a>
 801d6de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d6e2:	4630      	mov	r0, r6
 801d6e4:	4639      	mov	r1, r7
 801d6e6:	f7e3 f9ff 	bl	8000ae8 <__aeabi_dcmpeq>
 801d6ea:	b110      	cbz	r0, 801d6f2 <_dtoa_r+0x67a>
 801d6ec:	f018 0f01 	tst.w	r8, #1
 801d6f0:	d10f      	bne.n	801d712 <_dtoa_r+0x69a>
 801d6f2:	9904      	ldr	r1, [sp, #16]
 801d6f4:	4620      	mov	r0, r4
 801d6f6:	f000 fead 	bl	801e454 <_Bfree>
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6fe:	702b      	strb	r3, [r5, #0]
 801d700:	f10a 0301 	add.w	r3, sl, #1
 801d704:	6013      	str	r3, [r2, #0]
 801d706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d708:	2b00      	cmp	r3, #0
 801d70a:	f000 8241 	beq.w	801db90 <_dtoa_r+0xb18>
 801d70e:	601d      	str	r5, [r3, #0]
 801d710:	e23e      	b.n	801db90 <_dtoa_r+0xb18>
 801d712:	f8cd a020 	str.w	sl, [sp, #32]
 801d716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d71a:	2a39      	cmp	r2, #57	; 0x39
 801d71c:	f105 33ff 	add.w	r3, r5, #4294967295
 801d720:	d108      	bne.n	801d734 <_dtoa_r+0x6bc>
 801d722:	459b      	cmp	fp, r3
 801d724:	d10a      	bne.n	801d73c <_dtoa_r+0x6c4>
 801d726:	9b08      	ldr	r3, [sp, #32]
 801d728:	3301      	adds	r3, #1
 801d72a:	9308      	str	r3, [sp, #32]
 801d72c:	2330      	movs	r3, #48	; 0x30
 801d72e:	f88b 3000 	strb.w	r3, [fp]
 801d732:	465b      	mov	r3, fp
 801d734:	781a      	ldrb	r2, [r3, #0]
 801d736:	3201      	adds	r2, #1
 801d738:	701a      	strb	r2, [r3, #0]
 801d73a:	e78c      	b.n	801d656 <_dtoa_r+0x5de>
 801d73c:	461d      	mov	r5, r3
 801d73e:	e7ea      	b.n	801d716 <_dtoa_r+0x69e>
 801d740:	2200      	movs	r2, #0
 801d742:	4b9b      	ldr	r3, [pc, #620]	; (801d9b0 <_dtoa_r+0x938>)
 801d744:	f7e2 ff68 	bl	8000618 <__aeabi_dmul>
 801d748:	2200      	movs	r2, #0
 801d74a:	2300      	movs	r3, #0
 801d74c:	4606      	mov	r6, r0
 801d74e:	460f      	mov	r7, r1
 801d750:	f7e3 f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 801d754:	2800      	cmp	r0, #0
 801d756:	d09a      	beq.n	801d68e <_dtoa_r+0x616>
 801d758:	e7cb      	b.n	801d6f2 <_dtoa_r+0x67a>
 801d75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d75c:	2a00      	cmp	r2, #0
 801d75e:	f000 808b 	beq.w	801d878 <_dtoa_r+0x800>
 801d762:	9a06      	ldr	r2, [sp, #24]
 801d764:	2a01      	cmp	r2, #1
 801d766:	dc6e      	bgt.n	801d846 <_dtoa_r+0x7ce>
 801d768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d76a:	2a00      	cmp	r2, #0
 801d76c:	d067      	beq.n	801d83e <_dtoa_r+0x7c6>
 801d76e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d772:	9f07      	ldr	r7, [sp, #28]
 801d774:	9d05      	ldr	r5, [sp, #20]
 801d776:	9a05      	ldr	r2, [sp, #20]
 801d778:	2101      	movs	r1, #1
 801d77a:	441a      	add	r2, r3
 801d77c:	4620      	mov	r0, r4
 801d77e:	9205      	str	r2, [sp, #20]
 801d780:	4498      	add	r8, r3
 801d782:	f000 ff45 	bl	801e610 <__i2b>
 801d786:	4606      	mov	r6, r0
 801d788:	2d00      	cmp	r5, #0
 801d78a:	dd0c      	ble.n	801d7a6 <_dtoa_r+0x72e>
 801d78c:	f1b8 0f00 	cmp.w	r8, #0
 801d790:	dd09      	ble.n	801d7a6 <_dtoa_r+0x72e>
 801d792:	4545      	cmp	r5, r8
 801d794:	9a05      	ldr	r2, [sp, #20]
 801d796:	462b      	mov	r3, r5
 801d798:	bfa8      	it	ge
 801d79a:	4643      	movge	r3, r8
 801d79c:	1ad2      	subs	r2, r2, r3
 801d79e:	9205      	str	r2, [sp, #20]
 801d7a0:	1aed      	subs	r5, r5, r3
 801d7a2:	eba8 0803 	sub.w	r8, r8, r3
 801d7a6:	9b07      	ldr	r3, [sp, #28]
 801d7a8:	b1eb      	cbz	r3, 801d7e6 <_dtoa_r+0x76e>
 801d7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d067      	beq.n	801d880 <_dtoa_r+0x808>
 801d7b0:	b18f      	cbz	r7, 801d7d6 <_dtoa_r+0x75e>
 801d7b2:	4631      	mov	r1, r6
 801d7b4:	463a      	mov	r2, r7
 801d7b6:	4620      	mov	r0, r4
 801d7b8:	f000 ffca 	bl	801e750 <__pow5mult>
 801d7bc:	9a04      	ldr	r2, [sp, #16]
 801d7be:	4601      	mov	r1, r0
 801d7c0:	4606      	mov	r6, r0
 801d7c2:	4620      	mov	r0, r4
 801d7c4:	f000 ff2d 	bl	801e622 <__multiply>
 801d7c8:	9904      	ldr	r1, [sp, #16]
 801d7ca:	9008      	str	r0, [sp, #32]
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f000 fe41 	bl	801e454 <_Bfree>
 801d7d2:	9b08      	ldr	r3, [sp, #32]
 801d7d4:	9304      	str	r3, [sp, #16]
 801d7d6:	9b07      	ldr	r3, [sp, #28]
 801d7d8:	1bda      	subs	r2, r3, r7
 801d7da:	d004      	beq.n	801d7e6 <_dtoa_r+0x76e>
 801d7dc:	9904      	ldr	r1, [sp, #16]
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f000 ffb6 	bl	801e750 <__pow5mult>
 801d7e4:	9004      	str	r0, [sp, #16]
 801d7e6:	2101      	movs	r1, #1
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	f000 ff11 	bl	801e610 <__i2b>
 801d7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7f0:	4607      	mov	r7, r0
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	f000 81d0 	beq.w	801db98 <_dtoa_r+0xb20>
 801d7f8:	461a      	mov	r2, r3
 801d7fa:	4601      	mov	r1, r0
 801d7fc:	4620      	mov	r0, r4
 801d7fe:	f000 ffa7 	bl	801e750 <__pow5mult>
 801d802:	9b06      	ldr	r3, [sp, #24]
 801d804:	2b01      	cmp	r3, #1
 801d806:	4607      	mov	r7, r0
 801d808:	dc40      	bgt.n	801d88c <_dtoa_r+0x814>
 801d80a:	9b00      	ldr	r3, [sp, #0]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d139      	bne.n	801d884 <_dtoa_r+0x80c>
 801d810:	9b01      	ldr	r3, [sp, #4]
 801d812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d816:	2b00      	cmp	r3, #0
 801d818:	d136      	bne.n	801d888 <_dtoa_r+0x810>
 801d81a:	9b01      	ldr	r3, [sp, #4]
 801d81c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d820:	0d1b      	lsrs	r3, r3, #20
 801d822:	051b      	lsls	r3, r3, #20
 801d824:	b12b      	cbz	r3, 801d832 <_dtoa_r+0x7ba>
 801d826:	9b05      	ldr	r3, [sp, #20]
 801d828:	3301      	adds	r3, #1
 801d82a:	9305      	str	r3, [sp, #20]
 801d82c:	f108 0801 	add.w	r8, r8, #1
 801d830:	2301      	movs	r3, #1
 801d832:	9307      	str	r3, [sp, #28]
 801d834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d836:	2b00      	cmp	r3, #0
 801d838:	d12a      	bne.n	801d890 <_dtoa_r+0x818>
 801d83a:	2001      	movs	r0, #1
 801d83c:	e030      	b.n	801d8a0 <_dtoa_r+0x828>
 801d83e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d840:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d844:	e795      	b.n	801d772 <_dtoa_r+0x6fa>
 801d846:	9b07      	ldr	r3, [sp, #28]
 801d848:	f109 37ff 	add.w	r7, r9, #4294967295
 801d84c:	42bb      	cmp	r3, r7
 801d84e:	bfbf      	itttt	lt
 801d850:	9b07      	ldrlt	r3, [sp, #28]
 801d852:	9707      	strlt	r7, [sp, #28]
 801d854:	1afa      	sublt	r2, r7, r3
 801d856:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801d858:	bfbb      	ittet	lt
 801d85a:	189b      	addlt	r3, r3, r2
 801d85c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d85e:	1bdf      	subge	r7, r3, r7
 801d860:	2700      	movlt	r7, #0
 801d862:	f1b9 0f00 	cmp.w	r9, #0
 801d866:	bfb5      	itete	lt
 801d868:	9b05      	ldrlt	r3, [sp, #20]
 801d86a:	9d05      	ldrge	r5, [sp, #20]
 801d86c:	eba3 0509 	sublt.w	r5, r3, r9
 801d870:	464b      	movge	r3, r9
 801d872:	bfb8      	it	lt
 801d874:	2300      	movlt	r3, #0
 801d876:	e77e      	b.n	801d776 <_dtoa_r+0x6fe>
 801d878:	9f07      	ldr	r7, [sp, #28]
 801d87a:	9d05      	ldr	r5, [sp, #20]
 801d87c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d87e:	e783      	b.n	801d788 <_dtoa_r+0x710>
 801d880:	9a07      	ldr	r2, [sp, #28]
 801d882:	e7ab      	b.n	801d7dc <_dtoa_r+0x764>
 801d884:	2300      	movs	r3, #0
 801d886:	e7d4      	b.n	801d832 <_dtoa_r+0x7ba>
 801d888:	9b00      	ldr	r3, [sp, #0]
 801d88a:	e7d2      	b.n	801d832 <_dtoa_r+0x7ba>
 801d88c:	2300      	movs	r3, #0
 801d88e:	9307      	str	r3, [sp, #28]
 801d890:	693b      	ldr	r3, [r7, #16]
 801d892:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801d896:	6918      	ldr	r0, [r3, #16]
 801d898:	f000 fe6c 	bl	801e574 <__hi0bits>
 801d89c:	f1c0 0020 	rsb	r0, r0, #32
 801d8a0:	4440      	add	r0, r8
 801d8a2:	f010 001f 	ands.w	r0, r0, #31
 801d8a6:	d047      	beq.n	801d938 <_dtoa_r+0x8c0>
 801d8a8:	f1c0 0320 	rsb	r3, r0, #32
 801d8ac:	2b04      	cmp	r3, #4
 801d8ae:	dd3b      	ble.n	801d928 <_dtoa_r+0x8b0>
 801d8b0:	9b05      	ldr	r3, [sp, #20]
 801d8b2:	f1c0 001c 	rsb	r0, r0, #28
 801d8b6:	4403      	add	r3, r0
 801d8b8:	9305      	str	r3, [sp, #20]
 801d8ba:	4405      	add	r5, r0
 801d8bc:	4480      	add	r8, r0
 801d8be:	9b05      	ldr	r3, [sp, #20]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	dd05      	ble.n	801d8d0 <_dtoa_r+0x858>
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	9904      	ldr	r1, [sp, #16]
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f000 ff8f 	bl	801e7ec <__lshift>
 801d8ce:	9004      	str	r0, [sp, #16]
 801d8d0:	f1b8 0f00 	cmp.w	r8, #0
 801d8d4:	dd05      	ble.n	801d8e2 <_dtoa_r+0x86a>
 801d8d6:	4639      	mov	r1, r7
 801d8d8:	4642      	mov	r2, r8
 801d8da:	4620      	mov	r0, r4
 801d8dc:	f000 ff86 	bl	801e7ec <__lshift>
 801d8e0:	4607      	mov	r7, r0
 801d8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8e4:	b353      	cbz	r3, 801d93c <_dtoa_r+0x8c4>
 801d8e6:	4639      	mov	r1, r7
 801d8e8:	9804      	ldr	r0, [sp, #16]
 801d8ea:	f000 ffd3 	bl	801e894 <__mcmp>
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	da24      	bge.n	801d93c <_dtoa_r+0x8c4>
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	220a      	movs	r2, #10
 801d8f6:	9904      	ldr	r1, [sp, #16]
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f000 fdc2 	bl	801e482 <__multadd>
 801d8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d900:	9004      	str	r0, [sp, #16]
 801d902:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d906:	2b00      	cmp	r3, #0
 801d908:	f000 814d 	beq.w	801dba6 <_dtoa_r+0xb2e>
 801d90c:	2300      	movs	r3, #0
 801d90e:	4631      	mov	r1, r6
 801d910:	220a      	movs	r2, #10
 801d912:	4620      	mov	r0, r4
 801d914:	f000 fdb5 	bl	801e482 <__multadd>
 801d918:	9b02      	ldr	r3, [sp, #8]
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	4606      	mov	r6, r0
 801d91e:	dc4f      	bgt.n	801d9c0 <_dtoa_r+0x948>
 801d920:	9b06      	ldr	r3, [sp, #24]
 801d922:	2b02      	cmp	r3, #2
 801d924:	dd4c      	ble.n	801d9c0 <_dtoa_r+0x948>
 801d926:	e011      	b.n	801d94c <_dtoa_r+0x8d4>
 801d928:	d0c9      	beq.n	801d8be <_dtoa_r+0x846>
 801d92a:	9a05      	ldr	r2, [sp, #20]
 801d92c:	331c      	adds	r3, #28
 801d92e:	441a      	add	r2, r3
 801d930:	9205      	str	r2, [sp, #20]
 801d932:	441d      	add	r5, r3
 801d934:	4498      	add	r8, r3
 801d936:	e7c2      	b.n	801d8be <_dtoa_r+0x846>
 801d938:	4603      	mov	r3, r0
 801d93a:	e7f6      	b.n	801d92a <_dtoa_r+0x8b2>
 801d93c:	f1b9 0f00 	cmp.w	r9, #0
 801d940:	dc38      	bgt.n	801d9b4 <_dtoa_r+0x93c>
 801d942:	9b06      	ldr	r3, [sp, #24]
 801d944:	2b02      	cmp	r3, #2
 801d946:	dd35      	ble.n	801d9b4 <_dtoa_r+0x93c>
 801d948:	f8cd 9008 	str.w	r9, [sp, #8]
 801d94c:	9b02      	ldr	r3, [sp, #8]
 801d94e:	b963      	cbnz	r3, 801d96a <_dtoa_r+0x8f2>
 801d950:	4639      	mov	r1, r7
 801d952:	2205      	movs	r2, #5
 801d954:	4620      	mov	r0, r4
 801d956:	f000 fd94 	bl	801e482 <__multadd>
 801d95a:	4601      	mov	r1, r0
 801d95c:	4607      	mov	r7, r0
 801d95e:	9804      	ldr	r0, [sp, #16]
 801d960:	f000 ff98 	bl	801e894 <__mcmp>
 801d964:	2800      	cmp	r0, #0
 801d966:	f73f adcc 	bgt.w	801d502 <_dtoa_r+0x48a>
 801d96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d96c:	465d      	mov	r5, fp
 801d96e:	ea6f 0a03 	mvn.w	sl, r3
 801d972:	f04f 0900 	mov.w	r9, #0
 801d976:	4639      	mov	r1, r7
 801d978:	4620      	mov	r0, r4
 801d97a:	f000 fd6b 	bl	801e454 <_Bfree>
 801d97e:	2e00      	cmp	r6, #0
 801d980:	f43f aeb7 	beq.w	801d6f2 <_dtoa_r+0x67a>
 801d984:	f1b9 0f00 	cmp.w	r9, #0
 801d988:	d005      	beq.n	801d996 <_dtoa_r+0x91e>
 801d98a:	45b1      	cmp	r9, r6
 801d98c:	d003      	beq.n	801d996 <_dtoa_r+0x91e>
 801d98e:	4649      	mov	r1, r9
 801d990:	4620      	mov	r0, r4
 801d992:	f000 fd5f 	bl	801e454 <_Bfree>
 801d996:	4631      	mov	r1, r6
 801d998:	4620      	mov	r0, r4
 801d99a:	f000 fd5b 	bl	801e454 <_Bfree>
 801d99e:	e6a8      	b.n	801d6f2 <_dtoa_r+0x67a>
 801d9a0:	2700      	movs	r7, #0
 801d9a2:	463e      	mov	r6, r7
 801d9a4:	e7e1      	b.n	801d96a <_dtoa_r+0x8f2>
 801d9a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d9aa:	463e      	mov	r6, r7
 801d9ac:	e5a9      	b.n	801d502 <_dtoa_r+0x48a>
 801d9ae:	bf00      	nop
 801d9b0:	40240000 	.word	0x40240000
 801d9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9b6:	f8cd 9008 	str.w	r9, [sp, #8]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	f000 80fa 	beq.w	801dbb4 <_dtoa_r+0xb3c>
 801d9c0:	2d00      	cmp	r5, #0
 801d9c2:	dd05      	ble.n	801d9d0 <_dtoa_r+0x958>
 801d9c4:	4631      	mov	r1, r6
 801d9c6:	462a      	mov	r2, r5
 801d9c8:	4620      	mov	r0, r4
 801d9ca:	f000 ff0f 	bl	801e7ec <__lshift>
 801d9ce:	4606      	mov	r6, r0
 801d9d0:	9b07      	ldr	r3, [sp, #28]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d04c      	beq.n	801da70 <_dtoa_r+0x9f8>
 801d9d6:	6871      	ldr	r1, [r6, #4]
 801d9d8:	4620      	mov	r0, r4
 801d9da:	f000 fd07 	bl	801e3ec <_Balloc>
 801d9de:	6932      	ldr	r2, [r6, #16]
 801d9e0:	3202      	adds	r2, #2
 801d9e2:	4605      	mov	r5, r0
 801d9e4:	0092      	lsls	r2, r2, #2
 801d9e6:	f106 010c 	add.w	r1, r6, #12
 801d9ea:	300c      	adds	r0, #12
 801d9ec:	f7fd fde7 	bl	801b5be <memcpy>
 801d9f0:	2201      	movs	r2, #1
 801d9f2:	4629      	mov	r1, r5
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	f000 fef9 	bl	801e7ec <__lshift>
 801d9fa:	9b00      	ldr	r3, [sp, #0]
 801d9fc:	f8cd b014 	str.w	fp, [sp, #20]
 801da00:	f003 0301 	and.w	r3, r3, #1
 801da04:	46b1      	mov	r9, r6
 801da06:	9307      	str	r3, [sp, #28]
 801da08:	4606      	mov	r6, r0
 801da0a:	4639      	mov	r1, r7
 801da0c:	9804      	ldr	r0, [sp, #16]
 801da0e:	f7ff faa6 	bl	801cf5e <quorem>
 801da12:	4649      	mov	r1, r9
 801da14:	4605      	mov	r5, r0
 801da16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801da1a:	9804      	ldr	r0, [sp, #16]
 801da1c:	f000 ff3a 	bl	801e894 <__mcmp>
 801da20:	4632      	mov	r2, r6
 801da22:	9000      	str	r0, [sp, #0]
 801da24:	4639      	mov	r1, r7
 801da26:	4620      	mov	r0, r4
 801da28:	f000 ff4e 	bl	801e8c8 <__mdiff>
 801da2c:	68c3      	ldr	r3, [r0, #12]
 801da2e:	4602      	mov	r2, r0
 801da30:	bb03      	cbnz	r3, 801da74 <_dtoa_r+0x9fc>
 801da32:	4601      	mov	r1, r0
 801da34:	9008      	str	r0, [sp, #32]
 801da36:	9804      	ldr	r0, [sp, #16]
 801da38:	f000 ff2c 	bl	801e894 <__mcmp>
 801da3c:	9a08      	ldr	r2, [sp, #32]
 801da3e:	4603      	mov	r3, r0
 801da40:	4611      	mov	r1, r2
 801da42:	4620      	mov	r0, r4
 801da44:	9308      	str	r3, [sp, #32]
 801da46:	f000 fd05 	bl	801e454 <_Bfree>
 801da4a:	9b08      	ldr	r3, [sp, #32]
 801da4c:	b9a3      	cbnz	r3, 801da78 <_dtoa_r+0xa00>
 801da4e:	9a06      	ldr	r2, [sp, #24]
 801da50:	b992      	cbnz	r2, 801da78 <_dtoa_r+0xa00>
 801da52:	9a07      	ldr	r2, [sp, #28]
 801da54:	b982      	cbnz	r2, 801da78 <_dtoa_r+0xa00>
 801da56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801da5a:	d029      	beq.n	801dab0 <_dtoa_r+0xa38>
 801da5c:	9b00      	ldr	r3, [sp, #0]
 801da5e:	2b00      	cmp	r3, #0
 801da60:	dd01      	ble.n	801da66 <_dtoa_r+0x9ee>
 801da62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801da66:	9b05      	ldr	r3, [sp, #20]
 801da68:	1c5d      	adds	r5, r3, #1
 801da6a:	f883 8000 	strb.w	r8, [r3]
 801da6e:	e782      	b.n	801d976 <_dtoa_r+0x8fe>
 801da70:	4630      	mov	r0, r6
 801da72:	e7c2      	b.n	801d9fa <_dtoa_r+0x982>
 801da74:	2301      	movs	r3, #1
 801da76:	e7e3      	b.n	801da40 <_dtoa_r+0x9c8>
 801da78:	9a00      	ldr	r2, [sp, #0]
 801da7a:	2a00      	cmp	r2, #0
 801da7c:	db04      	blt.n	801da88 <_dtoa_r+0xa10>
 801da7e:	d125      	bne.n	801dacc <_dtoa_r+0xa54>
 801da80:	9a06      	ldr	r2, [sp, #24]
 801da82:	bb1a      	cbnz	r2, 801dacc <_dtoa_r+0xa54>
 801da84:	9a07      	ldr	r2, [sp, #28]
 801da86:	bb0a      	cbnz	r2, 801dacc <_dtoa_r+0xa54>
 801da88:	2b00      	cmp	r3, #0
 801da8a:	ddec      	ble.n	801da66 <_dtoa_r+0x9ee>
 801da8c:	2201      	movs	r2, #1
 801da8e:	9904      	ldr	r1, [sp, #16]
 801da90:	4620      	mov	r0, r4
 801da92:	f000 feab 	bl	801e7ec <__lshift>
 801da96:	4639      	mov	r1, r7
 801da98:	9004      	str	r0, [sp, #16]
 801da9a:	f000 fefb 	bl	801e894 <__mcmp>
 801da9e:	2800      	cmp	r0, #0
 801daa0:	dc03      	bgt.n	801daaa <_dtoa_r+0xa32>
 801daa2:	d1e0      	bne.n	801da66 <_dtoa_r+0x9ee>
 801daa4:	f018 0f01 	tst.w	r8, #1
 801daa8:	d0dd      	beq.n	801da66 <_dtoa_r+0x9ee>
 801daaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801daae:	d1d8      	bne.n	801da62 <_dtoa_r+0x9ea>
 801dab0:	9b05      	ldr	r3, [sp, #20]
 801dab2:	9a05      	ldr	r2, [sp, #20]
 801dab4:	1c5d      	adds	r5, r3, #1
 801dab6:	2339      	movs	r3, #57	; 0x39
 801dab8:	7013      	strb	r3, [r2, #0]
 801daba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dabe:	2b39      	cmp	r3, #57	; 0x39
 801dac0:	f105 32ff 	add.w	r2, r5, #4294967295
 801dac4:	d04f      	beq.n	801db66 <_dtoa_r+0xaee>
 801dac6:	3301      	adds	r3, #1
 801dac8:	7013      	strb	r3, [r2, #0]
 801daca:	e754      	b.n	801d976 <_dtoa_r+0x8fe>
 801dacc:	9a05      	ldr	r2, [sp, #20]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	f102 0501 	add.w	r5, r2, #1
 801dad4:	dd06      	ble.n	801dae4 <_dtoa_r+0xa6c>
 801dad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801dada:	d0e9      	beq.n	801dab0 <_dtoa_r+0xa38>
 801dadc:	f108 0801 	add.w	r8, r8, #1
 801dae0:	9b05      	ldr	r3, [sp, #20]
 801dae2:	e7c2      	b.n	801da6a <_dtoa_r+0x9f2>
 801dae4:	9a02      	ldr	r2, [sp, #8]
 801dae6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801daea:	eba5 030b 	sub.w	r3, r5, fp
 801daee:	4293      	cmp	r3, r2
 801daf0:	d021      	beq.n	801db36 <_dtoa_r+0xabe>
 801daf2:	2300      	movs	r3, #0
 801daf4:	220a      	movs	r2, #10
 801daf6:	9904      	ldr	r1, [sp, #16]
 801daf8:	4620      	mov	r0, r4
 801dafa:	f000 fcc2 	bl	801e482 <__multadd>
 801dafe:	45b1      	cmp	r9, r6
 801db00:	9004      	str	r0, [sp, #16]
 801db02:	f04f 0300 	mov.w	r3, #0
 801db06:	f04f 020a 	mov.w	r2, #10
 801db0a:	4649      	mov	r1, r9
 801db0c:	4620      	mov	r0, r4
 801db0e:	d105      	bne.n	801db1c <_dtoa_r+0xaa4>
 801db10:	f000 fcb7 	bl	801e482 <__multadd>
 801db14:	4681      	mov	r9, r0
 801db16:	4606      	mov	r6, r0
 801db18:	9505      	str	r5, [sp, #20]
 801db1a:	e776      	b.n	801da0a <_dtoa_r+0x992>
 801db1c:	f000 fcb1 	bl	801e482 <__multadd>
 801db20:	4631      	mov	r1, r6
 801db22:	4681      	mov	r9, r0
 801db24:	2300      	movs	r3, #0
 801db26:	220a      	movs	r2, #10
 801db28:	4620      	mov	r0, r4
 801db2a:	f000 fcaa 	bl	801e482 <__multadd>
 801db2e:	4606      	mov	r6, r0
 801db30:	e7f2      	b.n	801db18 <_dtoa_r+0xaa0>
 801db32:	f04f 0900 	mov.w	r9, #0
 801db36:	2201      	movs	r2, #1
 801db38:	9904      	ldr	r1, [sp, #16]
 801db3a:	4620      	mov	r0, r4
 801db3c:	f000 fe56 	bl	801e7ec <__lshift>
 801db40:	4639      	mov	r1, r7
 801db42:	9004      	str	r0, [sp, #16]
 801db44:	f000 fea6 	bl	801e894 <__mcmp>
 801db48:	2800      	cmp	r0, #0
 801db4a:	dcb6      	bgt.n	801daba <_dtoa_r+0xa42>
 801db4c:	d102      	bne.n	801db54 <_dtoa_r+0xadc>
 801db4e:	f018 0f01 	tst.w	r8, #1
 801db52:	d1b2      	bne.n	801daba <_dtoa_r+0xa42>
 801db54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801db58:	2b30      	cmp	r3, #48	; 0x30
 801db5a:	f105 32ff 	add.w	r2, r5, #4294967295
 801db5e:	f47f af0a 	bne.w	801d976 <_dtoa_r+0x8fe>
 801db62:	4615      	mov	r5, r2
 801db64:	e7f6      	b.n	801db54 <_dtoa_r+0xadc>
 801db66:	4593      	cmp	fp, r2
 801db68:	d105      	bne.n	801db76 <_dtoa_r+0xafe>
 801db6a:	2331      	movs	r3, #49	; 0x31
 801db6c:	f10a 0a01 	add.w	sl, sl, #1
 801db70:	f88b 3000 	strb.w	r3, [fp]
 801db74:	e6ff      	b.n	801d976 <_dtoa_r+0x8fe>
 801db76:	4615      	mov	r5, r2
 801db78:	e79f      	b.n	801daba <_dtoa_r+0xa42>
 801db7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801dbe0 <_dtoa_r+0xb68>
 801db7e:	e007      	b.n	801db90 <_dtoa_r+0xb18>
 801db80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db82:	f8df b060 	ldr.w	fp, [pc, #96]	; 801dbe4 <_dtoa_r+0xb6c>
 801db86:	b11b      	cbz	r3, 801db90 <_dtoa_r+0xb18>
 801db88:	f10b 0308 	add.w	r3, fp, #8
 801db8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801db8e:	6013      	str	r3, [r2, #0]
 801db90:	4658      	mov	r0, fp
 801db92:	b017      	add	sp, #92	; 0x5c
 801db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db98:	9b06      	ldr	r3, [sp, #24]
 801db9a:	2b01      	cmp	r3, #1
 801db9c:	f77f ae35 	ble.w	801d80a <_dtoa_r+0x792>
 801dba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dba2:	9307      	str	r3, [sp, #28]
 801dba4:	e649      	b.n	801d83a <_dtoa_r+0x7c2>
 801dba6:	9b02      	ldr	r3, [sp, #8]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	dc03      	bgt.n	801dbb4 <_dtoa_r+0xb3c>
 801dbac:	9b06      	ldr	r3, [sp, #24]
 801dbae:	2b02      	cmp	r3, #2
 801dbb0:	f73f aecc 	bgt.w	801d94c <_dtoa_r+0x8d4>
 801dbb4:	465d      	mov	r5, fp
 801dbb6:	4639      	mov	r1, r7
 801dbb8:	9804      	ldr	r0, [sp, #16]
 801dbba:	f7ff f9d0 	bl	801cf5e <quorem>
 801dbbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801dbc2:	f805 8b01 	strb.w	r8, [r5], #1
 801dbc6:	9a02      	ldr	r2, [sp, #8]
 801dbc8:	eba5 030b 	sub.w	r3, r5, fp
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	ddb0      	ble.n	801db32 <_dtoa_r+0xaba>
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	220a      	movs	r2, #10
 801dbd4:	9904      	ldr	r1, [sp, #16]
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	f000 fc53 	bl	801e482 <__multadd>
 801dbdc:	9004      	str	r0, [sp, #16]
 801dbde:	e7ea      	b.n	801dbb6 <_dtoa_r+0xb3e>
 801dbe0:	08024b26 	.word	0x08024b26
 801dbe4:	08024ba0 	.word	0x08024ba0

0801dbe8 <std>:
 801dbe8:	2300      	movs	r3, #0
 801dbea:	b510      	push	{r4, lr}
 801dbec:	4604      	mov	r4, r0
 801dbee:	e9c0 3300 	strd	r3, r3, [r0]
 801dbf2:	6083      	str	r3, [r0, #8]
 801dbf4:	8181      	strh	r1, [r0, #12]
 801dbf6:	6643      	str	r3, [r0, #100]	; 0x64
 801dbf8:	81c2      	strh	r2, [r0, #14]
 801dbfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbfe:	6183      	str	r3, [r0, #24]
 801dc00:	4619      	mov	r1, r3
 801dc02:	2208      	movs	r2, #8
 801dc04:	305c      	adds	r0, #92	; 0x5c
 801dc06:	f7fd fcfe 	bl	801b606 <memset>
 801dc0a:	4b05      	ldr	r3, [pc, #20]	; (801dc20 <std+0x38>)
 801dc0c:	6263      	str	r3, [r4, #36]	; 0x24
 801dc0e:	4b05      	ldr	r3, [pc, #20]	; (801dc24 <std+0x3c>)
 801dc10:	62a3      	str	r3, [r4, #40]	; 0x28
 801dc12:	4b05      	ldr	r3, [pc, #20]	; (801dc28 <std+0x40>)
 801dc14:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dc16:	4b05      	ldr	r3, [pc, #20]	; (801dc2c <std+0x44>)
 801dc18:	6224      	str	r4, [r4, #32]
 801dc1a:	6323      	str	r3, [r4, #48]	; 0x30
 801dc1c:	bd10      	pop	{r4, pc}
 801dc1e:	bf00      	nop
 801dc20:	0801f12d 	.word	0x0801f12d
 801dc24:	0801f14f 	.word	0x0801f14f
 801dc28:	0801f187 	.word	0x0801f187
 801dc2c:	0801f1ab 	.word	0x0801f1ab

0801dc30 <_cleanup_r>:
 801dc30:	4901      	ldr	r1, [pc, #4]	; (801dc38 <_cleanup_r+0x8>)
 801dc32:	f000 b885 	b.w	801dd40 <_fwalk_reent>
 801dc36:	bf00      	nop
 801dc38:	0801f485 	.word	0x0801f485

0801dc3c <__sfmoreglue>:
 801dc3c:	b570      	push	{r4, r5, r6, lr}
 801dc3e:	1e4a      	subs	r2, r1, #1
 801dc40:	2568      	movs	r5, #104	; 0x68
 801dc42:	4355      	muls	r5, r2
 801dc44:	460e      	mov	r6, r1
 801dc46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dc4a:	f7fd fd33 	bl	801b6b4 <_malloc_r>
 801dc4e:	4604      	mov	r4, r0
 801dc50:	b140      	cbz	r0, 801dc64 <__sfmoreglue+0x28>
 801dc52:	2100      	movs	r1, #0
 801dc54:	e9c0 1600 	strd	r1, r6, [r0]
 801dc58:	300c      	adds	r0, #12
 801dc5a:	60a0      	str	r0, [r4, #8]
 801dc5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc60:	f7fd fcd1 	bl	801b606 <memset>
 801dc64:	4620      	mov	r0, r4
 801dc66:	bd70      	pop	{r4, r5, r6, pc}

0801dc68 <__sinit>:
 801dc68:	6983      	ldr	r3, [r0, #24]
 801dc6a:	b510      	push	{r4, lr}
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	bb33      	cbnz	r3, 801dcbe <__sinit+0x56>
 801dc70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801dc74:	6503      	str	r3, [r0, #80]	; 0x50
 801dc76:	4b12      	ldr	r3, [pc, #72]	; (801dcc0 <__sinit+0x58>)
 801dc78:	4a12      	ldr	r2, [pc, #72]	; (801dcc4 <__sinit+0x5c>)
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	6282      	str	r2, [r0, #40]	; 0x28
 801dc7e:	4298      	cmp	r0, r3
 801dc80:	bf04      	itt	eq
 801dc82:	2301      	moveq	r3, #1
 801dc84:	6183      	streq	r3, [r0, #24]
 801dc86:	f000 f81f 	bl	801dcc8 <__sfp>
 801dc8a:	6060      	str	r0, [r4, #4]
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f000 f81b 	bl	801dcc8 <__sfp>
 801dc92:	60a0      	str	r0, [r4, #8]
 801dc94:	4620      	mov	r0, r4
 801dc96:	f000 f817 	bl	801dcc8 <__sfp>
 801dc9a:	2200      	movs	r2, #0
 801dc9c:	60e0      	str	r0, [r4, #12]
 801dc9e:	2104      	movs	r1, #4
 801dca0:	6860      	ldr	r0, [r4, #4]
 801dca2:	f7ff ffa1 	bl	801dbe8 <std>
 801dca6:	2201      	movs	r2, #1
 801dca8:	2109      	movs	r1, #9
 801dcaa:	68a0      	ldr	r0, [r4, #8]
 801dcac:	f7ff ff9c 	bl	801dbe8 <std>
 801dcb0:	2202      	movs	r2, #2
 801dcb2:	2112      	movs	r1, #18
 801dcb4:	68e0      	ldr	r0, [r4, #12]
 801dcb6:	f7ff ff97 	bl	801dbe8 <std>
 801dcba:	2301      	movs	r3, #1
 801dcbc:	61a3      	str	r3, [r4, #24]
 801dcbe:	bd10      	pop	{r4, pc}
 801dcc0:	08024b08 	.word	0x08024b08
 801dcc4:	0801dc31 	.word	0x0801dc31

0801dcc8 <__sfp>:
 801dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcca:	4b1b      	ldr	r3, [pc, #108]	; (801dd38 <__sfp+0x70>)
 801dccc:	681e      	ldr	r6, [r3, #0]
 801dcce:	69b3      	ldr	r3, [r6, #24]
 801dcd0:	4607      	mov	r7, r0
 801dcd2:	b913      	cbnz	r3, 801dcda <__sfp+0x12>
 801dcd4:	4630      	mov	r0, r6
 801dcd6:	f7ff ffc7 	bl	801dc68 <__sinit>
 801dcda:	3648      	adds	r6, #72	; 0x48
 801dcdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dce0:	3b01      	subs	r3, #1
 801dce2:	d503      	bpl.n	801dcec <__sfp+0x24>
 801dce4:	6833      	ldr	r3, [r6, #0]
 801dce6:	b133      	cbz	r3, 801dcf6 <__sfp+0x2e>
 801dce8:	6836      	ldr	r6, [r6, #0]
 801dcea:	e7f7      	b.n	801dcdc <__sfp+0x14>
 801dcec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dcf0:	b16d      	cbz	r5, 801dd0e <__sfp+0x46>
 801dcf2:	3468      	adds	r4, #104	; 0x68
 801dcf4:	e7f4      	b.n	801dce0 <__sfp+0x18>
 801dcf6:	2104      	movs	r1, #4
 801dcf8:	4638      	mov	r0, r7
 801dcfa:	f7ff ff9f 	bl	801dc3c <__sfmoreglue>
 801dcfe:	6030      	str	r0, [r6, #0]
 801dd00:	2800      	cmp	r0, #0
 801dd02:	d1f1      	bne.n	801dce8 <__sfp+0x20>
 801dd04:	230c      	movs	r3, #12
 801dd06:	603b      	str	r3, [r7, #0]
 801dd08:	4604      	mov	r4, r0
 801dd0a:	4620      	mov	r0, r4
 801dd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd0e:	4b0b      	ldr	r3, [pc, #44]	; (801dd3c <__sfp+0x74>)
 801dd10:	6665      	str	r5, [r4, #100]	; 0x64
 801dd12:	e9c4 5500 	strd	r5, r5, [r4]
 801dd16:	60a5      	str	r5, [r4, #8]
 801dd18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801dd1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801dd20:	2208      	movs	r2, #8
 801dd22:	4629      	mov	r1, r5
 801dd24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd28:	f7fd fc6d 	bl	801b606 <memset>
 801dd2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd34:	e7e9      	b.n	801dd0a <__sfp+0x42>
 801dd36:	bf00      	nop
 801dd38:	08024b08 	.word	0x08024b08
 801dd3c:	ffff0001 	.word	0xffff0001

0801dd40 <_fwalk_reent>:
 801dd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd44:	4680      	mov	r8, r0
 801dd46:	4689      	mov	r9, r1
 801dd48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dd4c:	2600      	movs	r6, #0
 801dd4e:	b914      	cbnz	r4, 801dd56 <_fwalk_reent+0x16>
 801dd50:	4630      	mov	r0, r6
 801dd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801dd5a:	3f01      	subs	r7, #1
 801dd5c:	d501      	bpl.n	801dd62 <_fwalk_reent+0x22>
 801dd5e:	6824      	ldr	r4, [r4, #0]
 801dd60:	e7f5      	b.n	801dd4e <_fwalk_reent+0xe>
 801dd62:	89ab      	ldrh	r3, [r5, #12]
 801dd64:	2b01      	cmp	r3, #1
 801dd66:	d907      	bls.n	801dd78 <_fwalk_reent+0x38>
 801dd68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd6c:	3301      	adds	r3, #1
 801dd6e:	d003      	beq.n	801dd78 <_fwalk_reent+0x38>
 801dd70:	4629      	mov	r1, r5
 801dd72:	4640      	mov	r0, r8
 801dd74:	47c8      	blx	r9
 801dd76:	4306      	orrs	r6, r0
 801dd78:	3568      	adds	r5, #104	; 0x68
 801dd7a:	e7ee      	b.n	801dd5a <_fwalk_reent+0x1a>

0801dd7c <rshift>:
 801dd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd7e:	6906      	ldr	r6, [r0, #16]
 801dd80:	114b      	asrs	r3, r1, #5
 801dd82:	429e      	cmp	r6, r3
 801dd84:	f100 0414 	add.w	r4, r0, #20
 801dd88:	dd30      	ble.n	801ddec <rshift+0x70>
 801dd8a:	f011 011f 	ands.w	r1, r1, #31
 801dd8e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801dd92:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801dd96:	d108      	bne.n	801ddaa <rshift+0x2e>
 801dd98:	4621      	mov	r1, r4
 801dd9a:	42b2      	cmp	r2, r6
 801dd9c:	460b      	mov	r3, r1
 801dd9e:	d211      	bcs.n	801ddc4 <rshift+0x48>
 801dda0:	f852 3b04 	ldr.w	r3, [r2], #4
 801dda4:	f841 3b04 	str.w	r3, [r1], #4
 801dda8:	e7f7      	b.n	801dd9a <rshift+0x1e>
 801ddaa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801ddae:	f1c1 0c20 	rsb	ip, r1, #32
 801ddb2:	40cd      	lsrs	r5, r1
 801ddb4:	3204      	adds	r2, #4
 801ddb6:	4623      	mov	r3, r4
 801ddb8:	42b2      	cmp	r2, r6
 801ddba:	4617      	mov	r7, r2
 801ddbc:	d30c      	bcc.n	801ddd8 <rshift+0x5c>
 801ddbe:	601d      	str	r5, [r3, #0]
 801ddc0:	b105      	cbz	r5, 801ddc4 <rshift+0x48>
 801ddc2:	3304      	adds	r3, #4
 801ddc4:	1b1a      	subs	r2, r3, r4
 801ddc6:	42a3      	cmp	r3, r4
 801ddc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ddcc:	bf08      	it	eq
 801ddce:	2300      	moveq	r3, #0
 801ddd0:	6102      	str	r2, [r0, #16]
 801ddd2:	bf08      	it	eq
 801ddd4:	6143      	streq	r3, [r0, #20]
 801ddd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddd8:	683f      	ldr	r7, [r7, #0]
 801ddda:	fa07 f70c 	lsl.w	r7, r7, ip
 801ddde:	433d      	orrs	r5, r7
 801dde0:	f843 5b04 	str.w	r5, [r3], #4
 801dde4:	f852 5b04 	ldr.w	r5, [r2], #4
 801dde8:	40cd      	lsrs	r5, r1
 801ddea:	e7e5      	b.n	801ddb8 <rshift+0x3c>
 801ddec:	4623      	mov	r3, r4
 801ddee:	e7e9      	b.n	801ddc4 <rshift+0x48>

0801ddf0 <__hexdig_fun>:
 801ddf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ddf4:	2b09      	cmp	r3, #9
 801ddf6:	d802      	bhi.n	801ddfe <__hexdig_fun+0xe>
 801ddf8:	3820      	subs	r0, #32
 801ddfa:	b2c0      	uxtb	r0, r0
 801ddfc:	4770      	bx	lr
 801ddfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de02:	2b05      	cmp	r3, #5
 801de04:	d801      	bhi.n	801de0a <__hexdig_fun+0x1a>
 801de06:	3847      	subs	r0, #71	; 0x47
 801de08:	e7f7      	b.n	801ddfa <__hexdig_fun+0xa>
 801de0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801de0e:	2b05      	cmp	r3, #5
 801de10:	d801      	bhi.n	801de16 <__hexdig_fun+0x26>
 801de12:	3827      	subs	r0, #39	; 0x27
 801de14:	e7f1      	b.n	801ddfa <__hexdig_fun+0xa>
 801de16:	2000      	movs	r0, #0
 801de18:	4770      	bx	lr

0801de1a <__gethex>:
 801de1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1e:	b08b      	sub	sp, #44	; 0x2c
 801de20:	468a      	mov	sl, r1
 801de22:	9002      	str	r0, [sp, #8]
 801de24:	9816      	ldr	r0, [sp, #88]	; 0x58
 801de26:	9306      	str	r3, [sp, #24]
 801de28:	4690      	mov	r8, r2
 801de2a:	f000 facd 	bl	801e3c8 <__localeconv_l>
 801de2e:	6803      	ldr	r3, [r0, #0]
 801de30:	9303      	str	r3, [sp, #12]
 801de32:	4618      	mov	r0, r3
 801de34:	f7e2 f9d6 	bl	80001e4 <strlen>
 801de38:	9b03      	ldr	r3, [sp, #12]
 801de3a:	9001      	str	r0, [sp, #4]
 801de3c:	4403      	add	r3, r0
 801de3e:	f04f 0b00 	mov.w	fp, #0
 801de42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801de46:	9307      	str	r3, [sp, #28]
 801de48:	f8da 3000 	ldr.w	r3, [sl]
 801de4c:	3302      	adds	r3, #2
 801de4e:	461f      	mov	r7, r3
 801de50:	f813 0b01 	ldrb.w	r0, [r3], #1
 801de54:	2830      	cmp	r0, #48	; 0x30
 801de56:	d06c      	beq.n	801df32 <__gethex+0x118>
 801de58:	f7ff ffca 	bl	801ddf0 <__hexdig_fun>
 801de5c:	4604      	mov	r4, r0
 801de5e:	2800      	cmp	r0, #0
 801de60:	d16a      	bne.n	801df38 <__gethex+0x11e>
 801de62:	9a01      	ldr	r2, [sp, #4]
 801de64:	9903      	ldr	r1, [sp, #12]
 801de66:	4638      	mov	r0, r7
 801de68:	f7fe f98a 	bl	801c180 <strncmp>
 801de6c:	2800      	cmp	r0, #0
 801de6e:	d166      	bne.n	801df3e <__gethex+0x124>
 801de70:	9b01      	ldr	r3, [sp, #4]
 801de72:	5cf8      	ldrb	r0, [r7, r3]
 801de74:	18fe      	adds	r6, r7, r3
 801de76:	f7ff ffbb 	bl	801ddf0 <__hexdig_fun>
 801de7a:	2800      	cmp	r0, #0
 801de7c:	d062      	beq.n	801df44 <__gethex+0x12a>
 801de7e:	4633      	mov	r3, r6
 801de80:	7818      	ldrb	r0, [r3, #0]
 801de82:	2830      	cmp	r0, #48	; 0x30
 801de84:	461f      	mov	r7, r3
 801de86:	f103 0301 	add.w	r3, r3, #1
 801de8a:	d0f9      	beq.n	801de80 <__gethex+0x66>
 801de8c:	f7ff ffb0 	bl	801ddf0 <__hexdig_fun>
 801de90:	fab0 f580 	clz	r5, r0
 801de94:	096d      	lsrs	r5, r5, #5
 801de96:	4634      	mov	r4, r6
 801de98:	f04f 0b01 	mov.w	fp, #1
 801de9c:	463a      	mov	r2, r7
 801de9e:	4616      	mov	r6, r2
 801dea0:	3201      	adds	r2, #1
 801dea2:	7830      	ldrb	r0, [r6, #0]
 801dea4:	f7ff ffa4 	bl	801ddf0 <__hexdig_fun>
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d1f8      	bne.n	801de9e <__gethex+0x84>
 801deac:	9a01      	ldr	r2, [sp, #4]
 801deae:	9903      	ldr	r1, [sp, #12]
 801deb0:	4630      	mov	r0, r6
 801deb2:	f7fe f965 	bl	801c180 <strncmp>
 801deb6:	b950      	cbnz	r0, 801dece <__gethex+0xb4>
 801deb8:	b954      	cbnz	r4, 801ded0 <__gethex+0xb6>
 801deba:	9b01      	ldr	r3, [sp, #4]
 801debc:	18f4      	adds	r4, r6, r3
 801debe:	4622      	mov	r2, r4
 801dec0:	4616      	mov	r6, r2
 801dec2:	3201      	adds	r2, #1
 801dec4:	7830      	ldrb	r0, [r6, #0]
 801dec6:	f7ff ff93 	bl	801ddf0 <__hexdig_fun>
 801deca:	2800      	cmp	r0, #0
 801decc:	d1f8      	bne.n	801dec0 <__gethex+0xa6>
 801dece:	b10c      	cbz	r4, 801ded4 <__gethex+0xba>
 801ded0:	1ba4      	subs	r4, r4, r6
 801ded2:	00a4      	lsls	r4, r4, #2
 801ded4:	7833      	ldrb	r3, [r6, #0]
 801ded6:	2b50      	cmp	r3, #80	; 0x50
 801ded8:	d001      	beq.n	801dede <__gethex+0xc4>
 801deda:	2b70      	cmp	r3, #112	; 0x70
 801dedc:	d140      	bne.n	801df60 <__gethex+0x146>
 801dede:	7873      	ldrb	r3, [r6, #1]
 801dee0:	2b2b      	cmp	r3, #43	; 0x2b
 801dee2:	d031      	beq.n	801df48 <__gethex+0x12e>
 801dee4:	2b2d      	cmp	r3, #45	; 0x2d
 801dee6:	d033      	beq.n	801df50 <__gethex+0x136>
 801dee8:	1c71      	adds	r1, r6, #1
 801deea:	f04f 0900 	mov.w	r9, #0
 801deee:	7808      	ldrb	r0, [r1, #0]
 801def0:	f7ff ff7e 	bl	801ddf0 <__hexdig_fun>
 801def4:	1e43      	subs	r3, r0, #1
 801def6:	b2db      	uxtb	r3, r3
 801def8:	2b18      	cmp	r3, #24
 801defa:	d831      	bhi.n	801df60 <__gethex+0x146>
 801defc:	f1a0 0210 	sub.w	r2, r0, #16
 801df00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df04:	f7ff ff74 	bl	801ddf0 <__hexdig_fun>
 801df08:	1e43      	subs	r3, r0, #1
 801df0a:	b2db      	uxtb	r3, r3
 801df0c:	2b18      	cmp	r3, #24
 801df0e:	d922      	bls.n	801df56 <__gethex+0x13c>
 801df10:	f1b9 0f00 	cmp.w	r9, #0
 801df14:	d000      	beq.n	801df18 <__gethex+0xfe>
 801df16:	4252      	negs	r2, r2
 801df18:	4414      	add	r4, r2
 801df1a:	f8ca 1000 	str.w	r1, [sl]
 801df1e:	b30d      	cbz	r5, 801df64 <__gethex+0x14a>
 801df20:	f1bb 0f00 	cmp.w	fp, #0
 801df24:	bf0c      	ite	eq
 801df26:	2706      	moveq	r7, #6
 801df28:	2700      	movne	r7, #0
 801df2a:	4638      	mov	r0, r7
 801df2c:	b00b      	add	sp, #44	; 0x2c
 801df2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df32:	f10b 0b01 	add.w	fp, fp, #1
 801df36:	e78a      	b.n	801de4e <__gethex+0x34>
 801df38:	2500      	movs	r5, #0
 801df3a:	462c      	mov	r4, r5
 801df3c:	e7ae      	b.n	801de9c <__gethex+0x82>
 801df3e:	463e      	mov	r6, r7
 801df40:	2501      	movs	r5, #1
 801df42:	e7c7      	b.n	801ded4 <__gethex+0xba>
 801df44:	4604      	mov	r4, r0
 801df46:	e7fb      	b.n	801df40 <__gethex+0x126>
 801df48:	f04f 0900 	mov.w	r9, #0
 801df4c:	1cb1      	adds	r1, r6, #2
 801df4e:	e7ce      	b.n	801deee <__gethex+0xd4>
 801df50:	f04f 0901 	mov.w	r9, #1
 801df54:	e7fa      	b.n	801df4c <__gethex+0x132>
 801df56:	230a      	movs	r3, #10
 801df58:	fb03 0202 	mla	r2, r3, r2, r0
 801df5c:	3a10      	subs	r2, #16
 801df5e:	e7cf      	b.n	801df00 <__gethex+0xe6>
 801df60:	4631      	mov	r1, r6
 801df62:	e7da      	b.n	801df1a <__gethex+0x100>
 801df64:	1bf3      	subs	r3, r6, r7
 801df66:	3b01      	subs	r3, #1
 801df68:	4629      	mov	r1, r5
 801df6a:	2b07      	cmp	r3, #7
 801df6c:	dc49      	bgt.n	801e002 <__gethex+0x1e8>
 801df6e:	9802      	ldr	r0, [sp, #8]
 801df70:	f000 fa3c 	bl	801e3ec <_Balloc>
 801df74:	9b01      	ldr	r3, [sp, #4]
 801df76:	f100 0914 	add.w	r9, r0, #20
 801df7a:	f04f 0b00 	mov.w	fp, #0
 801df7e:	f1c3 0301 	rsb	r3, r3, #1
 801df82:	4605      	mov	r5, r0
 801df84:	f8cd 9010 	str.w	r9, [sp, #16]
 801df88:	46da      	mov	sl, fp
 801df8a:	9308      	str	r3, [sp, #32]
 801df8c:	42b7      	cmp	r7, r6
 801df8e:	d33b      	bcc.n	801e008 <__gethex+0x1ee>
 801df90:	9804      	ldr	r0, [sp, #16]
 801df92:	f840 ab04 	str.w	sl, [r0], #4
 801df96:	eba0 0009 	sub.w	r0, r0, r9
 801df9a:	1080      	asrs	r0, r0, #2
 801df9c:	6128      	str	r0, [r5, #16]
 801df9e:	0147      	lsls	r7, r0, #5
 801dfa0:	4650      	mov	r0, sl
 801dfa2:	f000 fae7 	bl	801e574 <__hi0bits>
 801dfa6:	f8d8 6000 	ldr.w	r6, [r8]
 801dfaa:	1a3f      	subs	r7, r7, r0
 801dfac:	42b7      	cmp	r7, r6
 801dfae:	dd64      	ble.n	801e07a <__gethex+0x260>
 801dfb0:	1bbf      	subs	r7, r7, r6
 801dfb2:	4639      	mov	r1, r7
 801dfb4:	4628      	mov	r0, r5
 801dfb6:	f000 fdf7 	bl	801eba8 <__any_on>
 801dfba:	4682      	mov	sl, r0
 801dfbc:	b178      	cbz	r0, 801dfde <__gethex+0x1c4>
 801dfbe:	1e7b      	subs	r3, r7, #1
 801dfc0:	1159      	asrs	r1, r3, #5
 801dfc2:	f003 021f 	and.w	r2, r3, #31
 801dfc6:	f04f 0a01 	mov.w	sl, #1
 801dfca:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801dfce:	fa0a f202 	lsl.w	r2, sl, r2
 801dfd2:	420a      	tst	r2, r1
 801dfd4:	d003      	beq.n	801dfde <__gethex+0x1c4>
 801dfd6:	4553      	cmp	r3, sl
 801dfd8:	dc46      	bgt.n	801e068 <__gethex+0x24e>
 801dfda:	f04f 0a02 	mov.w	sl, #2
 801dfde:	4639      	mov	r1, r7
 801dfe0:	4628      	mov	r0, r5
 801dfe2:	f7ff fecb 	bl	801dd7c <rshift>
 801dfe6:	443c      	add	r4, r7
 801dfe8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dfec:	42a3      	cmp	r3, r4
 801dfee:	da52      	bge.n	801e096 <__gethex+0x27c>
 801dff0:	4629      	mov	r1, r5
 801dff2:	9802      	ldr	r0, [sp, #8]
 801dff4:	f000 fa2e 	bl	801e454 <_Bfree>
 801dff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dffa:	2300      	movs	r3, #0
 801dffc:	6013      	str	r3, [r2, #0]
 801dffe:	27a3      	movs	r7, #163	; 0xa3
 801e000:	e793      	b.n	801df2a <__gethex+0x110>
 801e002:	3101      	adds	r1, #1
 801e004:	105b      	asrs	r3, r3, #1
 801e006:	e7b0      	b.n	801df6a <__gethex+0x150>
 801e008:	1e73      	subs	r3, r6, #1
 801e00a:	9305      	str	r3, [sp, #20]
 801e00c:	9a07      	ldr	r2, [sp, #28]
 801e00e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e012:	4293      	cmp	r3, r2
 801e014:	d018      	beq.n	801e048 <__gethex+0x22e>
 801e016:	f1bb 0f20 	cmp.w	fp, #32
 801e01a:	d107      	bne.n	801e02c <__gethex+0x212>
 801e01c:	9b04      	ldr	r3, [sp, #16]
 801e01e:	f8c3 a000 	str.w	sl, [r3]
 801e022:	3304      	adds	r3, #4
 801e024:	f04f 0a00 	mov.w	sl, #0
 801e028:	9304      	str	r3, [sp, #16]
 801e02a:	46d3      	mov	fp, sl
 801e02c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e030:	f7ff fede 	bl	801ddf0 <__hexdig_fun>
 801e034:	f000 000f 	and.w	r0, r0, #15
 801e038:	fa00 f00b 	lsl.w	r0, r0, fp
 801e03c:	ea4a 0a00 	orr.w	sl, sl, r0
 801e040:	f10b 0b04 	add.w	fp, fp, #4
 801e044:	9b05      	ldr	r3, [sp, #20]
 801e046:	e00d      	b.n	801e064 <__gethex+0x24a>
 801e048:	9b05      	ldr	r3, [sp, #20]
 801e04a:	9a08      	ldr	r2, [sp, #32]
 801e04c:	4413      	add	r3, r2
 801e04e:	42bb      	cmp	r3, r7
 801e050:	d3e1      	bcc.n	801e016 <__gethex+0x1fc>
 801e052:	4618      	mov	r0, r3
 801e054:	9a01      	ldr	r2, [sp, #4]
 801e056:	9903      	ldr	r1, [sp, #12]
 801e058:	9309      	str	r3, [sp, #36]	; 0x24
 801e05a:	f7fe f891 	bl	801c180 <strncmp>
 801e05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e060:	2800      	cmp	r0, #0
 801e062:	d1d8      	bne.n	801e016 <__gethex+0x1fc>
 801e064:	461e      	mov	r6, r3
 801e066:	e791      	b.n	801df8c <__gethex+0x172>
 801e068:	1eb9      	subs	r1, r7, #2
 801e06a:	4628      	mov	r0, r5
 801e06c:	f000 fd9c 	bl	801eba8 <__any_on>
 801e070:	2800      	cmp	r0, #0
 801e072:	d0b2      	beq.n	801dfda <__gethex+0x1c0>
 801e074:	f04f 0a03 	mov.w	sl, #3
 801e078:	e7b1      	b.n	801dfde <__gethex+0x1c4>
 801e07a:	da09      	bge.n	801e090 <__gethex+0x276>
 801e07c:	1bf7      	subs	r7, r6, r7
 801e07e:	4629      	mov	r1, r5
 801e080:	463a      	mov	r2, r7
 801e082:	9802      	ldr	r0, [sp, #8]
 801e084:	f000 fbb2 	bl	801e7ec <__lshift>
 801e088:	1be4      	subs	r4, r4, r7
 801e08a:	4605      	mov	r5, r0
 801e08c:	f100 0914 	add.w	r9, r0, #20
 801e090:	f04f 0a00 	mov.w	sl, #0
 801e094:	e7a8      	b.n	801dfe8 <__gethex+0x1ce>
 801e096:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e09a:	42a0      	cmp	r0, r4
 801e09c:	dd6a      	ble.n	801e174 <__gethex+0x35a>
 801e09e:	1b04      	subs	r4, r0, r4
 801e0a0:	42a6      	cmp	r6, r4
 801e0a2:	dc2e      	bgt.n	801e102 <__gethex+0x2e8>
 801e0a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e0a8:	2b02      	cmp	r3, #2
 801e0aa:	d022      	beq.n	801e0f2 <__gethex+0x2d8>
 801e0ac:	2b03      	cmp	r3, #3
 801e0ae:	d024      	beq.n	801e0fa <__gethex+0x2e0>
 801e0b0:	2b01      	cmp	r3, #1
 801e0b2:	d115      	bne.n	801e0e0 <__gethex+0x2c6>
 801e0b4:	42a6      	cmp	r6, r4
 801e0b6:	d113      	bne.n	801e0e0 <__gethex+0x2c6>
 801e0b8:	2e01      	cmp	r6, #1
 801e0ba:	dc0b      	bgt.n	801e0d4 <__gethex+0x2ba>
 801e0bc:	9a06      	ldr	r2, [sp, #24]
 801e0be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e0c2:	6013      	str	r3, [r2, #0]
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	612b      	str	r3, [r5, #16]
 801e0c8:	f8c9 3000 	str.w	r3, [r9]
 801e0cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e0ce:	2762      	movs	r7, #98	; 0x62
 801e0d0:	601d      	str	r5, [r3, #0]
 801e0d2:	e72a      	b.n	801df2a <__gethex+0x110>
 801e0d4:	1e71      	subs	r1, r6, #1
 801e0d6:	4628      	mov	r0, r5
 801e0d8:	f000 fd66 	bl	801eba8 <__any_on>
 801e0dc:	2800      	cmp	r0, #0
 801e0de:	d1ed      	bne.n	801e0bc <__gethex+0x2a2>
 801e0e0:	4629      	mov	r1, r5
 801e0e2:	9802      	ldr	r0, [sp, #8]
 801e0e4:	f000 f9b6 	bl	801e454 <_Bfree>
 801e0e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	6013      	str	r3, [r2, #0]
 801e0ee:	2750      	movs	r7, #80	; 0x50
 801e0f0:	e71b      	b.n	801df2a <__gethex+0x110>
 801e0f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d0e1      	beq.n	801e0bc <__gethex+0x2a2>
 801e0f8:	e7f2      	b.n	801e0e0 <__gethex+0x2c6>
 801e0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d1dd      	bne.n	801e0bc <__gethex+0x2a2>
 801e100:	e7ee      	b.n	801e0e0 <__gethex+0x2c6>
 801e102:	1e67      	subs	r7, r4, #1
 801e104:	f1ba 0f00 	cmp.w	sl, #0
 801e108:	d131      	bne.n	801e16e <__gethex+0x354>
 801e10a:	b127      	cbz	r7, 801e116 <__gethex+0x2fc>
 801e10c:	4639      	mov	r1, r7
 801e10e:	4628      	mov	r0, r5
 801e110:	f000 fd4a 	bl	801eba8 <__any_on>
 801e114:	4682      	mov	sl, r0
 801e116:	117a      	asrs	r2, r7, #5
 801e118:	2301      	movs	r3, #1
 801e11a:	f007 071f 	and.w	r7, r7, #31
 801e11e:	fa03 f707 	lsl.w	r7, r3, r7
 801e122:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801e126:	4621      	mov	r1, r4
 801e128:	421f      	tst	r7, r3
 801e12a:	4628      	mov	r0, r5
 801e12c:	bf18      	it	ne
 801e12e:	f04a 0a02 	orrne.w	sl, sl, #2
 801e132:	1b36      	subs	r6, r6, r4
 801e134:	f7ff fe22 	bl	801dd7c <rshift>
 801e138:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e13c:	2702      	movs	r7, #2
 801e13e:	f1ba 0f00 	cmp.w	sl, #0
 801e142:	d048      	beq.n	801e1d6 <__gethex+0x3bc>
 801e144:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e148:	2b02      	cmp	r3, #2
 801e14a:	d015      	beq.n	801e178 <__gethex+0x35e>
 801e14c:	2b03      	cmp	r3, #3
 801e14e:	d017      	beq.n	801e180 <__gethex+0x366>
 801e150:	2b01      	cmp	r3, #1
 801e152:	d109      	bne.n	801e168 <__gethex+0x34e>
 801e154:	f01a 0f02 	tst.w	sl, #2
 801e158:	d006      	beq.n	801e168 <__gethex+0x34e>
 801e15a:	f8d9 3000 	ldr.w	r3, [r9]
 801e15e:	ea4a 0a03 	orr.w	sl, sl, r3
 801e162:	f01a 0f01 	tst.w	sl, #1
 801e166:	d10e      	bne.n	801e186 <__gethex+0x36c>
 801e168:	f047 0710 	orr.w	r7, r7, #16
 801e16c:	e033      	b.n	801e1d6 <__gethex+0x3bc>
 801e16e:	f04f 0a01 	mov.w	sl, #1
 801e172:	e7d0      	b.n	801e116 <__gethex+0x2fc>
 801e174:	2701      	movs	r7, #1
 801e176:	e7e2      	b.n	801e13e <__gethex+0x324>
 801e178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e17a:	f1c3 0301 	rsb	r3, r3, #1
 801e17e:	9315      	str	r3, [sp, #84]	; 0x54
 801e180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e182:	2b00      	cmp	r3, #0
 801e184:	d0f0      	beq.n	801e168 <__gethex+0x34e>
 801e186:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801e18a:	f105 0314 	add.w	r3, r5, #20
 801e18e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801e192:	eb03 010a 	add.w	r1, r3, sl
 801e196:	f04f 0c00 	mov.w	ip, #0
 801e19a:	4618      	mov	r0, r3
 801e19c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e1a4:	d01c      	beq.n	801e1e0 <__gethex+0x3c6>
 801e1a6:	3201      	adds	r2, #1
 801e1a8:	6002      	str	r2, [r0, #0]
 801e1aa:	2f02      	cmp	r7, #2
 801e1ac:	f105 0314 	add.w	r3, r5, #20
 801e1b0:	d138      	bne.n	801e224 <__gethex+0x40a>
 801e1b2:	f8d8 2000 	ldr.w	r2, [r8]
 801e1b6:	3a01      	subs	r2, #1
 801e1b8:	42b2      	cmp	r2, r6
 801e1ba:	d10a      	bne.n	801e1d2 <__gethex+0x3b8>
 801e1bc:	1171      	asrs	r1, r6, #5
 801e1be:	2201      	movs	r2, #1
 801e1c0:	f006 061f 	and.w	r6, r6, #31
 801e1c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e1c8:	fa02 f606 	lsl.w	r6, r2, r6
 801e1cc:	421e      	tst	r6, r3
 801e1ce:	bf18      	it	ne
 801e1d0:	4617      	movne	r7, r2
 801e1d2:	f047 0720 	orr.w	r7, r7, #32
 801e1d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1d8:	601d      	str	r5, [r3, #0]
 801e1da:	9b06      	ldr	r3, [sp, #24]
 801e1dc:	601c      	str	r4, [r3, #0]
 801e1de:	e6a4      	b.n	801df2a <__gethex+0x110>
 801e1e0:	4299      	cmp	r1, r3
 801e1e2:	f843 cc04 	str.w	ip, [r3, #-4]
 801e1e6:	d8d8      	bhi.n	801e19a <__gethex+0x380>
 801e1e8:	68ab      	ldr	r3, [r5, #8]
 801e1ea:	4599      	cmp	r9, r3
 801e1ec:	db12      	blt.n	801e214 <__gethex+0x3fa>
 801e1ee:	6869      	ldr	r1, [r5, #4]
 801e1f0:	9802      	ldr	r0, [sp, #8]
 801e1f2:	3101      	adds	r1, #1
 801e1f4:	f000 f8fa 	bl	801e3ec <_Balloc>
 801e1f8:	692a      	ldr	r2, [r5, #16]
 801e1fa:	3202      	adds	r2, #2
 801e1fc:	f105 010c 	add.w	r1, r5, #12
 801e200:	4683      	mov	fp, r0
 801e202:	0092      	lsls	r2, r2, #2
 801e204:	300c      	adds	r0, #12
 801e206:	f7fd f9da 	bl	801b5be <memcpy>
 801e20a:	4629      	mov	r1, r5
 801e20c:	9802      	ldr	r0, [sp, #8]
 801e20e:	f000 f921 	bl	801e454 <_Bfree>
 801e212:	465d      	mov	r5, fp
 801e214:	692b      	ldr	r3, [r5, #16]
 801e216:	1c5a      	adds	r2, r3, #1
 801e218:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801e21c:	612a      	str	r2, [r5, #16]
 801e21e:	2201      	movs	r2, #1
 801e220:	615a      	str	r2, [r3, #20]
 801e222:	e7c2      	b.n	801e1aa <__gethex+0x390>
 801e224:	692a      	ldr	r2, [r5, #16]
 801e226:	454a      	cmp	r2, r9
 801e228:	dd0b      	ble.n	801e242 <__gethex+0x428>
 801e22a:	2101      	movs	r1, #1
 801e22c:	4628      	mov	r0, r5
 801e22e:	f7ff fda5 	bl	801dd7c <rshift>
 801e232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e236:	3401      	adds	r4, #1
 801e238:	42a3      	cmp	r3, r4
 801e23a:	f6ff aed9 	blt.w	801dff0 <__gethex+0x1d6>
 801e23e:	2701      	movs	r7, #1
 801e240:	e7c7      	b.n	801e1d2 <__gethex+0x3b8>
 801e242:	f016 061f 	ands.w	r6, r6, #31
 801e246:	d0fa      	beq.n	801e23e <__gethex+0x424>
 801e248:	449a      	add	sl, r3
 801e24a:	f1c6 0620 	rsb	r6, r6, #32
 801e24e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e252:	f000 f98f 	bl	801e574 <__hi0bits>
 801e256:	42b0      	cmp	r0, r6
 801e258:	dbe7      	blt.n	801e22a <__gethex+0x410>
 801e25a:	e7f0      	b.n	801e23e <__gethex+0x424>

0801e25c <L_shift>:
 801e25c:	f1c2 0208 	rsb	r2, r2, #8
 801e260:	0092      	lsls	r2, r2, #2
 801e262:	b570      	push	{r4, r5, r6, lr}
 801e264:	f1c2 0620 	rsb	r6, r2, #32
 801e268:	6843      	ldr	r3, [r0, #4]
 801e26a:	6804      	ldr	r4, [r0, #0]
 801e26c:	fa03 f506 	lsl.w	r5, r3, r6
 801e270:	432c      	orrs	r4, r5
 801e272:	40d3      	lsrs	r3, r2
 801e274:	6004      	str	r4, [r0, #0]
 801e276:	f840 3f04 	str.w	r3, [r0, #4]!
 801e27a:	4288      	cmp	r0, r1
 801e27c:	d3f4      	bcc.n	801e268 <L_shift+0xc>
 801e27e:	bd70      	pop	{r4, r5, r6, pc}

0801e280 <__match>:
 801e280:	b530      	push	{r4, r5, lr}
 801e282:	6803      	ldr	r3, [r0, #0]
 801e284:	3301      	adds	r3, #1
 801e286:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e28a:	b914      	cbnz	r4, 801e292 <__match+0x12>
 801e28c:	6003      	str	r3, [r0, #0]
 801e28e:	2001      	movs	r0, #1
 801e290:	bd30      	pop	{r4, r5, pc}
 801e292:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e296:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e29a:	2d19      	cmp	r5, #25
 801e29c:	bf98      	it	ls
 801e29e:	3220      	addls	r2, #32
 801e2a0:	42a2      	cmp	r2, r4
 801e2a2:	d0f0      	beq.n	801e286 <__match+0x6>
 801e2a4:	2000      	movs	r0, #0
 801e2a6:	e7f3      	b.n	801e290 <__match+0x10>

0801e2a8 <__hexnan>:
 801e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ac:	680b      	ldr	r3, [r1, #0]
 801e2ae:	6801      	ldr	r1, [r0, #0]
 801e2b0:	115f      	asrs	r7, r3, #5
 801e2b2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801e2b6:	f013 031f 	ands.w	r3, r3, #31
 801e2ba:	b087      	sub	sp, #28
 801e2bc:	bf18      	it	ne
 801e2be:	3704      	addne	r7, #4
 801e2c0:	2500      	movs	r5, #0
 801e2c2:	1f3e      	subs	r6, r7, #4
 801e2c4:	4682      	mov	sl, r0
 801e2c6:	4690      	mov	r8, r2
 801e2c8:	9301      	str	r3, [sp, #4]
 801e2ca:	f847 5c04 	str.w	r5, [r7, #-4]
 801e2ce:	46b1      	mov	r9, r6
 801e2d0:	4634      	mov	r4, r6
 801e2d2:	9502      	str	r5, [sp, #8]
 801e2d4:	46ab      	mov	fp, r5
 801e2d6:	784a      	ldrb	r2, [r1, #1]
 801e2d8:	1c4b      	adds	r3, r1, #1
 801e2da:	9303      	str	r3, [sp, #12]
 801e2dc:	b342      	cbz	r2, 801e330 <__hexnan+0x88>
 801e2de:	4610      	mov	r0, r2
 801e2e0:	9105      	str	r1, [sp, #20]
 801e2e2:	9204      	str	r2, [sp, #16]
 801e2e4:	f7ff fd84 	bl	801ddf0 <__hexdig_fun>
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	d143      	bne.n	801e374 <__hexnan+0xcc>
 801e2ec:	9a04      	ldr	r2, [sp, #16]
 801e2ee:	9905      	ldr	r1, [sp, #20]
 801e2f0:	2a20      	cmp	r2, #32
 801e2f2:	d818      	bhi.n	801e326 <__hexnan+0x7e>
 801e2f4:	9b02      	ldr	r3, [sp, #8]
 801e2f6:	459b      	cmp	fp, r3
 801e2f8:	dd13      	ble.n	801e322 <__hexnan+0x7a>
 801e2fa:	454c      	cmp	r4, r9
 801e2fc:	d206      	bcs.n	801e30c <__hexnan+0x64>
 801e2fe:	2d07      	cmp	r5, #7
 801e300:	dc04      	bgt.n	801e30c <__hexnan+0x64>
 801e302:	462a      	mov	r2, r5
 801e304:	4649      	mov	r1, r9
 801e306:	4620      	mov	r0, r4
 801e308:	f7ff ffa8 	bl	801e25c <L_shift>
 801e30c:	4544      	cmp	r4, r8
 801e30e:	d944      	bls.n	801e39a <__hexnan+0xf2>
 801e310:	2300      	movs	r3, #0
 801e312:	f1a4 0904 	sub.w	r9, r4, #4
 801e316:	f844 3c04 	str.w	r3, [r4, #-4]
 801e31a:	f8cd b008 	str.w	fp, [sp, #8]
 801e31e:	464c      	mov	r4, r9
 801e320:	461d      	mov	r5, r3
 801e322:	9903      	ldr	r1, [sp, #12]
 801e324:	e7d7      	b.n	801e2d6 <__hexnan+0x2e>
 801e326:	2a29      	cmp	r2, #41	; 0x29
 801e328:	d14a      	bne.n	801e3c0 <__hexnan+0x118>
 801e32a:	3102      	adds	r1, #2
 801e32c:	f8ca 1000 	str.w	r1, [sl]
 801e330:	f1bb 0f00 	cmp.w	fp, #0
 801e334:	d044      	beq.n	801e3c0 <__hexnan+0x118>
 801e336:	454c      	cmp	r4, r9
 801e338:	d206      	bcs.n	801e348 <__hexnan+0xa0>
 801e33a:	2d07      	cmp	r5, #7
 801e33c:	dc04      	bgt.n	801e348 <__hexnan+0xa0>
 801e33e:	462a      	mov	r2, r5
 801e340:	4649      	mov	r1, r9
 801e342:	4620      	mov	r0, r4
 801e344:	f7ff ff8a 	bl	801e25c <L_shift>
 801e348:	4544      	cmp	r4, r8
 801e34a:	d928      	bls.n	801e39e <__hexnan+0xf6>
 801e34c:	4643      	mov	r3, r8
 801e34e:	f854 2b04 	ldr.w	r2, [r4], #4
 801e352:	f843 2b04 	str.w	r2, [r3], #4
 801e356:	42a6      	cmp	r6, r4
 801e358:	d2f9      	bcs.n	801e34e <__hexnan+0xa6>
 801e35a:	2200      	movs	r2, #0
 801e35c:	f843 2b04 	str.w	r2, [r3], #4
 801e360:	429e      	cmp	r6, r3
 801e362:	d2fb      	bcs.n	801e35c <__hexnan+0xb4>
 801e364:	6833      	ldr	r3, [r6, #0]
 801e366:	b91b      	cbnz	r3, 801e370 <__hexnan+0xc8>
 801e368:	4546      	cmp	r6, r8
 801e36a:	d127      	bne.n	801e3bc <__hexnan+0x114>
 801e36c:	2301      	movs	r3, #1
 801e36e:	6033      	str	r3, [r6, #0]
 801e370:	2005      	movs	r0, #5
 801e372:	e026      	b.n	801e3c2 <__hexnan+0x11a>
 801e374:	3501      	adds	r5, #1
 801e376:	2d08      	cmp	r5, #8
 801e378:	f10b 0b01 	add.w	fp, fp, #1
 801e37c:	dd06      	ble.n	801e38c <__hexnan+0xe4>
 801e37e:	4544      	cmp	r4, r8
 801e380:	d9cf      	bls.n	801e322 <__hexnan+0x7a>
 801e382:	2300      	movs	r3, #0
 801e384:	f844 3c04 	str.w	r3, [r4, #-4]
 801e388:	2501      	movs	r5, #1
 801e38a:	3c04      	subs	r4, #4
 801e38c:	6822      	ldr	r2, [r4, #0]
 801e38e:	f000 000f 	and.w	r0, r0, #15
 801e392:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e396:	6020      	str	r0, [r4, #0]
 801e398:	e7c3      	b.n	801e322 <__hexnan+0x7a>
 801e39a:	2508      	movs	r5, #8
 801e39c:	e7c1      	b.n	801e322 <__hexnan+0x7a>
 801e39e:	9b01      	ldr	r3, [sp, #4]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d0df      	beq.n	801e364 <__hexnan+0xbc>
 801e3a4:	f04f 32ff 	mov.w	r2, #4294967295
 801e3a8:	f1c3 0320 	rsb	r3, r3, #32
 801e3ac:	fa22 f303 	lsr.w	r3, r2, r3
 801e3b0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801e3b4:	401a      	ands	r2, r3
 801e3b6:	f847 2c04 	str.w	r2, [r7, #-4]
 801e3ba:	e7d3      	b.n	801e364 <__hexnan+0xbc>
 801e3bc:	3e04      	subs	r6, #4
 801e3be:	e7d1      	b.n	801e364 <__hexnan+0xbc>
 801e3c0:	2004      	movs	r0, #4
 801e3c2:	b007      	add	sp, #28
 801e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3c8 <__localeconv_l>:
 801e3c8:	30f0      	adds	r0, #240	; 0xf0
 801e3ca:	4770      	bx	lr

0801e3cc <_localeconv_r>:
 801e3cc:	4b04      	ldr	r3, [pc, #16]	; (801e3e0 <_localeconv_r+0x14>)
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	6a18      	ldr	r0, [r3, #32]
 801e3d2:	4b04      	ldr	r3, [pc, #16]	; (801e3e4 <_localeconv_r+0x18>)
 801e3d4:	2800      	cmp	r0, #0
 801e3d6:	bf08      	it	eq
 801e3d8:	4618      	moveq	r0, r3
 801e3da:	30f0      	adds	r0, #240	; 0xf0
 801e3dc:	4770      	bx	lr
 801e3de:	bf00      	nop
 801e3e0:	20000084 	.word	0x20000084
 801e3e4:	200000e8 	.word	0x200000e8

0801e3e8 <__malloc_lock>:
 801e3e8:	4770      	bx	lr

0801e3ea <__malloc_unlock>:
 801e3ea:	4770      	bx	lr

0801e3ec <_Balloc>:
 801e3ec:	b570      	push	{r4, r5, r6, lr}
 801e3ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e3f0:	4604      	mov	r4, r0
 801e3f2:	460e      	mov	r6, r1
 801e3f4:	b93d      	cbnz	r5, 801e406 <_Balloc+0x1a>
 801e3f6:	2010      	movs	r0, #16
 801e3f8:	f7fd f8b0 	bl	801b55c <malloc>
 801e3fc:	6260      	str	r0, [r4, #36]	; 0x24
 801e3fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e402:	6005      	str	r5, [r0, #0]
 801e404:	60c5      	str	r5, [r0, #12]
 801e406:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801e408:	68eb      	ldr	r3, [r5, #12]
 801e40a:	b183      	cbz	r3, 801e42e <_Balloc+0x42>
 801e40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e40e:	68db      	ldr	r3, [r3, #12]
 801e410:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801e414:	b9b8      	cbnz	r0, 801e446 <_Balloc+0x5a>
 801e416:	2101      	movs	r1, #1
 801e418:	fa01 f506 	lsl.w	r5, r1, r6
 801e41c:	1d6a      	adds	r2, r5, #5
 801e41e:	0092      	lsls	r2, r2, #2
 801e420:	4620      	mov	r0, r4
 801e422:	f000 fbe2 	bl	801ebea <_calloc_r>
 801e426:	b160      	cbz	r0, 801e442 <_Balloc+0x56>
 801e428:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801e42c:	e00e      	b.n	801e44c <_Balloc+0x60>
 801e42e:	2221      	movs	r2, #33	; 0x21
 801e430:	2104      	movs	r1, #4
 801e432:	4620      	mov	r0, r4
 801e434:	f000 fbd9 	bl	801ebea <_calloc_r>
 801e438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e43a:	60e8      	str	r0, [r5, #12]
 801e43c:	68db      	ldr	r3, [r3, #12]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d1e4      	bne.n	801e40c <_Balloc+0x20>
 801e442:	2000      	movs	r0, #0
 801e444:	bd70      	pop	{r4, r5, r6, pc}
 801e446:	6802      	ldr	r2, [r0, #0]
 801e448:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801e44c:	2300      	movs	r3, #0
 801e44e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e452:	e7f7      	b.n	801e444 <_Balloc+0x58>

0801e454 <_Bfree>:
 801e454:	b570      	push	{r4, r5, r6, lr}
 801e456:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801e458:	4606      	mov	r6, r0
 801e45a:	460d      	mov	r5, r1
 801e45c:	b93c      	cbnz	r4, 801e46e <_Bfree+0x1a>
 801e45e:	2010      	movs	r0, #16
 801e460:	f7fd f87c 	bl	801b55c <malloc>
 801e464:	6270      	str	r0, [r6, #36]	; 0x24
 801e466:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e46a:	6004      	str	r4, [r0, #0]
 801e46c:	60c4      	str	r4, [r0, #12]
 801e46e:	b13d      	cbz	r5, 801e480 <_Bfree+0x2c>
 801e470:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801e472:	686a      	ldr	r2, [r5, #4]
 801e474:	68db      	ldr	r3, [r3, #12]
 801e476:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e47a:	6029      	str	r1, [r5, #0]
 801e47c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801e480:	bd70      	pop	{r4, r5, r6, pc}

0801e482 <__multadd>:
 801e482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e486:	690d      	ldr	r5, [r1, #16]
 801e488:	461f      	mov	r7, r3
 801e48a:	4606      	mov	r6, r0
 801e48c:	460c      	mov	r4, r1
 801e48e:	f101 0c14 	add.w	ip, r1, #20
 801e492:	2300      	movs	r3, #0
 801e494:	f8dc 0000 	ldr.w	r0, [ip]
 801e498:	b281      	uxth	r1, r0
 801e49a:	fb02 7101 	mla	r1, r2, r1, r7
 801e49e:	0c0f      	lsrs	r7, r1, #16
 801e4a0:	0c00      	lsrs	r0, r0, #16
 801e4a2:	fb02 7000 	mla	r0, r2, r0, r7
 801e4a6:	b289      	uxth	r1, r1
 801e4a8:	3301      	adds	r3, #1
 801e4aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801e4ae:	429d      	cmp	r5, r3
 801e4b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801e4b4:	f84c 1b04 	str.w	r1, [ip], #4
 801e4b8:	dcec      	bgt.n	801e494 <__multadd+0x12>
 801e4ba:	b1d7      	cbz	r7, 801e4f2 <__multadd+0x70>
 801e4bc:	68a3      	ldr	r3, [r4, #8]
 801e4be:	42ab      	cmp	r3, r5
 801e4c0:	dc12      	bgt.n	801e4e8 <__multadd+0x66>
 801e4c2:	6861      	ldr	r1, [r4, #4]
 801e4c4:	4630      	mov	r0, r6
 801e4c6:	3101      	adds	r1, #1
 801e4c8:	f7ff ff90 	bl	801e3ec <_Balloc>
 801e4cc:	6922      	ldr	r2, [r4, #16]
 801e4ce:	3202      	adds	r2, #2
 801e4d0:	f104 010c 	add.w	r1, r4, #12
 801e4d4:	4680      	mov	r8, r0
 801e4d6:	0092      	lsls	r2, r2, #2
 801e4d8:	300c      	adds	r0, #12
 801e4da:	f7fd f870 	bl	801b5be <memcpy>
 801e4de:	4621      	mov	r1, r4
 801e4e0:	4630      	mov	r0, r6
 801e4e2:	f7ff ffb7 	bl	801e454 <_Bfree>
 801e4e6:	4644      	mov	r4, r8
 801e4e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e4ec:	3501      	adds	r5, #1
 801e4ee:	615f      	str	r7, [r3, #20]
 801e4f0:	6125      	str	r5, [r4, #16]
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e4f8 <__s2b>:
 801e4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4fc:	460c      	mov	r4, r1
 801e4fe:	4615      	mov	r5, r2
 801e500:	461f      	mov	r7, r3
 801e502:	2209      	movs	r2, #9
 801e504:	3308      	adds	r3, #8
 801e506:	4606      	mov	r6, r0
 801e508:	fb93 f3f2 	sdiv	r3, r3, r2
 801e50c:	2100      	movs	r1, #0
 801e50e:	2201      	movs	r2, #1
 801e510:	429a      	cmp	r2, r3
 801e512:	db20      	blt.n	801e556 <__s2b+0x5e>
 801e514:	4630      	mov	r0, r6
 801e516:	f7ff ff69 	bl	801e3ec <_Balloc>
 801e51a:	9b08      	ldr	r3, [sp, #32]
 801e51c:	6143      	str	r3, [r0, #20]
 801e51e:	2d09      	cmp	r5, #9
 801e520:	f04f 0301 	mov.w	r3, #1
 801e524:	6103      	str	r3, [r0, #16]
 801e526:	dd19      	ble.n	801e55c <__s2b+0x64>
 801e528:	f104 0809 	add.w	r8, r4, #9
 801e52c:	46c1      	mov	r9, r8
 801e52e:	442c      	add	r4, r5
 801e530:	f819 3b01 	ldrb.w	r3, [r9], #1
 801e534:	4601      	mov	r1, r0
 801e536:	3b30      	subs	r3, #48	; 0x30
 801e538:	220a      	movs	r2, #10
 801e53a:	4630      	mov	r0, r6
 801e53c:	f7ff ffa1 	bl	801e482 <__multadd>
 801e540:	45a1      	cmp	r9, r4
 801e542:	d1f5      	bne.n	801e530 <__s2b+0x38>
 801e544:	eb08 0405 	add.w	r4, r8, r5
 801e548:	3c08      	subs	r4, #8
 801e54a:	1b2d      	subs	r5, r5, r4
 801e54c:	1963      	adds	r3, r4, r5
 801e54e:	42bb      	cmp	r3, r7
 801e550:	db07      	blt.n	801e562 <__s2b+0x6a>
 801e552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e556:	0052      	lsls	r2, r2, #1
 801e558:	3101      	adds	r1, #1
 801e55a:	e7d9      	b.n	801e510 <__s2b+0x18>
 801e55c:	340a      	adds	r4, #10
 801e55e:	2509      	movs	r5, #9
 801e560:	e7f3      	b.n	801e54a <__s2b+0x52>
 801e562:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e566:	4601      	mov	r1, r0
 801e568:	3b30      	subs	r3, #48	; 0x30
 801e56a:	220a      	movs	r2, #10
 801e56c:	4630      	mov	r0, r6
 801e56e:	f7ff ff88 	bl	801e482 <__multadd>
 801e572:	e7eb      	b.n	801e54c <__s2b+0x54>

0801e574 <__hi0bits>:
 801e574:	0c02      	lsrs	r2, r0, #16
 801e576:	0412      	lsls	r2, r2, #16
 801e578:	4603      	mov	r3, r0
 801e57a:	b9b2      	cbnz	r2, 801e5aa <__hi0bits+0x36>
 801e57c:	0403      	lsls	r3, r0, #16
 801e57e:	2010      	movs	r0, #16
 801e580:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e584:	bf04      	itt	eq
 801e586:	021b      	lsleq	r3, r3, #8
 801e588:	3008      	addeq	r0, #8
 801e58a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e58e:	bf04      	itt	eq
 801e590:	011b      	lsleq	r3, r3, #4
 801e592:	3004      	addeq	r0, #4
 801e594:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e598:	bf04      	itt	eq
 801e59a:	009b      	lsleq	r3, r3, #2
 801e59c:	3002      	addeq	r0, #2
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	db06      	blt.n	801e5b0 <__hi0bits+0x3c>
 801e5a2:	005b      	lsls	r3, r3, #1
 801e5a4:	d503      	bpl.n	801e5ae <__hi0bits+0x3a>
 801e5a6:	3001      	adds	r0, #1
 801e5a8:	4770      	bx	lr
 801e5aa:	2000      	movs	r0, #0
 801e5ac:	e7e8      	b.n	801e580 <__hi0bits+0xc>
 801e5ae:	2020      	movs	r0, #32
 801e5b0:	4770      	bx	lr

0801e5b2 <__lo0bits>:
 801e5b2:	6803      	ldr	r3, [r0, #0]
 801e5b4:	f013 0207 	ands.w	r2, r3, #7
 801e5b8:	4601      	mov	r1, r0
 801e5ba:	d00b      	beq.n	801e5d4 <__lo0bits+0x22>
 801e5bc:	07da      	lsls	r2, r3, #31
 801e5be:	d423      	bmi.n	801e608 <__lo0bits+0x56>
 801e5c0:	0798      	lsls	r0, r3, #30
 801e5c2:	bf49      	itett	mi
 801e5c4:	085b      	lsrmi	r3, r3, #1
 801e5c6:	089b      	lsrpl	r3, r3, #2
 801e5c8:	2001      	movmi	r0, #1
 801e5ca:	600b      	strmi	r3, [r1, #0]
 801e5cc:	bf5c      	itt	pl
 801e5ce:	600b      	strpl	r3, [r1, #0]
 801e5d0:	2002      	movpl	r0, #2
 801e5d2:	4770      	bx	lr
 801e5d4:	b298      	uxth	r0, r3
 801e5d6:	b9a8      	cbnz	r0, 801e604 <__lo0bits+0x52>
 801e5d8:	0c1b      	lsrs	r3, r3, #16
 801e5da:	2010      	movs	r0, #16
 801e5dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e5e0:	bf04      	itt	eq
 801e5e2:	0a1b      	lsreq	r3, r3, #8
 801e5e4:	3008      	addeq	r0, #8
 801e5e6:	071a      	lsls	r2, r3, #28
 801e5e8:	bf04      	itt	eq
 801e5ea:	091b      	lsreq	r3, r3, #4
 801e5ec:	3004      	addeq	r0, #4
 801e5ee:	079a      	lsls	r2, r3, #30
 801e5f0:	bf04      	itt	eq
 801e5f2:	089b      	lsreq	r3, r3, #2
 801e5f4:	3002      	addeq	r0, #2
 801e5f6:	07da      	lsls	r2, r3, #31
 801e5f8:	d402      	bmi.n	801e600 <__lo0bits+0x4e>
 801e5fa:	085b      	lsrs	r3, r3, #1
 801e5fc:	d006      	beq.n	801e60c <__lo0bits+0x5a>
 801e5fe:	3001      	adds	r0, #1
 801e600:	600b      	str	r3, [r1, #0]
 801e602:	4770      	bx	lr
 801e604:	4610      	mov	r0, r2
 801e606:	e7e9      	b.n	801e5dc <__lo0bits+0x2a>
 801e608:	2000      	movs	r0, #0
 801e60a:	4770      	bx	lr
 801e60c:	2020      	movs	r0, #32
 801e60e:	4770      	bx	lr

0801e610 <__i2b>:
 801e610:	b510      	push	{r4, lr}
 801e612:	460c      	mov	r4, r1
 801e614:	2101      	movs	r1, #1
 801e616:	f7ff fee9 	bl	801e3ec <_Balloc>
 801e61a:	2201      	movs	r2, #1
 801e61c:	6144      	str	r4, [r0, #20]
 801e61e:	6102      	str	r2, [r0, #16]
 801e620:	bd10      	pop	{r4, pc}

0801e622 <__multiply>:
 801e622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e626:	4614      	mov	r4, r2
 801e628:	690a      	ldr	r2, [r1, #16]
 801e62a:	6923      	ldr	r3, [r4, #16]
 801e62c:	429a      	cmp	r2, r3
 801e62e:	bfb8      	it	lt
 801e630:	460b      	movlt	r3, r1
 801e632:	4688      	mov	r8, r1
 801e634:	bfbc      	itt	lt
 801e636:	46a0      	movlt	r8, r4
 801e638:	461c      	movlt	r4, r3
 801e63a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e63e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e646:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e64a:	eb07 0609 	add.w	r6, r7, r9
 801e64e:	42b3      	cmp	r3, r6
 801e650:	bfb8      	it	lt
 801e652:	3101      	addlt	r1, #1
 801e654:	f7ff feca 	bl	801e3ec <_Balloc>
 801e658:	f100 0514 	add.w	r5, r0, #20
 801e65c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801e660:	462b      	mov	r3, r5
 801e662:	2200      	movs	r2, #0
 801e664:	4573      	cmp	r3, lr
 801e666:	d316      	bcc.n	801e696 <__multiply+0x74>
 801e668:	f104 0214 	add.w	r2, r4, #20
 801e66c:	f108 0114 	add.w	r1, r8, #20
 801e670:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801e674:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801e678:	9300      	str	r3, [sp, #0]
 801e67a:	9b00      	ldr	r3, [sp, #0]
 801e67c:	9201      	str	r2, [sp, #4]
 801e67e:	4293      	cmp	r3, r2
 801e680:	d80c      	bhi.n	801e69c <__multiply+0x7a>
 801e682:	2e00      	cmp	r6, #0
 801e684:	dd03      	ble.n	801e68e <__multiply+0x6c>
 801e686:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d05d      	beq.n	801e74a <__multiply+0x128>
 801e68e:	6106      	str	r6, [r0, #16]
 801e690:	b003      	add	sp, #12
 801e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e696:	f843 2b04 	str.w	r2, [r3], #4
 801e69a:	e7e3      	b.n	801e664 <__multiply+0x42>
 801e69c:	f8b2 b000 	ldrh.w	fp, [r2]
 801e6a0:	f1bb 0f00 	cmp.w	fp, #0
 801e6a4:	d023      	beq.n	801e6ee <__multiply+0xcc>
 801e6a6:	4689      	mov	r9, r1
 801e6a8:	46ac      	mov	ip, r5
 801e6aa:	f04f 0800 	mov.w	r8, #0
 801e6ae:	f859 4b04 	ldr.w	r4, [r9], #4
 801e6b2:	f8dc a000 	ldr.w	sl, [ip]
 801e6b6:	b2a3      	uxth	r3, r4
 801e6b8:	fa1f fa8a 	uxth.w	sl, sl
 801e6bc:	fb0b a303 	mla	r3, fp, r3, sl
 801e6c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e6c4:	f8dc 4000 	ldr.w	r4, [ip]
 801e6c8:	4443      	add	r3, r8
 801e6ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801e6ce:	fb0b 840a 	mla	r4, fp, sl, r8
 801e6d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801e6d6:	46e2      	mov	sl, ip
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801e6de:	454f      	cmp	r7, r9
 801e6e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801e6e4:	f84a 3b04 	str.w	r3, [sl], #4
 801e6e8:	d82b      	bhi.n	801e742 <__multiply+0x120>
 801e6ea:	f8cc 8004 	str.w	r8, [ip, #4]
 801e6ee:	9b01      	ldr	r3, [sp, #4]
 801e6f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801e6f4:	3204      	adds	r2, #4
 801e6f6:	f1ba 0f00 	cmp.w	sl, #0
 801e6fa:	d020      	beq.n	801e73e <__multiply+0x11c>
 801e6fc:	682b      	ldr	r3, [r5, #0]
 801e6fe:	4689      	mov	r9, r1
 801e700:	46a8      	mov	r8, r5
 801e702:	f04f 0b00 	mov.w	fp, #0
 801e706:	f8b9 c000 	ldrh.w	ip, [r9]
 801e70a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801e70e:	fb0a 440c 	mla	r4, sl, ip, r4
 801e712:	445c      	add	r4, fp
 801e714:	46c4      	mov	ip, r8
 801e716:	b29b      	uxth	r3, r3
 801e718:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801e71c:	f84c 3b04 	str.w	r3, [ip], #4
 801e720:	f859 3b04 	ldr.w	r3, [r9], #4
 801e724:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801e728:	0c1b      	lsrs	r3, r3, #16
 801e72a:	fb0a b303 	mla	r3, sl, r3, fp
 801e72e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801e732:	454f      	cmp	r7, r9
 801e734:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801e738:	d805      	bhi.n	801e746 <__multiply+0x124>
 801e73a:	f8c8 3004 	str.w	r3, [r8, #4]
 801e73e:	3504      	adds	r5, #4
 801e740:	e79b      	b.n	801e67a <__multiply+0x58>
 801e742:	46d4      	mov	ip, sl
 801e744:	e7b3      	b.n	801e6ae <__multiply+0x8c>
 801e746:	46e0      	mov	r8, ip
 801e748:	e7dd      	b.n	801e706 <__multiply+0xe4>
 801e74a:	3e01      	subs	r6, #1
 801e74c:	e799      	b.n	801e682 <__multiply+0x60>
	...

0801e750 <__pow5mult>:
 801e750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e754:	4615      	mov	r5, r2
 801e756:	f012 0203 	ands.w	r2, r2, #3
 801e75a:	4606      	mov	r6, r0
 801e75c:	460f      	mov	r7, r1
 801e75e:	d007      	beq.n	801e770 <__pow5mult+0x20>
 801e760:	3a01      	subs	r2, #1
 801e762:	4c21      	ldr	r4, [pc, #132]	; (801e7e8 <__pow5mult+0x98>)
 801e764:	2300      	movs	r3, #0
 801e766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e76a:	f7ff fe8a 	bl	801e482 <__multadd>
 801e76e:	4607      	mov	r7, r0
 801e770:	10ad      	asrs	r5, r5, #2
 801e772:	d035      	beq.n	801e7e0 <__pow5mult+0x90>
 801e774:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e776:	b93c      	cbnz	r4, 801e788 <__pow5mult+0x38>
 801e778:	2010      	movs	r0, #16
 801e77a:	f7fc feef 	bl	801b55c <malloc>
 801e77e:	6270      	str	r0, [r6, #36]	; 0x24
 801e780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e784:	6004      	str	r4, [r0, #0]
 801e786:	60c4      	str	r4, [r0, #12]
 801e788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e78c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e790:	b94c      	cbnz	r4, 801e7a6 <__pow5mult+0x56>
 801e792:	f240 2171 	movw	r1, #625	; 0x271
 801e796:	4630      	mov	r0, r6
 801e798:	f7ff ff3a 	bl	801e610 <__i2b>
 801e79c:	2300      	movs	r3, #0
 801e79e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e7a2:	4604      	mov	r4, r0
 801e7a4:	6003      	str	r3, [r0, #0]
 801e7a6:	f04f 0800 	mov.w	r8, #0
 801e7aa:	07eb      	lsls	r3, r5, #31
 801e7ac:	d50a      	bpl.n	801e7c4 <__pow5mult+0x74>
 801e7ae:	4639      	mov	r1, r7
 801e7b0:	4622      	mov	r2, r4
 801e7b2:	4630      	mov	r0, r6
 801e7b4:	f7ff ff35 	bl	801e622 <__multiply>
 801e7b8:	4639      	mov	r1, r7
 801e7ba:	4681      	mov	r9, r0
 801e7bc:	4630      	mov	r0, r6
 801e7be:	f7ff fe49 	bl	801e454 <_Bfree>
 801e7c2:	464f      	mov	r7, r9
 801e7c4:	106d      	asrs	r5, r5, #1
 801e7c6:	d00b      	beq.n	801e7e0 <__pow5mult+0x90>
 801e7c8:	6820      	ldr	r0, [r4, #0]
 801e7ca:	b938      	cbnz	r0, 801e7dc <__pow5mult+0x8c>
 801e7cc:	4622      	mov	r2, r4
 801e7ce:	4621      	mov	r1, r4
 801e7d0:	4630      	mov	r0, r6
 801e7d2:	f7ff ff26 	bl	801e622 <__multiply>
 801e7d6:	6020      	str	r0, [r4, #0]
 801e7d8:	f8c0 8000 	str.w	r8, [r0]
 801e7dc:	4604      	mov	r4, r0
 801e7de:	e7e4      	b.n	801e7aa <__pow5mult+0x5a>
 801e7e0:	4638      	mov	r0, r7
 801e7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7e6:	bf00      	nop
 801e7e8:	08024d00 	.word	0x08024d00

0801e7ec <__lshift>:
 801e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7f0:	460c      	mov	r4, r1
 801e7f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e7f6:	6923      	ldr	r3, [r4, #16]
 801e7f8:	6849      	ldr	r1, [r1, #4]
 801e7fa:	eb0a 0903 	add.w	r9, sl, r3
 801e7fe:	68a3      	ldr	r3, [r4, #8]
 801e800:	4607      	mov	r7, r0
 801e802:	4616      	mov	r6, r2
 801e804:	f109 0501 	add.w	r5, r9, #1
 801e808:	42ab      	cmp	r3, r5
 801e80a:	db32      	blt.n	801e872 <__lshift+0x86>
 801e80c:	4638      	mov	r0, r7
 801e80e:	f7ff fded 	bl	801e3ec <_Balloc>
 801e812:	2300      	movs	r3, #0
 801e814:	4680      	mov	r8, r0
 801e816:	f100 0114 	add.w	r1, r0, #20
 801e81a:	461a      	mov	r2, r3
 801e81c:	4553      	cmp	r3, sl
 801e81e:	db2b      	blt.n	801e878 <__lshift+0x8c>
 801e820:	6920      	ldr	r0, [r4, #16]
 801e822:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e826:	f104 0314 	add.w	r3, r4, #20
 801e82a:	f016 021f 	ands.w	r2, r6, #31
 801e82e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e832:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e836:	d025      	beq.n	801e884 <__lshift+0x98>
 801e838:	f1c2 0e20 	rsb	lr, r2, #32
 801e83c:	2000      	movs	r0, #0
 801e83e:	681e      	ldr	r6, [r3, #0]
 801e840:	468a      	mov	sl, r1
 801e842:	4096      	lsls	r6, r2
 801e844:	4330      	orrs	r0, r6
 801e846:	f84a 0b04 	str.w	r0, [sl], #4
 801e84a:	f853 0b04 	ldr.w	r0, [r3], #4
 801e84e:	459c      	cmp	ip, r3
 801e850:	fa20 f00e 	lsr.w	r0, r0, lr
 801e854:	d814      	bhi.n	801e880 <__lshift+0x94>
 801e856:	6048      	str	r0, [r1, #4]
 801e858:	b108      	cbz	r0, 801e85e <__lshift+0x72>
 801e85a:	f109 0502 	add.w	r5, r9, #2
 801e85e:	3d01      	subs	r5, #1
 801e860:	4638      	mov	r0, r7
 801e862:	f8c8 5010 	str.w	r5, [r8, #16]
 801e866:	4621      	mov	r1, r4
 801e868:	f7ff fdf4 	bl	801e454 <_Bfree>
 801e86c:	4640      	mov	r0, r8
 801e86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e872:	3101      	adds	r1, #1
 801e874:	005b      	lsls	r3, r3, #1
 801e876:	e7c7      	b.n	801e808 <__lshift+0x1c>
 801e878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801e87c:	3301      	adds	r3, #1
 801e87e:	e7cd      	b.n	801e81c <__lshift+0x30>
 801e880:	4651      	mov	r1, sl
 801e882:	e7dc      	b.n	801e83e <__lshift+0x52>
 801e884:	3904      	subs	r1, #4
 801e886:	f853 2b04 	ldr.w	r2, [r3], #4
 801e88a:	f841 2f04 	str.w	r2, [r1, #4]!
 801e88e:	459c      	cmp	ip, r3
 801e890:	d8f9      	bhi.n	801e886 <__lshift+0x9a>
 801e892:	e7e4      	b.n	801e85e <__lshift+0x72>

0801e894 <__mcmp>:
 801e894:	6903      	ldr	r3, [r0, #16]
 801e896:	690a      	ldr	r2, [r1, #16]
 801e898:	1a9b      	subs	r3, r3, r2
 801e89a:	b530      	push	{r4, r5, lr}
 801e89c:	d10c      	bne.n	801e8b8 <__mcmp+0x24>
 801e89e:	0092      	lsls	r2, r2, #2
 801e8a0:	3014      	adds	r0, #20
 801e8a2:	3114      	adds	r1, #20
 801e8a4:	1884      	adds	r4, r0, r2
 801e8a6:	4411      	add	r1, r2
 801e8a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e8ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e8b0:	4295      	cmp	r5, r2
 801e8b2:	d003      	beq.n	801e8bc <__mcmp+0x28>
 801e8b4:	d305      	bcc.n	801e8c2 <__mcmp+0x2e>
 801e8b6:	2301      	movs	r3, #1
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	bd30      	pop	{r4, r5, pc}
 801e8bc:	42a0      	cmp	r0, r4
 801e8be:	d3f3      	bcc.n	801e8a8 <__mcmp+0x14>
 801e8c0:	e7fa      	b.n	801e8b8 <__mcmp+0x24>
 801e8c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e8c6:	e7f7      	b.n	801e8b8 <__mcmp+0x24>

0801e8c8 <__mdiff>:
 801e8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8cc:	460d      	mov	r5, r1
 801e8ce:	4607      	mov	r7, r0
 801e8d0:	4611      	mov	r1, r2
 801e8d2:	4628      	mov	r0, r5
 801e8d4:	4614      	mov	r4, r2
 801e8d6:	f7ff ffdd 	bl	801e894 <__mcmp>
 801e8da:	1e06      	subs	r6, r0, #0
 801e8dc:	d108      	bne.n	801e8f0 <__mdiff+0x28>
 801e8de:	4631      	mov	r1, r6
 801e8e0:	4638      	mov	r0, r7
 801e8e2:	f7ff fd83 	bl	801e3ec <_Balloc>
 801e8e6:	2301      	movs	r3, #1
 801e8e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801e8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8f0:	bfa4      	itt	ge
 801e8f2:	4623      	movge	r3, r4
 801e8f4:	462c      	movge	r4, r5
 801e8f6:	4638      	mov	r0, r7
 801e8f8:	6861      	ldr	r1, [r4, #4]
 801e8fa:	bfa6      	itte	ge
 801e8fc:	461d      	movge	r5, r3
 801e8fe:	2600      	movge	r6, #0
 801e900:	2601      	movlt	r6, #1
 801e902:	f7ff fd73 	bl	801e3ec <_Balloc>
 801e906:	692b      	ldr	r3, [r5, #16]
 801e908:	60c6      	str	r6, [r0, #12]
 801e90a:	6926      	ldr	r6, [r4, #16]
 801e90c:	f105 0914 	add.w	r9, r5, #20
 801e910:	f104 0214 	add.w	r2, r4, #20
 801e914:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801e918:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801e91c:	f100 0514 	add.w	r5, r0, #20
 801e920:	f04f 0e00 	mov.w	lr, #0
 801e924:	f852 ab04 	ldr.w	sl, [r2], #4
 801e928:	f859 4b04 	ldr.w	r4, [r9], #4
 801e92c:	fa1e f18a 	uxtah	r1, lr, sl
 801e930:	b2a3      	uxth	r3, r4
 801e932:	1ac9      	subs	r1, r1, r3
 801e934:	0c23      	lsrs	r3, r4, #16
 801e936:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801e93a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801e93e:	b289      	uxth	r1, r1
 801e940:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801e944:	45c8      	cmp	r8, r9
 801e946:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801e94a:	4694      	mov	ip, r2
 801e94c:	f845 3b04 	str.w	r3, [r5], #4
 801e950:	d8e8      	bhi.n	801e924 <__mdiff+0x5c>
 801e952:	45bc      	cmp	ip, r7
 801e954:	d304      	bcc.n	801e960 <__mdiff+0x98>
 801e956:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801e95a:	b183      	cbz	r3, 801e97e <__mdiff+0xb6>
 801e95c:	6106      	str	r6, [r0, #16]
 801e95e:	e7c5      	b.n	801e8ec <__mdiff+0x24>
 801e960:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e964:	fa1e f381 	uxtah	r3, lr, r1
 801e968:	141a      	asrs	r2, r3, #16
 801e96a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e96e:	b29b      	uxth	r3, r3
 801e970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e974:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801e978:	f845 3b04 	str.w	r3, [r5], #4
 801e97c:	e7e9      	b.n	801e952 <__mdiff+0x8a>
 801e97e:	3e01      	subs	r6, #1
 801e980:	e7e9      	b.n	801e956 <__mdiff+0x8e>
	...

0801e984 <__ulp>:
 801e984:	4b12      	ldr	r3, [pc, #72]	; (801e9d0 <__ulp+0x4c>)
 801e986:	ee10 2a90 	vmov	r2, s1
 801e98a:	401a      	ands	r2, r3
 801e98c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801e990:	2b00      	cmp	r3, #0
 801e992:	dd04      	ble.n	801e99e <__ulp+0x1a>
 801e994:	2000      	movs	r0, #0
 801e996:	4619      	mov	r1, r3
 801e998:	ec41 0b10 	vmov	d0, r0, r1
 801e99c:	4770      	bx	lr
 801e99e:	425b      	negs	r3, r3
 801e9a0:	151b      	asrs	r3, r3, #20
 801e9a2:	2b13      	cmp	r3, #19
 801e9a4:	f04f 0000 	mov.w	r0, #0
 801e9a8:	f04f 0100 	mov.w	r1, #0
 801e9ac:	dc04      	bgt.n	801e9b8 <__ulp+0x34>
 801e9ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801e9b2:	fa42 f103 	asr.w	r1, r2, r3
 801e9b6:	e7ef      	b.n	801e998 <__ulp+0x14>
 801e9b8:	3b14      	subs	r3, #20
 801e9ba:	2b1e      	cmp	r3, #30
 801e9bc:	f04f 0201 	mov.w	r2, #1
 801e9c0:	bfda      	itte	le
 801e9c2:	f1c3 031f 	rsble	r3, r3, #31
 801e9c6:	fa02 f303 	lslle.w	r3, r2, r3
 801e9ca:	4613      	movgt	r3, r2
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	e7e3      	b.n	801e998 <__ulp+0x14>
 801e9d0:	7ff00000 	.word	0x7ff00000

0801e9d4 <__b2d>:
 801e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9d6:	6905      	ldr	r5, [r0, #16]
 801e9d8:	f100 0714 	add.w	r7, r0, #20
 801e9dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e9e0:	1f2e      	subs	r6, r5, #4
 801e9e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e9e6:	4620      	mov	r0, r4
 801e9e8:	f7ff fdc4 	bl	801e574 <__hi0bits>
 801e9ec:	f1c0 0320 	rsb	r3, r0, #32
 801e9f0:	280a      	cmp	r0, #10
 801e9f2:	600b      	str	r3, [r1, #0]
 801e9f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801ea6c <__b2d+0x98>
 801e9f8:	dc14      	bgt.n	801ea24 <__b2d+0x50>
 801e9fa:	f1c0 0e0b 	rsb	lr, r0, #11
 801e9fe:	fa24 f10e 	lsr.w	r1, r4, lr
 801ea02:	42b7      	cmp	r7, r6
 801ea04:	ea41 030c 	orr.w	r3, r1, ip
 801ea08:	bf34      	ite	cc
 801ea0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ea0e:	2100      	movcs	r1, #0
 801ea10:	3015      	adds	r0, #21
 801ea12:	fa04 f000 	lsl.w	r0, r4, r0
 801ea16:	fa21 f10e 	lsr.w	r1, r1, lr
 801ea1a:	ea40 0201 	orr.w	r2, r0, r1
 801ea1e:	ec43 2b10 	vmov	d0, r2, r3
 801ea22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea24:	42b7      	cmp	r7, r6
 801ea26:	bf3a      	itte	cc
 801ea28:	f1a5 0608 	subcc.w	r6, r5, #8
 801ea2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ea30:	2100      	movcs	r1, #0
 801ea32:	380b      	subs	r0, #11
 801ea34:	d015      	beq.n	801ea62 <__b2d+0x8e>
 801ea36:	4084      	lsls	r4, r0
 801ea38:	f1c0 0520 	rsb	r5, r0, #32
 801ea3c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801ea40:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801ea44:	42be      	cmp	r6, r7
 801ea46:	fa21 fc05 	lsr.w	ip, r1, r5
 801ea4a:	ea44 030c 	orr.w	r3, r4, ip
 801ea4e:	bf8c      	ite	hi
 801ea50:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ea54:	2400      	movls	r4, #0
 801ea56:	fa01 f000 	lsl.w	r0, r1, r0
 801ea5a:	40ec      	lsrs	r4, r5
 801ea5c:	ea40 0204 	orr.w	r2, r0, r4
 801ea60:	e7dd      	b.n	801ea1e <__b2d+0x4a>
 801ea62:	ea44 030c 	orr.w	r3, r4, ip
 801ea66:	460a      	mov	r2, r1
 801ea68:	e7d9      	b.n	801ea1e <__b2d+0x4a>
 801ea6a:	bf00      	nop
 801ea6c:	3ff00000 	.word	0x3ff00000

0801ea70 <__d2b>:
 801ea70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ea74:	460e      	mov	r6, r1
 801ea76:	2101      	movs	r1, #1
 801ea78:	ec59 8b10 	vmov	r8, r9, d0
 801ea7c:	4615      	mov	r5, r2
 801ea7e:	f7ff fcb5 	bl	801e3ec <_Balloc>
 801ea82:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801ea86:	4607      	mov	r7, r0
 801ea88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ea8c:	bb34      	cbnz	r4, 801eadc <__d2b+0x6c>
 801ea8e:	9301      	str	r3, [sp, #4]
 801ea90:	f1b8 0300 	subs.w	r3, r8, #0
 801ea94:	d027      	beq.n	801eae6 <__d2b+0x76>
 801ea96:	a802      	add	r0, sp, #8
 801ea98:	f840 3d08 	str.w	r3, [r0, #-8]!
 801ea9c:	f7ff fd89 	bl	801e5b2 <__lo0bits>
 801eaa0:	9900      	ldr	r1, [sp, #0]
 801eaa2:	b1f0      	cbz	r0, 801eae2 <__d2b+0x72>
 801eaa4:	9a01      	ldr	r2, [sp, #4]
 801eaa6:	f1c0 0320 	rsb	r3, r0, #32
 801eaaa:	fa02 f303 	lsl.w	r3, r2, r3
 801eaae:	430b      	orrs	r3, r1
 801eab0:	40c2      	lsrs	r2, r0
 801eab2:	617b      	str	r3, [r7, #20]
 801eab4:	9201      	str	r2, [sp, #4]
 801eab6:	9b01      	ldr	r3, [sp, #4]
 801eab8:	61bb      	str	r3, [r7, #24]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	bf14      	ite	ne
 801eabe:	2102      	movne	r1, #2
 801eac0:	2101      	moveq	r1, #1
 801eac2:	6139      	str	r1, [r7, #16]
 801eac4:	b1c4      	cbz	r4, 801eaf8 <__d2b+0x88>
 801eac6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801eaca:	4404      	add	r4, r0
 801eacc:	6034      	str	r4, [r6, #0]
 801eace:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ead2:	6028      	str	r0, [r5, #0]
 801ead4:	4638      	mov	r0, r7
 801ead6:	b003      	add	sp, #12
 801ead8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eadc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801eae0:	e7d5      	b.n	801ea8e <__d2b+0x1e>
 801eae2:	6179      	str	r1, [r7, #20]
 801eae4:	e7e7      	b.n	801eab6 <__d2b+0x46>
 801eae6:	a801      	add	r0, sp, #4
 801eae8:	f7ff fd63 	bl	801e5b2 <__lo0bits>
 801eaec:	9b01      	ldr	r3, [sp, #4]
 801eaee:	617b      	str	r3, [r7, #20]
 801eaf0:	2101      	movs	r1, #1
 801eaf2:	6139      	str	r1, [r7, #16]
 801eaf4:	3020      	adds	r0, #32
 801eaf6:	e7e5      	b.n	801eac4 <__d2b+0x54>
 801eaf8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801eafc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801eb00:	6030      	str	r0, [r6, #0]
 801eb02:	6918      	ldr	r0, [r3, #16]
 801eb04:	f7ff fd36 	bl	801e574 <__hi0bits>
 801eb08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801eb0c:	e7e1      	b.n	801ead2 <__d2b+0x62>

0801eb0e <__ratio>:
 801eb0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb12:	4688      	mov	r8, r1
 801eb14:	4669      	mov	r1, sp
 801eb16:	4681      	mov	r9, r0
 801eb18:	f7ff ff5c 	bl	801e9d4 <__b2d>
 801eb1c:	a901      	add	r1, sp, #4
 801eb1e:	4640      	mov	r0, r8
 801eb20:	ec57 6b10 	vmov	r6, r7, d0
 801eb24:	f7ff ff56 	bl	801e9d4 <__b2d>
 801eb28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801eb2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801eb30:	eba3 0c02 	sub.w	ip, r3, r2
 801eb34:	e9dd 3200 	ldrd	r3, r2, [sp]
 801eb38:	1a9b      	subs	r3, r3, r2
 801eb3a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801eb3e:	ec5b ab10 	vmov	sl, fp, d0
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	bfce      	itee	gt
 801eb46:	463a      	movgt	r2, r7
 801eb48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801eb4c:	465a      	movle	r2, fp
 801eb4e:	4659      	mov	r1, fp
 801eb50:	463d      	mov	r5, r7
 801eb52:	bfd4      	ite	le
 801eb54:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801eb58:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801eb5c:	4630      	mov	r0, r6
 801eb5e:	ee10 2a10 	vmov	r2, s0
 801eb62:	460b      	mov	r3, r1
 801eb64:	4629      	mov	r1, r5
 801eb66:	f7e1 fe81 	bl	800086c <__aeabi_ddiv>
 801eb6a:	ec41 0b10 	vmov	d0, r0, r1
 801eb6e:	b003      	add	sp, #12
 801eb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb74 <__copybits>:
 801eb74:	3901      	subs	r1, #1
 801eb76:	b510      	push	{r4, lr}
 801eb78:	1149      	asrs	r1, r1, #5
 801eb7a:	6914      	ldr	r4, [r2, #16]
 801eb7c:	3101      	adds	r1, #1
 801eb7e:	f102 0314 	add.w	r3, r2, #20
 801eb82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801eb86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eb8a:	42a3      	cmp	r3, r4
 801eb8c:	4602      	mov	r2, r0
 801eb8e:	d303      	bcc.n	801eb98 <__copybits+0x24>
 801eb90:	2300      	movs	r3, #0
 801eb92:	428a      	cmp	r2, r1
 801eb94:	d305      	bcc.n	801eba2 <__copybits+0x2e>
 801eb96:	bd10      	pop	{r4, pc}
 801eb98:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb9c:	f840 2b04 	str.w	r2, [r0], #4
 801eba0:	e7f3      	b.n	801eb8a <__copybits+0x16>
 801eba2:	f842 3b04 	str.w	r3, [r2], #4
 801eba6:	e7f4      	b.n	801eb92 <__copybits+0x1e>

0801eba8 <__any_on>:
 801eba8:	f100 0214 	add.w	r2, r0, #20
 801ebac:	6900      	ldr	r0, [r0, #16]
 801ebae:	114b      	asrs	r3, r1, #5
 801ebb0:	4298      	cmp	r0, r3
 801ebb2:	b510      	push	{r4, lr}
 801ebb4:	db11      	blt.n	801ebda <__any_on+0x32>
 801ebb6:	dd0a      	ble.n	801ebce <__any_on+0x26>
 801ebb8:	f011 011f 	ands.w	r1, r1, #31
 801ebbc:	d007      	beq.n	801ebce <__any_on+0x26>
 801ebbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ebc2:	fa24 f001 	lsr.w	r0, r4, r1
 801ebc6:	fa00 f101 	lsl.w	r1, r0, r1
 801ebca:	428c      	cmp	r4, r1
 801ebcc:	d10b      	bne.n	801ebe6 <__any_on+0x3e>
 801ebce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ebd2:	4293      	cmp	r3, r2
 801ebd4:	d803      	bhi.n	801ebde <__any_on+0x36>
 801ebd6:	2000      	movs	r0, #0
 801ebd8:	bd10      	pop	{r4, pc}
 801ebda:	4603      	mov	r3, r0
 801ebdc:	e7f7      	b.n	801ebce <__any_on+0x26>
 801ebde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ebe2:	2900      	cmp	r1, #0
 801ebe4:	d0f5      	beq.n	801ebd2 <__any_on+0x2a>
 801ebe6:	2001      	movs	r0, #1
 801ebe8:	e7f6      	b.n	801ebd8 <__any_on+0x30>

0801ebea <_calloc_r>:
 801ebea:	b538      	push	{r3, r4, r5, lr}
 801ebec:	fb02 f401 	mul.w	r4, r2, r1
 801ebf0:	4621      	mov	r1, r4
 801ebf2:	f7fc fd5f 	bl	801b6b4 <_malloc_r>
 801ebf6:	4605      	mov	r5, r0
 801ebf8:	b118      	cbz	r0, 801ec02 <_calloc_r+0x18>
 801ebfa:	4622      	mov	r2, r4
 801ebfc:	2100      	movs	r1, #0
 801ebfe:	f7fc fd02 	bl	801b606 <memset>
 801ec02:	4628      	mov	r0, r5
 801ec04:	bd38      	pop	{r3, r4, r5, pc}

0801ec06 <__ssputs_r>:
 801ec06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec0a:	688e      	ldr	r6, [r1, #8]
 801ec0c:	429e      	cmp	r6, r3
 801ec0e:	4682      	mov	sl, r0
 801ec10:	460c      	mov	r4, r1
 801ec12:	4690      	mov	r8, r2
 801ec14:	4699      	mov	r9, r3
 801ec16:	d837      	bhi.n	801ec88 <__ssputs_r+0x82>
 801ec18:	898a      	ldrh	r2, [r1, #12]
 801ec1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ec1e:	d031      	beq.n	801ec84 <__ssputs_r+0x7e>
 801ec20:	6825      	ldr	r5, [r4, #0]
 801ec22:	6909      	ldr	r1, [r1, #16]
 801ec24:	1a6f      	subs	r7, r5, r1
 801ec26:	6965      	ldr	r5, [r4, #20]
 801ec28:	2302      	movs	r3, #2
 801ec2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec2e:	fb95 f5f3 	sdiv	r5, r5, r3
 801ec32:	f109 0301 	add.w	r3, r9, #1
 801ec36:	443b      	add	r3, r7
 801ec38:	429d      	cmp	r5, r3
 801ec3a:	bf38      	it	cc
 801ec3c:	461d      	movcc	r5, r3
 801ec3e:	0553      	lsls	r3, r2, #21
 801ec40:	d530      	bpl.n	801eca4 <__ssputs_r+0x9e>
 801ec42:	4629      	mov	r1, r5
 801ec44:	f7fc fd36 	bl	801b6b4 <_malloc_r>
 801ec48:	4606      	mov	r6, r0
 801ec4a:	b950      	cbnz	r0, 801ec62 <__ssputs_r+0x5c>
 801ec4c:	230c      	movs	r3, #12
 801ec4e:	f8ca 3000 	str.w	r3, [sl]
 801ec52:	89a3      	ldrh	r3, [r4, #12]
 801ec54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec58:	81a3      	strh	r3, [r4, #12]
 801ec5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ec5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec62:	463a      	mov	r2, r7
 801ec64:	6921      	ldr	r1, [r4, #16]
 801ec66:	f7fc fcaa 	bl	801b5be <memcpy>
 801ec6a:	89a3      	ldrh	r3, [r4, #12]
 801ec6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ec70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec74:	81a3      	strh	r3, [r4, #12]
 801ec76:	6126      	str	r6, [r4, #16]
 801ec78:	6165      	str	r5, [r4, #20]
 801ec7a:	443e      	add	r6, r7
 801ec7c:	1bed      	subs	r5, r5, r7
 801ec7e:	6026      	str	r6, [r4, #0]
 801ec80:	60a5      	str	r5, [r4, #8]
 801ec82:	464e      	mov	r6, r9
 801ec84:	454e      	cmp	r6, r9
 801ec86:	d900      	bls.n	801ec8a <__ssputs_r+0x84>
 801ec88:	464e      	mov	r6, r9
 801ec8a:	4632      	mov	r2, r6
 801ec8c:	4641      	mov	r1, r8
 801ec8e:	6820      	ldr	r0, [r4, #0]
 801ec90:	f7fc fca0 	bl	801b5d4 <memmove>
 801ec94:	68a3      	ldr	r3, [r4, #8]
 801ec96:	1b9b      	subs	r3, r3, r6
 801ec98:	60a3      	str	r3, [r4, #8]
 801ec9a:	6823      	ldr	r3, [r4, #0]
 801ec9c:	441e      	add	r6, r3
 801ec9e:	6026      	str	r6, [r4, #0]
 801eca0:	2000      	movs	r0, #0
 801eca2:	e7dc      	b.n	801ec5e <__ssputs_r+0x58>
 801eca4:	462a      	mov	r2, r5
 801eca6:	f000 fc8d 	bl	801f5c4 <_realloc_r>
 801ecaa:	4606      	mov	r6, r0
 801ecac:	2800      	cmp	r0, #0
 801ecae:	d1e2      	bne.n	801ec76 <__ssputs_r+0x70>
 801ecb0:	6921      	ldr	r1, [r4, #16]
 801ecb2:	4650      	mov	r0, sl
 801ecb4:	f7fc fcb0 	bl	801b618 <_free_r>
 801ecb8:	e7c8      	b.n	801ec4c <__ssputs_r+0x46>
	...

0801ecbc <_svfiprintf_r>:
 801ecbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc0:	461d      	mov	r5, r3
 801ecc2:	898b      	ldrh	r3, [r1, #12]
 801ecc4:	061f      	lsls	r7, r3, #24
 801ecc6:	b09d      	sub	sp, #116	; 0x74
 801ecc8:	4680      	mov	r8, r0
 801ecca:	460c      	mov	r4, r1
 801eccc:	4616      	mov	r6, r2
 801ecce:	d50f      	bpl.n	801ecf0 <_svfiprintf_r+0x34>
 801ecd0:	690b      	ldr	r3, [r1, #16]
 801ecd2:	b96b      	cbnz	r3, 801ecf0 <_svfiprintf_r+0x34>
 801ecd4:	2140      	movs	r1, #64	; 0x40
 801ecd6:	f7fc fced 	bl	801b6b4 <_malloc_r>
 801ecda:	6020      	str	r0, [r4, #0]
 801ecdc:	6120      	str	r0, [r4, #16]
 801ecde:	b928      	cbnz	r0, 801ecec <_svfiprintf_r+0x30>
 801ece0:	230c      	movs	r3, #12
 801ece2:	f8c8 3000 	str.w	r3, [r8]
 801ece6:	f04f 30ff 	mov.w	r0, #4294967295
 801ecea:	e0c8      	b.n	801ee7e <_svfiprintf_r+0x1c2>
 801ecec:	2340      	movs	r3, #64	; 0x40
 801ecee:	6163      	str	r3, [r4, #20]
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	9309      	str	r3, [sp, #36]	; 0x24
 801ecf4:	2320      	movs	r3, #32
 801ecf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ecfa:	2330      	movs	r3, #48	; 0x30
 801ecfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ed00:	9503      	str	r5, [sp, #12]
 801ed02:	f04f 0b01 	mov.w	fp, #1
 801ed06:	4637      	mov	r7, r6
 801ed08:	463d      	mov	r5, r7
 801ed0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ed0e:	b10b      	cbz	r3, 801ed14 <_svfiprintf_r+0x58>
 801ed10:	2b25      	cmp	r3, #37	; 0x25
 801ed12:	d13e      	bne.n	801ed92 <_svfiprintf_r+0xd6>
 801ed14:	ebb7 0a06 	subs.w	sl, r7, r6
 801ed18:	d00b      	beq.n	801ed32 <_svfiprintf_r+0x76>
 801ed1a:	4653      	mov	r3, sl
 801ed1c:	4632      	mov	r2, r6
 801ed1e:	4621      	mov	r1, r4
 801ed20:	4640      	mov	r0, r8
 801ed22:	f7ff ff70 	bl	801ec06 <__ssputs_r>
 801ed26:	3001      	adds	r0, #1
 801ed28:	f000 80a4 	beq.w	801ee74 <_svfiprintf_r+0x1b8>
 801ed2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed2e:	4453      	add	r3, sl
 801ed30:	9309      	str	r3, [sp, #36]	; 0x24
 801ed32:	783b      	ldrb	r3, [r7, #0]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	f000 809d 	beq.w	801ee74 <_svfiprintf_r+0x1b8>
 801ed3a:	2300      	movs	r3, #0
 801ed3c:	f04f 32ff 	mov.w	r2, #4294967295
 801ed40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed44:	9304      	str	r3, [sp, #16]
 801ed46:	9307      	str	r3, [sp, #28]
 801ed48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed4c:	931a      	str	r3, [sp, #104]	; 0x68
 801ed4e:	462f      	mov	r7, r5
 801ed50:	2205      	movs	r2, #5
 801ed52:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ed56:	4850      	ldr	r0, [pc, #320]	; (801ee98 <_svfiprintf_r+0x1dc>)
 801ed58:	f7e1 fa52 	bl	8000200 <memchr>
 801ed5c:	9b04      	ldr	r3, [sp, #16]
 801ed5e:	b9d0      	cbnz	r0, 801ed96 <_svfiprintf_r+0xda>
 801ed60:	06d9      	lsls	r1, r3, #27
 801ed62:	bf44      	itt	mi
 801ed64:	2220      	movmi	r2, #32
 801ed66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed6a:	071a      	lsls	r2, r3, #28
 801ed6c:	bf44      	itt	mi
 801ed6e:	222b      	movmi	r2, #43	; 0x2b
 801ed70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed74:	782a      	ldrb	r2, [r5, #0]
 801ed76:	2a2a      	cmp	r2, #42	; 0x2a
 801ed78:	d015      	beq.n	801eda6 <_svfiprintf_r+0xea>
 801ed7a:	9a07      	ldr	r2, [sp, #28]
 801ed7c:	462f      	mov	r7, r5
 801ed7e:	2000      	movs	r0, #0
 801ed80:	250a      	movs	r5, #10
 801ed82:	4639      	mov	r1, r7
 801ed84:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed88:	3b30      	subs	r3, #48	; 0x30
 801ed8a:	2b09      	cmp	r3, #9
 801ed8c:	d94d      	bls.n	801ee2a <_svfiprintf_r+0x16e>
 801ed8e:	b1b8      	cbz	r0, 801edc0 <_svfiprintf_r+0x104>
 801ed90:	e00f      	b.n	801edb2 <_svfiprintf_r+0xf6>
 801ed92:	462f      	mov	r7, r5
 801ed94:	e7b8      	b.n	801ed08 <_svfiprintf_r+0x4c>
 801ed96:	4a40      	ldr	r2, [pc, #256]	; (801ee98 <_svfiprintf_r+0x1dc>)
 801ed98:	1a80      	subs	r0, r0, r2
 801ed9a:	fa0b f000 	lsl.w	r0, fp, r0
 801ed9e:	4318      	orrs	r0, r3
 801eda0:	9004      	str	r0, [sp, #16]
 801eda2:	463d      	mov	r5, r7
 801eda4:	e7d3      	b.n	801ed4e <_svfiprintf_r+0x92>
 801eda6:	9a03      	ldr	r2, [sp, #12]
 801eda8:	1d11      	adds	r1, r2, #4
 801edaa:	6812      	ldr	r2, [r2, #0]
 801edac:	9103      	str	r1, [sp, #12]
 801edae:	2a00      	cmp	r2, #0
 801edb0:	db01      	blt.n	801edb6 <_svfiprintf_r+0xfa>
 801edb2:	9207      	str	r2, [sp, #28]
 801edb4:	e004      	b.n	801edc0 <_svfiprintf_r+0x104>
 801edb6:	4252      	negs	r2, r2
 801edb8:	f043 0302 	orr.w	r3, r3, #2
 801edbc:	9207      	str	r2, [sp, #28]
 801edbe:	9304      	str	r3, [sp, #16]
 801edc0:	783b      	ldrb	r3, [r7, #0]
 801edc2:	2b2e      	cmp	r3, #46	; 0x2e
 801edc4:	d10c      	bne.n	801ede0 <_svfiprintf_r+0x124>
 801edc6:	787b      	ldrb	r3, [r7, #1]
 801edc8:	2b2a      	cmp	r3, #42	; 0x2a
 801edca:	d133      	bne.n	801ee34 <_svfiprintf_r+0x178>
 801edcc:	9b03      	ldr	r3, [sp, #12]
 801edce:	1d1a      	adds	r2, r3, #4
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	9203      	str	r2, [sp, #12]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	bfb8      	it	lt
 801edd8:	f04f 33ff 	movlt.w	r3, #4294967295
 801eddc:	3702      	adds	r7, #2
 801edde:	9305      	str	r3, [sp, #20]
 801ede0:	4d2e      	ldr	r5, [pc, #184]	; (801ee9c <_svfiprintf_r+0x1e0>)
 801ede2:	7839      	ldrb	r1, [r7, #0]
 801ede4:	2203      	movs	r2, #3
 801ede6:	4628      	mov	r0, r5
 801ede8:	f7e1 fa0a 	bl	8000200 <memchr>
 801edec:	b138      	cbz	r0, 801edfe <_svfiprintf_r+0x142>
 801edee:	2340      	movs	r3, #64	; 0x40
 801edf0:	1b40      	subs	r0, r0, r5
 801edf2:	fa03 f000 	lsl.w	r0, r3, r0
 801edf6:	9b04      	ldr	r3, [sp, #16]
 801edf8:	4303      	orrs	r3, r0
 801edfa:	3701      	adds	r7, #1
 801edfc:	9304      	str	r3, [sp, #16]
 801edfe:	7839      	ldrb	r1, [r7, #0]
 801ee00:	4827      	ldr	r0, [pc, #156]	; (801eea0 <_svfiprintf_r+0x1e4>)
 801ee02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ee06:	2206      	movs	r2, #6
 801ee08:	1c7e      	adds	r6, r7, #1
 801ee0a:	f7e1 f9f9 	bl	8000200 <memchr>
 801ee0e:	2800      	cmp	r0, #0
 801ee10:	d038      	beq.n	801ee84 <_svfiprintf_r+0x1c8>
 801ee12:	4b24      	ldr	r3, [pc, #144]	; (801eea4 <_svfiprintf_r+0x1e8>)
 801ee14:	bb13      	cbnz	r3, 801ee5c <_svfiprintf_r+0x1a0>
 801ee16:	9b03      	ldr	r3, [sp, #12]
 801ee18:	3307      	adds	r3, #7
 801ee1a:	f023 0307 	bic.w	r3, r3, #7
 801ee1e:	3308      	adds	r3, #8
 801ee20:	9303      	str	r3, [sp, #12]
 801ee22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee24:	444b      	add	r3, r9
 801ee26:	9309      	str	r3, [sp, #36]	; 0x24
 801ee28:	e76d      	b.n	801ed06 <_svfiprintf_r+0x4a>
 801ee2a:	fb05 3202 	mla	r2, r5, r2, r3
 801ee2e:	2001      	movs	r0, #1
 801ee30:	460f      	mov	r7, r1
 801ee32:	e7a6      	b.n	801ed82 <_svfiprintf_r+0xc6>
 801ee34:	2300      	movs	r3, #0
 801ee36:	3701      	adds	r7, #1
 801ee38:	9305      	str	r3, [sp, #20]
 801ee3a:	4619      	mov	r1, r3
 801ee3c:	250a      	movs	r5, #10
 801ee3e:	4638      	mov	r0, r7
 801ee40:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee44:	3a30      	subs	r2, #48	; 0x30
 801ee46:	2a09      	cmp	r2, #9
 801ee48:	d903      	bls.n	801ee52 <_svfiprintf_r+0x196>
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d0c8      	beq.n	801ede0 <_svfiprintf_r+0x124>
 801ee4e:	9105      	str	r1, [sp, #20]
 801ee50:	e7c6      	b.n	801ede0 <_svfiprintf_r+0x124>
 801ee52:	fb05 2101 	mla	r1, r5, r1, r2
 801ee56:	2301      	movs	r3, #1
 801ee58:	4607      	mov	r7, r0
 801ee5a:	e7f0      	b.n	801ee3e <_svfiprintf_r+0x182>
 801ee5c:	ab03      	add	r3, sp, #12
 801ee5e:	9300      	str	r3, [sp, #0]
 801ee60:	4622      	mov	r2, r4
 801ee62:	4b11      	ldr	r3, [pc, #68]	; (801eea8 <_svfiprintf_r+0x1ec>)
 801ee64:	a904      	add	r1, sp, #16
 801ee66:	4640      	mov	r0, r8
 801ee68:	f7fc fd12 	bl	801b890 <_printf_float>
 801ee6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ee70:	4681      	mov	r9, r0
 801ee72:	d1d6      	bne.n	801ee22 <_svfiprintf_r+0x166>
 801ee74:	89a3      	ldrh	r3, [r4, #12]
 801ee76:	065b      	lsls	r3, r3, #25
 801ee78:	f53f af35 	bmi.w	801ece6 <_svfiprintf_r+0x2a>
 801ee7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee7e:	b01d      	add	sp, #116	; 0x74
 801ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee84:	ab03      	add	r3, sp, #12
 801ee86:	9300      	str	r3, [sp, #0]
 801ee88:	4622      	mov	r2, r4
 801ee8a:	4b07      	ldr	r3, [pc, #28]	; (801eea8 <_svfiprintf_r+0x1ec>)
 801ee8c:	a904      	add	r1, sp, #16
 801ee8e:	4640      	mov	r0, r8
 801ee90:	f7fc ffb4 	bl	801bdfc <_printf_i>
 801ee94:	e7ea      	b.n	801ee6c <_svfiprintf_r+0x1b0>
 801ee96:	bf00      	nop
 801ee98:	08024d0c 	.word	0x08024d0c
 801ee9c:	08024d12 	.word	0x08024d12
 801eea0:	08024d16 	.word	0x08024d16
 801eea4:	0801b891 	.word	0x0801b891
 801eea8:	0801ec07 	.word	0x0801ec07

0801eeac <__sfputc_r>:
 801eeac:	6893      	ldr	r3, [r2, #8]
 801eeae:	3b01      	subs	r3, #1
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	b410      	push	{r4}
 801eeb4:	6093      	str	r3, [r2, #8]
 801eeb6:	da08      	bge.n	801eeca <__sfputc_r+0x1e>
 801eeb8:	6994      	ldr	r4, [r2, #24]
 801eeba:	42a3      	cmp	r3, r4
 801eebc:	db01      	blt.n	801eec2 <__sfputc_r+0x16>
 801eebe:	290a      	cmp	r1, #10
 801eec0:	d103      	bne.n	801eeca <__sfputc_r+0x1e>
 801eec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eec6:	f000 b975 	b.w	801f1b4 <__swbuf_r>
 801eeca:	6813      	ldr	r3, [r2, #0]
 801eecc:	1c58      	adds	r0, r3, #1
 801eece:	6010      	str	r0, [r2, #0]
 801eed0:	7019      	strb	r1, [r3, #0]
 801eed2:	4608      	mov	r0, r1
 801eed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eed8:	4770      	bx	lr

0801eeda <__sfputs_r>:
 801eeda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eedc:	4606      	mov	r6, r0
 801eede:	460f      	mov	r7, r1
 801eee0:	4614      	mov	r4, r2
 801eee2:	18d5      	adds	r5, r2, r3
 801eee4:	42ac      	cmp	r4, r5
 801eee6:	d101      	bne.n	801eeec <__sfputs_r+0x12>
 801eee8:	2000      	movs	r0, #0
 801eeea:	e007      	b.n	801eefc <__sfputs_r+0x22>
 801eeec:	463a      	mov	r2, r7
 801eeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eef2:	4630      	mov	r0, r6
 801eef4:	f7ff ffda 	bl	801eeac <__sfputc_r>
 801eef8:	1c43      	adds	r3, r0, #1
 801eefa:	d1f3      	bne.n	801eee4 <__sfputs_r+0xa>
 801eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ef00 <_vfiprintf_r>:
 801ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef04:	460c      	mov	r4, r1
 801ef06:	b09d      	sub	sp, #116	; 0x74
 801ef08:	4617      	mov	r7, r2
 801ef0a:	461d      	mov	r5, r3
 801ef0c:	4606      	mov	r6, r0
 801ef0e:	b118      	cbz	r0, 801ef18 <_vfiprintf_r+0x18>
 801ef10:	6983      	ldr	r3, [r0, #24]
 801ef12:	b90b      	cbnz	r3, 801ef18 <_vfiprintf_r+0x18>
 801ef14:	f7fe fea8 	bl	801dc68 <__sinit>
 801ef18:	4b7c      	ldr	r3, [pc, #496]	; (801f10c <_vfiprintf_r+0x20c>)
 801ef1a:	429c      	cmp	r4, r3
 801ef1c:	d158      	bne.n	801efd0 <_vfiprintf_r+0xd0>
 801ef1e:	6874      	ldr	r4, [r6, #4]
 801ef20:	89a3      	ldrh	r3, [r4, #12]
 801ef22:	0718      	lsls	r0, r3, #28
 801ef24:	d55e      	bpl.n	801efe4 <_vfiprintf_r+0xe4>
 801ef26:	6923      	ldr	r3, [r4, #16]
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d05b      	beq.n	801efe4 <_vfiprintf_r+0xe4>
 801ef2c:	2300      	movs	r3, #0
 801ef2e:	9309      	str	r3, [sp, #36]	; 0x24
 801ef30:	2320      	movs	r3, #32
 801ef32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef36:	2330      	movs	r3, #48	; 0x30
 801ef38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef3c:	9503      	str	r5, [sp, #12]
 801ef3e:	f04f 0b01 	mov.w	fp, #1
 801ef42:	46b8      	mov	r8, r7
 801ef44:	4645      	mov	r5, r8
 801ef46:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef4a:	b10b      	cbz	r3, 801ef50 <_vfiprintf_r+0x50>
 801ef4c:	2b25      	cmp	r3, #37	; 0x25
 801ef4e:	d154      	bne.n	801effa <_vfiprintf_r+0xfa>
 801ef50:	ebb8 0a07 	subs.w	sl, r8, r7
 801ef54:	d00b      	beq.n	801ef6e <_vfiprintf_r+0x6e>
 801ef56:	4653      	mov	r3, sl
 801ef58:	463a      	mov	r2, r7
 801ef5a:	4621      	mov	r1, r4
 801ef5c:	4630      	mov	r0, r6
 801ef5e:	f7ff ffbc 	bl	801eeda <__sfputs_r>
 801ef62:	3001      	adds	r0, #1
 801ef64:	f000 80c2 	beq.w	801f0ec <_vfiprintf_r+0x1ec>
 801ef68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef6a:	4453      	add	r3, sl
 801ef6c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef6e:	f898 3000 	ldrb.w	r3, [r8]
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	f000 80ba 	beq.w	801f0ec <_vfiprintf_r+0x1ec>
 801ef78:	2300      	movs	r3, #0
 801ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 801ef7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef82:	9304      	str	r3, [sp, #16]
 801ef84:	9307      	str	r3, [sp, #28]
 801ef86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef8a:	931a      	str	r3, [sp, #104]	; 0x68
 801ef8c:	46a8      	mov	r8, r5
 801ef8e:	2205      	movs	r2, #5
 801ef90:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ef94:	485e      	ldr	r0, [pc, #376]	; (801f110 <_vfiprintf_r+0x210>)
 801ef96:	f7e1 f933 	bl	8000200 <memchr>
 801ef9a:	9b04      	ldr	r3, [sp, #16]
 801ef9c:	bb78      	cbnz	r0, 801effe <_vfiprintf_r+0xfe>
 801ef9e:	06d9      	lsls	r1, r3, #27
 801efa0:	bf44      	itt	mi
 801efa2:	2220      	movmi	r2, #32
 801efa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801efa8:	071a      	lsls	r2, r3, #28
 801efaa:	bf44      	itt	mi
 801efac:	222b      	movmi	r2, #43	; 0x2b
 801efae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801efb2:	782a      	ldrb	r2, [r5, #0]
 801efb4:	2a2a      	cmp	r2, #42	; 0x2a
 801efb6:	d02a      	beq.n	801f00e <_vfiprintf_r+0x10e>
 801efb8:	9a07      	ldr	r2, [sp, #28]
 801efba:	46a8      	mov	r8, r5
 801efbc:	2000      	movs	r0, #0
 801efbe:	250a      	movs	r5, #10
 801efc0:	4641      	mov	r1, r8
 801efc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801efc6:	3b30      	subs	r3, #48	; 0x30
 801efc8:	2b09      	cmp	r3, #9
 801efca:	d969      	bls.n	801f0a0 <_vfiprintf_r+0x1a0>
 801efcc:	b360      	cbz	r0, 801f028 <_vfiprintf_r+0x128>
 801efce:	e024      	b.n	801f01a <_vfiprintf_r+0x11a>
 801efd0:	4b50      	ldr	r3, [pc, #320]	; (801f114 <_vfiprintf_r+0x214>)
 801efd2:	429c      	cmp	r4, r3
 801efd4:	d101      	bne.n	801efda <_vfiprintf_r+0xda>
 801efd6:	68b4      	ldr	r4, [r6, #8]
 801efd8:	e7a2      	b.n	801ef20 <_vfiprintf_r+0x20>
 801efda:	4b4f      	ldr	r3, [pc, #316]	; (801f118 <_vfiprintf_r+0x218>)
 801efdc:	429c      	cmp	r4, r3
 801efde:	bf08      	it	eq
 801efe0:	68f4      	ldreq	r4, [r6, #12]
 801efe2:	e79d      	b.n	801ef20 <_vfiprintf_r+0x20>
 801efe4:	4621      	mov	r1, r4
 801efe6:	4630      	mov	r0, r6
 801efe8:	f000 f948 	bl	801f27c <__swsetup_r>
 801efec:	2800      	cmp	r0, #0
 801efee:	d09d      	beq.n	801ef2c <_vfiprintf_r+0x2c>
 801eff0:	f04f 30ff 	mov.w	r0, #4294967295
 801eff4:	b01d      	add	sp, #116	; 0x74
 801eff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801effa:	46a8      	mov	r8, r5
 801effc:	e7a2      	b.n	801ef44 <_vfiprintf_r+0x44>
 801effe:	4a44      	ldr	r2, [pc, #272]	; (801f110 <_vfiprintf_r+0x210>)
 801f000:	1a80      	subs	r0, r0, r2
 801f002:	fa0b f000 	lsl.w	r0, fp, r0
 801f006:	4318      	orrs	r0, r3
 801f008:	9004      	str	r0, [sp, #16]
 801f00a:	4645      	mov	r5, r8
 801f00c:	e7be      	b.n	801ef8c <_vfiprintf_r+0x8c>
 801f00e:	9a03      	ldr	r2, [sp, #12]
 801f010:	1d11      	adds	r1, r2, #4
 801f012:	6812      	ldr	r2, [r2, #0]
 801f014:	9103      	str	r1, [sp, #12]
 801f016:	2a00      	cmp	r2, #0
 801f018:	db01      	blt.n	801f01e <_vfiprintf_r+0x11e>
 801f01a:	9207      	str	r2, [sp, #28]
 801f01c:	e004      	b.n	801f028 <_vfiprintf_r+0x128>
 801f01e:	4252      	negs	r2, r2
 801f020:	f043 0302 	orr.w	r3, r3, #2
 801f024:	9207      	str	r2, [sp, #28]
 801f026:	9304      	str	r3, [sp, #16]
 801f028:	f898 3000 	ldrb.w	r3, [r8]
 801f02c:	2b2e      	cmp	r3, #46	; 0x2e
 801f02e:	d10e      	bne.n	801f04e <_vfiprintf_r+0x14e>
 801f030:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f034:	2b2a      	cmp	r3, #42	; 0x2a
 801f036:	d138      	bne.n	801f0aa <_vfiprintf_r+0x1aa>
 801f038:	9b03      	ldr	r3, [sp, #12]
 801f03a:	1d1a      	adds	r2, r3, #4
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	9203      	str	r2, [sp, #12]
 801f040:	2b00      	cmp	r3, #0
 801f042:	bfb8      	it	lt
 801f044:	f04f 33ff 	movlt.w	r3, #4294967295
 801f048:	f108 0802 	add.w	r8, r8, #2
 801f04c:	9305      	str	r3, [sp, #20]
 801f04e:	4d33      	ldr	r5, [pc, #204]	; (801f11c <_vfiprintf_r+0x21c>)
 801f050:	f898 1000 	ldrb.w	r1, [r8]
 801f054:	2203      	movs	r2, #3
 801f056:	4628      	mov	r0, r5
 801f058:	f7e1 f8d2 	bl	8000200 <memchr>
 801f05c:	b140      	cbz	r0, 801f070 <_vfiprintf_r+0x170>
 801f05e:	2340      	movs	r3, #64	; 0x40
 801f060:	1b40      	subs	r0, r0, r5
 801f062:	fa03 f000 	lsl.w	r0, r3, r0
 801f066:	9b04      	ldr	r3, [sp, #16]
 801f068:	4303      	orrs	r3, r0
 801f06a:	f108 0801 	add.w	r8, r8, #1
 801f06e:	9304      	str	r3, [sp, #16]
 801f070:	f898 1000 	ldrb.w	r1, [r8]
 801f074:	482a      	ldr	r0, [pc, #168]	; (801f120 <_vfiprintf_r+0x220>)
 801f076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f07a:	2206      	movs	r2, #6
 801f07c:	f108 0701 	add.w	r7, r8, #1
 801f080:	f7e1 f8be 	bl	8000200 <memchr>
 801f084:	2800      	cmp	r0, #0
 801f086:	d037      	beq.n	801f0f8 <_vfiprintf_r+0x1f8>
 801f088:	4b26      	ldr	r3, [pc, #152]	; (801f124 <_vfiprintf_r+0x224>)
 801f08a:	bb1b      	cbnz	r3, 801f0d4 <_vfiprintf_r+0x1d4>
 801f08c:	9b03      	ldr	r3, [sp, #12]
 801f08e:	3307      	adds	r3, #7
 801f090:	f023 0307 	bic.w	r3, r3, #7
 801f094:	3308      	adds	r3, #8
 801f096:	9303      	str	r3, [sp, #12]
 801f098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f09a:	444b      	add	r3, r9
 801f09c:	9309      	str	r3, [sp, #36]	; 0x24
 801f09e:	e750      	b.n	801ef42 <_vfiprintf_r+0x42>
 801f0a0:	fb05 3202 	mla	r2, r5, r2, r3
 801f0a4:	2001      	movs	r0, #1
 801f0a6:	4688      	mov	r8, r1
 801f0a8:	e78a      	b.n	801efc0 <_vfiprintf_r+0xc0>
 801f0aa:	2300      	movs	r3, #0
 801f0ac:	f108 0801 	add.w	r8, r8, #1
 801f0b0:	9305      	str	r3, [sp, #20]
 801f0b2:	4619      	mov	r1, r3
 801f0b4:	250a      	movs	r5, #10
 801f0b6:	4640      	mov	r0, r8
 801f0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0bc:	3a30      	subs	r2, #48	; 0x30
 801f0be:	2a09      	cmp	r2, #9
 801f0c0:	d903      	bls.n	801f0ca <_vfiprintf_r+0x1ca>
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d0c3      	beq.n	801f04e <_vfiprintf_r+0x14e>
 801f0c6:	9105      	str	r1, [sp, #20]
 801f0c8:	e7c1      	b.n	801f04e <_vfiprintf_r+0x14e>
 801f0ca:	fb05 2101 	mla	r1, r5, r1, r2
 801f0ce:	2301      	movs	r3, #1
 801f0d0:	4680      	mov	r8, r0
 801f0d2:	e7f0      	b.n	801f0b6 <_vfiprintf_r+0x1b6>
 801f0d4:	ab03      	add	r3, sp, #12
 801f0d6:	9300      	str	r3, [sp, #0]
 801f0d8:	4622      	mov	r2, r4
 801f0da:	4b13      	ldr	r3, [pc, #76]	; (801f128 <_vfiprintf_r+0x228>)
 801f0dc:	a904      	add	r1, sp, #16
 801f0de:	4630      	mov	r0, r6
 801f0e0:	f7fc fbd6 	bl	801b890 <_printf_float>
 801f0e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f0e8:	4681      	mov	r9, r0
 801f0ea:	d1d5      	bne.n	801f098 <_vfiprintf_r+0x198>
 801f0ec:	89a3      	ldrh	r3, [r4, #12]
 801f0ee:	065b      	lsls	r3, r3, #25
 801f0f0:	f53f af7e 	bmi.w	801eff0 <_vfiprintf_r+0xf0>
 801f0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f0f6:	e77d      	b.n	801eff4 <_vfiprintf_r+0xf4>
 801f0f8:	ab03      	add	r3, sp, #12
 801f0fa:	9300      	str	r3, [sp, #0]
 801f0fc:	4622      	mov	r2, r4
 801f0fe:	4b0a      	ldr	r3, [pc, #40]	; (801f128 <_vfiprintf_r+0x228>)
 801f100:	a904      	add	r1, sp, #16
 801f102:	4630      	mov	r0, r6
 801f104:	f7fc fe7a 	bl	801bdfc <_printf_i>
 801f108:	e7ec      	b.n	801f0e4 <_vfiprintf_r+0x1e4>
 801f10a:	bf00      	nop
 801f10c:	08024bd0 	.word	0x08024bd0
 801f110:	08024d0c 	.word	0x08024d0c
 801f114:	08024bf0 	.word	0x08024bf0
 801f118:	08024bb0 	.word	0x08024bb0
 801f11c:	08024d12 	.word	0x08024d12
 801f120:	08024d16 	.word	0x08024d16
 801f124:	0801b891 	.word	0x0801b891
 801f128:	0801eedb 	.word	0x0801eedb

0801f12c <__sread>:
 801f12c:	b510      	push	{r4, lr}
 801f12e:	460c      	mov	r4, r1
 801f130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f134:	f000 fa6c 	bl	801f610 <_read_r>
 801f138:	2800      	cmp	r0, #0
 801f13a:	bfab      	itete	ge
 801f13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f13e:	89a3      	ldrhlt	r3, [r4, #12]
 801f140:	181b      	addge	r3, r3, r0
 801f142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f146:	bfac      	ite	ge
 801f148:	6563      	strge	r3, [r4, #84]	; 0x54
 801f14a:	81a3      	strhlt	r3, [r4, #12]
 801f14c:	bd10      	pop	{r4, pc}

0801f14e <__swrite>:
 801f14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f152:	461f      	mov	r7, r3
 801f154:	898b      	ldrh	r3, [r1, #12]
 801f156:	05db      	lsls	r3, r3, #23
 801f158:	4605      	mov	r5, r0
 801f15a:	460c      	mov	r4, r1
 801f15c:	4616      	mov	r6, r2
 801f15e:	d505      	bpl.n	801f16c <__swrite+0x1e>
 801f160:	2302      	movs	r3, #2
 801f162:	2200      	movs	r2, #0
 801f164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f168:	f000 f9b6 	bl	801f4d8 <_lseek_r>
 801f16c:	89a3      	ldrh	r3, [r4, #12]
 801f16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f176:	81a3      	strh	r3, [r4, #12]
 801f178:	4632      	mov	r2, r6
 801f17a:	463b      	mov	r3, r7
 801f17c:	4628      	mov	r0, r5
 801f17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f182:	f000 b869 	b.w	801f258 <_write_r>

0801f186 <__sseek>:
 801f186:	b510      	push	{r4, lr}
 801f188:	460c      	mov	r4, r1
 801f18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f18e:	f000 f9a3 	bl	801f4d8 <_lseek_r>
 801f192:	1c43      	adds	r3, r0, #1
 801f194:	89a3      	ldrh	r3, [r4, #12]
 801f196:	bf15      	itete	ne
 801f198:	6560      	strne	r0, [r4, #84]	; 0x54
 801f19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f1a2:	81a3      	strheq	r3, [r4, #12]
 801f1a4:	bf18      	it	ne
 801f1a6:	81a3      	strhne	r3, [r4, #12]
 801f1a8:	bd10      	pop	{r4, pc}

0801f1aa <__sclose>:
 801f1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1ae:	f000 b8d3 	b.w	801f358 <_close_r>
	...

0801f1b4 <__swbuf_r>:
 801f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1b6:	460e      	mov	r6, r1
 801f1b8:	4614      	mov	r4, r2
 801f1ba:	4605      	mov	r5, r0
 801f1bc:	b118      	cbz	r0, 801f1c6 <__swbuf_r+0x12>
 801f1be:	6983      	ldr	r3, [r0, #24]
 801f1c0:	b90b      	cbnz	r3, 801f1c6 <__swbuf_r+0x12>
 801f1c2:	f7fe fd51 	bl	801dc68 <__sinit>
 801f1c6:	4b21      	ldr	r3, [pc, #132]	; (801f24c <__swbuf_r+0x98>)
 801f1c8:	429c      	cmp	r4, r3
 801f1ca:	d12a      	bne.n	801f222 <__swbuf_r+0x6e>
 801f1cc:	686c      	ldr	r4, [r5, #4]
 801f1ce:	69a3      	ldr	r3, [r4, #24]
 801f1d0:	60a3      	str	r3, [r4, #8]
 801f1d2:	89a3      	ldrh	r3, [r4, #12]
 801f1d4:	071a      	lsls	r2, r3, #28
 801f1d6:	d52e      	bpl.n	801f236 <__swbuf_r+0x82>
 801f1d8:	6923      	ldr	r3, [r4, #16]
 801f1da:	b363      	cbz	r3, 801f236 <__swbuf_r+0x82>
 801f1dc:	6923      	ldr	r3, [r4, #16]
 801f1de:	6820      	ldr	r0, [r4, #0]
 801f1e0:	1ac0      	subs	r0, r0, r3
 801f1e2:	6963      	ldr	r3, [r4, #20]
 801f1e4:	b2f6      	uxtb	r6, r6
 801f1e6:	4283      	cmp	r3, r0
 801f1e8:	4637      	mov	r7, r6
 801f1ea:	dc04      	bgt.n	801f1f6 <__swbuf_r+0x42>
 801f1ec:	4621      	mov	r1, r4
 801f1ee:	4628      	mov	r0, r5
 801f1f0:	f000 f948 	bl	801f484 <_fflush_r>
 801f1f4:	bb28      	cbnz	r0, 801f242 <__swbuf_r+0x8e>
 801f1f6:	68a3      	ldr	r3, [r4, #8]
 801f1f8:	3b01      	subs	r3, #1
 801f1fa:	60a3      	str	r3, [r4, #8]
 801f1fc:	6823      	ldr	r3, [r4, #0]
 801f1fe:	1c5a      	adds	r2, r3, #1
 801f200:	6022      	str	r2, [r4, #0]
 801f202:	701e      	strb	r6, [r3, #0]
 801f204:	6963      	ldr	r3, [r4, #20]
 801f206:	3001      	adds	r0, #1
 801f208:	4283      	cmp	r3, r0
 801f20a:	d004      	beq.n	801f216 <__swbuf_r+0x62>
 801f20c:	89a3      	ldrh	r3, [r4, #12]
 801f20e:	07db      	lsls	r3, r3, #31
 801f210:	d519      	bpl.n	801f246 <__swbuf_r+0x92>
 801f212:	2e0a      	cmp	r6, #10
 801f214:	d117      	bne.n	801f246 <__swbuf_r+0x92>
 801f216:	4621      	mov	r1, r4
 801f218:	4628      	mov	r0, r5
 801f21a:	f000 f933 	bl	801f484 <_fflush_r>
 801f21e:	b190      	cbz	r0, 801f246 <__swbuf_r+0x92>
 801f220:	e00f      	b.n	801f242 <__swbuf_r+0x8e>
 801f222:	4b0b      	ldr	r3, [pc, #44]	; (801f250 <__swbuf_r+0x9c>)
 801f224:	429c      	cmp	r4, r3
 801f226:	d101      	bne.n	801f22c <__swbuf_r+0x78>
 801f228:	68ac      	ldr	r4, [r5, #8]
 801f22a:	e7d0      	b.n	801f1ce <__swbuf_r+0x1a>
 801f22c:	4b09      	ldr	r3, [pc, #36]	; (801f254 <__swbuf_r+0xa0>)
 801f22e:	429c      	cmp	r4, r3
 801f230:	bf08      	it	eq
 801f232:	68ec      	ldreq	r4, [r5, #12]
 801f234:	e7cb      	b.n	801f1ce <__swbuf_r+0x1a>
 801f236:	4621      	mov	r1, r4
 801f238:	4628      	mov	r0, r5
 801f23a:	f000 f81f 	bl	801f27c <__swsetup_r>
 801f23e:	2800      	cmp	r0, #0
 801f240:	d0cc      	beq.n	801f1dc <__swbuf_r+0x28>
 801f242:	f04f 37ff 	mov.w	r7, #4294967295
 801f246:	4638      	mov	r0, r7
 801f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f24a:	bf00      	nop
 801f24c:	08024bd0 	.word	0x08024bd0
 801f250:	08024bf0 	.word	0x08024bf0
 801f254:	08024bb0 	.word	0x08024bb0

0801f258 <_write_r>:
 801f258:	b538      	push	{r3, r4, r5, lr}
 801f25a:	4c07      	ldr	r4, [pc, #28]	; (801f278 <_write_r+0x20>)
 801f25c:	4605      	mov	r5, r0
 801f25e:	4608      	mov	r0, r1
 801f260:	4611      	mov	r1, r2
 801f262:	2200      	movs	r2, #0
 801f264:	6022      	str	r2, [r4, #0]
 801f266:	461a      	mov	r2, r3
 801f268:	f7e4 fdf1 	bl	8003e4e <_write>
 801f26c:	1c43      	adds	r3, r0, #1
 801f26e:	d102      	bne.n	801f276 <_write_r+0x1e>
 801f270:	6823      	ldr	r3, [r4, #0]
 801f272:	b103      	cbz	r3, 801f276 <_write_r+0x1e>
 801f274:	602b      	str	r3, [r5, #0]
 801f276:	bd38      	pop	{r3, r4, r5, pc}
 801f278:	20008308 	.word	0x20008308

0801f27c <__swsetup_r>:
 801f27c:	4b32      	ldr	r3, [pc, #200]	; (801f348 <__swsetup_r+0xcc>)
 801f27e:	b570      	push	{r4, r5, r6, lr}
 801f280:	681d      	ldr	r5, [r3, #0]
 801f282:	4606      	mov	r6, r0
 801f284:	460c      	mov	r4, r1
 801f286:	b125      	cbz	r5, 801f292 <__swsetup_r+0x16>
 801f288:	69ab      	ldr	r3, [r5, #24]
 801f28a:	b913      	cbnz	r3, 801f292 <__swsetup_r+0x16>
 801f28c:	4628      	mov	r0, r5
 801f28e:	f7fe fceb 	bl	801dc68 <__sinit>
 801f292:	4b2e      	ldr	r3, [pc, #184]	; (801f34c <__swsetup_r+0xd0>)
 801f294:	429c      	cmp	r4, r3
 801f296:	d10f      	bne.n	801f2b8 <__swsetup_r+0x3c>
 801f298:	686c      	ldr	r4, [r5, #4]
 801f29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f29e:	b29a      	uxth	r2, r3
 801f2a0:	0715      	lsls	r5, r2, #28
 801f2a2:	d42c      	bmi.n	801f2fe <__swsetup_r+0x82>
 801f2a4:	06d0      	lsls	r0, r2, #27
 801f2a6:	d411      	bmi.n	801f2cc <__swsetup_r+0x50>
 801f2a8:	2209      	movs	r2, #9
 801f2aa:	6032      	str	r2, [r6, #0]
 801f2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f2b0:	81a3      	strh	r3, [r4, #12]
 801f2b2:	f04f 30ff 	mov.w	r0, #4294967295
 801f2b6:	e03e      	b.n	801f336 <__swsetup_r+0xba>
 801f2b8:	4b25      	ldr	r3, [pc, #148]	; (801f350 <__swsetup_r+0xd4>)
 801f2ba:	429c      	cmp	r4, r3
 801f2bc:	d101      	bne.n	801f2c2 <__swsetup_r+0x46>
 801f2be:	68ac      	ldr	r4, [r5, #8]
 801f2c0:	e7eb      	b.n	801f29a <__swsetup_r+0x1e>
 801f2c2:	4b24      	ldr	r3, [pc, #144]	; (801f354 <__swsetup_r+0xd8>)
 801f2c4:	429c      	cmp	r4, r3
 801f2c6:	bf08      	it	eq
 801f2c8:	68ec      	ldreq	r4, [r5, #12]
 801f2ca:	e7e6      	b.n	801f29a <__swsetup_r+0x1e>
 801f2cc:	0751      	lsls	r1, r2, #29
 801f2ce:	d512      	bpl.n	801f2f6 <__swsetup_r+0x7a>
 801f2d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f2d2:	b141      	cbz	r1, 801f2e6 <__swsetup_r+0x6a>
 801f2d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f2d8:	4299      	cmp	r1, r3
 801f2da:	d002      	beq.n	801f2e2 <__swsetup_r+0x66>
 801f2dc:	4630      	mov	r0, r6
 801f2de:	f7fc f99b 	bl	801b618 <_free_r>
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	6363      	str	r3, [r4, #52]	; 0x34
 801f2e6:	89a3      	ldrh	r3, [r4, #12]
 801f2e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f2ec:	81a3      	strh	r3, [r4, #12]
 801f2ee:	2300      	movs	r3, #0
 801f2f0:	6063      	str	r3, [r4, #4]
 801f2f2:	6923      	ldr	r3, [r4, #16]
 801f2f4:	6023      	str	r3, [r4, #0]
 801f2f6:	89a3      	ldrh	r3, [r4, #12]
 801f2f8:	f043 0308 	orr.w	r3, r3, #8
 801f2fc:	81a3      	strh	r3, [r4, #12]
 801f2fe:	6923      	ldr	r3, [r4, #16]
 801f300:	b94b      	cbnz	r3, 801f316 <__swsetup_r+0x9a>
 801f302:	89a3      	ldrh	r3, [r4, #12]
 801f304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f30c:	d003      	beq.n	801f316 <__swsetup_r+0x9a>
 801f30e:	4621      	mov	r1, r4
 801f310:	4630      	mov	r0, r6
 801f312:	f000 f917 	bl	801f544 <__smakebuf_r>
 801f316:	89a2      	ldrh	r2, [r4, #12]
 801f318:	f012 0301 	ands.w	r3, r2, #1
 801f31c:	d00c      	beq.n	801f338 <__swsetup_r+0xbc>
 801f31e:	2300      	movs	r3, #0
 801f320:	60a3      	str	r3, [r4, #8]
 801f322:	6963      	ldr	r3, [r4, #20]
 801f324:	425b      	negs	r3, r3
 801f326:	61a3      	str	r3, [r4, #24]
 801f328:	6923      	ldr	r3, [r4, #16]
 801f32a:	b953      	cbnz	r3, 801f342 <__swsetup_r+0xc6>
 801f32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f330:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801f334:	d1ba      	bne.n	801f2ac <__swsetup_r+0x30>
 801f336:	bd70      	pop	{r4, r5, r6, pc}
 801f338:	0792      	lsls	r2, r2, #30
 801f33a:	bf58      	it	pl
 801f33c:	6963      	ldrpl	r3, [r4, #20]
 801f33e:	60a3      	str	r3, [r4, #8]
 801f340:	e7f2      	b.n	801f328 <__swsetup_r+0xac>
 801f342:	2000      	movs	r0, #0
 801f344:	e7f7      	b.n	801f336 <__swsetup_r+0xba>
 801f346:	bf00      	nop
 801f348:	20000084 	.word	0x20000084
 801f34c:	08024bd0 	.word	0x08024bd0
 801f350:	08024bf0 	.word	0x08024bf0
 801f354:	08024bb0 	.word	0x08024bb0

0801f358 <_close_r>:
 801f358:	b538      	push	{r3, r4, r5, lr}
 801f35a:	4c06      	ldr	r4, [pc, #24]	; (801f374 <_close_r+0x1c>)
 801f35c:	2300      	movs	r3, #0
 801f35e:	4605      	mov	r5, r0
 801f360:	4608      	mov	r0, r1
 801f362:	6023      	str	r3, [r4, #0]
 801f364:	f7e4 fd8f 	bl	8003e86 <_close>
 801f368:	1c43      	adds	r3, r0, #1
 801f36a:	d102      	bne.n	801f372 <_close_r+0x1a>
 801f36c:	6823      	ldr	r3, [r4, #0]
 801f36e:	b103      	cbz	r3, 801f372 <_close_r+0x1a>
 801f370:	602b      	str	r3, [r5, #0]
 801f372:	bd38      	pop	{r3, r4, r5, pc}
 801f374:	20008308 	.word	0x20008308

0801f378 <__sflush_r>:
 801f378:	898a      	ldrh	r2, [r1, #12]
 801f37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f37e:	4605      	mov	r5, r0
 801f380:	0710      	lsls	r0, r2, #28
 801f382:	460c      	mov	r4, r1
 801f384:	d458      	bmi.n	801f438 <__sflush_r+0xc0>
 801f386:	684b      	ldr	r3, [r1, #4]
 801f388:	2b00      	cmp	r3, #0
 801f38a:	dc05      	bgt.n	801f398 <__sflush_r+0x20>
 801f38c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f38e:	2b00      	cmp	r3, #0
 801f390:	dc02      	bgt.n	801f398 <__sflush_r+0x20>
 801f392:	2000      	movs	r0, #0
 801f394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f39a:	2e00      	cmp	r6, #0
 801f39c:	d0f9      	beq.n	801f392 <__sflush_r+0x1a>
 801f39e:	2300      	movs	r3, #0
 801f3a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f3a4:	682f      	ldr	r7, [r5, #0]
 801f3a6:	6a21      	ldr	r1, [r4, #32]
 801f3a8:	602b      	str	r3, [r5, #0]
 801f3aa:	d032      	beq.n	801f412 <__sflush_r+0x9a>
 801f3ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f3ae:	89a3      	ldrh	r3, [r4, #12]
 801f3b0:	075a      	lsls	r2, r3, #29
 801f3b2:	d505      	bpl.n	801f3c0 <__sflush_r+0x48>
 801f3b4:	6863      	ldr	r3, [r4, #4]
 801f3b6:	1ac0      	subs	r0, r0, r3
 801f3b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f3ba:	b10b      	cbz	r3, 801f3c0 <__sflush_r+0x48>
 801f3bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f3be:	1ac0      	subs	r0, r0, r3
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	4602      	mov	r2, r0
 801f3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3c6:	6a21      	ldr	r1, [r4, #32]
 801f3c8:	4628      	mov	r0, r5
 801f3ca:	47b0      	blx	r6
 801f3cc:	1c43      	adds	r3, r0, #1
 801f3ce:	89a3      	ldrh	r3, [r4, #12]
 801f3d0:	d106      	bne.n	801f3e0 <__sflush_r+0x68>
 801f3d2:	6829      	ldr	r1, [r5, #0]
 801f3d4:	291d      	cmp	r1, #29
 801f3d6:	d848      	bhi.n	801f46a <__sflush_r+0xf2>
 801f3d8:	4a29      	ldr	r2, [pc, #164]	; (801f480 <__sflush_r+0x108>)
 801f3da:	40ca      	lsrs	r2, r1
 801f3dc:	07d6      	lsls	r6, r2, #31
 801f3de:	d544      	bpl.n	801f46a <__sflush_r+0xf2>
 801f3e0:	2200      	movs	r2, #0
 801f3e2:	6062      	str	r2, [r4, #4]
 801f3e4:	04d9      	lsls	r1, r3, #19
 801f3e6:	6922      	ldr	r2, [r4, #16]
 801f3e8:	6022      	str	r2, [r4, #0]
 801f3ea:	d504      	bpl.n	801f3f6 <__sflush_r+0x7e>
 801f3ec:	1c42      	adds	r2, r0, #1
 801f3ee:	d101      	bne.n	801f3f4 <__sflush_r+0x7c>
 801f3f0:	682b      	ldr	r3, [r5, #0]
 801f3f2:	b903      	cbnz	r3, 801f3f6 <__sflush_r+0x7e>
 801f3f4:	6560      	str	r0, [r4, #84]	; 0x54
 801f3f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f3f8:	602f      	str	r7, [r5, #0]
 801f3fa:	2900      	cmp	r1, #0
 801f3fc:	d0c9      	beq.n	801f392 <__sflush_r+0x1a>
 801f3fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f402:	4299      	cmp	r1, r3
 801f404:	d002      	beq.n	801f40c <__sflush_r+0x94>
 801f406:	4628      	mov	r0, r5
 801f408:	f7fc f906 	bl	801b618 <_free_r>
 801f40c:	2000      	movs	r0, #0
 801f40e:	6360      	str	r0, [r4, #52]	; 0x34
 801f410:	e7c0      	b.n	801f394 <__sflush_r+0x1c>
 801f412:	2301      	movs	r3, #1
 801f414:	4628      	mov	r0, r5
 801f416:	47b0      	blx	r6
 801f418:	1c41      	adds	r1, r0, #1
 801f41a:	d1c8      	bne.n	801f3ae <__sflush_r+0x36>
 801f41c:	682b      	ldr	r3, [r5, #0]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d0c5      	beq.n	801f3ae <__sflush_r+0x36>
 801f422:	2b1d      	cmp	r3, #29
 801f424:	d001      	beq.n	801f42a <__sflush_r+0xb2>
 801f426:	2b16      	cmp	r3, #22
 801f428:	d101      	bne.n	801f42e <__sflush_r+0xb6>
 801f42a:	602f      	str	r7, [r5, #0]
 801f42c:	e7b1      	b.n	801f392 <__sflush_r+0x1a>
 801f42e:	89a3      	ldrh	r3, [r4, #12]
 801f430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f434:	81a3      	strh	r3, [r4, #12]
 801f436:	e7ad      	b.n	801f394 <__sflush_r+0x1c>
 801f438:	690f      	ldr	r7, [r1, #16]
 801f43a:	2f00      	cmp	r7, #0
 801f43c:	d0a9      	beq.n	801f392 <__sflush_r+0x1a>
 801f43e:	0793      	lsls	r3, r2, #30
 801f440:	680e      	ldr	r6, [r1, #0]
 801f442:	bf08      	it	eq
 801f444:	694b      	ldreq	r3, [r1, #20]
 801f446:	600f      	str	r7, [r1, #0]
 801f448:	bf18      	it	ne
 801f44a:	2300      	movne	r3, #0
 801f44c:	eba6 0807 	sub.w	r8, r6, r7
 801f450:	608b      	str	r3, [r1, #8]
 801f452:	f1b8 0f00 	cmp.w	r8, #0
 801f456:	dd9c      	ble.n	801f392 <__sflush_r+0x1a>
 801f458:	4643      	mov	r3, r8
 801f45a:	463a      	mov	r2, r7
 801f45c:	6a21      	ldr	r1, [r4, #32]
 801f45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f460:	4628      	mov	r0, r5
 801f462:	47b0      	blx	r6
 801f464:	2800      	cmp	r0, #0
 801f466:	dc06      	bgt.n	801f476 <__sflush_r+0xfe>
 801f468:	89a3      	ldrh	r3, [r4, #12]
 801f46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f46e:	81a3      	strh	r3, [r4, #12]
 801f470:	f04f 30ff 	mov.w	r0, #4294967295
 801f474:	e78e      	b.n	801f394 <__sflush_r+0x1c>
 801f476:	4407      	add	r7, r0
 801f478:	eba8 0800 	sub.w	r8, r8, r0
 801f47c:	e7e9      	b.n	801f452 <__sflush_r+0xda>
 801f47e:	bf00      	nop
 801f480:	20400001 	.word	0x20400001

0801f484 <_fflush_r>:
 801f484:	b538      	push	{r3, r4, r5, lr}
 801f486:	690b      	ldr	r3, [r1, #16]
 801f488:	4605      	mov	r5, r0
 801f48a:	460c      	mov	r4, r1
 801f48c:	b1db      	cbz	r3, 801f4c6 <_fflush_r+0x42>
 801f48e:	b118      	cbz	r0, 801f498 <_fflush_r+0x14>
 801f490:	6983      	ldr	r3, [r0, #24]
 801f492:	b90b      	cbnz	r3, 801f498 <_fflush_r+0x14>
 801f494:	f7fe fbe8 	bl	801dc68 <__sinit>
 801f498:	4b0c      	ldr	r3, [pc, #48]	; (801f4cc <_fflush_r+0x48>)
 801f49a:	429c      	cmp	r4, r3
 801f49c:	d109      	bne.n	801f4b2 <_fflush_r+0x2e>
 801f49e:	686c      	ldr	r4, [r5, #4]
 801f4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4a4:	b17b      	cbz	r3, 801f4c6 <_fflush_r+0x42>
 801f4a6:	4621      	mov	r1, r4
 801f4a8:	4628      	mov	r0, r5
 801f4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f4ae:	f7ff bf63 	b.w	801f378 <__sflush_r>
 801f4b2:	4b07      	ldr	r3, [pc, #28]	; (801f4d0 <_fflush_r+0x4c>)
 801f4b4:	429c      	cmp	r4, r3
 801f4b6:	d101      	bne.n	801f4bc <_fflush_r+0x38>
 801f4b8:	68ac      	ldr	r4, [r5, #8]
 801f4ba:	e7f1      	b.n	801f4a0 <_fflush_r+0x1c>
 801f4bc:	4b05      	ldr	r3, [pc, #20]	; (801f4d4 <_fflush_r+0x50>)
 801f4be:	429c      	cmp	r4, r3
 801f4c0:	bf08      	it	eq
 801f4c2:	68ec      	ldreq	r4, [r5, #12]
 801f4c4:	e7ec      	b.n	801f4a0 <_fflush_r+0x1c>
 801f4c6:	2000      	movs	r0, #0
 801f4c8:	bd38      	pop	{r3, r4, r5, pc}
 801f4ca:	bf00      	nop
 801f4cc:	08024bd0 	.word	0x08024bd0
 801f4d0:	08024bf0 	.word	0x08024bf0
 801f4d4:	08024bb0 	.word	0x08024bb0

0801f4d8 <_lseek_r>:
 801f4d8:	b538      	push	{r3, r4, r5, lr}
 801f4da:	4c07      	ldr	r4, [pc, #28]	; (801f4f8 <_lseek_r+0x20>)
 801f4dc:	4605      	mov	r5, r0
 801f4de:	4608      	mov	r0, r1
 801f4e0:	4611      	mov	r1, r2
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	6022      	str	r2, [r4, #0]
 801f4e6:	461a      	mov	r2, r3
 801f4e8:	f7e4 fcf4 	bl	8003ed4 <_lseek>
 801f4ec:	1c43      	adds	r3, r0, #1
 801f4ee:	d102      	bne.n	801f4f6 <_lseek_r+0x1e>
 801f4f0:	6823      	ldr	r3, [r4, #0]
 801f4f2:	b103      	cbz	r3, 801f4f6 <_lseek_r+0x1e>
 801f4f4:	602b      	str	r3, [r5, #0]
 801f4f6:	bd38      	pop	{r3, r4, r5, pc}
 801f4f8:	20008308 	.word	0x20008308

0801f4fc <__swhatbuf_r>:
 801f4fc:	b570      	push	{r4, r5, r6, lr}
 801f4fe:	460e      	mov	r6, r1
 801f500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f504:	2900      	cmp	r1, #0
 801f506:	b096      	sub	sp, #88	; 0x58
 801f508:	4614      	mov	r4, r2
 801f50a:	461d      	mov	r5, r3
 801f50c:	da07      	bge.n	801f51e <__swhatbuf_r+0x22>
 801f50e:	2300      	movs	r3, #0
 801f510:	602b      	str	r3, [r5, #0]
 801f512:	89b3      	ldrh	r3, [r6, #12]
 801f514:	061a      	lsls	r2, r3, #24
 801f516:	d410      	bmi.n	801f53a <__swhatbuf_r+0x3e>
 801f518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f51c:	e00e      	b.n	801f53c <__swhatbuf_r+0x40>
 801f51e:	466a      	mov	r2, sp
 801f520:	f000 f888 	bl	801f634 <_fstat_r>
 801f524:	2800      	cmp	r0, #0
 801f526:	dbf2      	blt.n	801f50e <__swhatbuf_r+0x12>
 801f528:	9a01      	ldr	r2, [sp, #4]
 801f52a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f52e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f532:	425a      	negs	r2, r3
 801f534:	415a      	adcs	r2, r3
 801f536:	602a      	str	r2, [r5, #0]
 801f538:	e7ee      	b.n	801f518 <__swhatbuf_r+0x1c>
 801f53a:	2340      	movs	r3, #64	; 0x40
 801f53c:	2000      	movs	r0, #0
 801f53e:	6023      	str	r3, [r4, #0]
 801f540:	b016      	add	sp, #88	; 0x58
 801f542:	bd70      	pop	{r4, r5, r6, pc}

0801f544 <__smakebuf_r>:
 801f544:	898b      	ldrh	r3, [r1, #12]
 801f546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f548:	079d      	lsls	r5, r3, #30
 801f54a:	4606      	mov	r6, r0
 801f54c:	460c      	mov	r4, r1
 801f54e:	d507      	bpl.n	801f560 <__smakebuf_r+0x1c>
 801f550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f554:	6023      	str	r3, [r4, #0]
 801f556:	6123      	str	r3, [r4, #16]
 801f558:	2301      	movs	r3, #1
 801f55a:	6163      	str	r3, [r4, #20]
 801f55c:	b002      	add	sp, #8
 801f55e:	bd70      	pop	{r4, r5, r6, pc}
 801f560:	ab01      	add	r3, sp, #4
 801f562:	466a      	mov	r2, sp
 801f564:	f7ff ffca 	bl	801f4fc <__swhatbuf_r>
 801f568:	9900      	ldr	r1, [sp, #0]
 801f56a:	4605      	mov	r5, r0
 801f56c:	4630      	mov	r0, r6
 801f56e:	f7fc f8a1 	bl	801b6b4 <_malloc_r>
 801f572:	b948      	cbnz	r0, 801f588 <__smakebuf_r+0x44>
 801f574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f578:	059a      	lsls	r2, r3, #22
 801f57a:	d4ef      	bmi.n	801f55c <__smakebuf_r+0x18>
 801f57c:	f023 0303 	bic.w	r3, r3, #3
 801f580:	f043 0302 	orr.w	r3, r3, #2
 801f584:	81a3      	strh	r3, [r4, #12]
 801f586:	e7e3      	b.n	801f550 <__smakebuf_r+0xc>
 801f588:	4b0d      	ldr	r3, [pc, #52]	; (801f5c0 <__smakebuf_r+0x7c>)
 801f58a:	62b3      	str	r3, [r6, #40]	; 0x28
 801f58c:	89a3      	ldrh	r3, [r4, #12]
 801f58e:	6020      	str	r0, [r4, #0]
 801f590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f594:	81a3      	strh	r3, [r4, #12]
 801f596:	9b00      	ldr	r3, [sp, #0]
 801f598:	6163      	str	r3, [r4, #20]
 801f59a:	9b01      	ldr	r3, [sp, #4]
 801f59c:	6120      	str	r0, [r4, #16]
 801f59e:	b15b      	cbz	r3, 801f5b8 <__smakebuf_r+0x74>
 801f5a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f5a4:	4630      	mov	r0, r6
 801f5a6:	f000 f857 	bl	801f658 <_isatty_r>
 801f5aa:	b128      	cbz	r0, 801f5b8 <__smakebuf_r+0x74>
 801f5ac:	89a3      	ldrh	r3, [r4, #12]
 801f5ae:	f023 0303 	bic.w	r3, r3, #3
 801f5b2:	f043 0301 	orr.w	r3, r3, #1
 801f5b6:	81a3      	strh	r3, [r4, #12]
 801f5b8:	89a3      	ldrh	r3, [r4, #12]
 801f5ba:	431d      	orrs	r5, r3
 801f5bc:	81a5      	strh	r5, [r4, #12]
 801f5be:	e7cd      	b.n	801f55c <__smakebuf_r+0x18>
 801f5c0:	0801dc31 	.word	0x0801dc31

0801f5c4 <_realloc_r>:
 801f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5c6:	4607      	mov	r7, r0
 801f5c8:	4614      	mov	r4, r2
 801f5ca:	460e      	mov	r6, r1
 801f5cc:	b921      	cbnz	r1, 801f5d8 <_realloc_r+0x14>
 801f5ce:	4611      	mov	r1, r2
 801f5d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f5d4:	f7fc b86e 	b.w	801b6b4 <_malloc_r>
 801f5d8:	b922      	cbnz	r2, 801f5e4 <_realloc_r+0x20>
 801f5da:	f7fc f81d 	bl	801b618 <_free_r>
 801f5de:	4625      	mov	r5, r4
 801f5e0:	4628      	mov	r0, r5
 801f5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5e4:	f000 f848 	bl	801f678 <_malloc_usable_size_r>
 801f5e8:	42a0      	cmp	r0, r4
 801f5ea:	d20f      	bcs.n	801f60c <_realloc_r+0x48>
 801f5ec:	4621      	mov	r1, r4
 801f5ee:	4638      	mov	r0, r7
 801f5f0:	f7fc f860 	bl	801b6b4 <_malloc_r>
 801f5f4:	4605      	mov	r5, r0
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	d0f2      	beq.n	801f5e0 <_realloc_r+0x1c>
 801f5fa:	4631      	mov	r1, r6
 801f5fc:	4622      	mov	r2, r4
 801f5fe:	f7fb ffde 	bl	801b5be <memcpy>
 801f602:	4631      	mov	r1, r6
 801f604:	4638      	mov	r0, r7
 801f606:	f7fc f807 	bl	801b618 <_free_r>
 801f60a:	e7e9      	b.n	801f5e0 <_realloc_r+0x1c>
 801f60c:	4635      	mov	r5, r6
 801f60e:	e7e7      	b.n	801f5e0 <_realloc_r+0x1c>

0801f610 <_read_r>:
 801f610:	b538      	push	{r3, r4, r5, lr}
 801f612:	4c07      	ldr	r4, [pc, #28]	; (801f630 <_read_r+0x20>)
 801f614:	4605      	mov	r5, r0
 801f616:	4608      	mov	r0, r1
 801f618:	4611      	mov	r1, r2
 801f61a:	2200      	movs	r2, #0
 801f61c:	6022      	str	r2, [r4, #0]
 801f61e:	461a      	mov	r2, r3
 801f620:	f7e4 fbf8 	bl	8003e14 <_read>
 801f624:	1c43      	adds	r3, r0, #1
 801f626:	d102      	bne.n	801f62e <_read_r+0x1e>
 801f628:	6823      	ldr	r3, [r4, #0]
 801f62a:	b103      	cbz	r3, 801f62e <_read_r+0x1e>
 801f62c:	602b      	str	r3, [r5, #0]
 801f62e:	bd38      	pop	{r3, r4, r5, pc}
 801f630:	20008308 	.word	0x20008308

0801f634 <_fstat_r>:
 801f634:	b538      	push	{r3, r4, r5, lr}
 801f636:	4c07      	ldr	r4, [pc, #28]	; (801f654 <_fstat_r+0x20>)
 801f638:	2300      	movs	r3, #0
 801f63a:	4605      	mov	r5, r0
 801f63c:	4608      	mov	r0, r1
 801f63e:	4611      	mov	r1, r2
 801f640:	6023      	str	r3, [r4, #0]
 801f642:	f7e4 fc2c 	bl	8003e9e <_fstat>
 801f646:	1c43      	adds	r3, r0, #1
 801f648:	d102      	bne.n	801f650 <_fstat_r+0x1c>
 801f64a:	6823      	ldr	r3, [r4, #0]
 801f64c:	b103      	cbz	r3, 801f650 <_fstat_r+0x1c>
 801f64e:	602b      	str	r3, [r5, #0]
 801f650:	bd38      	pop	{r3, r4, r5, pc}
 801f652:	bf00      	nop
 801f654:	20008308 	.word	0x20008308

0801f658 <_isatty_r>:
 801f658:	b538      	push	{r3, r4, r5, lr}
 801f65a:	4c06      	ldr	r4, [pc, #24]	; (801f674 <_isatty_r+0x1c>)
 801f65c:	2300      	movs	r3, #0
 801f65e:	4605      	mov	r5, r0
 801f660:	4608      	mov	r0, r1
 801f662:	6023      	str	r3, [r4, #0]
 801f664:	f7e4 fc2b 	bl	8003ebe <_isatty>
 801f668:	1c43      	adds	r3, r0, #1
 801f66a:	d102      	bne.n	801f672 <_isatty_r+0x1a>
 801f66c:	6823      	ldr	r3, [r4, #0]
 801f66e:	b103      	cbz	r3, 801f672 <_isatty_r+0x1a>
 801f670:	602b      	str	r3, [r5, #0]
 801f672:	bd38      	pop	{r3, r4, r5, pc}
 801f674:	20008308 	.word	0x20008308

0801f678 <_malloc_usable_size_r>:
 801f678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f67c:	1f18      	subs	r0, r3, #4
 801f67e:	2b00      	cmp	r3, #0
 801f680:	bfbc      	itt	lt
 801f682:	580b      	ldrlt	r3, [r1, r0]
 801f684:	18c0      	addlt	r0, r0, r3
 801f686:	4770      	bx	lr

0801f688 <pow>:
 801f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f68c:	ed2d 8b04 	vpush	{d8-d9}
 801f690:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801f964 <pow+0x2dc>
 801f694:	b08d      	sub	sp, #52	; 0x34
 801f696:	ec57 6b10 	vmov	r6, r7, d0
 801f69a:	ec55 4b11 	vmov	r4, r5, d1
 801f69e:	f000 f963 	bl	801f968 <__ieee754_pow>
 801f6a2:	f999 3000 	ldrsb.w	r3, [r9]
 801f6a6:	9300      	str	r3, [sp, #0]
 801f6a8:	3301      	adds	r3, #1
 801f6aa:	eeb0 8a40 	vmov.f32	s16, s0
 801f6ae:	eef0 8a60 	vmov.f32	s17, s1
 801f6b2:	46c8      	mov	r8, r9
 801f6b4:	d05f      	beq.n	801f776 <pow+0xee>
 801f6b6:	4622      	mov	r2, r4
 801f6b8:	462b      	mov	r3, r5
 801f6ba:	4620      	mov	r0, r4
 801f6bc:	4629      	mov	r1, r5
 801f6be:	f7e1 fa45 	bl	8000b4c <__aeabi_dcmpun>
 801f6c2:	4683      	mov	fp, r0
 801f6c4:	2800      	cmp	r0, #0
 801f6c6:	d156      	bne.n	801f776 <pow+0xee>
 801f6c8:	4632      	mov	r2, r6
 801f6ca:	463b      	mov	r3, r7
 801f6cc:	4630      	mov	r0, r6
 801f6ce:	4639      	mov	r1, r7
 801f6d0:	f7e1 fa3c 	bl	8000b4c <__aeabi_dcmpun>
 801f6d4:	9001      	str	r0, [sp, #4]
 801f6d6:	b1e8      	cbz	r0, 801f714 <pow+0x8c>
 801f6d8:	2200      	movs	r2, #0
 801f6da:	2300      	movs	r3, #0
 801f6dc:	4620      	mov	r0, r4
 801f6de:	4629      	mov	r1, r5
 801f6e0:	f7e1 fa02 	bl	8000ae8 <__aeabi_dcmpeq>
 801f6e4:	2800      	cmp	r0, #0
 801f6e6:	d046      	beq.n	801f776 <pow+0xee>
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	9302      	str	r3, [sp, #8]
 801f6ec:	4b96      	ldr	r3, [pc, #600]	; (801f948 <pow+0x2c0>)
 801f6ee:	9303      	str	r3, [sp, #12]
 801f6f0:	4b96      	ldr	r3, [pc, #600]	; (801f94c <pow+0x2c4>)
 801f6f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801f6f6:	2200      	movs	r2, #0
 801f6f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f6fc:	9b00      	ldr	r3, [sp, #0]
 801f6fe:	2b02      	cmp	r3, #2
 801f700:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f704:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f708:	d033      	beq.n	801f772 <pow+0xea>
 801f70a:	a802      	add	r0, sp, #8
 801f70c:	f000 fefb 	bl	8020506 <matherr>
 801f710:	bb48      	cbnz	r0, 801f766 <pow+0xde>
 801f712:	e05d      	b.n	801f7d0 <pow+0x148>
 801f714:	f04f 0a00 	mov.w	sl, #0
 801f718:	f04f 0b00 	mov.w	fp, #0
 801f71c:	4652      	mov	r2, sl
 801f71e:	465b      	mov	r3, fp
 801f720:	4630      	mov	r0, r6
 801f722:	4639      	mov	r1, r7
 801f724:	f7e1 f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 801f728:	ec4b ab19 	vmov	d9, sl, fp
 801f72c:	2800      	cmp	r0, #0
 801f72e:	d054      	beq.n	801f7da <pow+0x152>
 801f730:	4652      	mov	r2, sl
 801f732:	465b      	mov	r3, fp
 801f734:	4620      	mov	r0, r4
 801f736:	4629      	mov	r1, r5
 801f738:	f7e1 f9d6 	bl	8000ae8 <__aeabi_dcmpeq>
 801f73c:	4680      	mov	r8, r0
 801f73e:	b318      	cbz	r0, 801f788 <pow+0x100>
 801f740:	2301      	movs	r3, #1
 801f742:	9302      	str	r3, [sp, #8]
 801f744:	4b80      	ldr	r3, [pc, #512]	; (801f948 <pow+0x2c0>)
 801f746:	9303      	str	r3, [sp, #12]
 801f748:	9b01      	ldr	r3, [sp, #4]
 801f74a:	930a      	str	r3, [sp, #40]	; 0x28
 801f74c:	9b00      	ldr	r3, [sp, #0]
 801f74e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f752:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f756:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d0d5      	beq.n	801f70a <pow+0x82>
 801f75e:	4b7b      	ldr	r3, [pc, #492]	; (801f94c <pow+0x2c4>)
 801f760:	2200      	movs	r2, #0
 801f762:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f768:	b11b      	cbz	r3, 801f772 <pow+0xea>
 801f76a:	f000 ffe3 	bl	8020734 <__errno>
 801f76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f770:	6003      	str	r3, [r0, #0]
 801f772:	ed9d 8b08 	vldr	d8, [sp, #32]
 801f776:	eeb0 0a48 	vmov.f32	s0, s16
 801f77a:	eef0 0a68 	vmov.f32	s1, s17
 801f77e:	b00d      	add	sp, #52	; 0x34
 801f780:	ecbd 8b04 	vpop	{d8-d9}
 801f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f788:	ec45 4b10 	vmov	d0, r4, r5
 801f78c:	f000 feb3 	bl	80204f6 <finite>
 801f790:	2800      	cmp	r0, #0
 801f792:	d0f0      	beq.n	801f776 <pow+0xee>
 801f794:	4652      	mov	r2, sl
 801f796:	465b      	mov	r3, fp
 801f798:	4620      	mov	r0, r4
 801f79a:	4629      	mov	r1, r5
 801f79c:	f7e1 f9ae 	bl	8000afc <__aeabi_dcmplt>
 801f7a0:	2800      	cmp	r0, #0
 801f7a2:	d0e8      	beq.n	801f776 <pow+0xee>
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	9302      	str	r3, [sp, #8]
 801f7a8:	4b67      	ldr	r3, [pc, #412]	; (801f948 <pow+0x2c0>)
 801f7aa:	9303      	str	r3, [sp, #12]
 801f7ac:	f999 3000 	ldrsb.w	r3, [r9]
 801f7b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801f7b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f7b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f7bc:	b913      	cbnz	r3, 801f7c4 <pow+0x13c>
 801f7be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801f7c2:	e7a2      	b.n	801f70a <pow+0x82>
 801f7c4:	4962      	ldr	r1, [pc, #392]	; (801f950 <pow+0x2c8>)
 801f7c6:	2000      	movs	r0, #0
 801f7c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f7cc:	2b02      	cmp	r3, #2
 801f7ce:	d19c      	bne.n	801f70a <pow+0x82>
 801f7d0:	f000 ffb0 	bl	8020734 <__errno>
 801f7d4:	2321      	movs	r3, #33	; 0x21
 801f7d6:	6003      	str	r3, [r0, #0]
 801f7d8:	e7c5      	b.n	801f766 <pow+0xde>
 801f7da:	eeb0 0a48 	vmov.f32	s0, s16
 801f7de:	eef0 0a68 	vmov.f32	s1, s17
 801f7e2:	f000 fe88 	bl	80204f6 <finite>
 801f7e6:	9000      	str	r0, [sp, #0]
 801f7e8:	2800      	cmp	r0, #0
 801f7ea:	f040 8081 	bne.w	801f8f0 <pow+0x268>
 801f7ee:	ec47 6b10 	vmov	d0, r6, r7
 801f7f2:	f000 fe80 	bl	80204f6 <finite>
 801f7f6:	2800      	cmp	r0, #0
 801f7f8:	d07a      	beq.n	801f8f0 <pow+0x268>
 801f7fa:	ec45 4b10 	vmov	d0, r4, r5
 801f7fe:	f000 fe7a 	bl	80204f6 <finite>
 801f802:	2800      	cmp	r0, #0
 801f804:	d074      	beq.n	801f8f0 <pow+0x268>
 801f806:	ec53 2b18 	vmov	r2, r3, d8
 801f80a:	ee18 0a10 	vmov	r0, s16
 801f80e:	4619      	mov	r1, r3
 801f810:	f7e1 f99c 	bl	8000b4c <__aeabi_dcmpun>
 801f814:	f999 9000 	ldrsb.w	r9, [r9]
 801f818:	4b4b      	ldr	r3, [pc, #300]	; (801f948 <pow+0x2c0>)
 801f81a:	b1b0      	cbz	r0, 801f84a <pow+0x1c2>
 801f81c:	2201      	movs	r2, #1
 801f81e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f822:	9b00      	ldr	r3, [sp, #0]
 801f824:	930a      	str	r3, [sp, #40]	; 0x28
 801f826:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f82a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f82e:	f1b9 0f00 	cmp.w	r9, #0
 801f832:	d0c4      	beq.n	801f7be <pow+0x136>
 801f834:	4652      	mov	r2, sl
 801f836:	465b      	mov	r3, fp
 801f838:	4650      	mov	r0, sl
 801f83a:	4659      	mov	r1, fp
 801f83c:	f7e1 f816 	bl	800086c <__aeabi_ddiv>
 801f840:	f1b9 0f02 	cmp.w	r9, #2
 801f844:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f848:	e7c1      	b.n	801f7ce <pow+0x146>
 801f84a:	2203      	movs	r2, #3
 801f84c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f850:	900a      	str	r0, [sp, #40]	; 0x28
 801f852:	4629      	mov	r1, r5
 801f854:	4620      	mov	r0, r4
 801f856:	2200      	movs	r2, #0
 801f858:	4b3e      	ldr	r3, [pc, #248]	; (801f954 <pow+0x2cc>)
 801f85a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f85e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f862:	f7e0 fed9 	bl	8000618 <__aeabi_dmul>
 801f866:	4604      	mov	r4, r0
 801f868:	460d      	mov	r5, r1
 801f86a:	f1b9 0f00 	cmp.w	r9, #0
 801f86e:	d124      	bne.n	801f8ba <pow+0x232>
 801f870:	4b39      	ldr	r3, [pc, #228]	; (801f958 <pow+0x2d0>)
 801f872:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801f876:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f87a:	4630      	mov	r0, r6
 801f87c:	4652      	mov	r2, sl
 801f87e:	465b      	mov	r3, fp
 801f880:	4639      	mov	r1, r7
 801f882:	f7e1 f93b 	bl	8000afc <__aeabi_dcmplt>
 801f886:	2800      	cmp	r0, #0
 801f888:	d056      	beq.n	801f938 <pow+0x2b0>
 801f88a:	ec45 4b10 	vmov	d0, r4, r5
 801f88e:	f000 fe47 	bl	8020520 <rint>
 801f892:	4622      	mov	r2, r4
 801f894:	462b      	mov	r3, r5
 801f896:	ec51 0b10 	vmov	r0, r1, d0
 801f89a:	f7e1 f925 	bl	8000ae8 <__aeabi_dcmpeq>
 801f89e:	b920      	cbnz	r0, 801f8aa <pow+0x222>
 801f8a0:	4b2e      	ldr	r3, [pc, #184]	; (801f95c <pow+0x2d4>)
 801f8a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801f8a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8aa:	f998 3000 	ldrsb.w	r3, [r8]
 801f8ae:	2b02      	cmp	r3, #2
 801f8b0:	d142      	bne.n	801f938 <pow+0x2b0>
 801f8b2:	f000 ff3f 	bl	8020734 <__errno>
 801f8b6:	2322      	movs	r3, #34	; 0x22
 801f8b8:	e78d      	b.n	801f7d6 <pow+0x14e>
 801f8ba:	4b29      	ldr	r3, [pc, #164]	; (801f960 <pow+0x2d8>)
 801f8bc:	2200      	movs	r2, #0
 801f8be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8c2:	4630      	mov	r0, r6
 801f8c4:	4652      	mov	r2, sl
 801f8c6:	465b      	mov	r3, fp
 801f8c8:	4639      	mov	r1, r7
 801f8ca:	f7e1 f917 	bl	8000afc <__aeabi_dcmplt>
 801f8ce:	2800      	cmp	r0, #0
 801f8d0:	d0eb      	beq.n	801f8aa <pow+0x222>
 801f8d2:	ec45 4b10 	vmov	d0, r4, r5
 801f8d6:	f000 fe23 	bl	8020520 <rint>
 801f8da:	4622      	mov	r2, r4
 801f8dc:	462b      	mov	r3, r5
 801f8de:	ec51 0b10 	vmov	r0, r1, d0
 801f8e2:	f7e1 f901 	bl	8000ae8 <__aeabi_dcmpeq>
 801f8e6:	2800      	cmp	r0, #0
 801f8e8:	d1df      	bne.n	801f8aa <pow+0x222>
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	4b18      	ldr	r3, [pc, #96]	; (801f950 <pow+0x2c8>)
 801f8ee:	e7da      	b.n	801f8a6 <pow+0x21e>
 801f8f0:	2200      	movs	r2, #0
 801f8f2:	2300      	movs	r3, #0
 801f8f4:	ec51 0b18 	vmov	r0, r1, d8
 801f8f8:	f7e1 f8f6 	bl	8000ae8 <__aeabi_dcmpeq>
 801f8fc:	2800      	cmp	r0, #0
 801f8fe:	f43f af3a 	beq.w	801f776 <pow+0xee>
 801f902:	ec47 6b10 	vmov	d0, r6, r7
 801f906:	f000 fdf6 	bl	80204f6 <finite>
 801f90a:	2800      	cmp	r0, #0
 801f90c:	f43f af33 	beq.w	801f776 <pow+0xee>
 801f910:	ec45 4b10 	vmov	d0, r4, r5
 801f914:	f000 fdef 	bl	80204f6 <finite>
 801f918:	2800      	cmp	r0, #0
 801f91a:	f43f af2c 	beq.w	801f776 <pow+0xee>
 801f91e:	2304      	movs	r3, #4
 801f920:	9302      	str	r3, [sp, #8]
 801f922:	4b09      	ldr	r3, [pc, #36]	; (801f948 <pow+0x2c0>)
 801f924:	9303      	str	r3, [sp, #12]
 801f926:	2300      	movs	r3, #0
 801f928:	930a      	str	r3, [sp, #40]	; 0x28
 801f92a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801f92e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801f932:	ed8d 9b08 	vstr	d9, [sp, #32]
 801f936:	e7b8      	b.n	801f8aa <pow+0x222>
 801f938:	a802      	add	r0, sp, #8
 801f93a:	f000 fde4 	bl	8020506 <matherr>
 801f93e:	2800      	cmp	r0, #0
 801f940:	f47f af11 	bne.w	801f766 <pow+0xde>
 801f944:	e7b5      	b.n	801f8b2 <pow+0x22a>
 801f946:	bf00      	nop
 801f948:	08024d1d 	.word	0x08024d1d
 801f94c:	3ff00000 	.word	0x3ff00000
 801f950:	fff00000 	.word	0xfff00000
 801f954:	3fe00000 	.word	0x3fe00000
 801f958:	47efffff 	.word	0x47efffff
 801f95c:	c7efffff 	.word	0xc7efffff
 801f960:	7ff00000 	.word	0x7ff00000
 801f964:	20000254 	.word	0x20000254

0801f968 <__ieee754_pow>:
 801f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f96c:	b091      	sub	sp, #68	; 0x44
 801f96e:	ed8d 1b00 	vstr	d1, [sp]
 801f972:	e9dd 2900 	ldrd	r2, r9, [sp]
 801f976:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801f97a:	ea58 0302 	orrs.w	r3, r8, r2
 801f97e:	ec57 6b10 	vmov	r6, r7, d0
 801f982:	f000 84be 	beq.w	8020302 <__ieee754_pow+0x99a>
 801f986:	4b7a      	ldr	r3, [pc, #488]	; (801fb70 <__ieee754_pow+0x208>)
 801f988:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801f98c:	429c      	cmp	r4, r3
 801f98e:	463d      	mov	r5, r7
 801f990:	ee10 aa10 	vmov	sl, s0
 801f994:	dc09      	bgt.n	801f9aa <__ieee754_pow+0x42>
 801f996:	d103      	bne.n	801f9a0 <__ieee754_pow+0x38>
 801f998:	b93e      	cbnz	r6, 801f9aa <__ieee754_pow+0x42>
 801f99a:	45a0      	cmp	r8, r4
 801f99c:	dc0d      	bgt.n	801f9ba <__ieee754_pow+0x52>
 801f99e:	e001      	b.n	801f9a4 <__ieee754_pow+0x3c>
 801f9a0:	4598      	cmp	r8, r3
 801f9a2:	dc02      	bgt.n	801f9aa <__ieee754_pow+0x42>
 801f9a4:	4598      	cmp	r8, r3
 801f9a6:	d10e      	bne.n	801f9c6 <__ieee754_pow+0x5e>
 801f9a8:	b16a      	cbz	r2, 801f9c6 <__ieee754_pow+0x5e>
 801f9aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f9ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f9b2:	ea54 030a 	orrs.w	r3, r4, sl
 801f9b6:	f000 84a4 	beq.w	8020302 <__ieee754_pow+0x99a>
 801f9ba:	486e      	ldr	r0, [pc, #440]	; (801fb74 <__ieee754_pow+0x20c>)
 801f9bc:	b011      	add	sp, #68	; 0x44
 801f9be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c2:	f000 bda5 	b.w	8020510 <nan>
 801f9c6:	2d00      	cmp	r5, #0
 801f9c8:	da53      	bge.n	801fa72 <__ieee754_pow+0x10a>
 801f9ca:	4b6b      	ldr	r3, [pc, #428]	; (801fb78 <__ieee754_pow+0x210>)
 801f9cc:	4598      	cmp	r8, r3
 801f9ce:	dc4d      	bgt.n	801fa6c <__ieee754_pow+0x104>
 801f9d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801f9d4:	4598      	cmp	r8, r3
 801f9d6:	dd4c      	ble.n	801fa72 <__ieee754_pow+0x10a>
 801f9d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 801f9dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f9e0:	2b14      	cmp	r3, #20
 801f9e2:	dd26      	ble.n	801fa32 <__ieee754_pow+0xca>
 801f9e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f9e8:	fa22 f103 	lsr.w	r1, r2, r3
 801f9ec:	fa01 f303 	lsl.w	r3, r1, r3
 801f9f0:	4293      	cmp	r3, r2
 801f9f2:	d13e      	bne.n	801fa72 <__ieee754_pow+0x10a>
 801f9f4:	f001 0101 	and.w	r1, r1, #1
 801f9f8:	f1c1 0b02 	rsb	fp, r1, #2
 801f9fc:	2a00      	cmp	r2, #0
 801f9fe:	d15b      	bne.n	801fab8 <__ieee754_pow+0x150>
 801fa00:	4b5b      	ldr	r3, [pc, #364]	; (801fb70 <__ieee754_pow+0x208>)
 801fa02:	4598      	cmp	r8, r3
 801fa04:	d124      	bne.n	801fa50 <__ieee754_pow+0xe8>
 801fa06:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801fa0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801fa0e:	ea53 030a 	orrs.w	r3, r3, sl
 801fa12:	f000 8476 	beq.w	8020302 <__ieee754_pow+0x99a>
 801fa16:	4b59      	ldr	r3, [pc, #356]	; (801fb7c <__ieee754_pow+0x214>)
 801fa18:	429c      	cmp	r4, r3
 801fa1a:	dd2d      	ble.n	801fa78 <__ieee754_pow+0x110>
 801fa1c:	f1b9 0f00 	cmp.w	r9, #0
 801fa20:	f280 8473 	bge.w	802030a <__ieee754_pow+0x9a2>
 801fa24:	2000      	movs	r0, #0
 801fa26:	2100      	movs	r1, #0
 801fa28:	ec41 0b10 	vmov	d0, r0, r1
 801fa2c:	b011      	add	sp, #68	; 0x44
 801fa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa32:	2a00      	cmp	r2, #0
 801fa34:	d13e      	bne.n	801fab4 <__ieee754_pow+0x14c>
 801fa36:	f1c3 0314 	rsb	r3, r3, #20
 801fa3a:	fa48 f103 	asr.w	r1, r8, r3
 801fa3e:	fa01 f303 	lsl.w	r3, r1, r3
 801fa42:	4543      	cmp	r3, r8
 801fa44:	f040 8469 	bne.w	802031a <__ieee754_pow+0x9b2>
 801fa48:	f001 0101 	and.w	r1, r1, #1
 801fa4c:	f1c1 0b02 	rsb	fp, r1, #2
 801fa50:	4b4b      	ldr	r3, [pc, #300]	; (801fb80 <__ieee754_pow+0x218>)
 801fa52:	4598      	cmp	r8, r3
 801fa54:	d118      	bne.n	801fa88 <__ieee754_pow+0x120>
 801fa56:	f1b9 0f00 	cmp.w	r9, #0
 801fa5a:	f280 845a 	bge.w	8020312 <__ieee754_pow+0x9aa>
 801fa5e:	4948      	ldr	r1, [pc, #288]	; (801fb80 <__ieee754_pow+0x218>)
 801fa60:	4632      	mov	r2, r6
 801fa62:	463b      	mov	r3, r7
 801fa64:	2000      	movs	r0, #0
 801fa66:	f7e0 ff01 	bl	800086c <__aeabi_ddiv>
 801fa6a:	e7dd      	b.n	801fa28 <__ieee754_pow+0xc0>
 801fa6c:	f04f 0b02 	mov.w	fp, #2
 801fa70:	e7c4      	b.n	801f9fc <__ieee754_pow+0x94>
 801fa72:	f04f 0b00 	mov.w	fp, #0
 801fa76:	e7c1      	b.n	801f9fc <__ieee754_pow+0x94>
 801fa78:	f1b9 0f00 	cmp.w	r9, #0
 801fa7c:	dad2      	bge.n	801fa24 <__ieee754_pow+0xbc>
 801fa7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801fa82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fa86:	e7cf      	b.n	801fa28 <__ieee754_pow+0xc0>
 801fa88:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801fa8c:	d106      	bne.n	801fa9c <__ieee754_pow+0x134>
 801fa8e:	4632      	mov	r2, r6
 801fa90:	463b      	mov	r3, r7
 801fa92:	4610      	mov	r0, r2
 801fa94:	4619      	mov	r1, r3
 801fa96:	f7e0 fdbf 	bl	8000618 <__aeabi_dmul>
 801fa9a:	e7c5      	b.n	801fa28 <__ieee754_pow+0xc0>
 801fa9c:	4b39      	ldr	r3, [pc, #228]	; (801fb84 <__ieee754_pow+0x21c>)
 801fa9e:	4599      	cmp	r9, r3
 801faa0:	d10a      	bne.n	801fab8 <__ieee754_pow+0x150>
 801faa2:	2d00      	cmp	r5, #0
 801faa4:	db08      	blt.n	801fab8 <__ieee754_pow+0x150>
 801faa6:	ec47 6b10 	vmov	d0, r6, r7
 801faaa:	b011      	add	sp, #68	; 0x44
 801faac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fab0:	f000 bc68 	b.w	8020384 <__ieee754_sqrt>
 801fab4:	f04f 0b00 	mov.w	fp, #0
 801fab8:	ec47 6b10 	vmov	d0, r6, r7
 801fabc:	f000 fd12 	bl	80204e4 <fabs>
 801fac0:	ec51 0b10 	vmov	r0, r1, d0
 801fac4:	f1ba 0f00 	cmp.w	sl, #0
 801fac8:	d127      	bne.n	801fb1a <__ieee754_pow+0x1b2>
 801faca:	b124      	cbz	r4, 801fad6 <__ieee754_pow+0x16e>
 801facc:	4b2c      	ldr	r3, [pc, #176]	; (801fb80 <__ieee754_pow+0x218>)
 801face:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801fad2:	429a      	cmp	r2, r3
 801fad4:	d121      	bne.n	801fb1a <__ieee754_pow+0x1b2>
 801fad6:	f1b9 0f00 	cmp.w	r9, #0
 801fada:	da05      	bge.n	801fae8 <__ieee754_pow+0x180>
 801fadc:	4602      	mov	r2, r0
 801fade:	460b      	mov	r3, r1
 801fae0:	2000      	movs	r0, #0
 801fae2:	4927      	ldr	r1, [pc, #156]	; (801fb80 <__ieee754_pow+0x218>)
 801fae4:	f7e0 fec2 	bl	800086c <__aeabi_ddiv>
 801fae8:	2d00      	cmp	r5, #0
 801faea:	da9d      	bge.n	801fa28 <__ieee754_pow+0xc0>
 801faec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801faf0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801faf4:	ea54 030b 	orrs.w	r3, r4, fp
 801faf8:	d108      	bne.n	801fb0c <__ieee754_pow+0x1a4>
 801fafa:	4602      	mov	r2, r0
 801fafc:	460b      	mov	r3, r1
 801fafe:	4610      	mov	r0, r2
 801fb00:	4619      	mov	r1, r3
 801fb02:	f7e0 fbd1 	bl	80002a8 <__aeabi_dsub>
 801fb06:	4602      	mov	r2, r0
 801fb08:	460b      	mov	r3, r1
 801fb0a:	e7ac      	b.n	801fa66 <__ieee754_pow+0xfe>
 801fb0c:	f1bb 0f01 	cmp.w	fp, #1
 801fb10:	d18a      	bne.n	801fa28 <__ieee754_pow+0xc0>
 801fb12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fb16:	4619      	mov	r1, r3
 801fb18:	e786      	b.n	801fa28 <__ieee754_pow+0xc0>
 801fb1a:	0fed      	lsrs	r5, r5, #31
 801fb1c:	1e6b      	subs	r3, r5, #1
 801fb1e:	930d      	str	r3, [sp, #52]	; 0x34
 801fb20:	ea5b 0303 	orrs.w	r3, fp, r3
 801fb24:	d102      	bne.n	801fb2c <__ieee754_pow+0x1c4>
 801fb26:	4632      	mov	r2, r6
 801fb28:	463b      	mov	r3, r7
 801fb2a:	e7e8      	b.n	801fafe <__ieee754_pow+0x196>
 801fb2c:	4b16      	ldr	r3, [pc, #88]	; (801fb88 <__ieee754_pow+0x220>)
 801fb2e:	4598      	cmp	r8, r3
 801fb30:	f340 80fe 	ble.w	801fd30 <__ieee754_pow+0x3c8>
 801fb34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801fb38:	4598      	cmp	r8, r3
 801fb3a:	dd0a      	ble.n	801fb52 <__ieee754_pow+0x1ea>
 801fb3c:	4b0f      	ldr	r3, [pc, #60]	; (801fb7c <__ieee754_pow+0x214>)
 801fb3e:	429c      	cmp	r4, r3
 801fb40:	dc0d      	bgt.n	801fb5e <__ieee754_pow+0x1f6>
 801fb42:	f1b9 0f00 	cmp.w	r9, #0
 801fb46:	f6bf af6d 	bge.w	801fa24 <__ieee754_pow+0xbc>
 801fb4a:	a307      	add	r3, pc, #28	; (adr r3, 801fb68 <__ieee754_pow+0x200>)
 801fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb50:	e79f      	b.n	801fa92 <__ieee754_pow+0x12a>
 801fb52:	4b0e      	ldr	r3, [pc, #56]	; (801fb8c <__ieee754_pow+0x224>)
 801fb54:	429c      	cmp	r4, r3
 801fb56:	ddf4      	ble.n	801fb42 <__ieee754_pow+0x1da>
 801fb58:	4b09      	ldr	r3, [pc, #36]	; (801fb80 <__ieee754_pow+0x218>)
 801fb5a:	429c      	cmp	r4, r3
 801fb5c:	dd18      	ble.n	801fb90 <__ieee754_pow+0x228>
 801fb5e:	f1b9 0f00 	cmp.w	r9, #0
 801fb62:	dcf2      	bgt.n	801fb4a <__ieee754_pow+0x1e2>
 801fb64:	e75e      	b.n	801fa24 <__ieee754_pow+0xbc>
 801fb66:	bf00      	nop
 801fb68:	8800759c 	.word	0x8800759c
 801fb6c:	7e37e43c 	.word	0x7e37e43c
 801fb70:	7ff00000 	.word	0x7ff00000
 801fb74:	08024d11 	.word	0x08024d11
 801fb78:	433fffff 	.word	0x433fffff
 801fb7c:	3fefffff 	.word	0x3fefffff
 801fb80:	3ff00000 	.word	0x3ff00000
 801fb84:	3fe00000 	.word	0x3fe00000
 801fb88:	41e00000 	.word	0x41e00000
 801fb8c:	3feffffe 	.word	0x3feffffe
 801fb90:	2200      	movs	r2, #0
 801fb92:	4b63      	ldr	r3, [pc, #396]	; (801fd20 <__ieee754_pow+0x3b8>)
 801fb94:	f7e0 fb88 	bl	80002a8 <__aeabi_dsub>
 801fb98:	a355      	add	r3, pc, #340	; (adr r3, 801fcf0 <__ieee754_pow+0x388>)
 801fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb9e:	4604      	mov	r4, r0
 801fba0:	460d      	mov	r5, r1
 801fba2:	f7e0 fd39 	bl	8000618 <__aeabi_dmul>
 801fba6:	a354      	add	r3, pc, #336	; (adr r3, 801fcf8 <__ieee754_pow+0x390>)
 801fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbac:	4606      	mov	r6, r0
 801fbae:	460f      	mov	r7, r1
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	4629      	mov	r1, r5
 801fbb4:	f7e0 fd30 	bl	8000618 <__aeabi_dmul>
 801fbb8:	2200      	movs	r2, #0
 801fbba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fbbe:	4b59      	ldr	r3, [pc, #356]	; (801fd24 <__ieee754_pow+0x3bc>)
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	4629      	mov	r1, r5
 801fbc4:	f7e0 fd28 	bl	8000618 <__aeabi_dmul>
 801fbc8:	4602      	mov	r2, r0
 801fbca:	460b      	mov	r3, r1
 801fbcc:	a14c      	add	r1, pc, #304	; (adr r1, 801fd00 <__ieee754_pow+0x398>)
 801fbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbd2:	f7e0 fb69 	bl	80002a8 <__aeabi_dsub>
 801fbd6:	4622      	mov	r2, r4
 801fbd8:	462b      	mov	r3, r5
 801fbda:	f7e0 fd1d 	bl	8000618 <__aeabi_dmul>
 801fbde:	4602      	mov	r2, r0
 801fbe0:	460b      	mov	r3, r1
 801fbe2:	2000      	movs	r0, #0
 801fbe4:	4950      	ldr	r1, [pc, #320]	; (801fd28 <__ieee754_pow+0x3c0>)
 801fbe6:	f7e0 fb5f 	bl	80002a8 <__aeabi_dsub>
 801fbea:	4622      	mov	r2, r4
 801fbec:	462b      	mov	r3, r5
 801fbee:	4680      	mov	r8, r0
 801fbf0:	4689      	mov	r9, r1
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	4629      	mov	r1, r5
 801fbf6:	f7e0 fd0f 	bl	8000618 <__aeabi_dmul>
 801fbfa:	4602      	mov	r2, r0
 801fbfc:	460b      	mov	r3, r1
 801fbfe:	4640      	mov	r0, r8
 801fc00:	4649      	mov	r1, r9
 801fc02:	f7e0 fd09 	bl	8000618 <__aeabi_dmul>
 801fc06:	a340      	add	r3, pc, #256	; (adr r3, 801fd08 <__ieee754_pow+0x3a0>)
 801fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc0c:	f7e0 fd04 	bl	8000618 <__aeabi_dmul>
 801fc10:	4602      	mov	r2, r0
 801fc12:	460b      	mov	r3, r1
 801fc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fc18:	f7e0 fb46 	bl	80002a8 <__aeabi_dsub>
 801fc1c:	4602      	mov	r2, r0
 801fc1e:	460b      	mov	r3, r1
 801fc20:	4604      	mov	r4, r0
 801fc22:	460d      	mov	r5, r1
 801fc24:	4630      	mov	r0, r6
 801fc26:	4639      	mov	r1, r7
 801fc28:	f7e0 fb40 	bl	80002ac <__adddf3>
 801fc2c:	2000      	movs	r0, #0
 801fc2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fc32:	4632      	mov	r2, r6
 801fc34:	463b      	mov	r3, r7
 801fc36:	f7e0 fb37 	bl	80002a8 <__aeabi_dsub>
 801fc3a:	4602      	mov	r2, r0
 801fc3c:	460b      	mov	r3, r1
 801fc3e:	4620      	mov	r0, r4
 801fc40:	4629      	mov	r1, r5
 801fc42:	f7e0 fb31 	bl	80002a8 <__aeabi_dsub>
 801fc46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc48:	f10b 33ff 	add.w	r3, fp, #4294967295
 801fc4c:	4313      	orrs	r3, r2
 801fc4e:	4606      	mov	r6, r0
 801fc50:	460f      	mov	r7, r1
 801fc52:	f040 81eb 	bne.w	802002c <__ieee754_pow+0x6c4>
 801fc56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801fd10 <__ieee754_pow+0x3a8>
 801fc5a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801fc5e:	2400      	movs	r4, #0
 801fc60:	4622      	mov	r2, r4
 801fc62:	462b      	mov	r3, r5
 801fc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fc68:	ed8d 7b02 	vstr	d7, [sp, #8]
 801fc6c:	f7e0 fb1c 	bl	80002a8 <__aeabi_dsub>
 801fc70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fc74:	f7e0 fcd0 	bl	8000618 <__aeabi_dmul>
 801fc78:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc7c:	4680      	mov	r8, r0
 801fc7e:	4689      	mov	r9, r1
 801fc80:	4630      	mov	r0, r6
 801fc82:	4639      	mov	r1, r7
 801fc84:	f7e0 fcc8 	bl	8000618 <__aeabi_dmul>
 801fc88:	4602      	mov	r2, r0
 801fc8a:	460b      	mov	r3, r1
 801fc8c:	4640      	mov	r0, r8
 801fc8e:	4649      	mov	r1, r9
 801fc90:	f7e0 fb0c 	bl	80002ac <__adddf3>
 801fc94:	4622      	mov	r2, r4
 801fc96:	462b      	mov	r3, r5
 801fc98:	4680      	mov	r8, r0
 801fc9a:	4689      	mov	r9, r1
 801fc9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fca0:	f7e0 fcba 	bl	8000618 <__aeabi_dmul>
 801fca4:	460b      	mov	r3, r1
 801fca6:	4604      	mov	r4, r0
 801fca8:	460d      	mov	r5, r1
 801fcaa:	4602      	mov	r2, r0
 801fcac:	4649      	mov	r1, r9
 801fcae:	4640      	mov	r0, r8
 801fcb0:	e9cd 4500 	strd	r4, r5, [sp]
 801fcb4:	f7e0 fafa 	bl	80002ac <__adddf3>
 801fcb8:	4b1c      	ldr	r3, [pc, #112]	; (801fd2c <__ieee754_pow+0x3c4>)
 801fcba:	4299      	cmp	r1, r3
 801fcbc:	4606      	mov	r6, r0
 801fcbe:	460f      	mov	r7, r1
 801fcc0:	468b      	mov	fp, r1
 801fcc2:	f340 82f7 	ble.w	80202b4 <__ieee754_pow+0x94c>
 801fcc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801fcca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801fcce:	4303      	orrs	r3, r0
 801fcd0:	f000 81ea 	beq.w	80200a8 <__ieee754_pow+0x740>
 801fcd4:	a310      	add	r3, pc, #64	; (adr r3, 801fd18 <__ieee754_pow+0x3b0>)
 801fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fcde:	f7e0 fc9b 	bl	8000618 <__aeabi_dmul>
 801fce2:	a30d      	add	r3, pc, #52	; (adr r3, 801fd18 <__ieee754_pow+0x3b0>)
 801fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fce8:	e6d5      	b.n	801fa96 <__ieee754_pow+0x12e>
 801fcea:	bf00      	nop
 801fcec:	f3af 8000 	nop.w
 801fcf0:	60000000 	.word	0x60000000
 801fcf4:	3ff71547 	.word	0x3ff71547
 801fcf8:	f85ddf44 	.word	0xf85ddf44
 801fcfc:	3e54ae0b 	.word	0x3e54ae0b
 801fd00:	55555555 	.word	0x55555555
 801fd04:	3fd55555 	.word	0x3fd55555
 801fd08:	652b82fe 	.word	0x652b82fe
 801fd0c:	3ff71547 	.word	0x3ff71547
 801fd10:	00000000 	.word	0x00000000
 801fd14:	bff00000 	.word	0xbff00000
 801fd18:	8800759c 	.word	0x8800759c
 801fd1c:	7e37e43c 	.word	0x7e37e43c
 801fd20:	3ff00000 	.word	0x3ff00000
 801fd24:	3fd00000 	.word	0x3fd00000
 801fd28:	3fe00000 	.word	0x3fe00000
 801fd2c:	408fffff 	.word	0x408fffff
 801fd30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801fd34:	f04f 0200 	mov.w	r2, #0
 801fd38:	da05      	bge.n	801fd46 <__ieee754_pow+0x3de>
 801fd3a:	4bd3      	ldr	r3, [pc, #844]	; (8020088 <__ieee754_pow+0x720>)
 801fd3c:	f7e0 fc6c 	bl	8000618 <__aeabi_dmul>
 801fd40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801fd44:	460c      	mov	r4, r1
 801fd46:	1523      	asrs	r3, r4, #20
 801fd48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fd4c:	4413      	add	r3, r2
 801fd4e:	9309      	str	r3, [sp, #36]	; 0x24
 801fd50:	4bce      	ldr	r3, [pc, #824]	; (802008c <__ieee754_pow+0x724>)
 801fd52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801fd56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801fd5a:	429c      	cmp	r4, r3
 801fd5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801fd60:	dd08      	ble.n	801fd74 <__ieee754_pow+0x40c>
 801fd62:	4bcb      	ldr	r3, [pc, #812]	; (8020090 <__ieee754_pow+0x728>)
 801fd64:	429c      	cmp	r4, r3
 801fd66:	f340 815e 	ble.w	8020026 <__ieee754_pow+0x6be>
 801fd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd6c:	3301      	adds	r3, #1
 801fd6e:	9309      	str	r3, [sp, #36]	; 0x24
 801fd70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801fd74:	f04f 0a00 	mov.w	sl, #0
 801fd78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801fd7c:	930c      	str	r3, [sp, #48]	; 0x30
 801fd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd80:	4bc4      	ldr	r3, [pc, #784]	; (8020094 <__ieee754_pow+0x72c>)
 801fd82:	4413      	add	r3, r2
 801fd84:	ed93 7b00 	vldr	d7, [r3]
 801fd88:	4629      	mov	r1, r5
 801fd8a:	ec53 2b17 	vmov	r2, r3, d7
 801fd8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fd92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801fd96:	f7e0 fa87 	bl	80002a8 <__aeabi_dsub>
 801fd9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801fd9e:	4606      	mov	r6, r0
 801fda0:	460f      	mov	r7, r1
 801fda2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fda6:	f7e0 fa81 	bl	80002ac <__adddf3>
 801fdaa:	4602      	mov	r2, r0
 801fdac:	460b      	mov	r3, r1
 801fdae:	2000      	movs	r0, #0
 801fdb0:	49b9      	ldr	r1, [pc, #740]	; (8020098 <__ieee754_pow+0x730>)
 801fdb2:	f7e0 fd5b 	bl	800086c <__aeabi_ddiv>
 801fdb6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801fdba:	4602      	mov	r2, r0
 801fdbc:	460b      	mov	r3, r1
 801fdbe:	4630      	mov	r0, r6
 801fdc0:	4639      	mov	r1, r7
 801fdc2:	f7e0 fc29 	bl	8000618 <__aeabi_dmul>
 801fdc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fdca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801fdce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801fdd2:	2300      	movs	r3, #0
 801fdd4:	9302      	str	r3, [sp, #8]
 801fdd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801fdda:	106d      	asrs	r5, r5, #1
 801fddc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801fde0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801fde4:	2200      	movs	r2, #0
 801fde6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801fdea:	4640      	mov	r0, r8
 801fdec:	4649      	mov	r1, r9
 801fdee:	4614      	mov	r4, r2
 801fdf0:	461d      	mov	r5, r3
 801fdf2:	f7e0 fc11 	bl	8000618 <__aeabi_dmul>
 801fdf6:	4602      	mov	r2, r0
 801fdf8:	460b      	mov	r3, r1
 801fdfa:	4630      	mov	r0, r6
 801fdfc:	4639      	mov	r1, r7
 801fdfe:	f7e0 fa53 	bl	80002a8 <__aeabi_dsub>
 801fe02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fe06:	4606      	mov	r6, r0
 801fe08:	460f      	mov	r7, r1
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	4629      	mov	r1, r5
 801fe0e:	f7e0 fa4b 	bl	80002a8 <__aeabi_dsub>
 801fe12:	4602      	mov	r2, r0
 801fe14:	460b      	mov	r3, r1
 801fe16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fe1a:	f7e0 fa45 	bl	80002a8 <__aeabi_dsub>
 801fe1e:	4642      	mov	r2, r8
 801fe20:	464b      	mov	r3, r9
 801fe22:	f7e0 fbf9 	bl	8000618 <__aeabi_dmul>
 801fe26:	4602      	mov	r2, r0
 801fe28:	460b      	mov	r3, r1
 801fe2a:	4630      	mov	r0, r6
 801fe2c:	4639      	mov	r1, r7
 801fe2e:	f7e0 fa3b 	bl	80002a8 <__aeabi_dsub>
 801fe32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801fe36:	f7e0 fbef 	bl	8000618 <__aeabi_dmul>
 801fe3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fe3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fe42:	4610      	mov	r0, r2
 801fe44:	4619      	mov	r1, r3
 801fe46:	f7e0 fbe7 	bl	8000618 <__aeabi_dmul>
 801fe4a:	a37b      	add	r3, pc, #492	; (adr r3, 8020038 <__ieee754_pow+0x6d0>)
 801fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe50:	4604      	mov	r4, r0
 801fe52:	460d      	mov	r5, r1
 801fe54:	f7e0 fbe0 	bl	8000618 <__aeabi_dmul>
 801fe58:	a379      	add	r3, pc, #484	; (adr r3, 8020040 <__ieee754_pow+0x6d8>)
 801fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe5e:	f7e0 fa25 	bl	80002ac <__adddf3>
 801fe62:	4622      	mov	r2, r4
 801fe64:	462b      	mov	r3, r5
 801fe66:	f7e0 fbd7 	bl	8000618 <__aeabi_dmul>
 801fe6a:	a377      	add	r3, pc, #476	; (adr r3, 8020048 <__ieee754_pow+0x6e0>)
 801fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe70:	f7e0 fa1c 	bl	80002ac <__adddf3>
 801fe74:	4622      	mov	r2, r4
 801fe76:	462b      	mov	r3, r5
 801fe78:	f7e0 fbce 	bl	8000618 <__aeabi_dmul>
 801fe7c:	a374      	add	r3, pc, #464	; (adr r3, 8020050 <__ieee754_pow+0x6e8>)
 801fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe82:	f7e0 fa13 	bl	80002ac <__adddf3>
 801fe86:	4622      	mov	r2, r4
 801fe88:	462b      	mov	r3, r5
 801fe8a:	f7e0 fbc5 	bl	8000618 <__aeabi_dmul>
 801fe8e:	a372      	add	r3, pc, #456	; (adr r3, 8020058 <__ieee754_pow+0x6f0>)
 801fe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe94:	f7e0 fa0a 	bl	80002ac <__adddf3>
 801fe98:	4622      	mov	r2, r4
 801fe9a:	462b      	mov	r3, r5
 801fe9c:	f7e0 fbbc 	bl	8000618 <__aeabi_dmul>
 801fea0:	a36f      	add	r3, pc, #444	; (adr r3, 8020060 <__ieee754_pow+0x6f8>)
 801fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea6:	f7e0 fa01 	bl	80002ac <__adddf3>
 801feaa:	4622      	mov	r2, r4
 801feac:	4606      	mov	r6, r0
 801feae:	460f      	mov	r7, r1
 801feb0:	462b      	mov	r3, r5
 801feb2:	4620      	mov	r0, r4
 801feb4:	4629      	mov	r1, r5
 801feb6:	f7e0 fbaf 	bl	8000618 <__aeabi_dmul>
 801feba:	4602      	mov	r2, r0
 801febc:	460b      	mov	r3, r1
 801febe:	4630      	mov	r0, r6
 801fec0:	4639      	mov	r1, r7
 801fec2:	f7e0 fba9 	bl	8000618 <__aeabi_dmul>
 801fec6:	4642      	mov	r2, r8
 801fec8:	4604      	mov	r4, r0
 801feca:	460d      	mov	r5, r1
 801fecc:	464b      	mov	r3, r9
 801fece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fed2:	f7e0 f9eb 	bl	80002ac <__adddf3>
 801fed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801feda:	f7e0 fb9d 	bl	8000618 <__aeabi_dmul>
 801fede:	4622      	mov	r2, r4
 801fee0:	462b      	mov	r3, r5
 801fee2:	f7e0 f9e3 	bl	80002ac <__adddf3>
 801fee6:	4642      	mov	r2, r8
 801fee8:	4606      	mov	r6, r0
 801feea:	460f      	mov	r7, r1
 801feec:	464b      	mov	r3, r9
 801feee:	4640      	mov	r0, r8
 801fef0:	4649      	mov	r1, r9
 801fef2:	f7e0 fb91 	bl	8000618 <__aeabi_dmul>
 801fef6:	2200      	movs	r2, #0
 801fef8:	4b68      	ldr	r3, [pc, #416]	; (802009c <__ieee754_pow+0x734>)
 801fefa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801fefe:	f7e0 f9d5 	bl	80002ac <__adddf3>
 801ff02:	4632      	mov	r2, r6
 801ff04:	463b      	mov	r3, r7
 801ff06:	f7e0 f9d1 	bl	80002ac <__adddf3>
 801ff0a:	9802      	ldr	r0, [sp, #8]
 801ff0c:	460d      	mov	r5, r1
 801ff0e:	4604      	mov	r4, r0
 801ff10:	4602      	mov	r2, r0
 801ff12:	460b      	mov	r3, r1
 801ff14:	4640      	mov	r0, r8
 801ff16:	4649      	mov	r1, r9
 801ff18:	f7e0 fb7e 	bl	8000618 <__aeabi_dmul>
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	4680      	mov	r8, r0
 801ff20:	4689      	mov	r9, r1
 801ff22:	4b5e      	ldr	r3, [pc, #376]	; (802009c <__ieee754_pow+0x734>)
 801ff24:	4620      	mov	r0, r4
 801ff26:	4629      	mov	r1, r5
 801ff28:	f7e0 f9be 	bl	80002a8 <__aeabi_dsub>
 801ff2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ff30:	f7e0 f9ba 	bl	80002a8 <__aeabi_dsub>
 801ff34:	4602      	mov	r2, r0
 801ff36:	460b      	mov	r3, r1
 801ff38:	4630      	mov	r0, r6
 801ff3a:	4639      	mov	r1, r7
 801ff3c:	f7e0 f9b4 	bl	80002a8 <__aeabi_dsub>
 801ff40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ff44:	f7e0 fb68 	bl	8000618 <__aeabi_dmul>
 801ff48:	4622      	mov	r2, r4
 801ff4a:	4606      	mov	r6, r0
 801ff4c:	460f      	mov	r7, r1
 801ff4e:	462b      	mov	r3, r5
 801ff50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ff54:	f7e0 fb60 	bl	8000618 <__aeabi_dmul>
 801ff58:	4602      	mov	r2, r0
 801ff5a:	460b      	mov	r3, r1
 801ff5c:	4630      	mov	r0, r6
 801ff5e:	4639      	mov	r1, r7
 801ff60:	f7e0 f9a4 	bl	80002ac <__adddf3>
 801ff64:	4606      	mov	r6, r0
 801ff66:	460f      	mov	r7, r1
 801ff68:	4602      	mov	r2, r0
 801ff6a:	460b      	mov	r3, r1
 801ff6c:	4640      	mov	r0, r8
 801ff6e:	4649      	mov	r1, r9
 801ff70:	f7e0 f99c 	bl	80002ac <__adddf3>
 801ff74:	9802      	ldr	r0, [sp, #8]
 801ff76:	a33c      	add	r3, pc, #240	; (adr r3, 8020068 <__ieee754_pow+0x700>)
 801ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff7c:	4604      	mov	r4, r0
 801ff7e:	460d      	mov	r5, r1
 801ff80:	f7e0 fb4a 	bl	8000618 <__aeabi_dmul>
 801ff84:	4642      	mov	r2, r8
 801ff86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ff8a:	464b      	mov	r3, r9
 801ff8c:	4620      	mov	r0, r4
 801ff8e:	4629      	mov	r1, r5
 801ff90:	f7e0 f98a 	bl	80002a8 <__aeabi_dsub>
 801ff94:	4602      	mov	r2, r0
 801ff96:	460b      	mov	r3, r1
 801ff98:	4630      	mov	r0, r6
 801ff9a:	4639      	mov	r1, r7
 801ff9c:	f7e0 f984 	bl	80002a8 <__aeabi_dsub>
 801ffa0:	a333      	add	r3, pc, #204	; (adr r3, 8020070 <__ieee754_pow+0x708>)
 801ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffa6:	f7e0 fb37 	bl	8000618 <__aeabi_dmul>
 801ffaa:	a333      	add	r3, pc, #204	; (adr r3, 8020078 <__ieee754_pow+0x710>)
 801ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffb0:	4606      	mov	r6, r0
 801ffb2:	460f      	mov	r7, r1
 801ffb4:	4620      	mov	r0, r4
 801ffb6:	4629      	mov	r1, r5
 801ffb8:	f7e0 fb2e 	bl	8000618 <__aeabi_dmul>
 801ffbc:	4602      	mov	r2, r0
 801ffbe:	460b      	mov	r3, r1
 801ffc0:	4630      	mov	r0, r6
 801ffc2:	4639      	mov	r1, r7
 801ffc4:	f7e0 f972 	bl	80002ac <__adddf3>
 801ffc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ffca:	4b35      	ldr	r3, [pc, #212]	; (80200a0 <__ieee754_pow+0x738>)
 801ffcc:	4413      	add	r3, r2
 801ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffd2:	f7e0 f96b 	bl	80002ac <__adddf3>
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ffda:	460d      	mov	r5, r1
 801ffdc:	f7e0 fab2 	bl	8000544 <__aeabi_i2d>
 801ffe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ffe2:	4b30      	ldr	r3, [pc, #192]	; (80200a4 <__ieee754_pow+0x73c>)
 801ffe4:	4413      	add	r3, r2
 801ffe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ffea:	4606      	mov	r6, r0
 801ffec:	460f      	mov	r7, r1
 801ffee:	4622      	mov	r2, r4
 801fff0:	462b      	mov	r3, r5
 801fff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fff6:	f7e0 f959 	bl	80002ac <__adddf3>
 801fffa:	4642      	mov	r2, r8
 801fffc:	464b      	mov	r3, r9
 801fffe:	f7e0 f955 	bl	80002ac <__adddf3>
 8020002:	4632      	mov	r2, r6
 8020004:	463b      	mov	r3, r7
 8020006:	f7e0 f951 	bl	80002ac <__adddf3>
 802000a:	9802      	ldr	r0, [sp, #8]
 802000c:	4632      	mov	r2, r6
 802000e:	463b      	mov	r3, r7
 8020010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020014:	f7e0 f948 	bl	80002a8 <__aeabi_dsub>
 8020018:	4642      	mov	r2, r8
 802001a:	464b      	mov	r3, r9
 802001c:	f7e0 f944 	bl	80002a8 <__aeabi_dsub>
 8020020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020024:	e607      	b.n	801fc36 <__ieee754_pow+0x2ce>
 8020026:	f04f 0a01 	mov.w	sl, #1
 802002a:	e6a5      	b.n	801fd78 <__ieee754_pow+0x410>
 802002c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8020080 <__ieee754_pow+0x718>
 8020030:	e613      	b.n	801fc5a <__ieee754_pow+0x2f2>
 8020032:	bf00      	nop
 8020034:	f3af 8000 	nop.w
 8020038:	4a454eef 	.word	0x4a454eef
 802003c:	3fca7e28 	.word	0x3fca7e28
 8020040:	93c9db65 	.word	0x93c9db65
 8020044:	3fcd864a 	.word	0x3fcd864a
 8020048:	a91d4101 	.word	0xa91d4101
 802004c:	3fd17460 	.word	0x3fd17460
 8020050:	518f264d 	.word	0x518f264d
 8020054:	3fd55555 	.word	0x3fd55555
 8020058:	db6fabff 	.word	0xdb6fabff
 802005c:	3fdb6db6 	.word	0x3fdb6db6
 8020060:	33333303 	.word	0x33333303
 8020064:	3fe33333 	.word	0x3fe33333
 8020068:	e0000000 	.word	0xe0000000
 802006c:	3feec709 	.word	0x3feec709
 8020070:	dc3a03fd 	.word	0xdc3a03fd
 8020074:	3feec709 	.word	0x3feec709
 8020078:	145b01f5 	.word	0x145b01f5
 802007c:	be3e2fe0 	.word	0xbe3e2fe0
 8020080:	00000000 	.word	0x00000000
 8020084:	3ff00000 	.word	0x3ff00000
 8020088:	43400000 	.word	0x43400000
 802008c:	0003988e 	.word	0x0003988e
 8020090:	000bb679 	.word	0x000bb679
 8020094:	08024d28 	.word	0x08024d28
 8020098:	3ff00000 	.word	0x3ff00000
 802009c:	40080000 	.word	0x40080000
 80200a0:	08024d48 	.word	0x08024d48
 80200a4:	08024d38 	.word	0x08024d38
 80200a8:	a3b4      	add	r3, pc, #720	; (adr r3, 802037c <__ieee754_pow+0xa14>)
 80200aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200ae:	4640      	mov	r0, r8
 80200b0:	4649      	mov	r1, r9
 80200b2:	f7e0 f8fb 	bl	80002ac <__adddf3>
 80200b6:	4622      	mov	r2, r4
 80200b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80200bc:	462b      	mov	r3, r5
 80200be:	4630      	mov	r0, r6
 80200c0:	4639      	mov	r1, r7
 80200c2:	f7e0 f8f1 	bl	80002a8 <__aeabi_dsub>
 80200c6:	4602      	mov	r2, r0
 80200c8:	460b      	mov	r3, r1
 80200ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80200ce:	f7e0 fd33 	bl	8000b38 <__aeabi_dcmpgt>
 80200d2:	2800      	cmp	r0, #0
 80200d4:	f47f adfe 	bne.w	801fcd4 <__ieee754_pow+0x36c>
 80200d8:	4aa3      	ldr	r2, [pc, #652]	; (8020368 <__ieee754_pow+0xa00>)
 80200da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80200de:	4293      	cmp	r3, r2
 80200e0:	f340 810a 	ble.w	80202f8 <__ieee754_pow+0x990>
 80200e4:	151b      	asrs	r3, r3, #20
 80200e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80200ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80200ee:	fa4a f303 	asr.w	r3, sl, r3
 80200f2:	445b      	add	r3, fp
 80200f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80200f8:	4e9c      	ldr	r6, [pc, #624]	; (802036c <__ieee754_pow+0xa04>)
 80200fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80200fe:	4116      	asrs	r6, r2
 8020100:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020104:	2000      	movs	r0, #0
 8020106:	ea23 0106 	bic.w	r1, r3, r6
 802010a:	f1c2 0214 	rsb	r2, r2, #20
 802010e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020112:	fa4a fa02 	asr.w	sl, sl, r2
 8020116:	f1bb 0f00 	cmp.w	fp, #0
 802011a:	4602      	mov	r2, r0
 802011c:	460b      	mov	r3, r1
 802011e:	4620      	mov	r0, r4
 8020120:	4629      	mov	r1, r5
 8020122:	bfb8      	it	lt
 8020124:	f1ca 0a00 	rsblt	sl, sl, #0
 8020128:	f7e0 f8be 	bl	80002a8 <__aeabi_dsub>
 802012c:	e9cd 0100 	strd	r0, r1, [sp]
 8020130:	4642      	mov	r2, r8
 8020132:	464b      	mov	r3, r9
 8020134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020138:	f7e0 f8b8 	bl	80002ac <__adddf3>
 802013c:	2000      	movs	r0, #0
 802013e:	a378      	add	r3, pc, #480	; (adr r3, 8020320 <__ieee754_pow+0x9b8>)
 8020140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020144:	4604      	mov	r4, r0
 8020146:	460d      	mov	r5, r1
 8020148:	f7e0 fa66 	bl	8000618 <__aeabi_dmul>
 802014c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020150:	4606      	mov	r6, r0
 8020152:	460f      	mov	r7, r1
 8020154:	4620      	mov	r0, r4
 8020156:	4629      	mov	r1, r5
 8020158:	f7e0 f8a6 	bl	80002a8 <__aeabi_dsub>
 802015c:	4602      	mov	r2, r0
 802015e:	460b      	mov	r3, r1
 8020160:	4640      	mov	r0, r8
 8020162:	4649      	mov	r1, r9
 8020164:	f7e0 f8a0 	bl	80002a8 <__aeabi_dsub>
 8020168:	a36f      	add	r3, pc, #444	; (adr r3, 8020328 <__ieee754_pow+0x9c0>)
 802016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802016e:	f7e0 fa53 	bl	8000618 <__aeabi_dmul>
 8020172:	a36f      	add	r3, pc, #444	; (adr r3, 8020330 <__ieee754_pow+0x9c8>)
 8020174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020178:	4680      	mov	r8, r0
 802017a:	4689      	mov	r9, r1
 802017c:	4620      	mov	r0, r4
 802017e:	4629      	mov	r1, r5
 8020180:	f7e0 fa4a 	bl	8000618 <__aeabi_dmul>
 8020184:	4602      	mov	r2, r0
 8020186:	460b      	mov	r3, r1
 8020188:	4640      	mov	r0, r8
 802018a:	4649      	mov	r1, r9
 802018c:	f7e0 f88e 	bl	80002ac <__adddf3>
 8020190:	4604      	mov	r4, r0
 8020192:	460d      	mov	r5, r1
 8020194:	4602      	mov	r2, r0
 8020196:	460b      	mov	r3, r1
 8020198:	4630      	mov	r0, r6
 802019a:	4639      	mov	r1, r7
 802019c:	f7e0 f886 	bl	80002ac <__adddf3>
 80201a0:	4632      	mov	r2, r6
 80201a2:	463b      	mov	r3, r7
 80201a4:	4680      	mov	r8, r0
 80201a6:	4689      	mov	r9, r1
 80201a8:	f7e0 f87e 	bl	80002a8 <__aeabi_dsub>
 80201ac:	4602      	mov	r2, r0
 80201ae:	460b      	mov	r3, r1
 80201b0:	4620      	mov	r0, r4
 80201b2:	4629      	mov	r1, r5
 80201b4:	f7e0 f878 	bl	80002a8 <__aeabi_dsub>
 80201b8:	4642      	mov	r2, r8
 80201ba:	4606      	mov	r6, r0
 80201bc:	460f      	mov	r7, r1
 80201be:	464b      	mov	r3, r9
 80201c0:	4640      	mov	r0, r8
 80201c2:	4649      	mov	r1, r9
 80201c4:	f7e0 fa28 	bl	8000618 <__aeabi_dmul>
 80201c8:	a35b      	add	r3, pc, #364	; (adr r3, 8020338 <__ieee754_pow+0x9d0>)
 80201ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ce:	4604      	mov	r4, r0
 80201d0:	460d      	mov	r5, r1
 80201d2:	f7e0 fa21 	bl	8000618 <__aeabi_dmul>
 80201d6:	a35a      	add	r3, pc, #360	; (adr r3, 8020340 <__ieee754_pow+0x9d8>)
 80201d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201dc:	f7e0 f864 	bl	80002a8 <__aeabi_dsub>
 80201e0:	4622      	mov	r2, r4
 80201e2:	462b      	mov	r3, r5
 80201e4:	f7e0 fa18 	bl	8000618 <__aeabi_dmul>
 80201e8:	a357      	add	r3, pc, #348	; (adr r3, 8020348 <__ieee754_pow+0x9e0>)
 80201ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ee:	f7e0 f85d 	bl	80002ac <__adddf3>
 80201f2:	4622      	mov	r2, r4
 80201f4:	462b      	mov	r3, r5
 80201f6:	f7e0 fa0f 	bl	8000618 <__aeabi_dmul>
 80201fa:	a355      	add	r3, pc, #340	; (adr r3, 8020350 <__ieee754_pow+0x9e8>)
 80201fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020200:	f7e0 f852 	bl	80002a8 <__aeabi_dsub>
 8020204:	4622      	mov	r2, r4
 8020206:	462b      	mov	r3, r5
 8020208:	f7e0 fa06 	bl	8000618 <__aeabi_dmul>
 802020c:	a352      	add	r3, pc, #328	; (adr r3, 8020358 <__ieee754_pow+0x9f0>)
 802020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020212:	f7e0 f84b 	bl	80002ac <__adddf3>
 8020216:	4622      	mov	r2, r4
 8020218:	462b      	mov	r3, r5
 802021a:	f7e0 f9fd 	bl	8000618 <__aeabi_dmul>
 802021e:	4602      	mov	r2, r0
 8020220:	460b      	mov	r3, r1
 8020222:	4640      	mov	r0, r8
 8020224:	4649      	mov	r1, r9
 8020226:	f7e0 f83f 	bl	80002a8 <__aeabi_dsub>
 802022a:	4604      	mov	r4, r0
 802022c:	460d      	mov	r5, r1
 802022e:	4602      	mov	r2, r0
 8020230:	460b      	mov	r3, r1
 8020232:	4640      	mov	r0, r8
 8020234:	4649      	mov	r1, r9
 8020236:	f7e0 f9ef 	bl	8000618 <__aeabi_dmul>
 802023a:	2200      	movs	r2, #0
 802023c:	e9cd 0100 	strd	r0, r1, [sp]
 8020240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020244:	4620      	mov	r0, r4
 8020246:	4629      	mov	r1, r5
 8020248:	f7e0 f82e 	bl	80002a8 <__aeabi_dsub>
 802024c:	4602      	mov	r2, r0
 802024e:	460b      	mov	r3, r1
 8020250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020254:	f7e0 fb0a 	bl	800086c <__aeabi_ddiv>
 8020258:	4632      	mov	r2, r6
 802025a:	4604      	mov	r4, r0
 802025c:	460d      	mov	r5, r1
 802025e:	463b      	mov	r3, r7
 8020260:	4640      	mov	r0, r8
 8020262:	4649      	mov	r1, r9
 8020264:	f7e0 f9d8 	bl	8000618 <__aeabi_dmul>
 8020268:	4632      	mov	r2, r6
 802026a:	463b      	mov	r3, r7
 802026c:	f7e0 f81e 	bl	80002ac <__adddf3>
 8020270:	4602      	mov	r2, r0
 8020272:	460b      	mov	r3, r1
 8020274:	4620      	mov	r0, r4
 8020276:	4629      	mov	r1, r5
 8020278:	f7e0 f816 	bl	80002a8 <__aeabi_dsub>
 802027c:	4642      	mov	r2, r8
 802027e:	464b      	mov	r3, r9
 8020280:	f7e0 f812 	bl	80002a8 <__aeabi_dsub>
 8020284:	4602      	mov	r2, r0
 8020286:	460b      	mov	r3, r1
 8020288:	2000      	movs	r0, #0
 802028a:	4939      	ldr	r1, [pc, #228]	; (8020370 <__ieee754_pow+0xa08>)
 802028c:	f7e0 f80c 	bl	80002a8 <__aeabi_dsub>
 8020290:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8020294:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020298:	4602      	mov	r2, r0
 802029a:	460b      	mov	r3, r1
 802029c:	da2f      	bge.n	80202fe <__ieee754_pow+0x996>
 802029e:	4650      	mov	r0, sl
 80202a0:	ec43 2b10 	vmov	d0, r2, r3
 80202a4:	f000 f9c0 	bl	8020628 <scalbn>
 80202a8:	ec51 0b10 	vmov	r0, r1, d0
 80202ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202b0:	f7ff bbf1 	b.w	801fa96 <__ieee754_pow+0x12e>
 80202b4:	4b2f      	ldr	r3, [pc, #188]	; (8020374 <__ieee754_pow+0xa0c>)
 80202b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80202ba:	429e      	cmp	r6, r3
 80202bc:	f77f af0c 	ble.w	80200d8 <__ieee754_pow+0x770>
 80202c0:	4b2d      	ldr	r3, [pc, #180]	; (8020378 <__ieee754_pow+0xa10>)
 80202c2:	440b      	add	r3, r1
 80202c4:	4303      	orrs	r3, r0
 80202c6:	d00b      	beq.n	80202e0 <__ieee754_pow+0x978>
 80202c8:	a325      	add	r3, pc, #148	; (adr r3, 8020360 <__ieee754_pow+0x9f8>)
 80202ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202d2:	f7e0 f9a1 	bl	8000618 <__aeabi_dmul>
 80202d6:	a322      	add	r3, pc, #136	; (adr r3, 8020360 <__ieee754_pow+0x9f8>)
 80202d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202dc:	f7ff bbdb 	b.w	801fa96 <__ieee754_pow+0x12e>
 80202e0:	4622      	mov	r2, r4
 80202e2:	462b      	mov	r3, r5
 80202e4:	f7df ffe0 	bl	80002a8 <__aeabi_dsub>
 80202e8:	4642      	mov	r2, r8
 80202ea:	464b      	mov	r3, r9
 80202ec:	f7e0 fc1a 	bl	8000b24 <__aeabi_dcmpge>
 80202f0:	2800      	cmp	r0, #0
 80202f2:	f43f aef1 	beq.w	80200d8 <__ieee754_pow+0x770>
 80202f6:	e7e7      	b.n	80202c8 <__ieee754_pow+0x960>
 80202f8:	f04f 0a00 	mov.w	sl, #0
 80202fc:	e718      	b.n	8020130 <__ieee754_pow+0x7c8>
 80202fe:	4621      	mov	r1, r4
 8020300:	e7d4      	b.n	80202ac <__ieee754_pow+0x944>
 8020302:	2000      	movs	r0, #0
 8020304:	491a      	ldr	r1, [pc, #104]	; (8020370 <__ieee754_pow+0xa08>)
 8020306:	f7ff bb8f 	b.w	801fa28 <__ieee754_pow+0xc0>
 802030a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802030e:	f7ff bb8b 	b.w	801fa28 <__ieee754_pow+0xc0>
 8020312:	4630      	mov	r0, r6
 8020314:	4639      	mov	r1, r7
 8020316:	f7ff bb87 	b.w	801fa28 <__ieee754_pow+0xc0>
 802031a:	4693      	mov	fp, r2
 802031c:	f7ff bb98 	b.w	801fa50 <__ieee754_pow+0xe8>
 8020320:	00000000 	.word	0x00000000
 8020324:	3fe62e43 	.word	0x3fe62e43
 8020328:	fefa39ef 	.word	0xfefa39ef
 802032c:	3fe62e42 	.word	0x3fe62e42
 8020330:	0ca86c39 	.word	0x0ca86c39
 8020334:	be205c61 	.word	0xbe205c61
 8020338:	72bea4d0 	.word	0x72bea4d0
 802033c:	3e663769 	.word	0x3e663769
 8020340:	c5d26bf1 	.word	0xc5d26bf1
 8020344:	3ebbbd41 	.word	0x3ebbbd41
 8020348:	af25de2c 	.word	0xaf25de2c
 802034c:	3f11566a 	.word	0x3f11566a
 8020350:	16bebd93 	.word	0x16bebd93
 8020354:	3f66c16c 	.word	0x3f66c16c
 8020358:	5555553e 	.word	0x5555553e
 802035c:	3fc55555 	.word	0x3fc55555
 8020360:	c2f8f359 	.word	0xc2f8f359
 8020364:	01a56e1f 	.word	0x01a56e1f
 8020368:	3fe00000 	.word	0x3fe00000
 802036c:	000fffff 	.word	0x000fffff
 8020370:	3ff00000 	.word	0x3ff00000
 8020374:	4090cbff 	.word	0x4090cbff
 8020378:	3f6f3400 	.word	0x3f6f3400
 802037c:	652b82fe 	.word	0x652b82fe
 8020380:	3c971547 	.word	0x3c971547

08020384 <__ieee754_sqrt>:
 8020384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020388:	4955      	ldr	r1, [pc, #340]	; (80204e0 <__ieee754_sqrt+0x15c>)
 802038a:	ec55 4b10 	vmov	r4, r5, d0
 802038e:	43a9      	bics	r1, r5
 8020390:	462b      	mov	r3, r5
 8020392:	462a      	mov	r2, r5
 8020394:	d112      	bne.n	80203bc <__ieee754_sqrt+0x38>
 8020396:	ee10 2a10 	vmov	r2, s0
 802039a:	ee10 0a10 	vmov	r0, s0
 802039e:	4629      	mov	r1, r5
 80203a0:	f7e0 f93a 	bl	8000618 <__aeabi_dmul>
 80203a4:	4602      	mov	r2, r0
 80203a6:	460b      	mov	r3, r1
 80203a8:	4620      	mov	r0, r4
 80203aa:	4629      	mov	r1, r5
 80203ac:	f7df ff7e 	bl	80002ac <__adddf3>
 80203b0:	4604      	mov	r4, r0
 80203b2:	460d      	mov	r5, r1
 80203b4:	ec45 4b10 	vmov	d0, r4, r5
 80203b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203bc:	2d00      	cmp	r5, #0
 80203be:	ee10 0a10 	vmov	r0, s0
 80203c2:	4621      	mov	r1, r4
 80203c4:	dc0f      	bgt.n	80203e6 <__ieee754_sqrt+0x62>
 80203c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80203ca:	4330      	orrs	r0, r6
 80203cc:	d0f2      	beq.n	80203b4 <__ieee754_sqrt+0x30>
 80203ce:	b155      	cbz	r5, 80203e6 <__ieee754_sqrt+0x62>
 80203d0:	ee10 2a10 	vmov	r2, s0
 80203d4:	4620      	mov	r0, r4
 80203d6:	4629      	mov	r1, r5
 80203d8:	f7df ff66 	bl	80002a8 <__aeabi_dsub>
 80203dc:	4602      	mov	r2, r0
 80203de:	460b      	mov	r3, r1
 80203e0:	f7e0 fa44 	bl	800086c <__aeabi_ddiv>
 80203e4:	e7e4      	b.n	80203b0 <__ieee754_sqrt+0x2c>
 80203e6:	151b      	asrs	r3, r3, #20
 80203e8:	d073      	beq.n	80204d2 <__ieee754_sqrt+0x14e>
 80203ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80203ee:	07dd      	lsls	r5, r3, #31
 80203f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80203f4:	bf48      	it	mi
 80203f6:	0fc8      	lsrmi	r0, r1, #31
 80203f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80203fc:	bf44      	itt	mi
 80203fe:	0049      	lslmi	r1, r1, #1
 8020400:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8020404:	2500      	movs	r5, #0
 8020406:	1058      	asrs	r0, r3, #1
 8020408:	0fcb      	lsrs	r3, r1, #31
 802040a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 802040e:	0049      	lsls	r1, r1, #1
 8020410:	2316      	movs	r3, #22
 8020412:	462c      	mov	r4, r5
 8020414:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8020418:	19a7      	adds	r7, r4, r6
 802041a:	4297      	cmp	r7, r2
 802041c:	bfde      	ittt	le
 802041e:	19bc      	addle	r4, r7, r6
 8020420:	1bd2      	suble	r2, r2, r7
 8020422:	19ad      	addle	r5, r5, r6
 8020424:	0fcf      	lsrs	r7, r1, #31
 8020426:	3b01      	subs	r3, #1
 8020428:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 802042c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020430:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020434:	d1f0      	bne.n	8020418 <__ieee754_sqrt+0x94>
 8020436:	f04f 0c20 	mov.w	ip, #32
 802043a:	469e      	mov	lr, r3
 802043c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8020440:	42a2      	cmp	r2, r4
 8020442:	eb06 070e 	add.w	r7, r6, lr
 8020446:	dc02      	bgt.n	802044e <__ieee754_sqrt+0xca>
 8020448:	d112      	bne.n	8020470 <__ieee754_sqrt+0xec>
 802044a:	428f      	cmp	r7, r1
 802044c:	d810      	bhi.n	8020470 <__ieee754_sqrt+0xec>
 802044e:	2f00      	cmp	r7, #0
 8020450:	eb07 0e06 	add.w	lr, r7, r6
 8020454:	da42      	bge.n	80204dc <__ieee754_sqrt+0x158>
 8020456:	f1be 0f00 	cmp.w	lr, #0
 802045a:	db3f      	blt.n	80204dc <__ieee754_sqrt+0x158>
 802045c:	f104 0801 	add.w	r8, r4, #1
 8020460:	1b12      	subs	r2, r2, r4
 8020462:	428f      	cmp	r7, r1
 8020464:	bf88      	it	hi
 8020466:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802046a:	1bc9      	subs	r1, r1, r7
 802046c:	4433      	add	r3, r6
 802046e:	4644      	mov	r4, r8
 8020470:	0052      	lsls	r2, r2, #1
 8020472:	f1bc 0c01 	subs.w	ip, ip, #1
 8020476:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 802047a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802047e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020482:	d1dd      	bne.n	8020440 <__ieee754_sqrt+0xbc>
 8020484:	430a      	orrs	r2, r1
 8020486:	d006      	beq.n	8020496 <__ieee754_sqrt+0x112>
 8020488:	1c5c      	adds	r4, r3, #1
 802048a:	bf13      	iteet	ne
 802048c:	3301      	addne	r3, #1
 802048e:	3501      	addeq	r5, #1
 8020490:	4663      	moveq	r3, ip
 8020492:	f023 0301 	bicne.w	r3, r3, #1
 8020496:	106a      	asrs	r2, r5, #1
 8020498:	085b      	lsrs	r3, r3, #1
 802049a:	07e9      	lsls	r1, r5, #31
 802049c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80204a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80204a4:	bf48      	it	mi
 80204a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80204aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80204ae:	461c      	mov	r4, r3
 80204b0:	e780      	b.n	80203b4 <__ieee754_sqrt+0x30>
 80204b2:	0aca      	lsrs	r2, r1, #11
 80204b4:	3815      	subs	r0, #21
 80204b6:	0549      	lsls	r1, r1, #21
 80204b8:	2a00      	cmp	r2, #0
 80204ba:	d0fa      	beq.n	80204b2 <__ieee754_sqrt+0x12e>
 80204bc:	02d6      	lsls	r6, r2, #11
 80204be:	d50a      	bpl.n	80204d6 <__ieee754_sqrt+0x152>
 80204c0:	f1c3 0420 	rsb	r4, r3, #32
 80204c4:	fa21 f404 	lsr.w	r4, r1, r4
 80204c8:	1e5d      	subs	r5, r3, #1
 80204ca:	4099      	lsls	r1, r3
 80204cc:	4322      	orrs	r2, r4
 80204ce:	1b43      	subs	r3, r0, r5
 80204d0:	e78b      	b.n	80203ea <__ieee754_sqrt+0x66>
 80204d2:	4618      	mov	r0, r3
 80204d4:	e7f0      	b.n	80204b8 <__ieee754_sqrt+0x134>
 80204d6:	0052      	lsls	r2, r2, #1
 80204d8:	3301      	adds	r3, #1
 80204da:	e7ef      	b.n	80204bc <__ieee754_sqrt+0x138>
 80204dc:	46a0      	mov	r8, r4
 80204de:	e7bf      	b.n	8020460 <__ieee754_sqrt+0xdc>
 80204e0:	7ff00000 	.word	0x7ff00000

080204e4 <fabs>:
 80204e4:	ec51 0b10 	vmov	r0, r1, d0
 80204e8:	ee10 2a10 	vmov	r2, s0
 80204ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80204f0:	ec43 2b10 	vmov	d0, r2, r3
 80204f4:	4770      	bx	lr

080204f6 <finite>:
 80204f6:	ee10 3a90 	vmov	r3, s1
 80204fa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80204fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8020502:	0fc0      	lsrs	r0, r0, #31
 8020504:	4770      	bx	lr

08020506 <matherr>:
 8020506:	2000      	movs	r0, #0
 8020508:	4770      	bx	lr
 802050a:	0000      	movs	r0, r0
 802050c:	0000      	movs	r0, r0
	...

08020510 <nan>:
 8020510:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020518 <nan+0x8>
 8020514:	4770      	bx	lr
 8020516:	bf00      	nop
 8020518:	00000000 	.word	0x00000000
 802051c:	7ff80000 	.word	0x7ff80000

08020520 <rint>:
 8020520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020522:	ec51 0b10 	vmov	r0, r1, d0
 8020526:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802052a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802052e:	2e13      	cmp	r6, #19
 8020530:	460b      	mov	r3, r1
 8020532:	ee10 4a10 	vmov	r4, s0
 8020536:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802053a:	dc56      	bgt.n	80205ea <rint+0xca>
 802053c:	2e00      	cmp	r6, #0
 802053e:	da2b      	bge.n	8020598 <rint+0x78>
 8020540:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8020544:	4302      	orrs	r2, r0
 8020546:	d023      	beq.n	8020590 <rint+0x70>
 8020548:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802054c:	4302      	orrs	r2, r0
 802054e:	4254      	negs	r4, r2
 8020550:	4314      	orrs	r4, r2
 8020552:	0c4b      	lsrs	r3, r1, #17
 8020554:	0b24      	lsrs	r4, r4, #12
 8020556:	045b      	lsls	r3, r3, #17
 8020558:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802055c:	ea44 0103 	orr.w	r1, r4, r3
 8020560:	460b      	mov	r3, r1
 8020562:	492f      	ldr	r1, [pc, #188]	; (8020620 <rint+0x100>)
 8020564:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8020568:	e9d1 6700 	ldrd	r6, r7, [r1]
 802056c:	4602      	mov	r2, r0
 802056e:	4639      	mov	r1, r7
 8020570:	4630      	mov	r0, r6
 8020572:	f7df fe9b 	bl	80002ac <__adddf3>
 8020576:	e9cd 0100 	strd	r0, r1, [sp]
 802057a:	463b      	mov	r3, r7
 802057c:	4632      	mov	r2, r6
 802057e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020582:	f7df fe91 	bl	80002a8 <__aeabi_dsub>
 8020586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802058a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802058e:	4639      	mov	r1, r7
 8020590:	ec41 0b10 	vmov	d0, r0, r1
 8020594:	b003      	add	sp, #12
 8020596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020598:	4a22      	ldr	r2, [pc, #136]	; (8020624 <rint+0x104>)
 802059a:	4132      	asrs	r2, r6
 802059c:	ea01 0702 	and.w	r7, r1, r2
 80205a0:	4307      	orrs	r7, r0
 80205a2:	d0f5      	beq.n	8020590 <rint+0x70>
 80205a4:	0852      	lsrs	r2, r2, #1
 80205a6:	4011      	ands	r1, r2
 80205a8:	430c      	orrs	r4, r1
 80205aa:	d00b      	beq.n	80205c4 <rint+0xa4>
 80205ac:	ea23 0202 	bic.w	r2, r3, r2
 80205b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80205b4:	2e13      	cmp	r6, #19
 80205b6:	fa43 f306 	asr.w	r3, r3, r6
 80205ba:	bf0c      	ite	eq
 80205bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80205c0:	2400      	movne	r4, #0
 80205c2:	4313      	orrs	r3, r2
 80205c4:	4916      	ldr	r1, [pc, #88]	; (8020620 <rint+0x100>)
 80205c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80205ca:	4622      	mov	r2, r4
 80205cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80205d0:	4620      	mov	r0, r4
 80205d2:	4629      	mov	r1, r5
 80205d4:	f7df fe6a 	bl	80002ac <__adddf3>
 80205d8:	e9cd 0100 	strd	r0, r1, [sp]
 80205dc:	4622      	mov	r2, r4
 80205de:	462b      	mov	r3, r5
 80205e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80205e4:	f7df fe60 	bl	80002a8 <__aeabi_dsub>
 80205e8:	e7d2      	b.n	8020590 <rint+0x70>
 80205ea:	2e33      	cmp	r6, #51	; 0x33
 80205ec:	dd07      	ble.n	80205fe <rint+0xde>
 80205ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80205f2:	d1cd      	bne.n	8020590 <rint+0x70>
 80205f4:	ee10 2a10 	vmov	r2, s0
 80205f8:	f7df fe58 	bl	80002ac <__adddf3>
 80205fc:	e7c8      	b.n	8020590 <rint+0x70>
 80205fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8020602:	f04f 32ff 	mov.w	r2, #4294967295
 8020606:	40f2      	lsrs	r2, r6
 8020608:	4210      	tst	r0, r2
 802060a:	d0c1      	beq.n	8020590 <rint+0x70>
 802060c:	0852      	lsrs	r2, r2, #1
 802060e:	4210      	tst	r0, r2
 8020610:	bf1f      	itttt	ne
 8020612:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8020616:	ea20 0202 	bicne.w	r2, r0, r2
 802061a:	4134      	asrne	r4, r6
 802061c:	4314      	orrne	r4, r2
 802061e:	e7d1      	b.n	80205c4 <rint+0xa4>
 8020620:	08024d58 	.word	0x08024d58
 8020624:	000fffff 	.word	0x000fffff

08020628 <scalbn>:
 8020628:	b570      	push	{r4, r5, r6, lr}
 802062a:	ec55 4b10 	vmov	r4, r5, d0
 802062e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8020632:	4606      	mov	r6, r0
 8020634:	462b      	mov	r3, r5
 8020636:	b9aa      	cbnz	r2, 8020664 <scalbn+0x3c>
 8020638:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802063c:	4323      	orrs	r3, r4
 802063e:	d03b      	beq.n	80206b8 <scalbn+0x90>
 8020640:	4b31      	ldr	r3, [pc, #196]	; (8020708 <scalbn+0xe0>)
 8020642:	4629      	mov	r1, r5
 8020644:	2200      	movs	r2, #0
 8020646:	ee10 0a10 	vmov	r0, s0
 802064a:	f7df ffe5 	bl	8000618 <__aeabi_dmul>
 802064e:	4b2f      	ldr	r3, [pc, #188]	; (802070c <scalbn+0xe4>)
 8020650:	429e      	cmp	r6, r3
 8020652:	4604      	mov	r4, r0
 8020654:	460d      	mov	r5, r1
 8020656:	da12      	bge.n	802067e <scalbn+0x56>
 8020658:	a327      	add	r3, pc, #156	; (adr r3, 80206f8 <scalbn+0xd0>)
 802065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802065e:	f7df ffdb 	bl	8000618 <__aeabi_dmul>
 8020662:	e009      	b.n	8020678 <scalbn+0x50>
 8020664:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8020668:	428a      	cmp	r2, r1
 802066a:	d10c      	bne.n	8020686 <scalbn+0x5e>
 802066c:	ee10 2a10 	vmov	r2, s0
 8020670:	4620      	mov	r0, r4
 8020672:	4629      	mov	r1, r5
 8020674:	f7df fe1a 	bl	80002ac <__adddf3>
 8020678:	4604      	mov	r4, r0
 802067a:	460d      	mov	r5, r1
 802067c:	e01c      	b.n	80206b8 <scalbn+0x90>
 802067e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8020682:	460b      	mov	r3, r1
 8020684:	3a36      	subs	r2, #54	; 0x36
 8020686:	4432      	add	r2, r6
 8020688:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802068c:	428a      	cmp	r2, r1
 802068e:	dd0b      	ble.n	80206a8 <scalbn+0x80>
 8020690:	ec45 4b11 	vmov	d1, r4, r5
 8020694:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8020700 <scalbn+0xd8>
 8020698:	f000 f83c 	bl	8020714 <copysign>
 802069c:	a318      	add	r3, pc, #96	; (adr r3, 8020700 <scalbn+0xd8>)
 802069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206a2:	ec51 0b10 	vmov	r0, r1, d0
 80206a6:	e7da      	b.n	802065e <scalbn+0x36>
 80206a8:	2a00      	cmp	r2, #0
 80206aa:	dd08      	ble.n	80206be <scalbn+0x96>
 80206ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80206b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80206b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80206b8:	ec45 4b10 	vmov	d0, r4, r5
 80206bc:	bd70      	pop	{r4, r5, r6, pc}
 80206be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80206c2:	da0d      	bge.n	80206e0 <scalbn+0xb8>
 80206c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80206c8:	429e      	cmp	r6, r3
 80206ca:	ec45 4b11 	vmov	d1, r4, r5
 80206ce:	dce1      	bgt.n	8020694 <scalbn+0x6c>
 80206d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80206f8 <scalbn+0xd0>
 80206d4:	f000 f81e 	bl	8020714 <copysign>
 80206d8:	a307      	add	r3, pc, #28	; (adr r3, 80206f8 <scalbn+0xd0>)
 80206da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206de:	e7e0      	b.n	80206a2 <scalbn+0x7a>
 80206e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80206e4:	3236      	adds	r2, #54	; 0x36
 80206e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80206ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80206ee:	4620      	mov	r0, r4
 80206f0:	4629      	mov	r1, r5
 80206f2:	2200      	movs	r2, #0
 80206f4:	4b06      	ldr	r3, [pc, #24]	; (8020710 <scalbn+0xe8>)
 80206f6:	e7b2      	b.n	802065e <scalbn+0x36>
 80206f8:	c2f8f359 	.word	0xc2f8f359
 80206fc:	01a56e1f 	.word	0x01a56e1f
 8020700:	8800759c 	.word	0x8800759c
 8020704:	7e37e43c 	.word	0x7e37e43c
 8020708:	43500000 	.word	0x43500000
 802070c:	ffff3cb0 	.word	0xffff3cb0
 8020710:	3c900000 	.word	0x3c900000

08020714 <copysign>:
 8020714:	ec51 0b10 	vmov	r0, r1, d0
 8020718:	ee11 0a90 	vmov	r0, s3
 802071c:	ee10 2a10 	vmov	r2, s0
 8020720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020724:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8020728:	ea41 0300 	orr.w	r3, r1, r0
 802072c:	ec43 2b10 	vmov	d0, r2, r3
 8020730:	4770      	bx	lr
	...

08020734 <__errno>:
 8020734:	4b01      	ldr	r3, [pc, #4]	; (802073c <__errno+0x8>)
 8020736:	6818      	ldr	r0, [r3, #0]
 8020738:	4770      	bx	lr
 802073a:	bf00      	nop
 802073c:	20000084 	.word	0x20000084

08020740 <_init>:
 8020740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020742:	bf00      	nop
 8020744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020746:	bc08      	pop	{r3}
 8020748:	469e      	mov	lr, r3
 802074a:	4770      	bx	lr

0802074c <_fini>:
 802074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802074e:	bf00      	nop
 8020750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020752:	bc08      	pop	{r3}
 8020754:	469e      	mov	lr, r3
 8020756:	4770      	bx	lr
